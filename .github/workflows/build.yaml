# This is a basic workflow to help you get started with Actions

name: CI_BUILD

# Controls when the action will run. Triggers the workflow on push
# events but only for the master branch
on:
  push:
    # only trigger on branches, not on tags
    branches: '**'
    paths-ignore:
      - 'docs/**'

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

# This workflow contains two jobs called "check_changes", "build_windows"
jobs:
  # Verify if a build is needed
  check_changes:
    name: Check changed files
    outputs:
      run_build_windows: ${{ steps.check_files.outputs.run_build_windows }}
    runs-on: ubuntu-latest
    steps:
      - id: get_changed_files
        uses: masesgroup/retrieve-changed-files@v3
        with:
          format: 'csv'
      - id: check_files
        run: |
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.get_changed_files.outputs.added_modified }}')
          for added_modified_file in "${added_modified_files[@]}"; do
              if [[ $added_modified_file == ".github/workflows/build.yaml"* ]]; then
                echo "$added_modified_file is myself."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/container/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/jvm/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/net/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "tests/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
          done
      - name: Get run_build_windows
        run: echo "The selected run_build_windows is ${{ steps.check_files.outputs.run_build_windows }}"

  build_container_netdroid_sdk:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'
          submodules: 'true'

      - name: Pre compile
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src/net/Netdroid/Netdroid.csproj
        env:
          GITHUB_SIMPLIFIED_GENERATION: true
          
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: temurin
          java-version: 11
          cache: 'maven'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Create Jars
        run: mvn --file ./src/jvm/netdroid/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/netdroid_sdk

      - name: Build and push
        id: push
        uses: docker/build-push-action@v6
        with:
          build-args: NETDROID_DOCKER_SDK_VERSION_ARG=35
          file: ./src/container/DockerfileSDK.linux
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true
          
      - name: Attest Docker Hub
        uses: actions/attest-build-provenance@v1
        id: attest
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/netdroid_sdk
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  build_container_netdroid:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'
          submodules: 'true'

      - name: Pre compile
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src/net/Netdroid/Netdroid.csproj
        env:
          GITHUB_SIMPLIFIED_GENERATION: true
          
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: temurin
          java-version: 11
          cache: 'maven'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Create Jars
        run: mvn --file ./src/jvm/netdroid/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/netdroid

      - name: Build and push
        id: push
        uses: docker/build-push-action@v6
        with:
          build-args: NETDROID_DOCKER_SDK_VERSION_ARG=35
          file: ./src/container/Dockerfile.linux
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true
          
      - name: Attest Docker Hub
        uses: actions/attest-build-provenance@v1
        id: attest
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/netdroid
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  # Now run "build_project"
  build_project:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:   
      # Runs a set of commands using the runners shell

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'
          submodules: 'true'

      - name: Pre compile
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src/net/Netdroid/Netdroid.csproj
        env:
          GITHUB_SIMPLIFIED_GENERATION: true
          
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: temurin
          java-version: 11
          cache: 'maven'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Create Jars for Netdroid
        run: mvn --file ./src/jvm/netdroid/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - uses: nuget/setup-nuget@v2.0.0
        with:
          nuget-version: '5.x'
          
      - name: Recompile to create nuget packages
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src/net/Netdroid.sln
        env:
          GITHUB_TEST_PREPARATION: true

      - uses: actions/upload-artifact@v4
        with:
          name: Netdroid
          path: ./bin/*nupkg

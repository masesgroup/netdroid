/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Icu.Text
{
    #region Normalizer declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/icu/text/Normalizer.html"/>
    /// </summary>
    public partial class Normalizer : Java.Lang.Cloneable
    {
        const string _bridgeClassName = "android.icu.text.Normalizer";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Normalizer() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Normalizer(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region QuickCheckResult declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Normalizer.QuickCheckResult.html"/>
        /// </summary>
        public partial class QuickCheckResult : MASES.JCOBridge.C2JBridge.JVMBridgeBase<QuickCheckResult>
        {
            const string _bridgeClassName = "android.icu.text.Normalizer$QuickCheckResult";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public QuickCheckResult() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public QuickCheckResult(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region Normalizer implementation
    public partial class Normalizer
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Normalizer.html#MAYBE"/>
        /// </summary>
        public static Android.Icu.Text.Normalizer.QuickCheckResult MAYBE { get { if (!_MAYBEReady) { _MAYBEContent = SGetField<Android.Icu.Text.Normalizer.QuickCheckResult>(LocalBridgeClazz, "MAYBE"); _MAYBEReady = true; } return _MAYBEContent; } }
        private static Android.Icu.Text.Normalizer.QuickCheckResult _MAYBEContent = default;
        private static bool _MAYBEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Normalizer.html#NO"/>
        /// </summary>
        public static Android.Icu.Text.Normalizer.QuickCheckResult NO { get { if (!_NOReady) { _NOContent = SGetField<Android.Icu.Text.Normalizer.QuickCheckResult>(LocalBridgeClazz, "NO"); _NOReady = true; } return _NOContent; } }
        private static Android.Icu.Text.Normalizer.QuickCheckResult _NOContent = default;
        private static bool _NOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Normalizer.html#YES"/>
        /// </summary>
        public static Android.Icu.Text.Normalizer.QuickCheckResult YES { get { if (!_YESReady) { _YESContent = SGetField<Android.Icu.Text.Normalizer.QuickCheckResult>(LocalBridgeClazz, "YES"); _YESReady = true; } return _YESContent; } }
        private static Android.Icu.Text.Normalizer.QuickCheckResult _YESContent = default;
        private static bool _YESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Normalizer.html#COMPARE_CODE_POINT_ORDER"/>
        /// </summary>
        public static int COMPARE_CODE_POINT_ORDER { get { if (!_COMPARE_CODE_POINT_ORDERReady) { _COMPARE_CODE_POINT_ORDERContent = SGetField<int>(LocalBridgeClazz, "COMPARE_CODE_POINT_ORDER"); _COMPARE_CODE_POINT_ORDERReady = true; } return _COMPARE_CODE_POINT_ORDERContent; } }
        private static int _COMPARE_CODE_POINT_ORDERContent = default;
        private static bool _COMPARE_CODE_POINT_ORDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Normalizer.html#COMPARE_IGNORE_CASE"/>
        /// </summary>
        public static int COMPARE_IGNORE_CASE { get { if (!_COMPARE_IGNORE_CASEReady) { _COMPARE_IGNORE_CASEContent = SGetField<int>(LocalBridgeClazz, "COMPARE_IGNORE_CASE"); _COMPARE_IGNORE_CASEReady = true; } return _COMPARE_IGNORE_CASEContent; } }
        private static int _COMPARE_IGNORE_CASEContent = default;
        private static bool _COMPARE_IGNORE_CASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Normalizer.html#FOLD_CASE_DEFAULT"/>
        /// </summary>
        public static int FOLD_CASE_DEFAULT { get { if (!_FOLD_CASE_DEFAULTReady) { _FOLD_CASE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "FOLD_CASE_DEFAULT"); _FOLD_CASE_DEFAULTReady = true; } return _FOLD_CASE_DEFAULTContent; } }
        private static int _FOLD_CASE_DEFAULTContent = default;
        private static bool _FOLD_CASE_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Normalizer.html#FOLD_CASE_EXCLUDE_SPECIAL_I"/>
        /// </summary>
        public static int FOLD_CASE_EXCLUDE_SPECIAL_I { get { if (!_FOLD_CASE_EXCLUDE_SPECIAL_IReady) { _FOLD_CASE_EXCLUDE_SPECIAL_IContent = SGetField<int>(LocalBridgeClazz, "FOLD_CASE_EXCLUDE_SPECIAL_I"); _FOLD_CASE_EXCLUDE_SPECIAL_IReady = true; } return _FOLD_CASE_EXCLUDE_SPECIAL_IContent; } }
        private static int _FOLD_CASE_EXCLUDE_SPECIAL_IContent = default;
        private static bool _FOLD_CASE_EXCLUDE_SPECIAL_IReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Normalizer.html#INPUT_IS_FCD"/>
        /// </summary>
        public static int INPUT_IS_FCD { get { if (!_INPUT_IS_FCDReady) { _INPUT_IS_FCDContent = SGetField<int>(LocalBridgeClazz, "INPUT_IS_FCD"); _INPUT_IS_FCDReady = true; } return _INPUT_IS_FCDContent; } }
        private static int _INPUT_IS_FCDContent = default;
        private static bool _INPUT_IS_FCDReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Normalizer.html#compare(char[],char[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="char"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int Compare(char[] arg0, char[] arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "compare", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Normalizer.html#compare(char[],int,int,char[],int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="char"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int Compare(char[] arg0, int arg1, int arg2, char[] arg3, int arg4, int arg5, int arg6)
        {
            return SExecute<int>(LocalBridgeClazz, "compare", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Normalizer.html#compare(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int Compare(int arg0, int arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "compare", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Normalizer.html#compare(int,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int Compare(int arg0, Java.Lang.String arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "compare", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/icu/text/Normalizer.html#compare(java.lang.String,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int Compare(Java.Lang.String arg0, Java.Lang.String arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "compare", arg0, arg1, arg2);
        }
    
        #endregion
    
        #region Instance methods
    
        #endregion
    
        #region Nested classes
        #region QuickCheckResult implementation
        public partial class QuickCheckResult
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Hardware.Biometrics
{
    #region BiometricPrompt declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html"/>
    /// </summary>
    public partial class BiometricPrompt : MASES.JCOBridge.C2JBridge.JVMBridgeBase<BiometricPrompt>
    {
        const string _bridgeClassName = "android.hardware.biometrics.BiometricPrompt";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public BiometricPrompt() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public BiometricPrompt(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region AuthenticationCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.AuthenticationCallback.html"/>
        /// </summary>
        public partial class AuthenticationCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AuthenticationCallback>
        {
            const string _bridgeClassName = "android.hardware.biometrics.BiometricPrompt$AuthenticationCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("AuthenticationCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public AuthenticationCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("AuthenticationCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public AuthenticationCallback(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region AuthenticationResult declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.AuthenticationResult.html"/>
        /// </summary>
        public partial class AuthenticationResult : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AuthenticationResult>
        {
            const string _bridgeClassName = "android.hardware.biometrics.BiometricPrompt$AuthenticationResult";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public AuthenticationResult() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public AuthenticationResult(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.hardware.biometrics.BiometricPrompt$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region CryptoObject declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.CryptoObject.html"/>
        /// </summary>
        public partial class CryptoObject : MASES.JCOBridge.C2JBridge.JVMBridgeBase<CryptoObject>
        {
            const string _bridgeClassName = "android.hardware.biometrics.BiometricPrompt$CryptoObject";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public CryptoObject() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public CryptoObject(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region BiometricPrompt implementation
    public partial class BiometricPrompt
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#AUTHENTICATION_RESULT_TYPE_BIOMETRIC"/>
        /// </summary>
        public static int AUTHENTICATION_RESULT_TYPE_BIOMETRIC { get { if (!_AUTHENTICATION_RESULT_TYPE_BIOMETRICReady) { _AUTHENTICATION_RESULT_TYPE_BIOMETRICContent = SGetField<int>(LocalBridgeClazz, "AUTHENTICATION_RESULT_TYPE_BIOMETRIC"); _AUTHENTICATION_RESULT_TYPE_BIOMETRICReady = true; } return _AUTHENTICATION_RESULT_TYPE_BIOMETRICContent; } }
        private static int _AUTHENTICATION_RESULT_TYPE_BIOMETRICContent = default;
        private static bool _AUTHENTICATION_RESULT_TYPE_BIOMETRICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#AUTHENTICATION_RESULT_TYPE_DEVICE_CREDENTIAL"/>
        /// </summary>
        public static int AUTHENTICATION_RESULT_TYPE_DEVICE_CREDENTIAL { get { if (!_AUTHENTICATION_RESULT_TYPE_DEVICE_CREDENTIALReady) { _AUTHENTICATION_RESULT_TYPE_DEVICE_CREDENTIALContent = SGetField<int>(LocalBridgeClazz, "AUTHENTICATION_RESULT_TYPE_DEVICE_CREDENTIAL"); _AUTHENTICATION_RESULT_TYPE_DEVICE_CREDENTIALReady = true; } return _AUTHENTICATION_RESULT_TYPE_DEVICE_CREDENTIALContent; } }
        private static int _AUTHENTICATION_RESULT_TYPE_DEVICE_CREDENTIALContent = default;
        private static bool _AUTHENTICATION_RESULT_TYPE_DEVICE_CREDENTIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ACQUIRED_GOOD"/>
        /// </summary>
        public static int BIOMETRIC_ACQUIRED_GOOD { get { if (!_BIOMETRIC_ACQUIRED_GOODReady) { _BIOMETRIC_ACQUIRED_GOODContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ACQUIRED_GOOD"); _BIOMETRIC_ACQUIRED_GOODReady = true; } return _BIOMETRIC_ACQUIRED_GOODContent; } }
        private static int _BIOMETRIC_ACQUIRED_GOODContent = default;
        private static bool _BIOMETRIC_ACQUIRED_GOODReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ACQUIRED_IMAGER_DIRTY"/>
        /// </summary>
        public static int BIOMETRIC_ACQUIRED_IMAGER_DIRTY { get { if (!_BIOMETRIC_ACQUIRED_IMAGER_DIRTYReady) { _BIOMETRIC_ACQUIRED_IMAGER_DIRTYContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ACQUIRED_IMAGER_DIRTY"); _BIOMETRIC_ACQUIRED_IMAGER_DIRTYReady = true; } return _BIOMETRIC_ACQUIRED_IMAGER_DIRTYContent; } }
        private static int _BIOMETRIC_ACQUIRED_IMAGER_DIRTYContent = default;
        private static bool _BIOMETRIC_ACQUIRED_IMAGER_DIRTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ACQUIRED_INSUFFICIENT"/>
        /// </summary>
        public static int BIOMETRIC_ACQUIRED_INSUFFICIENT { get { if (!_BIOMETRIC_ACQUIRED_INSUFFICIENTReady) { _BIOMETRIC_ACQUIRED_INSUFFICIENTContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ACQUIRED_INSUFFICIENT"); _BIOMETRIC_ACQUIRED_INSUFFICIENTReady = true; } return _BIOMETRIC_ACQUIRED_INSUFFICIENTContent; } }
        private static int _BIOMETRIC_ACQUIRED_INSUFFICIENTContent = default;
        private static bool _BIOMETRIC_ACQUIRED_INSUFFICIENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ACQUIRED_PARTIAL"/>
        /// </summary>
        public static int BIOMETRIC_ACQUIRED_PARTIAL { get { if (!_BIOMETRIC_ACQUIRED_PARTIALReady) { _BIOMETRIC_ACQUIRED_PARTIALContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ACQUIRED_PARTIAL"); _BIOMETRIC_ACQUIRED_PARTIALReady = true; } return _BIOMETRIC_ACQUIRED_PARTIALContent; } }
        private static int _BIOMETRIC_ACQUIRED_PARTIALContent = default;
        private static bool _BIOMETRIC_ACQUIRED_PARTIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ACQUIRED_TOO_FAST"/>
        /// </summary>
        public static int BIOMETRIC_ACQUIRED_TOO_FAST { get { if (!_BIOMETRIC_ACQUIRED_TOO_FASTReady) { _BIOMETRIC_ACQUIRED_TOO_FASTContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ACQUIRED_TOO_FAST"); _BIOMETRIC_ACQUIRED_TOO_FASTReady = true; } return _BIOMETRIC_ACQUIRED_TOO_FASTContent; } }
        private static int _BIOMETRIC_ACQUIRED_TOO_FASTContent = default;
        private static bool _BIOMETRIC_ACQUIRED_TOO_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ACQUIRED_TOO_SLOW"/>
        /// </summary>
        public static int BIOMETRIC_ACQUIRED_TOO_SLOW { get { if (!_BIOMETRIC_ACQUIRED_TOO_SLOWReady) { _BIOMETRIC_ACQUIRED_TOO_SLOWContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ACQUIRED_TOO_SLOW"); _BIOMETRIC_ACQUIRED_TOO_SLOWReady = true; } return _BIOMETRIC_ACQUIRED_TOO_SLOWContent; } }
        private static int _BIOMETRIC_ACQUIRED_TOO_SLOWContent = default;
        private static bool _BIOMETRIC_ACQUIRED_TOO_SLOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ERROR_CANCELED"/>
        /// </summary>
        public static int BIOMETRIC_ERROR_CANCELED { get { if (!_BIOMETRIC_ERROR_CANCELEDReady) { _BIOMETRIC_ERROR_CANCELEDContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ERROR_CANCELED"); _BIOMETRIC_ERROR_CANCELEDReady = true; } return _BIOMETRIC_ERROR_CANCELEDContent; } }
        private static int _BIOMETRIC_ERROR_CANCELEDContent = default;
        private static bool _BIOMETRIC_ERROR_CANCELEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ERROR_HW_NOT_PRESENT"/>
        /// </summary>
        public static int BIOMETRIC_ERROR_HW_NOT_PRESENT { get { if (!_BIOMETRIC_ERROR_HW_NOT_PRESENTReady) { _BIOMETRIC_ERROR_HW_NOT_PRESENTContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ERROR_HW_NOT_PRESENT"); _BIOMETRIC_ERROR_HW_NOT_PRESENTReady = true; } return _BIOMETRIC_ERROR_HW_NOT_PRESENTContent; } }
        private static int _BIOMETRIC_ERROR_HW_NOT_PRESENTContent = default;
        private static bool _BIOMETRIC_ERROR_HW_NOT_PRESENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ERROR_HW_UNAVAILABLE"/>
        /// </summary>
        public static int BIOMETRIC_ERROR_HW_UNAVAILABLE { get { if (!_BIOMETRIC_ERROR_HW_UNAVAILABLEReady) { _BIOMETRIC_ERROR_HW_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ERROR_HW_UNAVAILABLE"); _BIOMETRIC_ERROR_HW_UNAVAILABLEReady = true; } return _BIOMETRIC_ERROR_HW_UNAVAILABLEContent; } }
        private static int _BIOMETRIC_ERROR_HW_UNAVAILABLEContent = default;
        private static bool _BIOMETRIC_ERROR_HW_UNAVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ERROR_LOCKOUT"/>
        /// </summary>
        public static int BIOMETRIC_ERROR_LOCKOUT { get { if (!_BIOMETRIC_ERROR_LOCKOUTReady) { _BIOMETRIC_ERROR_LOCKOUTContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ERROR_LOCKOUT"); _BIOMETRIC_ERROR_LOCKOUTReady = true; } return _BIOMETRIC_ERROR_LOCKOUTContent; } }
        private static int _BIOMETRIC_ERROR_LOCKOUTContent = default;
        private static bool _BIOMETRIC_ERROR_LOCKOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ERROR_LOCKOUT_PERMANENT"/>
        /// </summary>
        public static int BIOMETRIC_ERROR_LOCKOUT_PERMANENT { get { if (!_BIOMETRIC_ERROR_LOCKOUT_PERMANENTReady) { _BIOMETRIC_ERROR_LOCKOUT_PERMANENTContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ERROR_LOCKOUT_PERMANENT"); _BIOMETRIC_ERROR_LOCKOUT_PERMANENTReady = true; } return _BIOMETRIC_ERROR_LOCKOUT_PERMANENTContent; } }
        private static int _BIOMETRIC_ERROR_LOCKOUT_PERMANENTContent = default;
        private static bool _BIOMETRIC_ERROR_LOCKOUT_PERMANENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ERROR_NO_BIOMETRICS"/>
        /// </summary>
        public static int BIOMETRIC_ERROR_NO_BIOMETRICS { get { if (!_BIOMETRIC_ERROR_NO_BIOMETRICSReady) { _BIOMETRIC_ERROR_NO_BIOMETRICSContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ERROR_NO_BIOMETRICS"); _BIOMETRIC_ERROR_NO_BIOMETRICSReady = true; } return _BIOMETRIC_ERROR_NO_BIOMETRICSContent; } }
        private static int _BIOMETRIC_ERROR_NO_BIOMETRICSContent = default;
        private static bool _BIOMETRIC_ERROR_NO_BIOMETRICSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ERROR_NO_DEVICE_CREDENTIAL"/>
        /// </summary>
        public static int BIOMETRIC_ERROR_NO_DEVICE_CREDENTIAL { get { if (!_BIOMETRIC_ERROR_NO_DEVICE_CREDENTIALReady) { _BIOMETRIC_ERROR_NO_DEVICE_CREDENTIALContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ERROR_NO_DEVICE_CREDENTIAL"); _BIOMETRIC_ERROR_NO_DEVICE_CREDENTIALReady = true; } return _BIOMETRIC_ERROR_NO_DEVICE_CREDENTIALContent; } }
        private static int _BIOMETRIC_ERROR_NO_DEVICE_CREDENTIALContent = default;
        private static bool _BIOMETRIC_ERROR_NO_DEVICE_CREDENTIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ERROR_NO_SPACE"/>
        /// </summary>
        public static int BIOMETRIC_ERROR_NO_SPACE { get { if (!_BIOMETRIC_ERROR_NO_SPACEReady) { _BIOMETRIC_ERROR_NO_SPACEContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ERROR_NO_SPACE"); _BIOMETRIC_ERROR_NO_SPACEReady = true; } return _BIOMETRIC_ERROR_NO_SPACEContent; } }
        private static int _BIOMETRIC_ERROR_NO_SPACEContent = default;
        private static bool _BIOMETRIC_ERROR_NO_SPACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED"/>
        /// </summary>
        public static int BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED { get { if (!_BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIREDReady) { _BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIREDContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED"); _BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIREDReady = true; } return _BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIREDContent; } }
        private static int _BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIREDContent = default;
        private static bool _BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ERROR_TIMEOUT"/>
        /// </summary>
        public static int BIOMETRIC_ERROR_TIMEOUT { get { if (!_BIOMETRIC_ERROR_TIMEOUTReady) { _BIOMETRIC_ERROR_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ERROR_TIMEOUT"); _BIOMETRIC_ERROR_TIMEOUTReady = true; } return _BIOMETRIC_ERROR_TIMEOUTContent; } }
        private static int _BIOMETRIC_ERROR_TIMEOUTContent = default;
        private static bool _BIOMETRIC_ERROR_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ERROR_UNABLE_TO_PROCESS"/>
        /// </summary>
        public static int BIOMETRIC_ERROR_UNABLE_TO_PROCESS { get { if (!_BIOMETRIC_ERROR_UNABLE_TO_PROCESSReady) { _BIOMETRIC_ERROR_UNABLE_TO_PROCESSContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ERROR_UNABLE_TO_PROCESS"); _BIOMETRIC_ERROR_UNABLE_TO_PROCESSReady = true; } return _BIOMETRIC_ERROR_UNABLE_TO_PROCESSContent; } }
        private static int _BIOMETRIC_ERROR_UNABLE_TO_PROCESSContent = default;
        private static bool _BIOMETRIC_ERROR_UNABLE_TO_PROCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ERROR_USER_CANCELED"/>
        /// </summary>
        public static int BIOMETRIC_ERROR_USER_CANCELED { get { if (!_BIOMETRIC_ERROR_USER_CANCELEDReady) { _BIOMETRIC_ERROR_USER_CANCELEDContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ERROR_USER_CANCELED"); _BIOMETRIC_ERROR_USER_CANCELEDReady = true; } return _BIOMETRIC_ERROR_USER_CANCELEDContent; } }
        private static int _BIOMETRIC_ERROR_USER_CANCELEDContent = default;
        private static bool _BIOMETRIC_ERROR_USER_CANCELEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_ERROR_VENDOR"/>
        /// </summary>
        public static int BIOMETRIC_ERROR_VENDOR { get { if (!_BIOMETRIC_ERROR_VENDORReady) { _BIOMETRIC_ERROR_VENDORContent = SGetField<int>(LocalBridgeClazz, "BIOMETRIC_ERROR_VENDOR"); _BIOMETRIC_ERROR_VENDORReady = true; } return _BIOMETRIC_ERROR_VENDORContent; } }
        private static int _BIOMETRIC_ERROR_VENDORContent = default;
        private static bool _BIOMETRIC_ERROR_VENDORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#BIOMETRIC_NO_AUTHENTICATION"/>
        /// </summary>
        public static long BIOMETRIC_NO_AUTHENTICATION { get { if (!_BIOMETRIC_NO_AUTHENTICATIONReady) { _BIOMETRIC_NO_AUTHENTICATIONContent = SGetField<long>(LocalBridgeClazz, "BIOMETRIC_NO_AUTHENTICATION"); _BIOMETRIC_NO_AUTHENTICATIONReady = true; } return _BIOMETRIC_NO_AUTHENTICATIONContent; } }
        private static long _BIOMETRIC_NO_AUTHENTICATIONContent = default;
        private static bool _BIOMETRIC_NO_AUTHENTICATIONReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#getLogoBitmap()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        public Android.Graphics.Bitmap GetLogoBitmap()
        {
            return IExecuteWithSignature<Android.Graphics.Bitmap>("getLogoBitmap", "()Landroid/graphics/Bitmap;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#getContentView()"/>
        /// </summary>
        /// <returns><see cref="Android.Hardware.Biometrics.PromptContentView"/></returns>
        public Android.Hardware.Biometrics.PromptContentView GetContentView()
        {
            return IExecuteWithSignature<Android.Hardware.Biometrics.PromptContentView>("getContentView", "()Landroid/hardware/biometrics/PromptContentView;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#isConfirmationRequired()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsConfirmationRequired()
        {
            return IExecuteWithSignature<bool>("isConfirmationRequired", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#getAllowedAuthenticators()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAllowedAuthenticators()
        {
            return IExecuteWithSignature<int>("getAllowedAuthenticators", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#getLogoRes()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLogoRes()
        {
            return IExecuteWithSignature<int>("getLogoRes", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#getDescription()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetDescription()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getDescription", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#getNegativeButtonText()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetNegativeButtonText()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getNegativeButtonText", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#getSubtitle()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetSubtitle()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getSubtitle", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#getTitle()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetTitle()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getTitle", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#getLogoDescription()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetLogoDescription()
        {
            return IExecuteWithSignature<Java.Lang.String>("getLogoDescription", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#authenticate(android.hardware.biometrics.BiometricPrompt.CryptoObject,android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt.AuthenticationCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.Biometrics.BiometricPrompt.CryptoObject"/></param>
        /// <param name="arg1"><see cref="Android.Os.CancellationSignal"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Android.Hardware.Biometrics.BiometricPrompt.AuthenticationCallback"/></param>
        public void Authenticate(Android.Hardware.Biometrics.BiometricPrompt.CryptoObject arg0, Android.Os.CancellationSignal arg1, Java.Util.Concurrent.Executor arg2, Android.Hardware.Biometrics.BiometricPrompt.AuthenticationCallback arg3)
        {
            IExecute("authenticate", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.html#authenticate(android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt.AuthenticationCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.CancellationSignal"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Hardware.Biometrics.BiometricPrompt.AuthenticationCallback"/></param>
        public void Authenticate(Android.Os.CancellationSignal arg0, Java.Util.Concurrent.Executor arg1, Android.Hardware.Biometrics.BiometricPrompt.AuthenticationCallback arg2)
        {
            IExecute("authenticate", arg0, arg1, arg2);
        }
    
        #endregion
    
        #region Nested classes
        #region AuthenticationCallback implementation
        public partial class AuthenticationCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.AuthenticationCallback.html#onAuthenticationError(int,java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
            public void OnAuthenticationError(int arg0, Java.Lang.CharSequence arg1)
            {
                IExecute("onAuthenticationError", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.AuthenticationCallback.html#onAuthenticationFailed()"/>
            /// </summary>
            public void OnAuthenticationFailed()
            {
                IExecuteWithSignature("onAuthenticationFailed", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.AuthenticationCallback.html#onAuthenticationHelp(int,java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
            public void OnAuthenticationHelp(int arg0, Java.Lang.CharSequence arg1)
            {
                IExecute("onAuthenticationHelp", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.AuthenticationCallback.html#onAuthenticationSucceeded(android.hardware.biometrics.BiometricPrompt.AuthenticationResult)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Hardware.Biometrics.BiometricPrompt.AuthenticationResult"/></param>
            public void OnAuthenticationSucceeded(Android.Hardware.Biometrics.BiometricPrompt.AuthenticationResult arg0)
            {
                IExecuteWithSignature("onAuthenticationSucceeded", "(Landroid/hardware/biometrics/BiometricPrompt$AuthenticationResult;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region AuthenticationResult implementation
        public partial class AuthenticationResult
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.AuthenticationResult.html#getCryptoObject()"/>
            /// </summary>
            /// <returns><see cref="Android.Hardware.Biometrics.BiometricPrompt.CryptoObject"/></returns>
            public Android.Hardware.Biometrics.BiometricPrompt.CryptoObject GetCryptoObject()
            {
                return IExecuteWithSignature<Android.Hardware.Biometrics.BiometricPrompt.CryptoObject>("getCryptoObject", "()Landroid/hardware/biometrics/BiometricPrompt$CryptoObject;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.AuthenticationResult.html#getAuthenticationType()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetAuthenticationType()
            {
                return IExecuteWithSignature<int>("getAuthenticationType", "()I");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#%3Cinit%3E(android.content.Context)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            public Builder(Android.Content.Context arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Hardware.Biometrics.BiometricPrompt"/></returns>
            public Android.Hardware.Biometrics.BiometricPrompt Build()
            {
                return IExecuteWithSignature<Android.Hardware.Biometrics.BiometricPrompt>("build", "()Landroid/hardware/biometrics/BiometricPrompt;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setAllowedAuthenticators(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Hardware.Biometrics.BiometricPrompt.Builder"/></returns>
            public Android.Hardware.Biometrics.BiometricPrompt.Builder SetAllowedAuthenticators(int arg0)
            {
                return IExecuteWithSignature<Android.Hardware.Biometrics.BiometricPrompt.Builder>("setAllowedAuthenticators", "(I)Landroid/hardware/biometrics/BiometricPrompt$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setConfirmationRequired(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Hardware.Biometrics.BiometricPrompt.Builder"/></returns>
            public Android.Hardware.Biometrics.BiometricPrompt.Builder SetConfirmationRequired(bool arg0)
            {
                return IExecuteWithSignature<Android.Hardware.Biometrics.BiometricPrompt.Builder>("setConfirmationRequired", "(Z)Landroid/hardware/biometrics/BiometricPrompt$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setContentView(android.hardware.biometrics.PromptContentView)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Hardware.Biometrics.PromptContentView"/></param>
            /// <returns><see cref="Android.Hardware.Biometrics.BiometricPrompt.Builder"/></returns>
            public Android.Hardware.Biometrics.BiometricPrompt.Builder SetContentView(Android.Hardware.Biometrics.PromptContentView arg0)
            {
                return IExecuteWithSignature<Android.Hardware.Biometrics.BiometricPrompt.Builder>("setContentView", "(Landroid/hardware/biometrics/PromptContentView;)Landroid/hardware/biometrics/BiometricPrompt$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setDescription(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.Hardware.Biometrics.BiometricPrompt.Builder"/></returns>
            public Android.Hardware.Biometrics.BiometricPrompt.Builder SetDescription(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.Hardware.Biometrics.BiometricPrompt.Builder>("setDescription", "(Ljava/lang/CharSequence;)Landroid/hardware/biometrics/BiometricPrompt$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setDeviceCredentialAllowed(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Hardware.Biometrics.BiometricPrompt.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.Hardware.Biometrics.BiometricPrompt.Builder SetDeviceCredentialAllowed(bool arg0)
            {
                return IExecuteWithSignature<Android.Hardware.Biometrics.BiometricPrompt.Builder>("setDeviceCredentialAllowed", "(Z)Landroid/hardware/biometrics/BiometricPrompt$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setLogoBitmap(android.graphics.Bitmap)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
            /// <returns><see cref="Android.Hardware.Biometrics.BiometricPrompt.Builder"/></returns>
            public Android.Hardware.Biometrics.BiometricPrompt.Builder SetLogoBitmap(Android.Graphics.Bitmap arg0)
            {
                return IExecuteWithSignature<Android.Hardware.Biometrics.BiometricPrompt.Builder>("setLogoBitmap", "(Landroid/graphics/Bitmap;)Landroid/hardware/biometrics/BiometricPrompt$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setLogoDescription(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Hardware.Biometrics.BiometricPrompt.Builder"/></returns>
            public Android.Hardware.Biometrics.BiometricPrompt.Builder SetLogoDescription(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Hardware.Biometrics.BiometricPrompt.Builder>("setLogoDescription", "(Ljava/lang/String;)Landroid/hardware/biometrics/BiometricPrompt$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setLogoRes(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Hardware.Biometrics.BiometricPrompt.Builder"/></returns>
            public Android.Hardware.Biometrics.BiometricPrompt.Builder SetLogoRes(int arg0)
            {
                return IExecuteWithSignature<Android.Hardware.Biometrics.BiometricPrompt.Builder>("setLogoRes", "(I)Landroid/hardware/biometrics/BiometricPrompt$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setNegativeButton(java.lang.CharSequence,java.util.concurrent.Executor,android.content.DialogInterface.OnClickListener)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
            /// <param name="arg2"><see cref="Android.Content.DialogInterface.OnClickListener"/></param>
            /// <returns><see cref="Android.Hardware.Biometrics.BiometricPrompt.Builder"/></returns>
            public Android.Hardware.Biometrics.BiometricPrompt.Builder SetNegativeButton(Java.Lang.CharSequence arg0, Java.Util.Concurrent.Executor arg1, Android.Content.DialogInterface.OnClickListener arg2)
            {
                return IExecute<Android.Hardware.Biometrics.BiometricPrompt.Builder>("setNegativeButton", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setSubtitle(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.Hardware.Biometrics.BiometricPrompt.Builder"/></returns>
            public Android.Hardware.Biometrics.BiometricPrompt.Builder SetSubtitle(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.Hardware.Biometrics.BiometricPrompt.Builder>("setSubtitle", "(Ljava/lang/CharSequence;)Landroid/hardware/biometrics/BiometricPrompt$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setTitle(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            /// <returns><see cref="Android.Hardware.Biometrics.BiometricPrompt.Builder"/></returns>
            public Android.Hardware.Biometrics.BiometricPrompt.Builder SetTitle(Java.Lang.CharSequence arg0)
            {
                return IExecuteWithSignature<Android.Hardware.Biometrics.BiometricPrompt.Builder>("setTitle", "(Ljava/lang/CharSequence;)Landroid/hardware/biometrics/BiometricPrompt$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region CryptoObject implementation
        public partial class CryptoObject
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.CryptoObject.html#%3Cinit%3E(android.security.identity.IdentityCredential)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Security.Identity.IdentityCredential"/></param>
            [global::System.Obsolete()]
            public CryptoObject(Android.Security.Identity.IdentityCredential arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.CryptoObject.html#%3Cinit%3E(android.security.identity.PresentationSession)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Security.Identity.PresentationSession"/></param>
            public CryptoObject(Android.Security.Identity.PresentationSession arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.CryptoObject.html#%3Cinit%3E(java.security.Signature)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Security.Signature"/></param>
            public CryptoObject(Java.Security.Signature arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.CryptoObject.html#%3Cinit%3E(javax.crypto.Cipher)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Crypto.Cipher"/></param>
            public CryptoObject(Javax.Crypto.Cipher arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.CryptoObject.html#%3Cinit%3E(javax.crypto.Mac)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Javax.Crypto.Mac"/></param>
            public CryptoObject(Javax.Crypto.Mac arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.CryptoObject.html#%3Cinit%3E(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            public CryptoObject(long arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.CryptoObject.html#getIdentityCredential()"/>
            /// </summary>
            /// <returns><see cref="Android.Security.Identity.IdentityCredential"/></returns>
            [global::System.Obsolete()]
            public Android.Security.Identity.IdentityCredential GetIdentityCredential()
            {
                return IExecuteWithSignature<Android.Security.Identity.IdentityCredential>("getIdentityCredential", "()Landroid/security/identity/IdentityCredential;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.CryptoObject.html#getPresentationSession()"/>
            /// </summary>
            /// <returns><see cref="Android.Security.Identity.PresentationSession"/></returns>
            public Android.Security.Identity.PresentationSession GetPresentationSession()
            {
                return IExecuteWithSignature<Android.Security.Identity.PresentationSession>("getPresentationSession", "()Landroid/security/identity/PresentationSession;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.CryptoObject.html#getSignature()"/>
            /// </summary>
            /// <returns><see cref="Java.Security.Signature"/></returns>
            public Java.Security.Signature GetSignature()
            {
                return IExecuteWithSignature<Java.Security.Signature>("getSignature", "()Ljava/security/Signature;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.CryptoObject.html#getCipher()"/>
            /// </summary>
            /// <returns><see cref="Javax.Crypto.Cipher"/></returns>
            public Javax.Crypto.Cipher GetCipher()
            {
                return IExecuteWithSignature<Javax.Crypto.Cipher>("getCipher", "()Ljavax/crypto/Cipher;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.CryptoObject.html#getMac()"/>
            /// </summary>
            /// <returns><see cref="Javax.Crypto.Mac"/></returns>
            public Javax.Crypto.Mac GetMac()
            {
                return IExecuteWithSignature<Javax.Crypto.Mac>("getMac", "()Ljavax/crypto/Mac;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.CryptoObject.html#getOperationHandle()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetOperationHandle()
            {
                return IExecuteWithSignature<long>("getOperationHandle", "()J");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Gesture
{
    #region GestureStore declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html"/>
    /// </summary>
    public partial class GestureStore : MASES.JCOBridge.C2JBridge.JVMBridgeBase<GestureStore>
    {
        const string _bridgeClassName = "android.gesture.GestureStore";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public GestureStore() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public GestureStore(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region GestureStore implementation
    public partial class GestureStore
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#ORIENTATION_INVARIANT"/>
        /// </summary>
        public static int ORIENTATION_INVARIANT { get { if (!_ORIENTATION_INVARIANTReady) { _ORIENTATION_INVARIANTContent = SGetField<int>(LocalBridgeClazz, "ORIENTATION_INVARIANT"); _ORIENTATION_INVARIANTReady = true; } return _ORIENTATION_INVARIANTContent; } }
        private static int _ORIENTATION_INVARIANTContent = default;
        private static bool _ORIENTATION_INVARIANTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#ORIENTATION_SENSITIVE"/>
        /// </summary>
        public static int ORIENTATION_SENSITIVE { get { if (!_ORIENTATION_SENSITIVEReady) { _ORIENTATION_SENSITIVEContent = SGetField<int>(LocalBridgeClazz, "ORIENTATION_SENSITIVE"); _ORIENTATION_SENSITIVEReady = true; } return _ORIENTATION_SENSITIVEContent; } }
        private static int _ORIENTATION_SENSITIVEContent = default;
        private static bool _ORIENTATION_SENSITIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#SEQUENCE_INVARIANT"/>
        /// </summary>
        public static int SEQUENCE_INVARIANT { get { if (!_SEQUENCE_INVARIANTReady) { _SEQUENCE_INVARIANTContent = SGetField<int>(LocalBridgeClazz, "SEQUENCE_INVARIANT"); _SEQUENCE_INVARIANTReady = true; } return _SEQUENCE_INVARIANTContent; } }
        private static int _SEQUENCE_INVARIANTContent = default;
        private static bool _SEQUENCE_INVARIANTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#SEQUENCE_SENSITIVE"/>
        /// </summary>
        public static int SEQUENCE_SENSITIVE { get { if (!_SEQUENCE_SENSITIVEReady) { _SEQUENCE_SENSITIVEContent = SGetField<int>(LocalBridgeClazz, "SEQUENCE_SENSITIVE"); _SEQUENCE_SENSITIVEReady = true; } return _SEQUENCE_SENSITIVEContent; } }
        private static int _SEQUENCE_SENSITIVEContent = default;
        private static bool _SEQUENCE_SENSITIVEReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#hasChanged()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasChanged()
        {
            return IExecuteWithSignature<bool>("hasChanged", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#getOrientationStyle()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetOrientationStyle()
        {
            return IExecuteWithSignature<int>("getOrientationStyle", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#getSequenceType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSequenceType()
        {
            return IExecuteWithSignature<int>("getSequenceType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#getGestures(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.ArrayList"/></returns>
        public Java.Util.ArrayList<Android.Gesture.Gesture> GetGestures(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Util.ArrayList<Android.Gesture.Gesture>>("getGestures", "(Ljava/lang/String;)Ljava/util/ArrayList;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#recognize(android.gesture.Gesture)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Gesture.Gesture"/></param>
        /// <returns><see cref="Java.Util.ArrayList"/></returns>
        public Java.Util.ArrayList<Android.Gesture.Prediction> Recognize(Android.Gesture.Gesture arg0)
        {
            return IExecuteWithSignature<Java.Util.ArrayList<Android.Gesture.Prediction>>("recognize", "(Landroid/gesture/Gesture;)Ljava/util/ArrayList;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#getGestureEntries()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.String> GetGestureEntries()
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getGestureEntries", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#addGesture(java.lang.String,android.gesture.Gesture)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Gesture.Gesture"/></param>
        public void AddGesture(Java.Lang.String arg0, Android.Gesture.Gesture arg1)
        {
            IExecute("addGesture", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#load(java.io.InputStream,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void Load(Java.Io.InputStream arg0, bool arg1)
        {
            IExecute("load", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#load(java.io.InputStream)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void Load(Java.Io.InputStream arg0)
        {
            IExecuteWithSignature("load", "(Ljava/io/InputStream;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#removeEntry(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void RemoveEntry(Java.Lang.String arg0)
        {
            IExecuteWithSignature("removeEntry", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#removeGesture(java.lang.String,android.gesture.Gesture)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Gesture.Gesture"/></param>
        public void RemoveGesture(Java.Lang.String arg0, Android.Gesture.Gesture arg1)
        {
            IExecute("removeGesture", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#save(java.io.OutputStream,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.OutputStream"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void Save(Java.Io.OutputStream arg0, bool arg1)
        {
            IExecute("save", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#save(java.io.OutputStream)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.OutputStream"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void Save(Java.Io.OutputStream arg0)
        {
            IExecuteWithSignature("save", "(Ljava/io/OutputStream;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#setOrientationStyle(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetOrientationStyle(int arg0)
        {
            IExecuteWithSignature("setOrientationStyle", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureStore.html#setSequenceType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetSequenceType(int arg0)
        {
            IExecuteWithSignature("setSequenceType", "(I)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
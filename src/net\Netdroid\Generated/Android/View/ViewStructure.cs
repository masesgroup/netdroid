/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region ViewStructure declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html"/>
    /// </summary>
    public partial class ViewStructure : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ViewStructure>
    {
        const string _bridgeClassName = "android.view.ViewStructure";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("ViewStructure class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ViewStructure() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("ViewStructure class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ViewStructure(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region HtmlInfo declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.HtmlInfo.html"/>
        /// </summary>
        public partial class HtmlInfo : MASES.JCOBridge.C2JBridge.JVMBridgeBase<HtmlInfo>
        {
            const string _bridgeClassName = "android.view.ViewStructure$HtmlInfo";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("HtmlInfo class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public HtmlInfo() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("HtmlInfo class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public HtmlInfo(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
            #region Builder declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewStructure.HtmlInfo.Builder.html"/>
            /// </summary>
            public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
            {
                const string _bridgeClassName = "android.view.ViewStructure$HtmlInfo$Builder";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                [global::System.Obsolete("Builder class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
                public Builder() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                [global::System.Obsolete("Builder class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
                public Builder(params object[] args) : base(args) { }
            
                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => true;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;
            
                // TODO: complete the class
            
            }
            #endregion

        
        }
        #endregion

    
    }
    #endregion

    #region ViewStructure implementation
    public partial class ViewStructure
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#getExtras()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetExtras()
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getExtras", "()Landroid/os/Bundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#getAutofillId()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Autofill.AutofillId"/></returns>
        public Android.View.Autofill.AutofillId GetAutofillId()
        {
            return IExecuteWithSignature<Android.View.Autofill.AutofillId>("getAutofillId", "()Landroid/view/autofill/AutofillId;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#asyncNewChild(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.View.ViewStructure"/></returns>
        public Android.View.ViewStructure AsyncNewChild(int arg0)
        {
            return IExecuteWithSignature<Android.View.ViewStructure>("asyncNewChild", "(I)Landroid/view/ViewStructure;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#newChild(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.View.ViewStructure"/></returns>
        public Android.View.ViewStructure NewChild(int arg0)
        {
            return IExecuteWithSignature<Android.View.ViewStructure>("newChild", "(I)Landroid/view/ViewStructure;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#newHtmlInfoBuilder(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.View.ViewStructure.HtmlInfo.Builder"/></returns>
        public Android.View.ViewStructure.HtmlInfo.Builder NewHtmlInfoBuilder(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.View.ViewStructure.HtmlInfo.Builder>("newHtmlInfoBuilder", "(Ljava/lang/String;)Landroid/view/ViewStructure$HtmlInfo$Builder;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#hasExtras()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasExtras()
        {
            return IExecuteWithSignature<bool>("hasExtras", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#addChildCount(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int AddChildCount(int arg0)
        {
            return IExecuteWithSignature<int>("addChildCount", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#getChildCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetChildCount()
        {
            return IExecuteWithSignature<int>("getChildCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#getTextSelectionEnd()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTextSelectionEnd()
        {
            return IExecuteWithSignature<int>("getTextSelectionEnd", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#getTextSelectionStart()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTextSelectionStart()
        {
            return IExecuteWithSignature<int>("getTextSelectionStart", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#getHint()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetHint()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getHint", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#getText()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetText()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getText", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#asyncCommit()"/>
        /// </summary>
        public void AsyncCommit()
        {
            IExecuteWithSignature("asyncCommit", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setAccessibilityFocused(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAccessibilityFocused(bool arg0)
        {
            IExecuteWithSignature("setAccessibilityFocused", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setActivated(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetActivated(bool arg0)
        {
            IExecuteWithSignature("setActivated", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setAlpha(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetAlpha(float arg0)
        {
            IExecuteWithSignature("setAlpha", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setAutofillHints(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetAutofillHints(Java.Lang.String[] arg0)
        {
            IExecuteWithSignature("setAutofillHints", "([Ljava/lang/String;)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setAutofillId(android.view.autofill.AutofillId,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Autofill.AutofillId"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetAutofillId(Android.View.Autofill.AutofillId arg0, int arg1)
        {
            IExecute("setAutofillId", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setAutofillId(android.view.autofill.AutofillId)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Autofill.AutofillId"/></param>
        public void SetAutofillId(Android.View.Autofill.AutofillId arg0)
        {
            IExecuteWithSignature("setAutofillId", "(Landroid/view/autofill/AutofillId;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setAutofillOptions(java.lang.CharSequence[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetAutofillOptions(Java.Lang.CharSequence[] arg0)
        {
            IExecuteWithSignature("setAutofillOptions", "([Ljava/lang/CharSequence;)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setAutofillType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAutofillType(int arg0)
        {
            IExecuteWithSignature("setAutofillType", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setAutofillValue(android.view.autofill.AutofillValue)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Autofill.AutofillValue"/></param>
        public void SetAutofillValue(Android.View.Autofill.AutofillValue arg0)
        {
            IExecuteWithSignature("setAutofillValue", "(Landroid/view/autofill/AutofillValue;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setCheckable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetCheckable(bool arg0)
        {
            IExecuteWithSignature("setCheckable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setChecked(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetChecked(bool arg0)
        {
            IExecuteWithSignature("setChecked", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setChildCount(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetChildCount(int arg0)
        {
            IExecuteWithSignature("setChildCount", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setClassName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetClassName(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setClassName", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setClickable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetClickable(bool arg0)
        {
            IExecuteWithSignature("setClickable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setContentDescription(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetContentDescription(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setContentDescription", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setContextClickable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetContextClickable(bool arg0)
        {
            IExecuteWithSignature("setContextClickable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setDataIsSensitive(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetDataIsSensitive(bool arg0)
        {
            IExecuteWithSignature("setDataIsSensitive", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setDimens(int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public void SetDimens(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)
        {
            IExecute("setDimens", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setElevation(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetElevation(float arg0)
        {
            IExecuteWithSignature("setElevation", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetEnabled(bool arg0)
        {
            IExecuteWithSignature("setEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setFocusable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFocusable(bool arg0)
        {
            IExecuteWithSignature("setFocusable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setFocused(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFocused(bool arg0)
        {
            IExecuteWithSignature("setFocused", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setHint(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetHint(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setHint", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setHtmlInfo(android.view.ViewStructure.HtmlInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewStructure.HtmlInfo"/></param>
        public void SetHtmlInfo(Android.View.ViewStructure.HtmlInfo arg0)
        {
            IExecuteWithSignature("setHtmlInfo", "(Landroid/view/ViewStructure$HtmlInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setId(int,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        public void SetId(int arg0, Java.Lang.String arg1, Java.Lang.String arg2, Java.Lang.String arg3)
        {
            IExecute("setId", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setInputType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetInputType(int arg0)
        {
            IExecuteWithSignature("setInputType", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setLocaleList(android.os.LocaleList)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.LocaleList"/></param>
        public void SetLocaleList(Android.Os.LocaleList arg0)
        {
            IExecuteWithSignature("setLocaleList", "(Landroid/os/LocaleList;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setLongClickable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetLongClickable(bool arg0)
        {
            IExecuteWithSignature("setLongClickable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setOpaque(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetOpaque(bool arg0)
        {
            IExecuteWithSignature("setOpaque", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setSelected(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSelected(bool arg0)
        {
            IExecuteWithSignature("setSelected", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setText(java.lang.CharSequence,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void SetText(Java.Lang.CharSequence arg0, int arg1, int arg2)
        {
            IExecute("setText", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setText(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetText(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setText", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setTextLines(int[],int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetTextLines(int[] arg0, int[] arg1)
        {
            IExecute("setTextLines", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setTextStyle(float,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void SetTextStyle(float arg0, int arg1, int arg2, int arg3)
        {
            IExecute("setTextStyle", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setTransformation(android.graphics.Matrix)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Matrix"/></param>
        public void SetTransformation(Android.Graphics.Matrix arg0)
        {
            IExecuteWithSignature("setTransformation", "(Landroid/graphics/Matrix;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setVisibility(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetVisibility(int arg0)
        {
            IExecuteWithSignature("setVisibility", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setWebDomain(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetWebDomain(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setWebDomain", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#getPendingCredentialRequest()"/>
        /// </summary>
        /// <returns><see cref="Android.Credentials.GetCredentialRequest"/></returns>
        public Android.Credentials.GetCredentialRequest GetPendingCredentialRequest()
        {
            return IExecuteWithSignature<Android.Credentials.GetCredentialRequest>("getPendingCredentialRequest", "()Landroid/credentials/GetCredentialRequest;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#getPendingCredentialCallback()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.OutcomeReceiver"/></returns>
        public Android.Os.OutcomeReceiver<Android.Credentials.GetCredentialResponse, Android.Credentials.GetCredentialException> GetPendingCredentialCallback()
        {
            return IExecuteWithSignature<Android.Os.OutcomeReceiver<Android.Credentials.GetCredentialResponse, Android.Credentials.GetCredentialException>>("getPendingCredentialCallback", "()Landroid/os/OutcomeReceiver;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#clearCredentialManagerRequest()"/>
        /// </summary>
        public void ClearCredentialManagerRequest()
        {
            IExecuteWithSignature("clearCredentialManagerRequest", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setHintIdEntry(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetHintIdEntry(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setHintIdEntry", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setImportantForAutofill(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetImportantForAutofill(int arg0)
        {
            IExecuteWithSignature("setImportantForAutofill", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setMaxTextEms(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMaxTextEms(int arg0)
        {
            IExecuteWithSignature("setMaxTextEms", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setMaxTextLength(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMaxTextLength(int arg0)
        {
            IExecuteWithSignature("setMaxTextLength", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setMinTextEms(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMinTextEms(int arg0)
        {
            IExecuteWithSignature("setMinTextEms", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setPendingCredentialRequest(android.credentials.GetCredentialRequest,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Credentials.GetCredentialRequest"/></param>
        /// <param name="arg1"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void SetPendingCredentialRequest(Android.Credentials.GetCredentialRequest arg0, Android.Os.OutcomeReceiver<Android.Credentials.GetCredentialResponse, Android.Credentials.GetCredentialException> arg1)
        {
            IExecute("setPendingCredentialRequest", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setReceiveContentMimeTypes(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetReceiveContentMimeTypes(Java.Lang.String[] arg0)
        {
            IExecuteWithSignature("setReceiveContentMimeTypes", "([Ljava/lang/String;)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewStructure.html#setTextIdEntry(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetTextIdEntry(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setTextIdEntry", "(Ljava/lang/String;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region HtmlInfo implementation
        public partial class HtmlInfo
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewStructure.HtmlInfo.html#getTag()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetTag()
            {
                return IExecuteWithSignature<Java.Lang.String>("getTag", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewStructure.HtmlInfo.html#getAttributes()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.List"/></returns>
            public Java.Util.List<Android.Util.Pair<Java.Lang.String, Java.Lang.String>> GetAttributes()
            {
                return IExecuteWithSignature<Java.Util.List<Android.Util.Pair<Java.Lang.String, Java.Lang.String>>>("getAttributes", "()Ljava/util/List;");
            }
        
            #endregion
        
            #region Nested classes
            #region Builder implementation
            public partial class Builder
            {
                #region Constructors
            
                #endregion
            
                #region Class/Interface conversion operators
            
                #endregion
            
                #region Fields
            
                #endregion
            
                #region Static methods
            
                #endregion
            
                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/ViewStructure.HtmlInfo.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.View.ViewStructure.HtmlInfo"/></returns>
                public Android.View.ViewStructure.HtmlInfo Build()
                {
                    return IExecuteWithSignature<Android.View.ViewStructure.HtmlInfo>("build", "()Landroid/view/ViewStructure$HtmlInfo;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/ViewStructure.HtmlInfo.Builder.html#addAttribute(java.lang.String,java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <param name="arg1"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.View.ViewStructure.HtmlInfo.Builder"/></returns>
                public Android.View.ViewStructure.HtmlInfo.Builder AddAttribute(Java.Lang.String arg0, Java.Lang.String arg1)
                {
                    return IExecute<Android.View.ViewStructure.HtmlInfo.Builder>("addAttribute", arg0, arg1);
                }
            
                #endregion
            
                #region Nested classes
            
                #endregion
            
                // TODO: complete the class
            }
            #endregion

        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
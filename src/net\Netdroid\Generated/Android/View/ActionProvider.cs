/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region ActionProvider declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/ActionProvider.html"/>
    /// </summary>
    public partial class ActionProvider : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ActionProvider>
    {
        const string _bridgeClassName = "android.view.ActionProvider";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("ActionProvider class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ActionProvider() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("ActionProvider class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ActionProvider(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region VisibilityListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ActionProvider.VisibilityListener.html"/>
        /// </summary>
        public partial class VisibilityListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public VisibilityListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.view.ActionProvider_VisibilityListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region VisibilityListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="VisibilityListener"/> or its generic type if there is one
        /// </summary>
        public partial class VisibilityListenerDirect : VisibilityListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.view.ActionProvider$VisibilityListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

    
    }
    #endregion

    #region ActionProvider implementation
    public partial class ActionProvider
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ActionProvider.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        public ActionProvider(Android.Content.Context arg0)
            : base(arg0)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ActionProvider.html#onCreateActionView()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View"/></returns>
        [global::System.Obsolete()]
        public Android.View.View OnCreateActionView()
        {
            return IExecuteWithSignature<Android.View.View>("onCreateActionView", "()Landroid/view/View;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ActionProvider.html#onCreateActionView(android.view.MenuItem)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MenuItem"/></param>
        /// <returns><see cref="Android.View.View"/></returns>
        public Android.View.View OnCreateActionView(Android.View.MenuItem arg0)
        {
            return IExecuteWithSignature<Android.View.View>("onCreateActionView", "(Landroid/view/MenuItem;)Landroid/view/View;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ActionProvider.html#hasSubMenu()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasSubMenu()
        {
            return IExecuteWithSignature<bool>("hasSubMenu", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ActionProvider.html#isVisible()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsVisible()
        {
            return IExecuteWithSignature<bool>("isVisible", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ActionProvider.html#onPerformDefaultAction()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool OnPerformDefaultAction()
        {
            return IExecuteWithSignature<bool>("onPerformDefaultAction", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ActionProvider.html#overridesItemVisibility()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool OverridesItemVisibility()
        {
            return IExecuteWithSignature<bool>("overridesItemVisibility", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ActionProvider.html#onPrepareSubMenu(android.view.SubMenu)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.SubMenu"/></param>
        public void OnPrepareSubMenu(Android.View.SubMenu arg0)
        {
            IExecuteWithSignature("onPrepareSubMenu", "(Landroid/view/SubMenu;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ActionProvider.html#refreshVisibility()"/>
        /// </summary>
        public void RefreshVisibility()
        {
            IExecuteWithSignature("refreshVisibility", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ActionProvider.html#setVisibilityListener(android.view.ActionProvider.VisibilityListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ActionProvider.VisibilityListener"/></param>
        public void SetVisibilityListener(Android.View.ActionProvider.VisibilityListener arg0)
        {
            IExecuteWithSignature("setVisibilityListener", "(Landroid/view/ActionProvider$VisibilityListener;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region VisibilityListener implementation
        public partial class VisibilityListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="VisibilityListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onActionProviderVisibilityChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnActionProviderVisibilityChangedEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ActionProvider.VisibilityListener.html#onActionProviderVisibilityChanged(boolean)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnActionProviderVisibilityChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<bool> OnOnActionProviderVisibilityChanged { get; set; } = null;
            
            bool hasOverrideOnActionProviderVisibilityChanged = true;
            void OnActionProviderVisibilityChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnActionProviderVisibilityChanged = true;
                var methodToExecute = (OnOnActionProviderVisibilityChanged != null) ? OnOnActionProviderVisibilityChanged : OnActionProviderVisibilityChanged;
                methodToExecute.Invoke(data.EventData.GetAt<bool>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnActionProviderVisibilityChanged;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ActionProvider.VisibilityListener.html#onActionProviderVisibilityChanged(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public virtual void OnActionProviderVisibilityChanged(bool arg0)
            {
                hasOverrideOnActionProviderVisibilityChanged = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region VisibilityListenerDirect implementation
        public partial class VisibilityListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ActionProvider.VisibilityListener.html#onActionProviderVisibilityChanged(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public override void OnActionProviderVisibilityChanged(bool arg0)
            {
                IExecuteWithSignature("onActionProviderVisibilityChanged", "(Z)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
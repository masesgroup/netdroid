/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View.Inputmethod
{
    #region InputMethodManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html"/>
    /// </summary>
    public partial class InputMethodManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<InputMethodManager>
    {
        const string _bridgeClassName = "android.view.inputmethod.InputMethodManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public InputMethodManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public InputMethodManager(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region InputMethodManager implementation
    public partial class InputMethodManager
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#HANDWRITING_DELEGATE_FLAG_HOME_DELEGATOR_ALLOWED"/>
        /// </summary>
        public static int HANDWRITING_DELEGATE_FLAG_HOME_DELEGATOR_ALLOWED { get { if (!_HANDWRITING_DELEGATE_FLAG_HOME_DELEGATOR_ALLOWEDReady) { _HANDWRITING_DELEGATE_FLAG_HOME_DELEGATOR_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "HANDWRITING_DELEGATE_FLAG_HOME_DELEGATOR_ALLOWED"); _HANDWRITING_DELEGATE_FLAG_HOME_DELEGATOR_ALLOWEDReady = true; } return _HANDWRITING_DELEGATE_FLAG_HOME_DELEGATOR_ALLOWEDContent; } }
        private static int _HANDWRITING_DELEGATE_FLAG_HOME_DELEGATOR_ALLOWEDContent = default;
        private static bool _HANDWRITING_DELEGATE_FLAG_HOME_DELEGATOR_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#HIDE_IMPLICIT_ONLY"/>
        /// </summary>
        public static int HIDE_IMPLICIT_ONLY { get { if (!_HIDE_IMPLICIT_ONLYReady) { _HIDE_IMPLICIT_ONLYContent = SGetField<int>(LocalBridgeClazz, "HIDE_IMPLICIT_ONLY"); _HIDE_IMPLICIT_ONLYReady = true; } return _HIDE_IMPLICIT_ONLYContent; } }
        private static int _HIDE_IMPLICIT_ONLYContent = default;
        private static bool _HIDE_IMPLICIT_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#HIDE_NOT_ALWAYS"/>
        /// </summary>
        public static int HIDE_NOT_ALWAYS { get { if (!_HIDE_NOT_ALWAYSReady) { _HIDE_NOT_ALWAYSContent = SGetField<int>(LocalBridgeClazz, "HIDE_NOT_ALWAYS"); _HIDE_NOT_ALWAYSReady = true; } return _HIDE_NOT_ALWAYSContent; } }
        private static int _HIDE_NOT_ALWAYSContent = default;
        private static bool _HIDE_NOT_ALWAYSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#RESULT_HIDDEN"/>
        /// </summary>
        public static int RESULT_HIDDEN { get { if (!_RESULT_HIDDENReady) { _RESULT_HIDDENContent = SGetField<int>(LocalBridgeClazz, "RESULT_HIDDEN"); _RESULT_HIDDENReady = true; } return _RESULT_HIDDENContent; } }
        private static int _RESULT_HIDDENContent = default;
        private static bool _RESULT_HIDDENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#RESULT_SHOWN"/>
        /// </summary>
        public static int RESULT_SHOWN { get { if (!_RESULT_SHOWNReady) { _RESULT_SHOWNContent = SGetField<int>(LocalBridgeClazz, "RESULT_SHOWN"); _RESULT_SHOWNReady = true; } return _RESULT_SHOWNContent; } }
        private static int _RESULT_SHOWNContent = default;
        private static bool _RESULT_SHOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#RESULT_UNCHANGED_HIDDEN"/>
        /// </summary>
        public static int RESULT_UNCHANGED_HIDDEN { get { if (!_RESULT_UNCHANGED_HIDDENReady) { _RESULT_UNCHANGED_HIDDENContent = SGetField<int>(LocalBridgeClazz, "RESULT_UNCHANGED_HIDDEN"); _RESULT_UNCHANGED_HIDDENReady = true; } return _RESULT_UNCHANGED_HIDDENContent; } }
        private static int _RESULT_UNCHANGED_HIDDENContent = default;
        private static bool _RESULT_UNCHANGED_HIDDENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#RESULT_UNCHANGED_SHOWN"/>
        /// </summary>
        public static int RESULT_UNCHANGED_SHOWN { get { if (!_RESULT_UNCHANGED_SHOWNReady) { _RESULT_UNCHANGED_SHOWNContent = SGetField<int>(LocalBridgeClazz, "RESULT_UNCHANGED_SHOWN"); _RESULT_UNCHANGED_SHOWNReady = true; } return _RESULT_UNCHANGED_SHOWNContent; } }
        private static int _RESULT_UNCHANGED_SHOWNContent = default;
        private static bool _RESULT_UNCHANGED_SHOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#SHOW_FORCED"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SHOW_FORCED { get { if (!_SHOW_FORCEDReady) { _SHOW_FORCEDContent = SGetField<int>(LocalBridgeClazz, "SHOW_FORCED"); _SHOW_FORCEDReady = true; } return _SHOW_FORCEDContent; } }
        private static int _SHOW_FORCEDContent = default;
        private static bool _SHOW_FORCEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#SHOW_IMPLICIT"/>
        /// </summary>
        public static int SHOW_IMPLICIT { get { if (!_SHOW_IMPLICITReady) { _SHOW_IMPLICITContent = SGetField<int>(LocalBridgeClazz, "SHOW_IMPLICIT"); _SHOW_IMPLICITReady = true; } return _SHOW_IMPLICITContent; } }
        private static int _SHOW_IMPLICITContent = default;
        private static bool _SHOW_IMPLICITReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#getCurrentInputMethodInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Inputmethod.InputMethodInfo"/></returns>
        public Android.View.Inputmethod.InputMethodInfo GetCurrentInputMethodInfo()
        {
            return IExecuteWithSignature<Android.View.Inputmethod.InputMethodInfo>("getCurrentInputMethodInfo", "()Landroid/view/inputmethod/InputMethodInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#getCurrentInputMethodSubtype()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Inputmethod.InputMethodSubtype"/></returns>
        public Android.View.Inputmethod.InputMethodSubtype GetCurrentInputMethodSubtype()
        {
            return IExecuteWithSignature<Android.View.Inputmethod.InputMethodSubtype>("getCurrentInputMethodSubtype", "()Landroid/view/inputmethod/InputMethodSubtype;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#getLastInputMethodSubtype()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Inputmethod.InputMethodSubtype"/></returns>
        public Android.View.Inputmethod.InputMethodSubtype GetLastInputMethodSubtype()
        {
            return IExecuteWithSignature<Android.View.Inputmethod.InputMethodSubtype>("getLastInputMethodSubtype", "()Landroid/view/inputmethod/InputMethodSubtype;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#acceptStylusHandwritingDelegation(android.view.View,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool AcceptStylusHandwritingDelegation(Android.View.View arg0, Java.Lang.String arg1)
        {
            return IExecute<bool>("acceptStylusHandwritingDelegation", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#acceptStylusHandwritingDelegation(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool AcceptStylusHandwritingDelegation(Android.View.View arg0)
        {
            return IExecuteWithSignature<bool>("acceptStylusHandwritingDelegation", "(Landroid/view/View;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#hideSoftInputFromWindow(android.os.IBinder,int,android.os.ResultReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.IBinder"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Os.ResultReceiver"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HideSoftInputFromWindow(Android.Os.IBinder arg0, int arg1, Android.Os.ResultReceiver arg2)
        {
            return IExecute<bool>("hideSoftInputFromWindow", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#hideSoftInputFromWindow(android.os.IBinder,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.IBinder"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HideSoftInputFromWindow(Android.Os.IBinder arg0, int arg1)
        {
            return IExecute<bool>("hideSoftInputFromWindow", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#isAcceptingText()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAcceptingText()
        {
            return IExecuteWithSignature<bool>("isAcceptingText", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#isActive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsActive()
        {
            return IExecuteWithSignature<bool>("isActive", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#isActive(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsActive(Android.View.View arg0)
        {
            return IExecuteWithSignature<bool>("isActive", "(Landroid/view/View;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#isConnectionlessStylusHandwritingAvailable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsConnectionlessStylusHandwritingAvailable()
        {
            return IExecuteWithSignature<bool>("isConnectionlessStylusHandwritingAvailable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#isFullscreenMode()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFullscreenMode()
        {
            return IExecuteWithSignature<bool>("isFullscreenMode", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#isInputMethodSuppressingSpellChecker()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsInputMethodSuppressingSpellChecker()
        {
            return IExecuteWithSignature<bool>("isInputMethodSuppressingSpellChecker", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#isStylusHandwritingAvailable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStylusHandwritingAvailable()
        {
            return IExecuteWithSignature<bool>("isStylusHandwritingAvailable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#isWatchingCursor(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsWatchingCursor(Android.View.View arg0)
        {
            return IExecuteWithSignature<bool>("isWatchingCursor", "(Landroid/view/View;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.InputMethodSubtype"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool SetCurrentInputMethodSubtype(Android.View.Inputmethod.InputMethodSubtype arg0)
        {
            return IExecuteWithSignature<bool>("setCurrentInputMethodSubtype", "(Landroid/view/inputmethod/InputMethodSubtype;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#shouldOfferSwitchingToNextInputMethod(android.os.IBinder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.IBinder"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool ShouldOfferSwitchingToNextInputMethod(Android.Os.IBinder arg0)
        {
            return IExecuteWithSignature<bool>("shouldOfferSwitchingToNextInputMethod", "(Landroid/os/IBinder;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#showSoftInput(android.view.View,int,android.os.ResultReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Os.ResultReceiver"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ShowSoftInput(Android.View.View arg0, int arg1, Android.Os.ResultReceiver arg2)
        {
            return IExecute<bool>("showSoftInput", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#showSoftInput(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ShowSoftInput(Android.View.View arg0, int arg1)
        {
            return IExecute<bool>("showSoftInput", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#switchToLastInputMethod(android.os.IBinder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.IBinder"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool SwitchToLastInputMethod(Android.Os.IBinder arg0)
        {
            return IExecuteWithSignature<bool>("switchToLastInputMethod", "(Landroid/os/IBinder;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#switchToNextInputMethod(android.os.IBinder,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.IBinder"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool SwitchToNextInputMethod(Android.Os.IBinder arg0, bool arg1)
        {
            return IExecute<bool>("switchToNextInputMethod", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#getEnabledInputMethodList()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.View.Inputmethod.InputMethodInfo> GetEnabledInputMethodList()
        {
            return IExecuteWithSignature<Java.Util.List<Android.View.Inputmethod.InputMethodInfo>>("getEnabledInputMethodList", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#getInputMethodList()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.View.Inputmethod.InputMethodInfo> GetInputMethodList()
        {
            return IExecuteWithSignature<Java.Util.List<Android.View.Inputmethod.InputMethodInfo>>("getInputMethodList", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.InputMethodInfo"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.View.Inputmethod.InputMethodSubtype> GetEnabledInputMethodSubtypeList(Android.View.Inputmethod.InputMethodInfo arg0, bool arg1)
        {
            return IExecute<Java.Util.List<Android.View.Inputmethod.InputMethodSubtype>>("getEnabledInputMethodSubtypeList", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#getShortcutInputMethodsAndSubtypes()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<Android.View.Inputmethod.InputMethodInfo, Java.Util.List<Android.View.Inputmethod.InputMethodSubtype>> GetShortcutInputMethodsAndSubtypes()
        {
            return IExecuteWithSignature<Java.Util.Map<Android.View.Inputmethod.InputMethodInfo, Java.Util.List<Android.View.Inputmethod.InputMethodSubtype>>>("getShortcutInputMethodsAndSubtypes", "()Ljava/util/Map;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#acceptStylusHandwritingDelegation(android.view.View,java.lang.String,int,java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg4"><see cref="Java.Util.Function.Consumer"/></param>
        public void AcceptStylusHandwritingDelegation(Android.View.View arg0, Java.Lang.String arg1, int arg2, Java.Util.Concurrent.Executor arg3, Java.Util.Function.Consumer<Java.Lang.Boolean> arg4)
        {
            IExecute("acceptStylusHandwritingDelegation", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#acceptStylusHandwritingDelegation(android.view.View,java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Java.Util.Function.Consumer"/></param>
        public void AcceptStylusHandwritingDelegation(Android.View.View arg0, Java.Lang.String arg1, Java.Util.Concurrent.Executor arg2, Java.Util.Function.Consumer<Java.Lang.Boolean> arg3)
        {
            IExecute("acceptStylusHandwritingDelegation", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#dispatchKeyEventFromInputMethod(android.view.View,android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
        public void DispatchKeyEventFromInputMethod(Android.View.View arg0, Android.View.KeyEvent arg1)
        {
            IExecute("dispatchKeyEventFromInputMethod", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#displayCompletions(android.view.View,android.view.inputmethod.CompletionInfo[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.Inputmethod.CompletionInfo"/></param>
        public void DisplayCompletions(Android.View.View arg0, Android.View.Inputmethod.CompletionInfo[] arg1)
        {
            IExecute("displayCompletions", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#hideSoftInputFromInputMethod(android.os.IBinder,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.IBinder"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void HideSoftInputFromInputMethod(Android.Os.IBinder arg0, int arg1)
        {
            IExecute("hideSoftInputFromInputMethod", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#hideStatusIcon(android.os.IBinder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.IBinder"/></param>
        [global::System.Obsolete()]
        public void HideStatusIcon(Android.Os.IBinder arg0)
        {
            IExecuteWithSignature("hideStatusIcon", "(Landroid/os/IBinder;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#invalidateInput(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void InvalidateInput(Android.View.View arg0)
        {
            IExecuteWithSignature("invalidateInput", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#prepareStylusHandwritingDelegation(android.view.View,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void PrepareStylusHandwritingDelegation(Android.View.View arg0, Java.Lang.String arg1)
        {
            IExecute("prepareStylusHandwritingDelegation", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#prepareStylusHandwritingDelegation(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void PrepareStylusHandwritingDelegation(Android.View.View arg0)
        {
            IExecuteWithSignature("prepareStylusHandwritingDelegation", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#restartInput(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void RestartInput(Android.View.View arg0)
        {
            IExecuteWithSignature("restartInput", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        public void SendAppPrivateCommand(Android.View.View arg0, Java.Lang.String arg1, Android.Os.Bundle arg2)
        {
            IExecute("sendAppPrivateCommand", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.View.Inputmethod.InputMethodSubtype"/></param>
        [global::System.Obsolete()]
        public void SetAdditionalInputMethodSubtypes(Java.Lang.String arg0, Android.View.Inputmethod.InputMethodSubtype[] arg1)
        {
            IExecute("setAdditionalInputMethodSubtypes", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#setExplicitlyEnabledInputMethodSubtypes(java.lang.String,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetExplicitlyEnabledInputMethodSubtypes(Java.Lang.String arg0, int[] arg1)
        {
            IExecute("setExplicitlyEnabledInputMethodSubtypes", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#setInputMethod(android.os.IBinder,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.IBinder"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void SetInputMethod(Android.Os.IBinder arg0, Java.Lang.String arg1)
        {
            IExecute("setInputMethod", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.IBinder"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.View.Inputmethod.InputMethodSubtype"/></param>
        [global::System.Obsolete()]
        public void SetInputMethodAndSubtype(Android.Os.IBinder arg0, Java.Lang.String arg1, Android.View.Inputmethod.InputMethodSubtype arg2)
        {
            IExecute("setInputMethodAndSubtype", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#showInputMethodAndSubtypeEnabler(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void ShowInputMethodAndSubtypeEnabler(Java.Lang.String arg0)
        {
            IExecuteWithSignature("showInputMethodAndSubtypeEnabler", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#showInputMethodPicker()"/>
        /// </summary>
        public void ShowInputMethodPicker()
        {
            IExecuteWithSignature("showInputMethodPicker", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#showSoftInputFromInputMethod(android.os.IBinder,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.IBinder"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void ShowSoftInputFromInputMethod(Android.Os.IBinder arg0, int arg1)
        {
            IExecute("showSoftInputFromInputMethod", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#showStatusIcon(android.os.IBinder,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.IBinder"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void ShowStatusIcon(Android.Os.IBinder arg0, Java.Lang.String arg1, int arg2)
        {
            IExecute("showStatusIcon", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#startConnectionlessStylusHandwriting(android.view.View,android.view.inputmethod.CursorAnchorInfo,java.util.concurrent.Executor,android.view.inputmethod.ConnectionlessHandwritingCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.Inputmethod.CursorAnchorInfo"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Android.View.Inputmethod.ConnectionlessHandwritingCallback"/></param>
        public void StartConnectionlessStylusHandwriting(Android.View.View arg0, Android.View.Inputmethod.CursorAnchorInfo arg1, Java.Util.Concurrent.Executor arg2, Android.View.Inputmethod.ConnectionlessHandwritingCallback arg3)
        {
            IExecute("startConnectionlessStylusHandwriting", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#startConnectionlessStylusHandwritingForDelegation(android.view.View,android.view.inputmethod.CursorAnchorInfo,java.lang.String,java.util.concurrent.Executor,android.view.inputmethod.ConnectionlessHandwritingCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.Inputmethod.CursorAnchorInfo"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg4"><see cref="Android.View.Inputmethod.ConnectionlessHandwritingCallback"/></param>
        public void StartConnectionlessStylusHandwritingForDelegation(Android.View.View arg0, Android.View.Inputmethod.CursorAnchorInfo arg1, Java.Lang.String arg2, Java.Util.Concurrent.Executor arg3, Android.View.Inputmethod.ConnectionlessHandwritingCallback arg4)
        {
            IExecute("startConnectionlessStylusHandwritingForDelegation", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#startConnectionlessStylusHandwritingForDelegation(android.view.View,android.view.inputmethod.CursorAnchorInfo,java.util.concurrent.Executor,android.view.inputmethod.ConnectionlessHandwritingCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.Inputmethod.CursorAnchorInfo"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Android.View.Inputmethod.ConnectionlessHandwritingCallback"/></param>
        public void StartConnectionlessStylusHandwritingForDelegation(Android.View.View arg0, Android.View.Inputmethod.CursorAnchorInfo arg1, Java.Util.Concurrent.Executor arg2, Android.View.Inputmethod.ConnectionlessHandwritingCallback arg3)
        {
            IExecute("startConnectionlessStylusHandwritingForDelegation", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#startStylusHandwriting(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void StartStylusHandwriting(Android.View.View arg0)
        {
            IExecuteWithSignature("startStylusHandwriting", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#toggleSoftInput(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void ToggleSoftInput(int arg0, int arg1)
        {
            IExecute("toggleSoftInput", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#toggleSoftInputFromWindow(android.os.IBinder,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.IBinder"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void ToggleSoftInputFromWindow(Android.Os.IBinder arg0, int arg1, int arg2)
        {
            IExecute("toggleSoftInputFromWindow", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#updateCursor(android.view.View,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void UpdateCursor(Android.View.View arg0, int arg1, int arg2, int arg3, int arg4)
        {
            IExecute("updateCursor", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#updateCursorAnchorInfo(android.view.View,android.view.inputmethod.CursorAnchorInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.Inputmethod.CursorAnchorInfo"/></param>
        public void UpdateCursorAnchorInfo(Android.View.View arg0, Android.View.Inputmethod.CursorAnchorInfo arg1)
        {
            IExecute("updateCursorAnchorInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#updateExtractedText(android.view.View,int,android.view.inputmethod.ExtractedText)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.View.Inputmethod.ExtractedText"/></param>
        public void UpdateExtractedText(Android.View.View arg0, int arg1, Android.View.Inputmethod.ExtractedText arg2)
        {
            IExecute("updateExtractedText", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#updateSelection(android.view.View,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public void UpdateSelection(Android.View.View arg0, int arg1, int arg2, int arg3, int arg4)
        {
            IExecute("updateSelection", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#viewClicked(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        [global::System.Obsolete()]
        public void ViewClicked(Android.View.View arg0)
        {
            IExecuteWithSignature("viewClicked", "(Landroid/view/View;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region DragEvent declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/DragEvent.html"/>
    /// </summary>
    public partial class DragEvent : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.view.DragEvent";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public DragEvent() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public DragEvent(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region DragEvent implementation
    public partial class DragEvent
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/DragEvent.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/DragEvent.html#ACTION_DRAG_ENDED"/>
        /// </summary>
        public static int ACTION_DRAG_ENDED { get { if (!_ACTION_DRAG_ENDEDReady) { _ACTION_DRAG_ENDEDContent = SGetField<int>(LocalBridgeClazz, "ACTION_DRAG_ENDED"); _ACTION_DRAG_ENDEDReady = true; } return _ACTION_DRAG_ENDEDContent; } }
        private static int _ACTION_DRAG_ENDEDContent = default;
        private static bool _ACTION_DRAG_ENDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/DragEvent.html#ACTION_DRAG_ENTERED"/>
        /// </summary>
        public static int ACTION_DRAG_ENTERED { get { if (!_ACTION_DRAG_ENTEREDReady) { _ACTION_DRAG_ENTEREDContent = SGetField<int>(LocalBridgeClazz, "ACTION_DRAG_ENTERED"); _ACTION_DRAG_ENTEREDReady = true; } return _ACTION_DRAG_ENTEREDContent; } }
        private static int _ACTION_DRAG_ENTEREDContent = default;
        private static bool _ACTION_DRAG_ENTEREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/DragEvent.html#ACTION_DRAG_EXITED"/>
        /// </summary>
        public static int ACTION_DRAG_EXITED { get { if (!_ACTION_DRAG_EXITEDReady) { _ACTION_DRAG_EXITEDContent = SGetField<int>(LocalBridgeClazz, "ACTION_DRAG_EXITED"); _ACTION_DRAG_EXITEDReady = true; } return _ACTION_DRAG_EXITEDContent; } }
        private static int _ACTION_DRAG_EXITEDContent = default;
        private static bool _ACTION_DRAG_EXITEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/DragEvent.html#ACTION_DRAG_LOCATION"/>
        /// </summary>
        public static int ACTION_DRAG_LOCATION { get { if (!_ACTION_DRAG_LOCATIONReady) { _ACTION_DRAG_LOCATIONContent = SGetField<int>(LocalBridgeClazz, "ACTION_DRAG_LOCATION"); _ACTION_DRAG_LOCATIONReady = true; } return _ACTION_DRAG_LOCATIONContent; } }
        private static int _ACTION_DRAG_LOCATIONContent = default;
        private static bool _ACTION_DRAG_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/DragEvent.html#ACTION_DRAG_STARTED"/>
        /// </summary>
        public static int ACTION_DRAG_STARTED { get { if (!_ACTION_DRAG_STARTEDReady) { _ACTION_DRAG_STARTEDContent = SGetField<int>(LocalBridgeClazz, "ACTION_DRAG_STARTED"); _ACTION_DRAG_STARTEDReady = true; } return _ACTION_DRAG_STARTEDContent; } }
        private static int _ACTION_DRAG_STARTEDContent = default;
        private static bool _ACTION_DRAG_STARTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/DragEvent.html#ACTION_DROP"/>
        /// </summary>
        public static int ACTION_DROP { get { if (!_ACTION_DROPReady) { _ACTION_DROPContent = SGetField<int>(LocalBridgeClazz, "ACTION_DROP"); _ACTION_DROPReady = true; } return _ACTION_DROPContent; } }
        private static int _ACTION_DROPContent = default;
        private static bool _ACTION_DROPReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/DragEvent.html#getClipData()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.ClipData"/></returns>
        public Android.Content.ClipData GetClipData()
        {
            return IExecuteWithSignature<Android.Content.ClipData>("getClipData", "()Landroid/content/ClipData;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/DragEvent.html#getClipDescription()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.ClipDescription"/></returns>
        public Android.Content.ClipDescription GetClipDescription()
        {
            return IExecuteWithSignature<Android.Content.ClipDescription>("getClipDescription", "()Landroid/content/ClipDescription;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/DragEvent.html#getResult()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetResult()
        {
            return IExecuteWithSignature<bool>("getResult", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/DragEvent.html#getX()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetX()
        {
            return IExecuteWithSignature<float>("getX", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/DragEvent.html#getY()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetY()
        {
            return IExecuteWithSignature<float>("getY", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/DragEvent.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/DragEvent.html#getAction()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAction()
        {
            return IExecuteWithSignature<int>("getAction", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/DragEvent.html#getLocalState()"/>
        /// </summary>
        /// <returns><see cref="object"/></returns>
        public object GetLocalState()
        {
            return IExecuteWithSignature("getLocalState", "()Ljava/lang/Object;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/DragEvent.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
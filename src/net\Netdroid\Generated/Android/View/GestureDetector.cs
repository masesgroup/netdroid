/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region GestureDetector declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html"/>
    /// </summary>
    public partial class GestureDetector : MASES.JCOBridge.C2JBridge.JVMBridgeBase<GestureDetector>
    {
        const string _bridgeClassName = "android.view.GestureDetector";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public GestureDetector() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public GestureDetector(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region OnContextClickListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnContextClickListener.html"/>
        /// </summary>
        public partial class OnContextClickListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnContextClickListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.view.GestureDetector_OnContextClickListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnContextClickListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnContextClickListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnContextClickListenerDirect : OnContextClickListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.view.GestureDetector$OnContextClickListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnDoubleTapListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html"/>
        /// </summary>
        public partial class OnDoubleTapListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnDoubleTapListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.view.GestureDetector_OnDoubleTapListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnDoubleTapListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnDoubleTapListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnDoubleTapListenerDirect : OnDoubleTapListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.view.GestureDetector$OnDoubleTapListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnGestureListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html"/>
        /// </summary>
        public partial class OnGestureListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnGestureListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.view.GestureDetector_OnGestureListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnGestureListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnGestureListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnGestureListenerDirect : OnGestureListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.view.GestureDetector$OnGestureListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region SimpleOnGestureListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html"/>
        /// </summary>
        public partial class SimpleOnGestureListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public SimpleOnGestureListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.view.GestureDetector_SimpleOnGestureListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region SimpleOnGestureListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="SimpleOnGestureListener"/> or its generic type if there is one
        /// </summary>
        public partial class SimpleOnGestureListenerDirect : SimpleOnGestureListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.view.GestureDetector$SimpleOnGestureListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

    
    }
    #endregion

    #region GestureDetector implementation
    public partial class GestureDetector
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#%3Cinit%3E(android.content.Context,android.view.GestureDetector.OnGestureListener,android.os.Handler,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.View.GestureDetector.OnGestureListener"/></param>
        /// <param name="arg2"><see cref="Android.Os.Handler"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        public GestureDetector(Android.Content.Context arg0, Android.View.GestureDetector.OnGestureListener arg1, Android.Os.Handler arg2, bool arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#%3Cinit%3E(android.content.Context,android.view.GestureDetector.OnGestureListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.View.GestureDetector.OnGestureListener"/></param>
        /// <param name="arg2"><see cref="Android.Os.Handler"/></param>
        public GestureDetector(Android.Content.Context arg0, Android.View.GestureDetector.OnGestureListener arg1, Android.Os.Handler arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#%3Cinit%3E(android.content.Context,android.view.GestureDetector.OnGestureListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.View.GestureDetector.OnGestureListener"/></param>
        public GestureDetector(Android.Content.Context arg0, Android.View.GestureDetector.OnGestureListener arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#%3Cinit%3E(android.view.GestureDetector.OnGestureListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.GestureDetector.OnGestureListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        [global::System.Obsolete()]
        public GestureDetector(Android.View.GestureDetector.OnGestureListener arg0, Android.Os.Handler arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#%3Cinit%3E(android.view.GestureDetector.OnGestureListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.GestureDetector.OnGestureListener"/></param>
        [global::System.Obsolete()]
        public GestureDetector(Android.View.GestureDetector.OnGestureListener arg0)
            : base(arg0)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#isLongpressEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLongpressEnabled()
        {
            return IExecuteWithSignature<bool>("isLongpressEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#onGenericMotionEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnGenericMotionEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("onGenericMotionEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#onTouchEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnTouchEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("onTouchEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#setContextClickListener(android.view.GestureDetector.OnContextClickListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.GestureDetector.OnContextClickListener"/></param>
        public void SetContextClickListener(Android.View.GestureDetector.OnContextClickListener arg0)
        {
            IExecuteWithSignature("setContextClickListener", "(Landroid/view/GestureDetector$OnContextClickListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#setIsLongpressEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetIsLongpressEnabled(bool arg0)
        {
            IExecuteWithSignature("setIsLongpressEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#setOnDoubleTapListener(android.view.GestureDetector.OnDoubleTapListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.GestureDetector.OnDoubleTapListener"/></param>
        public void SetOnDoubleTapListener(Android.View.GestureDetector.OnDoubleTapListener arg0)
        {
            IExecuteWithSignature("setOnDoubleTapListener", "(Landroid/view/GestureDetector$OnDoubleTapListener;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region OnContextClickListener implementation
        public partial class OnContextClickListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnContextClickListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onContextClick", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnContextClickEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnContextClickListener.html#onContextClick(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnContextClick"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.MotionEvent, bool> OnOnContextClick { get; set; } = null;
            
            bool hasOverrideOnContextClick = true;
            void OnContextClickEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnContextClick = true;
                var methodToExecute = (OnOnContextClick != null) ? OnOnContextClick : OnContextClick;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnContextClick, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnContextClickListener.html#onContextClick(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnContextClick(Android.View.MotionEvent arg0)
            {
                hasOverrideOnContextClick = false; return default;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnContextClickListenerDirect implementation
        public partial class OnContextClickListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnContextClickListener.html#onContextClick(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnContextClick(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onContextClick", "(Landroid/view/MotionEvent;)Z", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnDoubleTapListener implementation
        public partial class OnDoubleTapListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnDoubleTapListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDoubleTap", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDoubleTapEventHandler));
                AddEventHandler("onDoubleTapEvent", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDoubleTapEventEventHandler));
                AddEventHandler("onSingleTapConfirmed", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnSingleTapConfirmedEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onDoubleTap(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDoubleTap"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.MotionEvent, bool> OnOnDoubleTap { get; set; } = null;
            
            bool hasOverrideOnDoubleTap = true;
            void OnDoubleTapEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDoubleTap = true;
                var methodToExecute = (OnOnDoubleTap != null) ? OnOnDoubleTap : OnDoubleTap;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnDoubleTap, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onDoubleTap(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnDoubleTap(Android.View.MotionEvent arg0)
            {
                hasOverrideOnDoubleTap = false; return default;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onDoubleTapEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDoubleTapEvent"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.MotionEvent, bool> OnOnDoubleTapEvent { get; set; } = null;
            
            bool hasOverrideOnDoubleTapEvent = true;
            void OnDoubleTapEventEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDoubleTapEvent = true;
                var methodToExecute = (OnOnDoubleTapEvent != null) ? OnOnDoubleTapEvent : OnDoubleTapEvent;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnDoubleTapEvent, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onDoubleTapEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnDoubleTapEvent(Android.View.MotionEvent arg0)
            {
                hasOverrideOnDoubleTapEvent = false; return default;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onSingleTapConfirmed(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnSingleTapConfirmed"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.MotionEvent, bool> OnOnSingleTapConfirmed { get; set; } = null;
            
            bool hasOverrideOnSingleTapConfirmed = true;
            void OnSingleTapConfirmedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnSingleTapConfirmed = true;
                var methodToExecute = (OnOnSingleTapConfirmed != null) ? OnOnSingleTapConfirmed : OnSingleTapConfirmed;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnSingleTapConfirmed, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onSingleTapConfirmed(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnSingleTapConfirmed(Android.View.MotionEvent arg0)
            {
                hasOverrideOnSingleTapConfirmed = false; return default;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnDoubleTapListenerDirect implementation
        public partial class OnDoubleTapListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onDoubleTap(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnDoubleTap(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onDoubleTap", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onDoubleTapEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnDoubleTapEvent(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onDoubleTapEvent", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onSingleTapConfirmed(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnSingleTapConfirmed(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onSingleTapConfirmed", "(Landroid/view/MotionEvent;)Z", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnGestureListener implementation
        public partial class OnGestureListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnGestureListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDown", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDownEventHandler));
                AddEventHandler("onFling", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnFlingEventHandler));
                AddEventHandler("onScroll", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnScrollEventHandler));
                AddEventHandler("onSingleTapUp", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnSingleTapUpEventHandler));
                AddEventHandler("onLongPress", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnLongPressEventHandler));
                AddEventHandler("onShowPress", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnShowPressEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onDown(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDown"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.MotionEvent, bool> OnOnDown { get; set; } = null;
            
            bool hasOverrideOnDown = true;
            void OnDownEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDown = true;
                var methodToExecute = (OnOnDown != null) ? OnOnDown : OnDown;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnDown, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onDown(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnDown(Android.View.MotionEvent arg0)
            {
                hasOverrideOnDown = false; return default;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnFling"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.MotionEvent, Android.View.MotionEvent, float, float, bool> OnOnFling { get; set; } = null;
            
            bool hasOverrideOnFling = true;
            void OnFlingEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnFling = true;
                var methodToExecute = (OnOnFling != null) ? OnOnFling : OnFling;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0), data.EventData.GetAt<Android.View.MotionEvent>(1), data.EventData.GetAt<float>(2), data.EventData.GetAt<float>(3));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnFling, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnFling(Android.View.MotionEvent arg0, Android.View.MotionEvent arg1, float arg2, float arg3)
            {
                hasOverrideOnFling = false; return default;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnScroll"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.MotionEvent, Android.View.MotionEvent, float, float, bool> OnOnScroll { get; set; } = null;
            
            bool hasOverrideOnScroll = true;
            void OnScrollEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnScroll = true;
                var methodToExecute = (OnOnScroll != null) ? OnOnScroll : OnScroll;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0), data.EventData.GetAt<Android.View.MotionEvent>(1), data.EventData.GetAt<float>(2), data.EventData.GetAt<float>(3));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnScroll, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnScroll(Android.View.MotionEvent arg0, Android.View.MotionEvent arg1, float arg2, float arg3)
            {
                hasOverrideOnScroll = false; return default;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onSingleTapUp(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnSingleTapUp"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.MotionEvent, bool> OnOnSingleTapUp { get; set; } = null;
            
            bool hasOverrideOnSingleTapUp = true;
            void OnSingleTapUpEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnSingleTapUp = true;
                var methodToExecute = (OnOnSingleTapUp != null) ? OnOnSingleTapUp : OnSingleTapUp;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnSingleTapUp, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onSingleTapUp(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnSingleTapUp(Android.View.MotionEvent arg0)
            {
                hasOverrideOnSingleTapUp = false; return default;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onLongPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnLongPress"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.MotionEvent> OnOnLongPress { get; set; } = null;
            
            bool hasOverrideOnLongPress = true;
            void OnLongPressEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnLongPress = true;
                var methodToExecute = (OnOnLongPress != null) ? OnOnLongPress : OnLongPress;
                methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnLongPress;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onLongPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            public virtual void OnLongPress(Android.View.MotionEvent arg0)
            {
                hasOverrideOnLongPress = false;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onShowPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnShowPress"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.MotionEvent> OnOnShowPress { get; set; } = null;
            
            bool hasOverrideOnShowPress = true;
            void OnShowPressEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnShowPress = true;
                var methodToExecute = (OnOnShowPress != null) ? OnOnShowPress : OnShowPress;
                methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnShowPress;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onShowPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            public virtual void OnShowPress(Android.View.MotionEvent arg0)
            {
                hasOverrideOnShowPress = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnGestureListenerDirect implementation
        public partial class OnGestureListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onDown(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnDown(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onDown", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnFling(Android.View.MotionEvent arg0, Android.View.MotionEvent arg1, float arg2, float arg3)
            {
                return IExecute<bool>("onFling", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnScroll(Android.View.MotionEvent arg0, Android.View.MotionEvent arg1, float arg2, float arg3)
            {
                return IExecute<bool>("onScroll", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onSingleTapUp(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnSingleTapUp(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onSingleTapUp", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onLongPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            public override void OnLongPress(Android.View.MotionEvent arg0)
            {
                IExecuteWithSignature("onLongPress", "(Landroid/view/MotionEvent;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onShowPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            public override void OnShowPress(Android.View.MotionEvent arg0)
            {
                IExecuteWithSignature("onShowPress", "(Landroid/view/MotionEvent;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region SimpleOnGestureListener implementation
        public partial class SimpleOnGestureListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="SimpleOnGestureListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onContextClick", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnContextClickEventHandler));
                AddEventHandler("onDoubleTap", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDoubleTapEventHandler));
                AddEventHandler("onDoubleTapEvent", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDoubleTapEventEventHandler));
                AddEventHandler("onDown", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDownEventHandler));
                AddEventHandler("onFling", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnFlingEventHandler));
                AddEventHandler("onScroll", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnScrollEventHandler));
                AddEventHandler("onSingleTapConfirmed", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnSingleTapConfirmedEventHandler));
                AddEventHandler("onSingleTapUp", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnSingleTapUpEventHandler));
                AddEventHandler("onLongPress", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnLongPressEventHandler));
                AddEventHandler("onShowPress", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnShowPressEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onContextClick(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnContextClick"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.MotionEvent, bool> OnOnContextClick { get; set; } = null;
            
            bool hasOverrideOnContextClick = true;
            void OnContextClickEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnContextClick = true;
                var methodToExecute = (OnOnContextClick != null) ? OnOnContextClick : OnContextClick;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnContextClick, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onContextClick(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnContextClick(Android.View.MotionEvent arg0)
            {
                hasOverrideOnContextClick = false; return default;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDoubleTap(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDoubleTap"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.MotionEvent, bool> OnOnDoubleTap { get; set; } = null;
            
            bool hasOverrideOnDoubleTap = true;
            void OnDoubleTapEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDoubleTap = true;
                var methodToExecute = (OnOnDoubleTap != null) ? OnOnDoubleTap : OnDoubleTap;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnDoubleTap, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDoubleTap(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnDoubleTap(Android.View.MotionEvent arg0)
            {
                hasOverrideOnDoubleTap = false; return default;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDoubleTapEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDoubleTapEvent"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.MotionEvent, bool> OnOnDoubleTapEvent { get; set; } = null;
            
            bool hasOverrideOnDoubleTapEvent = true;
            void OnDoubleTapEventEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDoubleTapEvent = true;
                var methodToExecute = (OnOnDoubleTapEvent != null) ? OnOnDoubleTapEvent : OnDoubleTapEvent;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnDoubleTapEvent, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDoubleTapEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnDoubleTapEvent(Android.View.MotionEvent arg0)
            {
                hasOverrideOnDoubleTapEvent = false; return default;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDown(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDown"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.MotionEvent, bool> OnOnDown { get; set; } = null;
            
            bool hasOverrideOnDown = true;
            void OnDownEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDown = true;
                var methodToExecute = (OnOnDown != null) ? OnOnDown : OnDown;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnDown, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDown(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnDown(Android.View.MotionEvent arg0)
            {
                hasOverrideOnDown = false; return default;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnFling"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.MotionEvent, Android.View.MotionEvent, float, float, bool> OnOnFling { get; set; } = null;
            
            bool hasOverrideOnFling = true;
            void OnFlingEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnFling = true;
                var methodToExecute = (OnOnFling != null) ? OnOnFling : OnFling;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0), data.EventData.GetAt<Android.View.MotionEvent>(1), data.EventData.GetAt<float>(2), data.EventData.GetAt<float>(3));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnFling, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnFling(Android.View.MotionEvent arg0, Android.View.MotionEvent arg1, float arg2, float arg3)
            {
                hasOverrideOnFling = false; return default;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnScroll"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.MotionEvent, Android.View.MotionEvent, float, float, bool> OnOnScroll { get; set; } = null;
            
            bool hasOverrideOnScroll = true;
            void OnScrollEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnScroll = true;
                var methodToExecute = (OnOnScroll != null) ? OnOnScroll : OnScroll;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0), data.EventData.GetAt<Android.View.MotionEvent>(1), data.EventData.GetAt<float>(2), data.EventData.GetAt<float>(3));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnScroll, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnScroll(Android.View.MotionEvent arg0, Android.View.MotionEvent arg1, float arg2, float arg3)
            {
                hasOverrideOnScroll = false; return default;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onSingleTapConfirmed(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnSingleTapConfirmed"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.MotionEvent, bool> OnOnSingleTapConfirmed { get; set; } = null;
            
            bool hasOverrideOnSingleTapConfirmed = true;
            void OnSingleTapConfirmedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnSingleTapConfirmed = true;
                var methodToExecute = (OnOnSingleTapConfirmed != null) ? OnOnSingleTapConfirmed : OnSingleTapConfirmed;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnSingleTapConfirmed, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onSingleTapConfirmed(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnSingleTapConfirmed(Android.View.MotionEvent arg0)
            {
                hasOverrideOnSingleTapConfirmed = false; return default;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onSingleTapUp(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnSingleTapUp"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.MotionEvent, bool> OnOnSingleTapUp { get; set; } = null;
            
            bool hasOverrideOnSingleTapUp = true;
            void OnSingleTapUpEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnSingleTapUp = true;
                var methodToExecute = (OnOnSingleTapUp != null) ? OnOnSingleTapUp : OnSingleTapUp;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnSingleTapUp, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onSingleTapUp(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnSingleTapUp(Android.View.MotionEvent arg0)
            {
                hasOverrideOnSingleTapUp = false; return default;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onLongPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnLongPress"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.MotionEvent> OnOnLongPress { get; set; } = null;
            
            bool hasOverrideOnLongPress = true;
            void OnLongPressEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnLongPress = true;
                var methodToExecute = (OnOnLongPress != null) ? OnOnLongPress : OnLongPress;
                methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnLongPress;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onLongPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            public virtual void OnLongPress(Android.View.MotionEvent arg0)
            {
                hasOverrideOnLongPress = false;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onShowPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnShowPress"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.MotionEvent> OnOnShowPress { get; set; } = null;
            
            bool hasOverrideOnShowPress = true;
            void OnShowPressEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnShowPress = true;
                var methodToExecute = (OnOnShowPress != null) ? OnOnShowPress : OnShowPress;
                methodToExecute.Invoke(data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnShowPress;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onShowPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            public virtual void OnShowPress(Android.View.MotionEvent arg0)
            {
                hasOverrideOnShowPress = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region SimpleOnGestureListenerDirect implementation
        public partial class SimpleOnGestureListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onContextClick(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnContextClick(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onContextClick", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDoubleTap(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnDoubleTap(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onDoubleTap", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDoubleTapEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnDoubleTapEvent(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onDoubleTapEvent", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDown(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnDown(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onDown", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnFling(Android.View.MotionEvent arg0, Android.View.MotionEvent arg1, float arg2, float arg3)
            {
                return IExecute<bool>("onFling", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnScroll(Android.View.MotionEvent arg0, Android.View.MotionEvent arg1, float arg2, float arg3)
            {
                return IExecute<bool>("onScroll", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onSingleTapConfirmed(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnSingleTapConfirmed(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onSingleTapConfirmed", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onSingleTapUp(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnSingleTapUp(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onSingleTapUp", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onLongPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            public override void OnLongPress(Android.View.MotionEvent arg0)
            {
                IExecuteWithSignature("onLongPress", "(Landroid/view/MotionEvent;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onShowPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            public override void OnShowPress(Android.View.MotionEvent arg0)
            {
                IExecuteWithSignature("onShowPress", "(Landroid/view/MotionEvent;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
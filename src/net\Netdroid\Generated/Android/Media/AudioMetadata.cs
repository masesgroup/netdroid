/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region AudioMetadata declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.html"/>
    /// </summary>
    public partial class AudioMetadata : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AudioMetadata>
    {
        const string _bridgeClassName = "android.media.AudioMetadata";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public AudioMetadata() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public AudioMetadata(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Format declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Format.html"/>
        /// </summary>
        public partial class Format : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Format>
        {
            const string _bridgeClassName = "android.media.AudioMetadata$Format";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Format() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Format(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Key declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Key.html"/>
        /// </summary>
        public partial class Key : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Key>
        {
            const string _bridgeClassName = "android.media.AudioMetadata$Key";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("Key class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Key() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("Key class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Key(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Key<T> declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Key.html"/>
        /// </summary>
        /// <typeparam name="T"></typeparam>
        public partial class Key<T> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Key<T>>
        {
            const string _bridgeClassName = "android.media.AudioMetadata$Key";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("Key class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Key() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("Key class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Key(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region AudioMetadata implementation
    public partial class AudioMetadata
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.html#createMap()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.AudioMetadataMap"/></returns>
        public static Android.Media.AudioMetadataMap CreateMap()
        {
            return SExecuteWithSignature<Android.Media.AudioMetadataMap>(LocalBridgeClazz, "createMap", "()Landroid/media/AudioMetadataMap;");
        }
    
        #endregion
    
        #region Instance methods
    
        #endregion
    
        #region Nested classes
        #region Format implementation
        public partial class Format
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Format.html#KEY_ATMOS_PRESENT"/>
            /// </summary>
            public static Android.Media.AudioMetadata.Key KEY_ATMOS_PRESENT { get { if (!_KEY_ATMOS_PRESENTReady) { _KEY_ATMOS_PRESENTContent = SGetField<Android.Media.AudioMetadata.Key>(LocalBridgeClazz, "KEY_ATMOS_PRESENT"); _KEY_ATMOS_PRESENTReady = true; } return _KEY_ATMOS_PRESENTContent; } }
            private static Android.Media.AudioMetadata.Key _KEY_ATMOS_PRESENTContent = default;
            private static bool _KEY_ATMOS_PRESENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Format.html#KEY_AUDIO_ENCODING"/>
            /// </summary>
            public static Android.Media.AudioMetadata.Key KEY_AUDIO_ENCODING { get { if (!_KEY_AUDIO_ENCODINGReady) { _KEY_AUDIO_ENCODINGContent = SGetField<Android.Media.AudioMetadata.Key>(LocalBridgeClazz, "KEY_AUDIO_ENCODING"); _KEY_AUDIO_ENCODINGReady = true; } return _KEY_AUDIO_ENCODINGContent; } }
            private static Android.Media.AudioMetadata.Key _KEY_AUDIO_ENCODINGContent = default;
            private static bool _KEY_AUDIO_ENCODINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Format.html#KEY_BIT_RATE"/>
            /// </summary>
            public static Android.Media.AudioMetadata.Key KEY_BIT_RATE { get { if (!_KEY_BIT_RATEReady) { _KEY_BIT_RATEContent = SGetField<Android.Media.AudioMetadata.Key>(LocalBridgeClazz, "KEY_BIT_RATE"); _KEY_BIT_RATEReady = true; } return _KEY_BIT_RATEContent; } }
            private static Android.Media.AudioMetadata.Key _KEY_BIT_RATEContent = default;
            private static bool _KEY_BIT_RATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Format.html#KEY_BIT_WIDTH"/>
            /// </summary>
            public static Android.Media.AudioMetadata.Key KEY_BIT_WIDTH { get { if (!_KEY_BIT_WIDTHReady) { _KEY_BIT_WIDTHContent = SGetField<Android.Media.AudioMetadata.Key>(LocalBridgeClazz, "KEY_BIT_WIDTH"); _KEY_BIT_WIDTHReady = true; } return _KEY_BIT_WIDTHContent; } }
            private static Android.Media.AudioMetadata.Key _KEY_BIT_WIDTHContent = default;
            private static bool _KEY_BIT_WIDTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Format.html#KEY_CHANNEL_MASK"/>
            /// </summary>
            public static Android.Media.AudioMetadata.Key KEY_CHANNEL_MASK { get { if (!_KEY_CHANNEL_MASKReady) { _KEY_CHANNEL_MASKContent = SGetField<Android.Media.AudioMetadata.Key>(LocalBridgeClazz, "KEY_CHANNEL_MASK"); _KEY_CHANNEL_MASKReady = true; } return _KEY_CHANNEL_MASKContent; } }
            private static Android.Media.AudioMetadata.Key _KEY_CHANNEL_MASKContent = default;
            private static bool _KEY_CHANNEL_MASKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Format.html#KEY_PRESENTATION_CONTENT_CLASSIFIER"/>
            /// </summary>
            public static Android.Media.AudioMetadata.Key KEY_PRESENTATION_CONTENT_CLASSIFIER { get { if (!_KEY_PRESENTATION_CONTENT_CLASSIFIERReady) { _KEY_PRESENTATION_CONTENT_CLASSIFIERContent = SGetField<Android.Media.AudioMetadata.Key>(LocalBridgeClazz, "KEY_PRESENTATION_CONTENT_CLASSIFIER"); _KEY_PRESENTATION_CONTENT_CLASSIFIERReady = true; } return _KEY_PRESENTATION_CONTENT_CLASSIFIERContent; } }
            private static Android.Media.AudioMetadata.Key _KEY_PRESENTATION_CONTENT_CLASSIFIERContent = default;
            private static bool _KEY_PRESENTATION_CONTENT_CLASSIFIERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Format.html#KEY_PRESENTATION_ID"/>
            /// </summary>
            public static Android.Media.AudioMetadata.Key KEY_PRESENTATION_ID { get { if (!_KEY_PRESENTATION_IDReady) { _KEY_PRESENTATION_IDContent = SGetField<Android.Media.AudioMetadata.Key>(LocalBridgeClazz, "KEY_PRESENTATION_ID"); _KEY_PRESENTATION_IDReady = true; } return _KEY_PRESENTATION_IDContent; } }
            private static Android.Media.AudioMetadata.Key _KEY_PRESENTATION_IDContent = default;
            private static bool _KEY_PRESENTATION_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Format.html#KEY_PROGRAM_ID"/>
            /// </summary>
            public static Android.Media.AudioMetadata.Key KEY_PROGRAM_ID { get { if (!_KEY_PROGRAM_IDReady) { _KEY_PROGRAM_IDContent = SGetField<Android.Media.AudioMetadata.Key>(LocalBridgeClazz, "KEY_PROGRAM_ID"); _KEY_PROGRAM_IDReady = true; } return _KEY_PROGRAM_IDContent; } }
            private static Android.Media.AudioMetadata.Key _KEY_PROGRAM_IDContent = default;
            private static bool _KEY_PROGRAM_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Format.html#KEY_SAMPLE_RATE"/>
            /// </summary>
            public static Android.Media.AudioMetadata.Key KEY_SAMPLE_RATE { get { if (!_KEY_SAMPLE_RATEReady) { _KEY_SAMPLE_RATEContent = SGetField<Android.Media.AudioMetadata.Key>(LocalBridgeClazz, "KEY_SAMPLE_RATE"); _KEY_SAMPLE_RATEReady = true; } return _KEY_SAMPLE_RATEContent; } }
            private static Android.Media.AudioMetadata.Key _KEY_SAMPLE_RATEContent = default;
            private static bool _KEY_SAMPLE_RATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Format.html#KEY_MIME"/>
            /// </summary>
            public static Android.Media.AudioMetadata.Key KEY_MIME { get { if (!_KEY_MIMEReady) { _KEY_MIMEContent = SGetField<Android.Media.AudioMetadata.Key>(LocalBridgeClazz, "KEY_MIME"); _KEY_MIMEReady = true; } return _KEY_MIMEContent; } }
            private static Android.Media.AudioMetadata.Key _KEY_MIMEContent = default;
            private static bool _KEY_MIMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Format.html#KEY_PRESENTATION_LANGUAGE"/>
            /// </summary>
            public static Android.Media.AudioMetadata.Key KEY_PRESENTATION_LANGUAGE { get { if (!_KEY_PRESENTATION_LANGUAGEReady) { _KEY_PRESENTATION_LANGUAGEContent = SGetField<Android.Media.AudioMetadata.Key>(LocalBridgeClazz, "KEY_PRESENTATION_LANGUAGE"); _KEY_PRESENTATION_LANGUAGEReady = true; } return _KEY_PRESENTATION_LANGUAGEContent; } }
            private static Android.Media.AudioMetadata.Key _KEY_PRESENTATION_LANGUAGEContent = default;
            private static bool _KEY_PRESENTATION_LANGUAGEReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Key implementation
        public partial class Key
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Key.html#getValueClass()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.Class"/></returns>
            public Java.Lang.Class GetValueClass()
            {
                return IExecuteWithSignature<Java.Lang.Class>("getValueClass", "()Ljava/lang/Class;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Key.html#getName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Key<T> implementation
        public partial class Key<T>
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Media.AudioMetadata.Key{T}"/> to <see cref="Android.Media.AudioMetadata.Key"/>
            /// </summary>
            public static implicit operator Android.Media.AudioMetadata.Key(Android.Media.AudioMetadata.Key<T> t) => t.Cast<Android.Media.AudioMetadata.Key>();
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Key.html#getValueClass()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.Class"/></returns>
            public Java.Lang.Class GetValueClass()
            {
                return IExecuteWithSignature<Java.Lang.Class>("getValueClass", "()Ljava/lang/Class;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/media/AudioMetadata.Key.html#getName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
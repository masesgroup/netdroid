/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Media
{
    #region MediaMetadataEditor declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html"/>
    /// </summary>
    [global::System.Obsolete()]
    public partial class MediaMetadataEditor : MASES.JCOBridge.C2JBridge.JVMBridgeBase<MediaMetadataEditor>
    {
        const string _bridgeClassName = "android.media.MediaMetadataEditor";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("MediaMetadataEditor class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public MediaMetadataEditor() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("MediaMetadataEditor class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public MediaMetadataEditor(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region MediaMetadataEditor implementation
    public partial class MediaMetadataEditor
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html#BITMAP_KEY_ARTWORK"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int BITMAP_KEY_ARTWORK { get { if (!_BITMAP_KEY_ARTWORKReady) { _BITMAP_KEY_ARTWORKContent = SGetField<int>(LocalBridgeClazz, "BITMAP_KEY_ARTWORK"); _BITMAP_KEY_ARTWORKReady = true; } return _BITMAP_KEY_ARTWORKContent; } }
        private static int _BITMAP_KEY_ARTWORKContent = default;
        private static bool _BITMAP_KEY_ARTWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html#RATING_KEY_BY_OTHERS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int RATING_KEY_BY_OTHERS { get { if (!_RATING_KEY_BY_OTHERSReady) { _RATING_KEY_BY_OTHERSContent = SGetField<int>(LocalBridgeClazz, "RATING_KEY_BY_OTHERS"); _RATING_KEY_BY_OTHERSReady = true; } return _RATING_KEY_BY_OTHERSContent; } }
        private static int _RATING_KEY_BY_OTHERSContent = default;
        private static bool _RATING_KEY_BY_OTHERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html#RATING_KEY_BY_USER"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int RATING_KEY_BY_USER { get { if (!_RATING_KEY_BY_USERReady) { _RATING_KEY_BY_USERContent = SGetField<int>(LocalBridgeClazz, "RATING_KEY_BY_USER"); _RATING_KEY_BY_USERReady = true; } return _RATING_KEY_BY_USERContent; } }
        private static int _RATING_KEY_BY_USERContent = default;
        private static bool _RATING_KEY_BY_USERReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html#apply()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Apply()
        {
            IExecuteWithSignature("apply", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html#getBitmap(int,android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        [global::System.Obsolete()]
        public Android.Graphics.Bitmap GetBitmap(int arg0, Android.Graphics.Bitmap arg1)
        {
            return IExecute<Android.Graphics.Bitmap>("getBitmap", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html#putBitmap(int,android.graphics.Bitmap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Bitmap"/></param>
        /// <returns><see cref="Android.Media.MediaMetadataEditor"/></returns>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        [global::System.Obsolete()]
        public Android.Media.MediaMetadataEditor PutBitmap(int arg0, Android.Graphics.Bitmap arg1)
        {
            return IExecute<Android.Media.MediaMetadataEditor>("putBitmap", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html#putLong(int,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="Android.Media.MediaMetadataEditor"/></returns>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        [global::System.Obsolete()]
        public Android.Media.MediaMetadataEditor PutLong(int arg0, long arg1)
        {
            return IExecute<Android.Media.MediaMetadataEditor>("putLong", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html#putObject(int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <returns><see cref="Android.Media.MediaMetadataEditor"/></returns>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        [global::System.Obsolete()]
        public Android.Media.MediaMetadataEditor PutObject(int arg0, object arg1)
        {
            return IExecute<Android.Media.MediaMetadataEditor>("putObject", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html#putString(int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Media.MediaMetadataEditor"/></returns>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        [global::System.Obsolete()]
        public Android.Media.MediaMetadataEditor PutString(int arg0, Java.Lang.String arg1)
        {
            return IExecute<Android.Media.MediaMetadataEditor>("putString", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html#getEditableKeys()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int[] GetEditableKeys()
        {
            return IExecuteWithSignatureArray<int>("getEditableKeys", "()[I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html#getObject(int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        [global::System.Obsolete()]
        public object GetObject(int arg0, object arg1)
        {
            return IExecute("getObject", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html#getString(int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        [global::System.Obsolete()]
        public Java.Lang.String GetString(int arg0, Java.Lang.String arg1)
        {
            return IExecute<Java.Lang.String>("getString", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html#getLong(int,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        [global::System.Obsolete()]
        public long GetLong(int arg0, long arg1)
        {
            return IExecute<long>("getLong", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html#addEditableKey(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void AddEditableKey(int arg0)
        {
            IExecuteWithSignature("addEditableKey", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html#clear()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Clear()
        {
            IExecuteWithSignature("clear", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/media/MediaMetadataEditor.html#removeEditableKeys()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void RemoveEditableKeys()
        {
            IExecuteWithSignature("removeEditableKeys", "()V");
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Health.Connect.Datatypes
{
    #region SkinTemperatureRecord declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.html"/>
    /// </summary>
    public partial class SkinTemperatureRecord : Android.Health.Connect.Datatypes.IntervalRecord
    {
        const string _bridgeClassName = "android.health.connect.datatypes.SkinTemperatureRecord";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public SkinTemperatureRecord() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public SkinTemperatureRecord(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.health.connect.datatypes.SkinTemperatureRecord$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Delta declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.Delta.html"/>
        /// </summary>
        public partial class Delta : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Delta>
        {
            const string _bridgeClassName = "android.health.connect.datatypes.SkinTemperatureRecord$Delta";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Delta() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Delta(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region SkinTemperatureRecord implementation
    public partial class SkinTemperatureRecord
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.html#SKIN_TEMPERATURE_DELTA_AVG"/>
        /// </summary>
        public static Android.Health.Connect.Datatypes.AggregationType SKIN_TEMPERATURE_DELTA_AVG { get { if (!_SKIN_TEMPERATURE_DELTA_AVGReady) { _SKIN_TEMPERATURE_DELTA_AVGContent = SGetField<Android.Health.Connect.Datatypes.AggregationType>(LocalBridgeClazz, "SKIN_TEMPERATURE_DELTA_AVG"); _SKIN_TEMPERATURE_DELTA_AVGReady = true; } return _SKIN_TEMPERATURE_DELTA_AVGContent; } }
        private static Android.Health.Connect.Datatypes.AggregationType _SKIN_TEMPERATURE_DELTA_AVGContent = default;
        private static bool _SKIN_TEMPERATURE_DELTA_AVGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.html#SKIN_TEMPERATURE_DELTA_MAX"/>
        /// </summary>
        public static Android.Health.Connect.Datatypes.AggregationType SKIN_TEMPERATURE_DELTA_MAX { get { if (!_SKIN_TEMPERATURE_DELTA_MAXReady) { _SKIN_TEMPERATURE_DELTA_MAXContent = SGetField<Android.Health.Connect.Datatypes.AggregationType>(LocalBridgeClazz, "SKIN_TEMPERATURE_DELTA_MAX"); _SKIN_TEMPERATURE_DELTA_MAXReady = true; } return _SKIN_TEMPERATURE_DELTA_MAXContent; } }
        private static Android.Health.Connect.Datatypes.AggregationType _SKIN_TEMPERATURE_DELTA_MAXContent = default;
        private static bool _SKIN_TEMPERATURE_DELTA_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.html#SKIN_TEMPERATURE_DELTA_MIN"/>
        /// </summary>
        public static Android.Health.Connect.Datatypes.AggregationType SKIN_TEMPERATURE_DELTA_MIN { get { if (!_SKIN_TEMPERATURE_DELTA_MINReady) { _SKIN_TEMPERATURE_DELTA_MINContent = SGetField<Android.Health.Connect.Datatypes.AggregationType>(LocalBridgeClazz, "SKIN_TEMPERATURE_DELTA_MIN"); _SKIN_TEMPERATURE_DELTA_MINReady = true; } return _SKIN_TEMPERATURE_DELTA_MINContent; } }
        private static Android.Health.Connect.Datatypes.AggregationType _SKIN_TEMPERATURE_DELTA_MINContent = default;
        private static bool _SKIN_TEMPERATURE_DELTA_MINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.html#MEASUREMENT_LOCATION_FINGER"/>
        /// </summary>
        public static int MEASUREMENT_LOCATION_FINGER { get { if (!_MEASUREMENT_LOCATION_FINGERReady) { _MEASUREMENT_LOCATION_FINGERContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_LOCATION_FINGER"); _MEASUREMENT_LOCATION_FINGERReady = true; } return _MEASUREMENT_LOCATION_FINGERContent; } }
        private static int _MEASUREMENT_LOCATION_FINGERContent = default;
        private static bool _MEASUREMENT_LOCATION_FINGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.html#MEASUREMENT_LOCATION_TOE"/>
        /// </summary>
        public static int MEASUREMENT_LOCATION_TOE { get { if (!_MEASUREMENT_LOCATION_TOEReady) { _MEASUREMENT_LOCATION_TOEContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_LOCATION_TOE"); _MEASUREMENT_LOCATION_TOEReady = true; } return _MEASUREMENT_LOCATION_TOEContent; } }
        private static int _MEASUREMENT_LOCATION_TOEContent = default;
        private static bool _MEASUREMENT_LOCATION_TOEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.html#MEASUREMENT_LOCATION_UNKNOWN"/>
        /// </summary>
        public static int MEASUREMENT_LOCATION_UNKNOWN { get { if (!_MEASUREMENT_LOCATION_UNKNOWNReady) { _MEASUREMENT_LOCATION_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_LOCATION_UNKNOWN"); _MEASUREMENT_LOCATION_UNKNOWNReady = true; } return _MEASUREMENT_LOCATION_UNKNOWNContent; } }
        private static int _MEASUREMENT_LOCATION_UNKNOWNContent = default;
        private static bool _MEASUREMENT_LOCATION_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.html#MEASUREMENT_LOCATION_WRIST"/>
        /// </summary>
        public static int MEASUREMENT_LOCATION_WRIST { get { if (!_MEASUREMENT_LOCATION_WRISTReady) { _MEASUREMENT_LOCATION_WRISTContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_LOCATION_WRIST"); _MEASUREMENT_LOCATION_WRISTReady = true; } return _MEASUREMENT_LOCATION_WRISTContent; } }
        private static int _MEASUREMENT_LOCATION_WRISTContent = default;
        private static bool _MEASUREMENT_LOCATION_WRISTReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.html#getBaseline()"/>
        /// </summary>
        /// <returns><see cref="Android.Health.Connect.Datatypes.Units.Temperature"/></returns>
        public Android.Health.Connect.Datatypes.Units.Temperature GetBaseline()
        {
            return IExecuteWithSignature<Android.Health.Connect.Datatypes.Units.Temperature>("getBaseline", "()Landroid/health/connect/datatypes/units/Temperature;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.html#getMeasurementLocation()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMeasurementLocation()
        {
            return IExecuteWithSignature<int>("getMeasurementLocation", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.html#getDeltas()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Health.Connect.Datatypes.SkinTemperatureRecord.Delta> GetDeltas()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Health.Connect.Datatypes.SkinTemperatureRecord.Delta>>("getDeltas", "()Ljava/util/List;");
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.Builder.html#%3Cinit%3E(android.health.connect.datatypes.Metadata,java.time.Instant,java.time.Instant)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Health.Connect.Datatypes.Metadata"/></param>
            /// <param name="arg1"><see cref="Java.Time.Instant"/></param>
            /// <param name="arg2"><see cref="Java.Time.Instant"/></param>
            public Builder(Android.Health.Connect.Datatypes.Metadata arg0, Java.Time.Instant arg1, Java.Time.Instant arg2)
                : base(arg0, arg1, arg2)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Health.Connect.Datatypes.SkinTemperatureRecord"/></returns>
            public Android.Health.Connect.Datatypes.SkinTemperatureRecord Build()
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.SkinTemperatureRecord>("build", "()Landroid/health/connect/datatypes/SkinTemperatureRecord;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.Builder.html#clearEndZoneOffset()"/>
            /// </summary>
            /// <returns><see cref="Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder"/></returns>
            public Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder ClearEndZoneOffset()
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder>("clearEndZoneOffset", "()Landroid/health/connect/datatypes/SkinTemperatureRecord$Builder;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.Builder.html#clearStartZoneOffset()"/>
            /// </summary>
            /// <returns><see cref="Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder"/></returns>
            public Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder ClearStartZoneOffset()
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder>("clearStartZoneOffset", "()Landroid/health/connect/datatypes/SkinTemperatureRecord$Builder;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.Builder.html#setBaseline(android.health.connect.datatypes.units.Temperature)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Health.Connect.Datatypes.Units.Temperature"/></param>
            /// <returns><see cref="Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder"/></returns>
            public Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder SetBaseline(Android.Health.Connect.Datatypes.Units.Temperature arg0)
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder>("setBaseline", "(Landroid/health/connect/datatypes/units/Temperature;)Landroid/health/connect/datatypes/SkinTemperatureRecord$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.Builder.html#setDeltas(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <returns><see cref="Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder"/></returns>
            public Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder SetDeltas(Java.Util.List<Android.Health.Connect.Datatypes.SkinTemperatureRecord.Delta> arg0)
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder>("setDeltas", "(Ljava/util/List;)Landroid/health/connect/datatypes/SkinTemperatureRecord$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.Builder.html#setEndZoneOffset(java.time.ZoneOffset)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Time.ZoneOffset"/></param>
            /// <returns><see cref="Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder"/></returns>
            public Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder SetEndZoneOffset(Java.Time.ZoneOffset arg0)
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder>("setEndZoneOffset", "(Ljava/time/ZoneOffset;)Landroid/health/connect/datatypes/SkinTemperatureRecord$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.Builder.html#setMeasurementLocation(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder"/></returns>
            public Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder SetMeasurementLocation(int arg0)
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder>("setMeasurementLocation", "(I)Landroid/health/connect/datatypes/SkinTemperatureRecord$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.Builder.html#setStartZoneOffset(java.time.ZoneOffset)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Time.ZoneOffset"/></param>
            /// <returns><see cref="Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder"/></returns>
            public Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder SetStartZoneOffset(Java.Time.ZoneOffset arg0)
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.SkinTemperatureRecord.Builder>("setStartZoneOffset", "(Ljava/time/ZoneOffset;)Landroid/health/connect/datatypes/SkinTemperatureRecord$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Delta implementation
        public partial class Delta
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.Delta.html#%3Cinit%3E(android.health.connect.datatypes.units.TemperatureDelta,java.time.Instant)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Health.Connect.Datatypes.Units.TemperatureDelta"/></param>
            /// <param name="arg1"><see cref="Java.Time.Instant"/></param>
            public Delta(Android.Health.Connect.Datatypes.Units.TemperatureDelta arg0, Java.Time.Instant arg1)
                : base(arg0, arg1)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.Delta.html#getDelta()"/>
            /// </summary>
            /// <returns><see cref="Android.Health.Connect.Datatypes.Units.TemperatureDelta"/></returns>
            public Android.Health.Connect.Datatypes.Units.TemperatureDelta GetDelta()
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.Units.TemperatureDelta>("getDelta", "()Landroid/health/connect/datatypes/units/TemperatureDelta;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/SkinTemperatureRecord.Delta.html#getTime()"/>
            /// </summary>
            /// <returns><see cref="Java.Time.Instant"/></returns>
            public Java.Time.Instant GetTime()
            {
                return IExecuteWithSignature<Java.Time.Instant>("getTime", "()Ljava/time/Instant;");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
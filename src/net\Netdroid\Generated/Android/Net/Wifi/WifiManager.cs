/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi
{
    #region WifiManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html"/>
    /// </summary>
    public partial class WifiManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<WifiManager>
    {
        const string _bridgeClassName = "android.net.wifi.WifiManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public WifiManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public WifiManager(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region AddNetworkResult declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html"/>
        /// </summary>
        public partial class AddNetworkResult : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.net.wifi.WifiManager$AddNetworkResult";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public AddNetworkResult() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public AddNetworkResult(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region InterfaceCreationImpact declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.InterfaceCreationImpact.html"/>
        /// </summary>
        public partial class InterfaceCreationImpact : MASES.JCOBridge.C2JBridge.JVMBridgeBase<InterfaceCreationImpact>
        {
            const string _bridgeClassName = "android.net.wifi.WifiManager$InterfaceCreationImpact";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public InterfaceCreationImpact() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public InterfaceCreationImpact(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region LocalOnlyConnectionFailureListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyConnectionFailureListener.html"/>
        /// </summary>
        public partial class LocalOnlyConnectionFailureListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public LocalOnlyConnectionFailureListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.WifiManager_LocalOnlyConnectionFailureListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region LocalOnlyConnectionFailureListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="LocalOnlyConnectionFailureListener"/> or its generic type if there is one
        /// </summary>
        public partial class LocalOnlyConnectionFailureListenerDirect : LocalOnlyConnectionFailureListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.net.wifi.WifiManager$LocalOnlyConnectionFailureListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region LocalOnlyHotspotCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html"/>
        /// </summary>
        public partial class LocalOnlyHotspotCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<LocalOnlyHotspotCallback>
        {
            const string _bridgeClassName = "android.net.wifi.WifiManager$LocalOnlyHotspotCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public LocalOnlyHotspotCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public LocalOnlyHotspotCallback(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region LocalOnlyHotspotReservation declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotReservation.html"/>
        /// </summary>
        public partial class LocalOnlyHotspotReservation : Java.Lang.AutoCloseable
        {
            const string _bridgeClassName = "android.net.wifi.WifiManager$LocalOnlyHotspotReservation";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public LocalOnlyHotspotReservation() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public LocalOnlyHotspotReservation(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => false;
        
            // TODO: complete the class
        
        }
        #endregion

        #region MulticastLock declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.MulticastLock.html"/>
        /// </summary>
        public partial class MulticastLock : MASES.JCOBridge.C2JBridge.JVMBridgeBase<MulticastLock>
        {
            const string _bridgeClassName = "android.net.wifi.WifiManager$MulticastLock";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public MulticastLock() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public MulticastLock(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => false;
        
            // TODO: complete the class
        
        }
        #endregion

        #region ScanResultsCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.ScanResultsCallback.html"/>
        /// </summary>
        public partial class ScanResultsCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ScanResultsCallback>
        {
            const string _bridgeClassName = "android.net.wifi.WifiManager$ScanResultsCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("ScanResultsCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public ScanResultsCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("ScanResultsCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public ScanResultsCallback(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region SubsystemRestartTrackingCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.SubsystemRestartTrackingCallback.html"/>
        /// </summary>
        public partial class SubsystemRestartTrackingCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SubsystemRestartTrackingCallback>
        {
            const string _bridgeClassName = "android.net.wifi.WifiManager$SubsystemRestartTrackingCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("SubsystemRestartTrackingCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public SubsystemRestartTrackingCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("SubsystemRestartTrackingCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public SubsystemRestartTrackingCallback(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region SuggestionConnectionStatusListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.SuggestionConnectionStatusListener.html"/>
        /// </summary>
        public partial class SuggestionConnectionStatusListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public SuggestionConnectionStatusListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.WifiManager_SuggestionConnectionStatusListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region SuggestionConnectionStatusListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="SuggestionConnectionStatusListener"/> or its generic type if there is one
        /// </summary>
        public partial class SuggestionConnectionStatusListenerDirect : SuggestionConnectionStatusListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.net.wifi.WifiManager$SuggestionConnectionStatusListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region SuggestionUserApprovalStatusListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.SuggestionUserApprovalStatusListener.html"/>
        /// </summary>
        public partial class SuggestionUserApprovalStatusListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public SuggestionUserApprovalStatusListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.WifiManager_SuggestionUserApprovalStatusListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region SuggestionUserApprovalStatusListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="SuggestionUserApprovalStatusListener"/> or its generic type if there is one
        /// </summary>
        public partial class SuggestionUserApprovalStatusListenerDirect : SuggestionUserApprovalStatusListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.net.wifi.WifiManager$SuggestionUserApprovalStatusListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region WifiLock declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.WifiLock.html"/>
        /// </summary>
        public partial class WifiLock : MASES.JCOBridge.C2JBridge.JVMBridgeBase<WifiLock>
        {
            const string _bridgeClassName = "android.net.wifi.WifiManager$WifiLock";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public WifiLock() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public WifiLock(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => false;
        
            // TODO: complete the class
        
        }
        #endregion

        #region WpsCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.WpsCallback.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class WpsCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<WpsCallback>
        {
            const string _bridgeClassName = "android.net.wifi.WifiManager$WpsCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("WpsCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public WpsCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("WpsCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public WpsCallback(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region WifiManager implementation
    public partial class WifiManager
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#ACTION_REMOVE_SUGGESTION_DISCONNECT"/>
        /// </summary>
        public static int ACTION_REMOVE_SUGGESTION_DISCONNECT { get { if (!_ACTION_REMOVE_SUGGESTION_DISCONNECTReady) { _ACTION_REMOVE_SUGGESTION_DISCONNECTContent = SGetField<int>(LocalBridgeClazz, "ACTION_REMOVE_SUGGESTION_DISCONNECT"); _ACTION_REMOVE_SUGGESTION_DISCONNECTReady = true; } return _ACTION_REMOVE_SUGGESTION_DISCONNECTContent; } }
        private static int _ACTION_REMOVE_SUGGESTION_DISCONNECTContent = default;
        private static bool _ACTION_REMOVE_SUGGESTION_DISCONNECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#ACTION_REMOVE_SUGGESTION_LINGER"/>
        /// </summary>
        public static int ACTION_REMOVE_SUGGESTION_LINGER { get { if (!_ACTION_REMOVE_SUGGESTION_LINGERReady) { _ACTION_REMOVE_SUGGESTION_LINGERContent = SGetField<int>(LocalBridgeClazz, "ACTION_REMOVE_SUGGESTION_LINGER"); _ACTION_REMOVE_SUGGESTION_LINGERReady = true; } return _ACTION_REMOVE_SUGGESTION_LINGERContent; } }
        private static int _ACTION_REMOVE_SUGGESTION_LINGERContent = default;
        private static bool _ACTION_REMOVE_SUGGESTION_LINGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#ERROR_AUTHENTICATING"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ERROR_AUTHENTICATING { get { if (!_ERROR_AUTHENTICATINGReady) { _ERROR_AUTHENTICATINGContent = SGetField<int>(LocalBridgeClazz, "ERROR_AUTHENTICATING"); _ERROR_AUTHENTICATINGReady = true; } return _ERROR_AUTHENTICATINGContent; } }
        private static int _ERROR_AUTHENTICATINGContent = default;
        private static bool _ERROR_AUTHENTICATINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_OPEN"/>
        /// </summary>
        public static int FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_OPEN { get { if (!_FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_OPENReady) { _FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_OPENContent = SGetField<int>(LocalBridgeClazz, "FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_OPEN"); _FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_OPENReady = true; } return _FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_OPENContent; } }
        private static int _FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_OPENContent = default;
        private static bool _FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_OPENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_SECURE"/>
        /// </summary>
        public static int FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_SECURE { get { if (!_FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_SECUREReady) { _FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_SECUREContent = SGetField<int>(LocalBridgeClazz, "FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_SECURE"); _FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_SECUREReady = true; } return _FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_SECUREContent; } }
        private static int _FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_SECUREContent = default;
        private static bool _FLAG_SEND_DHCP_HOSTNAME_RESTRICTION_SECUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#ROAMING_MODE_AGGRESSIVE"/>
        /// </summary>
        public static int ROAMING_MODE_AGGRESSIVE { get { if (!_ROAMING_MODE_AGGRESSIVEReady) { _ROAMING_MODE_AGGRESSIVEContent = SGetField<int>(LocalBridgeClazz, "ROAMING_MODE_AGGRESSIVE"); _ROAMING_MODE_AGGRESSIVEReady = true; } return _ROAMING_MODE_AGGRESSIVEContent; } }
        private static int _ROAMING_MODE_AGGRESSIVEContent = default;
        private static bool _ROAMING_MODE_AGGRESSIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#ROAMING_MODE_NONE"/>
        /// </summary>
        public static int ROAMING_MODE_NONE { get { if (!_ROAMING_MODE_NONEReady) { _ROAMING_MODE_NONEContent = SGetField<int>(LocalBridgeClazz, "ROAMING_MODE_NONE"); _ROAMING_MODE_NONEReady = true; } return _ROAMING_MODE_NONEContent; } }
        private static int _ROAMING_MODE_NONEContent = default;
        private static bool _ROAMING_MODE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#ROAMING_MODE_NORMAL"/>
        /// </summary>
        public static int ROAMING_MODE_NORMAL { get { if (!_ROAMING_MODE_NORMALReady) { _ROAMING_MODE_NORMALContent = SGetField<int>(LocalBridgeClazz, "ROAMING_MODE_NORMAL"); _ROAMING_MODE_NORMALReady = true; } return _ROAMING_MODE_NORMALContent; } }
        private static int _ROAMING_MODE_NORMALContent = default;
        private static bool _ROAMING_MODE_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_LOCAL_ONLY_CONNECTION_FAILURE_ASSOCIATION"/>
        /// </summary>
        public static int STATUS_LOCAL_ONLY_CONNECTION_FAILURE_ASSOCIATION { get { if (!_STATUS_LOCAL_ONLY_CONNECTION_FAILURE_ASSOCIATIONReady) { _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_ASSOCIATIONContent = SGetField<int>(LocalBridgeClazz, "STATUS_LOCAL_ONLY_CONNECTION_FAILURE_ASSOCIATION"); _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_ASSOCIATIONReady = true; } return _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_ASSOCIATIONContent; } }
        private static int _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_ASSOCIATIONContent = default;
        private static bool _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_ASSOCIATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_LOCAL_ONLY_CONNECTION_FAILURE_AUTHENTICATION"/>
        /// </summary>
        public static int STATUS_LOCAL_ONLY_CONNECTION_FAILURE_AUTHENTICATION { get { if (!_STATUS_LOCAL_ONLY_CONNECTION_FAILURE_AUTHENTICATIONReady) { _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_AUTHENTICATIONContent = SGetField<int>(LocalBridgeClazz, "STATUS_LOCAL_ONLY_CONNECTION_FAILURE_AUTHENTICATION"); _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_AUTHENTICATIONReady = true; } return _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_AUTHENTICATIONContent; } }
        private static int _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_AUTHENTICATIONContent = default;
        private static bool _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_AUTHENTICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_LOCAL_ONLY_CONNECTION_FAILURE_IP_PROVISIONING"/>
        /// </summary>
        public static int STATUS_LOCAL_ONLY_CONNECTION_FAILURE_IP_PROVISIONING { get { if (!_STATUS_LOCAL_ONLY_CONNECTION_FAILURE_IP_PROVISIONINGReady) { _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_IP_PROVISIONINGContent = SGetField<int>(LocalBridgeClazz, "STATUS_LOCAL_ONLY_CONNECTION_FAILURE_IP_PROVISIONING"); _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_IP_PROVISIONINGReady = true; } return _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_IP_PROVISIONINGContent; } }
        private static int _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_IP_PROVISIONINGContent = default;
        private static bool _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_IP_PROVISIONINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NO_RESPONSE"/>
        /// </summary>
        public static int STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NO_RESPONSE { get { if (!_STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NO_RESPONSEReady) { _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NO_RESPONSEContent = SGetField<int>(LocalBridgeClazz, "STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NO_RESPONSE"); _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NO_RESPONSEReady = true; } return _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NO_RESPONSEContent; } }
        private static int _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NO_RESPONSEContent = default;
        private static bool _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NO_RESPONSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NOT_FOUND"/>
        /// </summary>
        public static int STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NOT_FOUND { get { if (!_STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NOT_FOUNDReady) { _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NOT_FOUNDContent = SGetField<int>(LocalBridgeClazz, "STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NOT_FOUND"); _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NOT_FOUNDReady = true; } return _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NOT_FOUNDContent; } }
        private static int _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NOT_FOUNDContent = default;
        private static bool _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NOT_FOUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_LOCAL_ONLY_CONNECTION_FAILURE_UNKNOWN"/>
        /// </summary>
        public static int STATUS_LOCAL_ONLY_CONNECTION_FAILURE_UNKNOWN { get { if (!_STATUS_LOCAL_ONLY_CONNECTION_FAILURE_UNKNOWNReady) { _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "STATUS_LOCAL_ONLY_CONNECTION_FAILURE_UNKNOWN"); _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_UNKNOWNReady = true; } return _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_UNKNOWNContent; } }
        private static int _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_UNKNOWNContent = default;
        private static bool _STATUS_LOCAL_ONLY_CONNECTION_FAILURE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATE"/>
        /// </summary>
        public static int STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATE { get { if (!_STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATEReady) { _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATEContent = SGetField<int>(LocalBridgeClazz, "STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATE"); _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATEReady = true; } return _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATEContent; } }
        private static int _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATEContent = default;
        private static bool _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APP"/>
        /// </summary>
        public static int STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APP { get { if (!_STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APPReady) { _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APPContent = SGetField<int>(LocalBridgeClazz, "STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APP"); _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APPReady = true; } return _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APPContent; } }
        private static int _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APPContent = default;
        private static bool _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALID"/>
        /// </summary>
        public static int STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALID { get { if (!_STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALIDReady) { _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALIDContent = SGetField<int>(LocalBridgeClazz, "STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALID"); _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALIDReady = true; } return _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALIDContent; } }
        private static int _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALIDContent = default;
        private static bool _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWED"/>
        /// </summary>
        public static int STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWED { get { if (!_STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWEDReady) { _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWED"); _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWEDReady = true; } return _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWEDContent; } }
        private static int _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWEDContent = default;
        private static bool _STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWED"/>
        /// </summary>
        public static int STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWED { get { if (!_STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWEDReady) { _STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWEDContent = SGetField<int>(LocalBridgeClazz, "STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWED"); _STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWEDReady = true; } return _STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWEDContent; } }
        private static int _STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWEDContent = default;
        private static bool _STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNAL"/>
        /// </summary>
        public static int STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNAL { get { if (!_STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNALReady) { _STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNALContent = SGetField<int>(LocalBridgeClazz, "STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNAL"); _STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNALReady = true; } return _STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNALContent; } }
        private static int _STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNALContent = default;
        private static bool _STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALID"/>
        /// </summary>
        public static int STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALID { get { if (!_STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALIDReady) { _STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALIDContent = SGetField<int>(LocalBridgeClazz, "STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALID"); _STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALIDReady = true; } return _STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALIDContent; } }
        private static int _STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALIDContent = default;
        private static bool _STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_NETWORK_SUGGESTIONS_ERROR_RESTRICTED_BY_ADMIN"/>
        /// </summary>
        public static int STATUS_NETWORK_SUGGESTIONS_ERROR_RESTRICTED_BY_ADMIN { get { if (!_STATUS_NETWORK_SUGGESTIONS_ERROR_RESTRICTED_BY_ADMINReady) { _STATUS_NETWORK_SUGGESTIONS_ERROR_RESTRICTED_BY_ADMINContent = SGetField<int>(LocalBridgeClazz, "STATUS_NETWORK_SUGGESTIONS_ERROR_RESTRICTED_BY_ADMIN"); _STATUS_NETWORK_SUGGESTIONS_ERROR_RESTRICTED_BY_ADMINReady = true; } return _STATUS_NETWORK_SUGGESTIONS_ERROR_RESTRICTED_BY_ADMINContent; } }
        private static int _STATUS_NETWORK_SUGGESTIONS_ERROR_RESTRICTED_BY_ADMINContent = default;
        private static bool _STATUS_NETWORK_SUGGESTIONS_ERROR_RESTRICTED_BY_ADMINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_NETWORK_SUGGESTIONS_SUCCESS"/>
        /// </summary>
        public static int STATUS_NETWORK_SUGGESTIONS_SUCCESS { get { if (!_STATUS_NETWORK_SUGGESTIONS_SUCCESSReady) { _STATUS_NETWORK_SUGGESTIONS_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "STATUS_NETWORK_SUGGESTIONS_SUCCESS"); _STATUS_NETWORK_SUGGESTIONS_SUCCESSReady = true; } return _STATUS_NETWORK_SUGGESTIONS_SUCCESSContent; } }
        private static int _STATUS_NETWORK_SUGGESTIONS_SUCCESSContent = default;
        private static bool _STATUS_NETWORK_SUGGESTIONS_SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_SUGGESTION_APPROVAL_APPROVED_BY_CARRIER_PRIVILEGE"/>
        /// </summary>
        public static int STATUS_SUGGESTION_APPROVAL_APPROVED_BY_CARRIER_PRIVILEGE { get { if (!_STATUS_SUGGESTION_APPROVAL_APPROVED_BY_CARRIER_PRIVILEGEReady) { _STATUS_SUGGESTION_APPROVAL_APPROVED_BY_CARRIER_PRIVILEGEContent = SGetField<int>(LocalBridgeClazz, "STATUS_SUGGESTION_APPROVAL_APPROVED_BY_CARRIER_PRIVILEGE"); _STATUS_SUGGESTION_APPROVAL_APPROVED_BY_CARRIER_PRIVILEGEReady = true; } return _STATUS_SUGGESTION_APPROVAL_APPROVED_BY_CARRIER_PRIVILEGEContent; } }
        private static int _STATUS_SUGGESTION_APPROVAL_APPROVED_BY_CARRIER_PRIVILEGEContent = default;
        private static bool _STATUS_SUGGESTION_APPROVAL_APPROVED_BY_CARRIER_PRIVILEGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_SUGGESTION_APPROVAL_APPROVED_BY_USER"/>
        /// </summary>
        public static int STATUS_SUGGESTION_APPROVAL_APPROVED_BY_USER { get { if (!_STATUS_SUGGESTION_APPROVAL_APPROVED_BY_USERReady) { _STATUS_SUGGESTION_APPROVAL_APPROVED_BY_USERContent = SGetField<int>(LocalBridgeClazz, "STATUS_SUGGESTION_APPROVAL_APPROVED_BY_USER"); _STATUS_SUGGESTION_APPROVAL_APPROVED_BY_USERReady = true; } return _STATUS_SUGGESTION_APPROVAL_APPROVED_BY_USERContent; } }
        private static int _STATUS_SUGGESTION_APPROVAL_APPROVED_BY_USERContent = default;
        private static bool _STATUS_SUGGESTION_APPROVAL_APPROVED_BY_USERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_SUGGESTION_APPROVAL_PENDING"/>
        /// </summary>
        public static int STATUS_SUGGESTION_APPROVAL_PENDING { get { if (!_STATUS_SUGGESTION_APPROVAL_PENDINGReady) { _STATUS_SUGGESTION_APPROVAL_PENDINGContent = SGetField<int>(LocalBridgeClazz, "STATUS_SUGGESTION_APPROVAL_PENDING"); _STATUS_SUGGESTION_APPROVAL_PENDINGReady = true; } return _STATUS_SUGGESTION_APPROVAL_PENDINGContent; } }
        private static int _STATUS_SUGGESTION_APPROVAL_PENDINGContent = default;
        private static bool _STATUS_SUGGESTION_APPROVAL_PENDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_SUGGESTION_APPROVAL_REJECTED_BY_USER"/>
        /// </summary>
        public static int STATUS_SUGGESTION_APPROVAL_REJECTED_BY_USER { get { if (!_STATUS_SUGGESTION_APPROVAL_REJECTED_BY_USERReady) { _STATUS_SUGGESTION_APPROVAL_REJECTED_BY_USERContent = SGetField<int>(LocalBridgeClazz, "STATUS_SUGGESTION_APPROVAL_REJECTED_BY_USER"); _STATUS_SUGGESTION_APPROVAL_REJECTED_BY_USERReady = true; } return _STATUS_SUGGESTION_APPROVAL_REJECTED_BY_USERContent; } }
        private static int _STATUS_SUGGESTION_APPROVAL_REJECTED_BY_USERContent = default;
        private static bool _STATUS_SUGGESTION_APPROVAL_REJECTED_BY_USERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_SUGGESTION_APPROVAL_UNKNOWN"/>
        /// </summary>
        public static int STATUS_SUGGESTION_APPROVAL_UNKNOWN { get { if (!_STATUS_SUGGESTION_APPROVAL_UNKNOWNReady) { _STATUS_SUGGESTION_APPROVAL_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "STATUS_SUGGESTION_APPROVAL_UNKNOWN"); _STATUS_SUGGESTION_APPROVAL_UNKNOWNReady = true; } return _STATUS_SUGGESTION_APPROVAL_UNKNOWNContent; } }
        private static int _STATUS_SUGGESTION_APPROVAL_UNKNOWNContent = default;
        private static bool _STATUS_SUGGESTION_APPROVAL_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_SUGGESTION_CONNECTION_FAILURE_ASSOCIATION"/>
        /// </summary>
        public static int STATUS_SUGGESTION_CONNECTION_FAILURE_ASSOCIATION { get { if (!_STATUS_SUGGESTION_CONNECTION_FAILURE_ASSOCIATIONReady) { _STATUS_SUGGESTION_CONNECTION_FAILURE_ASSOCIATIONContent = SGetField<int>(LocalBridgeClazz, "STATUS_SUGGESTION_CONNECTION_FAILURE_ASSOCIATION"); _STATUS_SUGGESTION_CONNECTION_FAILURE_ASSOCIATIONReady = true; } return _STATUS_SUGGESTION_CONNECTION_FAILURE_ASSOCIATIONContent; } }
        private static int _STATUS_SUGGESTION_CONNECTION_FAILURE_ASSOCIATIONContent = default;
        private static bool _STATUS_SUGGESTION_CONNECTION_FAILURE_ASSOCIATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_SUGGESTION_CONNECTION_FAILURE_AUTHENTICATION"/>
        /// </summary>
        public static int STATUS_SUGGESTION_CONNECTION_FAILURE_AUTHENTICATION { get { if (!_STATUS_SUGGESTION_CONNECTION_FAILURE_AUTHENTICATIONReady) { _STATUS_SUGGESTION_CONNECTION_FAILURE_AUTHENTICATIONContent = SGetField<int>(LocalBridgeClazz, "STATUS_SUGGESTION_CONNECTION_FAILURE_AUTHENTICATION"); _STATUS_SUGGESTION_CONNECTION_FAILURE_AUTHENTICATIONReady = true; } return _STATUS_SUGGESTION_CONNECTION_FAILURE_AUTHENTICATIONContent; } }
        private static int _STATUS_SUGGESTION_CONNECTION_FAILURE_AUTHENTICATIONContent = default;
        private static bool _STATUS_SUGGESTION_CONNECTION_FAILURE_AUTHENTICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_SUGGESTION_CONNECTION_FAILURE_IP_PROVISIONING"/>
        /// </summary>
        public static int STATUS_SUGGESTION_CONNECTION_FAILURE_IP_PROVISIONING { get { if (!_STATUS_SUGGESTION_CONNECTION_FAILURE_IP_PROVISIONINGReady) { _STATUS_SUGGESTION_CONNECTION_FAILURE_IP_PROVISIONINGContent = SGetField<int>(LocalBridgeClazz, "STATUS_SUGGESTION_CONNECTION_FAILURE_IP_PROVISIONING"); _STATUS_SUGGESTION_CONNECTION_FAILURE_IP_PROVISIONINGReady = true; } return _STATUS_SUGGESTION_CONNECTION_FAILURE_IP_PROVISIONINGContent; } }
        private static int _STATUS_SUGGESTION_CONNECTION_FAILURE_IP_PROVISIONINGContent = default;
        private static bool _STATUS_SUGGESTION_CONNECTION_FAILURE_IP_PROVISIONINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_SUGGESTION_CONNECTION_FAILURE_UNKNOWN"/>
        /// </summary>
        public static int STATUS_SUGGESTION_CONNECTION_FAILURE_UNKNOWN { get { if (!_STATUS_SUGGESTION_CONNECTION_FAILURE_UNKNOWNReady) { _STATUS_SUGGESTION_CONNECTION_FAILURE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "STATUS_SUGGESTION_CONNECTION_FAILURE_UNKNOWN"); _STATUS_SUGGESTION_CONNECTION_FAILURE_UNKNOWNReady = true; } return _STATUS_SUGGESTION_CONNECTION_FAILURE_UNKNOWNContent; } }
        private static int _STATUS_SUGGESTION_CONNECTION_FAILURE_UNKNOWNContent = default;
        private static bool _STATUS_SUGGESTION_CONNECTION_FAILURE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_INTERFACE_TYPE_AP"/>
        /// </summary>
        public static int WIFI_INTERFACE_TYPE_AP { get { if (!_WIFI_INTERFACE_TYPE_APReady) { _WIFI_INTERFACE_TYPE_APContent = SGetField<int>(LocalBridgeClazz, "WIFI_INTERFACE_TYPE_AP"); _WIFI_INTERFACE_TYPE_APReady = true; } return _WIFI_INTERFACE_TYPE_APContent; } }
        private static int _WIFI_INTERFACE_TYPE_APContent = default;
        private static bool _WIFI_INTERFACE_TYPE_APReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_INTERFACE_TYPE_AWARE"/>
        /// </summary>
        public static int WIFI_INTERFACE_TYPE_AWARE { get { if (!_WIFI_INTERFACE_TYPE_AWAREReady) { _WIFI_INTERFACE_TYPE_AWAREContent = SGetField<int>(LocalBridgeClazz, "WIFI_INTERFACE_TYPE_AWARE"); _WIFI_INTERFACE_TYPE_AWAREReady = true; } return _WIFI_INTERFACE_TYPE_AWAREContent; } }
        private static int _WIFI_INTERFACE_TYPE_AWAREContent = default;
        private static bool _WIFI_INTERFACE_TYPE_AWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_INTERFACE_TYPE_DIRECT"/>
        /// </summary>
        public static int WIFI_INTERFACE_TYPE_DIRECT { get { if (!_WIFI_INTERFACE_TYPE_DIRECTReady) { _WIFI_INTERFACE_TYPE_DIRECTContent = SGetField<int>(LocalBridgeClazz, "WIFI_INTERFACE_TYPE_DIRECT"); _WIFI_INTERFACE_TYPE_DIRECTReady = true; } return _WIFI_INTERFACE_TYPE_DIRECTContent; } }
        private static int _WIFI_INTERFACE_TYPE_DIRECTContent = default;
        private static bool _WIFI_INTERFACE_TYPE_DIRECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_INTERFACE_TYPE_STA"/>
        /// </summary>
        public static int WIFI_INTERFACE_TYPE_STA { get { if (!_WIFI_INTERFACE_TYPE_STAReady) { _WIFI_INTERFACE_TYPE_STAContent = SGetField<int>(LocalBridgeClazz, "WIFI_INTERFACE_TYPE_STA"); _WIFI_INTERFACE_TYPE_STAReady = true; } return _WIFI_INTERFACE_TYPE_STAContent; } }
        private static int _WIFI_INTERFACE_TYPE_STAContent = default;
        private static bool _WIFI_INTERFACE_TYPE_STAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_MODE_FULL"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int WIFI_MODE_FULL { get { if (!_WIFI_MODE_FULLReady) { _WIFI_MODE_FULLContent = SGetField<int>(LocalBridgeClazz, "WIFI_MODE_FULL"); _WIFI_MODE_FULLReady = true; } return _WIFI_MODE_FULLContent; } }
        private static int _WIFI_MODE_FULLContent = default;
        private static bool _WIFI_MODE_FULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_MODE_FULL_HIGH_PERF"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int WIFI_MODE_FULL_HIGH_PERF { get { if (!_WIFI_MODE_FULL_HIGH_PERFReady) { _WIFI_MODE_FULL_HIGH_PERFContent = SGetField<int>(LocalBridgeClazz, "WIFI_MODE_FULL_HIGH_PERF"); _WIFI_MODE_FULL_HIGH_PERFReady = true; } return _WIFI_MODE_FULL_HIGH_PERFContent; } }
        private static int _WIFI_MODE_FULL_HIGH_PERFContent = default;
        private static bool _WIFI_MODE_FULL_HIGH_PERFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_MODE_FULL_LOW_LATENCY"/>
        /// </summary>
        public static int WIFI_MODE_FULL_LOW_LATENCY { get { if (!_WIFI_MODE_FULL_LOW_LATENCYReady) { _WIFI_MODE_FULL_LOW_LATENCYContent = SGetField<int>(LocalBridgeClazz, "WIFI_MODE_FULL_LOW_LATENCY"); _WIFI_MODE_FULL_LOW_LATENCYReady = true; } return _WIFI_MODE_FULL_LOW_LATENCYContent; } }
        private static int _WIFI_MODE_FULL_LOW_LATENCYContent = default;
        private static bool _WIFI_MODE_FULL_LOW_LATENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_MODE_SCAN_ONLY"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int WIFI_MODE_SCAN_ONLY { get { if (!_WIFI_MODE_SCAN_ONLYReady) { _WIFI_MODE_SCAN_ONLYContent = SGetField<int>(LocalBridgeClazz, "WIFI_MODE_SCAN_ONLY"); _WIFI_MODE_SCAN_ONLYReady = true; } return _WIFI_MODE_SCAN_ONLYContent; } }
        private static int _WIFI_MODE_SCAN_ONLYContent = default;
        private static bool _WIFI_MODE_SCAN_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_MULTI_INTERNET_MODE_DBS_AP"/>
        /// </summary>
        public static int WIFI_MULTI_INTERNET_MODE_DBS_AP { get { if (!_WIFI_MULTI_INTERNET_MODE_DBS_APReady) { _WIFI_MULTI_INTERNET_MODE_DBS_APContent = SGetField<int>(LocalBridgeClazz, "WIFI_MULTI_INTERNET_MODE_DBS_AP"); _WIFI_MULTI_INTERNET_MODE_DBS_APReady = true; } return _WIFI_MULTI_INTERNET_MODE_DBS_APContent; } }
        private static int _WIFI_MULTI_INTERNET_MODE_DBS_APContent = default;
        private static bool _WIFI_MULTI_INTERNET_MODE_DBS_APReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_MULTI_INTERNET_MODE_DISABLED"/>
        /// </summary>
        public static int WIFI_MULTI_INTERNET_MODE_DISABLED { get { if (!_WIFI_MULTI_INTERNET_MODE_DISABLEDReady) { _WIFI_MULTI_INTERNET_MODE_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_MULTI_INTERNET_MODE_DISABLED"); _WIFI_MULTI_INTERNET_MODE_DISABLEDReady = true; } return _WIFI_MULTI_INTERNET_MODE_DISABLEDContent; } }
        private static int _WIFI_MULTI_INTERNET_MODE_DISABLEDContent = default;
        private static bool _WIFI_MULTI_INTERNET_MODE_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_MULTI_INTERNET_MODE_MULTI_AP"/>
        /// </summary>
        public static int WIFI_MULTI_INTERNET_MODE_MULTI_AP { get { if (!_WIFI_MULTI_INTERNET_MODE_MULTI_APReady) { _WIFI_MULTI_INTERNET_MODE_MULTI_APContent = SGetField<int>(LocalBridgeClazz, "WIFI_MULTI_INTERNET_MODE_MULTI_AP"); _WIFI_MULTI_INTERNET_MODE_MULTI_APReady = true; } return _WIFI_MULTI_INTERNET_MODE_MULTI_APContent; } }
        private static int _WIFI_MULTI_INTERNET_MODE_MULTI_APContent = default;
        private static bool _WIFI_MULTI_INTERNET_MODE_MULTI_APReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_STATE_DISABLED"/>
        /// </summary>
        public static int WIFI_STATE_DISABLED { get { if (!_WIFI_STATE_DISABLEDReady) { _WIFI_STATE_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_STATE_DISABLED"); _WIFI_STATE_DISABLEDReady = true; } return _WIFI_STATE_DISABLEDContent; } }
        private static int _WIFI_STATE_DISABLEDContent = default;
        private static bool _WIFI_STATE_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_STATE_DISABLING"/>
        /// </summary>
        public static int WIFI_STATE_DISABLING { get { if (!_WIFI_STATE_DISABLINGReady) { _WIFI_STATE_DISABLINGContent = SGetField<int>(LocalBridgeClazz, "WIFI_STATE_DISABLING"); _WIFI_STATE_DISABLINGReady = true; } return _WIFI_STATE_DISABLINGContent; } }
        private static int _WIFI_STATE_DISABLINGContent = default;
        private static bool _WIFI_STATE_DISABLINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_STATE_ENABLED"/>
        /// </summary>
        public static int WIFI_STATE_ENABLED { get { if (!_WIFI_STATE_ENABLEDReady) { _WIFI_STATE_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_STATE_ENABLED"); _WIFI_STATE_ENABLEDReady = true; } return _WIFI_STATE_ENABLEDContent; } }
        private static int _WIFI_STATE_ENABLEDContent = default;
        private static bool _WIFI_STATE_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_STATE_ENABLING"/>
        /// </summary>
        public static int WIFI_STATE_ENABLING { get { if (!_WIFI_STATE_ENABLINGReady) { _WIFI_STATE_ENABLINGContent = SGetField<int>(LocalBridgeClazz, "WIFI_STATE_ENABLING"); _WIFI_STATE_ENABLINGReady = true; } return _WIFI_STATE_ENABLINGContent; } }
        private static int _WIFI_STATE_ENABLINGContent = default;
        private static bool _WIFI_STATE_ENABLINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_STATE_UNKNOWN"/>
        /// </summary>
        public static int WIFI_STATE_UNKNOWN { get { if (!_WIFI_STATE_UNKNOWNReady) { _WIFI_STATE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "WIFI_STATE_UNKNOWN"); _WIFI_STATE_UNKNOWNReady = true; } return _WIFI_STATE_UNKNOWNContent; } }
        private static int _WIFI_STATE_UNKNOWNContent = default;
        private static bool _WIFI_STATE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WPS_AUTH_FAILURE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int WPS_AUTH_FAILURE { get { if (!_WPS_AUTH_FAILUREReady) { _WPS_AUTH_FAILUREContent = SGetField<int>(LocalBridgeClazz, "WPS_AUTH_FAILURE"); _WPS_AUTH_FAILUREReady = true; } return _WPS_AUTH_FAILUREContent; } }
        private static int _WPS_AUTH_FAILUREContent = default;
        private static bool _WPS_AUTH_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WPS_OVERLAP_ERROR"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int WPS_OVERLAP_ERROR { get { if (!_WPS_OVERLAP_ERRORReady) { _WPS_OVERLAP_ERRORContent = SGetField<int>(LocalBridgeClazz, "WPS_OVERLAP_ERROR"); _WPS_OVERLAP_ERRORReady = true; } return _WPS_OVERLAP_ERRORContent; } }
        private static int _WPS_OVERLAP_ERRORContent = default;
        private static bool _WPS_OVERLAP_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WPS_TIMED_OUT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int WPS_TIMED_OUT { get { if (!_WPS_TIMED_OUTReady) { _WPS_TIMED_OUTContent = SGetField<int>(LocalBridgeClazz, "WPS_TIMED_OUT"); _WPS_TIMED_OUTReady = true; } return _WPS_TIMED_OUTContent; } }
        private static int _WPS_TIMED_OUTContent = default;
        private static bool _WPS_TIMED_OUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WPS_TKIP_ONLY_PROHIBITED"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int WPS_TKIP_ONLY_PROHIBITED { get { if (!_WPS_TKIP_ONLY_PROHIBITEDReady) { _WPS_TKIP_ONLY_PROHIBITEDContent = SGetField<int>(LocalBridgeClazz, "WPS_TKIP_ONLY_PROHIBITED"); _WPS_TKIP_ONLY_PROHIBITEDReady = true; } return _WPS_TKIP_ONLY_PROHIBITEDContent; } }
        private static int _WPS_TKIP_ONLY_PROHIBITEDContent = default;
        private static bool _WPS_TKIP_ONLY_PROHIBITEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WPS_WEP_PROHIBITED"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int WPS_WEP_PROHIBITED { get { if (!_WPS_WEP_PROHIBITEDReady) { _WPS_WEP_PROHIBITEDContent = SGetField<int>(LocalBridgeClazz, "WPS_WEP_PROHIBITED"); _WPS_WEP_PROHIBITEDReady = true; } return _WPS_WEP_PROHIBITEDContent; } }
        private static int _WPS_WEP_PROHIBITEDContent = default;
        private static bool _WPS_WEP_PROHIBITEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#ACTION_PICK_WIFI_NETWORK"/>
        /// </summary>
        public static Java.Lang.String ACTION_PICK_WIFI_NETWORK { get { if (!_ACTION_PICK_WIFI_NETWORKReady) { _ACTION_PICK_WIFI_NETWORKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_PICK_WIFI_NETWORK"); _ACTION_PICK_WIFI_NETWORKReady = true; } return _ACTION_PICK_WIFI_NETWORKContent; } }
        private static Java.Lang.String _ACTION_PICK_WIFI_NETWORKContent = default;
        private static bool _ACTION_PICK_WIFI_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE"/>
        /// </summary>
        public static Java.Lang.String ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE { get { if (!_ACTION_REQUEST_SCAN_ALWAYS_AVAILABLEReady) { _ACTION_REQUEST_SCAN_ALWAYS_AVAILABLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE"); _ACTION_REQUEST_SCAN_ALWAYS_AVAILABLEReady = true; } return _ACTION_REQUEST_SCAN_ALWAYS_AVAILABLEContent; } }
        private static Java.Lang.String _ACTION_REQUEST_SCAN_ALWAYS_AVAILABLEContent = default;
        private static bool _ACTION_REQUEST_SCAN_ALWAYS_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION"/>
        /// </summary>
        public static Java.Lang.String ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION { get { if (!_ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTIONReady) { _ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION"); _ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTIONReady = true; } return _ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTIONContent; } }
        private static Java.Lang.String _ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTIONContent = default;
        private static bool _ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#ACTION_WIFI_SCAN_AVAILABILITY_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_WIFI_SCAN_AVAILABILITY_CHANGED { get { if (!_ACTION_WIFI_SCAN_AVAILABILITY_CHANGEDReady) { _ACTION_WIFI_SCAN_AVAILABILITY_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_WIFI_SCAN_AVAILABILITY_CHANGED"); _ACTION_WIFI_SCAN_AVAILABILITY_CHANGEDReady = true; } return _ACTION_WIFI_SCAN_AVAILABILITY_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_WIFI_SCAN_AVAILABILITY_CHANGEDContent = default;
        private static bool _ACTION_WIFI_SCAN_AVAILABILITY_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#CHANNEL_DATA_KEY_FREQUENCY_MHZ"/>
        /// </summary>
        public static Java.Lang.String CHANNEL_DATA_KEY_FREQUENCY_MHZ { get { if (!_CHANNEL_DATA_KEY_FREQUENCY_MHZReady) { _CHANNEL_DATA_KEY_FREQUENCY_MHZContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHANNEL_DATA_KEY_FREQUENCY_MHZ"); _CHANNEL_DATA_KEY_FREQUENCY_MHZReady = true; } return _CHANNEL_DATA_KEY_FREQUENCY_MHZContent; } }
        private static Java.Lang.String _CHANNEL_DATA_KEY_FREQUENCY_MHZContent = default;
        private static bool _CHANNEL_DATA_KEY_FREQUENCY_MHZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#CHANNEL_DATA_KEY_NUM_AP"/>
        /// </summary>
        public static Java.Lang.String CHANNEL_DATA_KEY_NUM_AP { get { if (!_CHANNEL_DATA_KEY_NUM_APReady) { _CHANNEL_DATA_KEY_NUM_APContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHANNEL_DATA_KEY_NUM_AP"); _CHANNEL_DATA_KEY_NUM_APReady = true; } return _CHANNEL_DATA_KEY_NUM_APContent; } }
        private static Java.Lang.String _CHANNEL_DATA_KEY_NUM_APContent = default;
        private static bool _CHANNEL_DATA_KEY_NUM_APReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_BSSID"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_BSSID { get { if (!_EXTRA_BSSIDReady) { _EXTRA_BSSIDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_BSSID"); _EXTRA_BSSIDReady = true; } return _EXTRA_BSSIDContent; } }
        private static Java.Lang.String _EXTRA_BSSIDContent = default;
        private static bool _EXTRA_BSSIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_NETWORK_INFO"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NETWORK_INFO { get { if (!_EXTRA_NETWORK_INFOReady) { _EXTRA_NETWORK_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NETWORK_INFO"); _EXTRA_NETWORK_INFOReady = true; } return _EXTRA_NETWORK_INFOContent; } }
        private static Java.Lang.String _EXTRA_NETWORK_INFOContent = default;
        private static bool _EXTRA_NETWORK_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_NETWORK_SUGGESTION"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NETWORK_SUGGESTION { get { if (!_EXTRA_NETWORK_SUGGESTIONReady) { _EXTRA_NETWORK_SUGGESTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NETWORK_SUGGESTION"); _EXTRA_NETWORK_SUGGESTIONReady = true; } return _EXTRA_NETWORK_SUGGESTIONContent; } }
        private static Java.Lang.String _EXTRA_NETWORK_SUGGESTIONContent = default;
        private static bool _EXTRA_NETWORK_SUGGESTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_NEW_RSSI"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NEW_RSSI { get { if (!_EXTRA_NEW_RSSIReady) { _EXTRA_NEW_RSSIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NEW_RSSI"); _EXTRA_NEW_RSSIReady = true; } return _EXTRA_NEW_RSSIContent; } }
        private static Java.Lang.String _EXTRA_NEW_RSSIContent = default;
        private static bool _EXTRA_NEW_RSSIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_NEW_STATE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_NEW_STATE { get { if (!_EXTRA_NEW_STATEReady) { _EXTRA_NEW_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NEW_STATE"); _EXTRA_NEW_STATEReady = true; } return _EXTRA_NEW_STATEContent; } }
        private static Java.Lang.String _EXTRA_NEW_STATEContent = default;
        private static bool _EXTRA_NEW_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_PREVIOUS_WIFI_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PREVIOUS_WIFI_STATE { get { if (!_EXTRA_PREVIOUS_WIFI_STATEReady) { _EXTRA_PREVIOUS_WIFI_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PREVIOUS_WIFI_STATE"); _EXTRA_PREVIOUS_WIFI_STATEReady = true; } return _EXTRA_PREVIOUS_WIFI_STATEContent; } }
        private static Java.Lang.String _EXTRA_PREVIOUS_WIFI_STATEContent = default;
        private static bool _EXTRA_PREVIOUS_WIFI_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_RESULTS_UPDATED"/>
        /// </summary>
        public static Java.Lang.String EXTRA_RESULTS_UPDATED { get { if (!_EXTRA_RESULTS_UPDATEDReady) { _EXTRA_RESULTS_UPDATEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_RESULTS_UPDATED"); _EXTRA_RESULTS_UPDATEDReady = true; } return _EXTRA_RESULTS_UPDATEDContent; } }
        private static Java.Lang.String _EXTRA_RESULTS_UPDATEDContent = default;
        private static bool _EXTRA_RESULTS_UPDATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_SCAN_AVAILABLE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SCAN_AVAILABLE { get { if (!_EXTRA_SCAN_AVAILABLEReady) { _EXTRA_SCAN_AVAILABLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SCAN_AVAILABLE"); _EXTRA_SCAN_AVAILABLEReady = true; } return _EXTRA_SCAN_AVAILABLEContent; } }
        private static Java.Lang.String _EXTRA_SCAN_AVAILABLEContent = default;
        private static bool _EXTRA_SCAN_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_SUPPLICANT_CONNECTED"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_SUPPLICANT_CONNECTED { get { if (!_EXTRA_SUPPLICANT_CONNECTEDReady) { _EXTRA_SUPPLICANT_CONNECTEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SUPPLICANT_CONNECTED"); _EXTRA_SUPPLICANT_CONNECTEDReady = true; } return _EXTRA_SUPPLICANT_CONNECTEDContent; } }
        private static Java.Lang.String _EXTRA_SUPPLICANT_CONNECTEDContent = default;
        private static bool _EXTRA_SUPPLICANT_CONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_SUPPLICANT_ERROR"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_SUPPLICANT_ERROR { get { if (!_EXTRA_SUPPLICANT_ERRORReady) { _EXTRA_SUPPLICANT_ERRORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SUPPLICANT_ERROR"); _EXTRA_SUPPLICANT_ERRORReady = true; } return _EXTRA_SUPPLICANT_ERRORContent; } }
        private static Java.Lang.String _EXTRA_SUPPLICANT_ERRORContent = default;
        private static bool _EXTRA_SUPPLICANT_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_WIFI_INFO"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_WIFI_INFO { get { if (!_EXTRA_WIFI_INFOReady) { _EXTRA_WIFI_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_WIFI_INFO"); _EXTRA_WIFI_INFOReady = true; } return _EXTRA_WIFI_INFOContent; } }
        private static Java.Lang.String _EXTRA_WIFI_INFOContent = default;
        private static bool _EXTRA_WIFI_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_WIFI_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_WIFI_STATE { get { if (!_EXTRA_WIFI_STATEReady) { _EXTRA_WIFI_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_WIFI_STATE"); _EXTRA_WIFI_STATEReady = true; } return _EXTRA_WIFI_STATEContent; } }
        private static Java.Lang.String _EXTRA_WIFI_STATEContent = default;
        private static bool _EXTRA_WIFI_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#NETWORK_IDS_CHANGED_ACTION"/>
        /// </summary>
        public static Java.Lang.String NETWORK_IDS_CHANGED_ACTION { get { if (!_NETWORK_IDS_CHANGED_ACTIONReady) { _NETWORK_IDS_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NETWORK_IDS_CHANGED_ACTION"); _NETWORK_IDS_CHANGED_ACTIONReady = true; } return _NETWORK_IDS_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _NETWORK_IDS_CHANGED_ACTIONContent = default;
        private static bool _NETWORK_IDS_CHANGED_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#NETWORK_STATE_CHANGED_ACTION"/>
        /// </summary>
        public static Java.Lang.String NETWORK_STATE_CHANGED_ACTION { get { if (!_NETWORK_STATE_CHANGED_ACTIONReady) { _NETWORK_STATE_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NETWORK_STATE_CHANGED_ACTION"); _NETWORK_STATE_CHANGED_ACTIONReady = true; } return _NETWORK_STATE_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _NETWORK_STATE_CHANGED_ACTIONContent = default;
        private static bool _NETWORK_STATE_CHANGED_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#RSSI_CHANGED_ACTION"/>
        /// </summary>
        public static Java.Lang.String RSSI_CHANGED_ACTION { get { if (!_RSSI_CHANGED_ACTIONReady) { _RSSI_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RSSI_CHANGED_ACTION"); _RSSI_CHANGED_ACTIONReady = true; } return _RSSI_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _RSSI_CHANGED_ACTIONContent = default;
        private static bool _RSSI_CHANGED_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#SCAN_RESULTS_AVAILABLE_ACTION"/>
        /// </summary>
        public static Java.Lang.String SCAN_RESULTS_AVAILABLE_ACTION { get { if (!_SCAN_RESULTS_AVAILABLE_ACTIONReady) { _SCAN_RESULTS_AVAILABLE_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SCAN_RESULTS_AVAILABLE_ACTION"); _SCAN_RESULTS_AVAILABLE_ACTIONReady = true; } return _SCAN_RESULTS_AVAILABLE_ACTIONContent; } }
        private static Java.Lang.String _SCAN_RESULTS_AVAILABLE_ACTIONContent = default;
        private static bool _SCAN_RESULTS_AVAILABLE_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#SUPPLICANT_CONNECTION_CHANGE_ACTION"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String SUPPLICANT_CONNECTION_CHANGE_ACTION { get { if (!_SUPPLICANT_CONNECTION_CHANGE_ACTIONReady) { _SUPPLICANT_CONNECTION_CHANGE_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SUPPLICANT_CONNECTION_CHANGE_ACTION"); _SUPPLICANT_CONNECTION_CHANGE_ACTIONReady = true; } return _SUPPLICANT_CONNECTION_CHANGE_ACTIONContent; } }
        private static Java.Lang.String _SUPPLICANT_CONNECTION_CHANGE_ACTIONContent = default;
        private static bool _SUPPLICANT_CONNECTION_CHANGE_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#SUPPLICANT_STATE_CHANGED_ACTION"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String SUPPLICANT_STATE_CHANGED_ACTION { get { if (!_SUPPLICANT_STATE_CHANGED_ACTIONReady) { _SUPPLICANT_STATE_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SUPPLICANT_STATE_CHANGED_ACTION"); _SUPPLICANT_STATE_CHANGED_ACTIONReady = true; } return _SUPPLICANT_STATE_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _SUPPLICANT_STATE_CHANGED_ACTIONContent = default;
        private static bool _SUPPLICANT_STATE_CHANGED_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#UNKNOWN_SSID"/>
        /// </summary>
        public static Java.Lang.String UNKNOWN_SSID { get { if (!_UNKNOWN_SSIDReady) { _UNKNOWN_SSIDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "UNKNOWN_SSID"); _UNKNOWN_SSIDReady = true; } return _UNKNOWN_SSIDContent; } }
        private static Java.Lang.String _UNKNOWN_SSIDContent = default;
        private static bool _UNKNOWN_SSIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_STATE_CHANGED_ACTION"/>
        /// </summary>
        public static Java.Lang.String WIFI_STATE_CHANGED_ACTION { get { if (!_WIFI_STATE_CHANGED_ACTIONReady) { _WIFI_STATE_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_STATE_CHANGED_ACTION"); _WIFI_STATE_CHANGED_ACTIONReady = true; } return _WIFI_STATE_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _WIFI_STATE_CHANGED_ACTIONContent = default;
        private static bool _WIFI_STATE_CHANGED_ACTIONReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#calculateSignalLevel(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public static int CalculateSignalLevel(int arg0, int arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "calculateSignalLevel", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#compareSignalLevel(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int CompareSignalLevel(int arg0, int arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "compareSignalLevel", arg0, arg1);
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getDhcpInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.DhcpInfo"/></returns>
        [global::System.Obsolete()]
        public Android.Net.DhcpInfo GetDhcpInfo()
        {
            return IExecuteWithSignature<Android.Net.DhcpInfo>("getDhcpInfo", "()Landroid/net/DhcpInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getConnectionInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Wifi.WifiInfo"/></returns>
        [global::System.Obsolete()]
        public Android.Net.Wifi.WifiInfo GetConnectionInfo()
        {
            return IExecuteWithSignature<Android.Net.Wifi.WifiInfo>("getConnectionInfo", "()Landroid/net/wifi/WifiInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#addNetworkPrivileged(android.net.wifi.WifiConfiguration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.WifiConfiguration"/></param>
        /// <returns><see cref="Android.Net.Wifi.WifiManager.AddNetworkResult"/></returns>
        public Android.Net.Wifi.WifiManager.AddNetworkResult AddNetworkPrivileged(Android.Net.Wifi.WifiConfiguration arg0)
        {
            return IExecuteWithSignature<Android.Net.Wifi.WifiManager.AddNetworkResult>("addNetworkPrivileged", "(Landroid/net/wifi/WifiConfiguration;)Landroid/net/wifi/WifiManager$AddNetworkResult;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#createMulticastLock(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Net.Wifi.WifiManager.MulticastLock"/></returns>
        public Android.Net.Wifi.WifiManager.MulticastLock CreateMulticastLock(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Net.Wifi.WifiManager.MulticastLock>("createMulticastLock", "(Ljava/lang/String;)Landroid/net/wifi/WifiManager$MulticastLock;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#createWifiLock(int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Net.Wifi.WifiManager.WifiLock"/></returns>
        public Android.Net.Wifi.WifiManager.WifiLock CreateWifiLock(int arg0, Java.Lang.String arg1)
        {
            return IExecute<Android.Net.Wifi.WifiManager.WifiLock>("createWifiLock", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#createWifiLock(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Net.Wifi.WifiManager.WifiLock"/></returns>
        [global::System.Obsolete()]
        public Android.Net.Wifi.WifiManager.WifiLock CreateWifiLock(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Net.Wifi.WifiManager.WifiLock>("createWifiLock", "(Ljava/lang/String;)Landroid/net/wifi/WifiManager$WifiLock;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#disableNetwork(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool DisableNetwork(int arg0)
        {
            return IExecuteWithSignature<bool>("disableNetwork", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#disconnect()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool Disconnect()
        {
            return IExecuteWithSignature<bool>("disconnect", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#enableNetwork(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool EnableNetwork(int arg0, bool arg1)
        {
            return IExecute<bool>("enableNetwork", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#is24GHzBandSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool Is24GHzBandSupported()
        {
            return IExecuteWithSignature<bool>("is24GHzBandSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#is5GHzBandSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool Is5GHzBandSupported()
        {
            return IExecuteWithSignature<bool>("is5GHzBandSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#is60GHzBandSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool Is60GHzBandSupported()
        {
            return IExecuteWithSignature<bool>("is60GHzBandSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#is6GHzBandSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool Is6GHzBandSupported()
        {
            return IExecuteWithSignature<bool>("is6GHzBandSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isAggressiveRoamingModeSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAggressiveRoamingModeSupported()
        {
            return IExecuteWithSignature<bool>("isAggressiveRoamingModeSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isAutoWakeupEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAutoWakeupEnabled()
        {
            return IExecuteWithSignature<bool>("isAutoWakeupEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isBridgedApConcurrencySupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsBridgedApConcurrencySupported()
        {
            return IExecuteWithSignature<bool>("isBridgedApConcurrencySupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isCarrierNetworkOffloadEnabled(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsCarrierNetworkOffloadEnabled(int arg0, bool arg1)
        {
            return IExecute<bool>("isCarrierNetworkOffloadEnabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isD2dSupportedWhenInfraStaDisabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsD2dSupportedWhenInfraStaDisabled()
        {
            return IExecuteWithSignature<bool>("isD2dSupportedWhenInfraStaDisabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isDecoratedIdentitySupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDecoratedIdentitySupported()
        {
            return IExecuteWithSignature<bool>("isDecoratedIdentitySupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isDeviceToApRttSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsDeviceToApRttSupported()
        {
            return IExecuteWithSignature<bool>("isDeviceToApRttSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isDualBandSimultaneousSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDualBandSimultaneousSupported()
        {
            return IExecuteWithSignature<bool>("isDualBandSimultaneousSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isEasyConnectDppAkmSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEasyConnectDppAkmSupported()
        {
            return IExecuteWithSignature<bool>("isEasyConnectDppAkmSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isEasyConnectEnrolleeResponderModeSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEasyConnectEnrolleeResponderModeSupported()
        {
            return IExecuteWithSignature<bool>("isEasyConnectEnrolleeResponderModeSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isEasyConnectSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEasyConnectSupported()
        {
            return IExecuteWithSignature<bool>("isEasyConnectSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isEnhancedOpenSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEnhancedOpenSupported()
        {
            return IExecuteWithSignature<bool>("isEnhancedOpenSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isEnhancedPowerReportingSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEnhancedPowerReportingSupported()
        {
            return IExecuteWithSignature<bool>("isEnhancedPowerReportingSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isMakeBeforeBreakWifiSwitchingSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMakeBeforeBreakWifiSwitchingSupported()
        {
            return IExecuteWithSignature<bool>("isMakeBeforeBreakWifiSwitchingSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isP2pSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsP2pSupported()
        {
            return IExecuteWithSignature<bool>("isP2pSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isPasspointTermsAndConditionsSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPasspointTermsAndConditionsSupported()
        {
            return IExecuteWithSignature<bool>("isPasspointTermsAndConditionsSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isPreferredNetworkOffloadSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPreferredNetworkOffloadSupported()
        {
            return IExecuteWithSignature<bool>("isPreferredNetworkOffloadSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isScanAlwaysAvailable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsScanAlwaysAvailable()
        {
            return IExecuteWithSignature<bool>("isScanAlwaysAvailable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isScanThrottleEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsScanThrottleEnabled()
        {
            return IExecuteWithSignature<bool>("isScanThrottleEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isStaApConcurrencySupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStaApConcurrencySupported()
        {
            return IExecuteWithSignature<bool>("isStaApConcurrencySupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isStaBridgedApConcurrencySupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStaBridgedApConcurrencySupported()
        {
            return IExecuteWithSignature<bool>("isStaBridgedApConcurrencySupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isStaConcurrencyForLocalOnlyConnectionsSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStaConcurrencyForLocalOnlyConnectionsSupported()
        {
            return IExecuteWithSignature<bool>("isStaConcurrencyForLocalOnlyConnectionsSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isStaConcurrencyForMultiInternetSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStaConcurrencyForMultiInternetSupported()
        {
            return IExecuteWithSignature<bool>("isStaConcurrencyForMultiInternetSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isTdlsSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTdlsSupported()
        {
            return IExecuteWithSignature<bool>("isTdlsSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isTidToLinkMappingNegotiationSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTidToLinkMappingNegotiationSupported()
        {
            return IExecuteWithSignature<bool>("isTidToLinkMappingNegotiationSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isTlsMinimumVersionSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTlsMinimumVersionSupported()
        {
            return IExecuteWithSignature<bool>("isTlsMinimumVersionSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isTlsV13Supported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTlsV13Supported()
        {
            return IExecuteWithSignature<bool>("isTlsV13Supported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isTrustOnFirstUseSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTrustOnFirstUseSupported()
        {
            return IExecuteWithSignature<bool>("isTrustOnFirstUseSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isWapiSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWapiSupported()
        {
            return IExecuteWithSignature<bool>("isWapiSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isWepSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWepSupported()
        {
            return IExecuteWithSignature<bool>("isWepSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isWifiDisplayR2Supported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWifiDisplayR2Supported()
        {
            return IExecuteWithSignature<bool>("isWifiDisplayR2Supported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isWifiEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWifiEnabled()
        {
            return IExecuteWithSignature<bool>("isWifiEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isWifiPasspointEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWifiPasspointEnabled()
        {
            return IExecuteWithSignature<bool>("isWifiPasspointEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isWifiStandardSupported(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsWifiStandardSupported(int arg0)
        {
            return IExecuteWithSignature<bool>("isWifiStandardSupported", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isWpa3SaeH2eSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWpa3SaeH2eSupported()
        {
            return IExecuteWithSignature<bool>("isWpa3SaeH2eSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isWpa3SaePublicKeySupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWpa3SaePublicKeySupported()
        {
            return IExecuteWithSignature<bool>("isWpa3SaePublicKeySupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isWpa3SaeSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWpa3SaeSupported()
        {
            return IExecuteWithSignature<bool>("isWpa3SaeSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isWpa3SuiteBSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWpa3SuiteBSupported()
        {
            return IExecuteWithSignature<bool>("isWpa3SuiteBSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isWpaPersonalSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWpaPersonalSupported()
        {
            return IExecuteWithSignature<bool>("isWpaPersonalSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#pingSupplicant()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool PingSupplicant()
        {
            return IExecuteWithSignature<bool>("pingSupplicant", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#reassociate()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool Reassociate()
        {
            return IExecuteWithSignature<bool>("reassociate", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#reconnect()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool Reconnect()
        {
            return IExecuteWithSignature<bool>("reconnect", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#removeNetwork(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool RemoveNetwork(int arg0)
        {
            return IExecuteWithSignature<bool>("removeNetwork", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#removeNonCallerConfiguredNetworks()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool RemoveNonCallerConfiguredNetworks()
        {
            return IExecuteWithSignature<bool>("removeNonCallerConfiguredNetworks", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#saveConfiguration()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool SaveConfiguration()
        {
            return IExecuteWithSignature<bool>("saveConfiguration", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#setWifiEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool SetWifiEnabled(bool arg0)
        {
            return IExecuteWithSignature<bool>("setWifiEnabled", "(Z)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#startScan()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool StartScan()
        {
            return IExecuteWithSignature<bool>("startScan", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#validateSoftApConfiguration(android.net.wifi.SoftApConfiguration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.SoftApConfiguration"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ValidateSoftApConfiguration(Android.Net.Wifi.SoftApConfiguration arg0)
        {
            return IExecuteWithSignature<bool>("validateSoftApConfiguration", "(Landroid/net/wifi/SoftApConfiguration;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#addNetwork(android.net.wifi.WifiConfiguration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.WifiConfiguration"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int AddNetwork(Android.Net.Wifi.WifiConfiguration arg0)
        {
            return IExecuteWithSignature<int>("addNetwork", "(Landroid/net/wifi/WifiConfiguration;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#addNetworkSuggestions(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="int"/></returns>
        public int AddNetworkSuggestions(Java.Util.List<Android.Net.Wifi.WifiNetworkSuggestion> arg0)
        {
            return IExecuteWithSignature<int>("addNetworkSuggestions", "(Ljava/util/List;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#calculateSignalLevel(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int CalculateSignalLevel(int arg0)
        {
            return IExecuteWithSignature<int>("calculateSignalLevel", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getMaxNumberOfChannelsPerNetworkSpecifierRequest()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxNumberOfChannelsPerNetworkSpecifierRequest()
        {
            return IExecuteWithSignature<int>("getMaxNumberOfChannelsPerNetworkSpecifierRequest", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getMaxNumberOfNetworkSuggestionsPerApp()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxNumberOfNetworkSuggestionsPerApp()
        {
            return IExecuteWithSignature<int>("getMaxNumberOfNetworkSuggestionsPerApp", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getMaxSignalLevel()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxSignalLevel()
        {
            return IExecuteWithSignature<int>("getMaxSignalLevel", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getStaConcurrencyForMultiInternetMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetStaConcurrencyForMultiInternetMode()
        {
            return IExecuteWithSignature<int>("getStaConcurrencyForMultiInternetMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getWifiState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetWifiState()
        {
            return IExecuteWithSignature<int>("getWifiState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#removeNetworkSuggestions(java.util.List,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int RemoveNetworkSuggestions(Java.Util.List<Android.Net.Wifi.WifiNetworkSuggestion> arg0, int arg1)
        {
            return IExecute<int>("removeNetworkSuggestions", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#removeNetworkSuggestions(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="int"/></returns>
        public int RemoveNetworkSuggestions(Java.Util.List<Android.Net.Wifi.WifiNetworkSuggestion> arg0)
        {
            return IExecuteWithSignature<int>("removeNetworkSuggestions", "(Ljava/util/List;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#updateNetwork(android.net.wifi.WifiConfiguration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.WifiConfiguration"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int UpdateNetwork(Android.Net.Wifi.WifiConfiguration arg0)
        {
            return IExecuteWithSignature<int>("updateNetwork", "(Landroid/net/wifi/WifiConfiguration;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getPasspointConfigurations()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        [global::System.Obsolete()]
        public Java.Util.List<Android.Net.Wifi.Hotspot2.PasspointConfiguration> GetPasspointConfigurations()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Net.Wifi.Hotspot2.PasspointConfiguration>>("getPasspointConfigurations", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getScanResults()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Net.Wifi.ScanResult> GetScanResults()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Net.Wifi.ScanResult>>("getScanResults", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getAllowedChannels(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Net.Wifi.WifiAvailableChannel> GetAllowedChannels(int arg0, int arg1)
        {
            return IExecute<Java.Util.List<Android.Net.Wifi.WifiAvailableChannel>>("getAllowedChannels", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getUsableChannels(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Net.Wifi.WifiAvailableChannel> GetUsableChannels(int arg0, int arg1)
        {
            return IExecute<Java.Util.List<Android.Net.Wifi.WifiAvailableChannel>>("getUsableChannels", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getCallerConfiguredNetworks()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Net.Wifi.WifiConfiguration> GetCallerConfiguredNetworks()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Net.Wifi.WifiConfiguration>>("getCallerConfiguredNetworks", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getConfiguredNetworks()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        [global::System.Obsolete()]
        public Java.Util.List<Android.Net.Wifi.WifiConfiguration> GetConfiguredNetworks()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Net.Wifi.WifiConfiguration>>("getConfiguredNetworks", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getNetworkSuggestions()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Net.Wifi.WifiNetworkSuggestion> GetNetworkSuggestions()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Net.Wifi.WifiNetworkSuggestion>>("getNetworkSuggestions", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#addLocalOnlyConnectionFailureListener(java.util.concurrent.Executor,android.net.wifi.WifiManager.LocalOnlyConnectionFailureListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.WifiManager.LocalOnlyConnectionFailureListener"/></param>
        public void AddLocalOnlyConnectionFailureListener(Java.Util.Concurrent.Executor arg0, Android.Net.Wifi.WifiManager.LocalOnlyConnectionFailureListener arg1)
        {
            IExecute("addLocalOnlyConnectionFailureListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#addOrUpdatePasspointConfiguration(android.net.wifi.hotspot2.PasspointConfiguration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Hotspot2.PasspointConfiguration"/></param>
        public void AddOrUpdatePasspointConfiguration(Android.Net.Wifi.Hotspot2.PasspointConfiguration arg0)
        {
            IExecuteWithSignature("addOrUpdatePasspointConfiguration", "(Landroid/net/wifi/hotspot2/PasspointConfiguration;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#addSuggestionConnectionStatusListener(java.util.concurrent.Executor,android.net.wifi.WifiManager.SuggestionConnectionStatusListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.WifiManager.SuggestionConnectionStatusListener"/></param>
        public void AddSuggestionConnectionStatusListener(Java.Util.Concurrent.Executor arg0, Android.Net.Wifi.WifiManager.SuggestionConnectionStatusListener arg1)
        {
            IExecute("addSuggestionConnectionStatusListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#addSuggestionUserApprovalStatusListener(java.util.concurrent.Executor,android.net.wifi.WifiManager.SuggestionUserApprovalStatusListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.WifiManager.SuggestionUserApprovalStatusListener"/></param>
        public void AddSuggestionUserApprovalStatusListener(Java.Util.Concurrent.Executor arg0, Android.Net.Wifi.WifiManager.SuggestionUserApprovalStatusListener arg1)
        {
            IExecute("addSuggestionUserApprovalStatusListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#allowAutojoinGlobal(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void AllowAutojoinGlobal(bool arg0)
        {
            IExecuteWithSignature("allowAutojoinGlobal", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#cancelWps(android.net.wifi.WifiManager.WpsCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.WifiManager.WpsCallback"/></param>
        [global::System.Obsolete()]
        public void CancelWps(Android.Net.Wifi.WifiManager.WpsCallback arg0)
        {
            IExecuteWithSignature("cancelWps", "(Landroid/net/wifi/WifiManager$WpsCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#flushPasspointAnqpCache()"/>
        /// </summary>
        public void FlushPasspointAnqpCache()
        {
            IExecuteWithSignature("flushPasspointAnqpCache", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getChannelData(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void GetChannelData(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Java.Util.List<Android.Os.Bundle>> arg1)
        {
            IExecute("getChannelData", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getMaxSupportedConcurrentTdlsSessions(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void GetMaxSupportedConcurrentTdlsSessions(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Java.Lang.Integer> arg1)
        {
            IExecute("getMaxSupportedConcurrentTdlsSessions", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getNumberOfEnabledTdlsSessions(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void GetNumberOfEnabledTdlsSessions(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Java.Lang.Integer> arg1)
        {
            IExecute("getNumberOfEnabledTdlsSessions", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#getPerSsidRoamingModes(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void GetPerSsidRoamingModes(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Java.Util.Map<Java.Lang.String, Java.Lang.Integer>> arg1)
        {
            IExecute("getPerSsidRoamingModes", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#isTdlsOperationCurrentlyAvailable(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void IsTdlsOperationCurrentlyAvailable(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Java.Lang.Boolean> arg1)
        {
            IExecute("isTdlsOperationCurrentlyAvailable", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#queryAutojoinGlobal(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void QueryAutojoinGlobal(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Java.Lang.Boolean> arg1)
        {
            IExecute("queryAutojoinGlobal", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#querySendDhcpHostnameRestriction(java.util.concurrent.Executor,java.util.function.IntConsumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.IntConsumer"/></param>
        public void QuerySendDhcpHostnameRestriction(Java.Util.Concurrent.Executor arg0, Java.Util.Function.IntConsumer arg1)
        {
            IExecute("querySendDhcpHostnameRestriction", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#registerScanResultsCallback(java.util.concurrent.Executor,android.net.wifi.WifiManager.ScanResultsCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.WifiManager.ScanResultsCallback"/></param>
        public void RegisterScanResultsCallback(Java.Util.Concurrent.Executor arg0, Android.Net.Wifi.WifiManager.ScanResultsCallback arg1)
        {
            IExecute("registerScanResultsCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#registerSubsystemRestartTrackingCallback(java.util.concurrent.Executor,android.net.wifi.WifiManager.SubsystemRestartTrackingCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.WifiManager.SubsystemRestartTrackingCallback"/></param>
        public void RegisterSubsystemRestartTrackingCallback(Java.Util.Concurrent.Executor arg0, Android.Net.Wifi.WifiManager.SubsystemRestartTrackingCallback arg1)
        {
            IExecute("registerSubsystemRestartTrackingCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#removeLocalOnlyConnectionFailureListener(android.net.wifi.WifiManager.LocalOnlyConnectionFailureListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.WifiManager.LocalOnlyConnectionFailureListener"/></param>
        public void RemoveLocalOnlyConnectionFailureListener(Android.Net.Wifi.WifiManager.LocalOnlyConnectionFailureListener arg0)
        {
            IExecuteWithSignature("removeLocalOnlyConnectionFailureListener", "(Landroid/net/wifi/WifiManager$LocalOnlyConnectionFailureListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#removePasspointConfiguration(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public void RemovePasspointConfiguration(Java.Lang.String arg0)
        {
            IExecuteWithSignature("removePasspointConfiguration", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#removePerSsidRoamingMode(android.net.wifi.WifiSsid)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.WifiSsid"/></param>
        public void RemovePerSsidRoamingMode(Android.Net.Wifi.WifiSsid arg0)
        {
            IExecuteWithSignature("removePerSsidRoamingMode", "(Landroid/net/wifi/WifiSsid;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#removeSuggestionConnectionStatusListener(android.net.wifi.WifiManager.SuggestionConnectionStatusListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.WifiManager.SuggestionConnectionStatusListener"/></param>
        public void RemoveSuggestionConnectionStatusListener(Android.Net.Wifi.WifiManager.SuggestionConnectionStatusListener arg0)
        {
            IExecuteWithSignature("removeSuggestionConnectionStatusListener", "(Landroid/net/wifi/WifiManager$SuggestionConnectionStatusListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#removeSuggestionUserApprovalStatusListener(android.net.wifi.WifiManager.SuggestionUserApprovalStatusListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.WifiManager.SuggestionUserApprovalStatusListener"/></param>
        public void RemoveSuggestionUserApprovalStatusListener(Android.Net.Wifi.WifiManager.SuggestionUserApprovalStatusListener arg0)
        {
            IExecuteWithSignature("removeSuggestionUserApprovalStatusListener", "(Landroid/net/wifi/WifiManager$SuggestionUserApprovalStatusListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#reportCreateInterfaceImpact(int,boolean,java.util.concurrent.Executor,java.util.function.BiConsumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Java.Util.Function.BiConsumer"/></param>
        public void ReportCreateInterfaceImpact(int arg0, bool arg1, Java.Util.Concurrent.Executor arg2, Java.Util.Function.BiConsumer<Java.Lang.Boolean, Java.Util.Set<Android.Net.Wifi.WifiManager.InterfaceCreationImpact>> arg3)
        {
            IExecute("reportCreateInterfaceImpact", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#setPerSsidRoamingMode(android.net.wifi.WifiSsid,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.WifiSsid"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetPerSsidRoamingMode(Android.Net.Wifi.WifiSsid arg0, int arg1)
        {
            IExecute("setPerSsidRoamingMode", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#setSendDhcpHostnameRestriction(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetSendDhcpHostnameRestriction(int arg0)
        {
            IExecuteWithSignature("setSendDhcpHostnameRestriction", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#setTdlsEnabled(java.net.InetAddress,boolean,java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Net.InetAddress"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Java.Util.Function.Consumer"/></param>
        public void SetTdlsEnabled(Java.Net.InetAddress arg0, bool arg1, Java.Util.Concurrent.Executor arg2, Java.Util.Function.Consumer<Java.Lang.Boolean> arg3)
        {
            IExecute("setTdlsEnabled", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#setTdlsEnabled(java.net.InetAddress,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Net.InetAddress"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetTdlsEnabled(Java.Net.InetAddress arg0, bool arg1)
        {
            IExecute("setTdlsEnabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#setTdlsEnabledWithMacAddress(java.lang.String,boolean,java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Java.Util.Function.Consumer"/></param>
        public void SetTdlsEnabledWithMacAddress(Java.Lang.String arg0, bool arg1, Java.Util.Concurrent.Executor arg2, Java.Util.Function.Consumer<Java.Lang.Boolean> arg3)
        {
            IExecute("setTdlsEnabledWithMacAddress", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#setTdlsEnabledWithMacAddress(java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetTdlsEnabledWithMacAddress(Java.Lang.String arg0, bool arg1)
        {
            IExecute("setTdlsEnabledWithMacAddress", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#startLocalOnlyHotspot(android.net.wifi.WifiManager.LocalOnlyHotspotCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.WifiManager.LocalOnlyHotspotCallback"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void StartLocalOnlyHotspot(Android.Net.Wifi.WifiManager.LocalOnlyHotspotCallback arg0, Android.Os.Handler arg1)
        {
            IExecute("startLocalOnlyHotspot", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#startWps(android.net.wifi.WpsInfo,android.net.wifi.WifiManager.WpsCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.WpsInfo"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.WifiManager.WpsCallback"/></param>
        [global::System.Obsolete()]
        public void StartWps(Android.Net.Wifi.WpsInfo arg0, Android.Net.Wifi.WifiManager.WpsCallback arg1)
        {
            IExecute("startWps", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#unregisterScanResultsCallback(android.net.wifi.WifiManager.ScanResultsCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.WifiManager.ScanResultsCallback"/></param>
        public void UnregisterScanResultsCallback(Android.Net.Wifi.WifiManager.ScanResultsCallback arg0)
        {
            IExecuteWithSignature("unregisterScanResultsCallback", "(Landroid/net/wifi/WifiManager$ScanResultsCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.html#unregisterSubsystemRestartTrackingCallback(android.net.wifi.WifiManager.SubsystemRestartTrackingCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.WifiManager.SubsystemRestartTrackingCallback"/></param>
        public void UnregisterSubsystemRestartTrackingCallback(Android.Net.Wifi.WifiManager.SubsystemRestartTrackingCallback arg0)
        {
            IExecuteWithSignature("unregisterSubsystemRestartTrackingCallback", "(Landroid/net/wifi/WifiManager$SubsystemRestartTrackingCallback;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region AddNetworkResult implementation
        public partial class AddNetworkResult
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#%3Cinit%3E(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public AddNetworkResult(int arg0, int arg1)
                : base(arg0, arg1)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#networkId"/>
            /// </summary>
            public int networkId { get { if (!_networkIdReady) { _networkIdContent = IGetField<int>("networkId"); _networkIdReady = true; } return _networkIdContent; } }
            private int _networkIdContent = default;
            private bool _networkIdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#statusCode"/>
            /// </summary>
            public int statusCode { get { if (!_statusCodeReady) { _statusCodeContent = IGetField<int>("statusCode"); _statusCodeReady = true; } return _statusCodeContent; } }
            private int _statusCodeContent = default;
            private bool _statusCodeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#STATUS_ADD_PASSPOINT_FAILURE"/>
            /// </summary>
            public static int STATUS_ADD_PASSPOINT_FAILURE { get { if (!_STATUS_ADD_PASSPOINT_FAILUREReady) { _STATUS_ADD_PASSPOINT_FAILUREContent = SGetField<int>(LocalBridgeClazz, "STATUS_ADD_PASSPOINT_FAILURE"); _STATUS_ADD_PASSPOINT_FAILUREReady = true; } return _STATUS_ADD_PASSPOINT_FAILUREContent; } }
            private static int _STATUS_ADD_PASSPOINT_FAILUREContent = default;
            private static bool _STATUS_ADD_PASSPOINT_FAILUREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#STATUS_ADD_WIFI_CONFIG_FAILURE"/>
            /// </summary>
            public static int STATUS_ADD_WIFI_CONFIG_FAILURE { get { if (!_STATUS_ADD_WIFI_CONFIG_FAILUREReady) { _STATUS_ADD_WIFI_CONFIG_FAILUREContent = SGetField<int>(LocalBridgeClazz, "STATUS_ADD_WIFI_CONFIG_FAILURE"); _STATUS_ADD_WIFI_CONFIG_FAILUREReady = true; } return _STATUS_ADD_WIFI_CONFIG_FAILUREContent; } }
            private static int _STATUS_ADD_WIFI_CONFIG_FAILUREContent = default;
            private static bool _STATUS_ADD_WIFI_CONFIG_FAILUREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#STATUS_FAILURE_UNKNOWN"/>
            /// </summary>
            public static int STATUS_FAILURE_UNKNOWN { get { if (!_STATUS_FAILURE_UNKNOWNReady) { _STATUS_FAILURE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "STATUS_FAILURE_UNKNOWN"); _STATUS_FAILURE_UNKNOWNReady = true; } return _STATUS_FAILURE_UNKNOWNContent; } }
            private static int _STATUS_FAILURE_UNKNOWNContent = default;
            private static bool _STATUS_FAILURE_UNKNOWNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#STATUS_FAILURE_UPDATE_NETWORK_KEYS"/>
            /// </summary>
            public static int STATUS_FAILURE_UPDATE_NETWORK_KEYS { get { if (!_STATUS_FAILURE_UPDATE_NETWORK_KEYSReady) { _STATUS_FAILURE_UPDATE_NETWORK_KEYSContent = SGetField<int>(LocalBridgeClazz, "STATUS_FAILURE_UPDATE_NETWORK_KEYS"); _STATUS_FAILURE_UPDATE_NETWORK_KEYSReady = true; } return _STATUS_FAILURE_UPDATE_NETWORK_KEYSContent; } }
            private static int _STATUS_FAILURE_UPDATE_NETWORK_KEYSContent = default;
            private static bool _STATUS_FAILURE_UPDATE_NETWORK_KEYSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#STATUS_INVALID_CONFIGURATION"/>
            /// </summary>
            public static int STATUS_INVALID_CONFIGURATION { get { if (!_STATUS_INVALID_CONFIGURATIONReady) { _STATUS_INVALID_CONFIGURATIONContent = SGetField<int>(LocalBridgeClazz, "STATUS_INVALID_CONFIGURATION"); _STATUS_INVALID_CONFIGURATIONReady = true; } return _STATUS_INVALID_CONFIGURATIONContent; } }
            private static int _STATUS_INVALID_CONFIGURATIONContent = default;
            private static bool _STATUS_INVALID_CONFIGURATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#STATUS_INVALID_CONFIGURATION_ENTERPRISE"/>
            /// </summary>
            public static int STATUS_INVALID_CONFIGURATION_ENTERPRISE { get { if (!_STATUS_INVALID_CONFIGURATION_ENTERPRISEReady) { _STATUS_INVALID_CONFIGURATION_ENTERPRISEContent = SGetField<int>(LocalBridgeClazz, "STATUS_INVALID_CONFIGURATION_ENTERPRISE"); _STATUS_INVALID_CONFIGURATION_ENTERPRISEReady = true; } return _STATUS_INVALID_CONFIGURATION_ENTERPRISEContent; } }
            private static int _STATUS_INVALID_CONFIGURATION_ENTERPRISEContent = default;
            private static bool _STATUS_INVALID_CONFIGURATION_ENTERPRISEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#STATUS_NO_PERMISSION"/>
            /// </summary>
            public static int STATUS_NO_PERMISSION { get { if (!_STATUS_NO_PERMISSIONReady) { _STATUS_NO_PERMISSIONContent = SGetField<int>(LocalBridgeClazz, "STATUS_NO_PERMISSION"); _STATUS_NO_PERMISSIONReady = true; } return _STATUS_NO_PERMISSIONContent; } }
            private static int _STATUS_NO_PERMISSIONContent = default;
            private static bool _STATUS_NO_PERMISSIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#STATUS_NO_PERMISSION_MODIFY_CONFIG"/>
            /// </summary>
            public static int STATUS_NO_PERMISSION_MODIFY_CONFIG { get { if (!_STATUS_NO_PERMISSION_MODIFY_CONFIGReady) { _STATUS_NO_PERMISSION_MODIFY_CONFIGContent = SGetField<int>(LocalBridgeClazz, "STATUS_NO_PERMISSION_MODIFY_CONFIG"); _STATUS_NO_PERMISSION_MODIFY_CONFIGReady = true; } return _STATUS_NO_PERMISSION_MODIFY_CONFIGContent; } }
            private static int _STATUS_NO_PERMISSION_MODIFY_CONFIGContent = default;
            private static bool _STATUS_NO_PERMISSION_MODIFY_CONFIGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#STATUS_NO_PERMISSION_MODIFY_MAC_RANDOMIZATION"/>
            /// </summary>
            public static int STATUS_NO_PERMISSION_MODIFY_MAC_RANDOMIZATION { get { if (!_STATUS_NO_PERMISSION_MODIFY_MAC_RANDOMIZATIONReady) { _STATUS_NO_PERMISSION_MODIFY_MAC_RANDOMIZATIONContent = SGetField<int>(LocalBridgeClazz, "STATUS_NO_PERMISSION_MODIFY_MAC_RANDOMIZATION"); _STATUS_NO_PERMISSION_MODIFY_MAC_RANDOMIZATIONReady = true; } return _STATUS_NO_PERMISSION_MODIFY_MAC_RANDOMIZATIONContent; } }
            private static int _STATUS_NO_PERMISSION_MODIFY_MAC_RANDOMIZATIONContent = default;
            private static bool _STATUS_NO_PERMISSION_MODIFY_MAC_RANDOMIZATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#STATUS_NO_PERMISSION_MODIFY_PROXY_SETTING"/>
            /// </summary>
            public static int STATUS_NO_PERMISSION_MODIFY_PROXY_SETTING { get { if (!_STATUS_NO_PERMISSION_MODIFY_PROXY_SETTINGReady) { _STATUS_NO_PERMISSION_MODIFY_PROXY_SETTINGContent = SGetField<int>(LocalBridgeClazz, "STATUS_NO_PERMISSION_MODIFY_PROXY_SETTING"); _STATUS_NO_PERMISSION_MODIFY_PROXY_SETTINGReady = true; } return _STATUS_NO_PERMISSION_MODIFY_PROXY_SETTINGContent; } }
            private static int _STATUS_NO_PERMISSION_MODIFY_PROXY_SETTINGContent = default;
            private static bool _STATUS_NO_PERMISSION_MODIFY_PROXY_SETTINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#STATUS_SUCCESS"/>
            /// </summary>
            public static int STATUS_SUCCESS { get { if (!_STATUS_SUCCESSReady) { _STATUS_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "STATUS_SUCCESS"); _STATUS_SUCCESSReady = true; } return _STATUS_SUCCESSContent; } }
            private static int _STATUS_SUCCESSContent = default;
            private static bool _STATUS_SUCCESSReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.AddNetworkResult.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region InterfaceCreationImpact implementation
        public partial class InterfaceCreationImpact
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.InterfaceCreationImpact.html#%3Cinit%3E(int,java.util.Set)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Util.Set"/></param>
            public InterfaceCreationImpact(int arg0, Java.Util.Set<Java.Lang.String> arg1)
                : base(arg0, arg1)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.InterfaceCreationImpact.html#getInterfaceType()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetInterfaceType()
            {
                return IExecuteWithSignature<int>("getInterfaceType", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.InterfaceCreationImpact.html#getPackages()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Set"/></returns>
            public Java.Util.Set<Java.Lang.String> GetPackages()
            {
                return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getPackages", "()Ljava/util/Set;");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region LocalOnlyConnectionFailureListener implementation
        public partial class LocalOnlyConnectionFailureListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="LocalOnlyConnectionFailureListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onConnectionFailed", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnConnectionFailedEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyConnectionFailureListener.html#onConnectionFailed(android.net.wifi.WifiNetworkSpecifier,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnConnectionFailed"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Net.Wifi.WifiNetworkSpecifier, int> OnOnConnectionFailed { get; set; } = null;
            
            bool hasOverrideOnConnectionFailed = true;
            void OnConnectionFailedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnConnectionFailed = true;
                var methodToExecute = (OnOnConnectionFailed != null) ? OnOnConnectionFailed : OnConnectionFailed;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Net.Wifi.WifiNetworkSpecifier>(0), data.EventData.GetAt<int>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnConnectionFailed;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyConnectionFailureListener.html#onConnectionFailed(android.net.wifi.WifiNetworkSpecifier,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.WifiNetworkSpecifier"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public virtual void OnConnectionFailed(Android.Net.Wifi.WifiNetworkSpecifier arg0, int arg1)
            {
                hasOverrideOnConnectionFailed = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region LocalOnlyConnectionFailureListenerDirect implementation
        public partial class LocalOnlyConnectionFailureListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyConnectionFailureListener.html#onConnectionFailed(android.net.wifi.WifiNetworkSpecifier,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.WifiNetworkSpecifier"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public override void OnConnectionFailed(Android.Net.Wifi.WifiNetworkSpecifier arg0, int arg1)
            {
                IExecute("onConnectionFailed", arg0, arg1);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region LocalOnlyHotspotCallback implementation
        public partial class LocalOnlyHotspotCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html#ERROR_GENERIC"/>
            /// </summary>
            public static int ERROR_GENERIC { get { if (!_ERROR_GENERICReady) { _ERROR_GENERICContent = SGetField<int>(LocalBridgeClazz, "ERROR_GENERIC"); _ERROR_GENERICReady = true; } return _ERROR_GENERICContent; } }
            private static int _ERROR_GENERICContent = default;
            private static bool _ERROR_GENERICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html#ERROR_INCOMPATIBLE_MODE"/>
            /// </summary>
            public static int ERROR_INCOMPATIBLE_MODE { get { if (!_ERROR_INCOMPATIBLE_MODEReady) { _ERROR_INCOMPATIBLE_MODEContent = SGetField<int>(LocalBridgeClazz, "ERROR_INCOMPATIBLE_MODE"); _ERROR_INCOMPATIBLE_MODEReady = true; } return _ERROR_INCOMPATIBLE_MODEContent; } }
            private static int _ERROR_INCOMPATIBLE_MODEContent = default;
            private static bool _ERROR_INCOMPATIBLE_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html#ERROR_NO_CHANNEL"/>
            /// </summary>
            public static int ERROR_NO_CHANNEL { get { if (!_ERROR_NO_CHANNELReady) { _ERROR_NO_CHANNELContent = SGetField<int>(LocalBridgeClazz, "ERROR_NO_CHANNEL"); _ERROR_NO_CHANNELReady = true; } return _ERROR_NO_CHANNELContent; } }
            private static int _ERROR_NO_CHANNELContent = default;
            private static bool _ERROR_NO_CHANNELReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html#ERROR_TETHERING_DISALLOWED"/>
            /// </summary>
            public static int ERROR_TETHERING_DISALLOWED { get { if (!_ERROR_TETHERING_DISALLOWEDReady) { _ERROR_TETHERING_DISALLOWEDContent = SGetField<int>(LocalBridgeClazz, "ERROR_TETHERING_DISALLOWED"); _ERROR_TETHERING_DISALLOWEDReady = true; } return _ERROR_TETHERING_DISALLOWEDContent; } }
            private static int _ERROR_TETHERING_DISALLOWEDContent = default;
            private static bool _ERROR_TETHERING_DISALLOWEDReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html#onFailed(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnFailed(int arg0)
            {
                IExecuteWithSignature("onFailed", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html#onStarted(android.net.wifi.WifiManager.LocalOnlyHotspotReservation)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.WifiManager.LocalOnlyHotspotReservation"/></param>
            public void OnStarted(Android.Net.Wifi.WifiManager.LocalOnlyHotspotReservation arg0)
            {
                IExecuteWithSignature("onStarted", "(Landroid/net/wifi/WifiManager$LocalOnlyHotspotReservation;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html#onStopped()"/>
            /// </summary>
            public void OnStopped()
            {
                IExecuteWithSignature("onStopped", "()V");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region LocalOnlyHotspotReservation implementation
        public partial class LocalOnlyHotspotReservation
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotReservation.html#getSoftApConfiguration()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Wifi.SoftApConfiguration"/></returns>
            public Android.Net.Wifi.SoftApConfiguration GetSoftApConfiguration()
            {
                return IExecuteWithSignature<Android.Net.Wifi.SoftApConfiguration>("getSoftApConfiguration", "()Landroid/net/wifi/SoftApConfiguration;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotReservation.html#getWifiConfiguration()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Wifi.WifiConfiguration"/></returns>
            [global::System.Obsolete()]
            public Android.Net.Wifi.WifiConfiguration GetWifiConfiguration()
            {
                return IExecuteWithSignature<Android.Net.Wifi.WifiConfiguration>("getWifiConfiguration", "()Landroid/net/wifi/WifiConfiguration;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotReservation.html#close()"/>
            /// </summary>
            public void Close()
            {
                IExecuteWithSignature("close", "()V");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region MulticastLock implementation
        public partial class MulticastLock
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.MulticastLock.html#isHeld()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsHeld()
            {
                return IExecuteWithSignature<bool>("isHeld", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.MulticastLock.html#acquire()"/>
            /// </summary>
            public void Acquire()
            {
                IExecuteWithSignature("acquire", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.MulticastLock.html#release()"/>
            /// </summary>
            public void Release()
            {
                IExecuteWithSignature("release", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.MulticastLock.html#setReferenceCounted(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void SetReferenceCounted(bool arg0)
            {
                IExecuteWithSignature("setReferenceCounted", "(Z)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region ScanResultsCallback implementation
        public partial class ScanResultsCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.ScanResultsCallback.html#onScanResultsAvailable()"/>
            /// </summary>
            public void OnScanResultsAvailable()
            {
                IExecuteWithSignature("onScanResultsAvailable", "()V");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region SubsystemRestartTrackingCallback implementation
        public partial class SubsystemRestartTrackingCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.SubsystemRestartTrackingCallback.html#onSubsystemRestarted()"/>
            /// </summary>
            public void OnSubsystemRestarted()
            {
                IExecuteWithSignature("onSubsystemRestarted", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.SubsystemRestartTrackingCallback.html#onSubsystemRestarting()"/>
            /// </summary>
            public void OnSubsystemRestarting()
            {
                IExecuteWithSignature("onSubsystemRestarting", "()V");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region SuggestionConnectionStatusListener implementation
        public partial class SuggestionConnectionStatusListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="SuggestionConnectionStatusListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onConnectionStatus", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnConnectionStatusEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.SuggestionConnectionStatusListener.html#onConnectionStatus(android.net.wifi.WifiNetworkSuggestion,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnConnectionStatus"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Net.Wifi.WifiNetworkSuggestion, int> OnOnConnectionStatus { get; set; } = null;
            
            bool hasOverrideOnConnectionStatus = true;
            void OnConnectionStatusEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnConnectionStatus = true;
                var methodToExecute = (OnOnConnectionStatus != null) ? OnOnConnectionStatus : OnConnectionStatus;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Net.Wifi.WifiNetworkSuggestion>(0), data.EventData.GetAt<int>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnConnectionStatus;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.SuggestionConnectionStatusListener.html#onConnectionStatus(android.net.wifi.WifiNetworkSuggestion,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.WifiNetworkSuggestion"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public virtual void OnConnectionStatus(Android.Net.Wifi.WifiNetworkSuggestion arg0, int arg1)
            {
                hasOverrideOnConnectionStatus = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region SuggestionConnectionStatusListenerDirect implementation
        public partial class SuggestionConnectionStatusListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.SuggestionConnectionStatusListener.html#onConnectionStatus(android.net.wifi.WifiNetworkSuggestion,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.WifiNetworkSuggestion"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public override void OnConnectionStatus(Android.Net.Wifi.WifiNetworkSuggestion arg0, int arg1)
            {
                IExecute("onConnectionStatus", arg0, arg1);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region SuggestionUserApprovalStatusListener implementation
        public partial class SuggestionUserApprovalStatusListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="SuggestionUserApprovalStatusListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onUserApprovalStatusChange", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnUserApprovalStatusChangeEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.SuggestionUserApprovalStatusListener.html#onUserApprovalStatusChange(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnUserApprovalStatusChange"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnUserApprovalStatusChange { get; set; } = null;
            
            bool hasOverrideOnUserApprovalStatusChange = true;
            void OnUserApprovalStatusChangeEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnUserApprovalStatusChange = true;
                var methodToExecute = (OnOnUserApprovalStatusChange != null) ? OnOnUserApprovalStatusChange : OnUserApprovalStatusChange;
                methodToExecute.Invoke(data.EventData.GetAt<int>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnUserApprovalStatusChange;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.SuggestionUserApprovalStatusListener.html#onUserApprovalStatusChange(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public virtual void OnUserApprovalStatusChange(int arg0)
            {
                hasOverrideOnUserApprovalStatusChange = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region SuggestionUserApprovalStatusListenerDirect implementation
        public partial class SuggestionUserApprovalStatusListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.SuggestionUserApprovalStatusListener.html#onUserApprovalStatusChange(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnUserApprovalStatusChange(int arg0)
            {
                IExecuteWithSignature("onUserApprovalStatusChange", "(I)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region WifiLock implementation
        public partial class WifiLock
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.WifiLock.html#isHeld()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsHeld()
            {
                return IExecuteWithSignature<bool>("isHeld", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.WifiLock.html#acquire()"/>
            /// </summary>
            public void Acquire()
            {
                IExecuteWithSignature("acquire", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.WifiLock.html#release()"/>
            /// </summary>
            public void Release()
            {
                IExecuteWithSignature("release", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.WifiLock.html#setReferenceCounted(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void SetReferenceCounted(bool arg0)
            {
                IExecuteWithSignature("setReferenceCounted", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.WifiLock.html#setWorkSource(android.os.WorkSource)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.WorkSource"/></param>
            public void SetWorkSource(Android.Os.WorkSource arg0)
            {
                IExecuteWithSignature("setWorkSource", "(Landroid/os/WorkSource;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region WpsCallback implementation
        public partial class WpsCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.WpsCallback.html#onFailed(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            [global::System.Obsolete()]
            public void OnFailed(int arg0)
            {
                IExecuteWithSignature("onFailed", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.WpsCallback.html#onStarted(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            [global::System.Obsolete()]
            public void OnStarted(Java.Lang.String arg0)
            {
                IExecuteWithSignature("onStarted", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiManager.WpsCallback.html#onSucceeded()"/>
            /// </summary>
            [global::System.Obsolete()]
            public void OnSucceeded()
            {
                IExecuteWithSignature("onSucceeded", "()V");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
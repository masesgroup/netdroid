/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net
{
    #region Ikev2VpnProfile declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html"/>
    /// </summary>
    public partial class Ikev2VpnProfile : Android.Net.PlatformVpnProfile
    {
        const string _bridgeClassName = "android.net.Ikev2VpnProfile";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Ikev2VpnProfile() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Ikev2VpnProfile(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.net.Ikev2VpnProfile$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region Ikev2VpnProfile implementation
    public partial class Ikev2VpnProfile
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html#getIkeTunnelConnectionParams()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Ipsec.Ike.IkeTunnelConnectionParams"/></returns>
        public Android.Net.Ipsec.Ike.IkeTunnelConnectionParams GetIkeTunnelConnectionParams()
        {
            return IExecuteWithSignature<Android.Net.Ipsec.Ike.IkeTunnelConnectionParams>("getIkeTunnelConnectionParams", "()Landroid/net/ipsec/ike/IkeTunnelConnectionParams;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html#getProxyInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.ProxyInfo"/></returns>
        public Android.Net.ProxyInfo GetProxyInfo()
        {
            return IExecuteWithSignature<Android.Net.ProxyInfo>("getProxyInfo", "()Landroid/net/ProxyInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html#isAutomaticIpVersionSelectionEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAutomaticIpVersionSelectionEnabled()
        {
            return IExecuteWithSignature<bool>("isAutomaticIpVersionSelectionEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html#isAutomaticNattKeepaliveTimerEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAutomaticNattKeepaliveTimerEnabled()
        {
            return IExecuteWithSignature<bool>("isAutomaticNattKeepaliveTimerEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html#isBypassable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsBypassable()
        {
            return IExecuteWithSignature<bool>("isBypassable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html#isMetered()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMetered()
        {
            return IExecuteWithSignature<bool>("isMetered", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html#getPresharedKey()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        public byte[] GetPresharedKey()
        {
            return IExecuteWithSignatureArray<byte>("getPresharedKey", "()[B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html#getMaxMtu()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxMtu()
        {
            return IExecuteWithSignature<int>("getMaxMtu", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html#getPassword()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetPassword()
        {
            return IExecuteWithSignature<Java.Lang.String>("getPassword", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html#getServerAddr()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetServerAddr()
        {
            return IExecuteWithSignature<Java.Lang.String>("getServerAddr", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html#getUserIdentity()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetUserIdentity()
        {
            return IExecuteWithSignature<Java.Lang.String>("getUserIdentity", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html#getUsername()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetUsername()
        {
            return IExecuteWithSignature<Java.Lang.String>("getUsername", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html#getServerRootCaCert()"/>
        /// </summary>
        /// <returns><see cref="Java.Security.Cert.X509Certificate"/></returns>
        public Java.Security.Cert.X509Certificate GetServerRootCaCert()
        {
            return IExecuteWithSignature<Java.Security.Cert.X509Certificate>("getServerRootCaCert", "()Ljava/security/cert/X509Certificate;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html#getUserCert()"/>
        /// </summary>
        /// <returns><see cref="Java.Security.Cert.X509Certificate"/></returns>
        public Java.Security.Cert.X509Certificate GetUserCert()
        {
            return IExecuteWithSignature<Java.Security.Cert.X509Certificate>("getUserCert", "()Ljava/security/cert/X509Certificate;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html#getRsaPrivateKey()"/>
        /// </summary>
        /// <returns><see cref="Java.Security.PrivateKey"/></returns>
        public Java.Security.PrivateKey GetRsaPrivateKey()
        {
            return IExecuteWithSignature<Java.Security.PrivateKey>("getRsaPrivateKey", "()Ljava/security/PrivateKey;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.html#getAllowedAlgorithms()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetAllowedAlgorithms()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getAllowedAlgorithms", "()Ljava/util/List;");
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.Builder.html#%3Cinit%3E(android.net.ipsec.ike.IkeTunnelConnectionParams)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Ipsec.Ike.IkeTunnelConnectionParams"/></param>
            public Builder(Android.Net.Ipsec.Ike.IkeTunnelConnectionParams arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.Builder.html#%3Cinit%3E(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            public Builder(Java.Lang.String arg0, Java.Lang.String arg1)
                : base(arg0, arg1)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Ikev2VpnProfile"/></returns>
            public Android.Net.Ikev2VpnProfile Build()
            {
                return IExecuteWithSignature<Android.Net.Ikev2VpnProfile>("build", "()Landroid/net/Ikev2VpnProfile;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.Builder.html#setAllowedAlgorithms(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <returns><see cref="Android.Net.Ikev2VpnProfile.Builder"/></returns>
            public Android.Net.Ikev2VpnProfile.Builder SetAllowedAlgorithms(Java.Util.List<Java.Lang.String> arg0)
            {
                return IExecuteWithSignature<Android.Net.Ikev2VpnProfile.Builder>("setAllowedAlgorithms", "(Ljava/util/List;)Landroid/net/Ikev2VpnProfile$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.Builder.html#setAuthDigitalSignature(java.security.cert.X509Certificate,java.security.PrivateKey,java.security.cert.X509Certificate)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Security.Cert.X509Certificate"/></param>
            /// <param name="arg1"><see cref="Java.Security.PrivateKey"/></param>
            /// <param name="arg2"><see cref="Java.Security.Cert.X509Certificate"/></param>
            /// <returns><see cref="Android.Net.Ikev2VpnProfile.Builder"/></returns>
            public Android.Net.Ikev2VpnProfile.Builder SetAuthDigitalSignature(Java.Security.Cert.X509Certificate arg0, Java.Security.PrivateKey arg1, Java.Security.Cert.X509Certificate arg2)
            {
                return IExecute<Android.Net.Ikev2VpnProfile.Builder>("setAuthDigitalSignature", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.Builder.html#setAuthPsk(byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <returns><see cref="Android.Net.Ikev2VpnProfile.Builder"/></returns>
            public Android.Net.Ikev2VpnProfile.Builder SetAuthPsk(byte[] arg0)
            {
                return IExecuteWithSignature<Android.Net.Ikev2VpnProfile.Builder>("setAuthPsk", "([B)Landroid/net/Ikev2VpnProfile$Builder;", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.Builder.html#setAuthUsernamePassword(java.lang.String,java.lang.String,java.security.cert.X509Certificate)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="Java.Security.Cert.X509Certificate"/></param>
            /// <returns><see cref="Android.Net.Ikev2VpnProfile.Builder"/></returns>
            public Android.Net.Ikev2VpnProfile.Builder SetAuthUsernamePassword(Java.Lang.String arg0, Java.Lang.String arg1, Java.Security.Cert.X509Certificate arg2)
            {
                return IExecute<Android.Net.Ikev2VpnProfile.Builder>("setAuthUsernamePassword", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.Builder.html#setAutomaticIpVersionSelectionEnabled(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Net.Ikev2VpnProfile.Builder"/></returns>
            public Android.Net.Ikev2VpnProfile.Builder SetAutomaticIpVersionSelectionEnabled(bool arg0)
            {
                return IExecuteWithSignature<Android.Net.Ikev2VpnProfile.Builder>("setAutomaticIpVersionSelectionEnabled", "(Z)Landroid/net/Ikev2VpnProfile$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.Builder.html#setAutomaticNattKeepaliveTimerEnabled(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Net.Ikev2VpnProfile.Builder"/></returns>
            public Android.Net.Ikev2VpnProfile.Builder SetAutomaticNattKeepaliveTimerEnabled(bool arg0)
            {
                return IExecuteWithSignature<Android.Net.Ikev2VpnProfile.Builder>("setAutomaticNattKeepaliveTimerEnabled", "(Z)Landroid/net/Ikev2VpnProfile$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.Builder.html#setBypassable(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Net.Ikev2VpnProfile.Builder"/></returns>
            public Android.Net.Ikev2VpnProfile.Builder SetBypassable(bool arg0)
            {
                return IExecuteWithSignature<Android.Net.Ikev2VpnProfile.Builder>("setBypassable", "(Z)Landroid/net/Ikev2VpnProfile$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.Builder.html#setLocalRoutesExcluded(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Net.Ikev2VpnProfile.Builder"/></returns>
            public Android.Net.Ikev2VpnProfile.Builder SetLocalRoutesExcluded(bool arg0)
            {
                return IExecuteWithSignature<Android.Net.Ikev2VpnProfile.Builder>("setLocalRoutesExcluded", "(Z)Landroid/net/Ikev2VpnProfile$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.Builder.html#setMaxMtu(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Ikev2VpnProfile.Builder"/></returns>
            public Android.Net.Ikev2VpnProfile.Builder SetMaxMtu(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Ikev2VpnProfile.Builder>("setMaxMtu", "(I)Landroid/net/Ikev2VpnProfile$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.Builder.html#setMetered(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Net.Ikev2VpnProfile.Builder"/></returns>
            public Android.Net.Ikev2VpnProfile.Builder SetMetered(bool arg0)
            {
                return IExecuteWithSignature<Android.Net.Ikev2VpnProfile.Builder>("setMetered", "(Z)Landroid/net/Ikev2VpnProfile$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.Builder.html#setProxy(android.net.ProxyInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.ProxyInfo"/></param>
            /// <returns><see cref="Android.Net.Ikev2VpnProfile.Builder"/></returns>
            public Android.Net.Ikev2VpnProfile.Builder SetProxy(Android.Net.ProxyInfo arg0)
            {
                return IExecuteWithSignature<Android.Net.Ikev2VpnProfile.Builder>("setProxy", "(Landroid/net/ProxyInfo;)Landroid/net/Ikev2VpnProfile$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/Ikev2VpnProfile.Builder.html#setRequiresInternetValidation(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Net.Ikev2VpnProfile.Builder"/></returns>
            public Android.Net.Ikev2VpnProfile.Builder SetRequiresInternetValidation(bool arg0)
            {
                return IExecuteWithSignature<Android.Net.Ikev2VpnProfile.Builder>("setRequiresInternetValidation", "(Z)Landroid/net/Ikev2VpnProfile$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Sip
{
    #region SipRegistrationListener declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/sip/SipRegistrationListener.html"/>
    /// </summary>
    [global::System.Obsolete()]
    public partial class SipRegistrationListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
    {
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public SipRegistrationListener() { InitializeHandlers(); }
    
        const string _bridgeClassName = "org.mases.netdroid.generated.android.net.sip.SipRegistrationListener";
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
    
    
        // TODO: complete the class
    
    }
    #endregion
    
    #region SipRegistrationListenerDirect declaration
    /// <summary>
    /// Direct override of <see cref="SipRegistrationListener"/> or its generic type if there is one
    /// </summary>
    public partial class SipRegistrationListenerDirect : SipRegistrationListener
    {
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
        /// </summary>
        public override bool AutoInit => false;
    
        /// <inheritdoc />
        protected override void InitializeHandlers() { }
    
        const string _bridgeClassName = "android.net.sip.SipRegistrationListener";
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    }
    #endregion

    #region ISipRegistrationListener
    /// <summary>
    /// .NET interface for org.mases.netdroid.generated.android.net.sip.SipRegistrationListener implementing <see href="https://developer.android.com/reference/android/net/sip/SipRegistrationListener.html"/>
    /// </summary>
    public partial interface ISipRegistrationListener
    {
        #region Instance methods
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion

    #region SipRegistrationListener implementation
    public partial class SipRegistrationListener : Android.Net.Sip.ISipRegistrationListener
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// Handlers initializer for <see cref="SipRegistrationListener"/>
        /// </summary>
        protected virtual void InitializeHandlers()
        {
            AddEventHandler("onRegistering", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnRegisteringEventHandler));
            AddEventHandler("onRegistrationDone", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnRegistrationDoneEventHandler));
            AddEventHandler("onRegistrationFailed", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnRegistrationFailedEventHandler));

        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/net/sip/SipRegistrationListener.html#onRegistering(java.lang.String)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnRegistering"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<Java.Lang.String> OnOnRegistering { get; set; } = null;
        
        bool hasOverrideOnRegistering = true;
        void OnRegisteringEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideOnRegistering = true;
            var methodToExecute = (OnOnRegistering != null) ? OnOnRegistering : OnRegistering;
            methodToExecute.Invoke(data.EventData.GetAt<Java.Lang.String>(0));
            data.EventData.TypedEventData.HasOverride = hasOverrideOnRegistering;
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipRegistrationListener.html#onRegistering(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public virtual void OnRegistering(Java.Lang.String arg0)
        {
            hasOverrideOnRegistering = false;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/net/sip/SipRegistrationListener.html#onRegistrationDone(java.lang.String,long)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnRegistrationDone"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<Java.Lang.String, long> OnOnRegistrationDone { get; set; } = null;
        
        bool hasOverrideOnRegistrationDone = true;
        void OnRegistrationDoneEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideOnRegistrationDone = true;
            var methodToExecute = (OnOnRegistrationDone != null) ? OnOnRegistrationDone : OnRegistrationDone;
            methodToExecute.Invoke(data.EventData.GetAt<Java.Lang.String>(0), data.EventData.GetAt<long>(1));
            data.EventData.TypedEventData.HasOverride = hasOverrideOnRegistrationDone;
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipRegistrationListener.html#onRegistrationDone(java.lang.String,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        [global::System.Obsolete()]
        public virtual void OnRegistrationDone(Java.Lang.String arg0, long arg1)
        {
            hasOverrideOnRegistrationDone = false;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/net/sip/SipRegistrationListener.html#onRegistrationFailed(java.lang.String,int,java.lang.String)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnRegistrationFailed"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<Java.Lang.String, int, Java.Lang.String> OnOnRegistrationFailed { get; set; } = null;
        
        bool hasOverrideOnRegistrationFailed = true;
        void OnRegistrationFailedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideOnRegistrationFailed = true;
            var methodToExecute = (OnOnRegistrationFailed != null) ? OnOnRegistrationFailed : OnRegistrationFailed;
            methodToExecute.Invoke(data.EventData.GetAt<Java.Lang.String>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<Java.Lang.String>(2));
            data.EventData.TypedEventData.HasOverride = hasOverrideOnRegistrationFailed;
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipRegistrationListener.html#onRegistrationFailed(java.lang.String,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public virtual void OnRegistrationFailed(Java.Lang.String arg0, int arg1, Java.Lang.String arg2)
        {
            hasOverrideOnRegistrationFailed = false;
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion

    #region SipRegistrationListenerDirect implementation
    public partial class SipRegistrationListenerDirect : Android.Net.Sip.ISipRegistrationListener
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipRegistrationListener.html#onRegistering(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public override void OnRegistering(Java.Lang.String arg0)
        {
            IExecuteWithSignature("onRegistering", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipRegistrationListener.html#onRegistrationDone(java.lang.String,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        [global::System.Obsolete()]
        public override void OnRegistrationDone(Java.Lang.String arg0, long arg1)
        {
            IExecute("onRegistrationDone", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipRegistrationListener.html#onRegistrationFailed(java.lang.String,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        [global::System.Obsolete()]
        public override void OnRegistrationFailed(Java.Lang.String arg0, int arg1, Java.Lang.String arg2)
        {
            IExecute("onRegistrationFailed", arg0, arg1, arg2);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
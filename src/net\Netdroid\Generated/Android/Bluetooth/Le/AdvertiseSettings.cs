/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Bluetooth.Le
{
    #region AdvertiseSettings declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html"/>
    /// </summary>
    public partial class AdvertiseSettings : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.bluetooth.le.AdvertiseSettings";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public AdvertiseSettings() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public AdvertiseSettings(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.bluetooth.le.AdvertiseSettings$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region AdvertiseSettings implementation
    public partial class AdvertiseSettings
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_MODE_BALANCED"/>
        /// </summary>
        public static int ADVERTISE_MODE_BALANCED { get { if (!_ADVERTISE_MODE_BALANCEDReady) { _ADVERTISE_MODE_BALANCEDContent = SGetField<int>(LocalBridgeClazz, "ADVERTISE_MODE_BALANCED"); _ADVERTISE_MODE_BALANCEDReady = true; } return _ADVERTISE_MODE_BALANCEDContent; } }
        private static int _ADVERTISE_MODE_BALANCEDContent = default;
        private static bool _ADVERTISE_MODE_BALANCEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_MODE_LOW_LATENCY"/>
        /// </summary>
        public static int ADVERTISE_MODE_LOW_LATENCY { get { if (!_ADVERTISE_MODE_LOW_LATENCYReady) { _ADVERTISE_MODE_LOW_LATENCYContent = SGetField<int>(LocalBridgeClazz, "ADVERTISE_MODE_LOW_LATENCY"); _ADVERTISE_MODE_LOW_LATENCYReady = true; } return _ADVERTISE_MODE_LOW_LATENCYContent; } }
        private static int _ADVERTISE_MODE_LOW_LATENCYContent = default;
        private static bool _ADVERTISE_MODE_LOW_LATENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_MODE_LOW_POWER"/>
        /// </summary>
        public static int ADVERTISE_MODE_LOW_POWER { get { if (!_ADVERTISE_MODE_LOW_POWERReady) { _ADVERTISE_MODE_LOW_POWERContent = SGetField<int>(LocalBridgeClazz, "ADVERTISE_MODE_LOW_POWER"); _ADVERTISE_MODE_LOW_POWERReady = true; } return _ADVERTISE_MODE_LOW_POWERContent; } }
        private static int _ADVERTISE_MODE_LOW_POWERContent = default;
        private static bool _ADVERTISE_MODE_LOW_POWERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_TX_POWER_HIGH"/>
        /// </summary>
        public static int ADVERTISE_TX_POWER_HIGH { get { if (!_ADVERTISE_TX_POWER_HIGHReady) { _ADVERTISE_TX_POWER_HIGHContent = SGetField<int>(LocalBridgeClazz, "ADVERTISE_TX_POWER_HIGH"); _ADVERTISE_TX_POWER_HIGHReady = true; } return _ADVERTISE_TX_POWER_HIGHContent; } }
        private static int _ADVERTISE_TX_POWER_HIGHContent = default;
        private static bool _ADVERTISE_TX_POWER_HIGHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_TX_POWER_LOW"/>
        /// </summary>
        public static int ADVERTISE_TX_POWER_LOW { get { if (!_ADVERTISE_TX_POWER_LOWReady) { _ADVERTISE_TX_POWER_LOWContent = SGetField<int>(LocalBridgeClazz, "ADVERTISE_TX_POWER_LOW"); _ADVERTISE_TX_POWER_LOWReady = true; } return _ADVERTISE_TX_POWER_LOWContent; } }
        private static int _ADVERTISE_TX_POWER_LOWContent = default;
        private static bool _ADVERTISE_TX_POWER_LOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_TX_POWER_MEDIUM"/>
        /// </summary>
        public static int ADVERTISE_TX_POWER_MEDIUM { get { if (!_ADVERTISE_TX_POWER_MEDIUMReady) { _ADVERTISE_TX_POWER_MEDIUMContent = SGetField<int>(LocalBridgeClazz, "ADVERTISE_TX_POWER_MEDIUM"); _ADVERTISE_TX_POWER_MEDIUMReady = true; } return _ADVERTISE_TX_POWER_MEDIUMContent; } }
        private static int _ADVERTISE_TX_POWER_MEDIUMContent = default;
        private static bool _ADVERTISE_TX_POWER_MEDIUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#ADVERTISE_TX_POWER_ULTRA_LOW"/>
        /// </summary>
        public static int ADVERTISE_TX_POWER_ULTRA_LOW { get { if (!_ADVERTISE_TX_POWER_ULTRA_LOWReady) { _ADVERTISE_TX_POWER_ULTRA_LOWContent = SGetField<int>(LocalBridgeClazz, "ADVERTISE_TX_POWER_ULTRA_LOW"); _ADVERTISE_TX_POWER_ULTRA_LOWReady = true; } return _ADVERTISE_TX_POWER_ULTRA_LOWContent; } }
        private static int _ADVERTISE_TX_POWER_ULTRA_LOWContent = default;
        private static bool _ADVERTISE_TX_POWER_ULTRA_LOWReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#isConnectable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsConnectable()
        {
            return IExecuteWithSignature<bool>("isConnectable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#isDiscoverable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDiscoverable()
        {
            return IExecuteWithSignature<bool>("isDiscoverable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#getMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMode()
        {
            return IExecuteWithSignature<int>("getMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#getTimeout()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTimeout()
        {
            return IExecuteWithSignature<int>("getTimeout", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#getTxPowerLevel()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTxPowerLevel()
        {
            return IExecuteWithSignature<int>("getTxPowerLevel", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Bluetooth.Le.AdvertiseSettings"/></returns>
            public Android.Bluetooth.Le.AdvertiseSettings Build()
            {
                return IExecuteWithSignature<Android.Bluetooth.Le.AdvertiseSettings>("build", "()Landroid/bluetooth/le/AdvertiseSettings;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#setAdvertiseMode(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Bluetooth.Le.AdvertiseSettings.Builder"/></returns>
            public Android.Bluetooth.Le.AdvertiseSettings.Builder SetAdvertiseMode(int arg0)
            {
                return IExecuteWithSignature<Android.Bluetooth.Le.AdvertiseSettings.Builder>("setAdvertiseMode", "(I)Landroid/bluetooth/le/AdvertiseSettings$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#setConnectable(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Bluetooth.Le.AdvertiseSettings.Builder"/></returns>
            public Android.Bluetooth.Le.AdvertiseSettings.Builder SetConnectable(bool arg0)
            {
                return IExecuteWithSignature<Android.Bluetooth.Le.AdvertiseSettings.Builder>("setConnectable", "(Z)Landroid/bluetooth/le/AdvertiseSettings$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#setDiscoverable(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Bluetooth.Le.AdvertiseSettings.Builder"/></returns>
            public Android.Bluetooth.Le.AdvertiseSettings.Builder SetDiscoverable(bool arg0)
            {
                return IExecuteWithSignature<Android.Bluetooth.Le.AdvertiseSettings.Builder>("setDiscoverable", "(Z)Landroid/bluetooth/le/AdvertiseSettings$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#setTimeout(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Bluetooth.Le.AdvertiseSettings.Builder"/></returns>
            public Android.Bluetooth.Le.AdvertiseSettings.Builder SetTimeout(int arg0)
            {
                return IExecuteWithSignature<Android.Bluetooth.Le.AdvertiseSettings.Builder>("setTimeout", "(I)Landroid/bluetooth/le/AdvertiseSettings$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/bluetooth/le/AdvertiseSettings.Builder.html#setTxPowerLevel(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Bluetooth.Le.AdvertiseSettings.Builder"/></returns>
            public Android.Bluetooth.Le.AdvertiseSettings.Builder SetTxPowerLevel(int arg0)
            {
                return IExecuteWithSignature<Android.Bluetooth.Le.AdvertiseSettings.Builder>("setTxPowerLevel", "(I)Landroid/bluetooth/le/AdvertiseSettings$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
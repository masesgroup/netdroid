/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Widget
{
    #region BaseExpandableListAdapter declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html"/>
    /// </summary>
    public partial class BaseExpandableListAdapter : MASES.JCOBridge.C2JBridge.JVMBridgeListener
    {
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public BaseExpandableListAdapter() { InitializeHandlers(); }
    
        const string _bridgeClassName = "org.mases.netdroid.generated.android.widget.BaseExpandableListAdapter";
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
    
    
        // TODO: complete the class
    
    }
    #endregion
    
    #region BaseExpandableListAdapterDirect declaration
    /// <summary>
    /// Direct override of <see cref="BaseExpandableListAdapter"/> or its generic type if there is one
    /// </summary>
    public partial class BaseExpandableListAdapterDirect : BaseExpandableListAdapter
    {
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
        /// </summary>
        public override bool AutoInit => false;
    
        /// <inheritdoc />
        protected override void InitializeHandlers() { }
    
        const string _bridgeClassName = "android.widget.BaseExpandableListAdapter";
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    }
    #endregion

    #region BaseExpandableListAdapter implementation
    public partial class BaseExpandableListAdapter : Android.Widget.IExpandableListAdapter, Android.Widget.IHeterogeneousExpandableList
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// Handlers initializer for <see cref="BaseExpandableListAdapter"/>
        /// </summary>
        protected virtual void InitializeHandlers()
        {
            AddEventHandler("getChildView", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(GetChildViewEventHandler));
            AddEventHandler("getGroupView", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(GetGroupViewEventHandler));
            AddEventHandler("hasStableIds", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(HasStableIdsEventHandler));
            AddEventHandler("isChildSelectable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(IsChildSelectableEventHandler));
            AddEventHandler("getChildrenCount", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(GetChildrenCountEventHandler));
            AddEventHandler("getGroupCount", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(GetGroupCountEventHandler));
            AddEventHandler("getChild", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(GetChildEventHandler));
            AddEventHandler("getGroup", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(GetGroupEventHandler));
            AddEventHandler("getChildId", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(GetChildIdEventHandler));
            AddEventHandler("getGroupId", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(GetGroupIdEventHandler));
            AddEventHandler("areAllItemsEnabled", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(AreAllItemsEnabledEventHandler));
            AddEventHandler("isEmpty", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(IsEmptyEventHandler));
            AddEventHandler("getChildType", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(GetChildTypeEventHandler));
            AddEventHandler("getChildTypeCount", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(GetChildTypeCountEventHandler));
            AddEventHandler("getGroupType", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(GetGroupTypeEventHandler));
            AddEventHandler("getGroupTypeCount", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(GetGroupTypeCountEventHandler));
            AddEventHandler("getCombinedChildId", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(GetCombinedChildIdEventHandler));
            AddEventHandler("getCombinedGroupId", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(GetCombinedGroupIdEventHandler));
            AddEventHandler("notifyDataSetChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(NotifyDataSetChangedEventHandler));
            AddEventHandler("notifyDataSetInvalidated", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(NotifyDataSetInvalidatedEventHandler));
            AddEventHandler("onGroupCollapsed", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGroupCollapsedEventHandler));
            AddEventHandler("onGroupExpanded", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGroupExpandedEventHandler));
            AddEventHandler("registerDataSetObserver", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(RegisterDataSetObserverEventHandler));
            AddEventHandler("unregisterDataSetObserver", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(UnregisterDataSetObserverEventHandler));

        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetChildView"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, int, bool, Android.View.View, Android.View.ViewGroup, Android.View.View> OnGetChildView { get; set; } = null;
        
        bool hasOverrideGetChildView = true;
        void GetChildViewEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideGetChildView = true;
            var methodToExecute = (OnGetChildView != null) ? OnGetChildView : GetChildView;
            var executionResult = methodToExecute.Invoke(data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<bool>(2), data.EventData.GetAt<Android.View.View>(3), data.EventData.GetAt<Android.View.ViewGroup>(4));
            data.EventData.TypedEventData.SetReturnData(hasOverrideGetChildView, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="Android.View.View"/></param>
        /// <param name="arg4"><see cref="Android.View.ViewGroup"/></param>
        /// <returns><see cref="Android.View.View"/></returns>
        public virtual Android.View.View GetChildView(int arg0, int arg1, bool arg2, Android.View.View arg3, Android.View.ViewGroup arg4)
        {
            hasOverrideGetChildView = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupView(int,boolean,android.view.View,android.view.ViewGroup)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetGroupView"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, bool, Android.View.View, Android.View.ViewGroup, Android.View.View> OnGetGroupView { get; set; } = null;
        
        bool hasOverrideGetGroupView = true;
        void GetGroupViewEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideGetGroupView = true;
            var methodToExecute = (OnGetGroupView != null) ? OnGetGroupView : GetGroupView;
            var executionResult = methodToExecute.Invoke(data.EventData.GetAt<int>(0), data.EventData.GetAt<bool>(1), data.EventData.GetAt<Android.View.View>(2), data.EventData.GetAt<Android.View.ViewGroup>(3));
            data.EventData.TypedEventData.SetReturnData(hasOverrideGetGroupView, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupView(int,boolean,android.view.View,android.view.ViewGroup)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Android.View.View"/></param>
        /// <param name="arg3"><see cref="Android.View.ViewGroup"/></param>
        /// <returns><see cref="Android.View.View"/></returns>
        public virtual Android.View.View GetGroupView(int arg0, bool arg1, Android.View.View arg2, Android.View.ViewGroup arg3)
        {
            hasOverrideGetGroupView = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#hasStableIds()"/>
        /// </summary>
        /// <remarks>If <see cref="OnHasStableIds"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<bool> OnHasStableIds { get; set; } = null;
        
        bool hasOverrideHasStableIds = true;
        void HasStableIdsEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideHasStableIds = true;
            var methodToExecute = (OnHasStableIds != null) ? OnHasStableIds : HasStableIds;
            var executionResult = methodToExecute.Invoke();
            data.EventData.TypedEventData.SetReturnData(hasOverrideHasStableIds, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#hasStableIds()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool HasStableIds()
        {
            hasOverrideHasStableIds = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#isChildSelectable(int,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsChildSelectable"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, int, bool> OnIsChildSelectable { get; set; } = null;
        
        bool hasOverrideIsChildSelectable = true;
        void IsChildSelectableEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideIsChildSelectable = true;
            var methodToExecute = (OnIsChildSelectable != null) ? OnIsChildSelectable : IsChildSelectable;
            var executionResult = methodToExecute.Invoke(data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1));
            data.EventData.TypedEventData.SetReturnData(hasOverrideIsChildSelectable, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#isChildSelectable(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public virtual bool IsChildSelectable(int arg0, int arg1)
        {
            hasOverrideIsChildSelectable = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildrenCount(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetChildrenCount"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, int> OnGetChildrenCount { get; set; } = null;
        
        bool hasOverrideGetChildrenCount = true;
        void GetChildrenCountEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideGetChildrenCount = true;
            var methodToExecute = (OnGetChildrenCount != null) ? OnGetChildrenCount : GetChildrenCount;
            var executionResult = methodToExecute.Invoke(data.EventData.GetAt<int>(0));
            data.EventData.TypedEventData.SetReturnData(hasOverrideGetChildrenCount, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildrenCount(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public virtual int GetChildrenCount(int arg0)
        {
            hasOverrideGetChildrenCount = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupCount()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetGroupCount"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int> OnGetGroupCount { get; set; } = null;
        
        bool hasOverrideGetGroupCount = true;
        void GetGroupCountEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideGetGroupCount = true;
            var methodToExecute = (OnGetGroupCount != null) ? OnGetGroupCount : GetGroupCount;
            var executionResult = methodToExecute.Invoke();
            data.EventData.TypedEventData.SetReturnData(hasOverrideGetGroupCount, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public virtual int GetGroupCount()
        {
            hasOverrideGetGroupCount = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChild(int,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetChild"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, int, object> OnGetChild { get; set; } = null;
        
        bool hasOverrideGetChild = true;
        void GetChildEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideGetChild = true;
            var methodToExecute = (OnGetChild != null) ? OnGetChild : GetChild;
            var executionResult = methodToExecute.Invoke(data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1));
            data.EventData.TypedEventData.SetReturnData(hasOverrideGetChild, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChild(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public virtual object GetChild(int arg0, int arg1)
        {
            hasOverrideGetChild = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroup(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetGroup"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, object> OnGetGroup { get; set; } = null;
        
        bool hasOverrideGetGroup = true;
        void GetGroupEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideGetGroup = true;
            var methodToExecute = (OnGetGroup != null) ? OnGetGroup : GetGroup;
            var executionResult = methodToExecute.Invoke(data.EventData.GetAt<int>(0));
            data.EventData.TypedEventData.SetReturnData(hasOverrideGetGroup, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroup(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public virtual object GetGroup(int arg0)
        {
            hasOverrideGetGroup = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildId(int,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetChildId"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, int, long> OnGetChildId { get; set; } = null;
        
        bool hasOverrideGetChildId = true;
        void GetChildIdEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideGetChildId = true;
            var methodToExecute = (OnGetChildId != null) ? OnGetChildId : GetChildId;
            var executionResult = methodToExecute.Invoke(data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1));
            data.EventData.TypedEventData.SetReturnData(hasOverrideGetChildId, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildId(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public virtual long GetChildId(int arg0, int arg1)
        {
            hasOverrideGetChildId = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupId(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetGroupId"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, long> OnGetGroupId { get; set; } = null;
        
        bool hasOverrideGetGroupId = true;
        void GetGroupIdEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideGetGroupId = true;
            var methodToExecute = (OnGetGroupId != null) ? OnGetGroupId : GetGroupId;
            var executionResult = methodToExecute.Invoke(data.EventData.GetAt<int>(0));
            data.EventData.TypedEventData.SetReturnData(hasOverrideGetGroupId, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupId(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public virtual long GetGroupId(int arg0)
        {
            hasOverrideGetGroupId = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#areAllItemsEnabled()"/>
        /// </summary>
        /// <remarks>If <see cref="OnAreAllItemsEnabled"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<bool> OnAreAllItemsEnabled { get; set; } = null;
        
        bool hasOverrideAreAllItemsEnabled = true;
        void AreAllItemsEnabledEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideAreAllItemsEnabled = true;
            var methodToExecute = (OnAreAllItemsEnabled != null) ? OnAreAllItemsEnabled : AreAllItemsEnabled;
            var executionResult = methodToExecute.Invoke();
            data.EventData.TypedEventData.SetReturnData(hasOverrideAreAllItemsEnabled, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#areAllItemsEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool AreAllItemsEnabled()
        {
            hasOverrideAreAllItemsEnabled = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#isEmpty()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsEmpty"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<bool> OnIsEmpty { get; set; } = null;
        
        bool hasOverrideIsEmpty = true;
        void IsEmptyEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideIsEmpty = true;
            var methodToExecute = (OnIsEmpty != null) ? OnIsEmpty : IsEmpty;
            var executionResult = methodToExecute.Invoke();
            data.EventData.TypedEventData.SetReturnData(hasOverrideIsEmpty, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#isEmpty()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool IsEmpty()
        {
            hasOverrideIsEmpty = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getChildType(int,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetChildType"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, int, int> OnGetChildType { get; set; } = null;
        
        bool hasOverrideGetChildType = true;
        void GetChildTypeEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideGetChildType = true;
            var methodToExecute = (OnGetChildType != null) ? OnGetChildType : GetChildType;
            var executionResult = methodToExecute.Invoke(data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1));
            data.EventData.TypedEventData.SetReturnData(hasOverrideGetChildType, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getChildType(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public virtual int GetChildType(int arg0, int arg1)
        {
            hasOverrideGetChildType = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getChildTypeCount()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetChildTypeCount"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int> OnGetChildTypeCount { get; set; } = null;
        
        bool hasOverrideGetChildTypeCount = true;
        void GetChildTypeCountEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideGetChildTypeCount = true;
            var methodToExecute = (OnGetChildTypeCount != null) ? OnGetChildTypeCount : GetChildTypeCount;
            var executionResult = methodToExecute.Invoke();
            data.EventData.TypedEventData.SetReturnData(hasOverrideGetChildTypeCount, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getChildTypeCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public virtual int GetChildTypeCount()
        {
            hasOverrideGetChildTypeCount = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getGroupType(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetGroupType"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, int> OnGetGroupType { get; set; } = null;
        
        bool hasOverrideGetGroupType = true;
        void GetGroupTypeEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideGetGroupType = true;
            var methodToExecute = (OnGetGroupType != null) ? OnGetGroupType : GetGroupType;
            var executionResult = methodToExecute.Invoke(data.EventData.GetAt<int>(0));
            data.EventData.TypedEventData.SetReturnData(hasOverrideGetGroupType, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getGroupType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public virtual int GetGroupType(int arg0)
        {
            hasOverrideGetGroupType = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getGroupTypeCount()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetGroupTypeCount"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int> OnGetGroupTypeCount { get; set; } = null;
        
        bool hasOverrideGetGroupTypeCount = true;
        void GetGroupTypeCountEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideGetGroupTypeCount = true;
            var methodToExecute = (OnGetGroupTypeCount != null) ? OnGetGroupTypeCount : GetGroupTypeCount;
            var executionResult = methodToExecute.Invoke();
            data.EventData.TypedEventData.SetReturnData(hasOverrideGetGroupTypeCount, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getGroupTypeCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public virtual int GetGroupTypeCount()
        {
            hasOverrideGetGroupTypeCount = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getCombinedChildId(long,long)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetCombinedChildId"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<long, long, long> OnGetCombinedChildId { get; set; } = null;
        
        bool hasOverrideGetCombinedChildId = true;
        void GetCombinedChildIdEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideGetCombinedChildId = true;
            var methodToExecute = (OnGetCombinedChildId != null) ? OnGetCombinedChildId : GetCombinedChildId;
            var executionResult = methodToExecute.Invoke(data.EventData.GetAt<long>(0), data.EventData.GetAt<long>(1));
            data.EventData.TypedEventData.SetReturnData(hasOverrideGetCombinedChildId, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getCombinedChildId(long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public virtual long GetCombinedChildId(long arg0, long arg1)
        {
            hasOverrideGetCombinedChildId = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getCombinedGroupId(long)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetCombinedGroupId"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<long, long> OnGetCombinedGroupId { get; set; } = null;
        
        bool hasOverrideGetCombinedGroupId = true;
        void GetCombinedGroupIdEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideGetCombinedGroupId = true;
            var methodToExecute = (OnGetCombinedGroupId != null) ? OnGetCombinedGroupId : GetCombinedGroupId;
            var executionResult = methodToExecute.Invoke(data.EventData.GetAt<long>(0));
            data.EventData.TypedEventData.SetReturnData(hasOverrideGetCombinedGroupId, executionResult);
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getCombinedGroupId(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public virtual long GetCombinedGroupId(long arg0)
        {
            hasOverrideGetCombinedGroupId = false; return default;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#notifyDataSetChanged()"/>
        /// </summary>
        /// <remarks>If <see cref="OnNotifyDataSetChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action OnNotifyDataSetChanged { get; set; } = null;
        
        bool hasOverrideNotifyDataSetChanged = true;
        void NotifyDataSetChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideNotifyDataSetChanged = true;
            var methodToExecute = (OnNotifyDataSetChanged != null) ? OnNotifyDataSetChanged : NotifyDataSetChanged;
            methodToExecute.Invoke();
            data.EventData.TypedEventData.HasOverride = hasOverrideNotifyDataSetChanged;
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#notifyDataSetChanged()"/>
        /// </summary>
        public virtual void NotifyDataSetChanged()
        {
            hasOverrideNotifyDataSetChanged = false;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#notifyDataSetInvalidated()"/>
        /// </summary>
        /// <remarks>If <see cref="OnNotifyDataSetInvalidated"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action OnNotifyDataSetInvalidated { get; set; } = null;
        
        bool hasOverrideNotifyDataSetInvalidated = true;
        void NotifyDataSetInvalidatedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideNotifyDataSetInvalidated = true;
            var methodToExecute = (OnNotifyDataSetInvalidated != null) ? OnNotifyDataSetInvalidated : NotifyDataSetInvalidated;
            methodToExecute.Invoke();
            data.EventData.TypedEventData.HasOverride = hasOverrideNotifyDataSetInvalidated;
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#notifyDataSetInvalidated()"/>
        /// </summary>
        public virtual void NotifyDataSetInvalidated()
        {
            hasOverrideNotifyDataSetInvalidated = false;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#onGroupCollapsed(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnGroupCollapsed"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<int> OnOnGroupCollapsed { get; set; } = null;
        
        bool hasOverrideOnGroupCollapsed = true;
        void OnGroupCollapsedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideOnGroupCollapsed = true;
            var methodToExecute = (OnOnGroupCollapsed != null) ? OnOnGroupCollapsed : OnGroupCollapsed;
            methodToExecute.Invoke(data.EventData.GetAt<int>(0));
            data.EventData.TypedEventData.HasOverride = hasOverrideOnGroupCollapsed;
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#onGroupCollapsed(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public virtual void OnGroupCollapsed(int arg0)
        {
            hasOverrideOnGroupCollapsed = false;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#onGroupExpanded(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnGroupExpanded"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<int> OnOnGroupExpanded { get; set; } = null;
        
        bool hasOverrideOnGroupExpanded = true;
        void OnGroupExpandedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideOnGroupExpanded = true;
            var methodToExecute = (OnOnGroupExpanded != null) ? OnOnGroupExpanded : OnGroupExpanded;
            methodToExecute.Invoke(data.EventData.GetAt<int>(0));
            data.EventData.TypedEventData.HasOverride = hasOverrideOnGroupExpanded;
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#onGroupExpanded(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public virtual void OnGroupExpanded(int arg0)
        {
            hasOverrideOnGroupExpanded = false;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#registerDataSetObserver(android.database.DataSetObserver)"/>
        /// </summary>
        /// <remarks>If <see cref="OnRegisterDataSetObserver"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<Android.Database.DataSetObserver> OnRegisterDataSetObserver { get; set; } = null;
        
        bool hasOverrideRegisterDataSetObserver = true;
        void RegisterDataSetObserverEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideRegisterDataSetObserver = true;
            var methodToExecute = (OnRegisterDataSetObserver != null) ? OnRegisterDataSetObserver : RegisterDataSetObserver;
            methodToExecute.Invoke(data.EventData.GetAt<Android.Database.DataSetObserver>(0));
            data.EventData.TypedEventData.HasOverride = hasOverrideRegisterDataSetObserver;
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#registerDataSetObserver(android.database.DataSetObserver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.DataSetObserver"/></param>
        public virtual void RegisterDataSetObserver(Android.Database.DataSetObserver arg0)
        {
            hasOverrideRegisterDataSetObserver = false;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#unregisterDataSetObserver(android.database.DataSetObserver)"/>
        /// </summary>
        /// <remarks>If <see cref="OnUnregisterDataSetObserver"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<Android.Database.DataSetObserver> OnUnregisterDataSetObserver { get; set; } = null;
        
        bool hasOverrideUnregisterDataSetObserver = true;
        void UnregisterDataSetObserverEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideUnregisterDataSetObserver = true;
            var methodToExecute = (OnUnregisterDataSetObserver != null) ? OnUnregisterDataSetObserver : UnregisterDataSetObserver;
            methodToExecute.Invoke(data.EventData.GetAt<Android.Database.DataSetObserver>(0));
            data.EventData.TypedEventData.HasOverride = hasOverrideUnregisterDataSetObserver;
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#unregisterDataSetObserver(android.database.DataSetObserver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.DataSetObserver"/></param>
        public virtual void UnregisterDataSetObserver(Android.Database.DataSetObserver arg0)
        {
            hasOverrideUnregisterDataSetObserver = false;
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion

    #region BaseExpandableListAdapterDirect implementation
    public partial class BaseExpandableListAdapterDirect : Android.Widget.IExpandableListAdapter, Android.Widget.IHeterogeneousExpandableList
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="Android.View.View"/></param>
        /// <param name="arg4"><see cref="Android.View.ViewGroup"/></param>
        /// <returns><see cref="Android.View.View"/></returns>
        public override Android.View.View GetChildView(int arg0, int arg1, bool arg2, Android.View.View arg3, Android.View.ViewGroup arg4)
        {
            return IExecute<Android.View.View>("getChildView", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupView(int,boolean,android.view.View,android.view.ViewGroup)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Android.View.View"/></param>
        /// <param name="arg3"><see cref="Android.View.ViewGroup"/></param>
        /// <returns><see cref="Android.View.View"/></returns>
        public override Android.View.View GetGroupView(int arg0, bool arg1, Android.View.View arg2, Android.View.ViewGroup arg3)
        {
            return IExecute<Android.View.View>("getGroupView", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#hasStableIds()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool HasStableIds()
        {
            return IExecute<bool>("hasStableIds");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#isChildSelectable(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public override bool IsChildSelectable(int arg0, int arg1)
        {
            return IExecute<bool>("isChildSelectable", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildrenCount(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public override int GetChildrenCount(int arg0)
        {
            return IExecute<int>("getChildrenCount", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public override int GetGroupCount()
        {
            return IExecute<int>("getGroupCount");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChild(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public override object GetChild(int arg0, int arg1)
        {
            return IExecute("getChild", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroup(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public override object GetGroup(int arg0)
        {
            return IExecute("getGroup", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildId(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public override long GetChildId(int arg0, int arg1)
        {
            return IExecute<long>("getChildId", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupId(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public override long GetGroupId(int arg0)
        {
            return IExecute<long>("getGroupId", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#areAllItemsEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool AreAllItemsEnabled()
        {
            return IExecuteWithSignature<bool>("areAllItemsEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#isEmpty()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool IsEmpty()
        {
            return IExecuteWithSignature<bool>("isEmpty", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getChildType(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public override int GetChildType(int arg0, int arg1)
        {
            return IExecute<int>("getChildType", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getChildTypeCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public override int GetChildTypeCount()
        {
            return IExecuteWithSignature<int>("getChildTypeCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getGroupType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public override int GetGroupType(int arg0)
        {
            return IExecuteWithSignature<int>("getGroupType", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getGroupTypeCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public override int GetGroupTypeCount()
        {
            return IExecuteWithSignature<int>("getGroupTypeCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getCombinedChildId(long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public override long GetCombinedChildId(long arg0, long arg1)
        {
            return IExecute<long>("getCombinedChildId", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#getCombinedGroupId(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public override long GetCombinedGroupId(long arg0)
        {
            return IExecuteWithSignature<long>("getCombinedGroupId", "(J)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#notifyDataSetChanged()"/>
        /// </summary>
        public override void NotifyDataSetChanged()
        {
            IExecuteWithSignature("notifyDataSetChanged", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#notifyDataSetInvalidated()"/>
        /// </summary>
        public override void NotifyDataSetInvalidated()
        {
            IExecuteWithSignature("notifyDataSetInvalidated", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#onGroupCollapsed(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public override void OnGroupCollapsed(int arg0)
        {
            IExecuteWithSignature("onGroupCollapsed", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#onGroupExpanded(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public override void OnGroupExpanded(int arg0)
        {
            IExecuteWithSignature("onGroupExpanded", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#registerDataSetObserver(android.database.DataSetObserver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.DataSetObserver"/></param>
        public override void RegisterDataSetObserver(Android.Database.DataSetObserver arg0)
        {
            IExecuteWithSignature("registerDataSetObserver", "(Landroid/database/DataSetObserver;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/BaseExpandableListAdapter.html#unregisterDataSetObserver(android.database.DataSetObserver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.DataSetObserver"/></param>
        public override void UnregisterDataSetObserver(Android.Database.DataSetObserver arg0)
        {
            IExecuteWithSignature("unregisterDataSetObserver", "(Landroid/database/DataSetObserver;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Window
{
    #region BackEvent declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/window/BackEvent.html"/>
    /// </summary>
    public partial class BackEvent : MASES.JCOBridge.C2JBridge.JVMBridgeBase<BackEvent>
    {
        const string _bridgeClassName = "android.window.BackEvent";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public BackEvent() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public BackEvent(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region BackEvent implementation
    public partial class BackEvent
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/window/BackEvent.html#%3Cinit%3E(float,float,float,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public BackEvent(float arg0, float arg1, float arg2, int arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/window/BackEvent.html#EDGE_LEFT"/>
        /// </summary>
        public static int EDGE_LEFT { get { if (!_EDGE_LEFTReady) { _EDGE_LEFTContent = SGetField<int>(LocalBridgeClazz, "EDGE_LEFT"); _EDGE_LEFTReady = true; } return _EDGE_LEFTContent; } }
        private static int _EDGE_LEFTContent = default;
        private static bool _EDGE_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/window/BackEvent.html#EDGE_RIGHT"/>
        /// </summary>
        public static int EDGE_RIGHT { get { if (!_EDGE_RIGHTReady) { _EDGE_RIGHTContent = SGetField<int>(LocalBridgeClazz, "EDGE_RIGHT"); _EDGE_RIGHTReady = true; } return _EDGE_RIGHTContent; } }
        private static int _EDGE_RIGHTContent = default;
        private static bool _EDGE_RIGHTReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/window/BackEvent.html#getProgress()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetProgress()
        {
            return IExecuteWithSignature<float>("getProgress", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/window/BackEvent.html#getTouchX()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetTouchX()
        {
            return IExecuteWithSignature<float>("getTouchX", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/window/BackEvent.html#getTouchY()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetTouchY()
        {
            return IExecuteWithSignature<float>("getTouchY", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/window/BackEvent.html#getSwipeEdge()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSwipeEdge()
        {
            return IExecuteWithSignature<int>("getSwipeEdge", "()I");
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Text
{
    #region TextUtils declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/text/TextUtils.html"/>
    /// </summary>
    public partial class TextUtils : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TextUtils>
    {
        const string _bridgeClassName = "android.text.TextUtils";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public TextUtils() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public TextUtils(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region EllipsizeCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.EllipsizeCallback.html"/>
        /// </summary>
        public partial class EllipsizeCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<EllipsizeCallback>
        {
            const string _bridgeClassName = "android.text.TextUtils$EllipsizeCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("EllipsizeCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public EllipsizeCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("EllipsizeCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public EllipsizeCallback(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region SimpleStringSplitter declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.SimpleStringSplitter.html"/>
        /// </summary>
        public partial class SimpleStringSplitter : Java.Util.Iterator<Java.Lang.String>
        {
            const string _bridgeClassName = "android.text.TextUtils$SimpleStringSplitter";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public SimpleStringSplitter() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public SimpleStringSplitter(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region StringSplitter declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.StringSplitter.html"/>
        /// </summary>
        public partial class StringSplitter : Java.Lang.Iterable<Java.Lang.String>
        {
            const string _bridgeClassName = "android.text.TextUtils$StringSplitter";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("StringSplitter class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public StringSplitter() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("StringSplitter class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public StringSplitter(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region TruncateAt declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.TruncateAt.html"/>
        /// </summary>
        public partial class TruncateAt : Java.Lang.Enum<Android.Text.TextUtils.TruncateAt>
        {
            const string _bridgeClassName = "android.text.TextUtils$TruncateAt";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TruncateAt() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TruncateAt(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region TextUtils implementation
    public partial class TextUtils
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#CHAR_SEQUENCE_CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CHAR_SEQUENCE_CREATOR { get { if (!_CHAR_SEQUENCE_CREATORReady) { _CHAR_SEQUENCE_CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CHAR_SEQUENCE_CREATOR"); _CHAR_SEQUENCE_CREATORReady = true; } return _CHAR_SEQUENCE_CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CHAR_SEQUENCE_CREATORContent = default;
        private static bool _CHAR_SEQUENCE_CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#CAP_MODE_CHARACTERS"/>
        /// </summary>
        public static int CAP_MODE_CHARACTERS { get { if (!_CAP_MODE_CHARACTERSReady) { _CAP_MODE_CHARACTERSContent = SGetField<int>(LocalBridgeClazz, "CAP_MODE_CHARACTERS"); _CAP_MODE_CHARACTERSReady = true; } return _CAP_MODE_CHARACTERSContent; } }
        private static int _CAP_MODE_CHARACTERSContent = default;
        private static bool _CAP_MODE_CHARACTERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#CAP_MODE_SENTENCES"/>
        /// </summary>
        public static int CAP_MODE_SENTENCES { get { if (!_CAP_MODE_SENTENCESReady) { _CAP_MODE_SENTENCESContent = SGetField<int>(LocalBridgeClazz, "CAP_MODE_SENTENCES"); _CAP_MODE_SENTENCESReady = true; } return _CAP_MODE_SENTENCESContent; } }
        private static int _CAP_MODE_SENTENCESContent = default;
        private static bool _CAP_MODE_SENTENCESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#CAP_MODE_WORDS"/>
        /// </summary>
        public static int CAP_MODE_WORDS { get { if (!_CAP_MODE_WORDSReady) { _CAP_MODE_WORDSContent = SGetField<int>(LocalBridgeClazz, "CAP_MODE_WORDS"); _CAP_MODE_WORDSReady = true; } return _CAP_MODE_WORDSContent; } }
        private static int _CAP_MODE_WORDSContent = default;
        private static bool _CAP_MODE_WORDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#SAFE_STRING_FLAG_FIRST_LINE"/>
        /// </summary>
        public static int SAFE_STRING_FLAG_FIRST_LINE { get { if (!_SAFE_STRING_FLAG_FIRST_LINEReady) { _SAFE_STRING_FLAG_FIRST_LINEContent = SGetField<int>(LocalBridgeClazz, "SAFE_STRING_FLAG_FIRST_LINE"); _SAFE_STRING_FLAG_FIRST_LINEReady = true; } return _SAFE_STRING_FLAG_FIRST_LINEContent; } }
        private static int _SAFE_STRING_FLAG_FIRST_LINEContent = default;
        private static bool _SAFE_STRING_FLAG_FIRST_LINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#SAFE_STRING_FLAG_SINGLE_LINE"/>
        /// </summary>
        public static int SAFE_STRING_FLAG_SINGLE_LINE { get { if (!_SAFE_STRING_FLAG_SINGLE_LINEReady) { _SAFE_STRING_FLAG_SINGLE_LINEContent = SGetField<int>(LocalBridgeClazz, "SAFE_STRING_FLAG_SINGLE_LINE"); _SAFE_STRING_FLAG_SINGLE_LINEReady = true; } return _SAFE_STRING_FLAG_SINGLE_LINEContent; } }
        private static int _SAFE_STRING_FLAG_SINGLE_LINEContent = default;
        private static bool _SAFE_STRING_FLAG_SINGLE_LINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#SAFE_STRING_FLAG_TRIM"/>
        /// </summary>
        public static int SAFE_STRING_FLAG_TRIM { get { if (!_SAFE_STRING_FLAG_TRIMReady) { _SAFE_STRING_FLAG_TRIMContent = SGetField<int>(LocalBridgeClazz, "SAFE_STRING_FLAG_TRIM"); _SAFE_STRING_FLAG_TRIMReady = true; } return _SAFE_STRING_FLAG_TRIMContent; } }
        private static int _SAFE_STRING_FLAG_TRIMContent = default;
        private static bool _SAFE_STRING_FLAG_TRIMReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#equals(java.lang.CharSequence,java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool Equals(Java.Lang.CharSequence arg0, Java.Lang.CharSequence arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "equals", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#isDigitsOnly(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsDigitsOnly(Java.Lang.CharSequence arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isDigitsOnly", "(Ljava/lang/CharSequence;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#isEmpty(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsEmpty(Java.Lang.CharSequence arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isEmpty", "(Ljava/lang/CharSequence;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#isGraphic(char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public static bool IsGraphic(char arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isGraphic", "(C)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#isGraphic(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsGraphic(Java.Lang.CharSequence arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isGraphic", "(Ljava/lang/CharSequence;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#regionMatches(java.lang.CharSequence,int,java.lang.CharSequence,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool RegionMatches(Java.Lang.CharSequence arg0, int arg1, Java.Lang.CharSequence arg2, int arg3, int arg4)
        {
            return SExecute<bool>(LocalBridgeClazz, "regionMatches", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#getCapsMode(java.lang.CharSequence,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetCapsMode(Java.Lang.CharSequence arg0, int arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "getCapsMode", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#getLayoutDirectionFromLocale(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetLayoutDirectionFromLocale(Java.Util.Locale arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getLayoutDirectionFromLocale", "(Ljava/util/Locale;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#getOffsetAfter(java.lang.CharSequence,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetOffsetAfter(Java.Lang.CharSequence arg0, int arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "getOffsetAfter", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#getOffsetBefore(java.lang.CharSequence,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetOffsetBefore(Java.Lang.CharSequence arg0, int arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "getOffsetBefore", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#getTrimmedLength(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetTrimmedLength(Java.Lang.CharSequence arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getTrimmedLength", "(Ljava/lang/CharSequence;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#indexOf(java.lang.CharSequence,char,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="char"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int IndexOf(Java.Lang.CharSequence arg0, char arg1, int arg2, int arg3)
        {
            return SExecute<int>(LocalBridgeClazz, "indexOf", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#indexOf(java.lang.CharSequence,char,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="char"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int IndexOf(Java.Lang.CharSequence arg0, char arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "indexOf", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#indexOf(java.lang.CharSequence,char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="char"/></param>
        /// <returns><see cref="int"/></returns>
        public static int IndexOf(Java.Lang.CharSequence arg0, char arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "indexOf", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int IndexOf(Java.Lang.CharSequence arg0, Java.Lang.CharSequence arg1, int arg2, int arg3)
        {
            return SExecute<int>(LocalBridgeClazz, "indexOf", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#indexOf(java.lang.CharSequence,java.lang.CharSequence,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int IndexOf(Java.Lang.CharSequence arg0, Java.Lang.CharSequence arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "indexOf", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#indexOf(java.lang.CharSequence,java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        /// <returns><see cref="int"/></returns>
        public static int IndexOf(Java.Lang.CharSequence arg0, Java.Lang.CharSequence arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "indexOf", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#lastIndexOf(java.lang.CharSequence,char,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="char"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int LastIndexOf(Java.Lang.CharSequence arg0, char arg1, int arg2, int arg3)
        {
            return SExecute<int>(LocalBridgeClazz, "lastIndexOf", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#lastIndexOf(java.lang.CharSequence,char,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="char"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int LastIndexOf(Java.Lang.CharSequence arg0, char arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "lastIndexOf", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#lastIndexOf(java.lang.CharSequence,char)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="char"/></param>
        /// <returns><see cref="int"/></returns>
        public static int LastIndexOf(Java.Lang.CharSequence arg0, char arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "lastIndexOf", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#commaEllipsize(java.lang.CharSequence,android.text.TextPaint,float,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Android.Text.TextPaint"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        [global::System.Obsolete()]
        public static Java.Lang.CharSequence CommaEllipsize(Java.Lang.CharSequence arg0, Android.Text.TextPaint arg1, float arg2, Java.Lang.String arg3, Java.Lang.String arg4)
        {
            return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "commaEllipsize", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#concat(java.lang.CharSequence[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public static Java.Lang.CharSequence Concat(params Java.Lang.CharSequence[] arg0)
        {
            if (arg0.Length == 0) return SExecuteWithSignature<Java.Lang.CharSequence>(LocalBridgeClazz, "concat", "([Ljava/lang/CharSequence;)Ljava/lang/CharSequence;"); else return SExecuteWithSignature<Java.Lang.CharSequence>(LocalBridgeClazz, "concat", "([Ljava/lang/CharSequence;)Ljava/lang/CharSequence;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils.TruncateAt,boolean,android.text.TextUtils.EllipsizeCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Android.Text.TextPaint"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="Android.Text.TextUtils.TruncateAt"/></param>
        /// <param name="arg4"><see cref="bool"/></param>
        /// <param name="arg5"><see cref="Android.Text.TextUtils.EllipsizeCallback"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public static Java.Lang.CharSequence Ellipsize(Java.Lang.CharSequence arg0, Android.Text.TextPaint arg1, float arg2, Android.Text.TextUtils.TruncateAt arg3, bool arg4, Android.Text.TextUtils.EllipsizeCallback arg5)
        {
            return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "ellipsize", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils.TruncateAt)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Android.Text.TextPaint"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="Android.Text.TextUtils.TruncateAt"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public static Java.Lang.CharSequence Ellipsize(Java.Lang.CharSequence arg0, Android.Text.TextPaint arg1, float arg2, Android.Text.TextUtils.TruncateAt arg3)
        {
            return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "ellipsize", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#expandTemplate(java.lang.CharSequence,java.lang.CharSequence[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public static Java.Lang.CharSequence ExpandTemplate(Java.Lang.CharSequence arg0, params Java.Lang.CharSequence[] arg1)
        {
            if (arg1.Length == 0) return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "expandTemplate", arg0); else return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "expandTemplate", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#getReverse(java.lang.CharSequence,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        [global::System.Obsolete()]
        public static Java.Lang.CharSequence GetReverse(Java.Lang.CharSequence arg0, int arg1, int arg2)
        {
            return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "getReverse", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#listEllipsize(android.content.Context,java.util.List,java.lang.String,android.text.TextPaint,float,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Android.Text.TextPaint"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public static Java.Lang.CharSequence ListEllipsize(Android.Content.Context arg0, Java.Util.List<Java.Lang.CharSequence> arg1, Java.Lang.String arg2, Android.Text.TextPaint arg3, float arg4, int arg5)
        {
            return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "listEllipsize", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#makeSafeForPresentation(java.lang.String,int,float,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public static Java.Lang.CharSequence MakeSafeForPresentation(Java.Lang.String arg0, int arg1, float arg2, int arg3)
        {
            return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "makeSafeForPresentation", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#replace(java.lang.CharSequence,java.lang.String[],java.lang.CharSequence[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public static Java.Lang.CharSequence Replace(Java.Lang.CharSequence arg0, Java.Lang.String[] arg1, Java.Lang.CharSequence[] arg2)
        {
            return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "replace", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#stringOrSpannedString(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public static Java.Lang.CharSequence StringOrSpannedString(Java.Lang.CharSequence arg0)
        {
            return SExecuteWithSignature<Java.Lang.CharSequence>(LocalBridgeClazz, "stringOrSpannedString", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#htmlEncode(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String HtmlEncode(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "htmlEncode", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#join(java.lang.CharSequence,java.lang.Iterable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Iterable"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String Join(Java.Lang.CharSequence arg0, Java.Lang.Iterable arg1)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "join", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#join(java.lang.CharSequence,java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String Join(Java.Lang.CharSequence arg0, object[] arg1)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "join", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#substring(java.lang.CharSequence,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String Substring(Java.Lang.CharSequence arg0, int arg1, int arg2)
        {
            return SExecute<Java.Lang.String>(LocalBridgeClazz, "substring", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#split(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String[] Split(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return SExecuteArray<Java.Lang.String>(LocalBridgeClazz, "split", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#split(java.lang.String,java.util.regex.Pattern)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.Regex.Pattern"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String[] Split(Java.Lang.String arg0, Java.Util.Regex.Pattern arg1)
        {
            return SExecuteArray<Java.Lang.String>(LocalBridgeClazz, "split", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Spanned"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Lang.Class"/></param>
        /// <param name="arg4"><see cref="Android.Text.Spannable"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public static void CopySpansFrom(Android.Text.Spanned arg0, int arg1, int arg2, Java.Lang.Class arg3, Android.Text.Spannable arg4, int arg5)
        {
            SExecute(LocalBridgeClazz, "copySpansFrom", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#dumpSpans(java.lang.CharSequence,android.util.Printer,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Android.Util.Printer"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        public static void DumpSpans(Java.Lang.CharSequence arg0, Android.Util.Printer arg1, Java.Lang.String arg2)
        {
            SExecute(LocalBridgeClazz, "dumpSpans", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#getChars(java.lang.CharSequence,int,int,char[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="char"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public static void GetChars(Java.Lang.CharSequence arg0, int arg1, int arg2, char[] arg3, int arg4)
        {
            SExecute(LocalBridgeClazz, "getChars", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/text/TextUtils.html#writeToParcel(java.lang.CharSequence,android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public static void WriteToParcel(Java.Lang.CharSequence arg0, Android.Os.Parcel arg1, int arg2)
        {
            SExecute(LocalBridgeClazz, "writeToParcel", arg0, arg1, arg2);
        }
    
        #endregion
    
        #region Instance methods
    
        #endregion
    
        #region Nested classes
        #region EllipsizeCallback implementation
        public partial class EllipsizeCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/TextUtils.EllipsizeCallback.html#ellipsized(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void Ellipsized(int arg0, int arg1)
            {
                IExecute("ellipsized", arg0, arg1);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region SimpleStringSplitter implementation
        public partial class SimpleStringSplitter : Java.Util.IIterator<Java.Lang.String>
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/TextUtils.SimpleStringSplitter.html#%3Cinit%3E(char)"/>
            /// </summary>
            /// <param name="arg0"><see cref="char"/></param>
            public SimpleStringSplitter(char arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/TextUtils.SimpleStringSplitter.html#hasNext()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool HasNext()
            {
                return IExecuteWithSignature<bool>("hasNext", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/TextUtils.SimpleStringSplitter.html#next()"/>
            /// </summary>
            /// <returns><see cref="object"/></returns>
            public object Next()
            {
                return IExecuteWithSignature("next", "()Ljava/lang/Object;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/TextUtils.SimpleStringSplitter.html#iterator()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Iterator"/></returns>
            public Java.Util.Iterator<Java.Lang.String> Iterator()
            {
                return IExecuteWithSignature<Java.Util.Iterator<Java.Lang.String>>("iterator", "()Ljava/util/Iterator;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/TextUtils.SimpleStringSplitter.html#remove()"/>
            /// </summary>
            public void Remove()
            {
                IExecuteWithSignature("remove", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/TextUtils.SimpleStringSplitter.html#setString(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public void SetString(Java.Lang.String arg0)
            {
                IExecuteWithSignature("setString", "(Ljava/lang/String;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region StringSplitter implementation
        public partial class StringSplitter
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/TextUtils.StringSplitter.html#setString(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public void SetString(Java.Lang.String arg0)
            {
                IExecuteWithSignature("setString", "(Ljava/lang/String;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region TruncateAt implementation
        public partial class TruncateAt
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/TextUtils.TruncateAt.html#END"/>
            /// </summary>
            public static Android.Text.TextUtils.TruncateAt END { get { if (!_ENDReady) { _ENDContent = SGetField<Android.Text.TextUtils.TruncateAt>(LocalBridgeClazz, "END"); _ENDReady = true; } return _ENDContent; } }
            private static Android.Text.TextUtils.TruncateAt _ENDContent = default;
            private static bool _ENDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/TextUtils.TruncateAt.html#MARQUEE"/>
            /// </summary>
            public static Android.Text.TextUtils.TruncateAt MARQUEE { get { if (!_MARQUEEReady) { _MARQUEEContent = SGetField<Android.Text.TextUtils.TruncateAt>(LocalBridgeClazz, "MARQUEE"); _MARQUEEReady = true; } return _MARQUEEContent; } }
            private static Android.Text.TextUtils.TruncateAt _MARQUEEContent = default;
            private static bool _MARQUEEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/TextUtils.TruncateAt.html#MIDDLE"/>
            /// </summary>
            public static Android.Text.TextUtils.TruncateAt MIDDLE { get { if (!_MIDDLEReady) { _MIDDLEContent = SGetField<Android.Text.TextUtils.TruncateAt>(LocalBridgeClazz, "MIDDLE"); _MIDDLEReady = true; } return _MIDDLEContent; } }
            private static Android.Text.TextUtils.TruncateAt _MIDDLEContent = default;
            private static bool _MIDDLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/TextUtils.TruncateAt.html#START"/>
            /// </summary>
            public static Android.Text.TextUtils.TruncateAt START { get { if (!_STARTReady) { _STARTContent = SGetField<Android.Text.TextUtils.TruncateAt>(LocalBridgeClazz, "START"); _STARTReady = true; } return _STARTContent; } }
            private static Android.Text.TextUtils.TruncateAt _STARTContent = default;
            private static bool _STARTReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/TextUtils.TruncateAt.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Text.TextUtils.TruncateAt"/></returns>
            public static Android.Text.TextUtils.TruncateAt ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Text.TextUtils.TruncateAt>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/text/TextUtils$TruncateAt;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/text/TextUtils.TruncateAt.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Text.TextUtils.TruncateAt"/></returns>
            public static Android.Text.TextUtils.TruncateAt[] Values()
            {
                return SExecuteWithSignatureArray<Android.Text.TextUtils.TruncateAt>(LocalBridgeClazz, "values", "()[Landroid/text/TextUtils$TruncateAt;");
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
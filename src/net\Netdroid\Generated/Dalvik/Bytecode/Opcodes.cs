/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Dalvik.Bytecode
{
    #region Opcodes declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html"/>
    /// </summary>
    public partial class Opcodes : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Opcodes>
    {
        const string _bridgeClassName = "dalvik.bytecode.Opcodes";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("Opcodes class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Opcodes() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("Opcodes class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public Opcodes(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region IOpcodes
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IOpcodes
    {
        #region Instance methods
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion

    #region Opcodes implementation
    public partial class Opcodes : Dalvik.Bytecode.IOpcodes
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_ADD_DOUBLE"/>
        /// </summary>
        public static int OP_ADD_DOUBLE { get { if (!_OP_ADD_DOUBLEReady) { _OP_ADD_DOUBLEContent = SGetField<int>(LocalBridgeClazz, "OP_ADD_DOUBLE"); _OP_ADD_DOUBLEReady = true; } return _OP_ADD_DOUBLEContent; } }
        private static int _OP_ADD_DOUBLEContent = default;
        private static bool _OP_ADD_DOUBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_ADD_DOUBLE_2ADDR"/>
        /// </summary>
        public static int OP_ADD_DOUBLE_2ADDR { get { if (!_OP_ADD_DOUBLE_2ADDRReady) { _OP_ADD_DOUBLE_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_ADD_DOUBLE_2ADDR"); _OP_ADD_DOUBLE_2ADDRReady = true; } return _OP_ADD_DOUBLE_2ADDRContent; } }
        private static int _OP_ADD_DOUBLE_2ADDRContent = default;
        private static bool _OP_ADD_DOUBLE_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_ADD_FLOAT"/>
        /// </summary>
        public static int OP_ADD_FLOAT { get { if (!_OP_ADD_FLOATReady) { _OP_ADD_FLOATContent = SGetField<int>(LocalBridgeClazz, "OP_ADD_FLOAT"); _OP_ADD_FLOATReady = true; } return _OP_ADD_FLOATContent; } }
        private static int _OP_ADD_FLOATContent = default;
        private static bool _OP_ADD_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_ADD_FLOAT_2ADDR"/>
        /// </summary>
        public static int OP_ADD_FLOAT_2ADDR { get { if (!_OP_ADD_FLOAT_2ADDRReady) { _OP_ADD_FLOAT_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_ADD_FLOAT_2ADDR"); _OP_ADD_FLOAT_2ADDRReady = true; } return _OP_ADD_FLOAT_2ADDRContent; } }
        private static int _OP_ADD_FLOAT_2ADDRContent = default;
        private static bool _OP_ADD_FLOAT_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_ADD_INT"/>
        /// </summary>
        public static int OP_ADD_INT { get { if (!_OP_ADD_INTReady) { _OP_ADD_INTContent = SGetField<int>(LocalBridgeClazz, "OP_ADD_INT"); _OP_ADD_INTReady = true; } return _OP_ADD_INTContent; } }
        private static int _OP_ADD_INTContent = default;
        private static bool _OP_ADD_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_ADD_INT_2ADDR"/>
        /// </summary>
        public static int OP_ADD_INT_2ADDR { get { if (!_OP_ADD_INT_2ADDRReady) { _OP_ADD_INT_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_ADD_INT_2ADDR"); _OP_ADD_INT_2ADDRReady = true; } return _OP_ADD_INT_2ADDRContent; } }
        private static int _OP_ADD_INT_2ADDRContent = default;
        private static bool _OP_ADD_INT_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_ADD_INT_LIT16"/>
        /// </summary>
        public static int OP_ADD_INT_LIT16 { get { if (!_OP_ADD_INT_LIT16Ready) { _OP_ADD_INT_LIT16Content = SGetField<int>(LocalBridgeClazz, "OP_ADD_INT_LIT16"); _OP_ADD_INT_LIT16Ready = true; } return _OP_ADD_INT_LIT16Content; } }
        private static int _OP_ADD_INT_LIT16Content = default;
        private static bool _OP_ADD_INT_LIT16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_ADD_INT_LIT8"/>
        /// </summary>
        public static int OP_ADD_INT_LIT8 { get { if (!_OP_ADD_INT_LIT8Ready) { _OP_ADD_INT_LIT8Content = SGetField<int>(LocalBridgeClazz, "OP_ADD_INT_LIT8"); _OP_ADD_INT_LIT8Ready = true; } return _OP_ADD_INT_LIT8Content; } }
        private static int _OP_ADD_INT_LIT8Content = default;
        private static bool _OP_ADD_INT_LIT8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_ADD_LONG"/>
        /// </summary>
        public static int OP_ADD_LONG { get { if (!_OP_ADD_LONGReady) { _OP_ADD_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_ADD_LONG"); _OP_ADD_LONGReady = true; } return _OP_ADD_LONGContent; } }
        private static int _OP_ADD_LONGContent = default;
        private static bool _OP_ADD_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_ADD_LONG_2ADDR"/>
        /// </summary>
        public static int OP_ADD_LONG_2ADDR { get { if (!_OP_ADD_LONG_2ADDRReady) { _OP_ADD_LONG_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_ADD_LONG_2ADDR"); _OP_ADD_LONG_2ADDRReady = true; } return _OP_ADD_LONG_2ADDRContent; } }
        private static int _OP_ADD_LONG_2ADDRContent = default;
        private static bool _OP_ADD_LONG_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_AGET"/>
        /// </summary>
        public static int OP_AGET { get { if (!_OP_AGETReady) { _OP_AGETContent = SGetField<int>(LocalBridgeClazz, "OP_AGET"); _OP_AGETReady = true; } return _OP_AGETContent; } }
        private static int _OP_AGETContent = default;
        private static bool _OP_AGETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_AGET_BOOLEAN"/>
        /// </summary>
        public static int OP_AGET_BOOLEAN { get { if (!_OP_AGET_BOOLEANReady) { _OP_AGET_BOOLEANContent = SGetField<int>(LocalBridgeClazz, "OP_AGET_BOOLEAN"); _OP_AGET_BOOLEANReady = true; } return _OP_AGET_BOOLEANContent; } }
        private static int _OP_AGET_BOOLEANContent = default;
        private static bool _OP_AGET_BOOLEANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_AGET_BYTE"/>
        /// </summary>
        public static int OP_AGET_BYTE { get { if (!_OP_AGET_BYTEReady) { _OP_AGET_BYTEContent = SGetField<int>(LocalBridgeClazz, "OP_AGET_BYTE"); _OP_AGET_BYTEReady = true; } return _OP_AGET_BYTEContent; } }
        private static int _OP_AGET_BYTEContent = default;
        private static bool _OP_AGET_BYTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_AGET_CHAR"/>
        /// </summary>
        public static int OP_AGET_CHAR { get { if (!_OP_AGET_CHARReady) { _OP_AGET_CHARContent = SGetField<int>(LocalBridgeClazz, "OP_AGET_CHAR"); _OP_AGET_CHARReady = true; } return _OP_AGET_CHARContent; } }
        private static int _OP_AGET_CHARContent = default;
        private static bool _OP_AGET_CHARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_AGET_OBJECT"/>
        /// </summary>
        public static int OP_AGET_OBJECT { get { if (!_OP_AGET_OBJECTReady) { _OP_AGET_OBJECTContent = SGetField<int>(LocalBridgeClazz, "OP_AGET_OBJECT"); _OP_AGET_OBJECTReady = true; } return _OP_AGET_OBJECTContent; } }
        private static int _OP_AGET_OBJECTContent = default;
        private static bool _OP_AGET_OBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_AGET_SHORT"/>
        /// </summary>
        public static int OP_AGET_SHORT { get { if (!_OP_AGET_SHORTReady) { _OP_AGET_SHORTContent = SGetField<int>(LocalBridgeClazz, "OP_AGET_SHORT"); _OP_AGET_SHORTReady = true; } return _OP_AGET_SHORTContent; } }
        private static int _OP_AGET_SHORTContent = default;
        private static bool _OP_AGET_SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_AGET_WIDE"/>
        /// </summary>
        public static int OP_AGET_WIDE { get { if (!_OP_AGET_WIDEReady) { _OP_AGET_WIDEContent = SGetField<int>(LocalBridgeClazz, "OP_AGET_WIDE"); _OP_AGET_WIDEReady = true; } return _OP_AGET_WIDEContent; } }
        private static int _OP_AGET_WIDEContent = default;
        private static bool _OP_AGET_WIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_AND_INT"/>
        /// </summary>
        public static int OP_AND_INT { get { if (!_OP_AND_INTReady) { _OP_AND_INTContent = SGetField<int>(LocalBridgeClazz, "OP_AND_INT"); _OP_AND_INTReady = true; } return _OP_AND_INTContent; } }
        private static int _OP_AND_INTContent = default;
        private static bool _OP_AND_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_AND_INT_2ADDR"/>
        /// </summary>
        public static int OP_AND_INT_2ADDR { get { if (!_OP_AND_INT_2ADDRReady) { _OP_AND_INT_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_AND_INT_2ADDR"); _OP_AND_INT_2ADDRReady = true; } return _OP_AND_INT_2ADDRContent; } }
        private static int _OP_AND_INT_2ADDRContent = default;
        private static bool _OP_AND_INT_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_AND_INT_LIT16"/>
        /// </summary>
        public static int OP_AND_INT_LIT16 { get { if (!_OP_AND_INT_LIT16Ready) { _OP_AND_INT_LIT16Content = SGetField<int>(LocalBridgeClazz, "OP_AND_INT_LIT16"); _OP_AND_INT_LIT16Ready = true; } return _OP_AND_INT_LIT16Content; } }
        private static int _OP_AND_INT_LIT16Content = default;
        private static bool _OP_AND_INT_LIT16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_AND_INT_LIT8"/>
        /// </summary>
        public static int OP_AND_INT_LIT8 { get { if (!_OP_AND_INT_LIT8Ready) { _OP_AND_INT_LIT8Content = SGetField<int>(LocalBridgeClazz, "OP_AND_INT_LIT8"); _OP_AND_INT_LIT8Ready = true; } return _OP_AND_INT_LIT8Content; } }
        private static int _OP_AND_INT_LIT8Content = default;
        private static bool _OP_AND_INT_LIT8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_AND_LONG"/>
        /// </summary>
        public static int OP_AND_LONG { get { if (!_OP_AND_LONGReady) { _OP_AND_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_AND_LONG"); _OP_AND_LONGReady = true; } return _OP_AND_LONGContent; } }
        private static int _OP_AND_LONGContent = default;
        private static bool _OP_AND_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_AND_LONG_2ADDR"/>
        /// </summary>
        public static int OP_AND_LONG_2ADDR { get { if (!_OP_AND_LONG_2ADDRReady) { _OP_AND_LONG_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_AND_LONG_2ADDR"); _OP_AND_LONG_2ADDRReady = true; } return _OP_AND_LONG_2ADDRContent; } }
        private static int _OP_AND_LONG_2ADDRContent = default;
        private static bool _OP_AND_LONG_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_APUT"/>
        /// </summary>
        public static int OP_APUT { get { if (!_OP_APUTReady) { _OP_APUTContent = SGetField<int>(LocalBridgeClazz, "OP_APUT"); _OP_APUTReady = true; } return _OP_APUTContent; } }
        private static int _OP_APUTContent = default;
        private static bool _OP_APUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_APUT_BOOLEAN"/>
        /// </summary>
        public static int OP_APUT_BOOLEAN { get { if (!_OP_APUT_BOOLEANReady) { _OP_APUT_BOOLEANContent = SGetField<int>(LocalBridgeClazz, "OP_APUT_BOOLEAN"); _OP_APUT_BOOLEANReady = true; } return _OP_APUT_BOOLEANContent; } }
        private static int _OP_APUT_BOOLEANContent = default;
        private static bool _OP_APUT_BOOLEANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_APUT_BYTE"/>
        /// </summary>
        public static int OP_APUT_BYTE { get { if (!_OP_APUT_BYTEReady) { _OP_APUT_BYTEContent = SGetField<int>(LocalBridgeClazz, "OP_APUT_BYTE"); _OP_APUT_BYTEReady = true; } return _OP_APUT_BYTEContent; } }
        private static int _OP_APUT_BYTEContent = default;
        private static bool _OP_APUT_BYTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_APUT_CHAR"/>
        /// </summary>
        public static int OP_APUT_CHAR { get { if (!_OP_APUT_CHARReady) { _OP_APUT_CHARContent = SGetField<int>(LocalBridgeClazz, "OP_APUT_CHAR"); _OP_APUT_CHARReady = true; } return _OP_APUT_CHARContent; } }
        private static int _OP_APUT_CHARContent = default;
        private static bool _OP_APUT_CHARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_APUT_OBJECT"/>
        /// </summary>
        public static int OP_APUT_OBJECT { get { if (!_OP_APUT_OBJECTReady) { _OP_APUT_OBJECTContent = SGetField<int>(LocalBridgeClazz, "OP_APUT_OBJECT"); _OP_APUT_OBJECTReady = true; } return _OP_APUT_OBJECTContent; } }
        private static int _OP_APUT_OBJECTContent = default;
        private static bool _OP_APUT_OBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_APUT_SHORT"/>
        /// </summary>
        public static int OP_APUT_SHORT { get { if (!_OP_APUT_SHORTReady) { _OP_APUT_SHORTContent = SGetField<int>(LocalBridgeClazz, "OP_APUT_SHORT"); _OP_APUT_SHORTReady = true; } return _OP_APUT_SHORTContent; } }
        private static int _OP_APUT_SHORTContent = default;
        private static bool _OP_APUT_SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_APUT_WIDE"/>
        /// </summary>
        public static int OP_APUT_WIDE { get { if (!_OP_APUT_WIDEReady) { _OP_APUT_WIDEContent = SGetField<int>(LocalBridgeClazz, "OP_APUT_WIDE"); _OP_APUT_WIDEReady = true; } return _OP_APUT_WIDEContent; } }
        private static int _OP_APUT_WIDEContent = default;
        private static bool _OP_APUT_WIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_ARRAY_LENGTH"/>
        /// </summary>
        public static int OP_ARRAY_LENGTH { get { if (!_OP_ARRAY_LENGTHReady) { _OP_ARRAY_LENGTHContent = SGetField<int>(LocalBridgeClazz, "OP_ARRAY_LENGTH"); _OP_ARRAY_LENGTHReady = true; } return _OP_ARRAY_LENGTHContent; } }
        private static int _OP_ARRAY_LENGTHContent = default;
        private static bool _OP_ARRAY_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_BREAKPOINT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_BREAKPOINT { get { if (!_OP_BREAKPOINTReady) { _OP_BREAKPOINTContent = SGetField<int>(LocalBridgeClazz, "OP_BREAKPOINT"); _OP_BREAKPOINTReady = true; } return _OP_BREAKPOINTContent; } }
        private static int _OP_BREAKPOINTContent = default;
        private static bool _OP_BREAKPOINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CHECK_CAST"/>
        /// </summary>
        public static int OP_CHECK_CAST { get { if (!_OP_CHECK_CASTReady) { _OP_CHECK_CASTContent = SGetField<int>(LocalBridgeClazz, "OP_CHECK_CAST"); _OP_CHECK_CASTReady = true; } return _OP_CHECK_CASTContent; } }
        private static int _OP_CHECK_CASTContent = default;
        private static bool _OP_CHECK_CASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CHECK_CAST_JUMBO"/>
        /// </summary>
        public static int OP_CHECK_CAST_JUMBO { get { if (!_OP_CHECK_CAST_JUMBOReady) { _OP_CHECK_CAST_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_CHECK_CAST_JUMBO"); _OP_CHECK_CAST_JUMBOReady = true; } return _OP_CHECK_CAST_JUMBOContent; } }
        private static int _OP_CHECK_CAST_JUMBOContent = default;
        private static bool _OP_CHECK_CAST_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CMP_LONG"/>
        /// </summary>
        public static int OP_CMP_LONG { get { if (!_OP_CMP_LONGReady) { _OP_CMP_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_CMP_LONG"); _OP_CMP_LONGReady = true; } return _OP_CMP_LONGContent; } }
        private static int _OP_CMP_LONGContent = default;
        private static bool _OP_CMP_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CMPG_DOUBLE"/>
        /// </summary>
        public static int OP_CMPG_DOUBLE { get { if (!_OP_CMPG_DOUBLEReady) { _OP_CMPG_DOUBLEContent = SGetField<int>(LocalBridgeClazz, "OP_CMPG_DOUBLE"); _OP_CMPG_DOUBLEReady = true; } return _OP_CMPG_DOUBLEContent; } }
        private static int _OP_CMPG_DOUBLEContent = default;
        private static bool _OP_CMPG_DOUBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CMPG_FLOAT"/>
        /// </summary>
        public static int OP_CMPG_FLOAT { get { if (!_OP_CMPG_FLOATReady) { _OP_CMPG_FLOATContent = SGetField<int>(LocalBridgeClazz, "OP_CMPG_FLOAT"); _OP_CMPG_FLOATReady = true; } return _OP_CMPG_FLOATContent; } }
        private static int _OP_CMPG_FLOATContent = default;
        private static bool _OP_CMPG_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CMPL_DOUBLE"/>
        /// </summary>
        public static int OP_CMPL_DOUBLE { get { if (!_OP_CMPL_DOUBLEReady) { _OP_CMPL_DOUBLEContent = SGetField<int>(LocalBridgeClazz, "OP_CMPL_DOUBLE"); _OP_CMPL_DOUBLEReady = true; } return _OP_CMPL_DOUBLEContent; } }
        private static int _OP_CMPL_DOUBLEContent = default;
        private static bool _OP_CMPL_DOUBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CMPL_FLOAT"/>
        /// </summary>
        public static int OP_CMPL_FLOAT { get { if (!_OP_CMPL_FLOATReady) { _OP_CMPL_FLOATContent = SGetField<int>(LocalBridgeClazz, "OP_CMPL_FLOAT"); _OP_CMPL_FLOATReady = true; } return _OP_CMPL_FLOATContent; } }
        private static int _OP_CMPL_FLOATContent = default;
        private static bool _OP_CMPL_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CONST"/>
        /// </summary>
        public static int OP_CONST { get { if (!_OP_CONSTReady) { _OP_CONSTContent = SGetField<int>(LocalBridgeClazz, "OP_CONST"); _OP_CONSTReady = true; } return _OP_CONSTContent; } }
        private static int _OP_CONSTContent = default;
        private static bool _OP_CONSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CONST_16"/>
        /// </summary>
        public static int OP_CONST_16 { get { if (!_OP_CONST_16Ready) { _OP_CONST_16Content = SGetField<int>(LocalBridgeClazz, "OP_CONST_16"); _OP_CONST_16Ready = true; } return _OP_CONST_16Content; } }
        private static int _OP_CONST_16Content = default;
        private static bool _OP_CONST_16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CONST_4"/>
        /// </summary>
        public static int OP_CONST_4 { get { if (!_OP_CONST_4Ready) { _OP_CONST_4Content = SGetField<int>(LocalBridgeClazz, "OP_CONST_4"); _OP_CONST_4Ready = true; } return _OP_CONST_4Content; } }
        private static int _OP_CONST_4Content = default;
        private static bool _OP_CONST_4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CONST_CLASS"/>
        /// </summary>
        public static int OP_CONST_CLASS { get { if (!_OP_CONST_CLASSReady) { _OP_CONST_CLASSContent = SGetField<int>(LocalBridgeClazz, "OP_CONST_CLASS"); _OP_CONST_CLASSReady = true; } return _OP_CONST_CLASSContent; } }
        private static int _OP_CONST_CLASSContent = default;
        private static bool _OP_CONST_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CONST_CLASS_JUMBO"/>
        /// </summary>
        public static int OP_CONST_CLASS_JUMBO { get { if (!_OP_CONST_CLASS_JUMBOReady) { _OP_CONST_CLASS_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_CONST_CLASS_JUMBO"); _OP_CONST_CLASS_JUMBOReady = true; } return _OP_CONST_CLASS_JUMBOContent; } }
        private static int _OP_CONST_CLASS_JUMBOContent = default;
        private static bool _OP_CONST_CLASS_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CONST_HIGH16"/>
        /// </summary>
        public static int OP_CONST_HIGH16 { get { if (!_OP_CONST_HIGH16Ready) { _OP_CONST_HIGH16Content = SGetField<int>(LocalBridgeClazz, "OP_CONST_HIGH16"); _OP_CONST_HIGH16Ready = true; } return _OP_CONST_HIGH16Content; } }
        private static int _OP_CONST_HIGH16Content = default;
        private static bool _OP_CONST_HIGH16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CONST_METHOD_HANDLE"/>
        /// </summary>
        public static int OP_CONST_METHOD_HANDLE { get { if (!_OP_CONST_METHOD_HANDLEReady) { _OP_CONST_METHOD_HANDLEContent = SGetField<int>(LocalBridgeClazz, "OP_CONST_METHOD_HANDLE"); _OP_CONST_METHOD_HANDLEReady = true; } return _OP_CONST_METHOD_HANDLEContent; } }
        private static int _OP_CONST_METHOD_HANDLEContent = default;
        private static bool _OP_CONST_METHOD_HANDLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CONST_METHOD_TYPE"/>
        /// </summary>
        public static int OP_CONST_METHOD_TYPE { get { if (!_OP_CONST_METHOD_TYPEReady) { _OP_CONST_METHOD_TYPEContent = SGetField<int>(LocalBridgeClazz, "OP_CONST_METHOD_TYPE"); _OP_CONST_METHOD_TYPEReady = true; } return _OP_CONST_METHOD_TYPEContent; } }
        private static int _OP_CONST_METHOD_TYPEContent = default;
        private static bool _OP_CONST_METHOD_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CONST_STRING"/>
        /// </summary>
        public static int OP_CONST_STRING { get { if (!_OP_CONST_STRINGReady) { _OP_CONST_STRINGContent = SGetField<int>(LocalBridgeClazz, "OP_CONST_STRING"); _OP_CONST_STRINGReady = true; } return _OP_CONST_STRINGContent; } }
        private static int _OP_CONST_STRINGContent = default;
        private static bool _OP_CONST_STRINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CONST_STRING_JUMBO"/>
        /// </summary>
        public static int OP_CONST_STRING_JUMBO { get { if (!_OP_CONST_STRING_JUMBOReady) { _OP_CONST_STRING_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_CONST_STRING_JUMBO"); _OP_CONST_STRING_JUMBOReady = true; } return _OP_CONST_STRING_JUMBOContent; } }
        private static int _OP_CONST_STRING_JUMBOContent = default;
        private static bool _OP_CONST_STRING_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CONST_WIDE"/>
        /// </summary>
        public static int OP_CONST_WIDE { get { if (!_OP_CONST_WIDEReady) { _OP_CONST_WIDEContent = SGetField<int>(LocalBridgeClazz, "OP_CONST_WIDE"); _OP_CONST_WIDEReady = true; } return _OP_CONST_WIDEContent; } }
        private static int _OP_CONST_WIDEContent = default;
        private static bool _OP_CONST_WIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CONST_WIDE_16"/>
        /// </summary>
        public static int OP_CONST_WIDE_16 { get { if (!_OP_CONST_WIDE_16Ready) { _OP_CONST_WIDE_16Content = SGetField<int>(LocalBridgeClazz, "OP_CONST_WIDE_16"); _OP_CONST_WIDE_16Ready = true; } return _OP_CONST_WIDE_16Content; } }
        private static int _OP_CONST_WIDE_16Content = default;
        private static bool _OP_CONST_WIDE_16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CONST_WIDE_32"/>
        /// </summary>
        public static int OP_CONST_WIDE_32 { get { if (!_OP_CONST_WIDE_32Ready) { _OP_CONST_WIDE_32Content = SGetField<int>(LocalBridgeClazz, "OP_CONST_WIDE_32"); _OP_CONST_WIDE_32Ready = true; } return _OP_CONST_WIDE_32Content; } }
        private static int _OP_CONST_WIDE_32Content = default;
        private static bool _OP_CONST_WIDE_32Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_CONST_WIDE_HIGH16"/>
        /// </summary>
        public static int OP_CONST_WIDE_HIGH16 { get { if (!_OP_CONST_WIDE_HIGH16Ready) { _OP_CONST_WIDE_HIGH16Content = SGetField<int>(LocalBridgeClazz, "OP_CONST_WIDE_HIGH16"); _OP_CONST_WIDE_HIGH16Ready = true; } return _OP_CONST_WIDE_HIGH16Content; } }
        private static int _OP_CONST_WIDE_HIGH16Content = default;
        private static bool _OP_CONST_WIDE_HIGH16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_DIV_DOUBLE"/>
        /// </summary>
        public static int OP_DIV_DOUBLE { get { if (!_OP_DIV_DOUBLEReady) { _OP_DIV_DOUBLEContent = SGetField<int>(LocalBridgeClazz, "OP_DIV_DOUBLE"); _OP_DIV_DOUBLEReady = true; } return _OP_DIV_DOUBLEContent; } }
        private static int _OP_DIV_DOUBLEContent = default;
        private static bool _OP_DIV_DOUBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_DIV_DOUBLE_2ADDR"/>
        /// </summary>
        public static int OP_DIV_DOUBLE_2ADDR { get { if (!_OP_DIV_DOUBLE_2ADDRReady) { _OP_DIV_DOUBLE_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_DIV_DOUBLE_2ADDR"); _OP_DIV_DOUBLE_2ADDRReady = true; } return _OP_DIV_DOUBLE_2ADDRContent; } }
        private static int _OP_DIV_DOUBLE_2ADDRContent = default;
        private static bool _OP_DIV_DOUBLE_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_DIV_FLOAT"/>
        /// </summary>
        public static int OP_DIV_FLOAT { get { if (!_OP_DIV_FLOATReady) { _OP_DIV_FLOATContent = SGetField<int>(LocalBridgeClazz, "OP_DIV_FLOAT"); _OP_DIV_FLOATReady = true; } return _OP_DIV_FLOATContent; } }
        private static int _OP_DIV_FLOATContent = default;
        private static bool _OP_DIV_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_DIV_FLOAT_2ADDR"/>
        /// </summary>
        public static int OP_DIV_FLOAT_2ADDR { get { if (!_OP_DIV_FLOAT_2ADDRReady) { _OP_DIV_FLOAT_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_DIV_FLOAT_2ADDR"); _OP_DIV_FLOAT_2ADDRReady = true; } return _OP_DIV_FLOAT_2ADDRContent; } }
        private static int _OP_DIV_FLOAT_2ADDRContent = default;
        private static bool _OP_DIV_FLOAT_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_DIV_INT"/>
        /// </summary>
        public static int OP_DIV_INT { get { if (!_OP_DIV_INTReady) { _OP_DIV_INTContent = SGetField<int>(LocalBridgeClazz, "OP_DIV_INT"); _OP_DIV_INTReady = true; } return _OP_DIV_INTContent; } }
        private static int _OP_DIV_INTContent = default;
        private static bool _OP_DIV_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_DIV_INT_2ADDR"/>
        /// </summary>
        public static int OP_DIV_INT_2ADDR { get { if (!_OP_DIV_INT_2ADDRReady) { _OP_DIV_INT_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_DIV_INT_2ADDR"); _OP_DIV_INT_2ADDRReady = true; } return _OP_DIV_INT_2ADDRContent; } }
        private static int _OP_DIV_INT_2ADDRContent = default;
        private static bool _OP_DIV_INT_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_DIV_INT_LIT16"/>
        /// </summary>
        public static int OP_DIV_INT_LIT16 { get { if (!_OP_DIV_INT_LIT16Ready) { _OP_DIV_INT_LIT16Content = SGetField<int>(LocalBridgeClazz, "OP_DIV_INT_LIT16"); _OP_DIV_INT_LIT16Ready = true; } return _OP_DIV_INT_LIT16Content; } }
        private static int _OP_DIV_INT_LIT16Content = default;
        private static bool _OP_DIV_INT_LIT16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_DIV_INT_LIT8"/>
        /// </summary>
        public static int OP_DIV_INT_LIT8 { get { if (!_OP_DIV_INT_LIT8Ready) { _OP_DIV_INT_LIT8Content = SGetField<int>(LocalBridgeClazz, "OP_DIV_INT_LIT8"); _OP_DIV_INT_LIT8Ready = true; } return _OP_DIV_INT_LIT8Content; } }
        private static int _OP_DIV_INT_LIT8Content = default;
        private static bool _OP_DIV_INT_LIT8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_DIV_LONG"/>
        /// </summary>
        public static int OP_DIV_LONG { get { if (!_OP_DIV_LONGReady) { _OP_DIV_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_DIV_LONG"); _OP_DIV_LONGReady = true; } return _OP_DIV_LONGContent; } }
        private static int _OP_DIV_LONGContent = default;
        private static bool _OP_DIV_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_DIV_LONG_2ADDR"/>
        /// </summary>
        public static int OP_DIV_LONG_2ADDR { get { if (!_OP_DIV_LONG_2ADDRReady) { _OP_DIV_LONG_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_DIV_LONG_2ADDR"); _OP_DIV_LONG_2ADDRReady = true; } return _OP_DIV_LONG_2ADDRContent; } }
        private static int _OP_DIV_LONG_2ADDRContent = default;
        private static bool _OP_DIV_LONG_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_DOUBLE_TO_FLOAT"/>
        /// </summary>
        public static int OP_DOUBLE_TO_FLOAT { get { if (!_OP_DOUBLE_TO_FLOATReady) { _OP_DOUBLE_TO_FLOATContent = SGetField<int>(LocalBridgeClazz, "OP_DOUBLE_TO_FLOAT"); _OP_DOUBLE_TO_FLOATReady = true; } return _OP_DOUBLE_TO_FLOATContent; } }
        private static int _OP_DOUBLE_TO_FLOATContent = default;
        private static bool _OP_DOUBLE_TO_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_DOUBLE_TO_INT"/>
        /// </summary>
        public static int OP_DOUBLE_TO_INT { get { if (!_OP_DOUBLE_TO_INTReady) { _OP_DOUBLE_TO_INTContent = SGetField<int>(LocalBridgeClazz, "OP_DOUBLE_TO_INT"); _OP_DOUBLE_TO_INTReady = true; } return _OP_DOUBLE_TO_INTContent; } }
        private static int _OP_DOUBLE_TO_INTContent = default;
        private static bool _OP_DOUBLE_TO_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_DOUBLE_TO_LONG"/>
        /// </summary>
        public static int OP_DOUBLE_TO_LONG { get { if (!_OP_DOUBLE_TO_LONGReady) { _OP_DOUBLE_TO_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_DOUBLE_TO_LONG"); _OP_DOUBLE_TO_LONGReady = true; } return _OP_DOUBLE_TO_LONGContent; } }
        private static int _OP_DOUBLE_TO_LONGContent = default;
        private static bool _OP_DOUBLE_TO_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_EXECUTE_INLINE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_EXECUTE_INLINE { get { if (!_OP_EXECUTE_INLINEReady) { _OP_EXECUTE_INLINEContent = SGetField<int>(LocalBridgeClazz, "OP_EXECUTE_INLINE"); _OP_EXECUTE_INLINEReady = true; } return _OP_EXECUTE_INLINEContent; } }
        private static int _OP_EXECUTE_INLINEContent = default;
        private static bool _OP_EXECUTE_INLINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_EXECUTE_INLINE_RANGE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_EXECUTE_INLINE_RANGE { get { if (!_OP_EXECUTE_INLINE_RANGEReady) { _OP_EXECUTE_INLINE_RANGEContent = SGetField<int>(LocalBridgeClazz, "OP_EXECUTE_INLINE_RANGE"); _OP_EXECUTE_INLINE_RANGEReady = true; } return _OP_EXECUTE_INLINE_RANGEContent; } }
        private static int _OP_EXECUTE_INLINE_RANGEContent = default;
        private static bool _OP_EXECUTE_INLINE_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_FILL_ARRAY_DATA"/>
        /// </summary>
        public static int OP_FILL_ARRAY_DATA { get { if (!_OP_FILL_ARRAY_DATAReady) { _OP_FILL_ARRAY_DATAContent = SGetField<int>(LocalBridgeClazz, "OP_FILL_ARRAY_DATA"); _OP_FILL_ARRAY_DATAReady = true; } return _OP_FILL_ARRAY_DATAContent; } }
        private static int _OP_FILL_ARRAY_DATAContent = default;
        private static bool _OP_FILL_ARRAY_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_FILLED_NEW_ARRAY"/>
        /// </summary>
        public static int OP_FILLED_NEW_ARRAY { get { if (!_OP_FILLED_NEW_ARRAYReady) { _OP_FILLED_NEW_ARRAYContent = SGetField<int>(LocalBridgeClazz, "OP_FILLED_NEW_ARRAY"); _OP_FILLED_NEW_ARRAYReady = true; } return _OP_FILLED_NEW_ARRAYContent; } }
        private static int _OP_FILLED_NEW_ARRAYContent = default;
        private static bool _OP_FILLED_NEW_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_FILLED_NEW_ARRAY_JUMBO"/>
        /// </summary>
        public static int OP_FILLED_NEW_ARRAY_JUMBO { get { if (!_OP_FILLED_NEW_ARRAY_JUMBOReady) { _OP_FILLED_NEW_ARRAY_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_FILLED_NEW_ARRAY_JUMBO"); _OP_FILLED_NEW_ARRAY_JUMBOReady = true; } return _OP_FILLED_NEW_ARRAY_JUMBOContent; } }
        private static int _OP_FILLED_NEW_ARRAY_JUMBOContent = default;
        private static bool _OP_FILLED_NEW_ARRAY_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_FILLED_NEW_ARRAY_RANGE"/>
        /// </summary>
        public static int OP_FILLED_NEW_ARRAY_RANGE { get { if (!_OP_FILLED_NEW_ARRAY_RANGEReady) { _OP_FILLED_NEW_ARRAY_RANGEContent = SGetField<int>(LocalBridgeClazz, "OP_FILLED_NEW_ARRAY_RANGE"); _OP_FILLED_NEW_ARRAY_RANGEReady = true; } return _OP_FILLED_NEW_ARRAY_RANGEContent; } }
        private static int _OP_FILLED_NEW_ARRAY_RANGEContent = default;
        private static bool _OP_FILLED_NEW_ARRAY_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_FLOAT_TO_DOUBLE"/>
        /// </summary>
        public static int OP_FLOAT_TO_DOUBLE { get { if (!_OP_FLOAT_TO_DOUBLEReady) { _OP_FLOAT_TO_DOUBLEContent = SGetField<int>(LocalBridgeClazz, "OP_FLOAT_TO_DOUBLE"); _OP_FLOAT_TO_DOUBLEReady = true; } return _OP_FLOAT_TO_DOUBLEContent; } }
        private static int _OP_FLOAT_TO_DOUBLEContent = default;
        private static bool _OP_FLOAT_TO_DOUBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_FLOAT_TO_INT"/>
        /// </summary>
        public static int OP_FLOAT_TO_INT { get { if (!_OP_FLOAT_TO_INTReady) { _OP_FLOAT_TO_INTContent = SGetField<int>(LocalBridgeClazz, "OP_FLOAT_TO_INT"); _OP_FLOAT_TO_INTReady = true; } return _OP_FLOAT_TO_INTContent; } }
        private static int _OP_FLOAT_TO_INTContent = default;
        private static bool _OP_FLOAT_TO_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_FLOAT_TO_LONG"/>
        /// </summary>
        public static int OP_FLOAT_TO_LONG { get { if (!_OP_FLOAT_TO_LONGReady) { _OP_FLOAT_TO_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_FLOAT_TO_LONG"); _OP_FLOAT_TO_LONGReady = true; } return _OP_FLOAT_TO_LONGContent; } }
        private static int _OP_FLOAT_TO_LONGContent = default;
        private static bool _OP_FLOAT_TO_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_GOTO"/>
        /// </summary>
        public static int OP_GOTO { get { if (!_OP_GOTOReady) { _OP_GOTOContent = SGetField<int>(LocalBridgeClazz, "OP_GOTO"); _OP_GOTOReady = true; } return _OP_GOTOContent; } }
        private static int _OP_GOTOContent = default;
        private static bool _OP_GOTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_GOTO_16"/>
        /// </summary>
        public static int OP_GOTO_16 { get { if (!_OP_GOTO_16Ready) { _OP_GOTO_16Content = SGetField<int>(LocalBridgeClazz, "OP_GOTO_16"); _OP_GOTO_16Ready = true; } return _OP_GOTO_16Content; } }
        private static int _OP_GOTO_16Content = default;
        private static bool _OP_GOTO_16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_GOTO_32"/>
        /// </summary>
        public static int OP_GOTO_32 { get { if (!_OP_GOTO_32Ready) { _OP_GOTO_32Content = SGetField<int>(LocalBridgeClazz, "OP_GOTO_32"); _OP_GOTO_32Ready = true; } return _OP_GOTO_32Content; } }
        private static int _OP_GOTO_32Content = default;
        private static bool _OP_GOTO_32Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IF_EQ"/>
        /// </summary>
        public static int OP_IF_EQ { get { if (!_OP_IF_EQReady) { _OP_IF_EQContent = SGetField<int>(LocalBridgeClazz, "OP_IF_EQ"); _OP_IF_EQReady = true; } return _OP_IF_EQContent; } }
        private static int _OP_IF_EQContent = default;
        private static bool _OP_IF_EQReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IF_EQZ"/>
        /// </summary>
        public static int OP_IF_EQZ { get { if (!_OP_IF_EQZReady) { _OP_IF_EQZContent = SGetField<int>(LocalBridgeClazz, "OP_IF_EQZ"); _OP_IF_EQZReady = true; } return _OP_IF_EQZContent; } }
        private static int _OP_IF_EQZContent = default;
        private static bool _OP_IF_EQZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IF_GE"/>
        /// </summary>
        public static int OP_IF_GE { get { if (!_OP_IF_GEReady) { _OP_IF_GEContent = SGetField<int>(LocalBridgeClazz, "OP_IF_GE"); _OP_IF_GEReady = true; } return _OP_IF_GEContent; } }
        private static int _OP_IF_GEContent = default;
        private static bool _OP_IF_GEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IF_GEZ"/>
        /// </summary>
        public static int OP_IF_GEZ { get { if (!_OP_IF_GEZReady) { _OP_IF_GEZContent = SGetField<int>(LocalBridgeClazz, "OP_IF_GEZ"); _OP_IF_GEZReady = true; } return _OP_IF_GEZContent; } }
        private static int _OP_IF_GEZContent = default;
        private static bool _OP_IF_GEZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IF_GT"/>
        /// </summary>
        public static int OP_IF_GT { get { if (!_OP_IF_GTReady) { _OP_IF_GTContent = SGetField<int>(LocalBridgeClazz, "OP_IF_GT"); _OP_IF_GTReady = true; } return _OP_IF_GTContent; } }
        private static int _OP_IF_GTContent = default;
        private static bool _OP_IF_GTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IF_GTZ"/>
        /// </summary>
        public static int OP_IF_GTZ { get { if (!_OP_IF_GTZReady) { _OP_IF_GTZContent = SGetField<int>(LocalBridgeClazz, "OP_IF_GTZ"); _OP_IF_GTZReady = true; } return _OP_IF_GTZContent; } }
        private static int _OP_IF_GTZContent = default;
        private static bool _OP_IF_GTZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IF_LE"/>
        /// </summary>
        public static int OP_IF_LE { get { if (!_OP_IF_LEReady) { _OP_IF_LEContent = SGetField<int>(LocalBridgeClazz, "OP_IF_LE"); _OP_IF_LEReady = true; } return _OP_IF_LEContent; } }
        private static int _OP_IF_LEContent = default;
        private static bool _OP_IF_LEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IF_LEZ"/>
        /// </summary>
        public static int OP_IF_LEZ { get { if (!_OP_IF_LEZReady) { _OP_IF_LEZContent = SGetField<int>(LocalBridgeClazz, "OP_IF_LEZ"); _OP_IF_LEZReady = true; } return _OP_IF_LEZContent; } }
        private static int _OP_IF_LEZContent = default;
        private static bool _OP_IF_LEZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IF_LT"/>
        /// </summary>
        public static int OP_IF_LT { get { if (!_OP_IF_LTReady) { _OP_IF_LTContent = SGetField<int>(LocalBridgeClazz, "OP_IF_LT"); _OP_IF_LTReady = true; } return _OP_IF_LTContent; } }
        private static int _OP_IF_LTContent = default;
        private static bool _OP_IF_LTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IF_LTZ"/>
        /// </summary>
        public static int OP_IF_LTZ { get { if (!_OP_IF_LTZReady) { _OP_IF_LTZContent = SGetField<int>(LocalBridgeClazz, "OP_IF_LTZ"); _OP_IF_LTZReady = true; } return _OP_IF_LTZContent; } }
        private static int _OP_IF_LTZContent = default;
        private static bool _OP_IF_LTZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IF_NE"/>
        /// </summary>
        public static int OP_IF_NE { get { if (!_OP_IF_NEReady) { _OP_IF_NEContent = SGetField<int>(LocalBridgeClazz, "OP_IF_NE"); _OP_IF_NEReady = true; } return _OP_IF_NEContent; } }
        private static int _OP_IF_NEContent = default;
        private static bool _OP_IF_NEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IF_NEZ"/>
        /// </summary>
        public static int OP_IF_NEZ { get { if (!_OP_IF_NEZReady) { _OP_IF_NEZContent = SGetField<int>(LocalBridgeClazz, "OP_IF_NEZ"); _OP_IF_NEZReady = true; } return _OP_IF_NEZContent; } }
        private static int _OP_IF_NEZContent = default;
        private static bool _OP_IF_NEZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET"/>
        /// </summary>
        public static int OP_IGET { get { if (!_OP_IGETReady) { _OP_IGETContent = SGetField<int>(LocalBridgeClazz, "OP_IGET"); _OP_IGETReady = true; } return _OP_IGETContent; } }
        private static int _OP_IGETContent = default;
        private static bool _OP_IGETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_BOOLEAN"/>
        /// </summary>
        public static int OP_IGET_BOOLEAN { get { if (!_OP_IGET_BOOLEANReady) { _OP_IGET_BOOLEANContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_BOOLEAN"); _OP_IGET_BOOLEANReady = true; } return _OP_IGET_BOOLEANContent; } }
        private static int _OP_IGET_BOOLEANContent = default;
        private static bool _OP_IGET_BOOLEANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_BOOLEAN_JUMBO"/>
        /// </summary>
        public static int OP_IGET_BOOLEAN_JUMBO { get { if (!_OP_IGET_BOOLEAN_JUMBOReady) { _OP_IGET_BOOLEAN_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_BOOLEAN_JUMBO"); _OP_IGET_BOOLEAN_JUMBOReady = true; } return _OP_IGET_BOOLEAN_JUMBOContent; } }
        private static int _OP_IGET_BOOLEAN_JUMBOContent = default;
        private static bool _OP_IGET_BOOLEAN_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_BYTE"/>
        /// </summary>
        public static int OP_IGET_BYTE { get { if (!_OP_IGET_BYTEReady) { _OP_IGET_BYTEContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_BYTE"); _OP_IGET_BYTEReady = true; } return _OP_IGET_BYTEContent; } }
        private static int _OP_IGET_BYTEContent = default;
        private static bool _OP_IGET_BYTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_BYTE_JUMBO"/>
        /// </summary>
        public static int OP_IGET_BYTE_JUMBO { get { if (!_OP_IGET_BYTE_JUMBOReady) { _OP_IGET_BYTE_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_BYTE_JUMBO"); _OP_IGET_BYTE_JUMBOReady = true; } return _OP_IGET_BYTE_JUMBOContent; } }
        private static int _OP_IGET_BYTE_JUMBOContent = default;
        private static bool _OP_IGET_BYTE_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_CHAR"/>
        /// </summary>
        public static int OP_IGET_CHAR { get { if (!_OP_IGET_CHARReady) { _OP_IGET_CHARContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_CHAR"); _OP_IGET_CHARReady = true; } return _OP_IGET_CHARContent; } }
        private static int _OP_IGET_CHARContent = default;
        private static bool _OP_IGET_CHARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_CHAR_JUMBO"/>
        /// </summary>
        public static int OP_IGET_CHAR_JUMBO { get { if (!_OP_IGET_CHAR_JUMBOReady) { _OP_IGET_CHAR_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_CHAR_JUMBO"); _OP_IGET_CHAR_JUMBOReady = true; } return _OP_IGET_CHAR_JUMBOContent; } }
        private static int _OP_IGET_CHAR_JUMBOContent = default;
        private static bool _OP_IGET_CHAR_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_JUMBO"/>
        /// </summary>
        public static int OP_IGET_JUMBO { get { if (!_OP_IGET_JUMBOReady) { _OP_IGET_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_JUMBO"); _OP_IGET_JUMBOReady = true; } return _OP_IGET_JUMBOContent; } }
        private static int _OP_IGET_JUMBOContent = default;
        private static bool _OP_IGET_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_OBJECT"/>
        /// </summary>
        public static int OP_IGET_OBJECT { get { if (!_OP_IGET_OBJECTReady) { _OP_IGET_OBJECTContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_OBJECT"); _OP_IGET_OBJECTReady = true; } return _OP_IGET_OBJECTContent; } }
        private static int _OP_IGET_OBJECTContent = default;
        private static bool _OP_IGET_OBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_OBJECT_JUMBO"/>
        /// </summary>
        public static int OP_IGET_OBJECT_JUMBO { get { if (!_OP_IGET_OBJECT_JUMBOReady) { _OP_IGET_OBJECT_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_OBJECT_JUMBO"); _OP_IGET_OBJECT_JUMBOReady = true; } return _OP_IGET_OBJECT_JUMBOContent; } }
        private static int _OP_IGET_OBJECT_JUMBOContent = default;
        private static bool _OP_IGET_OBJECT_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_OBJECT_QUICK"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_IGET_OBJECT_QUICK { get { if (!_OP_IGET_OBJECT_QUICKReady) { _OP_IGET_OBJECT_QUICKContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_OBJECT_QUICK"); _OP_IGET_OBJECT_QUICKReady = true; } return _OP_IGET_OBJECT_QUICKContent; } }
        private static int _OP_IGET_OBJECT_QUICKContent = default;
        private static bool _OP_IGET_OBJECT_QUICKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_QUICK"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_IGET_QUICK { get { if (!_OP_IGET_QUICKReady) { _OP_IGET_QUICKContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_QUICK"); _OP_IGET_QUICKReady = true; } return _OP_IGET_QUICKContent; } }
        private static int _OP_IGET_QUICKContent = default;
        private static bool _OP_IGET_QUICKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_SHORT"/>
        /// </summary>
        public static int OP_IGET_SHORT { get { if (!_OP_IGET_SHORTReady) { _OP_IGET_SHORTContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_SHORT"); _OP_IGET_SHORTReady = true; } return _OP_IGET_SHORTContent; } }
        private static int _OP_IGET_SHORTContent = default;
        private static bool _OP_IGET_SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_SHORT_JUMBO"/>
        /// </summary>
        public static int OP_IGET_SHORT_JUMBO { get { if (!_OP_IGET_SHORT_JUMBOReady) { _OP_IGET_SHORT_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_SHORT_JUMBO"); _OP_IGET_SHORT_JUMBOReady = true; } return _OP_IGET_SHORT_JUMBOContent; } }
        private static int _OP_IGET_SHORT_JUMBOContent = default;
        private static bool _OP_IGET_SHORT_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_WIDE"/>
        /// </summary>
        public static int OP_IGET_WIDE { get { if (!_OP_IGET_WIDEReady) { _OP_IGET_WIDEContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_WIDE"); _OP_IGET_WIDEReady = true; } return _OP_IGET_WIDEContent; } }
        private static int _OP_IGET_WIDEContent = default;
        private static bool _OP_IGET_WIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_WIDE_JUMBO"/>
        /// </summary>
        public static int OP_IGET_WIDE_JUMBO { get { if (!_OP_IGET_WIDE_JUMBOReady) { _OP_IGET_WIDE_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_WIDE_JUMBO"); _OP_IGET_WIDE_JUMBOReady = true; } return _OP_IGET_WIDE_JUMBOContent; } }
        private static int _OP_IGET_WIDE_JUMBOContent = default;
        private static bool _OP_IGET_WIDE_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_WIDE_QUICK"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_IGET_WIDE_QUICK { get { if (!_OP_IGET_WIDE_QUICKReady) { _OP_IGET_WIDE_QUICKContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_WIDE_QUICK"); _OP_IGET_WIDE_QUICKReady = true; } return _OP_IGET_WIDE_QUICKContent; } }
        private static int _OP_IGET_WIDE_QUICKContent = default;
        private static bool _OP_IGET_WIDE_QUICKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IGET_WIDE_VOLATILE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_IGET_WIDE_VOLATILE { get { if (!_OP_IGET_WIDE_VOLATILEReady) { _OP_IGET_WIDE_VOLATILEContent = SGetField<int>(LocalBridgeClazz, "OP_IGET_WIDE_VOLATILE"); _OP_IGET_WIDE_VOLATILEReady = true; } return _OP_IGET_WIDE_VOLATILEContent; } }
        private static int _OP_IGET_WIDE_VOLATILEContent = default;
        private static bool _OP_IGET_WIDE_VOLATILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INSTANCE_OF"/>
        /// </summary>
        public static int OP_INSTANCE_OF { get { if (!_OP_INSTANCE_OFReady) { _OP_INSTANCE_OFContent = SGetField<int>(LocalBridgeClazz, "OP_INSTANCE_OF"); _OP_INSTANCE_OFReady = true; } return _OP_INSTANCE_OFContent; } }
        private static int _OP_INSTANCE_OFContent = default;
        private static bool _OP_INSTANCE_OFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INSTANCE_OF_JUMBO"/>
        /// </summary>
        public static int OP_INSTANCE_OF_JUMBO { get { if (!_OP_INSTANCE_OF_JUMBOReady) { _OP_INSTANCE_OF_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_INSTANCE_OF_JUMBO"); _OP_INSTANCE_OF_JUMBOReady = true; } return _OP_INSTANCE_OF_JUMBOContent; } }
        private static int _OP_INSTANCE_OF_JUMBOContent = default;
        private static bool _OP_INSTANCE_OF_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INT_TO_BYTE"/>
        /// </summary>
        public static int OP_INT_TO_BYTE { get { if (!_OP_INT_TO_BYTEReady) { _OP_INT_TO_BYTEContent = SGetField<int>(LocalBridgeClazz, "OP_INT_TO_BYTE"); _OP_INT_TO_BYTEReady = true; } return _OP_INT_TO_BYTEContent; } }
        private static int _OP_INT_TO_BYTEContent = default;
        private static bool _OP_INT_TO_BYTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INT_TO_CHAR"/>
        /// </summary>
        public static int OP_INT_TO_CHAR { get { if (!_OP_INT_TO_CHARReady) { _OP_INT_TO_CHARContent = SGetField<int>(LocalBridgeClazz, "OP_INT_TO_CHAR"); _OP_INT_TO_CHARReady = true; } return _OP_INT_TO_CHARContent; } }
        private static int _OP_INT_TO_CHARContent = default;
        private static bool _OP_INT_TO_CHARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INT_TO_DOUBLE"/>
        /// </summary>
        public static int OP_INT_TO_DOUBLE { get { if (!_OP_INT_TO_DOUBLEReady) { _OP_INT_TO_DOUBLEContent = SGetField<int>(LocalBridgeClazz, "OP_INT_TO_DOUBLE"); _OP_INT_TO_DOUBLEReady = true; } return _OP_INT_TO_DOUBLEContent; } }
        private static int _OP_INT_TO_DOUBLEContent = default;
        private static bool _OP_INT_TO_DOUBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INT_TO_FLOAT"/>
        /// </summary>
        public static int OP_INT_TO_FLOAT { get { if (!_OP_INT_TO_FLOATReady) { _OP_INT_TO_FLOATContent = SGetField<int>(LocalBridgeClazz, "OP_INT_TO_FLOAT"); _OP_INT_TO_FLOATReady = true; } return _OP_INT_TO_FLOATContent; } }
        private static int _OP_INT_TO_FLOATContent = default;
        private static bool _OP_INT_TO_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INT_TO_LONG"/>
        /// </summary>
        public static int OP_INT_TO_LONG { get { if (!_OP_INT_TO_LONGReady) { _OP_INT_TO_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_INT_TO_LONG"); _OP_INT_TO_LONGReady = true; } return _OP_INT_TO_LONGContent; } }
        private static int _OP_INT_TO_LONGContent = default;
        private static bool _OP_INT_TO_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INT_TO_SHORT"/>
        /// </summary>
        public static int OP_INT_TO_SHORT { get { if (!_OP_INT_TO_SHORTReady) { _OP_INT_TO_SHORTContent = SGetField<int>(LocalBridgeClazz, "OP_INT_TO_SHORT"); _OP_INT_TO_SHORTReady = true; } return _OP_INT_TO_SHORTContent; } }
        private static int _OP_INT_TO_SHORTContent = default;
        private static bool _OP_INT_TO_SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_CUSTOM"/>
        /// </summary>
        public static int OP_INVOKE_CUSTOM { get { if (!_OP_INVOKE_CUSTOMReady) { _OP_INVOKE_CUSTOMContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_CUSTOM"); _OP_INVOKE_CUSTOMReady = true; } return _OP_INVOKE_CUSTOMContent; } }
        private static int _OP_INVOKE_CUSTOMContent = default;
        private static bool _OP_INVOKE_CUSTOMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_CUSTOM_RANGE"/>
        /// </summary>
        public static int OP_INVOKE_CUSTOM_RANGE { get { if (!_OP_INVOKE_CUSTOM_RANGEReady) { _OP_INVOKE_CUSTOM_RANGEContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_CUSTOM_RANGE"); _OP_INVOKE_CUSTOM_RANGEReady = true; } return _OP_INVOKE_CUSTOM_RANGEContent; } }
        private static int _OP_INVOKE_CUSTOM_RANGEContent = default;
        private static bool _OP_INVOKE_CUSTOM_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_DIRECT"/>
        /// </summary>
        public static int OP_INVOKE_DIRECT { get { if (!_OP_INVOKE_DIRECTReady) { _OP_INVOKE_DIRECTContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_DIRECT"); _OP_INVOKE_DIRECTReady = true; } return _OP_INVOKE_DIRECTContent; } }
        private static int _OP_INVOKE_DIRECTContent = default;
        private static bool _OP_INVOKE_DIRECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_DIRECT_EMPTY"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_INVOKE_DIRECT_EMPTY { get { if (!_OP_INVOKE_DIRECT_EMPTYReady) { _OP_INVOKE_DIRECT_EMPTYContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_DIRECT_EMPTY"); _OP_INVOKE_DIRECT_EMPTYReady = true; } return _OP_INVOKE_DIRECT_EMPTYContent; } }
        private static int _OP_INVOKE_DIRECT_EMPTYContent = default;
        private static bool _OP_INVOKE_DIRECT_EMPTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_DIRECT_JUMBO"/>
        /// </summary>
        public static int OP_INVOKE_DIRECT_JUMBO { get { if (!_OP_INVOKE_DIRECT_JUMBOReady) { _OP_INVOKE_DIRECT_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_DIRECT_JUMBO"); _OP_INVOKE_DIRECT_JUMBOReady = true; } return _OP_INVOKE_DIRECT_JUMBOContent; } }
        private static int _OP_INVOKE_DIRECT_JUMBOContent = default;
        private static bool _OP_INVOKE_DIRECT_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_DIRECT_RANGE"/>
        /// </summary>
        public static int OP_INVOKE_DIRECT_RANGE { get { if (!_OP_INVOKE_DIRECT_RANGEReady) { _OP_INVOKE_DIRECT_RANGEContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_DIRECT_RANGE"); _OP_INVOKE_DIRECT_RANGEReady = true; } return _OP_INVOKE_DIRECT_RANGEContent; } }
        private static int _OP_INVOKE_DIRECT_RANGEContent = default;
        private static bool _OP_INVOKE_DIRECT_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_INTERFACE"/>
        /// </summary>
        public static int OP_INVOKE_INTERFACE { get { if (!_OP_INVOKE_INTERFACEReady) { _OP_INVOKE_INTERFACEContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_INTERFACE"); _OP_INVOKE_INTERFACEReady = true; } return _OP_INVOKE_INTERFACEContent; } }
        private static int _OP_INVOKE_INTERFACEContent = default;
        private static bool _OP_INVOKE_INTERFACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_INTERFACE_JUMBO"/>
        /// </summary>
        public static int OP_INVOKE_INTERFACE_JUMBO { get { if (!_OP_INVOKE_INTERFACE_JUMBOReady) { _OP_INVOKE_INTERFACE_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_INTERFACE_JUMBO"); _OP_INVOKE_INTERFACE_JUMBOReady = true; } return _OP_INVOKE_INTERFACE_JUMBOContent; } }
        private static int _OP_INVOKE_INTERFACE_JUMBOContent = default;
        private static bool _OP_INVOKE_INTERFACE_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_INTERFACE_RANGE"/>
        /// </summary>
        public static int OP_INVOKE_INTERFACE_RANGE { get { if (!_OP_INVOKE_INTERFACE_RANGEReady) { _OP_INVOKE_INTERFACE_RANGEContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_INTERFACE_RANGE"); _OP_INVOKE_INTERFACE_RANGEReady = true; } return _OP_INVOKE_INTERFACE_RANGEContent; } }
        private static int _OP_INVOKE_INTERFACE_RANGEContent = default;
        private static bool _OP_INVOKE_INTERFACE_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_POLYMORPHIC"/>
        /// </summary>
        public static int OP_INVOKE_POLYMORPHIC { get { if (!_OP_INVOKE_POLYMORPHICReady) { _OP_INVOKE_POLYMORPHICContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_POLYMORPHIC"); _OP_INVOKE_POLYMORPHICReady = true; } return _OP_INVOKE_POLYMORPHICContent; } }
        private static int _OP_INVOKE_POLYMORPHICContent = default;
        private static bool _OP_INVOKE_POLYMORPHICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_POLYMORPHIC_RANGE"/>
        /// </summary>
        public static int OP_INVOKE_POLYMORPHIC_RANGE { get { if (!_OP_INVOKE_POLYMORPHIC_RANGEReady) { _OP_INVOKE_POLYMORPHIC_RANGEContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_POLYMORPHIC_RANGE"); _OP_INVOKE_POLYMORPHIC_RANGEReady = true; } return _OP_INVOKE_POLYMORPHIC_RANGEContent; } }
        private static int _OP_INVOKE_POLYMORPHIC_RANGEContent = default;
        private static bool _OP_INVOKE_POLYMORPHIC_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_STATIC"/>
        /// </summary>
        public static int OP_INVOKE_STATIC { get { if (!_OP_INVOKE_STATICReady) { _OP_INVOKE_STATICContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_STATIC"); _OP_INVOKE_STATICReady = true; } return _OP_INVOKE_STATICContent; } }
        private static int _OP_INVOKE_STATICContent = default;
        private static bool _OP_INVOKE_STATICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_STATIC_JUMBO"/>
        /// </summary>
        public static int OP_INVOKE_STATIC_JUMBO { get { if (!_OP_INVOKE_STATIC_JUMBOReady) { _OP_INVOKE_STATIC_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_STATIC_JUMBO"); _OP_INVOKE_STATIC_JUMBOReady = true; } return _OP_INVOKE_STATIC_JUMBOContent; } }
        private static int _OP_INVOKE_STATIC_JUMBOContent = default;
        private static bool _OP_INVOKE_STATIC_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_STATIC_RANGE"/>
        /// </summary>
        public static int OP_INVOKE_STATIC_RANGE { get { if (!_OP_INVOKE_STATIC_RANGEReady) { _OP_INVOKE_STATIC_RANGEContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_STATIC_RANGE"); _OP_INVOKE_STATIC_RANGEReady = true; } return _OP_INVOKE_STATIC_RANGEContent; } }
        private static int _OP_INVOKE_STATIC_RANGEContent = default;
        private static bool _OP_INVOKE_STATIC_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_SUPER"/>
        /// </summary>
        public static int OP_INVOKE_SUPER { get { if (!_OP_INVOKE_SUPERReady) { _OP_INVOKE_SUPERContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_SUPER"); _OP_INVOKE_SUPERReady = true; } return _OP_INVOKE_SUPERContent; } }
        private static int _OP_INVOKE_SUPERContent = default;
        private static bool _OP_INVOKE_SUPERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_SUPER_JUMBO"/>
        /// </summary>
        public static int OP_INVOKE_SUPER_JUMBO { get { if (!_OP_INVOKE_SUPER_JUMBOReady) { _OP_INVOKE_SUPER_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_SUPER_JUMBO"); _OP_INVOKE_SUPER_JUMBOReady = true; } return _OP_INVOKE_SUPER_JUMBOContent; } }
        private static int _OP_INVOKE_SUPER_JUMBOContent = default;
        private static bool _OP_INVOKE_SUPER_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_SUPER_QUICK"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_INVOKE_SUPER_QUICK { get { if (!_OP_INVOKE_SUPER_QUICKReady) { _OP_INVOKE_SUPER_QUICKContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_SUPER_QUICK"); _OP_INVOKE_SUPER_QUICKReady = true; } return _OP_INVOKE_SUPER_QUICKContent; } }
        private static int _OP_INVOKE_SUPER_QUICKContent = default;
        private static bool _OP_INVOKE_SUPER_QUICKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_SUPER_QUICK_RANGE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_INVOKE_SUPER_QUICK_RANGE { get { if (!_OP_INVOKE_SUPER_QUICK_RANGEReady) { _OP_INVOKE_SUPER_QUICK_RANGEContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_SUPER_QUICK_RANGE"); _OP_INVOKE_SUPER_QUICK_RANGEReady = true; } return _OP_INVOKE_SUPER_QUICK_RANGEContent; } }
        private static int _OP_INVOKE_SUPER_QUICK_RANGEContent = default;
        private static bool _OP_INVOKE_SUPER_QUICK_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_SUPER_RANGE"/>
        /// </summary>
        public static int OP_INVOKE_SUPER_RANGE { get { if (!_OP_INVOKE_SUPER_RANGEReady) { _OP_INVOKE_SUPER_RANGEContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_SUPER_RANGE"); _OP_INVOKE_SUPER_RANGEReady = true; } return _OP_INVOKE_SUPER_RANGEContent; } }
        private static int _OP_INVOKE_SUPER_RANGEContent = default;
        private static bool _OP_INVOKE_SUPER_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_VIRTUAL"/>
        /// </summary>
        public static int OP_INVOKE_VIRTUAL { get { if (!_OP_INVOKE_VIRTUALReady) { _OP_INVOKE_VIRTUALContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_VIRTUAL"); _OP_INVOKE_VIRTUALReady = true; } return _OP_INVOKE_VIRTUALContent; } }
        private static int _OP_INVOKE_VIRTUALContent = default;
        private static bool _OP_INVOKE_VIRTUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_VIRTUAL_JUMBO"/>
        /// </summary>
        public static int OP_INVOKE_VIRTUAL_JUMBO { get { if (!_OP_INVOKE_VIRTUAL_JUMBOReady) { _OP_INVOKE_VIRTUAL_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_VIRTUAL_JUMBO"); _OP_INVOKE_VIRTUAL_JUMBOReady = true; } return _OP_INVOKE_VIRTUAL_JUMBOContent; } }
        private static int _OP_INVOKE_VIRTUAL_JUMBOContent = default;
        private static bool _OP_INVOKE_VIRTUAL_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_VIRTUAL_QUICK"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_INVOKE_VIRTUAL_QUICK { get { if (!_OP_INVOKE_VIRTUAL_QUICKReady) { _OP_INVOKE_VIRTUAL_QUICKContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_VIRTUAL_QUICK"); _OP_INVOKE_VIRTUAL_QUICKReady = true; } return _OP_INVOKE_VIRTUAL_QUICKContent; } }
        private static int _OP_INVOKE_VIRTUAL_QUICKContent = default;
        private static bool _OP_INVOKE_VIRTUAL_QUICKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_VIRTUAL_QUICK_RANGE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_INVOKE_VIRTUAL_QUICK_RANGE { get { if (!_OP_INVOKE_VIRTUAL_QUICK_RANGEReady) { _OP_INVOKE_VIRTUAL_QUICK_RANGEContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_VIRTUAL_QUICK_RANGE"); _OP_INVOKE_VIRTUAL_QUICK_RANGEReady = true; } return _OP_INVOKE_VIRTUAL_QUICK_RANGEContent; } }
        private static int _OP_INVOKE_VIRTUAL_QUICK_RANGEContent = default;
        private static bool _OP_INVOKE_VIRTUAL_QUICK_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_INVOKE_VIRTUAL_RANGE"/>
        /// </summary>
        public static int OP_INVOKE_VIRTUAL_RANGE { get { if (!_OP_INVOKE_VIRTUAL_RANGEReady) { _OP_INVOKE_VIRTUAL_RANGEContent = SGetField<int>(LocalBridgeClazz, "OP_INVOKE_VIRTUAL_RANGE"); _OP_INVOKE_VIRTUAL_RANGEReady = true; } return _OP_INVOKE_VIRTUAL_RANGEContent; } }
        private static int _OP_INVOKE_VIRTUAL_RANGEContent = default;
        private static bool _OP_INVOKE_VIRTUAL_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT"/>
        /// </summary>
        public static int OP_IPUT { get { if (!_OP_IPUTReady) { _OP_IPUTContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT"); _OP_IPUTReady = true; } return _OP_IPUTContent; } }
        private static int _OP_IPUTContent = default;
        private static bool _OP_IPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_BOOLEAN"/>
        /// </summary>
        public static int OP_IPUT_BOOLEAN { get { if (!_OP_IPUT_BOOLEANReady) { _OP_IPUT_BOOLEANContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_BOOLEAN"); _OP_IPUT_BOOLEANReady = true; } return _OP_IPUT_BOOLEANContent; } }
        private static int _OP_IPUT_BOOLEANContent = default;
        private static bool _OP_IPUT_BOOLEANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_BOOLEAN_JUMBO"/>
        /// </summary>
        public static int OP_IPUT_BOOLEAN_JUMBO { get { if (!_OP_IPUT_BOOLEAN_JUMBOReady) { _OP_IPUT_BOOLEAN_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_BOOLEAN_JUMBO"); _OP_IPUT_BOOLEAN_JUMBOReady = true; } return _OP_IPUT_BOOLEAN_JUMBOContent; } }
        private static int _OP_IPUT_BOOLEAN_JUMBOContent = default;
        private static bool _OP_IPUT_BOOLEAN_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_BYTE"/>
        /// </summary>
        public static int OP_IPUT_BYTE { get { if (!_OP_IPUT_BYTEReady) { _OP_IPUT_BYTEContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_BYTE"); _OP_IPUT_BYTEReady = true; } return _OP_IPUT_BYTEContent; } }
        private static int _OP_IPUT_BYTEContent = default;
        private static bool _OP_IPUT_BYTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_BYTE_JUMBO"/>
        /// </summary>
        public static int OP_IPUT_BYTE_JUMBO { get { if (!_OP_IPUT_BYTE_JUMBOReady) { _OP_IPUT_BYTE_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_BYTE_JUMBO"); _OP_IPUT_BYTE_JUMBOReady = true; } return _OP_IPUT_BYTE_JUMBOContent; } }
        private static int _OP_IPUT_BYTE_JUMBOContent = default;
        private static bool _OP_IPUT_BYTE_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_CHAR"/>
        /// </summary>
        public static int OP_IPUT_CHAR { get { if (!_OP_IPUT_CHARReady) { _OP_IPUT_CHARContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_CHAR"); _OP_IPUT_CHARReady = true; } return _OP_IPUT_CHARContent; } }
        private static int _OP_IPUT_CHARContent = default;
        private static bool _OP_IPUT_CHARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_CHAR_JUMBO"/>
        /// </summary>
        public static int OP_IPUT_CHAR_JUMBO { get { if (!_OP_IPUT_CHAR_JUMBOReady) { _OP_IPUT_CHAR_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_CHAR_JUMBO"); _OP_IPUT_CHAR_JUMBOReady = true; } return _OP_IPUT_CHAR_JUMBOContent; } }
        private static int _OP_IPUT_CHAR_JUMBOContent = default;
        private static bool _OP_IPUT_CHAR_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_JUMBO"/>
        /// </summary>
        public static int OP_IPUT_JUMBO { get { if (!_OP_IPUT_JUMBOReady) { _OP_IPUT_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_JUMBO"); _OP_IPUT_JUMBOReady = true; } return _OP_IPUT_JUMBOContent; } }
        private static int _OP_IPUT_JUMBOContent = default;
        private static bool _OP_IPUT_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_OBJECT"/>
        /// </summary>
        public static int OP_IPUT_OBJECT { get { if (!_OP_IPUT_OBJECTReady) { _OP_IPUT_OBJECTContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_OBJECT"); _OP_IPUT_OBJECTReady = true; } return _OP_IPUT_OBJECTContent; } }
        private static int _OP_IPUT_OBJECTContent = default;
        private static bool _OP_IPUT_OBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_OBJECT_JUMBO"/>
        /// </summary>
        public static int OP_IPUT_OBJECT_JUMBO { get { if (!_OP_IPUT_OBJECT_JUMBOReady) { _OP_IPUT_OBJECT_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_OBJECT_JUMBO"); _OP_IPUT_OBJECT_JUMBOReady = true; } return _OP_IPUT_OBJECT_JUMBOContent; } }
        private static int _OP_IPUT_OBJECT_JUMBOContent = default;
        private static bool _OP_IPUT_OBJECT_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_OBJECT_QUICK"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_IPUT_OBJECT_QUICK { get { if (!_OP_IPUT_OBJECT_QUICKReady) { _OP_IPUT_OBJECT_QUICKContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_OBJECT_QUICK"); _OP_IPUT_OBJECT_QUICKReady = true; } return _OP_IPUT_OBJECT_QUICKContent; } }
        private static int _OP_IPUT_OBJECT_QUICKContent = default;
        private static bool _OP_IPUT_OBJECT_QUICKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_QUICK"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_IPUT_QUICK { get { if (!_OP_IPUT_QUICKReady) { _OP_IPUT_QUICKContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_QUICK"); _OP_IPUT_QUICKReady = true; } return _OP_IPUT_QUICKContent; } }
        private static int _OP_IPUT_QUICKContent = default;
        private static bool _OP_IPUT_QUICKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_SHORT"/>
        /// </summary>
        public static int OP_IPUT_SHORT { get { if (!_OP_IPUT_SHORTReady) { _OP_IPUT_SHORTContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_SHORT"); _OP_IPUT_SHORTReady = true; } return _OP_IPUT_SHORTContent; } }
        private static int _OP_IPUT_SHORTContent = default;
        private static bool _OP_IPUT_SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_SHORT_JUMBO"/>
        /// </summary>
        public static int OP_IPUT_SHORT_JUMBO { get { if (!_OP_IPUT_SHORT_JUMBOReady) { _OP_IPUT_SHORT_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_SHORT_JUMBO"); _OP_IPUT_SHORT_JUMBOReady = true; } return _OP_IPUT_SHORT_JUMBOContent; } }
        private static int _OP_IPUT_SHORT_JUMBOContent = default;
        private static bool _OP_IPUT_SHORT_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_WIDE"/>
        /// </summary>
        public static int OP_IPUT_WIDE { get { if (!_OP_IPUT_WIDEReady) { _OP_IPUT_WIDEContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_WIDE"); _OP_IPUT_WIDEReady = true; } return _OP_IPUT_WIDEContent; } }
        private static int _OP_IPUT_WIDEContent = default;
        private static bool _OP_IPUT_WIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_WIDE_JUMBO"/>
        /// </summary>
        public static int OP_IPUT_WIDE_JUMBO { get { if (!_OP_IPUT_WIDE_JUMBOReady) { _OP_IPUT_WIDE_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_WIDE_JUMBO"); _OP_IPUT_WIDE_JUMBOReady = true; } return _OP_IPUT_WIDE_JUMBOContent; } }
        private static int _OP_IPUT_WIDE_JUMBOContent = default;
        private static bool _OP_IPUT_WIDE_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_WIDE_QUICK"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_IPUT_WIDE_QUICK { get { if (!_OP_IPUT_WIDE_QUICKReady) { _OP_IPUT_WIDE_QUICKContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_WIDE_QUICK"); _OP_IPUT_WIDE_QUICKReady = true; } return _OP_IPUT_WIDE_QUICKContent; } }
        private static int _OP_IPUT_WIDE_QUICKContent = default;
        private static bool _OP_IPUT_WIDE_QUICKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_IPUT_WIDE_VOLATILE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_IPUT_WIDE_VOLATILE { get { if (!_OP_IPUT_WIDE_VOLATILEReady) { _OP_IPUT_WIDE_VOLATILEContent = SGetField<int>(LocalBridgeClazz, "OP_IPUT_WIDE_VOLATILE"); _OP_IPUT_WIDE_VOLATILEReady = true; } return _OP_IPUT_WIDE_VOLATILEContent; } }
        private static int _OP_IPUT_WIDE_VOLATILEContent = default;
        private static bool _OP_IPUT_WIDE_VOLATILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_LONG_TO_DOUBLE"/>
        /// </summary>
        public static int OP_LONG_TO_DOUBLE { get { if (!_OP_LONG_TO_DOUBLEReady) { _OP_LONG_TO_DOUBLEContent = SGetField<int>(LocalBridgeClazz, "OP_LONG_TO_DOUBLE"); _OP_LONG_TO_DOUBLEReady = true; } return _OP_LONG_TO_DOUBLEContent; } }
        private static int _OP_LONG_TO_DOUBLEContent = default;
        private static bool _OP_LONG_TO_DOUBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_LONG_TO_FLOAT"/>
        /// </summary>
        public static int OP_LONG_TO_FLOAT { get { if (!_OP_LONG_TO_FLOATReady) { _OP_LONG_TO_FLOATContent = SGetField<int>(LocalBridgeClazz, "OP_LONG_TO_FLOAT"); _OP_LONG_TO_FLOATReady = true; } return _OP_LONG_TO_FLOATContent; } }
        private static int _OP_LONG_TO_FLOATContent = default;
        private static bool _OP_LONG_TO_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_LONG_TO_INT"/>
        /// </summary>
        public static int OP_LONG_TO_INT { get { if (!_OP_LONG_TO_INTReady) { _OP_LONG_TO_INTContent = SGetField<int>(LocalBridgeClazz, "OP_LONG_TO_INT"); _OP_LONG_TO_INTReady = true; } return _OP_LONG_TO_INTContent; } }
        private static int _OP_LONG_TO_INTContent = default;
        private static bool _OP_LONG_TO_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MONITOR_ENTER"/>
        /// </summary>
        public static int OP_MONITOR_ENTER { get { if (!_OP_MONITOR_ENTERReady) { _OP_MONITOR_ENTERContent = SGetField<int>(LocalBridgeClazz, "OP_MONITOR_ENTER"); _OP_MONITOR_ENTERReady = true; } return _OP_MONITOR_ENTERContent; } }
        private static int _OP_MONITOR_ENTERContent = default;
        private static bool _OP_MONITOR_ENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MONITOR_EXIT"/>
        /// </summary>
        public static int OP_MONITOR_EXIT { get { if (!_OP_MONITOR_EXITReady) { _OP_MONITOR_EXITContent = SGetField<int>(LocalBridgeClazz, "OP_MONITOR_EXIT"); _OP_MONITOR_EXITReady = true; } return _OP_MONITOR_EXITContent; } }
        private static int _OP_MONITOR_EXITContent = default;
        private static bool _OP_MONITOR_EXITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MOVE"/>
        /// </summary>
        public static int OP_MOVE { get { if (!_OP_MOVEReady) { _OP_MOVEContent = SGetField<int>(LocalBridgeClazz, "OP_MOVE"); _OP_MOVEReady = true; } return _OP_MOVEContent; } }
        private static int _OP_MOVEContent = default;
        private static bool _OP_MOVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MOVE_16"/>
        /// </summary>
        public static int OP_MOVE_16 { get { if (!_OP_MOVE_16Ready) { _OP_MOVE_16Content = SGetField<int>(LocalBridgeClazz, "OP_MOVE_16"); _OP_MOVE_16Ready = true; } return _OP_MOVE_16Content; } }
        private static int _OP_MOVE_16Content = default;
        private static bool _OP_MOVE_16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MOVE_EXCEPTION"/>
        /// </summary>
        public static int OP_MOVE_EXCEPTION { get { if (!_OP_MOVE_EXCEPTIONReady) { _OP_MOVE_EXCEPTIONContent = SGetField<int>(LocalBridgeClazz, "OP_MOVE_EXCEPTION"); _OP_MOVE_EXCEPTIONReady = true; } return _OP_MOVE_EXCEPTIONContent; } }
        private static int _OP_MOVE_EXCEPTIONContent = default;
        private static bool _OP_MOVE_EXCEPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MOVE_FROM16"/>
        /// </summary>
        public static int OP_MOVE_FROM16 { get { if (!_OP_MOVE_FROM16Ready) { _OP_MOVE_FROM16Content = SGetField<int>(LocalBridgeClazz, "OP_MOVE_FROM16"); _OP_MOVE_FROM16Ready = true; } return _OP_MOVE_FROM16Content; } }
        private static int _OP_MOVE_FROM16Content = default;
        private static bool _OP_MOVE_FROM16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MOVE_OBJECT"/>
        /// </summary>
        public static int OP_MOVE_OBJECT { get { if (!_OP_MOVE_OBJECTReady) { _OP_MOVE_OBJECTContent = SGetField<int>(LocalBridgeClazz, "OP_MOVE_OBJECT"); _OP_MOVE_OBJECTReady = true; } return _OP_MOVE_OBJECTContent; } }
        private static int _OP_MOVE_OBJECTContent = default;
        private static bool _OP_MOVE_OBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MOVE_OBJECT_16"/>
        /// </summary>
        public static int OP_MOVE_OBJECT_16 { get { if (!_OP_MOVE_OBJECT_16Ready) { _OP_MOVE_OBJECT_16Content = SGetField<int>(LocalBridgeClazz, "OP_MOVE_OBJECT_16"); _OP_MOVE_OBJECT_16Ready = true; } return _OP_MOVE_OBJECT_16Content; } }
        private static int _OP_MOVE_OBJECT_16Content = default;
        private static bool _OP_MOVE_OBJECT_16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MOVE_OBJECT_FROM16"/>
        /// </summary>
        public static int OP_MOVE_OBJECT_FROM16 { get { if (!_OP_MOVE_OBJECT_FROM16Ready) { _OP_MOVE_OBJECT_FROM16Content = SGetField<int>(LocalBridgeClazz, "OP_MOVE_OBJECT_FROM16"); _OP_MOVE_OBJECT_FROM16Ready = true; } return _OP_MOVE_OBJECT_FROM16Content; } }
        private static int _OP_MOVE_OBJECT_FROM16Content = default;
        private static bool _OP_MOVE_OBJECT_FROM16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MOVE_RESULT"/>
        /// </summary>
        public static int OP_MOVE_RESULT { get { if (!_OP_MOVE_RESULTReady) { _OP_MOVE_RESULTContent = SGetField<int>(LocalBridgeClazz, "OP_MOVE_RESULT"); _OP_MOVE_RESULTReady = true; } return _OP_MOVE_RESULTContent; } }
        private static int _OP_MOVE_RESULTContent = default;
        private static bool _OP_MOVE_RESULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MOVE_RESULT_OBJECT"/>
        /// </summary>
        public static int OP_MOVE_RESULT_OBJECT { get { if (!_OP_MOVE_RESULT_OBJECTReady) { _OP_MOVE_RESULT_OBJECTContent = SGetField<int>(LocalBridgeClazz, "OP_MOVE_RESULT_OBJECT"); _OP_MOVE_RESULT_OBJECTReady = true; } return _OP_MOVE_RESULT_OBJECTContent; } }
        private static int _OP_MOVE_RESULT_OBJECTContent = default;
        private static bool _OP_MOVE_RESULT_OBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MOVE_RESULT_WIDE"/>
        /// </summary>
        public static int OP_MOVE_RESULT_WIDE { get { if (!_OP_MOVE_RESULT_WIDEReady) { _OP_MOVE_RESULT_WIDEContent = SGetField<int>(LocalBridgeClazz, "OP_MOVE_RESULT_WIDE"); _OP_MOVE_RESULT_WIDEReady = true; } return _OP_MOVE_RESULT_WIDEContent; } }
        private static int _OP_MOVE_RESULT_WIDEContent = default;
        private static bool _OP_MOVE_RESULT_WIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MOVE_WIDE"/>
        /// </summary>
        public static int OP_MOVE_WIDE { get { if (!_OP_MOVE_WIDEReady) { _OP_MOVE_WIDEContent = SGetField<int>(LocalBridgeClazz, "OP_MOVE_WIDE"); _OP_MOVE_WIDEReady = true; } return _OP_MOVE_WIDEContent; } }
        private static int _OP_MOVE_WIDEContent = default;
        private static bool _OP_MOVE_WIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MOVE_WIDE_16"/>
        /// </summary>
        public static int OP_MOVE_WIDE_16 { get { if (!_OP_MOVE_WIDE_16Ready) { _OP_MOVE_WIDE_16Content = SGetField<int>(LocalBridgeClazz, "OP_MOVE_WIDE_16"); _OP_MOVE_WIDE_16Ready = true; } return _OP_MOVE_WIDE_16Content; } }
        private static int _OP_MOVE_WIDE_16Content = default;
        private static bool _OP_MOVE_WIDE_16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MOVE_WIDE_FROM16"/>
        /// </summary>
        public static int OP_MOVE_WIDE_FROM16 { get { if (!_OP_MOVE_WIDE_FROM16Ready) { _OP_MOVE_WIDE_FROM16Content = SGetField<int>(LocalBridgeClazz, "OP_MOVE_WIDE_FROM16"); _OP_MOVE_WIDE_FROM16Ready = true; } return _OP_MOVE_WIDE_FROM16Content; } }
        private static int _OP_MOVE_WIDE_FROM16Content = default;
        private static bool _OP_MOVE_WIDE_FROM16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MUL_DOUBLE"/>
        /// </summary>
        public static int OP_MUL_DOUBLE { get { if (!_OP_MUL_DOUBLEReady) { _OP_MUL_DOUBLEContent = SGetField<int>(LocalBridgeClazz, "OP_MUL_DOUBLE"); _OP_MUL_DOUBLEReady = true; } return _OP_MUL_DOUBLEContent; } }
        private static int _OP_MUL_DOUBLEContent = default;
        private static bool _OP_MUL_DOUBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MUL_DOUBLE_2ADDR"/>
        /// </summary>
        public static int OP_MUL_DOUBLE_2ADDR { get { if (!_OP_MUL_DOUBLE_2ADDRReady) { _OP_MUL_DOUBLE_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_MUL_DOUBLE_2ADDR"); _OP_MUL_DOUBLE_2ADDRReady = true; } return _OP_MUL_DOUBLE_2ADDRContent; } }
        private static int _OP_MUL_DOUBLE_2ADDRContent = default;
        private static bool _OP_MUL_DOUBLE_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MUL_FLOAT"/>
        /// </summary>
        public static int OP_MUL_FLOAT { get { if (!_OP_MUL_FLOATReady) { _OP_MUL_FLOATContent = SGetField<int>(LocalBridgeClazz, "OP_MUL_FLOAT"); _OP_MUL_FLOATReady = true; } return _OP_MUL_FLOATContent; } }
        private static int _OP_MUL_FLOATContent = default;
        private static bool _OP_MUL_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MUL_FLOAT_2ADDR"/>
        /// </summary>
        public static int OP_MUL_FLOAT_2ADDR { get { if (!_OP_MUL_FLOAT_2ADDRReady) { _OP_MUL_FLOAT_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_MUL_FLOAT_2ADDR"); _OP_MUL_FLOAT_2ADDRReady = true; } return _OP_MUL_FLOAT_2ADDRContent; } }
        private static int _OP_MUL_FLOAT_2ADDRContent = default;
        private static bool _OP_MUL_FLOAT_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MUL_INT"/>
        /// </summary>
        public static int OP_MUL_INT { get { if (!_OP_MUL_INTReady) { _OP_MUL_INTContent = SGetField<int>(LocalBridgeClazz, "OP_MUL_INT"); _OP_MUL_INTReady = true; } return _OP_MUL_INTContent; } }
        private static int _OP_MUL_INTContent = default;
        private static bool _OP_MUL_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MUL_INT_2ADDR"/>
        /// </summary>
        public static int OP_MUL_INT_2ADDR { get { if (!_OP_MUL_INT_2ADDRReady) { _OP_MUL_INT_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_MUL_INT_2ADDR"); _OP_MUL_INT_2ADDRReady = true; } return _OP_MUL_INT_2ADDRContent; } }
        private static int _OP_MUL_INT_2ADDRContent = default;
        private static bool _OP_MUL_INT_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MUL_INT_LIT16"/>
        /// </summary>
        public static int OP_MUL_INT_LIT16 { get { if (!_OP_MUL_INT_LIT16Ready) { _OP_MUL_INT_LIT16Content = SGetField<int>(LocalBridgeClazz, "OP_MUL_INT_LIT16"); _OP_MUL_INT_LIT16Ready = true; } return _OP_MUL_INT_LIT16Content; } }
        private static int _OP_MUL_INT_LIT16Content = default;
        private static bool _OP_MUL_INT_LIT16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MUL_INT_LIT8"/>
        /// </summary>
        public static int OP_MUL_INT_LIT8 { get { if (!_OP_MUL_INT_LIT8Ready) { _OP_MUL_INT_LIT8Content = SGetField<int>(LocalBridgeClazz, "OP_MUL_INT_LIT8"); _OP_MUL_INT_LIT8Ready = true; } return _OP_MUL_INT_LIT8Content; } }
        private static int _OP_MUL_INT_LIT8Content = default;
        private static bool _OP_MUL_INT_LIT8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MUL_LONG"/>
        /// </summary>
        public static int OP_MUL_LONG { get { if (!_OP_MUL_LONGReady) { _OP_MUL_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_MUL_LONG"); _OP_MUL_LONGReady = true; } return _OP_MUL_LONGContent; } }
        private static int _OP_MUL_LONGContent = default;
        private static bool _OP_MUL_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_MUL_LONG_2ADDR"/>
        /// </summary>
        public static int OP_MUL_LONG_2ADDR { get { if (!_OP_MUL_LONG_2ADDRReady) { _OP_MUL_LONG_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_MUL_LONG_2ADDR"); _OP_MUL_LONG_2ADDRReady = true; } return _OP_MUL_LONG_2ADDRContent; } }
        private static int _OP_MUL_LONG_2ADDRContent = default;
        private static bool _OP_MUL_LONG_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_NEG_DOUBLE"/>
        /// </summary>
        public static int OP_NEG_DOUBLE { get { if (!_OP_NEG_DOUBLEReady) { _OP_NEG_DOUBLEContent = SGetField<int>(LocalBridgeClazz, "OP_NEG_DOUBLE"); _OP_NEG_DOUBLEReady = true; } return _OP_NEG_DOUBLEContent; } }
        private static int _OP_NEG_DOUBLEContent = default;
        private static bool _OP_NEG_DOUBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_NEG_FLOAT"/>
        /// </summary>
        public static int OP_NEG_FLOAT { get { if (!_OP_NEG_FLOATReady) { _OP_NEG_FLOATContent = SGetField<int>(LocalBridgeClazz, "OP_NEG_FLOAT"); _OP_NEG_FLOATReady = true; } return _OP_NEG_FLOATContent; } }
        private static int _OP_NEG_FLOATContent = default;
        private static bool _OP_NEG_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_NEG_INT"/>
        /// </summary>
        public static int OP_NEG_INT { get { if (!_OP_NEG_INTReady) { _OP_NEG_INTContent = SGetField<int>(LocalBridgeClazz, "OP_NEG_INT"); _OP_NEG_INTReady = true; } return _OP_NEG_INTContent; } }
        private static int _OP_NEG_INTContent = default;
        private static bool _OP_NEG_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_NEG_LONG"/>
        /// </summary>
        public static int OP_NEG_LONG { get { if (!_OP_NEG_LONGReady) { _OP_NEG_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_NEG_LONG"); _OP_NEG_LONGReady = true; } return _OP_NEG_LONGContent; } }
        private static int _OP_NEG_LONGContent = default;
        private static bool _OP_NEG_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_NEW_ARRAY"/>
        /// </summary>
        public static int OP_NEW_ARRAY { get { if (!_OP_NEW_ARRAYReady) { _OP_NEW_ARRAYContent = SGetField<int>(LocalBridgeClazz, "OP_NEW_ARRAY"); _OP_NEW_ARRAYReady = true; } return _OP_NEW_ARRAYContent; } }
        private static int _OP_NEW_ARRAYContent = default;
        private static bool _OP_NEW_ARRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_NEW_ARRAY_JUMBO"/>
        /// </summary>
        public static int OP_NEW_ARRAY_JUMBO { get { if (!_OP_NEW_ARRAY_JUMBOReady) { _OP_NEW_ARRAY_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_NEW_ARRAY_JUMBO"); _OP_NEW_ARRAY_JUMBOReady = true; } return _OP_NEW_ARRAY_JUMBOContent; } }
        private static int _OP_NEW_ARRAY_JUMBOContent = default;
        private static bool _OP_NEW_ARRAY_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_NEW_INSTANCE"/>
        /// </summary>
        public static int OP_NEW_INSTANCE { get { if (!_OP_NEW_INSTANCEReady) { _OP_NEW_INSTANCEContent = SGetField<int>(LocalBridgeClazz, "OP_NEW_INSTANCE"); _OP_NEW_INSTANCEReady = true; } return _OP_NEW_INSTANCEContent; } }
        private static int _OP_NEW_INSTANCEContent = default;
        private static bool _OP_NEW_INSTANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_NEW_INSTANCE_JUMBO"/>
        /// </summary>
        public static int OP_NEW_INSTANCE_JUMBO { get { if (!_OP_NEW_INSTANCE_JUMBOReady) { _OP_NEW_INSTANCE_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_NEW_INSTANCE_JUMBO"); _OP_NEW_INSTANCE_JUMBOReady = true; } return _OP_NEW_INSTANCE_JUMBOContent; } }
        private static int _OP_NEW_INSTANCE_JUMBOContent = default;
        private static bool _OP_NEW_INSTANCE_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_NOP"/>
        /// </summary>
        public static int OP_NOP { get { if (!_OP_NOPReady) { _OP_NOPContent = SGetField<int>(LocalBridgeClazz, "OP_NOP"); _OP_NOPReady = true; } return _OP_NOPContent; } }
        private static int _OP_NOPContent = default;
        private static bool _OP_NOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_NOT_INT"/>
        /// </summary>
        public static int OP_NOT_INT { get { if (!_OP_NOT_INTReady) { _OP_NOT_INTContent = SGetField<int>(LocalBridgeClazz, "OP_NOT_INT"); _OP_NOT_INTReady = true; } return _OP_NOT_INTContent; } }
        private static int _OP_NOT_INTContent = default;
        private static bool _OP_NOT_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_NOT_LONG"/>
        /// </summary>
        public static int OP_NOT_LONG { get { if (!_OP_NOT_LONGReady) { _OP_NOT_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_NOT_LONG"); _OP_NOT_LONGReady = true; } return _OP_NOT_LONGContent; } }
        private static int _OP_NOT_LONGContent = default;
        private static bool _OP_NOT_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_OR_INT"/>
        /// </summary>
        public static int OP_OR_INT { get { if (!_OP_OR_INTReady) { _OP_OR_INTContent = SGetField<int>(LocalBridgeClazz, "OP_OR_INT"); _OP_OR_INTReady = true; } return _OP_OR_INTContent; } }
        private static int _OP_OR_INTContent = default;
        private static bool _OP_OR_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_OR_INT_2ADDR"/>
        /// </summary>
        public static int OP_OR_INT_2ADDR { get { if (!_OP_OR_INT_2ADDRReady) { _OP_OR_INT_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_OR_INT_2ADDR"); _OP_OR_INT_2ADDRReady = true; } return _OP_OR_INT_2ADDRContent; } }
        private static int _OP_OR_INT_2ADDRContent = default;
        private static bool _OP_OR_INT_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_OR_INT_LIT16"/>
        /// </summary>
        public static int OP_OR_INT_LIT16 { get { if (!_OP_OR_INT_LIT16Ready) { _OP_OR_INT_LIT16Content = SGetField<int>(LocalBridgeClazz, "OP_OR_INT_LIT16"); _OP_OR_INT_LIT16Ready = true; } return _OP_OR_INT_LIT16Content; } }
        private static int _OP_OR_INT_LIT16Content = default;
        private static bool _OP_OR_INT_LIT16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_OR_INT_LIT8"/>
        /// </summary>
        public static int OP_OR_INT_LIT8 { get { if (!_OP_OR_INT_LIT8Ready) { _OP_OR_INT_LIT8Content = SGetField<int>(LocalBridgeClazz, "OP_OR_INT_LIT8"); _OP_OR_INT_LIT8Ready = true; } return _OP_OR_INT_LIT8Content; } }
        private static int _OP_OR_INT_LIT8Content = default;
        private static bool _OP_OR_INT_LIT8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_OR_LONG"/>
        /// </summary>
        public static int OP_OR_LONG { get { if (!_OP_OR_LONGReady) { _OP_OR_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_OR_LONG"); _OP_OR_LONGReady = true; } return _OP_OR_LONGContent; } }
        private static int _OP_OR_LONGContent = default;
        private static bool _OP_OR_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_OR_LONG_2ADDR"/>
        /// </summary>
        public static int OP_OR_LONG_2ADDR { get { if (!_OP_OR_LONG_2ADDRReady) { _OP_OR_LONG_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_OR_LONG_2ADDR"); _OP_OR_LONG_2ADDRReady = true; } return _OP_OR_LONG_2ADDRContent; } }
        private static int _OP_OR_LONG_2ADDRContent = default;
        private static bool _OP_OR_LONG_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_PACKED_SWITCH"/>
        /// </summary>
        public static int OP_PACKED_SWITCH { get { if (!_OP_PACKED_SWITCHReady) { _OP_PACKED_SWITCHContent = SGetField<int>(LocalBridgeClazz, "OP_PACKED_SWITCH"); _OP_PACKED_SWITCHReady = true; } return _OP_PACKED_SWITCHContent; } }
        private static int _OP_PACKED_SWITCHContent = default;
        private static bool _OP_PACKED_SWITCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_REM_DOUBLE"/>
        /// </summary>
        public static int OP_REM_DOUBLE { get { if (!_OP_REM_DOUBLEReady) { _OP_REM_DOUBLEContent = SGetField<int>(LocalBridgeClazz, "OP_REM_DOUBLE"); _OP_REM_DOUBLEReady = true; } return _OP_REM_DOUBLEContent; } }
        private static int _OP_REM_DOUBLEContent = default;
        private static bool _OP_REM_DOUBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_REM_DOUBLE_2ADDR"/>
        /// </summary>
        public static int OP_REM_DOUBLE_2ADDR { get { if (!_OP_REM_DOUBLE_2ADDRReady) { _OP_REM_DOUBLE_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_REM_DOUBLE_2ADDR"); _OP_REM_DOUBLE_2ADDRReady = true; } return _OP_REM_DOUBLE_2ADDRContent; } }
        private static int _OP_REM_DOUBLE_2ADDRContent = default;
        private static bool _OP_REM_DOUBLE_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_REM_FLOAT"/>
        /// </summary>
        public static int OP_REM_FLOAT { get { if (!_OP_REM_FLOATReady) { _OP_REM_FLOATContent = SGetField<int>(LocalBridgeClazz, "OP_REM_FLOAT"); _OP_REM_FLOATReady = true; } return _OP_REM_FLOATContent; } }
        private static int _OP_REM_FLOATContent = default;
        private static bool _OP_REM_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_REM_FLOAT_2ADDR"/>
        /// </summary>
        public static int OP_REM_FLOAT_2ADDR { get { if (!_OP_REM_FLOAT_2ADDRReady) { _OP_REM_FLOAT_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_REM_FLOAT_2ADDR"); _OP_REM_FLOAT_2ADDRReady = true; } return _OP_REM_FLOAT_2ADDRContent; } }
        private static int _OP_REM_FLOAT_2ADDRContent = default;
        private static bool _OP_REM_FLOAT_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_REM_INT"/>
        /// </summary>
        public static int OP_REM_INT { get { if (!_OP_REM_INTReady) { _OP_REM_INTContent = SGetField<int>(LocalBridgeClazz, "OP_REM_INT"); _OP_REM_INTReady = true; } return _OP_REM_INTContent; } }
        private static int _OP_REM_INTContent = default;
        private static bool _OP_REM_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_REM_INT_2ADDR"/>
        /// </summary>
        public static int OP_REM_INT_2ADDR { get { if (!_OP_REM_INT_2ADDRReady) { _OP_REM_INT_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_REM_INT_2ADDR"); _OP_REM_INT_2ADDRReady = true; } return _OP_REM_INT_2ADDRContent; } }
        private static int _OP_REM_INT_2ADDRContent = default;
        private static bool _OP_REM_INT_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_REM_INT_LIT16"/>
        /// </summary>
        public static int OP_REM_INT_LIT16 { get { if (!_OP_REM_INT_LIT16Ready) { _OP_REM_INT_LIT16Content = SGetField<int>(LocalBridgeClazz, "OP_REM_INT_LIT16"); _OP_REM_INT_LIT16Ready = true; } return _OP_REM_INT_LIT16Content; } }
        private static int _OP_REM_INT_LIT16Content = default;
        private static bool _OP_REM_INT_LIT16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_REM_INT_LIT8"/>
        /// </summary>
        public static int OP_REM_INT_LIT8 { get { if (!_OP_REM_INT_LIT8Ready) { _OP_REM_INT_LIT8Content = SGetField<int>(LocalBridgeClazz, "OP_REM_INT_LIT8"); _OP_REM_INT_LIT8Ready = true; } return _OP_REM_INT_LIT8Content; } }
        private static int _OP_REM_INT_LIT8Content = default;
        private static bool _OP_REM_INT_LIT8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_REM_LONG"/>
        /// </summary>
        public static int OP_REM_LONG { get { if (!_OP_REM_LONGReady) { _OP_REM_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_REM_LONG"); _OP_REM_LONGReady = true; } return _OP_REM_LONGContent; } }
        private static int _OP_REM_LONGContent = default;
        private static bool _OP_REM_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_REM_LONG_2ADDR"/>
        /// </summary>
        public static int OP_REM_LONG_2ADDR { get { if (!_OP_REM_LONG_2ADDRReady) { _OP_REM_LONG_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_REM_LONG_2ADDR"); _OP_REM_LONG_2ADDRReady = true; } return _OP_REM_LONG_2ADDRContent; } }
        private static int _OP_REM_LONG_2ADDRContent = default;
        private static bool _OP_REM_LONG_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_RETURN"/>
        /// </summary>
        public static int OP_RETURN { get { if (!_OP_RETURNReady) { _OP_RETURNContent = SGetField<int>(LocalBridgeClazz, "OP_RETURN"); _OP_RETURNReady = true; } return _OP_RETURNContent; } }
        private static int _OP_RETURNContent = default;
        private static bool _OP_RETURNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_RETURN_OBJECT"/>
        /// </summary>
        public static int OP_RETURN_OBJECT { get { if (!_OP_RETURN_OBJECTReady) { _OP_RETURN_OBJECTContent = SGetField<int>(LocalBridgeClazz, "OP_RETURN_OBJECT"); _OP_RETURN_OBJECTReady = true; } return _OP_RETURN_OBJECTContent; } }
        private static int _OP_RETURN_OBJECTContent = default;
        private static bool _OP_RETURN_OBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_RETURN_VOID"/>
        /// </summary>
        public static int OP_RETURN_VOID { get { if (!_OP_RETURN_VOIDReady) { _OP_RETURN_VOIDContent = SGetField<int>(LocalBridgeClazz, "OP_RETURN_VOID"); _OP_RETURN_VOIDReady = true; } return _OP_RETURN_VOIDContent; } }
        private static int _OP_RETURN_VOIDContent = default;
        private static bool _OP_RETURN_VOIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_RETURN_WIDE"/>
        /// </summary>
        public static int OP_RETURN_WIDE { get { if (!_OP_RETURN_WIDEReady) { _OP_RETURN_WIDEContent = SGetField<int>(LocalBridgeClazz, "OP_RETURN_WIDE"); _OP_RETURN_WIDEReady = true; } return _OP_RETURN_WIDEContent; } }
        private static int _OP_RETURN_WIDEContent = default;
        private static bool _OP_RETURN_WIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_RSUB_INT"/>
        /// </summary>
        public static int OP_RSUB_INT { get { if (!_OP_RSUB_INTReady) { _OP_RSUB_INTContent = SGetField<int>(LocalBridgeClazz, "OP_RSUB_INT"); _OP_RSUB_INTReady = true; } return _OP_RSUB_INTContent; } }
        private static int _OP_RSUB_INTContent = default;
        private static bool _OP_RSUB_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_RSUB_INT_LIT8"/>
        /// </summary>
        public static int OP_RSUB_INT_LIT8 { get { if (!_OP_RSUB_INT_LIT8Ready) { _OP_RSUB_INT_LIT8Content = SGetField<int>(LocalBridgeClazz, "OP_RSUB_INT_LIT8"); _OP_RSUB_INT_LIT8Ready = true; } return _OP_RSUB_INT_LIT8Content; } }
        private static int _OP_RSUB_INT_LIT8Content = default;
        private static bool _OP_RSUB_INT_LIT8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SGET"/>
        /// </summary>
        public static int OP_SGET { get { if (!_OP_SGETReady) { _OP_SGETContent = SGetField<int>(LocalBridgeClazz, "OP_SGET"); _OP_SGETReady = true; } return _OP_SGETContent; } }
        private static int _OP_SGETContent = default;
        private static bool _OP_SGETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SGET_BOOLEAN"/>
        /// </summary>
        public static int OP_SGET_BOOLEAN { get { if (!_OP_SGET_BOOLEANReady) { _OP_SGET_BOOLEANContent = SGetField<int>(LocalBridgeClazz, "OP_SGET_BOOLEAN"); _OP_SGET_BOOLEANReady = true; } return _OP_SGET_BOOLEANContent; } }
        private static int _OP_SGET_BOOLEANContent = default;
        private static bool _OP_SGET_BOOLEANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SGET_BOOLEAN_JUMBO"/>
        /// </summary>
        public static int OP_SGET_BOOLEAN_JUMBO { get { if (!_OP_SGET_BOOLEAN_JUMBOReady) { _OP_SGET_BOOLEAN_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_SGET_BOOLEAN_JUMBO"); _OP_SGET_BOOLEAN_JUMBOReady = true; } return _OP_SGET_BOOLEAN_JUMBOContent; } }
        private static int _OP_SGET_BOOLEAN_JUMBOContent = default;
        private static bool _OP_SGET_BOOLEAN_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SGET_BYTE"/>
        /// </summary>
        public static int OP_SGET_BYTE { get { if (!_OP_SGET_BYTEReady) { _OP_SGET_BYTEContent = SGetField<int>(LocalBridgeClazz, "OP_SGET_BYTE"); _OP_SGET_BYTEReady = true; } return _OP_SGET_BYTEContent; } }
        private static int _OP_SGET_BYTEContent = default;
        private static bool _OP_SGET_BYTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SGET_BYTE_JUMBO"/>
        /// </summary>
        public static int OP_SGET_BYTE_JUMBO { get { if (!_OP_SGET_BYTE_JUMBOReady) { _OP_SGET_BYTE_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_SGET_BYTE_JUMBO"); _OP_SGET_BYTE_JUMBOReady = true; } return _OP_SGET_BYTE_JUMBOContent; } }
        private static int _OP_SGET_BYTE_JUMBOContent = default;
        private static bool _OP_SGET_BYTE_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SGET_CHAR"/>
        /// </summary>
        public static int OP_SGET_CHAR { get { if (!_OP_SGET_CHARReady) { _OP_SGET_CHARContent = SGetField<int>(LocalBridgeClazz, "OP_SGET_CHAR"); _OP_SGET_CHARReady = true; } return _OP_SGET_CHARContent; } }
        private static int _OP_SGET_CHARContent = default;
        private static bool _OP_SGET_CHARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SGET_CHAR_JUMBO"/>
        /// </summary>
        public static int OP_SGET_CHAR_JUMBO { get { if (!_OP_SGET_CHAR_JUMBOReady) { _OP_SGET_CHAR_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_SGET_CHAR_JUMBO"); _OP_SGET_CHAR_JUMBOReady = true; } return _OP_SGET_CHAR_JUMBOContent; } }
        private static int _OP_SGET_CHAR_JUMBOContent = default;
        private static bool _OP_SGET_CHAR_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SGET_JUMBO"/>
        /// </summary>
        public static int OP_SGET_JUMBO { get { if (!_OP_SGET_JUMBOReady) { _OP_SGET_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_SGET_JUMBO"); _OP_SGET_JUMBOReady = true; } return _OP_SGET_JUMBOContent; } }
        private static int _OP_SGET_JUMBOContent = default;
        private static bool _OP_SGET_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SGET_OBJECT"/>
        /// </summary>
        public static int OP_SGET_OBJECT { get { if (!_OP_SGET_OBJECTReady) { _OP_SGET_OBJECTContent = SGetField<int>(LocalBridgeClazz, "OP_SGET_OBJECT"); _OP_SGET_OBJECTReady = true; } return _OP_SGET_OBJECTContent; } }
        private static int _OP_SGET_OBJECTContent = default;
        private static bool _OP_SGET_OBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SGET_OBJECT_JUMBO"/>
        /// </summary>
        public static int OP_SGET_OBJECT_JUMBO { get { if (!_OP_SGET_OBJECT_JUMBOReady) { _OP_SGET_OBJECT_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_SGET_OBJECT_JUMBO"); _OP_SGET_OBJECT_JUMBOReady = true; } return _OP_SGET_OBJECT_JUMBOContent; } }
        private static int _OP_SGET_OBJECT_JUMBOContent = default;
        private static bool _OP_SGET_OBJECT_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SGET_SHORT"/>
        /// </summary>
        public static int OP_SGET_SHORT { get { if (!_OP_SGET_SHORTReady) { _OP_SGET_SHORTContent = SGetField<int>(LocalBridgeClazz, "OP_SGET_SHORT"); _OP_SGET_SHORTReady = true; } return _OP_SGET_SHORTContent; } }
        private static int _OP_SGET_SHORTContent = default;
        private static bool _OP_SGET_SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SGET_SHORT_JUMBO"/>
        /// </summary>
        public static int OP_SGET_SHORT_JUMBO { get { if (!_OP_SGET_SHORT_JUMBOReady) { _OP_SGET_SHORT_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_SGET_SHORT_JUMBO"); _OP_SGET_SHORT_JUMBOReady = true; } return _OP_SGET_SHORT_JUMBOContent; } }
        private static int _OP_SGET_SHORT_JUMBOContent = default;
        private static bool _OP_SGET_SHORT_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SGET_WIDE"/>
        /// </summary>
        public static int OP_SGET_WIDE { get { if (!_OP_SGET_WIDEReady) { _OP_SGET_WIDEContent = SGetField<int>(LocalBridgeClazz, "OP_SGET_WIDE"); _OP_SGET_WIDEReady = true; } return _OP_SGET_WIDEContent; } }
        private static int _OP_SGET_WIDEContent = default;
        private static bool _OP_SGET_WIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SGET_WIDE_JUMBO"/>
        /// </summary>
        public static int OP_SGET_WIDE_JUMBO { get { if (!_OP_SGET_WIDE_JUMBOReady) { _OP_SGET_WIDE_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_SGET_WIDE_JUMBO"); _OP_SGET_WIDE_JUMBOReady = true; } return _OP_SGET_WIDE_JUMBOContent; } }
        private static int _OP_SGET_WIDE_JUMBOContent = default;
        private static bool _OP_SGET_WIDE_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SGET_WIDE_VOLATILE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_SGET_WIDE_VOLATILE { get { if (!_OP_SGET_WIDE_VOLATILEReady) { _OP_SGET_WIDE_VOLATILEContent = SGetField<int>(LocalBridgeClazz, "OP_SGET_WIDE_VOLATILE"); _OP_SGET_WIDE_VOLATILEReady = true; } return _OP_SGET_WIDE_VOLATILEContent; } }
        private static int _OP_SGET_WIDE_VOLATILEContent = default;
        private static bool _OP_SGET_WIDE_VOLATILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SHL_INT"/>
        /// </summary>
        public static int OP_SHL_INT { get { if (!_OP_SHL_INTReady) { _OP_SHL_INTContent = SGetField<int>(LocalBridgeClazz, "OP_SHL_INT"); _OP_SHL_INTReady = true; } return _OP_SHL_INTContent; } }
        private static int _OP_SHL_INTContent = default;
        private static bool _OP_SHL_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SHL_INT_2ADDR"/>
        /// </summary>
        public static int OP_SHL_INT_2ADDR { get { if (!_OP_SHL_INT_2ADDRReady) { _OP_SHL_INT_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_SHL_INT_2ADDR"); _OP_SHL_INT_2ADDRReady = true; } return _OP_SHL_INT_2ADDRContent; } }
        private static int _OP_SHL_INT_2ADDRContent = default;
        private static bool _OP_SHL_INT_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SHL_INT_LIT8"/>
        /// </summary>
        public static int OP_SHL_INT_LIT8 { get { if (!_OP_SHL_INT_LIT8Ready) { _OP_SHL_INT_LIT8Content = SGetField<int>(LocalBridgeClazz, "OP_SHL_INT_LIT8"); _OP_SHL_INT_LIT8Ready = true; } return _OP_SHL_INT_LIT8Content; } }
        private static int _OP_SHL_INT_LIT8Content = default;
        private static bool _OP_SHL_INT_LIT8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SHL_LONG"/>
        /// </summary>
        public static int OP_SHL_LONG { get { if (!_OP_SHL_LONGReady) { _OP_SHL_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_SHL_LONG"); _OP_SHL_LONGReady = true; } return _OP_SHL_LONGContent; } }
        private static int _OP_SHL_LONGContent = default;
        private static bool _OP_SHL_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SHL_LONG_2ADDR"/>
        /// </summary>
        public static int OP_SHL_LONG_2ADDR { get { if (!_OP_SHL_LONG_2ADDRReady) { _OP_SHL_LONG_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_SHL_LONG_2ADDR"); _OP_SHL_LONG_2ADDRReady = true; } return _OP_SHL_LONG_2ADDRContent; } }
        private static int _OP_SHL_LONG_2ADDRContent = default;
        private static bool _OP_SHL_LONG_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SHR_INT"/>
        /// </summary>
        public static int OP_SHR_INT { get { if (!_OP_SHR_INTReady) { _OP_SHR_INTContent = SGetField<int>(LocalBridgeClazz, "OP_SHR_INT"); _OP_SHR_INTReady = true; } return _OP_SHR_INTContent; } }
        private static int _OP_SHR_INTContent = default;
        private static bool _OP_SHR_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SHR_INT_2ADDR"/>
        /// </summary>
        public static int OP_SHR_INT_2ADDR { get { if (!_OP_SHR_INT_2ADDRReady) { _OP_SHR_INT_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_SHR_INT_2ADDR"); _OP_SHR_INT_2ADDRReady = true; } return _OP_SHR_INT_2ADDRContent; } }
        private static int _OP_SHR_INT_2ADDRContent = default;
        private static bool _OP_SHR_INT_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SHR_INT_LIT8"/>
        /// </summary>
        public static int OP_SHR_INT_LIT8 { get { if (!_OP_SHR_INT_LIT8Ready) { _OP_SHR_INT_LIT8Content = SGetField<int>(LocalBridgeClazz, "OP_SHR_INT_LIT8"); _OP_SHR_INT_LIT8Ready = true; } return _OP_SHR_INT_LIT8Content; } }
        private static int _OP_SHR_INT_LIT8Content = default;
        private static bool _OP_SHR_INT_LIT8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SHR_LONG"/>
        /// </summary>
        public static int OP_SHR_LONG { get { if (!_OP_SHR_LONGReady) { _OP_SHR_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_SHR_LONG"); _OP_SHR_LONGReady = true; } return _OP_SHR_LONGContent; } }
        private static int _OP_SHR_LONGContent = default;
        private static bool _OP_SHR_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SHR_LONG_2ADDR"/>
        /// </summary>
        public static int OP_SHR_LONG_2ADDR { get { if (!_OP_SHR_LONG_2ADDRReady) { _OP_SHR_LONG_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_SHR_LONG_2ADDR"); _OP_SHR_LONG_2ADDRReady = true; } return _OP_SHR_LONG_2ADDRContent; } }
        private static int _OP_SHR_LONG_2ADDRContent = default;
        private static bool _OP_SHR_LONG_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SPARSE_SWITCH"/>
        /// </summary>
        public static int OP_SPARSE_SWITCH { get { if (!_OP_SPARSE_SWITCHReady) { _OP_SPARSE_SWITCHContent = SGetField<int>(LocalBridgeClazz, "OP_SPARSE_SWITCH"); _OP_SPARSE_SWITCHReady = true; } return _OP_SPARSE_SWITCHContent; } }
        private static int _OP_SPARSE_SWITCHContent = default;
        private static bool _OP_SPARSE_SWITCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SPUT"/>
        /// </summary>
        public static int OP_SPUT { get { if (!_OP_SPUTReady) { _OP_SPUTContent = SGetField<int>(LocalBridgeClazz, "OP_SPUT"); _OP_SPUTReady = true; } return _OP_SPUTContent; } }
        private static int _OP_SPUTContent = default;
        private static bool _OP_SPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SPUT_BOOLEAN"/>
        /// </summary>
        public static int OP_SPUT_BOOLEAN { get { if (!_OP_SPUT_BOOLEANReady) { _OP_SPUT_BOOLEANContent = SGetField<int>(LocalBridgeClazz, "OP_SPUT_BOOLEAN"); _OP_SPUT_BOOLEANReady = true; } return _OP_SPUT_BOOLEANContent; } }
        private static int _OP_SPUT_BOOLEANContent = default;
        private static bool _OP_SPUT_BOOLEANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SPUT_BOOLEAN_JUMBO"/>
        /// </summary>
        public static int OP_SPUT_BOOLEAN_JUMBO { get { if (!_OP_SPUT_BOOLEAN_JUMBOReady) { _OP_SPUT_BOOLEAN_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_SPUT_BOOLEAN_JUMBO"); _OP_SPUT_BOOLEAN_JUMBOReady = true; } return _OP_SPUT_BOOLEAN_JUMBOContent; } }
        private static int _OP_SPUT_BOOLEAN_JUMBOContent = default;
        private static bool _OP_SPUT_BOOLEAN_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SPUT_BYTE"/>
        /// </summary>
        public static int OP_SPUT_BYTE { get { if (!_OP_SPUT_BYTEReady) { _OP_SPUT_BYTEContent = SGetField<int>(LocalBridgeClazz, "OP_SPUT_BYTE"); _OP_SPUT_BYTEReady = true; } return _OP_SPUT_BYTEContent; } }
        private static int _OP_SPUT_BYTEContent = default;
        private static bool _OP_SPUT_BYTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SPUT_BYTE_JUMBO"/>
        /// </summary>
        public static int OP_SPUT_BYTE_JUMBO { get { if (!_OP_SPUT_BYTE_JUMBOReady) { _OP_SPUT_BYTE_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_SPUT_BYTE_JUMBO"); _OP_SPUT_BYTE_JUMBOReady = true; } return _OP_SPUT_BYTE_JUMBOContent; } }
        private static int _OP_SPUT_BYTE_JUMBOContent = default;
        private static bool _OP_SPUT_BYTE_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SPUT_CHAR"/>
        /// </summary>
        public static int OP_SPUT_CHAR { get { if (!_OP_SPUT_CHARReady) { _OP_SPUT_CHARContent = SGetField<int>(LocalBridgeClazz, "OP_SPUT_CHAR"); _OP_SPUT_CHARReady = true; } return _OP_SPUT_CHARContent; } }
        private static int _OP_SPUT_CHARContent = default;
        private static bool _OP_SPUT_CHARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SPUT_CHAR_JUMBO"/>
        /// </summary>
        public static int OP_SPUT_CHAR_JUMBO { get { if (!_OP_SPUT_CHAR_JUMBOReady) { _OP_SPUT_CHAR_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_SPUT_CHAR_JUMBO"); _OP_SPUT_CHAR_JUMBOReady = true; } return _OP_SPUT_CHAR_JUMBOContent; } }
        private static int _OP_SPUT_CHAR_JUMBOContent = default;
        private static bool _OP_SPUT_CHAR_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SPUT_JUMBO"/>
        /// </summary>
        public static int OP_SPUT_JUMBO { get { if (!_OP_SPUT_JUMBOReady) { _OP_SPUT_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_SPUT_JUMBO"); _OP_SPUT_JUMBOReady = true; } return _OP_SPUT_JUMBOContent; } }
        private static int _OP_SPUT_JUMBOContent = default;
        private static bool _OP_SPUT_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SPUT_OBJECT"/>
        /// </summary>
        public static int OP_SPUT_OBJECT { get { if (!_OP_SPUT_OBJECTReady) { _OP_SPUT_OBJECTContent = SGetField<int>(LocalBridgeClazz, "OP_SPUT_OBJECT"); _OP_SPUT_OBJECTReady = true; } return _OP_SPUT_OBJECTContent; } }
        private static int _OP_SPUT_OBJECTContent = default;
        private static bool _OP_SPUT_OBJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SPUT_OBJECT_JUMBO"/>
        /// </summary>
        public static int OP_SPUT_OBJECT_JUMBO { get { if (!_OP_SPUT_OBJECT_JUMBOReady) { _OP_SPUT_OBJECT_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_SPUT_OBJECT_JUMBO"); _OP_SPUT_OBJECT_JUMBOReady = true; } return _OP_SPUT_OBJECT_JUMBOContent; } }
        private static int _OP_SPUT_OBJECT_JUMBOContent = default;
        private static bool _OP_SPUT_OBJECT_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SPUT_SHORT"/>
        /// </summary>
        public static int OP_SPUT_SHORT { get { if (!_OP_SPUT_SHORTReady) { _OP_SPUT_SHORTContent = SGetField<int>(LocalBridgeClazz, "OP_SPUT_SHORT"); _OP_SPUT_SHORTReady = true; } return _OP_SPUT_SHORTContent; } }
        private static int _OP_SPUT_SHORTContent = default;
        private static bool _OP_SPUT_SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SPUT_SHORT_JUMBO"/>
        /// </summary>
        public static int OP_SPUT_SHORT_JUMBO { get { if (!_OP_SPUT_SHORT_JUMBOReady) { _OP_SPUT_SHORT_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_SPUT_SHORT_JUMBO"); _OP_SPUT_SHORT_JUMBOReady = true; } return _OP_SPUT_SHORT_JUMBOContent; } }
        private static int _OP_SPUT_SHORT_JUMBOContent = default;
        private static bool _OP_SPUT_SHORT_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SPUT_WIDE"/>
        /// </summary>
        public static int OP_SPUT_WIDE { get { if (!_OP_SPUT_WIDEReady) { _OP_SPUT_WIDEContent = SGetField<int>(LocalBridgeClazz, "OP_SPUT_WIDE"); _OP_SPUT_WIDEReady = true; } return _OP_SPUT_WIDEContent; } }
        private static int _OP_SPUT_WIDEContent = default;
        private static bool _OP_SPUT_WIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SPUT_WIDE_JUMBO"/>
        /// </summary>
        public static int OP_SPUT_WIDE_JUMBO { get { if (!_OP_SPUT_WIDE_JUMBOReady) { _OP_SPUT_WIDE_JUMBOContent = SGetField<int>(LocalBridgeClazz, "OP_SPUT_WIDE_JUMBO"); _OP_SPUT_WIDE_JUMBOReady = true; } return _OP_SPUT_WIDE_JUMBOContent; } }
        private static int _OP_SPUT_WIDE_JUMBOContent = default;
        private static bool _OP_SPUT_WIDE_JUMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SPUT_WIDE_VOLATILE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_SPUT_WIDE_VOLATILE { get { if (!_OP_SPUT_WIDE_VOLATILEReady) { _OP_SPUT_WIDE_VOLATILEContent = SGetField<int>(LocalBridgeClazz, "OP_SPUT_WIDE_VOLATILE"); _OP_SPUT_WIDE_VOLATILEReady = true; } return _OP_SPUT_WIDE_VOLATILEContent; } }
        private static int _OP_SPUT_WIDE_VOLATILEContent = default;
        private static bool _OP_SPUT_WIDE_VOLATILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SUB_DOUBLE"/>
        /// </summary>
        public static int OP_SUB_DOUBLE { get { if (!_OP_SUB_DOUBLEReady) { _OP_SUB_DOUBLEContent = SGetField<int>(LocalBridgeClazz, "OP_SUB_DOUBLE"); _OP_SUB_DOUBLEReady = true; } return _OP_SUB_DOUBLEContent; } }
        private static int _OP_SUB_DOUBLEContent = default;
        private static bool _OP_SUB_DOUBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SUB_DOUBLE_2ADDR"/>
        /// </summary>
        public static int OP_SUB_DOUBLE_2ADDR { get { if (!_OP_SUB_DOUBLE_2ADDRReady) { _OP_SUB_DOUBLE_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_SUB_DOUBLE_2ADDR"); _OP_SUB_DOUBLE_2ADDRReady = true; } return _OP_SUB_DOUBLE_2ADDRContent; } }
        private static int _OP_SUB_DOUBLE_2ADDRContent = default;
        private static bool _OP_SUB_DOUBLE_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SUB_FLOAT"/>
        /// </summary>
        public static int OP_SUB_FLOAT { get { if (!_OP_SUB_FLOATReady) { _OP_SUB_FLOATContent = SGetField<int>(LocalBridgeClazz, "OP_SUB_FLOAT"); _OP_SUB_FLOATReady = true; } return _OP_SUB_FLOATContent; } }
        private static int _OP_SUB_FLOATContent = default;
        private static bool _OP_SUB_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SUB_FLOAT_2ADDR"/>
        /// </summary>
        public static int OP_SUB_FLOAT_2ADDR { get { if (!_OP_SUB_FLOAT_2ADDRReady) { _OP_SUB_FLOAT_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_SUB_FLOAT_2ADDR"); _OP_SUB_FLOAT_2ADDRReady = true; } return _OP_SUB_FLOAT_2ADDRContent; } }
        private static int _OP_SUB_FLOAT_2ADDRContent = default;
        private static bool _OP_SUB_FLOAT_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SUB_INT"/>
        /// </summary>
        public static int OP_SUB_INT { get { if (!_OP_SUB_INTReady) { _OP_SUB_INTContent = SGetField<int>(LocalBridgeClazz, "OP_SUB_INT"); _OP_SUB_INTReady = true; } return _OP_SUB_INTContent; } }
        private static int _OP_SUB_INTContent = default;
        private static bool _OP_SUB_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SUB_INT_2ADDR"/>
        /// </summary>
        public static int OP_SUB_INT_2ADDR { get { if (!_OP_SUB_INT_2ADDRReady) { _OP_SUB_INT_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_SUB_INT_2ADDR"); _OP_SUB_INT_2ADDRReady = true; } return _OP_SUB_INT_2ADDRContent; } }
        private static int _OP_SUB_INT_2ADDRContent = default;
        private static bool _OP_SUB_INT_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SUB_LONG"/>
        /// </summary>
        public static int OP_SUB_LONG { get { if (!_OP_SUB_LONGReady) { _OP_SUB_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_SUB_LONG"); _OP_SUB_LONGReady = true; } return _OP_SUB_LONGContent; } }
        private static int _OP_SUB_LONGContent = default;
        private static bool _OP_SUB_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_SUB_LONG_2ADDR"/>
        /// </summary>
        public static int OP_SUB_LONG_2ADDR { get { if (!_OP_SUB_LONG_2ADDRReady) { _OP_SUB_LONG_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_SUB_LONG_2ADDR"); _OP_SUB_LONG_2ADDRReady = true; } return _OP_SUB_LONG_2ADDRContent; } }
        private static int _OP_SUB_LONG_2ADDRContent = default;
        private static bool _OP_SUB_LONG_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_THROW"/>
        /// </summary>
        public static int OP_THROW { get { if (!_OP_THROWReady) { _OP_THROWContent = SGetField<int>(LocalBridgeClazz, "OP_THROW"); _OP_THROWReady = true; } return _OP_THROWContent; } }
        private static int _OP_THROWContent = default;
        private static bool _OP_THROWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_THROW_VERIFICATION_ERROR"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OP_THROW_VERIFICATION_ERROR { get { if (!_OP_THROW_VERIFICATION_ERRORReady) { _OP_THROW_VERIFICATION_ERRORContent = SGetField<int>(LocalBridgeClazz, "OP_THROW_VERIFICATION_ERROR"); _OP_THROW_VERIFICATION_ERRORReady = true; } return _OP_THROW_VERIFICATION_ERRORContent; } }
        private static int _OP_THROW_VERIFICATION_ERRORContent = default;
        private static bool _OP_THROW_VERIFICATION_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_USHR_INT"/>
        /// </summary>
        public static int OP_USHR_INT { get { if (!_OP_USHR_INTReady) { _OP_USHR_INTContent = SGetField<int>(LocalBridgeClazz, "OP_USHR_INT"); _OP_USHR_INTReady = true; } return _OP_USHR_INTContent; } }
        private static int _OP_USHR_INTContent = default;
        private static bool _OP_USHR_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_USHR_INT_2ADDR"/>
        /// </summary>
        public static int OP_USHR_INT_2ADDR { get { if (!_OP_USHR_INT_2ADDRReady) { _OP_USHR_INT_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_USHR_INT_2ADDR"); _OP_USHR_INT_2ADDRReady = true; } return _OP_USHR_INT_2ADDRContent; } }
        private static int _OP_USHR_INT_2ADDRContent = default;
        private static bool _OP_USHR_INT_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_USHR_INT_LIT8"/>
        /// </summary>
        public static int OP_USHR_INT_LIT8 { get { if (!_OP_USHR_INT_LIT8Ready) { _OP_USHR_INT_LIT8Content = SGetField<int>(LocalBridgeClazz, "OP_USHR_INT_LIT8"); _OP_USHR_INT_LIT8Ready = true; } return _OP_USHR_INT_LIT8Content; } }
        private static int _OP_USHR_INT_LIT8Content = default;
        private static bool _OP_USHR_INT_LIT8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_USHR_LONG"/>
        /// </summary>
        public static int OP_USHR_LONG { get { if (!_OP_USHR_LONGReady) { _OP_USHR_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_USHR_LONG"); _OP_USHR_LONGReady = true; } return _OP_USHR_LONGContent; } }
        private static int _OP_USHR_LONGContent = default;
        private static bool _OP_USHR_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_USHR_LONG_2ADDR"/>
        /// </summary>
        public static int OP_USHR_LONG_2ADDR { get { if (!_OP_USHR_LONG_2ADDRReady) { _OP_USHR_LONG_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_USHR_LONG_2ADDR"); _OP_USHR_LONG_2ADDRReady = true; } return _OP_USHR_LONG_2ADDRContent; } }
        private static int _OP_USHR_LONG_2ADDRContent = default;
        private static bool _OP_USHR_LONG_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_XOR_INT"/>
        /// </summary>
        public static int OP_XOR_INT { get { if (!_OP_XOR_INTReady) { _OP_XOR_INTContent = SGetField<int>(LocalBridgeClazz, "OP_XOR_INT"); _OP_XOR_INTReady = true; } return _OP_XOR_INTContent; } }
        private static int _OP_XOR_INTContent = default;
        private static bool _OP_XOR_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_XOR_INT_2ADDR"/>
        /// </summary>
        public static int OP_XOR_INT_2ADDR { get { if (!_OP_XOR_INT_2ADDRReady) { _OP_XOR_INT_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_XOR_INT_2ADDR"); _OP_XOR_INT_2ADDRReady = true; } return _OP_XOR_INT_2ADDRContent; } }
        private static int _OP_XOR_INT_2ADDRContent = default;
        private static bool _OP_XOR_INT_2ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_XOR_INT_LIT16"/>
        /// </summary>
        public static int OP_XOR_INT_LIT16 { get { if (!_OP_XOR_INT_LIT16Ready) { _OP_XOR_INT_LIT16Content = SGetField<int>(LocalBridgeClazz, "OP_XOR_INT_LIT16"); _OP_XOR_INT_LIT16Ready = true; } return _OP_XOR_INT_LIT16Content; } }
        private static int _OP_XOR_INT_LIT16Content = default;
        private static bool _OP_XOR_INT_LIT16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_XOR_INT_LIT8"/>
        /// </summary>
        public static int OP_XOR_INT_LIT8 { get { if (!_OP_XOR_INT_LIT8Ready) { _OP_XOR_INT_LIT8Content = SGetField<int>(LocalBridgeClazz, "OP_XOR_INT_LIT8"); _OP_XOR_INT_LIT8Ready = true; } return _OP_XOR_INT_LIT8Content; } }
        private static int _OP_XOR_INT_LIT8Content = default;
        private static bool _OP_XOR_INT_LIT8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_XOR_LONG"/>
        /// </summary>
        public static int OP_XOR_LONG { get { if (!_OP_XOR_LONGReady) { _OP_XOR_LONGContent = SGetField<int>(LocalBridgeClazz, "OP_XOR_LONG"); _OP_XOR_LONGReady = true; } return _OP_XOR_LONGContent; } }
        private static int _OP_XOR_LONGContent = default;
        private static bool _OP_XOR_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/dalvik/bytecode/Opcodes.html#OP_XOR_LONG_2ADDR"/>
        /// </summary>
        public static int OP_XOR_LONG_2ADDR { get { if (!_OP_XOR_LONG_2ADDRReady) { _OP_XOR_LONG_2ADDRContent = SGetField<int>(LocalBridgeClazz, "OP_XOR_LONG_2ADDR"); _OP_XOR_LONG_2ADDRReady = true; } return _OP_XOR_LONG_2ADDRContent; } }
        private static int _OP_XOR_LONG_2ADDRContent = default;
        private static bool _OP_XOR_LONG_2ADDRReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
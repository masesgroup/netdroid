/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Javax.Microedition.Khronos.Opengles
{
    #region GL11Ext declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html"/>
    /// </summary>
    public partial class GL11Ext : Javax.Microedition.Khronos.Opengles.GL
    {
        const string _bridgeClassName = "javax.microedition.khronos.opengles.GL11Ext";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("GL11Ext class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public GL11Ext() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("GL11Ext class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public GL11Ext(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region IGL11Ext
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IGL11Ext : Javax.Microedition.Khronos.Opengles.IGL
    {
        #region Instance methods
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion

    #region GL11Ext implementation
    public partial class GL11Ext : Javax.Microedition.Khronos.Opengles.IGL11Ext
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES"/>
        /// </summary>
        public static int GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES { get { if (!_GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OESReady) { _GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES"); _GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OESReady = true; } return _GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OESContent; } }
        private static int _GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OESContent = default;
        private static bool _GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#GL_MATRIX_INDEX_ARRAY_OES"/>
        /// </summary>
        public static int GL_MATRIX_INDEX_ARRAY_OES { get { if (!_GL_MATRIX_INDEX_ARRAY_OESReady) { _GL_MATRIX_INDEX_ARRAY_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MATRIX_INDEX_ARRAY_OES"); _GL_MATRIX_INDEX_ARRAY_OESReady = true; } return _GL_MATRIX_INDEX_ARRAY_OESContent; } }
        private static int _GL_MATRIX_INDEX_ARRAY_OESContent = default;
        private static bool _GL_MATRIX_INDEX_ARRAY_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#GL_MATRIX_INDEX_ARRAY_POINTER_OES"/>
        /// </summary>
        public static int GL_MATRIX_INDEX_ARRAY_POINTER_OES { get { if (!_GL_MATRIX_INDEX_ARRAY_POINTER_OESReady) { _GL_MATRIX_INDEX_ARRAY_POINTER_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MATRIX_INDEX_ARRAY_POINTER_OES"); _GL_MATRIX_INDEX_ARRAY_POINTER_OESReady = true; } return _GL_MATRIX_INDEX_ARRAY_POINTER_OESContent; } }
        private static int _GL_MATRIX_INDEX_ARRAY_POINTER_OESContent = default;
        private static bool _GL_MATRIX_INDEX_ARRAY_POINTER_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#GL_MATRIX_INDEX_ARRAY_SIZE_OES"/>
        /// </summary>
        public static int GL_MATRIX_INDEX_ARRAY_SIZE_OES { get { if (!_GL_MATRIX_INDEX_ARRAY_SIZE_OESReady) { _GL_MATRIX_INDEX_ARRAY_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MATRIX_INDEX_ARRAY_SIZE_OES"); _GL_MATRIX_INDEX_ARRAY_SIZE_OESReady = true; } return _GL_MATRIX_INDEX_ARRAY_SIZE_OESContent; } }
        private static int _GL_MATRIX_INDEX_ARRAY_SIZE_OESContent = default;
        private static bool _GL_MATRIX_INDEX_ARRAY_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#GL_MATRIX_INDEX_ARRAY_STRIDE_OES"/>
        /// </summary>
        public static int GL_MATRIX_INDEX_ARRAY_STRIDE_OES { get { if (!_GL_MATRIX_INDEX_ARRAY_STRIDE_OESReady) { _GL_MATRIX_INDEX_ARRAY_STRIDE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MATRIX_INDEX_ARRAY_STRIDE_OES"); _GL_MATRIX_INDEX_ARRAY_STRIDE_OESReady = true; } return _GL_MATRIX_INDEX_ARRAY_STRIDE_OESContent; } }
        private static int _GL_MATRIX_INDEX_ARRAY_STRIDE_OESContent = default;
        private static bool _GL_MATRIX_INDEX_ARRAY_STRIDE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#GL_MATRIX_INDEX_ARRAY_TYPE_OES"/>
        /// </summary>
        public static int GL_MATRIX_INDEX_ARRAY_TYPE_OES { get { if (!_GL_MATRIX_INDEX_ARRAY_TYPE_OESReady) { _GL_MATRIX_INDEX_ARRAY_TYPE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MATRIX_INDEX_ARRAY_TYPE_OES"); _GL_MATRIX_INDEX_ARRAY_TYPE_OESReady = true; } return _GL_MATRIX_INDEX_ARRAY_TYPE_OESContent; } }
        private static int _GL_MATRIX_INDEX_ARRAY_TYPE_OESContent = default;
        private static bool _GL_MATRIX_INDEX_ARRAY_TYPE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#GL_MATRIX_PALETTE_OES"/>
        /// </summary>
        public static int GL_MATRIX_PALETTE_OES { get { if (!_GL_MATRIX_PALETTE_OESReady) { _GL_MATRIX_PALETTE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MATRIX_PALETTE_OES"); _GL_MATRIX_PALETTE_OESReady = true; } return _GL_MATRIX_PALETTE_OESContent; } }
        private static int _GL_MATRIX_PALETTE_OESContent = default;
        private static bool _GL_MATRIX_PALETTE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#GL_MAX_PALETTE_MATRICES_OES"/>
        /// </summary>
        public static int GL_MAX_PALETTE_MATRICES_OES { get { if (!_GL_MAX_PALETTE_MATRICES_OESReady) { _GL_MAX_PALETTE_MATRICES_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_PALETTE_MATRICES_OES"); _GL_MAX_PALETTE_MATRICES_OESReady = true; } return _GL_MAX_PALETTE_MATRICES_OESContent; } }
        private static int _GL_MAX_PALETTE_MATRICES_OESContent = default;
        private static bool _GL_MAX_PALETTE_MATRICES_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#GL_MAX_VERTEX_UNITS_OES"/>
        /// </summary>
        public static int GL_MAX_VERTEX_UNITS_OES { get { if (!_GL_MAX_VERTEX_UNITS_OESReady) { _GL_MAX_VERTEX_UNITS_OESContent = SGetField<int>(LocalBridgeClazz, "GL_MAX_VERTEX_UNITS_OES"); _GL_MAX_VERTEX_UNITS_OESReady = true; } return _GL_MAX_VERTEX_UNITS_OESContent; } }
        private static int _GL_MAX_VERTEX_UNITS_OESContent = default;
        private static bool _GL_MAX_VERTEX_UNITS_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#GL_TEXTURE_CROP_RECT_OES"/>
        /// </summary>
        public static int GL_TEXTURE_CROP_RECT_OES { get { if (!_GL_TEXTURE_CROP_RECT_OESReady) { _GL_TEXTURE_CROP_RECT_OESContent = SGetField<int>(LocalBridgeClazz, "GL_TEXTURE_CROP_RECT_OES"); _GL_TEXTURE_CROP_RECT_OESReady = true; } return _GL_TEXTURE_CROP_RECT_OESContent; } }
        private static int _GL_TEXTURE_CROP_RECT_OESContent = default;
        private static bool _GL_TEXTURE_CROP_RECT_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#GL_WEIGHT_ARRAY_BUFFER_BINDING_OES"/>
        /// </summary>
        public static int GL_WEIGHT_ARRAY_BUFFER_BINDING_OES { get { if (!_GL_WEIGHT_ARRAY_BUFFER_BINDING_OESReady) { _GL_WEIGHT_ARRAY_BUFFER_BINDING_OESContent = SGetField<int>(LocalBridgeClazz, "GL_WEIGHT_ARRAY_BUFFER_BINDING_OES"); _GL_WEIGHT_ARRAY_BUFFER_BINDING_OESReady = true; } return _GL_WEIGHT_ARRAY_BUFFER_BINDING_OESContent; } }
        private static int _GL_WEIGHT_ARRAY_BUFFER_BINDING_OESContent = default;
        private static bool _GL_WEIGHT_ARRAY_BUFFER_BINDING_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#GL_WEIGHT_ARRAY_OES"/>
        /// </summary>
        public static int GL_WEIGHT_ARRAY_OES { get { if (!_GL_WEIGHT_ARRAY_OESReady) { _GL_WEIGHT_ARRAY_OESContent = SGetField<int>(LocalBridgeClazz, "GL_WEIGHT_ARRAY_OES"); _GL_WEIGHT_ARRAY_OESReady = true; } return _GL_WEIGHT_ARRAY_OESContent; } }
        private static int _GL_WEIGHT_ARRAY_OESContent = default;
        private static bool _GL_WEIGHT_ARRAY_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#GL_WEIGHT_ARRAY_POINTER_OES"/>
        /// </summary>
        public static int GL_WEIGHT_ARRAY_POINTER_OES { get { if (!_GL_WEIGHT_ARRAY_POINTER_OESReady) { _GL_WEIGHT_ARRAY_POINTER_OESContent = SGetField<int>(LocalBridgeClazz, "GL_WEIGHT_ARRAY_POINTER_OES"); _GL_WEIGHT_ARRAY_POINTER_OESReady = true; } return _GL_WEIGHT_ARRAY_POINTER_OESContent; } }
        private static int _GL_WEIGHT_ARRAY_POINTER_OESContent = default;
        private static bool _GL_WEIGHT_ARRAY_POINTER_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#GL_WEIGHT_ARRAY_SIZE_OES"/>
        /// </summary>
        public static int GL_WEIGHT_ARRAY_SIZE_OES { get { if (!_GL_WEIGHT_ARRAY_SIZE_OESReady) { _GL_WEIGHT_ARRAY_SIZE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_WEIGHT_ARRAY_SIZE_OES"); _GL_WEIGHT_ARRAY_SIZE_OESReady = true; } return _GL_WEIGHT_ARRAY_SIZE_OESContent; } }
        private static int _GL_WEIGHT_ARRAY_SIZE_OESContent = default;
        private static bool _GL_WEIGHT_ARRAY_SIZE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#GL_WEIGHT_ARRAY_STRIDE_OES"/>
        /// </summary>
        public static int GL_WEIGHT_ARRAY_STRIDE_OES { get { if (!_GL_WEIGHT_ARRAY_STRIDE_OESReady) { _GL_WEIGHT_ARRAY_STRIDE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_WEIGHT_ARRAY_STRIDE_OES"); _GL_WEIGHT_ARRAY_STRIDE_OESReady = true; } return _GL_WEIGHT_ARRAY_STRIDE_OESContent; } }
        private static int _GL_WEIGHT_ARRAY_STRIDE_OESContent = default;
        private static bool _GL_WEIGHT_ARRAY_STRIDE_OESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#GL_WEIGHT_ARRAY_TYPE_OES"/>
        /// </summary>
        public static int GL_WEIGHT_ARRAY_TYPE_OES { get { if (!_GL_WEIGHT_ARRAY_TYPE_OESReady) { _GL_WEIGHT_ARRAY_TYPE_OESContent = SGetField<int>(LocalBridgeClazz, "GL_WEIGHT_ARRAY_TYPE_OES"); _GL_WEIGHT_ARRAY_TYPE_OESReady = true; } return _GL_WEIGHT_ARRAY_TYPE_OESContent; } }
        private static int _GL_WEIGHT_ARRAY_TYPE_OESContent = default;
        private static bool _GL_WEIGHT_ARRAY_TYPE_OESReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glCurrentPaletteMatrixOES(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void GlCurrentPaletteMatrixOES(int arg0)
        {
            IExecuteWithSignature("glCurrentPaletteMatrixOES", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glDrawTexfOES(float,float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        public void GlDrawTexfOES(float arg0, float arg1, float arg2, float arg3, float arg4)
        {
            IExecute("glDrawTexfOES", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glDrawTexfvOES(float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void GlDrawTexfvOES(float[] arg0, int arg1)
        {
            IExecute("glDrawTexfvOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glDrawTexfvOES(java.nio.FloatBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.FloatBuffer"/></param>
        public void GlDrawTexfvOES(Java.Nio.FloatBuffer arg0)
        {
            IExecuteWithSignature("glDrawTexfvOES", "(Ljava/nio/FloatBuffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glDrawTexiOES(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public void GlDrawTexiOES(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            IExecute("glDrawTexiOES", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glDrawTexivOES(int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void GlDrawTexivOES(int[] arg0, int arg1)
        {
            IExecute("glDrawTexivOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glDrawTexivOES(java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.IntBuffer"/></param>
        public void GlDrawTexivOES(Java.Nio.IntBuffer arg0)
        {
            IExecuteWithSignature("glDrawTexivOES", "(Ljava/nio/IntBuffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glDrawTexsOES(short,short,short,short,short)"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <param name="arg1"><see cref="short"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        /// <param name="arg3"><see cref="short"/></param>
        /// <param name="arg4"><see cref="short"/></param>
        public void GlDrawTexsOES(short arg0, short arg1, short arg2, short arg3, short arg4)
        {
            IExecute("glDrawTexsOES", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glDrawTexsvOES(java.nio.ShortBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ShortBuffer"/></param>
        public void GlDrawTexsvOES(Java.Nio.ShortBuffer arg0)
        {
            IExecuteWithSignature("glDrawTexsvOES", "(Ljava/nio/ShortBuffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glDrawTexsvOES(short[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void GlDrawTexsvOES(short[] arg0, int arg1)
        {
            IExecute("glDrawTexsvOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glDrawTexxOES(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public void GlDrawTexxOES(int arg0, int arg1, int arg2, int arg3, int arg4)
        {
            IExecute("glDrawTexxOES", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glDrawTexxvOES(int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void GlDrawTexxvOES(int[] arg0, int arg1)
        {
            IExecute("glDrawTexxvOES", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glDrawTexxvOES(java.nio.IntBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.IntBuffer"/></param>
        public void GlDrawTexxvOES(Java.Nio.IntBuffer arg0)
        {
            IExecuteWithSignature("glDrawTexxvOES", "(Ljava/nio/IntBuffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glEnable(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void GlEnable(int arg0)
        {
            IExecuteWithSignature("glEnable", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glEnableClientState(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void GlEnableClientState(int arg0)
        {
            IExecuteWithSignature("glEnableClientState", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glLoadPaletteFromModelViewMatrixOES()"/>
        /// </summary>
        public void GlLoadPaletteFromModelViewMatrixOES()
        {
            IExecuteWithSignature("glLoadPaletteFromModelViewMatrixOES", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glMatrixIndexPointerOES(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void GlMatrixIndexPointerOES(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("glMatrixIndexPointerOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glMatrixIndexPointerOES(int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.Buffer"/></param>
        public void GlMatrixIndexPointerOES(int arg0, int arg1, int arg2, Java.Nio.Buffer arg3)
        {
            IExecute("glMatrixIndexPointerOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glTexParameterfv(int,int,float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void GlTexParameterfv(int arg0, int arg1, float[] arg2, int arg3)
        {
            IExecute("glTexParameterfv", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glWeightPointerOES(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void GlWeightPointerOES(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("glWeightPointerOES", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/javax/microedition/khronos/opengles/GL11Ext.html#glWeightPointerOES(int,int,int,java.nio.Buffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.Buffer"/></param>
        public void GlWeightPointerOES(int arg0, int arg1, int arg2, Java.Nio.Buffer arg3)
        {
            IExecute("glWeightPointerOES", arg0, arg1, arg2, arg3);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
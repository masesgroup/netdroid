/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Net
{
    #region MulticastSocket declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/java/net/MulticastSocket.html"/>
    /// </summary>
    public partial class MulticastSocket : Java.Net.DatagramSocket
    {
        const string _bridgeClassName = "java.net.MulticastSocket";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public MulticastSocket() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public MulticastSocket(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region MulticastSocket implementation
    public partial class MulticastSocket
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/net/MulticastSocket.html#%3Cinit%3E(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public MulticastSocket(int arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/net/MulticastSocket.html#%3Cinit%3E(java.net.SocketAddress)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Net.SocketAddress"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public MulticastSocket(Java.Net.SocketAddress arg0)
            : base(arg0)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/net/MulticastSocket.html#getLoopbackMode()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        /// <exception cref="Java.Net.SocketException"/>
        [global::System.Obsolete()]
        public bool GetLoopbackMode()
        {
            return IExecuteWithSignature<bool>("getLoopbackMode", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/net/MulticastSocket.html#getTTL()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        [global::System.Obsolete()]
        public byte GetTTL()
        {
            return IExecuteWithSignature<byte>("getTTL", "()B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/net/MulticastSocket.html#getTimeToLive()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public int GetTimeToLive()
        {
            return IExecuteWithSignature<int>("getTimeToLive", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/net/MulticastSocket.html#getInterface()"/>
        /// </summary>
        /// <returns><see cref="Java.Net.InetAddress"/></returns>
        /// <exception cref="Java.Net.SocketException"/>
        [global::System.Obsolete()]
        public Java.Net.InetAddress GetInterface()
        {
            return IExecuteWithSignature<Java.Net.InetAddress>("getInterface", "()Ljava/net/InetAddress;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/net/MulticastSocket.html#getNetworkInterface()"/>
        /// </summary>
        /// <returns><see cref="Java.Net.NetworkInterface"/></returns>
        /// <exception cref="Java.Net.SocketException"/>
        public Java.Net.NetworkInterface GetNetworkInterface()
        {
            return IExecuteWithSignature<Java.Net.NetworkInterface>("getNetworkInterface", "()Ljava/net/NetworkInterface;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/net/MulticastSocket.html#joinGroup(java.net.InetAddress)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Net.InetAddress"/></param>
        /// <exception cref="Java.Io.IOException"/>
        [global::System.Obsolete()]
        public void JoinGroup(Java.Net.InetAddress arg0)
        {
            IExecuteWithSignature("joinGroup", "(Ljava/net/InetAddress;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/net/MulticastSocket.html#leaveGroup(java.net.InetAddress)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Net.InetAddress"/></param>
        /// <exception cref="Java.Io.IOException"/>
        [global::System.Obsolete()]
        public void LeaveGroup(Java.Net.InetAddress arg0)
        {
            IExecuteWithSignature("leaveGroup", "(Ljava/net/InetAddress;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/net/MulticastSocket.html#send(java.net.DatagramPacket,byte)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Net.DatagramPacket"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <exception cref="Java.Io.IOException"/>
        [global::System.Obsolete()]
        public void Send(Java.Net.DatagramPacket arg0, byte arg1)
        {
            IExecuteWithSignature("send", "(Ljava/net/DatagramPacket;B)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/net/MulticastSocket.html#setInterface(java.net.InetAddress)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Net.InetAddress"/></param>
        /// <exception cref="Java.Net.SocketException"/>
        [global::System.Obsolete()]
        public void SetInterface(Java.Net.InetAddress arg0)
        {
            IExecuteWithSignature("setInterface", "(Ljava/net/InetAddress;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/net/MulticastSocket.html#setLoopbackMode(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <exception cref="Java.Net.SocketException"/>
        [global::System.Obsolete()]
        public void SetLoopbackMode(bool arg0)
        {
            IExecuteWithSignature("setLoopbackMode", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/net/MulticastSocket.html#setNetworkInterface(java.net.NetworkInterface)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Net.NetworkInterface"/></param>
        /// <exception cref="Java.Net.SocketException"/>
        public void SetNetworkInterface(Java.Net.NetworkInterface arg0)
        {
            IExecuteWithSignature("setNetworkInterface", "(Ljava/net/NetworkInterface;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/net/MulticastSocket.html#setTimeToLive(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void SetTimeToLive(int arg0)
        {
            IExecuteWithSignature("setTimeToLive", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/net/MulticastSocket.html#setTTL(byte)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <exception cref="Java.Io.IOException"/>
        [global::System.Obsolete()]
        public void SetTTL(byte arg0)
        {
            IExecuteWithSignature("setTTL", "(B)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Util.Jar
{
    #region Pack200
    public partial class Pack200
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.html#newUnpacker()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Jar.Pack200.Unpacker"/></returns>
        public static Java.Util.Jar.Pack200.Unpacker NewUnpacker()
        {
            return SExecuteWithSignature<Java.Util.Jar.Pack200.Unpacker>(LocalBridgeClazz, "newUnpacker", "()Ljava/util/jar/Pack200$Unpacker;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.html#newPacker()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Jar.Pack200.Packer"/></returns>
        public static Java.Util.Jar.Pack200.Packer NewPacker()
        {
            return SExecuteWithSignature<Java.Util.Jar.Pack200.Packer>(LocalBridgeClazz, "newPacker", "()Ljava/util/jar/Pack200$Packer;");
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region Packer
        public partial class Packer
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#CLASS_ATTRIBUTE_PFX"/>
            /// </summary>
            public static Java.Lang.String CLASS_ATTRIBUTE_PFX { get { if (!_CLASS_ATTRIBUTE_PFXReady) { _CLASS_ATTRIBUTE_PFXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLASS_ATTRIBUTE_PFX"); _CLASS_ATTRIBUTE_PFXReady = true; } return _CLASS_ATTRIBUTE_PFXContent; } }
            private static Java.Lang.String _CLASS_ATTRIBUTE_PFXContent = default;
            private static bool _CLASS_ATTRIBUTE_PFXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#CODE_ATTRIBUTE_PFX"/>
            /// </summary>
            public static Java.Lang.String CODE_ATTRIBUTE_PFX { get { if (!_CODE_ATTRIBUTE_PFXReady) { _CODE_ATTRIBUTE_PFXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CODE_ATTRIBUTE_PFX"); _CODE_ATTRIBUTE_PFXReady = true; } return _CODE_ATTRIBUTE_PFXContent; } }
            private static Java.Lang.String _CODE_ATTRIBUTE_PFXContent = default;
            private static bool _CODE_ATTRIBUTE_PFXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#DEFLATE_HINT"/>
            /// </summary>
            public static Java.Lang.String DEFLATE_HINT { get { if (!_DEFLATE_HINTReady) { _DEFLATE_HINTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFLATE_HINT"); _DEFLATE_HINTReady = true; } return _DEFLATE_HINTContent; } }
            private static Java.Lang.String _DEFLATE_HINTContent = default;
            private static bool _DEFLATE_HINTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#EFFORT"/>
            /// </summary>
            public static Java.Lang.String EFFORT { get { if (!_EFFORTReady) { _EFFORTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EFFORT"); _EFFORTReady = true; } return _EFFORTContent; } }
            private static Java.Lang.String _EFFORTContent = default;
            private static bool _EFFORTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#ERROR"/>
            /// </summary>
            public static Java.Lang.String ERROR { get { if (!_ERRORReady) { _ERRORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ERROR"); _ERRORReady = true; } return _ERRORContent; } }
            private static Java.Lang.String _ERRORContent = default;
            private static bool _ERRORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#FALSE"/>
            /// </summary>
            public static Java.Lang.String FALSE { get { if (!_FALSEReady) { _FALSEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FALSE"); _FALSEReady = true; } return _FALSEContent; } }
            private static Java.Lang.String _FALSEContent = default;
            private static bool _FALSEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#FIELD_ATTRIBUTE_PFX"/>
            /// </summary>
            public static Java.Lang.String FIELD_ATTRIBUTE_PFX { get { if (!_FIELD_ATTRIBUTE_PFXReady) { _FIELD_ATTRIBUTE_PFXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FIELD_ATTRIBUTE_PFX"); _FIELD_ATTRIBUTE_PFXReady = true; } return _FIELD_ATTRIBUTE_PFXContent; } }
            private static Java.Lang.String _FIELD_ATTRIBUTE_PFXContent = default;
            private static bool _FIELD_ATTRIBUTE_PFXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#KEEP"/>
            /// </summary>
            public static Java.Lang.String KEEP { get { if (!_KEEPReady) { _KEEPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEEP"); _KEEPReady = true; } return _KEEPContent; } }
            private static Java.Lang.String _KEEPContent = default;
            private static bool _KEEPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#KEEP_FILE_ORDER"/>
            /// </summary>
            public static Java.Lang.String KEEP_FILE_ORDER { get { if (!_KEEP_FILE_ORDERReady) { _KEEP_FILE_ORDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEEP_FILE_ORDER"); _KEEP_FILE_ORDERReady = true; } return _KEEP_FILE_ORDERContent; } }
            private static Java.Lang.String _KEEP_FILE_ORDERContent = default;
            private static bool _KEEP_FILE_ORDERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#LATEST"/>
            /// </summary>
            public static Java.Lang.String LATEST { get { if (!_LATESTReady) { _LATESTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LATEST"); _LATESTReady = true; } return _LATESTContent; } }
            private static Java.Lang.String _LATESTContent = default;
            private static bool _LATESTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#METHOD_ATTRIBUTE_PFX"/>
            /// </summary>
            public static Java.Lang.String METHOD_ATTRIBUTE_PFX { get { if (!_METHOD_ATTRIBUTE_PFXReady) { _METHOD_ATTRIBUTE_PFXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METHOD_ATTRIBUTE_PFX"); _METHOD_ATTRIBUTE_PFXReady = true; } return _METHOD_ATTRIBUTE_PFXContent; } }
            private static Java.Lang.String _METHOD_ATTRIBUTE_PFXContent = default;
            private static bool _METHOD_ATTRIBUTE_PFXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#MODIFICATION_TIME"/>
            /// </summary>
            public static Java.Lang.String MODIFICATION_TIME { get { if (!_MODIFICATION_TIMEReady) { _MODIFICATION_TIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MODIFICATION_TIME"); _MODIFICATION_TIMEReady = true; } return _MODIFICATION_TIMEContent; } }
            private static Java.Lang.String _MODIFICATION_TIMEContent = default;
            private static bool _MODIFICATION_TIMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#PASS"/>
            /// </summary>
            public static Java.Lang.String PASS { get { if (!_PASSReady) { _PASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PASS"); _PASSReady = true; } return _PASSContent; } }
            private static Java.Lang.String _PASSContent = default;
            private static bool _PASSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#PASS_FILE_PFX"/>
            /// </summary>
            public static Java.Lang.String PASS_FILE_PFX { get { if (!_PASS_FILE_PFXReady) { _PASS_FILE_PFXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PASS_FILE_PFX"); _PASS_FILE_PFXReady = true; } return _PASS_FILE_PFXContent; } }
            private static Java.Lang.String _PASS_FILE_PFXContent = default;
            private static bool _PASS_FILE_PFXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#PROGRESS"/>
            /// </summary>
            public static Java.Lang.String PROGRESS { get { if (!_PROGRESSReady) { _PROGRESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROGRESS"); _PROGRESSReady = true; } return _PROGRESSContent; } }
            private static Java.Lang.String _PROGRESSContent = default;
            private static bool _PROGRESSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#SEGMENT_LIMIT"/>
            /// </summary>
            public static Java.Lang.String SEGMENT_LIMIT { get { if (!_SEGMENT_LIMITReady) { _SEGMENT_LIMITContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SEGMENT_LIMIT"); _SEGMENT_LIMITReady = true; } return _SEGMENT_LIMITContent; } }
            private static Java.Lang.String _SEGMENT_LIMITContent = default;
            private static bool _SEGMENT_LIMITReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#STRIP"/>
            /// </summary>
            public static Java.Lang.String STRIP { get { if (!_STRIPReady) { _STRIPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRIP"); _STRIPReady = true; } return _STRIPContent; } }
            private static Java.Lang.String _STRIPContent = default;
            private static bool _STRIPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#TRUE"/>
            /// </summary>
            public static Java.Lang.String TRUE { get { if (!_TRUEReady) { _TRUEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TRUE"); _TRUEReady = true; } return _TRUEContent; } }
            private static Java.Lang.String _TRUEContent = default;
            private static bool _TRUEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#UNKNOWN_ATTRIBUTE"/>
            /// </summary>
            public static Java.Lang.String UNKNOWN_ATTRIBUTE { get { if (!_UNKNOWN_ATTRIBUTEReady) { _UNKNOWN_ATTRIBUTEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "UNKNOWN_ATTRIBUTE"); _UNKNOWN_ATTRIBUTEReady = true; } return _UNKNOWN_ATTRIBUTEContent; } }
            private static Java.Lang.String _UNKNOWN_ATTRIBUTEContent = default;
            private static bool _UNKNOWN_ATTRIBUTEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#properties()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.SortedMap"/></returns>
            public Java.Util.SortedMap<Java.Lang.String, Java.Lang.String> Properties()
            {
                return IExecuteWithSignature<Java.Util.SortedMap<Java.Lang.String, Java.Lang.String>>("properties", "()Ljava/util/SortedMap;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#pack(java.util.jar.JarFile,java.io.OutputStream)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Jar.JarFile"/></param>
            /// <param name="arg1"><see cref="Java.Io.OutputStream"/></param>
            /// <exception cref="Java.Io.IOException"/>
            public void Pack(Java.Util.Jar.JarFile arg0, Java.Io.OutputStream arg1)
            {
                IExecute("pack", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Packer.html#pack(java.util.jar.JarInputStream,java.io.OutputStream)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Jar.JarInputStream"/></param>
            /// <param name="arg1"><see cref="Java.Io.OutputStream"/></param>
            /// <exception cref="Java.Io.IOException"/>
            public void Pack(Java.Util.Jar.JarInputStream arg0, Java.Io.OutputStream arg1)
            {
                IExecute("pack", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Unpacker
        public partial class Unpacker
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#DEFLATE_HINT"/>
            /// </summary>
            public static Java.Lang.String DEFLATE_HINT { get { if (!_DEFLATE_HINTReady) { _DEFLATE_HINTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFLATE_HINT"); _DEFLATE_HINTReady = true; } return _DEFLATE_HINTContent; } }
            private static Java.Lang.String _DEFLATE_HINTContent = default;
            private static bool _DEFLATE_HINTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#FALSE"/>
            /// </summary>
            public static Java.Lang.String FALSE { get { if (!_FALSEReady) { _FALSEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FALSE"); _FALSEReady = true; } return _FALSEContent; } }
            private static Java.Lang.String _FALSEContent = default;
            private static bool _FALSEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#KEEP"/>
            /// </summary>
            public static Java.Lang.String KEEP { get { if (!_KEEPReady) { _KEEPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEEP"); _KEEPReady = true; } return _KEEPContent; } }
            private static Java.Lang.String _KEEPContent = default;
            private static bool _KEEPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#PROGRESS"/>
            /// </summary>
            public static Java.Lang.String PROGRESS { get { if (!_PROGRESSReady) { _PROGRESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROGRESS"); _PROGRESSReady = true; } return _PROGRESSContent; } }
            private static Java.Lang.String _PROGRESSContent = default;
            private static bool _PROGRESSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#TRUE"/>
            /// </summary>
            public static Java.Lang.String TRUE { get { if (!_TRUEReady) { _TRUEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TRUE"); _TRUEReady = true; } return _TRUEContent; } }
            private static Java.Lang.String _TRUEContent = default;
            private static bool _TRUEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#properties()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.SortedMap"/></returns>
            public Java.Util.SortedMap<Java.Lang.String, Java.Lang.String> Properties()
            {
                return IExecuteWithSignature<Java.Util.SortedMap<Java.Lang.String, Java.Lang.String>>("properties", "()Ljava/util/SortedMap;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#unpack(java.io.File,java.util.jar.JarOutputStream)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Io.File"/></param>
            /// <param name="arg1"><see cref="Java.Util.Jar.JarOutputStream"/></param>
            /// <exception cref="Java.Io.IOException"/>
            public void Unpack(Java.Io.File arg0, Java.Util.Jar.JarOutputStream arg1)
            {
                IExecute("unpack", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/java/util/jar/Pack200.Unpacker.html#unpack(java.io.InputStream,java.util.jar.JarOutputStream)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
            /// <param name="arg1"><see cref="Java.Util.Jar.JarOutputStream"/></param>
            /// <exception cref="Java.Io.IOException"/>
            public void Unpack(Java.Io.InputStream arg0, Java.Util.Jar.JarOutputStream arg1)
            {
                IExecute("unpack", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
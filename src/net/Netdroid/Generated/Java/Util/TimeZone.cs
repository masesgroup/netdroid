/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Util
{
    #region TimeZone
    public partial class TimeZone : Java.Io.ISerializable, Java.Lang.ICloneable
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Java.Util.TimeZone"/> to <see cref="Java.Io.Serializable"/>
        /// </summary>
        public static implicit operator Java.Io.Serializable(Java.Util.TimeZone t) => t.Cast<Java.Io.Serializable>();
        /// <summary>
        /// Converter from <see cref="Java.Util.TimeZone"/> to <see cref="Java.Lang.Cloneable"/>
        /// </summary>
        public static implicit operator Java.Lang.Cloneable(Java.Util.TimeZone t) => t.Cast<Java.Lang.Cloneable>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#LONG"/>
        /// </summary>
        public static int LONG { get { if (!_LONGReady) { _LONGContent = SGetField<int>(LocalBridgeClazz, "LONG"); _LONGReady = true; } return _LONGContent; } }
        private static int _LONGContent = default;
        private static bool _LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#SHORT"/>
        /// </summary>
        public static int SHORT { get { if (!_SHORTReady) { _SHORTContent = SGetField<int>(LocalBridgeClazz, "SHORT"); _SHORTReady = true; } return _SHORTContent; } }
        private static int _SHORTContent = default;
        private static bool _SHORTReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#getDefault()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.TimeZone"/></returns>
        public static Java.Util.TimeZone GetDefault()
        {
            return SExecuteWithSignature<Java.Util.TimeZone>(LocalBridgeClazz, "getDefault", "()Ljava/util/TimeZone;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#getTimeZone(java.time.ZoneId)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Time.ZoneId"/></param>
        /// <returns><see cref="Java.Util.TimeZone"/></returns>
        public static Java.Util.TimeZone GetTimeZone(Java.Time.ZoneId arg0)
        {
            return SExecuteWithSignature<Java.Util.TimeZone>(LocalBridgeClazz, "getTimeZone", "(Ljava/time/ZoneId;)Ljava/util/TimeZone;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#getAvailableIDs()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String[] GetAvailableIDs()
        {
            return SExecuteWithSignatureArray<Java.Lang.String>(LocalBridgeClazz, "getAvailableIDs", "()[Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#getAvailableIDs(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String[] GetAvailableIDs(int arg0)
        {
            return SExecuteWithSignatureArray<Java.Lang.String>(LocalBridgeClazz, "getAvailableIDs", "(I)[Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#getTimeZone(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.TimeZone"/></returns>
        public static Java.Util.TimeZone GetTimeZone(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Java.Util.TimeZone>(LocalBridgeClazz, "getTimeZone", "(Ljava/lang/String;)Ljava/util/TimeZone;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#setDefault(java.util.TimeZone)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.TimeZone"/></param>
        public static void SetDefault(Java.Util.TimeZone arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setDefault", "(Ljava/util/TimeZone;)V", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#inDaylightTime(java.util.Date)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Date"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool InDaylightTime(Java.Util.Date arg0)
        {
            return IExecuteWithSignature<bool>("inDaylightTime", "(Ljava/util/Date;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#useDaylightTime()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool UseDaylightTime()
        {
            return IExecuteWithSignature<bool>("useDaylightTime", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#getOffset(int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetOffset(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5)
        {
            return IExecute<int>("getOffset", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#getRawOffset()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRawOffset()
        {
            return IExecuteWithSignature<int>("getRawOffset", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#setRawOffset(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetRawOffset(int arg0)
        {
            IExecuteWithSignature("setRawOffset", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#hasSameRules(java.util.TimeZone)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.TimeZone"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasSameRules(Java.Util.TimeZone arg0)
        {
            return IExecuteWithSignature<bool>("hasSameRules", "(Ljava/util/TimeZone;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#observesDaylightTime()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool ObservesDaylightTime()
        {
            return IExecuteWithSignature<bool>("observesDaylightTime", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#getDisplayName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDisplayName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getDisplayName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#getDisplayName(boolean,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDisplayName(bool arg0, int arg1)
        {
            return IExecute<Java.Lang.String>("getDisplayName", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#getDisplayName(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDisplayName(Java.Util.Locale arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getDisplayName", "(Ljava/util/Locale;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#getDSTSavings()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDSTSavings()
        {
            return IExecuteWithSignature<int>("getDSTSavings", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#getOffset(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetOffset(long arg0)
        {
            return IExecuteWithSignature<int>("getOffset", "(J)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#getDisplayName(boolean,int,java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Util.Locale"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDisplayName(bool arg0, int arg1, Java.Util.Locale arg2)
        {
            return IExecute<Java.Lang.String>("getDisplayName", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#getID()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetID()
        {
            return IExecuteWithSignature<Java.Lang.String>("getID", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#toZoneId()"/>
        /// </summary>
        /// <returns><see cref="Java.Time.ZoneId"/></returns>
        public Java.Time.ZoneId ToZoneId()
        {
            return IExecuteWithSignature<Java.Time.ZoneId>("toZoneId", "()Ljava/time/ZoneId;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/TimeZone.html#setID(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetID(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setID", "(Ljava/lang/String;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Util.Random
{
    #region RandomGeneratorFactory
    public partial class RandomGeneratorFactory
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#of(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.Random.RandomGeneratorFactory"/></returns>
        public static Java.Util.Random.RandomGeneratorFactory Of(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Java.Util.Random.RandomGeneratorFactory>(LocalBridgeClazz, "of", "(Ljava/lang/String;)Ljava/util/random/RandomGeneratorFactory;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isArbitrarilyJumpable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsArbitrarilyJumpable()
        {
            return IExecuteWithSignature<bool>("isArbitrarilyJumpable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isDeprecated()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDeprecated()
        {
            return IExecuteWithSignature<bool>("isDeprecated", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isHardware()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHardware()
        {
            return IExecuteWithSignature<bool>("isHardware", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isJumpable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsJumpable()
        {
            return IExecuteWithSignature<bool>("isJumpable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isLeapable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLeapable()
        {
            return IExecuteWithSignature<bool>("isLeapable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isSplittable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSplittable()
        {
            return IExecuteWithSignature<bool>("isSplittable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isStatistical()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStatistical()
        {
            return IExecuteWithSignature<bool>("isStatistical", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isStochastic()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStochastic()
        {
            return IExecuteWithSignature<bool>("isStochastic", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isStreamable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStreamable()
        {
            return IExecuteWithSignature<bool>("isStreamable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#equidistribution()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Equidistribution()
        {
            return IExecuteWithSignature<int>("equidistribution", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#stateBits()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int StateBits()
        {
            return IExecuteWithSignature<int>("stateBits", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#group()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String Group()
        {
            return IExecuteWithSignature<Java.Lang.String>("group", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#name()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String Name()
        {
            return IExecuteWithSignature<Java.Lang.String>("name", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#period()"/>
        /// </summary>
        /// <returns><see cref="Java.Math.BigInteger"/></returns>
        public Java.Math.BigInteger Period()
        {
            return IExecuteWithSignature<Java.Math.BigInteger>("period", "()Ljava/math/BigInteger;");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region RandomGeneratorFactory<T>
    public partial class RandomGeneratorFactory<T>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Java.Util.Random.RandomGeneratorFactory{T}"/> to <see cref="Java.Util.Random.RandomGeneratorFactory"/>
        /// </summary>
        public static implicit operator Java.Util.Random.RandomGeneratorFactory(Java.Util.Random.RandomGeneratorFactory<T> t) => t.Cast<Java.Util.Random.RandomGeneratorFactory>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#of(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.Random.RandomGeneratorFactory"/></returns>
        public static Java.Util.Random.RandomGeneratorFactory<T> Of(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Java.Util.Random.RandomGeneratorFactory<T>>(LocalBridgeClazz, "of", "(Ljava/lang/String;)Ljava/util/random/RandomGeneratorFactory;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isArbitrarilyJumpable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsArbitrarilyJumpable()
        {
            return IExecuteWithSignature<bool>("isArbitrarilyJumpable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isDeprecated()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDeprecated()
        {
            return IExecuteWithSignature<bool>("isDeprecated", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isHardware()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHardware()
        {
            return IExecuteWithSignature<bool>("isHardware", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isJumpable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsJumpable()
        {
            return IExecuteWithSignature<bool>("isJumpable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isLeapable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLeapable()
        {
            return IExecuteWithSignature<bool>("isLeapable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isSplittable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSplittable()
        {
            return IExecuteWithSignature<bool>("isSplittable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isStatistical()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStatistical()
        {
            return IExecuteWithSignature<bool>("isStatistical", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isStochastic()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStochastic()
        {
            return IExecuteWithSignature<bool>("isStochastic", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#isStreamable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStreamable()
        {
            return IExecuteWithSignature<bool>("isStreamable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#equidistribution()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Equidistribution()
        {
            return IExecuteWithSignature<int>("equidistribution", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#stateBits()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int StateBits()
        {
            return IExecuteWithSignature<int>("stateBits", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#group()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String Group()
        {
            return IExecuteWithSignature<Java.Lang.String>("group", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#name()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String Name()
        {
            return IExecuteWithSignature<Java.Lang.String>("name", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java/util/random/RandomGeneratorFactory.html#period()"/>
        /// </summary>
        /// <returns><see cref="Java.Math.BigInteger"/></returns>
        public Java.Math.BigInteger Period()
        {
            return IExecuteWithSignature<Java.Math.BigInteger>("period", "()Ljava/math/BigInteger;");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
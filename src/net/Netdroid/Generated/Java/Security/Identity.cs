/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Java.Security
{
    #region Identity
    public partial class Identity : Java.Security.IPrincipal, Java.Io.ISerializable
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/java.base/java/security/Identity.html#%3Cinit%3E(java.lang.String,java.security.IdentityScope)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Security.IdentityScope"/></param>
        /// <exception cref="Java.Security.KeyManagementException"/>
        public Identity(Java.Lang.String arg0, Java.Security.IdentityScope arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java.base/java/security/Identity.html#%3Cinit%3E(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public Identity(Java.Lang.String arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Java.Security.Identity"/> to <see cref="Java.Security.Principal"/>
        /// </summary>
        public static implicit operator Java.Security.Principal(Java.Security.Identity t) => t.Cast<Java.Security.Principal>();
        /// <summary>
        /// Converter from <see cref="Java.Security.Identity"/> to <see cref="Java.Io.Serializable"/>
        /// </summary>
        public static implicit operator Java.Io.Serializable(Java.Security.Identity t) => t.Cast<Java.Io.Serializable>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/java.base/java/security/Identity.html#getInfo()"/> <see href="https://developer.android.com/reference/java.base/java/security/Identity.html#setInfo(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String Info
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getInfo", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setInfo", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java.base/java/security/Identity.html#getName()"/> 
        /// </summary>
        public Java.Lang.String Name
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java.base/java/security/Identity.html#getPublicKey()"/> <see href="https://developer.android.com/reference/java.base/java/security/Identity.html#setPublicKey(java.security.PublicKey)"/>
        /// </summary>
        public Java.Security.PublicKey PublicKey
        {
            get { return IExecuteWithSignature<Java.Security.PublicKey>("getPublicKey", "()Ljava/security/PublicKey;"); } set { IExecuteWithSignature("setPublicKey", "(Ljava/security/PublicKey;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java.base/java/security/Identity.html#getScope()"/> 
        /// </summary>
        public Java.Security.IdentityScope Scope
        {
            get { return IExecuteWithSignature<Java.Security.IdentityScope>("getScope", "()Ljava/security/IdentityScope;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java.base/java/security/Identity.html#toString(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String ToString(bool arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("toString", "(Z)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java.base/java/security/Identity.html#certificates()"/>
        /// </summary>
        /// <returns><see cref="Java.Security.Certificate"/></returns>
        public Java.Security.Certificate[] Certificates()
        {
            return IExecuteWithSignatureArray<Java.Security.Certificate>("certificates", "()[Ljava/security/Certificate;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java.base/java/security/Identity.html#addCertificate(java.security.Certificate)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Security.Certificate"/></param>
        /// <exception cref="Java.Security.KeyManagementException"/>
        public void AddCertificate(Java.Security.Certificate arg0)
        {
            IExecuteWithSignature("addCertificate", "(Ljava/security/Certificate;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/java.base/java/security/Identity.html#removeCertificate(java.security.Certificate)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Security.Certificate"/></param>
        /// <exception cref="Java.Security.KeyManagementException"/>
        public void RemoveCertificate(Java.Security.Certificate arg0)
        {
            IExecuteWithSignature("removeCertificate", "(Ljava/security/Certificate;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Crypto.Hpke
{
    #region IHpkeSpi
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IHpkeSpi
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region HpkeSpi
    public partial class HpkeSpi : Android.Crypto.Hpke.IHpkeSpi
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/crypto/hpke/HpkeSpi.html#engineExport(int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <returns><see cref="byte"/></returns>
        public byte[] EngineExport(int arg0, byte[] arg1)
        {
            return IExecuteArray<byte>("engineExport", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/crypto/hpke/HpkeSpi.html#engineOpen(byte[],byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <returns><see cref="byte"/></returns>
        /// <exception cref="Java.Security.GeneralSecurityException"/>
        public byte[] EngineOpen(byte[] arg0, byte[] arg1)
        {
            return IExecuteArray<byte>("engineOpen", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/crypto/hpke/HpkeSpi.html#engineSeal(byte[],byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <returns><see cref="byte"/></returns>
        public byte[] EngineSeal(byte[] arg0, byte[] arg1)
        {
            return IExecuteArray<byte>("engineSeal", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/crypto/hpke/HpkeSpi.html#getEncapsulated()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        public byte[] GetEncapsulated()
        {
            return IExecuteWithSignatureArray<byte>("getEncapsulated", "()[B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/crypto/hpke/HpkeSpi.html#engineInitRecipient(byte[],java.security.PrivateKey,byte[],java.security.PublicKey,byte[],byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="Java.Security.PrivateKey"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        /// <param name="arg3"><see cref="Java.Security.PublicKey"/></param>
        /// <param name="arg4"><see cref="byte"/></param>
        /// <param name="arg5"><see cref="byte"/></param>
        /// <exception cref="Java.Security.InvalidKeyException"/>
        public void EngineInitRecipient(byte[] arg0, Java.Security.PrivateKey arg1, byte[] arg2, Java.Security.PublicKey arg3, byte[] arg4, byte[] arg5)
        {
            IExecute("engineInitRecipient", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/crypto/hpke/HpkeSpi.html#engineInitSender(java.security.PublicKey,byte[],java.security.PrivateKey,byte[],byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Security.PublicKey"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="Java.Security.PrivateKey"/></param>
        /// <param name="arg3"><see cref="byte"/></param>
        /// <param name="arg4"><see cref="byte"/></param>
        /// <exception cref="Java.Security.InvalidKeyException"/>
        public void EngineInitSender(Java.Security.PublicKey arg0, byte[] arg1, Java.Security.PrivateKey arg2, byte[] arg3, byte[] arg4)
        {
            IExecute("engineInitSender", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/crypto/hpke/HpkeSpi.html#engineInitSenderWithSeed(java.security.PublicKey,byte[],java.security.PrivateKey,byte[],byte[],byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Security.PublicKey"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="Java.Security.PrivateKey"/></param>
        /// <param name="arg3"><see cref="byte"/></param>
        /// <param name="arg4"><see cref="byte"/></param>
        /// <param name="arg5"><see cref="byte"/></param>
        /// <exception cref="Java.Security.InvalidKeyException"/>
        public void EngineInitSenderWithSeed(Java.Security.PublicKey arg0, byte[] arg1, Java.Security.PrivateKey arg2, byte[] arg3, byte[] arg4, byte[] arg5)
        {
            IExecute("engineInitSenderWithSeed", arg0, arg1, arg2, arg3, arg4, arg5);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
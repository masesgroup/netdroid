/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Service.Notification
{
    #region NotificationListenerService declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html"/>
    /// </summary>
    public partial class NotificationListenerService : Android.App.Service
    {
        const string _bridgeClassName = "android.service.notification.NotificationListenerService";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("NotificationListenerService class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public NotificationListenerService() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("NotificationListenerService class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public NotificationListenerService(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Ranking declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html"/>
        /// </summary>
        public partial class Ranking : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Ranking>
        {
            const string _bridgeClassName = "android.service.notification.NotificationListenerService$Ranking";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Ranking() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Ranking(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region RankingMap declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.RankingMap.html"/>
        /// </summary>
        public partial class RankingMap : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.service.notification.NotificationListenerService$RankingMap";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RankingMap() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RankingMap(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region NotificationListenerService implementation
    public partial class NotificationListenerService
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#FLAG_FILTER_TYPE_ALERTING"/>
        /// </summary>
        public static int FLAG_FILTER_TYPE_ALERTING { get { if (!_FLAG_FILTER_TYPE_ALERTINGReady) { _FLAG_FILTER_TYPE_ALERTINGContent = SGetField<int>(LocalBridgeClazz, "FLAG_FILTER_TYPE_ALERTING"); _FLAG_FILTER_TYPE_ALERTINGReady = true; } return _FLAG_FILTER_TYPE_ALERTINGContent; } }
        private static int _FLAG_FILTER_TYPE_ALERTINGContent = default;
        private static bool _FLAG_FILTER_TYPE_ALERTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#FLAG_FILTER_TYPE_CONVERSATIONS"/>
        /// </summary>
        public static int FLAG_FILTER_TYPE_CONVERSATIONS { get { if (!_FLAG_FILTER_TYPE_CONVERSATIONSReady) { _FLAG_FILTER_TYPE_CONVERSATIONSContent = SGetField<int>(LocalBridgeClazz, "FLAG_FILTER_TYPE_CONVERSATIONS"); _FLAG_FILTER_TYPE_CONVERSATIONSReady = true; } return _FLAG_FILTER_TYPE_CONVERSATIONSContent; } }
        private static int _FLAG_FILTER_TYPE_CONVERSATIONSContent = default;
        private static bool _FLAG_FILTER_TYPE_CONVERSATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#FLAG_FILTER_TYPE_ONGOING"/>
        /// </summary>
        public static int FLAG_FILTER_TYPE_ONGOING { get { if (!_FLAG_FILTER_TYPE_ONGOINGReady) { _FLAG_FILTER_TYPE_ONGOINGContent = SGetField<int>(LocalBridgeClazz, "FLAG_FILTER_TYPE_ONGOING"); _FLAG_FILTER_TYPE_ONGOINGReady = true; } return _FLAG_FILTER_TYPE_ONGOINGContent; } }
        private static int _FLAG_FILTER_TYPE_ONGOINGContent = default;
        private static bool _FLAG_FILTER_TYPE_ONGOINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#FLAG_FILTER_TYPE_SILENT"/>
        /// </summary>
        public static int FLAG_FILTER_TYPE_SILENT { get { if (!_FLAG_FILTER_TYPE_SILENTReady) { _FLAG_FILTER_TYPE_SILENTContent = SGetField<int>(LocalBridgeClazz, "FLAG_FILTER_TYPE_SILENT"); _FLAG_FILTER_TYPE_SILENTReady = true; } return _FLAG_FILTER_TYPE_SILENTContent; } }
        private static int _FLAG_FILTER_TYPE_SILENTContent = default;
        private static bool _FLAG_FILTER_TYPE_SILENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#HINT_HOST_DISABLE_CALL_EFFECTS"/>
        /// </summary>
        public static int HINT_HOST_DISABLE_CALL_EFFECTS { get { if (!_HINT_HOST_DISABLE_CALL_EFFECTSReady) { _HINT_HOST_DISABLE_CALL_EFFECTSContent = SGetField<int>(LocalBridgeClazz, "HINT_HOST_DISABLE_CALL_EFFECTS"); _HINT_HOST_DISABLE_CALL_EFFECTSReady = true; } return _HINT_HOST_DISABLE_CALL_EFFECTSContent; } }
        private static int _HINT_HOST_DISABLE_CALL_EFFECTSContent = default;
        private static bool _HINT_HOST_DISABLE_CALL_EFFECTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#HINT_HOST_DISABLE_EFFECTS"/>
        /// </summary>
        public static int HINT_HOST_DISABLE_EFFECTS { get { if (!_HINT_HOST_DISABLE_EFFECTSReady) { _HINT_HOST_DISABLE_EFFECTSContent = SGetField<int>(LocalBridgeClazz, "HINT_HOST_DISABLE_EFFECTS"); _HINT_HOST_DISABLE_EFFECTSReady = true; } return _HINT_HOST_DISABLE_EFFECTSContent; } }
        private static int _HINT_HOST_DISABLE_EFFECTSContent = default;
        private static bool _HINT_HOST_DISABLE_EFFECTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#HINT_HOST_DISABLE_NOTIFICATION_EFFECTS"/>
        /// </summary>
        public static int HINT_HOST_DISABLE_NOTIFICATION_EFFECTS { get { if (!_HINT_HOST_DISABLE_NOTIFICATION_EFFECTSReady) { _HINT_HOST_DISABLE_NOTIFICATION_EFFECTSContent = SGetField<int>(LocalBridgeClazz, "HINT_HOST_DISABLE_NOTIFICATION_EFFECTS"); _HINT_HOST_DISABLE_NOTIFICATION_EFFECTSReady = true; } return _HINT_HOST_DISABLE_NOTIFICATION_EFFECTSContent; } }
        private static int _HINT_HOST_DISABLE_NOTIFICATION_EFFECTSContent = default;
        private static bool _HINT_HOST_DISABLE_NOTIFICATION_EFFECTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#INTERRUPTION_FILTER_ALARMS"/>
        /// </summary>
        public static int INTERRUPTION_FILTER_ALARMS { get { if (!_INTERRUPTION_FILTER_ALARMSReady) { _INTERRUPTION_FILTER_ALARMSContent = SGetField<int>(LocalBridgeClazz, "INTERRUPTION_FILTER_ALARMS"); _INTERRUPTION_FILTER_ALARMSReady = true; } return _INTERRUPTION_FILTER_ALARMSContent; } }
        private static int _INTERRUPTION_FILTER_ALARMSContent = default;
        private static bool _INTERRUPTION_FILTER_ALARMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#INTERRUPTION_FILTER_ALL"/>
        /// </summary>
        public static int INTERRUPTION_FILTER_ALL { get { if (!_INTERRUPTION_FILTER_ALLReady) { _INTERRUPTION_FILTER_ALLContent = SGetField<int>(LocalBridgeClazz, "INTERRUPTION_FILTER_ALL"); _INTERRUPTION_FILTER_ALLReady = true; } return _INTERRUPTION_FILTER_ALLContent; } }
        private static int _INTERRUPTION_FILTER_ALLContent = default;
        private static bool _INTERRUPTION_FILTER_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#INTERRUPTION_FILTER_NONE"/>
        /// </summary>
        public static int INTERRUPTION_FILTER_NONE { get { if (!_INTERRUPTION_FILTER_NONEReady) { _INTERRUPTION_FILTER_NONEContent = SGetField<int>(LocalBridgeClazz, "INTERRUPTION_FILTER_NONE"); _INTERRUPTION_FILTER_NONEReady = true; } return _INTERRUPTION_FILTER_NONEContent; } }
        private static int _INTERRUPTION_FILTER_NONEContent = default;
        private static bool _INTERRUPTION_FILTER_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#INTERRUPTION_FILTER_PRIORITY"/>
        /// </summary>
        public static int INTERRUPTION_FILTER_PRIORITY { get { if (!_INTERRUPTION_FILTER_PRIORITYReady) { _INTERRUPTION_FILTER_PRIORITYContent = SGetField<int>(LocalBridgeClazz, "INTERRUPTION_FILTER_PRIORITY"); _INTERRUPTION_FILTER_PRIORITYReady = true; } return _INTERRUPTION_FILTER_PRIORITYContent; } }
        private static int _INTERRUPTION_FILTER_PRIORITYContent = default;
        private static bool _INTERRUPTION_FILTER_PRIORITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#INTERRUPTION_FILTER_UNKNOWN"/>
        /// </summary>
        public static int INTERRUPTION_FILTER_UNKNOWN { get { if (!_INTERRUPTION_FILTER_UNKNOWNReady) { _INTERRUPTION_FILTER_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "INTERRUPTION_FILTER_UNKNOWN"); _INTERRUPTION_FILTER_UNKNOWNReady = true; } return _INTERRUPTION_FILTER_UNKNOWNContent; } }
        private static int _INTERRUPTION_FILTER_UNKNOWNContent = default;
        private static bool _INTERRUPTION_FILTER_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#NOTIFICATION_CHANNEL_OR_GROUP_ADDED"/>
        /// </summary>
        public static int NOTIFICATION_CHANNEL_OR_GROUP_ADDED { get { if (!_NOTIFICATION_CHANNEL_OR_GROUP_ADDEDReady) { _NOTIFICATION_CHANNEL_OR_GROUP_ADDEDContent = SGetField<int>(LocalBridgeClazz, "NOTIFICATION_CHANNEL_OR_GROUP_ADDED"); _NOTIFICATION_CHANNEL_OR_GROUP_ADDEDReady = true; } return _NOTIFICATION_CHANNEL_OR_GROUP_ADDEDContent; } }
        private static int _NOTIFICATION_CHANNEL_OR_GROUP_ADDEDContent = default;
        private static bool _NOTIFICATION_CHANNEL_OR_GROUP_ADDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#NOTIFICATION_CHANNEL_OR_GROUP_DELETED"/>
        /// </summary>
        public static int NOTIFICATION_CHANNEL_OR_GROUP_DELETED { get { if (!_NOTIFICATION_CHANNEL_OR_GROUP_DELETEDReady) { _NOTIFICATION_CHANNEL_OR_GROUP_DELETEDContent = SGetField<int>(LocalBridgeClazz, "NOTIFICATION_CHANNEL_OR_GROUP_DELETED"); _NOTIFICATION_CHANNEL_OR_GROUP_DELETEDReady = true; } return _NOTIFICATION_CHANNEL_OR_GROUP_DELETEDContent; } }
        private static int _NOTIFICATION_CHANNEL_OR_GROUP_DELETEDContent = default;
        private static bool _NOTIFICATION_CHANNEL_OR_GROUP_DELETEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#NOTIFICATION_CHANNEL_OR_GROUP_UPDATED"/>
        /// </summary>
        public static int NOTIFICATION_CHANNEL_OR_GROUP_UPDATED { get { if (!_NOTIFICATION_CHANNEL_OR_GROUP_UPDATEDReady) { _NOTIFICATION_CHANNEL_OR_GROUP_UPDATEDContent = SGetField<int>(LocalBridgeClazz, "NOTIFICATION_CHANNEL_OR_GROUP_UPDATED"); _NOTIFICATION_CHANNEL_OR_GROUP_UPDATEDReady = true; } return _NOTIFICATION_CHANNEL_OR_GROUP_UPDATEDContent; } }
        private static int _NOTIFICATION_CHANNEL_OR_GROUP_UPDATEDContent = default;
        private static bool _NOTIFICATION_CHANNEL_OR_GROUP_UPDATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_APP_CANCEL"/>
        /// </summary>
        public static int REASON_APP_CANCEL { get { if (!_REASON_APP_CANCELReady) { _REASON_APP_CANCELContent = SGetField<int>(LocalBridgeClazz, "REASON_APP_CANCEL"); _REASON_APP_CANCELReady = true; } return _REASON_APP_CANCELContent; } }
        private static int _REASON_APP_CANCELContent = default;
        private static bool _REASON_APP_CANCELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_APP_CANCEL_ALL"/>
        /// </summary>
        public static int REASON_APP_CANCEL_ALL { get { if (!_REASON_APP_CANCEL_ALLReady) { _REASON_APP_CANCEL_ALLContent = SGetField<int>(LocalBridgeClazz, "REASON_APP_CANCEL_ALL"); _REASON_APP_CANCEL_ALLReady = true; } return _REASON_APP_CANCEL_ALLContent; } }
        private static int _REASON_APP_CANCEL_ALLContent = default;
        private static bool _REASON_APP_CANCEL_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_ASSISTANT_CANCEL"/>
        /// </summary>
        public static int REASON_ASSISTANT_CANCEL { get { if (!_REASON_ASSISTANT_CANCELReady) { _REASON_ASSISTANT_CANCELContent = SGetField<int>(LocalBridgeClazz, "REASON_ASSISTANT_CANCEL"); _REASON_ASSISTANT_CANCELReady = true; } return _REASON_ASSISTANT_CANCELContent; } }
        private static int _REASON_ASSISTANT_CANCELContent = default;
        private static bool _REASON_ASSISTANT_CANCELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_CANCEL"/>
        /// </summary>
        public static int REASON_CANCEL { get { if (!_REASON_CANCELReady) { _REASON_CANCELContent = SGetField<int>(LocalBridgeClazz, "REASON_CANCEL"); _REASON_CANCELReady = true; } return _REASON_CANCELContent; } }
        private static int _REASON_CANCELContent = default;
        private static bool _REASON_CANCELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_CANCEL_ALL"/>
        /// </summary>
        public static int REASON_CANCEL_ALL { get { if (!_REASON_CANCEL_ALLReady) { _REASON_CANCEL_ALLContent = SGetField<int>(LocalBridgeClazz, "REASON_CANCEL_ALL"); _REASON_CANCEL_ALLReady = true; } return _REASON_CANCEL_ALLContent; } }
        private static int _REASON_CANCEL_ALLContent = default;
        private static bool _REASON_CANCEL_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_CHANNEL_BANNED"/>
        /// </summary>
        public static int REASON_CHANNEL_BANNED { get { if (!_REASON_CHANNEL_BANNEDReady) { _REASON_CHANNEL_BANNEDContent = SGetField<int>(LocalBridgeClazz, "REASON_CHANNEL_BANNED"); _REASON_CHANNEL_BANNEDReady = true; } return _REASON_CHANNEL_BANNEDContent; } }
        private static int _REASON_CHANNEL_BANNEDContent = default;
        private static bool _REASON_CHANNEL_BANNEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_CHANNEL_REMOVED"/>
        /// </summary>
        public static int REASON_CHANNEL_REMOVED { get { if (!_REASON_CHANNEL_REMOVEDReady) { _REASON_CHANNEL_REMOVEDContent = SGetField<int>(LocalBridgeClazz, "REASON_CHANNEL_REMOVED"); _REASON_CHANNEL_REMOVEDReady = true; } return _REASON_CHANNEL_REMOVEDContent; } }
        private static int _REASON_CHANNEL_REMOVEDContent = default;
        private static bool _REASON_CHANNEL_REMOVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_CLEAR_DATA"/>
        /// </summary>
        public static int REASON_CLEAR_DATA { get { if (!_REASON_CLEAR_DATAReady) { _REASON_CLEAR_DATAContent = SGetField<int>(LocalBridgeClazz, "REASON_CLEAR_DATA"); _REASON_CLEAR_DATAReady = true; } return _REASON_CLEAR_DATAContent; } }
        private static int _REASON_CLEAR_DATAContent = default;
        private static bool _REASON_CLEAR_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_CLICK"/>
        /// </summary>
        public static int REASON_CLICK { get { if (!_REASON_CLICKReady) { _REASON_CLICKContent = SGetField<int>(LocalBridgeClazz, "REASON_CLICK"); _REASON_CLICKReady = true; } return _REASON_CLICKContent; } }
        private static int _REASON_CLICKContent = default;
        private static bool _REASON_CLICKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_ERROR"/>
        /// </summary>
        public static int REASON_ERROR { get { if (!_REASON_ERRORReady) { _REASON_ERRORContent = SGetField<int>(LocalBridgeClazz, "REASON_ERROR"); _REASON_ERRORReady = true; } return _REASON_ERRORContent; } }
        private static int _REASON_ERRORContent = default;
        private static bool _REASON_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_GROUP_OPTIMIZATION"/>
        /// </summary>
        public static int REASON_GROUP_OPTIMIZATION { get { if (!_REASON_GROUP_OPTIMIZATIONReady) { _REASON_GROUP_OPTIMIZATIONContent = SGetField<int>(LocalBridgeClazz, "REASON_GROUP_OPTIMIZATION"); _REASON_GROUP_OPTIMIZATIONReady = true; } return _REASON_GROUP_OPTIMIZATIONContent; } }
        private static int _REASON_GROUP_OPTIMIZATIONContent = default;
        private static bool _REASON_GROUP_OPTIMIZATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_GROUP_SUMMARY_CANCELED"/>
        /// </summary>
        public static int REASON_GROUP_SUMMARY_CANCELED { get { if (!_REASON_GROUP_SUMMARY_CANCELEDReady) { _REASON_GROUP_SUMMARY_CANCELEDContent = SGetField<int>(LocalBridgeClazz, "REASON_GROUP_SUMMARY_CANCELED"); _REASON_GROUP_SUMMARY_CANCELEDReady = true; } return _REASON_GROUP_SUMMARY_CANCELEDContent; } }
        private static int _REASON_GROUP_SUMMARY_CANCELEDContent = default;
        private static bool _REASON_GROUP_SUMMARY_CANCELEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_LISTENER_CANCEL"/>
        /// </summary>
        public static int REASON_LISTENER_CANCEL { get { if (!_REASON_LISTENER_CANCELReady) { _REASON_LISTENER_CANCELContent = SGetField<int>(LocalBridgeClazz, "REASON_LISTENER_CANCEL"); _REASON_LISTENER_CANCELReady = true; } return _REASON_LISTENER_CANCELContent; } }
        private static int _REASON_LISTENER_CANCELContent = default;
        private static bool _REASON_LISTENER_CANCELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_LISTENER_CANCEL_ALL"/>
        /// </summary>
        public static int REASON_LISTENER_CANCEL_ALL { get { if (!_REASON_LISTENER_CANCEL_ALLReady) { _REASON_LISTENER_CANCEL_ALLContent = SGetField<int>(LocalBridgeClazz, "REASON_LISTENER_CANCEL_ALL"); _REASON_LISTENER_CANCEL_ALLReady = true; } return _REASON_LISTENER_CANCEL_ALLContent; } }
        private static int _REASON_LISTENER_CANCEL_ALLContent = default;
        private static bool _REASON_LISTENER_CANCEL_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_LOCKDOWN"/>
        /// </summary>
        public static int REASON_LOCKDOWN { get { if (!_REASON_LOCKDOWNReady) { _REASON_LOCKDOWNContent = SGetField<int>(LocalBridgeClazz, "REASON_LOCKDOWN"); _REASON_LOCKDOWNReady = true; } return _REASON_LOCKDOWNContent; } }
        private static int _REASON_LOCKDOWNContent = default;
        private static bool _REASON_LOCKDOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_PACKAGE_BANNED"/>
        /// </summary>
        public static int REASON_PACKAGE_BANNED { get { if (!_REASON_PACKAGE_BANNEDReady) { _REASON_PACKAGE_BANNEDContent = SGetField<int>(LocalBridgeClazz, "REASON_PACKAGE_BANNED"); _REASON_PACKAGE_BANNEDReady = true; } return _REASON_PACKAGE_BANNEDContent; } }
        private static int _REASON_PACKAGE_BANNEDContent = default;
        private static bool _REASON_PACKAGE_BANNEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_PACKAGE_CHANGED"/>
        /// </summary>
        public static int REASON_PACKAGE_CHANGED { get { if (!_REASON_PACKAGE_CHANGEDReady) { _REASON_PACKAGE_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "REASON_PACKAGE_CHANGED"); _REASON_PACKAGE_CHANGEDReady = true; } return _REASON_PACKAGE_CHANGEDContent; } }
        private static int _REASON_PACKAGE_CHANGEDContent = default;
        private static bool _REASON_PACKAGE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_PACKAGE_SUSPENDED"/>
        /// </summary>
        public static int REASON_PACKAGE_SUSPENDED { get { if (!_REASON_PACKAGE_SUSPENDEDReady) { _REASON_PACKAGE_SUSPENDEDContent = SGetField<int>(LocalBridgeClazz, "REASON_PACKAGE_SUSPENDED"); _REASON_PACKAGE_SUSPENDEDReady = true; } return _REASON_PACKAGE_SUSPENDEDContent; } }
        private static int _REASON_PACKAGE_SUSPENDEDContent = default;
        private static bool _REASON_PACKAGE_SUSPENDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_PROFILE_TURNED_OFF"/>
        /// </summary>
        public static int REASON_PROFILE_TURNED_OFF { get { if (!_REASON_PROFILE_TURNED_OFFReady) { _REASON_PROFILE_TURNED_OFFContent = SGetField<int>(LocalBridgeClazz, "REASON_PROFILE_TURNED_OFF"); _REASON_PROFILE_TURNED_OFFReady = true; } return _REASON_PROFILE_TURNED_OFFContent; } }
        private static int _REASON_PROFILE_TURNED_OFFContent = default;
        private static bool _REASON_PROFILE_TURNED_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_SNOOZED"/>
        /// </summary>
        public static int REASON_SNOOZED { get { if (!_REASON_SNOOZEDReady) { _REASON_SNOOZEDContent = SGetField<int>(LocalBridgeClazz, "REASON_SNOOZED"); _REASON_SNOOZEDReady = true; } return _REASON_SNOOZEDContent; } }
        private static int _REASON_SNOOZEDContent = default;
        private static bool _REASON_SNOOZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_TIMEOUT"/>
        /// </summary>
        public static int REASON_TIMEOUT { get { if (!_REASON_TIMEOUTReady) { _REASON_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "REASON_TIMEOUT"); _REASON_TIMEOUTReady = true; } return _REASON_TIMEOUTContent; } }
        private static int _REASON_TIMEOUTContent = default;
        private static bool _REASON_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_UNAUTOBUNDLED"/>
        /// </summary>
        public static int REASON_UNAUTOBUNDLED { get { if (!_REASON_UNAUTOBUNDLEDReady) { _REASON_UNAUTOBUNDLEDContent = SGetField<int>(LocalBridgeClazz, "REASON_UNAUTOBUNDLED"); _REASON_UNAUTOBUNDLEDReady = true; } return _REASON_UNAUTOBUNDLEDContent; } }
        private static int _REASON_UNAUTOBUNDLEDContent = default;
        private static bool _REASON_UNAUTOBUNDLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_USER_STOPPED"/>
        /// </summary>
        public static int REASON_USER_STOPPED { get { if (!_REASON_USER_STOPPEDReady) { _REASON_USER_STOPPEDContent = SGetField<int>(LocalBridgeClazz, "REASON_USER_STOPPED"); _REASON_USER_STOPPEDReady = true; } return _REASON_USER_STOPPEDContent; } }
        private static int _REASON_USER_STOPPEDContent = default;
        private static bool _REASON_USER_STOPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#SUPPRESSED_EFFECT_SCREEN_OFF"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SUPPRESSED_EFFECT_SCREEN_OFF { get { if (!_SUPPRESSED_EFFECT_SCREEN_OFFReady) { _SUPPRESSED_EFFECT_SCREEN_OFFContent = SGetField<int>(LocalBridgeClazz, "SUPPRESSED_EFFECT_SCREEN_OFF"); _SUPPRESSED_EFFECT_SCREEN_OFFReady = true; } return _SUPPRESSED_EFFECT_SCREEN_OFFContent; } }
        private static int _SUPPRESSED_EFFECT_SCREEN_OFFContent = default;
        private static bool _SUPPRESSED_EFFECT_SCREEN_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#SUPPRESSED_EFFECT_SCREEN_ON"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SUPPRESSED_EFFECT_SCREEN_ON { get { if (!_SUPPRESSED_EFFECT_SCREEN_ONReady) { _SUPPRESSED_EFFECT_SCREEN_ONContent = SGetField<int>(LocalBridgeClazz, "SUPPRESSED_EFFECT_SCREEN_ON"); _SUPPRESSED_EFFECT_SCREEN_ONReady = true; } return _SUPPRESSED_EFFECT_SCREEN_ONContent; } }
        private static int _SUPPRESSED_EFFECT_SCREEN_ONContent = default;
        private static bool _SUPPRESSED_EFFECT_SCREEN_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#ACTION_SETTINGS_HOME"/>
        /// </summary>
        public static Java.Lang.String ACTION_SETTINGS_HOME { get { if (!_ACTION_SETTINGS_HOMEReady) { _ACTION_SETTINGS_HOMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SETTINGS_HOME"); _ACTION_SETTINGS_HOMEReady = true; } return _ACTION_SETTINGS_HOMEContent; } }
        private static Java.Lang.String _ACTION_SETTINGS_HOMEContent = default;
        private static bool _ACTION_SETTINGS_HOMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#META_DATA_DEFAULT_AUTOBIND"/>
        /// </summary>
        public static Java.Lang.String META_DATA_DEFAULT_AUTOBIND { get { if (!_META_DATA_DEFAULT_AUTOBINDReady) { _META_DATA_DEFAULT_AUTOBINDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "META_DATA_DEFAULT_AUTOBIND"); _META_DATA_DEFAULT_AUTOBINDReady = true; } return _META_DATA_DEFAULT_AUTOBINDContent; } }
        private static Java.Lang.String _META_DATA_DEFAULT_AUTOBINDContent = default;
        private static bool _META_DATA_DEFAULT_AUTOBINDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#META_DATA_DEFAULT_FILTER_TYPES"/>
        /// </summary>
        public static Java.Lang.String META_DATA_DEFAULT_FILTER_TYPES { get { if (!_META_DATA_DEFAULT_FILTER_TYPESReady) { _META_DATA_DEFAULT_FILTER_TYPESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "META_DATA_DEFAULT_FILTER_TYPES"); _META_DATA_DEFAULT_FILTER_TYPESReady = true; } return _META_DATA_DEFAULT_FILTER_TYPESContent; } }
        private static Java.Lang.String _META_DATA_DEFAULT_FILTER_TYPESContent = default;
        private static bool _META_DATA_DEFAULT_FILTER_TYPESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#META_DATA_DISABLED_FILTER_TYPES"/>
        /// </summary>
        public static Java.Lang.String META_DATA_DISABLED_FILTER_TYPES { get { if (!_META_DATA_DISABLED_FILTER_TYPESReady) { _META_DATA_DISABLED_FILTER_TYPESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "META_DATA_DISABLED_FILTER_TYPES"); _META_DATA_DISABLED_FILTER_TYPESReady = true; } return _META_DATA_DISABLED_FILTER_TYPESContent; } }
        private static Java.Lang.String _META_DATA_DISABLED_FILTER_TYPESContent = default;
        private static bool _META_DATA_DISABLED_FILTER_TYPESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#SERVICE_INTERFACE"/>
        /// </summary>
        public static Java.Lang.String SERVICE_INTERFACE { get { if (!_SERVICE_INTERFACEReady) { _SERVICE_INTERFACEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SERVICE_INTERFACE"); _SERVICE_INTERFACEReady = true; } return _SERVICE_INTERFACEContent; } }
        private static Java.Lang.String _SERVICE_INTERFACEContent = default;
        private static bool _SERVICE_INTERFACEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#requestRebind(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        public static void RequestRebind(Android.Content.ComponentName arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "requestRebind", "(Landroid/content/ComponentName;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#requestUnbind(android.content.ComponentName)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ComponentName"/></param>
        public static void RequestUnbind(Android.Content.ComponentName arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "requestUnbind", "(Landroid/content/ComponentName;)V", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getCurrentRanking()"/>
        /// </summary>
        /// <returns><see cref="Android.Service.Notification.NotificationListenerService.RankingMap"/></returns>
        public Android.Service.Notification.NotificationListenerService.RankingMap GetCurrentRanking()
        {
            return IExecuteWithSignature<Android.Service.Notification.NotificationListenerService.RankingMap>("getCurrentRanking", "()Landroid/service/notification/NotificationListenerService$RankingMap;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getActiveNotifications()"/>
        /// </summary>
        /// <returns><see cref="Android.Service.Notification.StatusBarNotification"/></returns>
        public Android.Service.Notification.StatusBarNotification[] GetActiveNotifications()
        {
            return IExecuteWithSignatureArray<Android.Service.Notification.StatusBarNotification>("getActiveNotifications", "()[Landroid/service/notification/StatusBarNotification;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getActiveNotifications(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Service.Notification.StatusBarNotification"/></returns>
        public Android.Service.Notification.StatusBarNotification[] GetActiveNotifications(Java.Lang.String[] arg0)
        {
            return IExecuteWithSignatureArray<Android.Service.Notification.StatusBarNotification>("getActiveNotifications", "([Ljava/lang/String;)[Landroid/service/notification/StatusBarNotification;", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getSnoozedNotifications()"/>
        /// </summary>
        /// <returns><see cref="Android.Service.Notification.StatusBarNotification"/></returns>
        public Android.Service.Notification.StatusBarNotification[] GetSnoozedNotifications()
        {
            return IExecuteWithSignatureArray<Android.Service.Notification.StatusBarNotification>("getSnoozedNotifications", "()[Landroid/service/notification/StatusBarNotification;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getCurrentInterruptionFilter()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCurrentInterruptionFilter()
        {
            return IExecuteWithSignature<int>("getCurrentInterruptionFilter", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getCurrentListenerHints()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCurrentListenerHints()
        {
            return IExecuteWithSignature<int>("getCurrentListenerHints", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getNotificationChannels(java.lang.String,android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.App.NotificationChannel> GetNotificationChannels(Java.Lang.String arg0, Android.Os.UserHandle arg1)
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.NotificationChannel>>("getNotificationChannels", "(Ljava/lang/String;Landroid/os/UserHandle;)Ljava/util/List;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getNotificationChannelGroups(java.lang.String,android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.App.NotificationChannelGroup> GetNotificationChannelGroups(Java.Lang.String arg0, Android.Os.UserHandle arg1)
        {
            return IExecuteWithSignature<Java.Util.List<Android.App.NotificationChannelGroup>>("getNotificationChannelGroups", "(Ljava/lang/String;Landroid/os/UserHandle;)Ljava/util/List;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#cancelAllNotifications()"/>
        /// </summary>
        public void CancelAllNotifications()
        {
            IExecuteWithSignature("cancelAllNotifications", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#cancelNotification(java.lang.String,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void CancelNotification(Java.Lang.String arg0, Java.Lang.String arg1, int arg2)
        {
            IExecuteWithSignature("cancelNotification", "(Ljava/lang/String;Ljava/lang/String;I)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#cancelNotification(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void CancelNotification(Java.Lang.String arg0)
        {
            IExecuteWithSignature("cancelNotification", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#cancelNotifications(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void CancelNotifications(Java.Lang.String[] arg0)
        {
            IExecuteWithSignature("cancelNotifications", "([Ljava/lang/String;)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#clearRequestedListenerHints()"/>
        /// </summary>
        public void ClearRequestedListenerHints()
        {
            IExecuteWithSignature("clearRequestedListenerHints", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#migrateNotificationFilter(int,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        public void MigrateNotificationFilter(int arg0, Java.Util.List<Java.Lang.String> arg1)
        {
            IExecuteWithSignature("migrateNotificationFilter", "(ILjava/util/List;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#requestInterruptionFilter(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void RequestInterruptionFilter(int arg0)
        {
            IExecuteWithSignature("requestInterruptionFilter", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#requestListenerHints(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void RequestListenerHints(int arg0)
        {
            IExecuteWithSignature("requestListenerHints", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#requestUnbind()"/>
        /// </summary>
        public void RequestUnbind()
        {
            IExecuteWithSignature("requestUnbind", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#setNotificationsShown(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetNotificationsShown(Java.Lang.String[] arg0)
        {
            IExecuteWithSignature("setNotificationsShown", "([Ljava/lang/String;)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#snoozeNotification(java.lang.String,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void SnoozeNotification(Java.Lang.String arg0, long arg1)
        {
            IExecuteWithSignature("snoozeNotification", "(Ljava/lang/String;J)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#updateNotificationChannel(java.lang.String,android.os.UserHandle,android.app.NotificationChannel)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Os.UserHandle"/></param>
        /// <param name="arg2"><see cref="Android.App.NotificationChannel"/></param>
        public void UpdateNotificationChannel(Java.Lang.String arg0, Android.Os.UserHandle arg1, Android.App.NotificationChannel arg2)
        {
            IExecuteWithSignature("updateNotificationChannel", "(Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannel;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onInterruptionFilterChanged(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OnInterruptionFilterChanged(int arg0)
        {
            IExecuteWithSignature("onInterruptionFilterChanged", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onListenerConnected()"/>
        /// </summary>
        public void OnListenerConnected()
        {
            IExecuteWithSignature("onListenerConnected", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onListenerDisconnected()"/>
        /// </summary>
        public void OnListenerDisconnected()
        {
            IExecuteWithSignature("onListenerDisconnected", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onListenerHintsChanged(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OnListenerHintsChanged(int arg0)
        {
            IExecuteWithSignature("onListenerHintsChanged", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onNotificationChannelGroupModified(java.lang.String,android.os.UserHandle,android.app.NotificationChannelGroup,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Os.UserHandle"/></param>
        /// <param name="arg2"><see cref="Android.App.NotificationChannelGroup"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void OnNotificationChannelGroupModified(Java.Lang.String arg0, Android.Os.UserHandle arg1, Android.App.NotificationChannelGroup arg2, int arg3)
        {
            IExecuteWithSignature("onNotificationChannelGroupModified", "(Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannelGroup;I)V", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onNotificationChannelModified(java.lang.String,android.os.UserHandle,android.app.NotificationChannel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Os.UserHandle"/></param>
        /// <param name="arg2"><see cref="Android.App.NotificationChannel"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void OnNotificationChannelModified(Java.Lang.String arg0, Android.Os.UserHandle arg1, Android.App.NotificationChannel arg2, int arg3)
        {
            IExecuteWithSignature("onNotificationChannelModified", "(Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannel;I)V", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onNotificationPosted(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Service.Notification.StatusBarNotification"/></param>
        /// <param name="arg1"><see cref="Android.Service.Notification.NotificationListenerService.RankingMap"/></param>
        public void OnNotificationPosted(Android.Service.Notification.StatusBarNotification arg0, Android.Service.Notification.NotificationListenerService.RankingMap arg1)
        {
            IExecuteWithSignature("onNotificationPosted", "(Landroid/service/notification/StatusBarNotification;Landroid/service/notification/NotificationListenerService$RankingMap;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onNotificationPosted(android.service.notification.StatusBarNotification)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Service.Notification.StatusBarNotification"/></param>
        public void OnNotificationPosted(Android.Service.Notification.StatusBarNotification arg0)
        {
            IExecuteWithSignature("onNotificationPosted", "(Landroid/service/notification/StatusBarNotification;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onNotificationRankingUpdate(android.service.notification.NotificationListenerService.RankingMap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Service.Notification.NotificationListenerService.RankingMap"/></param>
        public void OnNotificationRankingUpdate(Android.Service.Notification.NotificationListenerService.RankingMap arg0)
        {
            IExecuteWithSignature("onNotificationRankingUpdate", "(Landroid/service/notification/NotificationListenerService$RankingMap;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Service.Notification.StatusBarNotification"/></param>
        /// <param name="arg1"><see cref="Android.Service.Notification.NotificationListenerService.RankingMap"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void OnNotificationRemoved(Android.Service.Notification.StatusBarNotification arg0, Android.Service.Notification.NotificationListenerService.RankingMap arg1, int arg2)
        {
            IExecuteWithSignature("onNotificationRemoved", "(Landroid/service/notification/StatusBarNotification;Landroid/service/notification/NotificationListenerService$RankingMap;I)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService.RankingMap)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Service.Notification.StatusBarNotification"/></param>
        /// <param name="arg1"><see cref="Android.Service.Notification.NotificationListenerService.RankingMap"/></param>
        public void OnNotificationRemoved(Android.Service.Notification.StatusBarNotification arg0, Android.Service.Notification.NotificationListenerService.RankingMap arg1)
        {
            IExecuteWithSignature("onNotificationRemoved", "(Landroid/service/notification/StatusBarNotification;Landroid/service/notification/NotificationListenerService$RankingMap;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onNotificationRemoved(android.service.notification.StatusBarNotification)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Service.Notification.StatusBarNotification"/></param>
        public void OnNotificationRemoved(Android.Service.Notification.StatusBarNotification arg0)
        {
            IExecuteWithSignature("onNotificationRemoved", "(Landroid/service/notification/StatusBarNotification;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onSilentStatusBarIconsVisibilityChanged(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void OnSilentStatusBarIconsVisibilityChanged(bool arg0)
        {
            IExecuteWithSignature("onSilentStatusBarIconsVisibilityChanged", "(Z)V", arg0);
        }

        #endregion

        #region Nested classes
        #region Ranking implementation
        public partial class Ranking
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#USER_SENTIMENT_NEGATIVE"/>
            /// </summary>
            public static int USER_SENTIMENT_NEGATIVE { get { if (!_USER_SENTIMENT_NEGATIVEReady) { _USER_SENTIMENT_NEGATIVEContent = SGetField<int>(LocalBridgeClazz, "USER_SENTIMENT_NEGATIVE"); _USER_SENTIMENT_NEGATIVEReady = true; } return _USER_SENTIMENT_NEGATIVEContent; } }
            private static int _USER_SENTIMENT_NEGATIVEContent = default;
            private static bool _USER_SENTIMENT_NEGATIVEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#USER_SENTIMENT_NEUTRAL"/>
            /// </summary>
            public static int USER_SENTIMENT_NEUTRAL { get { if (!_USER_SENTIMENT_NEUTRALReady) { _USER_SENTIMENT_NEUTRALContent = SGetField<int>(LocalBridgeClazz, "USER_SENTIMENT_NEUTRAL"); _USER_SENTIMENT_NEUTRALReady = true; } return _USER_SENTIMENT_NEUTRALContent; } }
            private static int _USER_SENTIMENT_NEUTRALContent = default;
            private static bool _USER_SENTIMENT_NEUTRALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#USER_SENTIMENT_POSITIVE"/>
            /// </summary>
            public static int USER_SENTIMENT_POSITIVE { get { if (!_USER_SENTIMENT_POSITIVEReady) { _USER_SENTIMENT_POSITIVEContent = SGetField<int>(LocalBridgeClazz, "USER_SENTIMENT_POSITIVE"); _USER_SENTIMENT_POSITIVEReady = true; } return _USER_SENTIMENT_POSITIVEContent; } }
            private static int _USER_SENTIMENT_POSITIVEContent = default;
            private static bool _USER_SENTIMENT_POSITIVEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#VISIBILITY_NO_OVERRIDE"/>
            /// </summary>
            public static int VISIBILITY_NO_OVERRIDE { get { if (!_VISIBILITY_NO_OVERRIDEReady) { _VISIBILITY_NO_OVERRIDEContent = SGetField<int>(LocalBridgeClazz, "VISIBILITY_NO_OVERRIDE"); _VISIBILITY_NO_OVERRIDEReady = true; } return _VISIBILITY_NO_OVERRIDEContent; } }
            private static int _VISIBILITY_NO_OVERRIDEContent = default;
            private static bool _VISIBILITY_NO_OVERRIDEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#getChannel()"/>
            /// </summary>
            /// <returns><see cref="Android.App.NotificationChannel"/></returns>
            public Android.App.NotificationChannel GetChannel()
            {
                return IExecuteWithSignature<Android.App.NotificationChannel>("getChannel", "()Landroid/app/NotificationChannel;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#getConversationShortcutInfo()"/>
            /// </summary>
            /// <returns><see cref="Android.Content.Pm.ShortcutInfo"/></returns>
            public Android.Content.Pm.ShortcutInfo GetConversationShortcutInfo()
            {
                return IExecuteWithSignature<Android.Content.Pm.ShortcutInfo>("getConversationShortcutInfo", "()Landroid/content/pm/ShortcutInfo;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#canBubble()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool CanBubble()
            {
                return IExecuteWithSignature<bool>("canBubble", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#canShowBadge()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool CanShowBadge()
            {
                return IExecuteWithSignature<bool>("canShowBadge", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#isAmbient()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsAmbient()
            {
                return IExecuteWithSignature<bool>("isAmbient", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#isConversation()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsConversation()
            {
                return IExecuteWithSignature<bool>("isConversation", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#isSuspended()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsSuspended()
            {
                return IExecuteWithSignature<bool>("isSuspended", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#matchesInterruptionFilter()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool MatchesInterruptionFilter()
            {
                return IExecuteWithSignature<bool>("matchesInterruptionFilter", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#getImportance()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetImportance()
            {
                return IExecuteWithSignature<int>("getImportance", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#getLockscreenVisibilityOverride()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetLockscreenVisibilityOverride()
            {
                return IExecuteWithSignature<int>("getLockscreenVisibilityOverride", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#getRank()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetRank()
            {
                return IExecuteWithSignature<int>("getRank", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#getSuppressedVisualEffects()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetSuppressedVisualEffects()
            {
                return IExecuteWithSignature<int>("getSuppressedVisualEffects", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#getUserSentiment()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetUserSentiment()
            {
                return IExecuteWithSignature<int>("getUserSentiment", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#getImportanceExplanation()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.CharSequence"/></returns>
            public Java.Lang.CharSequence GetImportanceExplanation()
            {
                return IExecuteWithSignature<Java.Lang.CharSequence>("getImportanceExplanation", "()Ljava/lang/CharSequence;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#getKey()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetKey()
            {
                return IExecuteWithSignature<Java.Lang.String>("getKey", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#getOverrideGroupKey()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetOverrideGroupKey()
            {
                return IExecuteWithSignature<Java.Lang.String>("getOverrideGroupKey", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#getSmartActions()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.List"/></returns>
            public Java.Util.List<Android.App.Notification.Action> GetSmartActions()
            {
                return IExecuteWithSignature<Java.Util.List<Android.App.Notification.Action>>("getSmartActions", "()Ljava/util/List;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#getSmartReplies()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.List"/></returns>
            public Java.Util.List<Java.Lang.CharSequence> GetSmartReplies()
            {
                return IExecuteWithSignature<Java.Util.List<Java.Lang.CharSequence>>("getSmartReplies", "()Ljava/util/List;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.Ranking.html#getLastAudiblyAlertedMillis()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetLastAudiblyAlertedMillis()
            {
                return IExecuteWithSignature<long>("getLastAudiblyAlertedMillis", "()J");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RankingMap implementation
        public partial class RankingMap
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.RankingMap.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.RankingMap.html#getRanking(java.lang.String,android.service.notification.NotificationListenerService.Ranking)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Android.Service.Notification.NotificationListenerService.Ranking"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool GetRanking(Java.Lang.String arg0, Android.Service.Notification.NotificationListenerService.Ranking arg1)
            {
                return IExecuteWithSignature<bool>("getRanking", "(Ljava/lang/String;Landroid/service/notification/NotificationListenerService$Ranking;)Z", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.RankingMap.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.RankingMap.html#getOrderedKeys()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String[] GetOrderedKeys()
            {
                return IExecuteWithSignatureArray<Java.Lang.String>("getOrderedKeys", "()[Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/notification/NotificationListenerService.RankingMap.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
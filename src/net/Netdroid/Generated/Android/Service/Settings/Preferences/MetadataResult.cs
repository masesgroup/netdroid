/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Service.Settings.Preferences
{
    #region MetadataResult declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/service/settings/preferences/MetadataResult.html"/>
    /// </summary>
    public partial class MetadataResult : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.service.settings.preferences.MetadataResult";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public MetadataResult() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public MetadataResult(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public MetadataResult(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/settings/preferences/MetadataResult.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.service.settings.preferences.MetadataResult$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Builder(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region MetadataResult implementation
    public partial class MetadataResult
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/settings/preferences/MetadataResult.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/settings/preferences/MetadataResult.html#RESULT_INTERNAL_ERROR"/>
        /// </summary>
        public static int RESULT_INTERNAL_ERROR { get { if (!_RESULT_INTERNAL_ERRORReady) { _RESULT_INTERNAL_ERRORContent = SGetField<int>(LocalBridgeClazz, "RESULT_INTERNAL_ERROR"); _RESULT_INTERNAL_ERRORReady = true; } return _RESULT_INTERNAL_ERRORContent; } }
        private static int _RESULT_INTERNAL_ERRORContent = default;
        private static bool _RESULT_INTERNAL_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/settings/preferences/MetadataResult.html#RESULT_OK"/>
        /// </summary>
        public static int RESULT_OK { get { if (!_RESULT_OKReady) { _RESULT_OKContent = SGetField<int>(LocalBridgeClazz, "RESULT_OK"); _RESULT_OKReady = true; } return _RESULT_OKContent; } }
        private static int _RESULT_OKContent = default;
        private static bool _RESULT_OKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/settings/preferences/MetadataResult.html#RESULT_UNSUPPORTED"/>
        /// </summary>
        public static int RESULT_UNSUPPORTED { get { if (!_RESULT_UNSUPPORTEDReady) { _RESULT_UNSUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_UNSUPPORTED"); _RESULT_UNSUPPORTEDReady = true; } return _RESULT_UNSUPPORTEDContent; } }
        private static int _RESULT_UNSUPPORTEDContent = default;
        private static bool _RESULT_UNSUPPORTEDReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/settings/preferences/MetadataResult.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/settings/preferences/MetadataResult.html#getResultCode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetResultCode()
        {
            return IExecuteWithSignature<int>("getResultCode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/settings/preferences/MetadataResult.html#getMetadataList()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Service.Settings.Preferences.SettingsPreferenceMetadata> GetMetadataList()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Service.Settings.Preferences.SettingsPreferenceMetadata>>("getMetadataList", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/settings/preferences/MetadataResult.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/settings/preferences/MetadataResult.Builder.html#%3Cinit%3E(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public Builder(int arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/settings/preferences/MetadataResult.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Service.Settings.Preferences.MetadataResult"/></returns>
            public Android.Service.Settings.Preferences.MetadataResult Build()
            {
                return IExecuteWithSignature<Android.Service.Settings.Preferences.MetadataResult>("build", "()Landroid/service/settings/preferences/MetadataResult;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/service/settings/preferences/MetadataResult.Builder.html#setMetadataList(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <returns><see cref="Android.Service.Settings.Preferences.MetadataResult.Builder"/></returns>
            public Android.Service.Settings.Preferences.MetadataResult.Builder SetMetadataList(Java.Util.List<Android.Service.Settings.Preferences.SettingsPreferenceMetadata> arg0)
            {
                return IExecuteWithSignature<Android.Service.Settings.Preferences.MetadataResult.Builder>("setMetadataList", "(Ljava/util/List;)Landroid/service/settings/preferences/MetadataResult$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
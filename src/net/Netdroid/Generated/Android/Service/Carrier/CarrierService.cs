/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Service.Carrier
{
    #region CarrierService declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/service/carrier/CarrierService.html"/>
    /// </summary>
    public partial class CarrierService : Android.App.Service
    {
        const string _bridgeClassName = "android.service.carrier.CarrierService";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("CarrierService class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public CarrierService() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("CarrierService class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public CarrierService(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region CarrierService implementation
    public partial class CarrierService
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/carrier/CarrierService.html#CARRIER_SERVICE_INTERFACE"/>
        /// </summary>
        public static Java.Lang.String CARRIER_SERVICE_INTERFACE { get { if (!_CARRIER_SERVICE_INTERFACEReady) { _CARRIER_SERVICE_INTERFACEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CARRIER_SERVICE_INTERFACE"); _CARRIER_SERVICE_INTERFACEReady = true; } return _CARRIER_SERVICE_INTERFACEContent; } }
        private static Java.Lang.String _CARRIER_SERVICE_INTERFACEContent = default;
        private static bool _CARRIER_SERVICE_INTERFACEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/carrier/CarrierService.html#onLoadConfig(android.service.carrier.CarrierIdentifier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Service.Carrier.CarrierIdentifier"/></param>
        /// <returns><see cref="Android.Os.PersistableBundle"/></returns>
        [global::System.Obsolete()]
        public Android.Os.PersistableBundle OnLoadConfig(Android.Service.Carrier.CarrierIdentifier arg0)
        {
            return IExecuteWithSignature<Android.Os.PersistableBundle>("onLoadConfig", "(Landroid/service/carrier/CarrierIdentifier;)Landroid/os/PersistableBundle;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/carrier/CarrierService.html#onLoadConfig(int,android.service.carrier.CarrierIdentifier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Service.Carrier.CarrierIdentifier"/></param>
        /// <returns><see cref="Android.Os.PersistableBundle"/></returns>
        public Android.Os.PersistableBundle OnLoadConfig(int arg0, Android.Service.Carrier.CarrierIdentifier arg1)
        {
            return IExecuteWithSignature<Android.Os.PersistableBundle>("onLoadConfig", "(ILandroid/service/carrier/CarrierIdentifier;)Landroid/os/PersistableBundle;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/carrier/CarrierService.html#notifyCarrierNetworkChange(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void NotifyCarrierNetworkChange(bool arg0)
        {
            IExecuteWithSignature("notifyCarrierNetworkChange", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/carrier/CarrierService.html#notifyCarrierNetworkChange(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void NotifyCarrierNetworkChange(int arg0, bool arg1)
        {
            IExecuteWithSignature("notifyCarrierNetworkChange", "(IZ)V", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Service.Controls.Templates
{
    #region ControlTemplate declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/service/controls/templates/ControlTemplate.html"/>
    /// </summary>
    public partial class ControlTemplate : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ControlTemplate>
    {
        const string _bridgeClassName = "android.service.controls.templates.ControlTemplate";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("ControlTemplate class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ControlTemplate() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("ControlTemplate class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ControlTemplate(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region ControlTemplate implementation
    public partial class ControlTemplate
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/ControlTemplate.html#TYPE_ERROR"/>
        /// </summary>
        public static int TYPE_ERROR { get { if (!_TYPE_ERRORReady) { _TYPE_ERRORContent = SGetField<int>(LocalBridgeClazz, "TYPE_ERROR"); _TYPE_ERRORReady = true; } return _TYPE_ERRORContent; } }
        private static int _TYPE_ERRORContent = default;
        private static bool _TYPE_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/ControlTemplate.html#TYPE_NO_TEMPLATE"/>
        /// </summary>
        public static int TYPE_NO_TEMPLATE { get { if (!_TYPE_NO_TEMPLATEReady) { _TYPE_NO_TEMPLATEContent = SGetField<int>(LocalBridgeClazz, "TYPE_NO_TEMPLATE"); _TYPE_NO_TEMPLATEReady = true; } return _TYPE_NO_TEMPLATEContent; } }
        private static int _TYPE_NO_TEMPLATEContent = default;
        private static bool _TYPE_NO_TEMPLATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/ControlTemplate.html#TYPE_RANGE"/>
        /// </summary>
        public static int TYPE_RANGE { get { if (!_TYPE_RANGEReady) { _TYPE_RANGEContent = SGetField<int>(LocalBridgeClazz, "TYPE_RANGE"); _TYPE_RANGEReady = true; } return _TYPE_RANGEContent; } }
        private static int _TYPE_RANGEContent = default;
        private static bool _TYPE_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/ControlTemplate.html#TYPE_STATELESS"/>
        /// </summary>
        public static int TYPE_STATELESS { get { if (!_TYPE_STATELESSReady) { _TYPE_STATELESSContent = SGetField<int>(LocalBridgeClazz, "TYPE_STATELESS"); _TYPE_STATELESSReady = true; } return _TYPE_STATELESSContent; } }
        private static int _TYPE_STATELESSContent = default;
        private static bool _TYPE_STATELESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/ControlTemplate.html#TYPE_TEMPERATURE"/>
        /// </summary>
        public static int TYPE_TEMPERATURE { get { if (!_TYPE_TEMPERATUREReady) { _TYPE_TEMPERATUREContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEMPERATURE"); _TYPE_TEMPERATUREReady = true; } return _TYPE_TEMPERATUREContent; } }
        private static int _TYPE_TEMPERATUREContent = default;
        private static bool _TYPE_TEMPERATUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/ControlTemplate.html#TYPE_THUMBNAIL"/>
        /// </summary>
        public static int TYPE_THUMBNAIL { get { if (!_TYPE_THUMBNAILReady) { _TYPE_THUMBNAILContent = SGetField<int>(LocalBridgeClazz, "TYPE_THUMBNAIL"); _TYPE_THUMBNAILReady = true; } return _TYPE_THUMBNAILContent; } }
        private static int _TYPE_THUMBNAILContent = default;
        private static bool _TYPE_THUMBNAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/ControlTemplate.html#TYPE_TOGGLE"/>
        /// </summary>
        public static int TYPE_TOGGLE { get { if (!_TYPE_TOGGLEReady) { _TYPE_TOGGLEContent = SGetField<int>(LocalBridgeClazz, "TYPE_TOGGLE"); _TYPE_TOGGLEReady = true; } return _TYPE_TOGGLEContent; } }
        private static int _TYPE_TOGGLEContent = default;
        private static bool _TYPE_TOGGLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/ControlTemplate.html#TYPE_TOGGLE_RANGE"/>
        /// </summary>
        public static int TYPE_TOGGLE_RANGE { get { if (!_TYPE_TOGGLE_RANGEReady) { _TYPE_TOGGLE_RANGEContent = SGetField<int>(LocalBridgeClazz, "TYPE_TOGGLE_RANGE"); _TYPE_TOGGLE_RANGEReady = true; } return _TYPE_TOGGLE_RANGEContent; } }
        private static int _TYPE_TOGGLE_RANGEContent = default;
        private static bool _TYPE_TOGGLE_RANGEReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/ControlTemplate.html#getErrorTemplate()"/>
        /// </summary>
        /// <returns><see cref="Android.Service.Controls.Templates.ControlTemplate"/></returns>
        public static Android.Service.Controls.Templates.ControlTemplate GetErrorTemplate()
        {
            return SExecuteWithSignature<Android.Service.Controls.Templates.ControlTemplate>(LocalBridgeClazz, "getErrorTemplate", "()Landroid/service/controls/templates/ControlTemplate;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/ControlTemplate.html#getNoTemplateObject()"/>
        /// </summary>
        /// <returns><see cref="Android.Service.Controls.Templates.ControlTemplate"/></returns>
        public static Android.Service.Controls.Templates.ControlTemplate GetNoTemplateObject()
        {
            return SExecuteWithSignature<Android.Service.Controls.Templates.ControlTemplate>(LocalBridgeClazz, "getNoTemplateObject", "()Landroid/service/controls/templates/ControlTemplate;");
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/ControlTemplate.html#getTemplateType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTemplateType()
        {
            return IExecuteWithSignature<int>("getTemplateType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/ControlTemplate.html#getTemplateId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetTemplateId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getTemplateId", "()Ljava/lang/String;");
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
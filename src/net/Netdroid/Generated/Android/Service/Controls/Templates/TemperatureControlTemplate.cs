/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Service.Controls.Templates
{
    #region TemperatureControlTemplate
    public partial class TemperatureControlTemplate
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/TemperatureControlTemplate.html#%3Cinit%3E(java.lang.String,android.service.controls.templates.ControlTemplate,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Service.Controls.Templates.ControlTemplate"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public TemperatureControlTemplate(Java.Lang.String arg0, Android.Service.Controls.Templates.ControlTemplate arg1, int arg2, int arg3, int arg4)
            : base(arg0, arg1, arg2, arg3, arg4)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/TemperatureControlTemplate.html#FLAG_MODE_COOL"/>
        /// </summary>
        public static int FLAG_MODE_COOL { get { if (!_FLAG_MODE_COOLReady) { _FLAG_MODE_COOLContent = SGetField<int>(LocalBridgeClazz, "FLAG_MODE_COOL"); _FLAG_MODE_COOLReady = true; } return _FLAG_MODE_COOLContent; } }
        private static int _FLAG_MODE_COOLContent = default;
        private static bool _FLAG_MODE_COOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/TemperatureControlTemplate.html#FLAG_MODE_ECO"/>
        /// </summary>
        public static int FLAG_MODE_ECO { get { if (!_FLAG_MODE_ECOReady) { _FLAG_MODE_ECOContent = SGetField<int>(LocalBridgeClazz, "FLAG_MODE_ECO"); _FLAG_MODE_ECOReady = true; } return _FLAG_MODE_ECOContent; } }
        private static int _FLAG_MODE_ECOContent = default;
        private static bool _FLAG_MODE_ECOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/TemperatureControlTemplate.html#FLAG_MODE_HEAT"/>
        /// </summary>
        public static int FLAG_MODE_HEAT { get { if (!_FLAG_MODE_HEATReady) { _FLAG_MODE_HEATContent = SGetField<int>(LocalBridgeClazz, "FLAG_MODE_HEAT"); _FLAG_MODE_HEATReady = true; } return _FLAG_MODE_HEATContent; } }
        private static int _FLAG_MODE_HEATContent = default;
        private static bool _FLAG_MODE_HEATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/TemperatureControlTemplate.html#FLAG_MODE_HEAT_COOL"/>
        /// </summary>
        public static int FLAG_MODE_HEAT_COOL { get { if (!_FLAG_MODE_HEAT_COOLReady) { _FLAG_MODE_HEAT_COOLContent = SGetField<int>(LocalBridgeClazz, "FLAG_MODE_HEAT_COOL"); _FLAG_MODE_HEAT_COOLReady = true; } return _FLAG_MODE_HEAT_COOLContent; } }
        private static int _FLAG_MODE_HEAT_COOLContent = default;
        private static bool _FLAG_MODE_HEAT_COOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/TemperatureControlTemplate.html#FLAG_MODE_OFF"/>
        /// </summary>
        public static int FLAG_MODE_OFF { get { if (!_FLAG_MODE_OFFReady) { _FLAG_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "FLAG_MODE_OFF"); _FLAG_MODE_OFFReady = true; } return _FLAG_MODE_OFFContent; } }
        private static int _FLAG_MODE_OFFContent = default;
        private static bool _FLAG_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/TemperatureControlTemplate.html#MODE_COOL"/>
        /// </summary>
        public static int MODE_COOL { get { if (!_MODE_COOLReady) { _MODE_COOLContent = SGetField<int>(LocalBridgeClazz, "MODE_COOL"); _MODE_COOLReady = true; } return _MODE_COOLContent; } }
        private static int _MODE_COOLContent = default;
        private static bool _MODE_COOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/TemperatureControlTemplate.html#MODE_ECO"/>
        /// </summary>
        public static int MODE_ECO { get { if (!_MODE_ECOReady) { _MODE_ECOContent = SGetField<int>(LocalBridgeClazz, "MODE_ECO"); _MODE_ECOReady = true; } return _MODE_ECOContent; } }
        private static int _MODE_ECOContent = default;
        private static bool _MODE_ECOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/TemperatureControlTemplate.html#MODE_HEAT"/>
        /// </summary>
        public static int MODE_HEAT { get { if (!_MODE_HEATReady) { _MODE_HEATContent = SGetField<int>(LocalBridgeClazz, "MODE_HEAT"); _MODE_HEATReady = true; } return _MODE_HEATContent; } }
        private static int _MODE_HEATContent = default;
        private static bool _MODE_HEATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/TemperatureControlTemplate.html#MODE_HEAT_COOL"/>
        /// </summary>
        public static int MODE_HEAT_COOL { get { if (!_MODE_HEAT_COOLReady) { _MODE_HEAT_COOLContent = SGetField<int>(LocalBridgeClazz, "MODE_HEAT_COOL"); _MODE_HEAT_COOLReady = true; } return _MODE_HEAT_COOLContent; } }
        private static int _MODE_HEAT_COOLContent = default;
        private static bool _MODE_HEAT_COOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/TemperatureControlTemplate.html#MODE_OFF"/>
        /// </summary>
        public static int MODE_OFF { get { if (!_MODE_OFFReady) { _MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "MODE_OFF"); _MODE_OFFReady = true; } return _MODE_OFFContent; } }
        private static int _MODE_OFFContent = default;
        private static bool _MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/TemperatureControlTemplate.html#MODE_UNKNOWN"/>
        /// </summary>
        public static int MODE_UNKNOWN { get { if (!_MODE_UNKNOWNReady) { _MODE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "MODE_UNKNOWN"); _MODE_UNKNOWNReady = true; } return _MODE_UNKNOWNContent; } }
        private static int _MODE_UNKNOWNContent = default;
        private static bool _MODE_UNKNOWNReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/TemperatureControlTemplate.html#getTemplate()"/>
        /// </summary>
        /// <returns><see cref="Android.Service.Controls.Templates.ControlTemplate"/></returns>
        public Android.Service.Controls.Templates.ControlTemplate GetTemplate()
        {
            return IExecuteWithSignature<Android.Service.Controls.Templates.ControlTemplate>("getTemplate", "()Landroid/service/controls/templates/ControlTemplate;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/TemperatureControlTemplate.html#getCurrentActiveMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCurrentActiveMode()
        {
            return IExecuteWithSignature<int>("getCurrentActiveMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/TemperatureControlTemplate.html#getCurrentMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCurrentMode()
        {
            return IExecuteWithSignature<int>("getCurrentMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/templates/TemperatureControlTemplate.html#getModes()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetModes()
        {
            return IExecuteWithSignature<int>("getModes", "()I");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Service.Controls.Actions
{
    #region ControlAction declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html"/>
    /// </summary>
    public partial class ControlAction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ControlAction>
    {
        const string _bridgeClassName = "android.service.controls.actions.ControlAction";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("ControlAction class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ControlAction() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("ControlAction class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ControlAction(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region ControlAction implementation
    public partial class ControlAction
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html#RESPONSE_CHALLENGE_ACK"/>
        /// </summary>
        public static int RESPONSE_CHALLENGE_ACK { get { if (!_RESPONSE_CHALLENGE_ACKReady) { _RESPONSE_CHALLENGE_ACKContent = SGetField<int>(LocalBridgeClazz, "RESPONSE_CHALLENGE_ACK"); _RESPONSE_CHALLENGE_ACKReady = true; } return _RESPONSE_CHALLENGE_ACKContent; } }
        private static int _RESPONSE_CHALLENGE_ACKContent = default;
        private static bool _RESPONSE_CHALLENGE_ACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html#RESPONSE_CHALLENGE_PASSPHRASE"/>
        /// </summary>
        public static int RESPONSE_CHALLENGE_PASSPHRASE { get { if (!_RESPONSE_CHALLENGE_PASSPHRASEReady) { _RESPONSE_CHALLENGE_PASSPHRASEContent = SGetField<int>(LocalBridgeClazz, "RESPONSE_CHALLENGE_PASSPHRASE"); _RESPONSE_CHALLENGE_PASSPHRASEReady = true; } return _RESPONSE_CHALLENGE_PASSPHRASEContent; } }
        private static int _RESPONSE_CHALLENGE_PASSPHRASEContent = default;
        private static bool _RESPONSE_CHALLENGE_PASSPHRASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html#RESPONSE_CHALLENGE_PIN"/>
        /// </summary>
        public static int RESPONSE_CHALLENGE_PIN { get { if (!_RESPONSE_CHALLENGE_PINReady) { _RESPONSE_CHALLENGE_PINContent = SGetField<int>(LocalBridgeClazz, "RESPONSE_CHALLENGE_PIN"); _RESPONSE_CHALLENGE_PINReady = true; } return _RESPONSE_CHALLENGE_PINContent; } }
        private static int _RESPONSE_CHALLENGE_PINContent = default;
        private static bool _RESPONSE_CHALLENGE_PINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html#RESPONSE_FAIL"/>
        /// </summary>
        public static int RESPONSE_FAIL { get { if (!_RESPONSE_FAILReady) { _RESPONSE_FAILContent = SGetField<int>(LocalBridgeClazz, "RESPONSE_FAIL"); _RESPONSE_FAILReady = true; } return _RESPONSE_FAILContent; } }
        private static int _RESPONSE_FAILContent = default;
        private static bool _RESPONSE_FAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html#RESPONSE_OK"/>
        /// </summary>
        public static int RESPONSE_OK { get { if (!_RESPONSE_OKReady) { _RESPONSE_OKContent = SGetField<int>(LocalBridgeClazz, "RESPONSE_OK"); _RESPONSE_OKReady = true; } return _RESPONSE_OKContent; } }
        private static int _RESPONSE_OKContent = default;
        private static bool _RESPONSE_OKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html#RESPONSE_UNKNOWN"/>
        /// </summary>
        public static int RESPONSE_UNKNOWN { get { if (!_RESPONSE_UNKNOWNReady) { _RESPONSE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "RESPONSE_UNKNOWN"); _RESPONSE_UNKNOWNReady = true; } return _RESPONSE_UNKNOWNContent; } }
        private static int _RESPONSE_UNKNOWNContent = default;
        private static bool _RESPONSE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html#TYPE_BOOLEAN"/>
        /// </summary>
        public static int TYPE_BOOLEAN { get { if (!_TYPE_BOOLEANReady) { _TYPE_BOOLEANContent = SGetField<int>(LocalBridgeClazz, "TYPE_BOOLEAN"); _TYPE_BOOLEANReady = true; } return _TYPE_BOOLEANContent; } }
        private static int _TYPE_BOOLEANContent = default;
        private static bool _TYPE_BOOLEANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html#TYPE_COMMAND"/>
        /// </summary>
        public static int TYPE_COMMAND { get { if (!_TYPE_COMMANDReady) { _TYPE_COMMANDContent = SGetField<int>(LocalBridgeClazz, "TYPE_COMMAND"); _TYPE_COMMANDReady = true; } return _TYPE_COMMANDContent; } }
        private static int _TYPE_COMMANDContent = default;
        private static bool _TYPE_COMMANDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html#TYPE_ERROR"/>
        /// </summary>
        public static int TYPE_ERROR { get { if (!_TYPE_ERRORReady) { _TYPE_ERRORContent = SGetField<int>(LocalBridgeClazz, "TYPE_ERROR"); _TYPE_ERRORReady = true; } return _TYPE_ERRORContent; } }
        private static int _TYPE_ERRORContent = default;
        private static bool _TYPE_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html#TYPE_FLOAT"/>
        /// </summary>
        public static int TYPE_FLOAT { get { if (!_TYPE_FLOATReady) { _TYPE_FLOATContent = SGetField<int>(LocalBridgeClazz, "TYPE_FLOAT"); _TYPE_FLOATReady = true; } return _TYPE_FLOATContent; } }
        private static int _TYPE_FLOATContent = default;
        private static bool _TYPE_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html#TYPE_MODE"/>
        /// </summary>
        public static int TYPE_MODE { get { if (!_TYPE_MODEReady) { _TYPE_MODEContent = SGetField<int>(LocalBridgeClazz, "TYPE_MODE"); _TYPE_MODEReady = true; } return _TYPE_MODEContent; } }
        private static int _TYPE_MODEContent = default;
        private static bool _TYPE_MODEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html#getErrorAction()"/>
        /// </summary>
        /// <returns><see cref="Android.Service.Controls.Actions.ControlAction"/></returns>
        public static Android.Service.Controls.Actions.ControlAction GetErrorAction()
        {
            return SExecuteWithSignature<Android.Service.Controls.Actions.ControlAction>(LocalBridgeClazz, "getErrorAction", "()Landroid/service/controls/actions/ControlAction;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html#isValidResponse(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsValidResponse(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isValidResponse", "(I)Z", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html#getActionType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetActionType()
        {
            return IExecuteWithSignature<int>("getActionType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html#getChallengeValue()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetChallengeValue()
        {
            return IExecuteWithSignature<Java.Lang.String>("getChallengeValue", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/service/controls/actions/ControlAction.html#getTemplateId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetTemplateId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getTemplateId", "()Ljava/lang/String;");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
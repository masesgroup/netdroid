/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Os
{
    #region TokenWatcher declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/os/TokenWatcher.html"/>
    /// </summary>
    public partial class TokenWatcher : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TokenWatcher>
    {
        const string _bridgeClassName = "android.os.TokenWatcher";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("TokenWatcher class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public TokenWatcher() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("TokenWatcher class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public TokenWatcher(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region TokenWatcher implementation
    public partial class TokenWatcher
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/TokenWatcher.html#%3Cinit%3E(android.os.Handler,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Handler"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public TokenWatcher(Android.Os.Handler arg0, Java.Lang.String arg1)
            : base(arg0, arg1)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/TokenWatcher.html#acquired()"/>
        /// </summary>
        public void Acquired()
        {
            IExecuteWithSignature("acquired", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/TokenWatcher.html#released()"/>
        /// </summary>
        public void Released()
        {
            IExecuteWithSignature("released", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/TokenWatcher.html#isAcquired()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAcquired()
        {
            return IExecuteWithSignature<bool>("isAcquired", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/TokenWatcher.html#acquire(android.os.IBinder,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.IBinder"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void Acquire(Android.Os.IBinder arg0, Java.Lang.String arg1)
        {
            IExecuteWithSignature("acquire", "(Landroid/os/IBinder;Ljava/lang/String;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/TokenWatcher.html#cleanup(android.os.IBinder,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.IBinder"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void Cleanup(Android.Os.IBinder arg0, bool arg1)
        {
            IExecuteWithSignature("cleanup", "(Landroid/os/IBinder;Z)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/TokenWatcher.html#dump()"/>
        /// </summary>
        public void Dump()
        {
            IExecuteWithSignature("dump", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/TokenWatcher.html#dump(java.io.PrintWriter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.PrintWriter"/></param>
        public void Dump(Java.Io.PrintWriter arg0)
        {
            IExecuteWithSignature("dump", "(Ljava/io/PrintWriter;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/TokenWatcher.html#release(android.os.IBinder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.IBinder"/></param>
        public void Release(Android.Os.IBinder arg0)
        {
            IExecuteWithSignature("release", "(Landroid/os/IBinder;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
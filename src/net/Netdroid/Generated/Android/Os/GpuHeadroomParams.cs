/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Os
{
    #region GpuHeadroomParams declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/os/GpuHeadroomParams.html"/>
    /// </summary>
    public partial class GpuHeadroomParams : MASES.JCOBridge.C2JBridge.JVMBridgeBase<GpuHeadroomParams>
    {
        const string _bridgeClassName = "android.os.GpuHeadroomParams";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public GpuHeadroomParams() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public GpuHeadroomParams(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public GpuHeadroomParams(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/GpuHeadroomParams.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.os.GpuHeadroomParams$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Builder(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region GpuHeadroomParams implementation
    public partial class GpuHeadroomParams
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/GpuHeadroomParams.html#GPU_HEADROOM_CALCULATION_TYPE_AVERAGE"/>
        /// </summary>
        public static int GPU_HEADROOM_CALCULATION_TYPE_AVERAGE { get { if (!_GPU_HEADROOM_CALCULATION_TYPE_AVERAGEReady) { _GPU_HEADROOM_CALCULATION_TYPE_AVERAGEContent = SGetField<int>(LocalBridgeClazz, "GPU_HEADROOM_CALCULATION_TYPE_AVERAGE"); _GPU_HEADROOM_CALCULATION_TYPE_AVERAGEReady = true; } return _GPU_HEADROOM_CALCULATION_TYPE_AVERAGEContent; } }
        private static int _GPU_HEADROOM_CALCULATION_TYPE_AVERAGEContent = default;
        private static bool _GPU_HEADROOM_CALCULATION_TYPE_AVERAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/GpuHeadroomParams.html#GPU_HEADROOM_CALCULATION_TYPE_MIN"/>
        /// </summary>
        public static int GPU_HEADROOM_CALCULATION_TYPE_MIN { get { if (!_GPU_HEADROOM_CALCULATION_TYPE_MINReady) { _GPU_HEADROOM_CALCULATION_TYPE_MINContent = SGetField<int>(LocalBridgeClazz, "GPU_HEADROOM_CALCULATION_TYPE_MIN"); _GPU_HEADROOM_CALCULATION_TYPE_MINReady = true; } return _GPU_HEADROOM_CALCULATION_TYPE_MINContent; } }
        private static int _GPU_HEADROOM_CALCULATION_TYPE_MINContent = default;
        private static bool _GPU_HEADROOM_CALCULATION_TYPE_MINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/GpuHeadroomParams.html#GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MAX"/>
        /// </summary>
        public static int GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MAX { get { if (!_GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MAXReady) { _GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MAXContent = SGetField<int>(LocalBridgeClazz, "GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MAX"); _GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MAXReady = true; } return _GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MAXContent; } }
        private static int _GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MAXContent = default;
        private static bool _GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/GpuHeadroomParams.html#GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MIN"/>
        /// </summary>
        public static int GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MIN { get { if (!_GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MINReady) { _GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MINContent = SGetField<int>(LocalBridgeClazz, "GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MIN"); _GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MINReady = true; } return _GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MINContent; } }
        private static int _GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MINContent = default;
        private static bool _GPU_HEADROOM_CALCULATION_WINDOW_MILLIS_MINReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/GpuHeadroomParams.html#getCalculationType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCalculationType()
        {
            return IExecuteWithSignature<int>("getCalculationType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/GpuHeadroomParams.html#getCalculationWindowMillis()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCalculationWindowMillis()
        {
            return IExecuteWithSignature<int>("getCalculationWindowMillis", "()I");
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/GpuHeadroomParams.Builder.html#%3Cinit%3E(android.os.GpuHeadroomParams)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.GpuHeadroomParams"/></param>
            public Builder(Android.Os.GpuHeadroomParams arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/GpuHeadroomParams.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Os.GpuHeadroomParams"/></returns>
            public Android.Os.GpuHeadroomParams Build()
            {
                return IExecuteWithSignature<Android.Os.GpuHeadroomParams>("build", "()Landroid/os/GpuHeadroomParams;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/GpuHeadroomParams.Builder.html#setCalculationType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Os.GpuHeadroomParams.Builder"/></returns>
            public Android.Os.GpuHeadroomParams.Builder SetCalculationType(int arg0)
            {
                return IExecuteWithSignature<Android.Os.GpuHeadroomParams.Builder>("setCalculationType", "(I)Landroid/os/GpuHeadroomParams$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/GpuHeadroomParams.Builder.html#setCalculationWindowMillis(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Os.GpuHeadroomParams.Builder"/></returns>
            public Android.Os.GpuHeadroomParams.Builder SetCalculationWindowMillis(int arg0)
            {
                return IExecuteWithSignature<Android.Os.GpuHeadroomParams.Builder>("setCalculationWindowMillis", "(I)Landroid/os/GpuHeadroomParams$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
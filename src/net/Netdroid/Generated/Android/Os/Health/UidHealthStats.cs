/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Os.Health
{
    #region UidHealthStats
    public partial class UidHealthStats
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_BLUETOOTH_IDLE_MS"/>
        /// </summary>
        public static int MEASUREMENT_BLUETOOTH_IDLE_MS { get { if (!_MEASUREMENT_BLUETOOTH_IDLE_MSReady) { _MEASUREMENT_BLUETOOTH_IDLE_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_BLUETOOTH_IDLE_MS"); _MEASUREMENT_BLUETOOTH_IDLE_MSReady = true; } return _MEASUREMENT_BLUETOOTH_IDLE_MSContent; } }
        private static int _MEASUREMENT_BLUETOOTH_IDLE_MSContent = default;
        private static bool _MEASUREMENT_BLUETOOTH_IDLE_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_BLUETOOTH_POWER_MAMS"/>
        /// </summary>
        public static int MEASUREMENT_BLUETOOTH_POWER_MAMS { get { if (!_MEASUREMENT_BLUETOOTH_POWER_MAMSReady) { _MEASUREMENT_BLUETOOTH_POWER_MAMSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_BLUETOOTH_POWER_MAMS"); _MEASUREMENT_BLUETOOTH_POWER_MAMSReady = true; } return _MEASUREMENT_BLUETOOTH_POWER_MAMSContent; } }
        private static int _MEASUREMENT_BLUETOOTH_POWER_MAMSContent = default;
        private static bool _MEASUREMENT_BLUETOOTH_POWER_MAMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_BLUETOOTH_RX_BYTES"/>
        /// </summary>
        public static int MEASUREMENT_BLUETOOTH_RX_BYTES { get { if (!_MEASUREMENT_BLUETOOTH_RX_BYTESReady) { _MEASUREMENT_BLUETOOTH_RX_BYTESContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_BLUETOOTH_RX_BYTES"); _MEASUREMENT_BLUETOOTH_RX_BYTESReady = true; } return _MEASUREMENT_BLUETOOTH_RX_BYTESContent; } }
        private static int _MEASUREMENT_BLUETOOTH_RX_BYTESContent = default;
        private static bool _MEASUREMENT_BLUETOOTH_RX_BYTESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_BLUETOOTH_RX_MS"/>
        /// </summary>
        public static int MEASUREMENT_BLUETOOTH_RX_MS { get { if (!_MEASUREMENT_BLUETOOTH_RX_MSReady) { _MEASUREMENT_BLUETOOTH_RX_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_BLUETOOTH_RX_MS"); _MEASUREMENT_BLUETOOTH_RX_MSReady = true; } return _MEASUREMENT_BLUETOOTH_RX_MSContent; } }
        private static int _MEASUREMENT_BLUETOOTH_RX_MSContent = default;
        private static bool _MEASUREMENT_BLUETOOTH_RX_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_BLUETOOTH_RX_PACKETS"/>
        /// </summary>
        public static int MEASUREMENT_BLUETOOTH_RX_PACKETS { get { if (!_MEASUREMENT_BLUETOOTH_RX_PACKETSReady) { _MEASUREMENT_BLUETOOTH_RX_PACKETSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_BLUETOOTH_RX_PACKETS"); _MEASUREMENT_BLUETOOTH_RX_PACKETSReady = true; } return _MEASUREMENT_BLUETOOTH_RX_PACKETSContent; } }
        private static int _MEASUREMENT_BLUETOOTH_RX_PACKETSContent = default;
        private static bool _MEASUREMENT_BLUETOOTH_RX_PACKETSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_BLUETOOTH_TX_BYTES"/>
        /// </summary>
        public static int MEASUREMENT_BLUETOOTH_TX_BYTES { get { if (!_MEASUREMENT_BLUETOOTH_TX_BYTESReady) { _MEASUREMENT_BLUETOOTH_TX_BYTESContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_BLUETOOTH_TX_BYTES"); _MEASUREMENT_BLUETOOTH_TX_BYTESReady = true; } return _MEASUREMENT_BLUETOOTH_TX_BYTESContent; } }
        private static int _MEASUREMENT_BLUETOOTH_TX_BYTESContent = default;
        private static bool _MEASUREMENT_BLUETOOTH_TX_BYTESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_BLUETOOTH_TX_MS"/>
        /// </summary>
        public static int MEASUREMENT_BLUETOOTH_TX_MS { get { if (!_MEASUREMENT_BLUETOOTH_TX_MSReady) { _MEASUREMENT_BLUETOOTH_TX_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_BLUETOOTH_TX_MS"); _MEASUREMENT_BLUETOOTH_TX_MSReady = true; } return _MEASUREMENT_BLUETOOTH_TX_MSContent; } }
        private static int _MEASUREMENT_BLUETOOTH_TX_MSContent = default;
        private static bool _MEASUREMENT_BLUETOOTH_TX_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_BLUETOOTH_TX_PACKETS"/>
        /// </summary>
        public static int MEASUREMENT_BLUETOOTH_TX_PACKETS { get { if (!_MEASUREMENT_BLUETOOTH_TX_PACKETSReady) { _MEASUREMENT_BLUETOOTH_TX_PACKETSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_BLUETOOTH_TX_PACKETS"); _MEASUREMENT_BLUETOOTH_TX_PACKETSReady = true; } return _MEASUREMENT_BLUETOOTH_TX_PACKETSContent; } }
        private static int _MEASUREMENT_BLUETOOTH_TX_PACKETSContent = default;
        private static bool _MEASUREMENT_BLUETOOTH_TX_PACKETSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_BUTTON_USER_ACTIVITY_COUNT"/>
        /// </summary>
        public static int MEASUREMENT_BUTTON_USER_ACTIVITY_COUNT { get { if (!_MEASUREMENT_BUTTON_USER_ACTIVITY_COUNTReady) { _MEASUREMENT_BUTTON_USER_ACTIVITY_COUNTContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_BUTTON_USER_ACTIVITY_COUNT"); _MEASUREMENT_BUTTON_USER_ACTIVITY_COUNTReady = true; } return _MEASUREMENT_BUTTON_USER_ACTIVITY_COUNTContent; } }
        private static int _MEASUREMENT_BUTTON_USER_ACTIVITY_COUNTContent = default;
        private static bool _MEASUREMENT_BUTTON_USER_ACTIVITY_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_CPU_POWER_MAMS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int MEASUREMENT_CPU_POWER_MAMS { get { if (!_MEASUREMENT_CPU_POWER_MAMSReady) { _MEASUREMENT_CPU_POWER_MAMSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_CPU_POWER_MAMS"); _MEASUREMENT_CPU_POWER_MAMSReady = true; } return _MEASUREMENT_CPU_POWER_MAMSContent; } }
        private static int _MEASUREMENT_CPU_POWER_MAMSContent = default;
        private static bool _MEASUREMENT_CPU_POWER_MAMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_MOBILE_IDLE_MS"/>
        /// </summary>
        public static int MEASUREMENT_MOBILE_IDLE_MS { get { if (!_MEASUREMENT_MOBILE_IDLE_MSReady) { _MEASUREMENT_MOBILE_IDLE_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_MOBILE_IDLE_MS"); _MEASUREMENT_MOBILE_IDLE_MSReady = true; } return _MEASUREMENT_MOBILE_IDLE_MSContent; } }
        private static int _MEASUREMENT_MOBILE_IDLE_MSContent = default;
        private static bool _MEASUREMENT_MOBILE_IDLE_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_MOBILE_POWER_MAMS"/>
        /// </summary>
        public static int MEASUREMENT_MOBILE_POWER_MAMS { get { if (!_MEASUREMENT_MOBILE_POWER_MAMSReady) { _MEASUREMENT_MOBILE_POWER_MAMSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_MOBILE_POWER_MAMS"); _MEASUREMENT_MOBILE_POWER_MAMSReady = true; } return _MEASUREMENT_MOBILE_POWER_MAMSContent; } }
        private static int _MEASUREMENT_MOBILE_POWER_MAMSContent = default;
        private static bool _MEASUREMENT_MOBILE_POWER_MAMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_MOBILE_RX_BYTES"/>
        /// </summary>
        public static int MEASUREMENT_MOBILE_RX_BYTES { get { if (!_MEASUREMENT_MOBILE_RX_BYTESReady) { _MEASUREMENT_MOBILE_RX_BYTESContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_MOBILE_RX_BYTES"); _MEASUREMENT_MOBILE_RX_BYTESReady = true; } return _MEASUREMENT_MOBILE_RX_BYTESContent; } }
        private static int _MEASUREMENT_MOBILE_RX_BYTESContent = default;
        private static bool _MEASUREMENT_MOBILE_RX_BYTESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_MOBILE_RX_MS"/>
        /// </summary>
        public static int MEASUREMENT_MOBILE_RX_MS { get { if (!_MEASUREMENT_MOBILE_RX_MSReady) { _MEASUREMENT_MOBILE_RX_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_MOBILE_RX_MS"); _MEASUREMENT_MOBILE_RX_MSReady = true; } return _MEASUREMENT_MOBILE_RX_MSContent; } }
        private static int _MEASUREMENT_MOBILE_RX_MSContent = default;
        private static bool _MEASUREMENT_MOBILE_RX_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_MOBILE_RX_PACKETS"/>
        /// </summary>
        public static int MEASUREMENT_MOBILE_RX_PACKETS { get { if (!_MEASUREMENT_MOBILE_RX_PACKETSReady) { _MEASUREMENT_MOBILE_RX_PACKETSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_MOBILE_RX_PACKETS"); _MEASUREMENT_MOBILE_RX_PACKETSReady = true; } return _MEASUREMENT_MOBILE_RX_PACKETSContent; } }
        private static int _MEASUREMENT_MOBILE_RX_PACKETSContent = default;
        private static bool _MEASUREMENT_MOBILE_RX_PACKETSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_MOBILE_TX_BYTES"/>
        /// </summary>
        public static int MEASUREMENT_MOBILE_TX_BYTES { get { if (!_MEASUREMENT_MOBILE_TX_BYTESReady) { _MEASUREMENT_MOBILE_TX_BYTESContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_MOBILE_TX_BYTES"); _MEASUREMENT_MOBILE_TX_BYTESReady = true; } return _MEASUREMENT_MOBILE_TX_BYTESContent; } }
        private static int _MEASUREMENT_MOBILE_TX_BYTESContent = default;
        private static bool _MEASUREMENT_MOBILE_TX_BYTESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_MOBILE_TX_MS"/>
        /// </summary>
        public static int MEASUREMENT_MOBILE_TX_MS { get { if (!_MEASUREMENT_MOBILE_TX_MSReady) { _MEASUREMENT_MOBILE_TX_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_MOBILE_TX_MS"); _MEASUREMENT_MOBILE_TX_MSReady = true; } return _MEASUREMENT_MOBILE_TX_MSContent; } }
        private static int _MEASUREMENT_MOBILE_TX_MSContent = default;
        private static bool _MEASUREMENT_MOBILE_TX_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_MOBILE_TX_PACKETS"/>
        /// </summary>
        public static int MEASUREMENT_MOBILE_TX_PACKETS { get { if (!_MEASUREMENT_MOBILE_TX_PACKETSReady) { _MEASUREMENT_MOBILE_TX_PACKETSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_MOBILE_TX_PACKETS"); _MEASUREMENT_MOBILE_TX_PACKETSReady = true; } return _MEASUREMENT_MOBILE_TX_PACKETSContent; } }
        private static int _MEASUREMENT_MOBILE_TX_PACKETSContent = default;
        private static bool _MEASUREMENT_MOBILE_TX_PACKETSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_OTHER_USER_ACTIVITY_COUNT"/>
        /// </summary>
        public static int MEASUREMENT_OTHER_USER_ACTIVITY_COUNT { get { if (!_MEASUREMENT_OTHER_USER_ACTIVITY_COUNTReady) { _MEASUREMENT_OTHER_USER_ACTIVITY_COUNTContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_OTHER_USER_ACTIVITY_COUNT"); _MEASUREMENT_OTHER_USER_ACTIVITY_COUNTReady = true; } return _MEASUREMENT_OTHER_USER_ACTIVITY_COUNTContent; } }
        private static int _MEASUREMENT_OTHER_USER_ACTIVITY_COUNTContent = default;
        private static bool _MEASUREMENT_OTHER_USER_ACTIVITY_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_REALTIME_BATTERY_MS"/>
        /// </summary>
        public static int MEASUREMENT_REALTIME_BATTERY_MS { get { if (!_MEASUREMENT_REALTIME_BATTERY_MSReady) { _MEASUREMENT_REALTIME_BATTERY_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_REALTIME_BATTERY_MS"); _MEASUREMENT_REALTIME_BATTERY_MSReady = true; } return _MEASUREMENT_REALTIME_BATTERY_MSContent; } }
        private static int _MEASUREMENT_REALTIME_BATTERY_MSContent = default;
        private static bool _MEASUREMENT_REALTIME_BATTERY_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_REALTIME_SCREEN_OFF_BATTERY_MS"/>
        /// </summary>
        public static int MEASUREMENT_REALTIME_SCREEN_OFF_BATTERY_MS { get { if (!_MEASUREMENT_REALTIME_SCREEN_OFF_BATTERY_MSReady) { _MEASUREMENT_REALTIME_SCREEN_OFF_BATTERY_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_REALTIME_SCREEN_OFF_BATTERY_MS"); _MEASUREMENT_REALTIME_SCREEN_OFF_BATTERY_MSReady = true; } return _MEASUREMENT_REALTIME_SCREEN_OFF_BATTERY_MSContent; } }
        private static int _MEASUREMENT_REALTIME_SCREEN_OFF_BATTERY_MSContent = default;
        private static bool _MEASUREMENT_REALTIME_SCREEN_OFF_BATTERY_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_SYSTEM_CPU_TIME_MS"/>
        /// </summary>
        public static int MEASUREMENT_SYSTEM_CPU_TIME_MS { get { if (!_MEASUREMENT_SYSTEM_CPU_TIME_MSReady) { _MEASUREMENT_SYSTEM_CPU_TIME_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_SYSTEM_CPU_TIME_MS"); _MEASUREMENT_SYSTEM_CPU_TIME_MSReady = true; } return _MEASUREMENT_SYSTEM_CPU_TIME_MSContent; } }
        private static int _MEASUREMENT_SYSTEM_CPU_TIME_MSContent = default;
        private static bool _MEASUREMENT_SYSTEM_CPU_TIME_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_TOUCH_USER_ACTIVITY_COUNT"/>
        /// </summary>
        public static int MEASUREMENT_TOUCH_USER_ACTIVITY_COUNT { get { if (!_MEASUREMENT_TOUCH_USER_ACTIVITY_COUNTReady) { _MEASUREMENT_TOUCH_USER_ACTIVITY_COUNTContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_TOUCH_USER_ACTIVITY_COUNT"); _MEASUREMENT_TOUCH_USER_ACTIVITY_COUNTReady = true; } return _MEASUREMENT_TOUCH_USER_ACTIVITY_COUNTContent; } }
        private static int _MEASUREMENT_TOUCH_USER_ACTIVITY_COUNTContent = default;
        private static bool _MEASUREMENT_TOUCH_USER_ACTIVITY_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_UPTIME_BATTERY_MS"/>
        /// </summary>
        public static int MEASUREMENT_UPTIME_BATTERY_MS { get { if (!_MEASUREMENT_UPTIME_BATTERY_MSReady) { _MEASUREMENT_UPTIME_BATTERY_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_UPTIME_BATTERY_MS"); _MEASUREMENT_UPTIME_BATTERY_MSReady = true; } return _MEASUREMENT_UPTIME_BATTERY_MSContent; } }
        private static int _MEASUREMENT_UPTIME_BATTERY_MSContent = default;
        private static bool _MEASUREMENT_UPTIME_BATTERY_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_UPTIME_SCREEN_OFF_BATTERY_MS"/>
        /// </summary>
        public static int MEASUREMENT_UPTIME_SCREEN_OFF_BATTERY_MS { get { if (!_MEASUREMENT_UPTIME_SCREEN_OFF_BATTERY_MSReady) { _MEASUREMENT_UPTIME_SCREEN_OFF_BATTERY_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_UPTIME_SCREEN_OFF_BATTERY_MS"); _MEASUREMENT_UPTIME_SCREEN_OFF_BATTERY_MSReady = true; } return _MEASUREMENT_UPTIME_SCREEN_OFF_BATTERY_MSContent; } }
        private static int _MEASUREMENT_UPTIME_SCREEN_OFF_BATTERY_MSContent = default;
        private static bool _MEASUREMENT_UPTIME_SCREEN_OFF_BATTERY_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_USER_CPU_TIME_MS"/>
        /// </summary>
        public static int MEASUREMENT_USER_CPU_TIME_MS { get { if (!_MEASUREMENT_USER_CPU_TIME_MSReady) { _MEASUREMENT_USER_CPU_TIME_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_USER_CPU_TIME_MS"); _MEASUREMENT_USER_CPU_TIME_MSReady = true; } return _MEASUREMENT_USER_CPU_TIME_MSContent; } }
        private static int _MEASUREMENT_USER_CPU_TIME_MSContent = default;
        private static bool _MEASUREMENT_USER_CPU_TIME_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_WIFI_FULL_LOCK_MS"/>
        /// </summary>
        public static int MEASUREMENT_WIFI_FULL_LOCK_MS { get { if (!_MEASUREMENT_WIFI_FULL_LOCK_MSReady) { _MEASUREMENT_WIFI_FULL_LOCK_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_WIFI_FULL_LOCK_MS"); _MEASUREMENT_WIFI_FULL_LOCK_MSReady = true; } return _MEASUREMENT_WIFI_FULL_LOCK_MSContent; } }
        private static int _MEASUREMENT_WIFI_FULL_LOCK_MSContent = default;
        private static bool _MEASUREMENT_WIFI_FULL_LOCK_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_WIFI_IDLE_MS"/>
        /// </summary>
        public static int MEASUREMENT_WIFI_IDLE_MS { get { if (!_MEASUREMENT_WIFI_IDLE_MSReady) { _MEASUREMENT_WIFI_IDLE_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_WIFI_IDLE_MS"); _MEASUREMENT_WIFI_IDLE_MSReady = true; } return _MEASUREMENT_WIFI_IDLE_MSContent; } }
        private static int _MEASUREMENT_WIFI_IDLE_MSContent = default;
        private static bool _MEASUREMENT_WIFI_IDLE_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_WIFI_MULTICAST_MS"/>
        /// </summary>
        public static int MEASUREMENT_WIFI_MULTICAST_MS { get { if (!_MEASUREMENT_WIFI_MULTICAST_MSReady) { _MEASUREMENT_WIFI_MULTICAST_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_WIFI_MULTICAST_MS"); _MEASUREMENT_WIFI_MULTICAST_MSReady = true; } return _MEASUREMENT_WIFI_MULTICAST_MSContent; } }
        private static int _MEASUREMENT_WIFI_MULTICAST_MSContent = default;
        private static bool _MEASUREMENT_WIFI_MULTICAST_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_WIFI_POWER_MAMS"/>
        /// </summary>
        public static int MEASUREMENT_WIFI_POWER_MAMS { get { if (!_MEASUREMENT_WIFI_POWER_MAMSReady) { _MEASUREMENT_WIFI_POWER_MAMSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_WIFI_POWER_MAMS"); _MEASUREMENT_WIFI_POWER_MAMSReady = true; } return _MEASUREMENT_WIFI_POWER_MAMSContent; } }
        private static int _MEASUREMENT_WIFI_POWER_MAMSContent = default;
        private static bool _MEASUREMENT_WIFI_POWER_MAMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_WIFI_RUNNING_MS"/>
        /// </summary>
        public static int MEASUREMENT_WIFI_RUNNING_MS { get { if (!_MEASUREMENT_WIFI_RUNNING_MSReady) { _MEASUREMENT_WIFI_RUNNING_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_WIFI_RUNNING_MS"); _MEASUREMENT_WIFI_RUNNING_MSReady = true; } return _MEASUREMENT_WIFI_RUNNING_MSContent; } }
        private static int _MEASUREMENT_WIFI_RUNNING_MSContent = default;
        private static bool _MEASUREMENT_WIFI_RUNNING_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_WIFI_RX_BYTES"/>
        /// </summary>
        public static int MEASUREMENT_WIFI_RX_BYTES { get { if (!_MEASUREMENT_WIFI_RX_BYTESReady) { _MEASUREMENT_WIFI_RX_BYTESContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_WIFI_RX_BYTES"); _MEASUREMENT_WIFI_RX_BYTESReady = true; } return _MEASUREMENT_WIFI_RX_BYTESContent; } }
        private static int _MEASUREMENT_WIFI_RX_BYTESContent = default;
        private static bool _MEASUREMENT_WIFI_RX_BYTESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_WIFI_RX_MS"/>
        /// </summary>
        public static int MEASUREMENT_WIFI_RX_MS { get { if (!_MEASUREMENT_WIFI_RX_MSReady) { _MEASUREMENT_WIFI_RX_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_WIFI_RX_MS"); _MEASUREMENT_WIFI_RX_MSReady = true; } return _MEASUREMENT_WIFI_RX_MSContent; } }
        private static int _MEASUREMENT_WIFI_RX_MSContent = default;
        private static bool _MEASUREMENT_WIFI_RX_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_WIFI_RX_PACKETS"/>
        /// </summary>
        public static int MEASUREMENT_WIFI_RX_PACKETS { get { if (!_MEASUREMENT_WIFI_RX_PACKETSReady) { _MEASUREMENT_WIFI_RX_PACKETSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_WIFI_RX_PACKETS"); _MEASUREMENT_WIFI_RX_PACKETSReady = true; } return _MEASUREMENT_WIFI_RX_PACKETSContent; } }
        private static int _MEASUREMENT_WIFI_RX_PACKETSContent = default;
        private static bool _MEASUREMENT_WIFI_RX_PACKETSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_WIFI_TX_BYTES"/>
        /// </summary>
        public static int MEASUREMENT_WIFI_TX_BYTES { get { if (!_MEASUREMENT_WIFI_TX_BYTESReady) { _MEASUREMENT_WIFI_TX_BYTESContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_WIFI_TX_BYTES"); _MEASUREMENT_WIFI_TX_BYTESReady = true; } return _MEASUREMENT_WIFI_TX_BYTESContent; } }
        private static int _MEASUREMENT_WIFI_TX_BYTESContent = default;
        private static bool _MEASUREMENT_WIFI_TX_BYTESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_WIFI_TX_MS"/>
        /// </summary>
        public static int MEASUREMENT_WIFI_TX_MS { get { if (!_MEASUREMENT_WIFI_TX_MSReady) { _MEASUREMENT_WIFI_TX_MSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_WIFI_TX_MS"); _MEASUREMENT_WIFI_TX_MSReady = true; } return _MEASUREMENT_WIFI_TX_MSContent; } }
        private static int _MEASUREMENT_WIFI_TX_MSContent = default;
        private static bool _MEASUREMENT_WIFI_TX_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#MEASUREMENT_WIFI_TX_PACKETS"/>
        /// </summary>
        public static int MEASUREMENT_WIFI_TX_PACKETS { get { if (!_MEASUREMENT_WIFI_TX_PACKETSReady) { _MEASUREMENT_WIFI_TX_PACKETSContent = SGetField<int>(LocalBridgeClazz, "MEASUREMENT_WIFI_TX_PACKETS"); _MEASUREMENT_WIFI_TX_PACKETSReady = true; } return _MEASUREMENT_WIFI_TX_PACKETSContent; } }
        private static int _MEASUREMENT_WIFI_TX_PACKETSContent = default;
        private static bool _MEASUREMENT_WIFI_TX_PACKETSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#STATS_PACKAGES"/>
        /// </summary>
        public static int STATS_PACKAGES { get { if (!_STATS_PACKAGESReady) { _STATS_PACKAGESContent = SGetField<int>(LocalBridgeClazz, "STATS_PACKAGES"); _STATS_PACKAGESReady = true; } return _STATS_PACKAGESContent; } }
        private static int _STATS_PACKAGESContent = default;
        private static bool _STATS_PACKAGESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#STATS_PIDS"/>
        /// </summary>
        public static int STATS_PIDS { get { if (!_STATS_PIDSReady) { _STATS_PIDSContent = SGetField<int>(LocalBridgeClazz, "STATS_PIDS"); _STATS_PIDSReady = true; } return _STATS_PIDSContent; } }
        private static int _STATS_PIDSContent = default;
        private static bool _STATS_PIDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#STATS_PROCESSES"/>
        /// </summary>
        public static int STATS_PROCESSES { get { if (!_STATS_PROCESSESReady) { _STATS_PROCESSESContent = SGetField<int>(LocalBridgeClazz, "STATS_PROCESSES"); _STATS_PROCESSESReady = true; } return _STATS_PROCESSESContent; } }
        private static int _STATS_PROCESSESContent = default;
        private static bool _STATS_PROCESSESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_AUDIO"/>
        /// </summary>
        public static int TIMER_AUDIO { get { if (!_TIMER_AUDIOReady) { _TIMER_AUDIOContent = SGetField<int>(LocalBridgeClazz, "TIMER_AUDIO"); _TIMER_AUDIOReady = true; } return _TIMER_AUDIOContent; } }
        private static int _TIMER_AUDIOContent = default;
        private static bool _TIMER_AUDIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_BLUETOOTH_SCAN"/>
        /// </summary>
        public static int TIMER_BLUETOOTH_SCAN { get { if (!_TIMER_BLUETOOTH_SCANReady) { _TIMER_BLUETOOTH_SCANContent = SGetField<int>(LocalBridgeClazz, "TIMER_BLUETOOTH_SCAN"); _TIMER_BLUETOOTH_SCANReady = true; } return _TIMER_BLUETOOTH_SCANContent; } }
        private static int _TIMER_BLUETOOTH_SCANContent = default;
        private static bool _TIMER_BLUETOOTH_SCANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_CAMERA"/>
        /// </summary>
        public static int TIMER_CAMERA { get { if (!_TIMER_CAMERAReady) { _TIMER_CAMERAContent = SGetField<int>(LocalBridgeClazz, "TIMER_CAMERA"); _TIMER_CAMERAReady = true; } return _TIMER_CAMERAContent; } }
        private static int _TIMER_CAMERAContent = default;
        private static bool _TIMER_CAMERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_FLASHLIGHT"/>
        /// </summary>
        public static int TIMER_FLASHLIGHT { get { if (!_TIMER_FLASHLIGHTReady) { _TIMER_FLASHLIGHTContent = SGetField<int>(LocalBridgeClazz, "TIMER_FLASHLIGHT"); _TIMER_FLASHLIGHTReady = true; } return _TIMER_FLASHLIGHTContent; } }
        private static int _TIMER_FLASHLIGHTContent = default;
        private static bool _TIMER_FLASHLIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_FOREGROUND_ACTIVITY"/>
        /// </summary>
        public static int TIMER_FOREGROUND_ACTIVITY { get { if (!_TIMER_FOREGROUND_ACTIVITYReady) { _TIMER_FOREGROUND_ACTIVITYContent = SGetField<int>(LocalBridgeClazz, "TIMER_FOREGROUND_ACTIVITY"); _TIMER_FOREGROUND_ACTIVITYReady = true; } return _TIMER_FOREGROUND_ACTIVITYContent; } }
        private static int _TIMER_FOREGROUND_ACTIVITYContent = default;
        private static bool _TIMER_FOREGROUND_ACTIVITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_GPS_SENSOR"/>
        /// </summary>
        public static int TIMER_GPS_SENSOR { get { if (!_TIMER_GPS_SENSORReady) { _TIMER_GPS_SENSORContent = SGetField<int>(LocalBridgeClazz, "TIMER_GPS_SENSOR"); _TIMER_GPS_SENSORReady = true; } return _TIMER_GPS_SENSORContent; } }
        private static int _TIMER_GPS_SENSORContent = default;
        private static bool _TIMER_GPS_SENSORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_MOBILE_RADIO_ACTIVE"/>
        /// </summary>
        public static int TIMER_MOBILE_RADIO_ACTIVE { get { if (!_TIMER_MOBILE_RADIO_ACTIVEReady) { _TIMER_MOBILE_RADIO_ACTIVEContent = SGetField<int>(LocalBridgeClazz, "TIMER_MOBILE_RADIO_ACTIVE"); _TIMER_MOBILE_RADIO_ACTIVEReady = true; } return _TIMER_MOBILE_RADIO_ACTIVEContent; } }
        private static int _TIMER_MOBILE_RADIO_ACTIVEContent = default;
        private static bool _TIMER_MOBILE_RADIO_ACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_PROCESS_STATE_BACKGROUND_MS"/>
        /// </summary>
        public static int TIMER_PROCESS_STATE_BACKGROUND_MS { get { if (!_TIMER_PROCESS_STATE_BACKGROUND_MSReady) { _TIMER_PROCESS_STATE_BACKGROUND_MSContent = SGetField<int>(LocalBridgeClazz, "TIMER_PROCESS_STATE_BACKGROUND_MS"); _TIMER_PROCESS_STATE_BACKGROUND_MSReady = true; } return _TIMER_PROCESS_STATE_BACKGROUND_MSContent; } }
        private static int _TIMER_PROCESS_STATE_BACKGROUND_MSContent = default;
        private static bool _TIMER_PROCESS_STATE_BACKGROUND_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_PROCESS_STATE_CACHED_MS"/>
        /// </summary>
        public static int TIMER_PROCESS_STATE_CACHED_MS { get { if (!_TIMER_PROCESS_STATE_CACHED_MSReady) { _TIMER_PROCESS_STATE_CACHED_MSContent = SGetField<int>(LocalBridgeClazz, "TIMER_PROCESS_STATE_CACHED_MS"); _TIMER_PROCESS_STATE_CACHED_MSReady = true; } return _TIMER_PROCESS_STATE_CACHED_MSContent; } }
        private static int _TIMER_PROCESS_STATE_CACHED_MSContent = default;
        private static bool _TIMER_PROCESS_STATE_CACHED_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_PROCESS_STATE_FOREGROUND_MS"/>
        /// </summary>
        public static int TIMER_PROCESS_STATE_FOREGROUND_MS { get { if (!_TIMER_PROCESS_STATE_FOREGROUND_MSReady) { _TIMER_PROCESS_STATE_FOREGROUND_MSContent = SGetField<int>(LocalBridgeClazz, "TIMER_PROCESS_STATE_FOREGROUND_MS"); _TIMER_PROCESS_STATE_FOREGROUND_MSReady = true; } return _TIMER_PROCESS_STATE_FOREGROUND_MSContent; } }
        private static int _TIMER_PROCESS_STATE_FOREGROUND_MSContent = default;
        private static bool _TIMER_PROCESS_STATE_FOREGROUND_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_PROCESS_STATE_FOREGROUND_SERVICE_MS"/>
        /// </summary>
        public static int TIMER_PROCESS_STATE_FOREGROUND_SERVICE_MS { get { if (!_TIMER_PROCESS_STATE_FOREGROUND_SERVICE_MSReady) { _TIMER_PROCESS_STATE_FOREGROUND_SERVICE_MSContent = SGetField<int>(LocalBridgeClazz, "TIMER_PROCESS_STATE_FOREGROUND_SERVICE_MS"); _TIMER_PROCESS_STATE_FOREGROUND_SERVICE_MSReady = true; } return _TIMER_PROCESS_STATE_FOREGROUND_SERVICE_MSContent; } }
        private static int _TIMER_PROCESS_STATE_FOREGROUND_SERVICE_MSContent = default;
        private static bool _TIMER_PROCESS_STATE_FOREGROUND_SERVICE_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_PROCESS_STATE_TOP_MS"/>
        /// </summary>
        public static int TIMER_PROCESS_STATE_TOP_MS { get { if (!_TIMER_PROCESS_STATE_TOP_MSReady) { _TIMER_PROCESS_STATE_TOP_MSContent = SGetField<int>(LocalBridgeClazz, "TIMER_PROCESS_STATE_TOP_MS"); _TIMER_PROCESS_STATE_TOP_MSReady = true; } return _TIMER_PROCESS_STATE_TOP_MSContent; } }
        private static int _TIMER_PROCESS_STATE_TOP_MSContent = default;
        private static bool _TIMER_PROCESS_STATE_TOP_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_PROCESS_STATE_TOP_SLEEPING_MS"/>
        /// </summary>
        public static int TIMER_PROCESS_STATE_TOP_SLEEPING_MS { get { if (!_TIMER_PROCESS_STATE_TOP_SLEEPING_MSReady) { _TIMER_PROCESS_STATE_TOP_SLEEPING_MSContent = SGetField<int>(LocalBridgeClazz, "TIMER_PROCESS_STATE_TOP_SLEEPING_MS"); _TIMER_PROCESS_STATE_TOP_SLEEPING_MSReady = true; } return _TIMER_PROCESS_STATE_TOP_SLEEPING_MSContent; } }
        private static int _TIMER_PROCESS_STATE_TOP_SLEEPING_MSContent = default;
        private static bool _TIMER_PROCESS_STATE_TOP_SLEEPING_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_VIBRATOR"/>
        /// </summary>
        public static int TIMER_VIBRATOR { get { if (!_TIMER_VIBRATORReady) { _TIMER_VIBRATORContent = SGetField<int>(LocalBridgeClazz, "TIMER_VIBRATOR"); _TIMER_VIBRATORReady = true; } return _TIMER_VIBRATORContent; } }
        private static int _TIMER_VIBRATORContent = default;
        private static bool _TIMER_VIBRATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_VIDEO"/>
        /// </summary>
        public static int TIMER_VIDEO { get { if (!_TIMER_VIDEOReady) { _TIMER_VIDEOContent = SGetField<int>(LocalBridgeClazz, "TIMER_VIDEO"); _TIMER_VIDEOReady = true; } return _TIMER_VIDEOContent; } }
        private static int _TIMER_VIDEOContent = default;
        private static bool _TIMER_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMER_WIFI_SCAN"/>
        /// </summary>
        public static int TIMER_WIFI_SCAN { get { if (!_TIMER_WIFI_SCANReady) { _TIMER_WIFI_SCANContent = SGetField<int>(LocalBridgeClazz, "TIMER_WIFI_SCAN"); _TIMER_WIFI_SCANReady = true; } return _TIMER_WIFI_SCANContent; } }
        private static int _TIMER_WIFI_SCANContent = default;
        private static bool _TIMER_WIFI_SCANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMERS_JOBS"/>
        /// </summary>
        public static int TIMERS_JOBS { get { if (!_TIMERS_JOBSReady) { _TIMERS_JOBSContent = SGetField<int>(LocalBridgeClazz, "TIMERS_JOBS"); _TIMERS_JOBSReady = true; } return _TIMERS_JOBSContent; } }
        private static int _TIMERS_JOBSContent = default;
        private static bool _TIMERS_JOBSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMERS_SENSORS"/>
        /// </summary>
        public static int TIMERS_SENSORS { get { if (!_TIMERS_SENSORSReady) { _TIMERS_SENSORSContent = SGetField<int>(LocalBridgeClazz, "TIMERS_SENSORS"); _TIMERS_SENSORSReady = true; } return _TIMERS_SENSORSContent; } }
        private static int _TIMERS_SENSORSContent = default;
        private static bool _TIMERS_SENSORSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMERS_SYNCS"/>
        /// </summary>
        public static int TIMERS_SYNCS { get { if (!_TIMERS_SYNCSReady) { _TIMERS_SYNCSContent = SGetField<int>(LocalBridgeClazz, "TIMERS_SYNCS"); _TIMERS_SYNCSReady = true; } return _TIMERS_SYNCSContent; } }
        private static int _TIMERS_SYNCSContent = default;
        private static bool _TIMERS_SYNCSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMERS_WAKELOCKS_DRAW"/>
        /// </summary>
        public static int TIMERS_WAKELOCKS_DRAW { get { if (!_TIMERS_WAKELOCKS_DRAWReady) { _TIMERS_WAKELOCKS_DRAWContent = SGetField<int>(LocalBridgeClazz, "TIMERS_WAKELOCKS_DRAW"); _TIMERS_WAKELOCKS_DRAWReady = true; } return _TIMERS_WAKELOCKS_DRAWContent; } }
        private static int _TIMERS_WAKELOCKS_DRAWContent = default;
        private static bool _TIMERS_WAKELOCKS_DRAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMERS_WAKELOCKS_FULL"/>
        /// </summary>
        public static int TIMERS_WAKELOCKS_FULL { get { if (!_TIMERS_WAKELOCKS_FULLReady) { _TIMERS_WAKELOCKS_FULLContent = SGetField<int>(LocalBridgeClazz, "TIMERS_WAKELOCKS_FULL"); _TIMERS_WAKELOCKS_FULLReady = true; } return _TIMERS_WAKELOCKS_FULLContent; } }
        private static int _TIMERS_WAKELOCKS_FULLContent = default;
        private static bool _TIMERS_WAKELOCKS_FULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMERS_WAKELOCKS_PARTIAL"/>
        /// </summary>
        public static int TIMERS_WAKELOCKS_PARTIAL { get { if (!_TIMERS_WAKELOCKS_PARTIALReady) { _TIMERS_WAKELOCKS_PARTIALContent = SGetField<int>(LocalBridgeClazz, "TIMERS_WAKELOCKS_PARTIAL"); _TIMERS_WAKELOCKS_PARTIALReady = true; } return _TIMERS_WAKELOCKS_PARTIALContent; } }
        private static int _TIMERS_WAKELOCKS_PARTIALContent = default;
        private static bool _TIMERS_WAKELOCKS_PARTIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/health/UidHealthStats.html#TIMERS_WAKELOCKS_WINDOW"/>
        /// </summary>
        public static int TIMERS_WAKELOCKS_WINDOW { get { if (!_TIMERS_WAKELOCKS_WINDOWReady) { _TIMERS_WAKELOCKS_WINDOWContent = SGetField<int>(LocalBridgeClazz, "TIMERS_WAKELOCKS_WINDOW"); _TIMERS_WAKELOCKS_WINDOWReady = true; } return _TIMERS_WAKELOCKS_WINDOWContent; } }
        private static int _TIMERS_WAKELOCKS_WINDOWContent = default;
        private static bool _TIMERS_WAKELOCKS_WINDOWReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
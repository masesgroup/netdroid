/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Os
{
    #region UserManager
    public partial class UserManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#QUIET_MODE_DISABLE_ONLY_IF_CREDENTIAL_NOT_REQUIRED"/>
        /// </summary>
        public static int QUIET_MODE_DISABLE_ONLY_IF_CREDENTIAL_NOT_REQUIRED { get { if (!_QUIET_MODE_DISABLE_ONLY_IF_CREDENTIAL_NOT_REQUIREDReady) { _QUIET_MODE_DISABLE_ONLY_IF_CREDENTIAL_NOT_REQUIREDContent = SGetField<int>(LocalBridgeClazz, "QUIET_MODE_DISABLE_ONLY_IF_CREDENTIAL_NOT_REQUIRED"); _QUIET_MODE_DISABLE_ONLY_IF_CREDENTIAL_NOT_REQUIREDReady = true; } return _QUIET_MODE_DISABLE_ONLY_IF_CREDENTIAL_NOT_REQUIREDContent; } }
        private static int _QUIET_MODE_DISABLE_ONLY_IF_CREDENTIAL_NOT_REQUIREDContent = default;
        private static bool _QUIET_MODE_DISABLE_ONLY_IF_CREDENTIAL_NOT_REQUIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#USER_CREATION_FAILED_NO_MORE_USERS"/>
        /// </summary>
        public static int USER_CREATION_FAILED_NO_MORE_USERS { get { if (!_USER_CREATION_FAILED_NO_MORE_USERSReady) { _USER_CREATION_FAILED_NO_MORE_USERSContent = SGetField<int>(LocalBridgeClazz, "USER_CREATION_FAILED_NO_MORE_USERS"); _USER_CREATION_FAILED_NO_MORE_USERSReady = true; } return _USER_CREATION_FAILED_NO_MORE_USERSContent; } }
        private static int _USER_CREATION_FAILED_NO_MORE_USERSContent = default;
        private static bool _USER_CREATION_FAILED_NO_MORE_USERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#USER_CREATION_FAILED_NOT_PERMITTED"/>
        /// </summary>
        public static int USER_CREATION_FAILED_NOT_PERMITTED { get { if (!_USER_CREATION_FAILED_NOT_PERMITTEDReady) { _USER_CREATION_FAILED_NOT_PERMITTEDContent = SGetField<int>(LocalBridgeClazz, "USER_CREATION_FAILED_NOT_PERMITTED"); _USER_CREATION_FAILED_NOT_PERMITTEDReady = true; } return _USER_CREATION_FAILED_NOT_PERMITTEDContent; } }
        private static int _USER_CREATION_FAILED_NOT_PERMITTEDContent = default;
        private static bool _USER_CREATION_FAILED_NOT_PERMITTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#USER_OPERATION_ERROR_CURRENT_USER"/>
        /// </summary>
        public static int USER_OPERATION_ERROR_CURRENT_USER { get { if (!_USER_OPERATION_ERROR_CURRENT_USERReady) { _USER_OPERATION_ERROR_CURRENT_USERContent = SGetField<int>(LocalBridgeClazz, "USER_OPERATION_ERROR_CURRENT_USER"); _USER_OPERATION_ERROR_CURRENT_USERReady = true; } return _USER_OPERATION_ERROR_CURRENT_USERContent; } }
        private static int _USER_OPERATION_ERROR_CURRENT_USERContent = default;
        private static bool _USER_OPERATION_ERROR_CURRENT_USERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#USER_OPERATION_ERROR_LOW_STORAGE"/>
        /// </summary>
        public static int USER_OPERATION_ERROR_LOW_STORAGE { get { if (!_USER_OPERATION_ERROR_LOW_STORAGEReady) { _USER_OPERATION_ERROR_LOW_STORAGEContent = SGetField<int>(LocalBridgeClazz, "USER_OPERATION_ERROR_LOW_STORAGE"); _USER_OPERATION_ERROR_LOW_STORAGEReady = true; } return _USER_OPERATION_ERROR_LOW_STORAGEContent; } }
        private static int _USER_OPERATION_ERROR_LOW_STORAGEContent = default;
        private static bool _USER_OPERATION_ERROR_LOW_STORAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#USER_OPERATION_ERROR_MANAGED_PROFILE"/>
        /// </summary>
        public static int USER_OPERATION_ERROR_MANAGED_PROFILE { get { if (!_USER_OPERATION_ERROR_MANAGED_PROFILEReady) { _USER_OPERATION_ERROR_MANAGED_PROFILEContent = SGetField<int>(LocalBridgeClazz, "USER_OPERATION_ERROR_MANAGED_PROFILE"); _USER_OPERATION_ERROR_MANAGED_PROFILEReady = true; } return _USER_OPERATION_ERROR_MANAGED_PROFILEContent; } }
        private static int _USER_OPERATION_ERROR_MANAGED_PROFILEContent = default;
        private static bool _USER_OPERATION_ERROR_MANAGED_PROFILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#USER_OPERATION_ERROR_MAX_RUNNING_USERS"/>
        /// </summary>
        public static int USER_OPERATION_ERROR_MAX_RUNNING_USERS { get { if (!_USER_OPERATION_ERROR_MAX_RUNNING_USERSReady) { _USER_OPERATION_ERROR_MAX_RUNNING_USERSContent = SGetField<int>(LocalBridgeClazz, "USER_OPERATION_ERROR_MAX_RUNNING_USERS"); _USER_OPERATION_ERROR_MAX_RUNNING_USERSReady = true; } return _USER_OPERATION_ERROR_MAX_RUNNING_USERSContent; } }
        private static int _USER_OPERATION_ERROR_MAX_RUNNING_USERSContent = default;
        private static bool _USER_OPERATION_ERROR_MAX_RUNNING_USERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#USER_OPERATION_ERROR_MAX_USERS"/>
        /// </summary>
        public static int USER_OPERATION_ERROR_MAX_USERS { get { if (!_USER_OPERATION_ERROR_MAX_USERSReady) { _USER_OPERATION_ERROR_MAX_USERSContent = SGetField<int>(LocalBridgeClazz, "USER_OPERATION_ERROR_MAX_USERS"); _USER_OPERATION_ERROR_MAX_USERSReady = true; } return _USER_OPERATION_ERROR_MAX_USERSContent; } }
        private static int _USER_OPERATION_ERROR_MAX_USERSContent = default;
        private static bool _USER_OPERATION_ERROR_MAX_USERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#USER_OPERATION_ERROR_UNKNOWN"/>
        /// </summary>
        public static int USER_OPERATION_ERROR_UNKNOWN { get { if (!_USER_OPERATION_ERROR_UNKNOWNReady) { _USER_OPERATION_ERROR_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "USER_OPERATION_ERROR_UNKNOWN"); _USER_OPERATION_ERROR_UNKNOWNReady = true; } return _USER_OPERATION_ERROR_UNKNOWNContent; } }
        private static int _USER_OPERATION_ERROR_UNKNOWNContent = default;
        private static bool _USER_OPERATION_ERROR_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#USER_OPERATION_SUCCESS"/>
        /// </summary>
        public static int USER_OPERATION_SUCCESS { get { if (!_USER_OPERATION_SUCCESSReady) { _USER_OPERATION_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "USER_OPERATION_SUCCESS"); _USER_OPERATION_SUCCESSReady = true; } return _USER_OPERATION_SUCCESSContent; } }
        private static int _USER_OPERATION_SUCCESSContent = default;
        private static bool _USER_OPERATION_SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#ALLOW_PARENT_PROFILE_APP_LINKING"/>
        /// </summary>
        public static Java.Lang.String ALLOW_PARENT_PROFILE_APP_LINKING { get { if (!_ALLOW_PARENT_PROFILE_APP_LINKINGReady) { _ALLOW_PARENT_PROFILE_APP_LINKINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALLOW_PARENT_PROFILE_APP_LINKING"); _ALLOW_PARENT_PROFILE_APP_LINKINGReady = true; } return _ALLOW_PARENT_PROFILE_APP_LINKINGContent; } }
        private static Java.Lang.String _ALLOW_PARENT_PROFILE_APP_LINKINGContent = default;
        private static bool _ALLOW_PARENT_PROFILE_APP_LINKINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_ADD_MANAGED_PROFILE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String DISALLOW_ADD_MANAGED_PROFILE { get { if (!_DISALLOW_ADD_MANAGED_PROFILEReady) { _DISALLOW_ADD_MANAGED_PROFILEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_ADD_MANAGED_PROFILE"); _DISALLOW_ADD_MANAGED_PROFILEReady = true; } return _DISALLOW_ADD_MANAGED_PROFILEContent; } }
        private static Java.Lang.String _DISALLOW_ADD_MANAGED_PROFILEContent = default;
        private static bool _DISALLOW_ADD_MANAGED_PROFILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_ADD_USER"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_ADD_USER { get { if (!_DISALLOW_ADD_USERReady) { _DISALLOW_ADD_USERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_ADD_USER"); _DISALLOW_ADD_USERReady = true; } return _DISALLOW_ADD_USERContent; } }
        private static Java.Lang.String _DISALLOW_ADD_USERContent = default;
        private static bool _DISALLOW_ADD_USERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_ADD_WIFI_CONFIG"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_ADD_WIFI_CONFIG { get { if (!_DISALLOW_ADD_WIFI_CONFIGReady) { _DISALLOW_ADD_WIFI_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_ADD_WIFI_CONFIG"); _DISALLOW_ADD_WIFI_CONFIGReady = true; } return _DISALLOW_ADD_WIFI_CONFIGContent; } }
        private static Java.Lang.String _DISALLOW_ADD_WIFI_CONFIGContent = default;
        private static bool _DISALLOW_ADD_WIFI_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_ADJUST_VOLUME"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_ADJUST_VOLUME { get { if (!_DISALLOW_ADJUST_VOLUMEReady) { _DISALLOW_ADJUST_VOLUMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_ADJUST_VOLUME"); _DISALLOW_ADJUST_VOLUMEReady = true; } return _DISALLOW_ADJUST_VOLUMEContent; } }
        private static Java.Lang.String _DISALLOW_ADJUST_VOLUMEContent = default;
        private static bool _DISALLOW_ADJUST_VOLUMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_AIRPLANE_MODE"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_AIRPLANE_MODE { get { if (!_DISALLOW_AIRPLANE_MODEReady) { _DISALLOW_AIRPLANE_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_AIRPLANE_MODE"); _DISALLOW_AIRPLANE_MODEReady = true; } return _DISALLOW_AIRPLANE_MODEContent; } }
        private static Java.Lang.String _DISALLOW_AIRPLANE_MODEContent = default;
        private static bool _DISALLOW_AIRPLANE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_AMBIENT_DISPLAY"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_AMBIENT_DISPLAY { get { if (!_DISALLOW_AMBIENT_DISPLAYReady) { _DISALLOW_AMBIENT_DISPLAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_AMBIENT_DISPLAY"); _DISALLOW_AMBIENT_DISPLAYReady = true; } return _DISALLOW_AMBIENT_DISPLAYContent; } }
        private static Java.Lang.String _DISALLOW_AMBIENT_DISPLAYContent = default;
        private static bool _DISALLOW_AMBIENT_DISPLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_APPS_CONTROL"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_APPS_CONTROL { get { if (!_DISALLOW_APPS_CONTROLReady) { _DISALLOW_APPS_CONTROLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_APPS_CONTROL"); _DISALLOW_APPS_CONTROLReady = true; } return _DISALLOW_APPS_CONTROLContent; } }
        private static Java.Lang.String _DISALLOW_APPS_CONTROLContent = default;
        private static bool _DISALLOW_APPS_CONTROLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_AUTOFILL"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_AUTOFILL { get { if (!_DISALLOW_AUTOFILLReady) { _DISALLOW_AUTOFILLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_AUTOFILL"); _DISALLOW_AUTOFILLReady = true; } return _DISALLOW_AUTOFILLContent; } }
        private static Java.Lang.String _DISALLOW_AUTOFILLContent = default;
        private static bool _DISALLOW_AUTOFILLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_BLUETOOTH"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_BLUETOOTH { get { if (!_DISALLOW_BLUETOOTHReady) { _DISALLOW_BLUETOOTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_BLUETOOTH"); _DISALLOW_BLUETOOTHReady = true; } return _DISALLOW_BLUETOOTHContent; } }
        private static Java.Lang.String _DISALLOW_BLUETOOTHContent = default;
        private static bool _DISALLOW_BLUETOOTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_BLUETOOTH_SHARING"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_BLUETOOTH_SHARING { get { if (!_DISALLOW_BLUETOOTH_SHARINGReady) { _DISALLOW_BLUETOOTH_SHARINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_BLUETOOTH_SHARING"); _DISALLOW_BLUETOOTH_SHARINGReady = true; } return _DISALLOW_BLUETOOTH_SHARINGContent; } }
        private static Java.Lang.String _DISALLOW_BLUETOOTH_SHARINGContent = default;
        private static bool _DISALLOW_BLUETOOTH_SHARINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CAMERA_TOGGLE"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CAMERA_TOGGLE { get { if (!_DISALLOW_CAMERA_TOGGLEReady) { _DISALLOW_CAMERA_TOGGLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CAMERA_TOGGLE"); _DISALLOW_CAMERA_TOGGLEReady = true; } return _DISALLOW_CAMERA_TOGGLEContent; } }
        private static Java.Lang.String _DISALLOW_CAMERA_TOGGLEContent = default;
        private static bool _DISALLOW_CAMERA_TOGGLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CELLULAR_2G"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CELLULAR_2G { get { if (!_DISALLOW_CELLULAR_2GReady) { _DISALLOW_CELLULAR_2GContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CELLULAR_2G"); _DISALLOW_CELLULAR_2GReady = true; } return _DISALLOW_CELLULAR_2GContent; } }
        private static Java.Lang.String _DISALLOW_CELLULAR_2GContent = default;
        private static bool _DISALLOW_CELLULAR_2GReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CHANGE_WIFI_STATE"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CHANGE_WIFI_STATE { get { if (!_DISALLOW_CHANGE_WIFI_STATEReady) { _DISALLOW_CHANGE_WIFI_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CHANGE_WIFI_STATE"); _DISALLOW_CHANGE_WIFI_STATEReady = true; } return _DISALLOW_CHANGE_WIFI_STATEContent; } }
        private static Java.Lang.String _DISALLOW_CHANGE_WIFI_STATEContent = default;
        private static bool _DISALLOW_CHANGE_WIFI_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_BLUETOOTH"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CONFIG_BLUETOOTH { get { if (!_DISALLOW_CONFIG_BLUETOOTHReady) { _DISALLOW_CONFIG_BLUETOOTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CONFIG_BLUETOOTH"); _DISALLOW_CONFIG_BLUETOOTHReady = true; } return _DISALLOW_CONFIG_BLUETOOTHContent; } }
        private static Java.Lang.String _DISALLOW_CONFIG_BLUETOOTHContent = default;
        private static bool _DISALLOW_CONFIG_BLUETOOTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_BRIGHTNESS"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CONFIG_BRIGHTNESS { get { if (!_DISALLOW_CONFIG_BRIGHTNESSReady) { _DISALLOW_CONFIG_BRIGHTNESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CONFIG_BRIGHTNESS"); _DISALLOW_CONFIG_BRIGHTNESSReady = true; } return _DISALLOW_CONFIG_BRIGHTNESSContent; } }
        private static Java.Lang.String _DISALLOW_CONFIG_BRIGHTNESSContent = default;
        private static bool _DISALLOW_CONFIG_BRIGHTNESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_CELL_BROADCASTS"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CONFIG_CELL_BROADCASTS { get { if (!_DISALLOW_CONFIG_CELL_BROADCASTSReady) { _DISALLOW_CONFIG_CELL_BROADCASTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CONFIG_CELL_BROADCASTS"); _DISALLOW_CONFIG_CELL_BROADCASTSReady = true; } return _DISALLOW_CONFIG_CELL_BROADCASTSContent; } }
        private static Java.Lang.String _DISALLOW_CONFIG_CELL_BROADCASTSContent = default;
        private static bool _DISALLOW_CONFIG_CELL_BROADCASTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_CREDENTIALS"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CONFIG_CREDENTIALS { get { if (!_DISALLOW_CONFIG_CREDENTIALSReady) { _DISALLOW_CONFIG_CREDENTIALSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CONFIG_CREDENTIALS"); _DISALLOW_CONFIG_CREDENTIALSReady = true; } return _DISALLOW_CONFIG_CREDENTIALSContent; } }
        private static Java.Lang.String _DISALLOW_CONFIG_CREDENTIALSContent = default;
        private static bool _DISALLOW_CONFIG_CREDENTIALSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_DATE_TIME"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CONFIG_DATE_TIME { get { if (!_DISALLOW_CONFIG_DATE_TIMEReady) { _DISALLOW_CONFIG_DATE_TIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CONFIG_DATE_TIME"); _DISALLOW_CONFIG_DATE_TIMEReady = true; } return _DISALLOW_CONFIG_DATE_TIMEContent; } }
        private static Java.Lang.String _DISALLOW_CONFIG_DATE_TIMEContent = default;
        private static bool _DISALLOW_CONFIG_DATE_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_DEFAULT_APPS"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CONFIG_DEFAULT_APPS { get { if (!_DISALLOW_CONFIG_DEFAULT_APPSReady) { _DISALLOW_CONFIG_DEFAULT_APPSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CONFIG_DEFAULT_APPS"); _DISALLOW_CONFIG_DEFAULT_APPSReady = true; } return _DISALLOW_CONFIG_DEFAULT_APPSContent; } }
        private static Java.Lang.String _DISALLOW_CONFIG_DEFAULT_APPSContent = default;
        private static bool _DISALLOW_CONFIG_DEFAULT_APPSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_LOCALE"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CONFIG_LOCALE { get { if (!_DISALLOW_CONFIG_LOCALEReady) { _DISALLOW_CONFIG_LOCALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CONFIG_LOCALE"); _DISALLOW_CONFIG_LOCALEReady = true; } return _DISALLOW_CONFIG_LOCALEContent; } }
        private static Java.Lang.String _DISALLOW_CONFIG_LOCALEContent = default;
        private static bool _DISALLOW_CONFIG_LOCALEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_LOCATION"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CONFIG_LOCATION { get { if (!_DISALLOW_CONFIG_LOCATIONReady) { _DISALLOW_CONFIG_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CONFIG_LOCATION"); _DISALLOW_CONFIG_LOCATIONReady = true; } return _DISALLOW_CONFIG_LOCATIONContent; } }
        private static Java.Lang.String _DISALLOW_CONFIG_LOCATIONContent = default;
        private static bool _DISALLOW_CONFIG_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_MOBILE_NETWORKS"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CONFIG_MOBILE_NETWORKS { get { if (!_DISALLOW_CONFIG_MOBILE_NETWORKSReady) { _DISALLOW_CONFIG_MOBILE_NETWORKSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CONFIG_MOBILE_NETWORKS"); _DISALLOW_CONFIG_MOBILE_NETWORKSReady = true; } return _DISALLOW_CONFIG_MOBILE_NETWORKSContent; } }
        private static Java.Lang.String _DISALLOW_CONFIG_MOBILE_NETWORKSContent = default;
        private static bool _DISALLOW_CONFIG_MOBILE_NETWORKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_PRIVATE_DNS"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CONFIG_PRIVATE_DNS { get { if (!_DISALLOW_CONFIG_PRIVATE_DNSReady) { _DISALLOW_CONFIG_PRIVATE_DNSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CONFIG_PRIVATE_DNS"); _DISALLOW_CONFIG_PRIVATE_DNSReady = true; } return _DISALLOW_CONFIG_PRIVATE_DNSContent; } }
        private static Java.Lang.String _DISALLOW_CONFIG_PRIVATE_DNSContent = default;
        private static bool _DISALLOW_CONFIG_PRIVATE_DNSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_SCREEN_TIMEOUT"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CONFIG_SCREEN_TIMEOUT { get { if (!_DISALLOW_CONFIG_SCREEN_TIMEOUTReady) { _DISALLOW_CONFIG_SCREEN_TIMEOUTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CONFIG_SCREEN_TIMEOUT"); _DISALLOW_CONFIG_SCREEN_TIMEOUTReady = true; } return _DISALLOW_CONFIG_SCREEN_TIMEOUTContent; } }
        private static Java.Lang.String _DISALLOW_CONFIG_SCREEN_TIMEOUTContent = default;
        private static bool _DISALLOW_CONFIG_SCREEN_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_TETHERING"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CONFIG_TETHERING { get { if (!_DISALLOW_CONFIG_TETHERINGReady) { _DISALLOW_CONFIG_TETHERINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CONFIG_TETHERING"); _DISALLOW_CONFIG_TETHERINGReady = true; } return _DISALLOW_CONFIG_TETHERINGContent; } }
        private static Java.Lang.String _DISALLOW_CONFIG_TETHERINGContent = default;
        private static bool _DISALLOW_CONFIG_TETHERINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_VPN"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CONFIG_VPN { get { if (!_DISALLOW_CONFIG_VPNReady) { _DISALLOW_CONFIG_VPNContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CONFIG_VPN"); _DISALLOW_CONFIG_VPNReady = true; } return _DISALLOW_CONFIG_VPNContent; } }
        private static Java.Lang.String _DISALLOW_CONFIG_VPNContent = default;
        private static bool _DISALLOW_CONFIG_VPNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_WIFI"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CONFIG_WIFI { get { if (!_DISALLOW_CONFIG_WIFIReady) { _DISALLOW_CONFIG_WIFIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CONFIG_WIFI"); _DISALLOW_CONFIG_WIFIReady = true; } return _DISALLOW_CONFIG_WIFIContent; } }
        private static Java.Lang.String _DISALLOW_CONFIG_WIFIContent = default;
        private static bool _DISALLOW_CONFIG_WIFIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONTENT_CAPTURE"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CONTENT_CAPTURE { get { if (!_DISALLOW_CONTENT_CAPTUREReady) { _DISALLOW_CONTENT_CAPTUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CONTENT_CAPTURE"); _DISALLOW_CONTENT_CAPTUREReady = true; } return _DISALLOW_CONTENT_CAPTUREContent; } }
        private static Java.Lang.String _DISALLOW_CONTENT_CAPTUREContent = default;
        private static bool _DISALLOW_CONTENT_CAPTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONTENT_SUGGESTIONS"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CONTENT_SUGGESTIONS { get { if (!_DISALLOW_CONTENT_SUGGESTIONSReady) { _DISALLOW_CONTENT_SUGGESTIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CONTENT_SUGGESTIONS"); _DISALLOW_CONTENT_SUGGESTIONSReady = true; } return _DISALLOW_CONTENT_SUGGESTIONSContent; } }
        private static Java.Lang.String _DISALLOW_CONTENT_SUGGESTIONSContent = default;
        private static bool _DISALLOW_CONTENT_SUGGESTIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CREATE_WINDOWS"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CREATE_WINDOWS { get { if (!_DISALLOW_CREATE_WINDOWSReady) { _DISALLOW_CREATE_WINDOWSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CREATE_WINDOWS"); _DISALLOW_CREATE_WINDOWSReady = true; } return _DISALLOW_CREATE_WINDOWSContent; } }
        private static Java.Lang.String _DISALLOW_CREATE_WINDOWSContent = default;
        private static bool _DISALLOW_CREATE_WINDOWSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CROSS_PROFILE_COPY_PASTE"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_CROSS_PROFILE_COPY_PASTE { get { if (!_DISALLOW_CROSS_PROFILE_COPY_PASTEReady) { _DISALLOW_CROSS_PROFILE_COPY_PASTEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_CROSS_PROFILE_COPY_PASTE"); _DISALLOW_CROSS_PROFILE_COPY_PASTEReady = true; } return _DISALLOW_CROSS_PROFILE_COPY_PASTEContent; } }
        private static Java.Lang.String _DISALLOW_CROSS_PROFILE_COPY_PASTEContent = default;
        private static bool _DISALLOW_CROSS_PROFILE_COPY_PASTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_DATA_ROAMING"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_DATA_ROAMING { get { if (!_DISALLOW_DATA_ROAMINGReady) { _DISALLOW_DATA_ROAMINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_DATA_ROAMING"); _DISALLOW_DATA_ROAMINGReady = true; } return _DISALLOW_DATA_ROAMINGContent; } }
        private static Java.Lang.String _DISALLOW_DATA_ROAMINGContent = default;
        private static bool _DISALLOW_DATA_ROAMINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_DEBUGGING_FEATURES"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_DEBUGGING_FEATURES { get { if (!_DISALLOW_DEBUGGING_FEATURESReady) { _DISALLOW_DEBUGGING_FEATURESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_DEBUGGING_FEATURES"); _DISALLOW_DEBUGGING_FEATURESReady = true; } return _DISALLOW_DEBUGGING_FEATURESContent; } }
        private static Java.Lang.String _DISALLOW_DEBUGGING_FEATURESContent = default;
        private static bool _DISALLOW_DEBUGGING_FEATURESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_FACTORY_RESET"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_FACTORY_RESET { get { if (!_DISALLOW_FACTORY_RESETReady) { _DISALLOW_FACTORY_RESETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_FACTORY_RESET"); _DISALLOW_FACTORY_RESETReady = true; } return _DISALLOW_FACTORY_RESETContent; } }
        private static Java.Lang.String _DISALLOW_FACTORY_RESETContent = default;
        private static bool _DISALLOW_FACTORY_RESETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_FUN"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_FUN { get { if (!_DISALLOW_FUNReady) { _DISALLOW_FUNContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_FUN"); _DISALLOW_FUNReady = true; } return _DISALLOW_FUNContent; } }
        private static Java.Lang.String _DISALLOW_FUNContent = default;
        private static bool _DISALLOW_FUNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_GRANT_ADMIN"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_GRANT_ADMIN { get { if (!_DISALLOW_GRANT_ADMINReady) { _DISALLOW_GRANT_ADMINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_GRANT_ADMIN"); _DISALLOW_GRANT_ADMINReady = true; } return _DISALLOW_GRANT_ADMINContent; } }
        private static Java.Lang.String _DISALLOW_GRANT_ADMINContent = default;
        private static bool _DISALLOW_GRANT_ADMINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_INSTALL_APPS"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_INSTALL_APPS { get { if (!_DISALLOW_INSTALL_APPSReady) { _DISALLOW_INSTALL_APPSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_INSTALL_APPS"); _DISALLOW_INSTALL_APPSReady = true; } return _DISALLOW_INSTALL_APPSContent; } }
        private static Java.Lang.String _DISALLOW_INSTALL_APPSContent = default;
        private static bool _DISALLOW_INSTALL_APPSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_INSTALL_UNKNOWN_SOURCES"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_INSTALL_UNKNOWN_SOURCES { get { if (!_DISALLOW_INSTALL_UNKNOWN_SOURCESReady) { _DISALLOW_INSTALL_UNKNOWN_SOURCESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_INSTALL_UNKNOWN_SOURCES"); _DISALLOW_INSTALL_UNKNOWN_SOURCESReady = true; } return _DISALLOW_INSTALL_UNKNOWN_SOURCESContent; } }
        private static Java.Lang.String _DISALLOW_INSTALL_UNKNOWN_SOURCESContent = default;
        private static bool _DISALLOW_INSTALL_UNKNOWN_SOURCESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY { get { if (!_DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLYReady) { _DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY"); _DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLYReady = true; } return _DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLYContent; } }
        private static Java.Lang.String _DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLYContent = default;
        private static bool _DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_MICROPHONE_TOGGLE"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_MICROPHONE_TOGGLE { get { if (!_DISALLOW_MICROPHONE_TOGGLEReady) { _DISALLOW_MICROPHONE_TOGGLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_MICROPHONE_TOGGLE"); _DISALLOW_MICROPHONE_TOGGLEReady = true; } return _DISALLOW_MICROPHONE_TOGGLEContent; } }
        private static Java.Lang.String _DISALLOW_MICROPHONE_TOGGLEContent = default;
        private static bool _DISALLOW_MICROPHONE_TOGGLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_MODIFY_ACCOUNTS"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_MODIFY_ACCOUNTS { get { if (!_DISALLOW_MODIFY_ACCOUNTSReady) { _DISALLOW_MODIFY_ACCOUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_MODIFY_ACCOUNTS"); _DISALLOW_MODIFY_ACCOUNTSReady = true; } return _DISALLOW_MODIFY_ACCOUNTSContent; } }
        private static Java.Lang.String _DISALLOW_MODIFY_ACCOUNTSContent = default;
        private static bool _DISALLOW_MODIFY_ACCOUNTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_MOUNT_PHYSICAL_MEDIA"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_MOUNT_PHYSICAL_MEDIA { get { if (!_DISALLOW_MOUNT_PHYSICAL_MEDIAReady) { _DISALLOW_MOUNT_PHYSICAL_MEDIAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_MOUNT_PHYSICAL_MEDIA"); _DISALLOW_MOUNT_PHYSICAL_MEDIAReady = true; } return _DISALLOW_MOUNT_PHYSICAL_MEDIAContent; } }
        private static Java.Lang.String _DISALLOW_MOUNT_PHYSICAL_MEDIAContent = default;
        private static bool _DISALLOW_MOUNT_PHYSICAL_MEDIAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_NETWORK_RESET"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_NETWORK_RESET { get { if (!_DISALLOW_NETWORK_RESETReady) { _DISALLOW_NETWORK_RESETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_NETWORK_RESET"); _DISALLOW_NETWORK_RESETReady = true; } return _DISALLOW_NETWORK_RESETContent; } }
        private static Java.Lang.String _DISALLOW_NETWORK_RESETContent = default;
        private static bool _DISALLOW_NETWORK_RESETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_OUTGOING_BEAM"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_OUTGOING_BEAM { get { if (!_DISALLOW_OUTGOING_BEAMReady) { _DISALLOW_OUTGOING_BEAMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_OUTGOING_BEAM"); _DISALLOW_OUTGOING_BEAMReady = true; } return _DISALLOW_OUTGOING_BEAMContent; } }
        private static Java.Lang.String _DISALLOW_OUTGOING_BEAMContent = default;
        private static bool _DISALLOW_OUTGOING_BEAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_OUTGOING_CALLS"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_OUTGOING_CALLS { get { if (!_DISALLOW_OUTGOING_CALLSReady) { _DISALLOW_OUTGOING_CALLSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_OUTGOING_CALLS"); _DISALLOW_OUTGOING_CALLSReady = true; } return _DISALLOW_OUTGOING_CALLSContent; } }
        private static Java.Lang.String _DISALLOW_OUTGOING_CALLSContent = default;
        private static bool _DISALLOW_OUTGOING_CALLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_PRINTING"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_PRINTING { get { if (!_DISALLOW_PRINTINGReady) { _DISALLOW_PRINTINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_PRINTING"); _DISALLOW_PRINTINGReady = true; } return _DISALLOW_PRINTINGContent; } }
        private static Java.Lang.String _DISALLOW_PRINTINGContent = default;
        private static bool _DISALLOW_PRINTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_REMOVE_MANAGED_PROFILE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String DISALLOW_REMOVE_MANAGED_PROFILE { get { if (!_DISALLOW_REMOVE_MANAGED_PROFILEReady) { _DISALLOW_REMOVE_MANAGED_PROFILEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_REMOVE_MANAGED_PROFILE"); _DISALLOW_REMOVE_MANAGED_PROFILEReady = true; } return _DISALLOW_REMOVE_MANAGED_PROFILEContent; } }
        private static Java.Lang.String _DISALLOW_REMOVE_MANAGED_PROFILEContent = default;
        private static bool _DISALLOW_REMOVE_MANAGED_PROFILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_REMOVE_USER"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_REMOVE_USER { get { if (!_DISALLOW_REMOVE_USERReady) { _DISALLOW_REMOVE_USERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_REMOVE_USER"); _DISALLOW_REMOVE_USERReady = true; } return _DISALLOW_REMOVE_USERContent; } }
        private static Java.Lang.String _DISALLOW_REMOVE_USERContent = default;
        private static bool _DISALLOW_REMOVE_USERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_SAFE_BOOT"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_SAFE_BOOT { get { if (!_DISALLOW_SAFE_BOOTReady) { _DISALLOW_SAFE_BOOTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_SAFE_BOOT"); _DISALLOW_SAFE_BOOTReady = true; } return _DISALLOW_SAFE_BOOTContent; } }
        private static Java.Lang.String _DISALLOW_SAFE_BOOTContent = default;
        private static bool _DISALLOW_SAFE_BOOTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_SET_USER_ICON"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_SET_USER_ICON { get { if (!_DISALLOW_SET_USER_ICONReady) { _DISALLOW_SET_USER_ICONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_SET_USER_ICON"); _DISALLOW_SET_USER_ICONReady = true; } return _DISALLOW_SET_USER_ICONContent; } }
        private static Java.Lang.String _DISALLOW_SET_USER_ICONContent = default;
        private static bool _DISALLOW_SET_USER_ICONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_SET_WALLPAPER"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_SET_WALLPAPER { get { if (!_DISALLOW_SET_WALLPAPERReady) { _DISALLOW_SET_WALLPAPERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_SET_WALLPAPER"); _DISALLOW_SET_WALLPAPERReady = true; } return _DISALLOW_SET_WALLPAPERContent; } }
        private static Java.Lang.String _DISALLOW_SET_WALLPAPERContent = default;
        private static bool _DISALLOW_SET_WALLPAPERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_SHARE_INTO_MANAGED_PROFILE"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_SHARE_INTO_MANAGED_PROFILE { get { if (!_DISALLOW_SHARE_INTO_MANAGED_PROFILEReady) { _DISALLOW_SHARE_INTO_MANAGED_PROFILEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_SHARE_INTO_MANAGED_PROFILE"); _DISALLOW_SHARE_INTO_MANAGED_PROFILEReady = true; } return _DISALLOW_SHARE_INTO_MANAGED_PROFILEContent; } }
        private static Java.Lang.String _DISALLOW_SHARE_INTO_MANAGED_PROFILEContent = default;
        private static bool _DISALLOW_SHARE_INTO_MANAGED_PROFILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_SHARE_LOCATION"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_SHARE_LOCATION { get { if (!_DISALLOW_SHARE_LOCATIONReady) { _DISALLOW_SHARE_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_SHARE_LOCATION"); _DISALLOW_SHARE_LOCATIONReady = true; } return _DISALLOW_SHARE_LOCATIONContent; } }
        private static Java.Lang.String _DISALLOW_SHARE_LOCATIONContent = default;
        private static bool _DISALLOW_SHARE_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_SHARING_ADMIN_CONFIGURED_WIFI"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_SHARING_ADMIN_CONFIGURED_WIFI { get { if (!_DISALLOW_SHARING_ADMIN_CONFIGURED_WIFIReady) { _DISALLOW_SHARING_ADMIN_CONFIGURED_WIFIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_SHARING_ADMIN_CONFIGURED_WIFI"); _DISALLOW_SHARING_ADMIN_CONFIGURED_WIFIReady = true; } return _DISALLOW_SHARING_ADMIN_CONFIGURED_WIFIContent; } }
        private static Java.Lang.String _DISALLOW_SHARING_ADMIN_CONFIGURED_WIFIContent = default;
        private static bool _DISALLOW_SHARING_ADMIN_CONFIGURED_WIFIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_SMS"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_SMS { get { if (!_DISALLOW_SMSReady) { _DISALLOW_SMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_SMS"); _DISALLOW_SMSReady = true; } return _DISALLOW_SMSContent; } }
        private static Java.Lang.String _DISALLOW_SMSContent = default;
        private static bool _DISALLOW_SMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_SYSTEM_ERROR_DIALOGS"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_SYSTEM_ERROR_DIALOGS { get { if (!_DISALLOW_SYSTEM_ERROR_DIALOGSReady) { _DISALLOW_SYSTEM_ERROR_DIALOGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_SYSTEM_ERROR_DIALOGS"); _DISALLOW_SYSTEM_ERROR_DIALOGSReady = true; } return _DISALLOW_SYSTEM_ERROR_DIALOGSContent; } }
        private static Java.Lang.String _DISALLOW_SYSTEM_ERROR_DIALOGSContent = default;
        private static bool _DISALLOW_SYSTEM_ERROR_DIALOGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_ULTRA_WIDEBAND_RADIO"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_ULTRA_WIDEBAND_RADIO { get { if (!_DISALLOW_ULTRA_WIDEBAND_RADIOReady) { _DISALLOW_ULTRA_WIDEBAND_RADIOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_ULTRA_WIDEBAND_RADIO"); _DISALLOW_ULTRA_WIDEBAND_RADIOReady = true; } return _DISALLOW_ULTRA_WIDEBAND_RADIOContent; } }
        private static Java.Lang.String _DISALLOW_ULTRA_WIDEBAND_RADIOContent = default;
        private static bool _DISALLOW_ULTRA_WIDEBAND_RADIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_UNIFIED_PASSWORD"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_UNIFIED_PASSWORD { get { if (!_DISALLOW_UNIFIED_PASSWORDReady) { _DISALLOW_UNIFIED_PASSWORDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_UNIFIED_PASSWORD"); _DISALLOW_UNIFIED_PASSWORDReady = true; } return _DISALLOW_UNIFIED_PASSWORDContent; } }
        private static Java.Lang.String _DISALLOW_UNIFIED_PASSWORDContent = default;
        private static bool _DISALLOW_UNIFIED_PASSWORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_UNINSTALL_APPS"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_UNINSTALL_APPS { get { if (!_DISALLOW_UNINSTALL_APPSReady) { _DISALLOW_UNINSTALL_APPSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_UNINSTALL_APPS"); _DISALLOW_UNINSTALL_APPSReady = true; } return _DISALLOW_UNINSTALL_APPSContent; } }
        private static Java.Lang.String _DISALLOW_UNINSTALL_APPSContent = default;
        private static bool _DISALLOW_UNINSTALL_APPSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_UNMUTE_MICROPHONE"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_UNMUTE_MICROPHONE { get { if (!_DISALLOW_UNMUTE_MICROPHONEReady) { _DISALLOW_UNMUTE_MICROPHONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_UNMUTE_MICROPHONE"); _DISALLOW_UNMUTE_MICROPHONEReady = true; } return _DISALLOW_UNMUTE_MICROPHONEContent; } }
        private static Java.Lang.String _DISALLOW_UNMUTE_MICROPHONEContent = default;
        private static bool _DISALLOW_UNMUTE_MICROPHONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_USB_FILE_TRANSFER"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_USB_FILE_TRANSFER { get { if (!_DISALLOW_USB_FILE_TRANSFERReady) { _DISALLOW_USB_FILE_TRANSFERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_USB_FILE_TRANSFER"); _DISALLOW_USB_FILE_TRANSFERReady = true; } return _DISALLOW_USB_FILE_TRANSFERContent; } }
        private static Java.Lang.String _DISALLOW_USB_FILE_TRANSFERContent = default;
        private static bool _DISALLOW_USB_FILE_TRANSFERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_USER_SWITCH"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_USER_SWITCH { get { if (!_DISALLOW_USER_SWITCHReady) { _DISALLOW_USER_SWITCHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_USER_SWITCH"); _DISALLOW_USER_SWITCHReady = true; } return _DISALLOW_USER_SWITCHContent; } }
        private static Java.Lang.String _DISALLOW_USER_SWITCHContent = default;
        private static bool _DISALLOW_USER_SWITCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_WIFI_DIRECT"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_WIFI_DIRECT { get { if (!_DISALLOW_WIFI_DIRECTReady) { _DISALLOW_WIFI_DIRECTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_WIFI_DIRECT"); _DISALLOW_WIFI_DIRECTReady = true; } return _DISALLOW_WIFI_DIRECTContent; } }
        private static Java.Lang.String _DISALLOW_WIFI_DIRECTContent = default;
        private static bool _DISALLOW_WIFI_DIRECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_WIFI_TETHERING"/>
        /// </summary>
        public static Java.Lang.String DISALLOW_WIFI_TETHERING { get { if (!_DISALLOW_WIFI_TETHERINGReady) { _DISALLOW_WIFI_TETHERINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISALLOW_WIFI_TETHERING"); _DISALLOW_WIFI_TETHERINGReady = true; } return _DISALLOW_WIFI_TETHERINGContent; } }
        private static Java.Lang.String _DISALLOW_WIFI_TETHERINGContent = default;
        private static bool _DISALLOW_WIFI_TETHERINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#ENSURE_VERIFY_APPS"/>
        /// </summary>
        public static Java.Lang.String ENSURE_VERIFY_APPS { get { if (!_ENSURE_VERIFY_APPSReady) { _ENSURE_VERIFY_APPSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENSURE_VERIFY_APPS"); _ENSURE_VERIFY_APPSReady = true; } return _ENSURE_VERIFY_APPSContent; } }
        private static Java.Lang.String _ENSURE_VERIFY_APPSContent = default;
        private static bool _ENSURE_VERIFY_APPSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#KEY_RESTRICTIONS_PENDING"/>
        /// </summary>
        public static Java.Lang.String KEY_RESTRICTIONS_PENDING { get { if (!_KEY_RESTRICTIONS_PENDINGReady) { _KEY_RESTRICTIONS_PENDINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_RESTRICTIONS_PENDING"); _KEY_RESTRICTIONS_PENDINGReady = true; } return _KEY_RESTRICTIONS_PENDINGContent; } }
        private static Java.Lang.String _KEY_RESTRICTIONS_PENDINGContent = default;
        private static bool _KEY_RESTRICTIONS_PENDINGReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#createUserCreationIntent(java.lang.String,java.lang.String,java.lang.String,android.os.PersistableBundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Android.Os.PersistableBundle"/></param>
        /// <returns><see cref="Android.Content.Intent"/></returns>
        public static Android.Content.Intent CreateUserCreationIntent(Java.Lang.String arg0, Java.Lang.String arg1, Java.Lang.String arg2, Android.Os.PersistableBundle arg3)
        {
            return SExecute<Android.Content.Intent>(LocalBridgeClazz, "createUserCreationIntent", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#isHeadlessSystemUserMode()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public static bool IsHeadlessSystemUserMode()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isHeadlessSystemUserMode", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#supportsMultipleUsers()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public static bool SupportsMultipleUsers()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "supportsMultipleUsers", "()Z");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#getApplicationRestrictions(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetApplicationRestrictions(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getApplicationRestrictions", "(Ljava/lang/String;)Landroid/os/Bundle;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#getUserRestrictions()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetUserRestrictions()
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getUserRestrictions", "()Landroid/os/Bundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#getUserRestrictions(android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetUserRestrictions(Android.Os.UserHandle arg0)
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getUserRestrictions", "(Landroid/os/UserHandle;)Landroid/os/Bundle;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#getUserForSerialNumber(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Android.Os.UserHandle"/></returns>
        public Android.Os.UserHandle GetUserForSerialNumber(long arg0)
        {
            return IExecuteWithSignature<Android.Os.UserHandle>("getUserForSerialNumber", "(J)Landroid/os/UserHandle;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#hasUserRestriction(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasUserRestriction(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("hasUserRestriction", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#isAdminUser()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAdminUser()
        {
            return IExecuteWithSignature<bool>("isAdminUser", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#isDemoUser()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDemoUser()
        {
            return IExecuteWithSignature<bool>("isDemoUser", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#isManagedProfile()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsManagedProfile()
        {
            return IExecuteWithSignature<bool>("isManagedProfile", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#isProfile()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsProfile()
        {
            return IExecuteWithSignature<bool>("isProfile", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#isQuietModeEnabled(android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsQuietModeEnabled(Android.Os.UserHandle arg0)
        {
            return IExecuteWithSignature<bool>("isQuietModeEnabled", "(Landroid/os/UserHandle;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#isSystemUser()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSystemUser()
        {
            return IExecuteWithSignature<bool>("isSystemUser", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#isUserAGoat()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsUserAGoat()
        {
            return IExecuteWithSignature<bool>("isUserAGoat", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#isUserForeground()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsUserForeground()
        {
            return IExecuteWithSignature<bool>("isUserForeground", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#isUserRunning(android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsUserRunning(Android.Os.UserHandle arg0)
        {
            return IExecuteWithSignature<bool>("isUserRunning", "(Landroid/os/UserHandle;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#isUserRunningOrStopping(android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsUserRunningOrStopping(Android.Os.UserHandle arg0)
        {
            return IExecuteWithSignature<bool>("isUserRunningOrStopping", "(Landroid/os/UserHandle;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#isUserUnlocked()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsUserUnlocked()
        {
            return IExecuteWithSignature<bool>("isUserUnlocked", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#isUserUnlocked(android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsUserUnlocked(Android.Os.UserHandle arg0)
        {
            return IExecuteWithSignature<bool>("isUserUnlocked", "(Landroid/os/UserHandle;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#requestQuietModeEnabled(boolean,android.os.UserHandle,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <param name="arg1"><see cref="Android.Os.UserHandle"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestQuietModeEnabled(bool arg0, Android.Os.UserHandle arg1, int arg2)
        {
            return IExecute<bool>("requestQuietModeEnabled", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#requestQuietModeEnabled(boolean,android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <param name="arg1"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestQuietModeEnabled(bool arg0, Android.Os.UserHandle arg1)
        {
            return IExecute<bool>("requestQuietModeEnabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#setRestrictionsChallenge(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool SetRestrictionsChallenge(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("setRestrictionsChallenge", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#getUserCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetUserCount()
        {
            return IExecuteWithSignature<int>("getUserCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#getUserName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetUserName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getUserName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#getUserProfiles()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Os.UserHandle> GetUserProfiles()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Os.UserHandle>>("getUserProfiles", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#getSerialNumberForUser(android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetSerialNumberForUser(Android.Os.UserHandle arg0)
        {
            return IExecuteWithSignature<long>("getSerialNumberForUser", "(Landroid/os/UserHandle;)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#getUserCreationTime(android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.UserHandle"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetUserCreationTime(Android.Os.UserHandle arg0)
        {
            return IExecuteWithSignature<long>("getUserCreationTime", "(Landroid/os/UserHandle;)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#setUserRestriction(java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetUserRestriction(Java.Lang.String arg0, bool arg1)
        {
            IExecute("setUserRestriction", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#setUserRestrictions(android.os.Bundle,android.os.UserHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg1"><see cref="Android.Os.UserHandle"/></param>
        [global::System.Obsolete()]
        public void SetUserRestrictions(Android.Os.Bundle arg0, Android.Os.UserHandle arg1)
        {
            IExecute("setUserRestrictions", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/UserManager.html#setUserRestrictions(android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
        [global::System.Obsolete()]
        public void SetUserRestrictions(Android.Os.Bundle arg0)
        {
            IExecuteWithSignature("setUserRestrictions", "(Landroid/os/Bundle;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region UserOperationException
        public partial class UserOperationException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
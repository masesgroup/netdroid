/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Os
{
    #region Build
    public partial class Build
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#BOARD"/>
        /// </summary>
        public static Java.Lang.String BOARD { get { if (!_BOARDReady) { _BOARDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BOARD"); _BOARDReady = true; } return _BOARDContent; } }
        private static Java.Lang.String _BOARDContent = default;
        private static bool _BOARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#BOOTLOADER"/>
        /// </summary>
        public static Java.Lang.String BOOTLOADER { get { if (!_BOOTLOADERReady) { _BOOTLOADERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BOOTLOADER"); _BOOTLOADERReady = true; } return _BOOTLOADERContent; } }
        private static Java.Lang.String _BOOTLOADERContent = default;
        private static bool _BOOTLOADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#BRAND"/>
        /// </summary>
        public static Java.Lang.String BRAND { get { if (!_BRANDReady) { _BRANDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BRAND"); _BRANDReady = true; } return _BRANDContent; } }
        private static Java.Lang.String _BRANDContent = default;
        private static bool _BRANDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#CPU_ABI"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String CPU_ABI { get { if (!_CPU_ABIReady) { _CPU_ABIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CPU_ABI"); _CPU_ABIReady = true; } return _CPU_ABIContent; } }
        private static Java.Lang.String _CPU_ABIContent = default;
        private static bool _CPU_ABIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#CPU_ABI2"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String CPU_ABI2 { get { if (!_CPU_ABI2Ready) { _CPU_ABI2Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "CPU_ABI2"); _CPU_ABI2Ready = true; } return _CPU_ABI2Content; } }
        private static Java.Lang.String _CPU_ABI2Content = default;
        private static bool _CPU_ABI2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#DEVICE"/>
        /// </summary>
        public static Java.Lang.String DEVICE { get { if (!_DEVICEReady) { _DEVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEVICE"); _DEVICEReady = true; } return _DEVICEContent; } }
        private static Java.Lang.String _DEVICEContent = default;
        private static bool _DEVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#DISPLAY"/>
        /// </summary>
        public static Java.Lang.String DISPLAY { get { if (!_DISPLAYReady) { _DISPLAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISPLAY"); _DISPLAYReady = true; } return _DISPLAYContent; } }
        private static Java.Lang.String _DISPLAYContent = default;
        private static bool _DISPLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#FINGERPRINT"/>
        /// </summary>
        public static Java.Lang.String FINGERPRINT { get { if (!_FINGERPRINTReady) { _FINGERPRINTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FINGERPRINT"); _FINGERPRINTReady = true; } return _FINGERPRINTContent; } }
        private static Java.Lang.String _FINGERPRINTContent = default;
        private static bool _FINGERPRINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#HARDWARE"/>
        /// </summary>
        public static Java.Lang.String HARDWARE { get { if (!_HARDWAREReady) { _HARDWAREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HARDWARE"); _HARDWAREReady = true; } return _HARDWAREContent; } }
        private static Java.Lang.String _HARDWAREContent = default;
        private static bool _HARDWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#HOST"/>
        /// </summary>
        public static Java.Lang.String HOST { get { if (!_HOSTReady) { _HOSTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HOST"); _HOSTReady = true; } return _HOSTContent; } }
        private static Java.Lang.String _HOSTContent = default;
        private static bool _HOSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#ID"/>
        /// </summary>
        public static Java.Lang.String ID { get { if (!_IDReady) { _IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ID"); _IDReady = true; } return _IDContent; } }
        private static Java.Lang.String _IDContent = default;
        private static bool _IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#MANUFACTURER"/>
        /// </summary>
        public static Java.Lang.String MANUFACTURER { get { if (!_MANUFACTURERReady) { _MANUFACTURERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MANUFACTURER"); _MANUFACTURERReady = true; } return _MANUFACTURERContent; } }
        private static Java.Lang.String _MANUFACTURERContent = default;
        private static bool _MANUFACTURERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#MODEL"/>
        /// </summary>
        public static Java.Lang.String MODEL { get { if (!_MODELReady) { _MODELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MODEL"); _MODELReady = true; } return _MODELContent; } }
        private static Java.Lang.String _MODELContent = default;
        private static bool _MODELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#ODM_SKU"/>
        /// </summary>
        public static Java.Lang.String ODM_SKU { get { if (!_ODM_SKUReady) { _ODM_SKUContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ODM_SKU"); _ODM_SKUReady = true; } return _ODM_SKUContent; } }
        private static Java.Lang.String _ODM_SKUContent = default;
        private static bool _ODM_SKUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#PRODUCT"/>
        /// </summary>
        public static Java.Lang.String PRODUCT { get { if (!_PRODUCTReady) { _PRODUCTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PRODUCT"); _PRODUCTReady = true; } return _PRODUCTContent; } }
        private static Java.Lang.String _PRODUCTContent = default;
        private static bool _PRODUCTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#RADIO"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String RADIO { get { if (!_RADIOReady) { _RADIOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RADIO"); _RADIOReady = true; } return _RADIOContent; } }
        private static Java.Lang.String _RADIOContent = default;
        private static bool _RADIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#SERIAL"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String SERIAL { get { if (!_SERIALReady) { _SERIALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SERIAL"); _SERIALReady = true; } return _SERIALContent; } }
        private static Java.Lang.String _SERIALContent = default;
        private static bool _SERIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#SKU"/>
        /// </summary>
        public static Java.Lang.String SKU { get { if (!_SKUReady) { _SKUContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SKU"); _SKUReady = true; } return _SKUContent; } }
        private static Java.Lang.String _SKUContent = default;
        private static bool _SKUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#SOC_MANUFACTURER"/>
        /// </summary>
        public static Java.Lang.String SOC_MANUFACTURER { get { if (!_SOC_MANUFACTURERReady) { _SOC_MANUFACTURERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SOC_MANUFACTURER"); _SOC_MANUFACTURERReady = true; } return _SOC_MANUFACTURERContent; } }
        private static Java.Lang.String _SOC_MANUFACTURERContent = default;
        private static bool _SOC_MANUFACTURERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#SOC_MODEL"/>
        /// </summary>
        public static Java.Lang.String SOC_MODEL { get { if (!_SOC_MODELReady) { _SOC_MODELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SOC_MODEL"); _SOC_MODELReady = true; } return _SOC_MODELContent; } }
        private static Java.Lang.String _SOC_MODELContent = default;
        private static bool _SOC_MODELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#TAGS"/>
        /// </summary>
        public static Java.Lang.String TAGS { get { if (!_TAGSReady) { _TAGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TAGS"); _TAGSReady = true; } return _TAGSContent; } }
        private static Java.Lang.String _TAGSContent = default;
        private static bool _TAGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#TYPE"/>
        /// </summary>
        public static Java.Lang.String TYPE { get { if (!_TYPEReady) { _TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE"); _TYPEReady = true; } return _TYPEContent; } }
        private static Java.Lang.String _TYPEContent = default;
        private static bool _TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#UNKNOWN"/>
        /// </summary>
        public static Java.Lang.String UNKNOWN { get { if (!_UNKNOWNReady) { _UNKNOWNContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "UNKNOWN"); _UNKNOWNReady = true; } return _UNKNOWNContent; } }
        private static Java.Lang.String _UNKNOWNContent = default;
        private static bool _UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#USER"/>
        /// </summary>
        public static Java.Lang.String USER { get { if (!_USERReady) { _USERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USER"); _USERReady = true; } return _USERContent; } }
        private static Java.Lang.String _USERContent = default;
        private static bool _USERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#SUPPORTED_32_BIT_ABIS"/>
        /// </summary>
        public static Java.Lang.String[] SUPPORTED_32_BIT_ABIS { get { if (!_SUPPORTED_32_BIT_ABISReady) { _SUPPORTED_32_BIT_ABISContent = SGetFieldArray<Java.Lang.String>(LocalBridgeClazz, "SUPPORTED_32_BIT_ABIS"); _SUPPORTED_32_BIT_ABISReady = true; } return _SUPPORTED_32_BIT_ABISContent; } }
        private static Java.Lang.String[] _SUPPORTED_32_BIT_ABISContent = default;
        private static bool _SUPPORTED_32_BIT_ABISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#SUPPORTED_64_BIT_ABIS"/>
        /// </summary>
        public static Java.Lang.String[] SUPPORTED_64_BIT_ABIS { get { if (!_SUPPORTED_64_BIT_ABISReady) { _SUPPORTED_64_BIT_ABISContent = SGetFieldArray<Java.Lang.String>(LocalBridgeClazz, "SUPPORTED_64_BIT_ABIS"); _SUPPORTED_64_BIT_ABISReady = true; } return _SUPPORTED_64_BIT_ABISContent; } }
        private static Java.Lang.String[] _SUPPORTED_64_BIT_ABISContent = default;
        private static bool _SUPPORTED_64_BIT_ABISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#SUPPORTED_ABIS"/>
        /// </summary>
        public static Java.Lang.String[] SUPPORTED_ABIS { get { if (!_SUPPORTED_ABISReady) { _SUPPORTED_ABISContent = SGetFieldArray<Java.Lang.String>(LocalBridgeClazz, "SUPPORTED_ABIS"); _SUPPORTED_ABISReady = true; } return _SUPPORTED_ABISContent; } }
        private static Java.Lang.String[] _SUPPORTED_ABISContent = default;
        private static bool _SUPPORTED_ABISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#TIME"/>
        /// </summary>
        public static long TIME { get { if (!_TIMEReady) { _TIMEContent = SGetField<long>(LocalBridgeClazz, "TIME"); _TIMEReady = true; } return _TIMEContent; } }
        private static long _TIMEContent = default;
        private static bool _TIMEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#getRadioVersion()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GetRadioVersion()
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "getRadioVersion", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#getSerial()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GetSerial()
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "getSerial", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/Build.html#getFingerprintedPartitions()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public static Java.Util.List<Android.Os.Build.Partition> GetFingerprintedPartitions()
        {
            return SExecuteWithSignature<Java.Util.List<Android.Os.Build.Partition>>(LocalBridgeClazz, "getFingerprintedPartitions", "()Ljava/util/List;");
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region Partition
        public partial class Partition
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.Partition.html#PARTITION_NAME_SYSTEM"/>
            /// </summary>
            public static Java.Lang.String PARTITION_NAME_SYSTEM { get { if (!_PARTITION_NAME_SYSTEMReady) { _PARTITION_NAME_SYSTEMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARTITION_NAME_SYSTEM"); _PARTITION_NAME_SYSTEMReady = true; } return _PARTITION_NAME_SYSTEMContent; } }
            private static Java.Lang.String _PARTITION_NAME_SYSTEMContent = default;
            private static bool _PARTITION_NAME_SYSTEMReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.Partition.html#getFingerprint()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetFingerprint()
            {
                return IExecuteWithSignature<Java.Lang.String>("getFingerprint", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.Partition.html#getName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.Partition.html#getBuildTimeMillis()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetBuildTimeMillis()
            {
                return IExecuteWithSignature<long>("getBuildTimeMillis", "()J");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region VERSION
        public partial class VERSION
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION.html#MEDIA_PERFORMANCE_CLASS"/>
            /// </summary>
            public static int MEDIA_PERFORMANCE_CLASS { get { if (!_MEDIA_PERFORMANCE_CLASSReady) { _MEDIA_PERFORMANCE_CLASSContent = SGetField<int>(LocalBridgeClazz, "MEDIA_PERFORMANCE_CLASS"); _MEDIA_PERFORMANCE_CLASSReady = true; } return _MEDIA_PERFORMANCE_CLASSContent; } }
            private static int _MEDIA_PERFORMANCE_CLASSContent = default;
            private static bool _MEDIA_PERFORMANCE_CLASSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION.html#PREVIEW_SDK_INT"/>
            /// </summary>
            public static int PREVIEW_SDK_INT { get { if (!_PREVIEW_SDK_INTReady) { _PREVIEW_SDK_INTContent = SGetField<int>(LocalBridgeClazz, "PREVIEW_SDK_INT"); _PREVIEW_SDK_INTReady = true; } return _PREVIEW_SDK_INTContent; } }
            private static int _PREVIEW_SDK_INTContent = default;
            private static bool _PREVIEW_SDK_INTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION.html#SDK_INT"/>
            /// </summary>
            public static int SDK_INT { get { if (!_SDK_INTReady) { _SDK_INTContent = SGetField<int>(LocalBridgeClazz, "SDK_INT"); _SDK_INTReady = true; } return _SDK_INTContent; } }
            private static int _SDK_INTContent = default;
            private static bool _SDK_INTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION.html#BASE_OS"/>
            /// </summary>
            public static Java.Lang.String BASE_OS { get { if (!_BASE_OSReady) { _BASE_OSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BASE_OS"); _BASE_OSReady = true; } return _BASE_OSContent; } }
            private static Java.Lang.String _BASE_OSContent = default;
            private static bool _BASE_OSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION.html#CODENAME"/>
            /// </summary>
            public static Java.Lang.String CODENAME { get { if (!_CODENAMEReady) { _CODENAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CODENAME"); _CODENAMEReady = true; } return _CODENAMEContent; } }
            private static Java.Lang.String _CODENAMEContent = default;
            private static bool _CODENAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION.html#INCREMENTAL"/>
            /// </summary>
            public static Java.Lang.String INCREMENTAL { get { if (!_INCREMENTALReady) { _INCREMENTALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INCREMENTAL"); _INCREMENTALReady = true; } return _INCREMENTALContent; } }
            private static Java.Lang.String _INCREMENTALContent = default;
            private static bool _INCREMENTALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION.html#RELEASE"/>
            /// </summary>
            public static Java.Lang.String RELEASE { get { if (!_RELEASEReady) { _RELEASEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RELEASE"); _RELEASEReady = true; } return _RELEASEContent; } }
            private static Java.Lang.String _RELEASEContent = default;
            private static bool _RELEASEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION.html#RELEASE_OR_CODENAME"/>
            /// </summary>
            public static Java.Lang.String RELEASE_OR_CODENAME { get { if (!_RELEASE_OR_CODENAMEReady) { _RELEASE_OR_CODENAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RELEASE_OR_CODENAME"); _RELEASE_OR_CODENAMEReady = true; } return _RELEASE_OR_CODENAMEContent; } }
            private static Java.Lang.String _RELEASE_OR_CODENAMEContent = default;
            private static bool _RELEASE_OR_CODENAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION.html#RELEASE_OR_PREVIEW_DISPLAY"/>
            /// </summary>
            public static Java.Lang.String RELEASE_OR_PREVIEW_DISPLAY { get { if (!_RELEASE_OR_PREVIEW_DISPLAYReady) { _RELEASE_OR_PREVIEW_DISPLAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RELEASE_OR_PREVIEW_DISPLAY"); _RELEASE_OR_PREVIEW_DISPLAYReady = true; } return _RELEASE_OR_PREVIEW_DISPLAYContent; } }
            private static Java.Lang.String _RELEASE_OR_PREVIEW_DISPLAYContent = default;
            private static bool _RELEASE_OR_PREVIEW_DISPLAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION.html#SDK"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String SDK { get { if (!_SDKReady) { _SDKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SDK"); _SDKReady = true; } return _SDKContent; } }
            private static Java.Lang.String _SDKContent = default;
            private static bool _SDKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION.html#SECURITY_PATCH"/>
            /// </summary>
            public static Java.Lang.String SECURITY_PATCH { get { if (!_SECURITY_PATCHReady) { _SECURITY_PATCHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SECURITY_PATCH"); _SECURITY_PATCHReady = true; } return _SECURITY_PATCHContent; } }
            private static Java.Lang.String _SECURITY_PATCHContent = default;
            private static bool _SECURITY_PATCHReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region VERSION_CODES
        public partial class VERSION_CODES
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#BASE"/>
            /// </summary>
            public static int BASE { get { if (!_BASEReady) { _BASEContent = SGetField<int>(LocalBridgeClazz, "BASE"); _BASEReady = true; } return _BASEContent; } }
            private static int _BASEContent = default;
            private static bool _BASEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#BASE_1_1"/>
            /// </summary>
            public static int BASE_1_1 { get { if (!_BASE_1_1Ready) { _BASE_1_1Content = SGetField<int>(LocalBridgeClazz, "BASE_1_1"); _BASE_1_1Ready = true; } return _BASE_1_1Content; } }
            private static int _BASE_1_1Content = default;
            private static bool _BASE_1_1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#CUPCAKE"/>
            /// </summary>
            public static int CUPCAKE { get { if (!_CUPCAKEReady) { _CUPCAKEContent = SGetField<int>(LocalBridgeClazz, "CUPCAKE"); _CUPCAKEReady = true; } return _CUPCAKEContent; } }
            private static int _CUPCAKEContent = default;
            private static bool _CUPCAKEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#CUR_DEVELOPMENT"/>
            /// </summary>
            public static int CUR_DEVELOPMENT { get { if (!_CUR_DEVELOPMENTReady) { _CUR_DEVELOPMENTContent = SGetField<int>(LocalBridgeClazz, "CUR_DEVELOPMENT"); _CUR_DEVELOPMENTReady = true; } return _CUR_DEVELOPMENTContent; } }
            private static int _CUR_DEVELOPMENTContent = default;
            private static bool _CUR_DEVELOPMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#DONUT"/>
            /// </summary>
            public static int DONUT { get { if (!_DONUTReady) { _DONUTContent = SGetField<int>(LocalBridgeClazz, "DONUT"); _DONUTReady = true; } return _DONUTContent; } }
            private static int _DONUTContent = default;
            private static bool _DONUTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#ECLAIR"/>
            /// </summary>
            public static int ECLAIR { get { if (!_ECLAIRReady) { _ECLAIRContent = SGetField<int>(LocalBridgeClazz, "ECLAIR"); _ECLAIRReady = true; } return _ECLAIRContent; } }
            private static int _ECLAIRContent = default;
            private static bool _ECLAIRReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#ECLAIR_0_1"/>
            /// </summary>
            public static int ECLAIR_0_1 { get { if (!_ECLAIR_0_1Ready) { _ECLAIR_0_1Content = SGetField<int>(LocalBridgeClazz, "ECLAIR_0_1"); _ECLAIR_0_1Ready = true; } return _ECLAIR_0_1Content; } }
            private static int _ECLAIR_0_1Content = default;
            private static bool _ECLAIR_0_1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#ECLAIR_MR1"/>
            /// </summary>
            public static int ECLAIR_MR1 { get { if (!_ECLAIR_MR1Ready) { _ECLAIR_MR1Content = SGetField<int>(LocalBridgeClazz, "ECLAIR_MR1"); _ECLAIR_MR1Ready = true; } return _ECLAIR_MR1Content; } }
            private static int _ECLAIR_MR1Content = default;
            private static bool _ECLAIR_MR1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#FROYO"/>
            /// </summary>
            public static int FROYO { get { if (!_FROYOReady) { _FROYOContent = SGetField<int>(LocalBridgeClazz, "FROYO"); _FROYOReady = true; } return _FROYOContent; } }
            private static int _FROYOContent = default;
            private static bool _FROYOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#GINGERBREAD"/>
            /// </summary>
            public static int GINGERBREAD { get { if (!_GINGERBREADReady) { _GINGERBREADContent = SGetField<int>(LocalBridgeClazz, "GINGERBREAD"); _GINGERBREADReady = true; } return _GINGERBREADContent; } }
            private static int _GINGERBREADContent = default;
            private static bool _GINGERBREADReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#GINGERBREAD_MR1"/>
            /// </summary>
            public static int GINGERBREAD_MR1 { get { if (!_GINGERBREAD_MR1Ready) { _GINGERBREAD_MR1Content = SGetField<int>(LocalBridgeClazz, "GINGERBREAD_MR1"); _GINGERBREAD_MR1Ready = true; } return _GINGERBREAD_MR1Content; } }
            private static int _GINGERBREAD_MR1Content = default;
            private static bool _GINGERBREAD_MR1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#HONEYCOMB"/>
            /// </summary>
            public static int HONEYCOMB { get { if (!_HONEYCOMBReady) { _HONEYCOMBContent = SGetField<int>(LocalBridgeClazz, "HONEYCOMB"); _HONEYCOMBReady = true; } return _HONEYCOMBContent; } }
            private static int _HONEYCOMBContent = default;
            private static bool _HONEYCOMBReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#HONEYCOMB_MR1"/>
            /// </summary>
            public static int HONEYCOMB_MR1 { get { if (!_HONEYCOMB_MR1Ready) { _HONEYCOMB_MR1Content = SGetField<int>(LocalBridgeClazz, "HONEYCOMB_MR1"); _HONEYCOMB_MR1Ready = true; } return _HONEYCOMB_MR1Content; } }
            private static int _HONEYCOMB_MR1Content = default;
            private static bool _HONEYCOMB_MR1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#HONEYCOMB_MR2"/>
            /// </summary>
            public static int HONEYCOMB_MR2 { get { if (!_HONEYCOMB_MR2Ready) { _HONEYCOMB_MR2Content = SGetField<int>(LocalBridgeClazz, "HONEYCOMB_MR2"); _HONEYCOMB_MR2Ready = true; } return _HONEYCOMB_MR2Content; } }
            private static int _HONEYCOMB_MR2Content = default;
            private static bool _HONEYCOMB_MR2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#ICE_CREAM_SANDWICH"/>
            /// </summary>
            public static int ICE_CREAM_SANDWICH { get { if (!_ICE_CREAM_SANDWICHReady) { _ICE_CREAM_SANDWICHContent = SGetField<int>(LocalBridgeClazz, "ICE_CREAM_SANDWICH"); _ICE_CREAM_SANDWICHReady = true; } return _ICE_CREAM_SANDWICHContent; } }
            private static int _ICE_CREAM_SANDWICHContent = default;
            private static bool _ICE_CREAM_SANDWICHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#ICE_CREAM_SANDWICH_MR1"/>
            /// </summary>
            public static int ICE_CREAM_SANDWICH_MR1 { get { if (!_ICE_CREAM_SANDWICH_MR1Ready) { _ICE_CREAM_SANDWICH_MR1Content = SGetField<int>(LocalBridgeClazz, "ICE_CREAM_SANDWICH_MR1"); _ICE_CREAM_SANDWICH_MR1Ready = true; } return _ICE_CREAM_SANDWICH_MR1Content; } }
            private static int _ICE_CREAM_SANDWICH_MR1Content = default;
            private static bool _ICE_CREAM_SANDWICH_MR1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#JELLY_BEAN"/>
            /// </summary>
            public static int JELLY_BEAN { get { if (!_JELLY_BEANReady) { _JELLY_BEANContent = SGetField<int>(LocalBridgeClazz, "JELLY_BEAN"); _JELLY_BEANReady = true; } return _JELLY_BEANContent; } }
            private static int _JELLY_BEANContent = default;
            private static bool _JELLY_BEANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#JELLY_BEAN_MR1"/>
            /// </summary>
            public static int JELLY_BEAN_MR1 { get { if (!_JELLY_BEAN_MR1Ready) { _JELLY_BEAN_MR1Content = SGetField<int>(LocalBridgeClazz, "JELLY_BEAN_MR1"); _JELLY_BEAN_MR1Ready = true; } return _JELLY_BEAN_MR1Content; } }
            private static int _JELLY_BEAN_MR1Content = default;
            private static bool _JELLY_BEAN_MR1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#JELLY_BEAN_MR2"/>
            /// </summary>
            public static int JELLY_BEAN_MR2 { get { if (!_JELLY_BEAN_MR2Ready) { _JELLY_BEAN_MR2Content = SGetField<int>(LocalBridgeClazz, "JELLY_BEAN_MR2"); _JELLY_BEAN_MR2Ready = true; } return _JELLY_BEAN_MR2Content; } }
            private static int _JELLY_BEAN_MR2Content = default;
            private static bool _JELLY_BEAN_MR2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#KITKAT"/>
            /// </summary>
            public static int KITKAT { get { if (!_KITKATReady) { _KITKATContent = SGetField<int>(LocalBridgeClazz, "KITKAT"); _KITKATReady = true; } return _KITKATContent; } }
            private static int _KITKATContent = default;
            private static bool _KITKATReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#KITKAT_WATCH"/>
            /// </summary>
            public static int KITKAT_WATCH { get { if (!_KITKAT_WATCHReady) { _KITKAT_WATCHContent = SGetField<int>(LocalBridgeClazz, "KITKAT_WATCH"); _KITKAT_WATCHReady = true; } return _KITKAT_WATCHContent; } }
            private static int _KITKAT_WATCHContent = default;
            private static bool _KITKAT_WATCHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#LOLLIPOP"/>
            /// </summary>
            public static int LOLLIPOP { get { if (!_LOLLIPOPReady) { _LOLLIPOPContent = SGetField<int>(LocalBridgeClazz, "LOLLIPOP"); _LOLLIPOPReady = true; } return _LOLLIPOPContent; } }
            private static int _LOLLIPOPContent = default;
            private static bool _LOLLIPOPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#LOLLIPOP_MR1"/>
            /// </summary>
            public static int LOLLIPOP_MR1 { get { if (!_LOLLIPOP_MR1Ready) { _LOLLIPOP_MR1Content = SGetField<int>(LocalBridgeClazz, "LOLLIPOP_MR1"); _LOLLIPOP_MR1Ready = true; } return _LOLLIPOP_MR1Content; } }
            private static int _LOLLIPOP_MR1Content = default;
            private static bool _LOLLIPOP_MR1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#M"/>
            /// </summary>
            public static int M { get { if (!_MReady) { _MContent = SGetField<int>(LocalBridgeClazz, "M"); _MReady = true; } return _MContent; } }
            private static int _MContent = default;
            private static bool _MReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#N"/>
            /// </summary>
            public static int N { get { if (!_NReady) { _NContent = SGetField<int>(LocalBridgeClazz, "N"); _NReady = true; } return _NContent; } }
            private static int _NContent = default;
            private static bool _NReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#N_MR1"/>
            /// </summary>
            public static int N_MR1 { get { if (!_N_MR1Ready) { _N_MR1Content = SGetField<int>(LocalBridgeClazz, "N_MR1"); _N_MR1Ready = true; } return _N_MR1Content; } }
            private static int _N_MR1Content = default;
            private static bool _N_MR1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#O"/>
            /// </summary>
            public static int O { get { if (!_OReady) { _OContent = SGetField<int>(LocalBridgeClazz, "O"); _OReady = true; } return _OContent; } }
            private static int _OContent = default;
            private static bool _OReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#O_MR1"/>
            /// </summary>
            public static int O_MR1 { get { if (!_O_MR1Ready) { _O_MR1Content = SGetField<int>(LocalBridgeClazz, "O_MR1"); _O_MR1Ready = true; } return _O_MR1Content; } }
            private static int _O_MR1Content = default;
            private static bool _O_MR1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#P"/>
            /// </summary>
            public static int P { get { if (!_PReady) { _PContent = SGetField<int>(LocalBridgeClazz, "P"); _PReady = true; } return _PContent; } }
            private static int _PContent = default;
            private static bool _PReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#Q"/>
            /// </summary>
            public static int Q { get { if (!_QReady) { _QContent = SGetField<int>(LocalBridgeClazz, "Q"); _QReady = true; } return _QContent; } }
            private static int _QContent = default;
            private static bool _QReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#R"/>
            /// </summary>
            public static int R { get { if (!_RReady) { _RContent = SGetField<int>(LocalBridgeClazz, "R"); _RReady = true; } return _RContent; } }
            private static int _RContent = default;
            private static bool _RReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#S"/>
            /// </summary>
            public static int S { get { if (!_SReady) { _SContent = SGetField<int>(LocalBridgeClazz, "S"); _SReady = true; } return _SContent; } }
            private static int _SContent = default;
            private static bool _SReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#S_V2"/>
            /// </summary>
            public static int S_V2 { get { if (!_S_V2Ready) { _S_V2Content = SGetField<int>(LocalBridgeClazz, "S_V2"); _S_V2Ready = true; } return _S_V2Content; } }
            private static int _S_V2Content = default;
            private static bool _S_V2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#TIRAMISU"/>
            /// </summary>
            public static int TIRAMISU { get { if (!_TIRAMISUReady) { _TIRAMISUContent = SGetField<int>(LocalBridgeClazz, "TIRAMISU"); _TIRAMISUReady = true; } return _TIRAMISUContent; } }
            private static int _TIRAMISUContent = default;
            private static bool _TIRAMISUReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#UPSIDE_DOWN_CAKE"/>
            /// </summary>
            public static int UPSIDE_DOWN_CAKE { get { if (!_UPSIDE_DOWN_CAKEReady) { _UPSIDE_DOWN_CAKEContent = SGetField<int>(LocalBridgeClazz, "UPSIDE_DOWN_CAKE"); _UPSIDE_DOWN_CAKEReady = true; } return _UPSIDE_DOWN_CAKEContent; } }
            private static int _UPSIDE_DOWN_CAKEContent = default;
            private static bool _UPSIDE_DOWN_CAKEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/Build.VERSION_CODES.html#VANILLA_ICE_CREAM"/>
            /// </summary>
            public static int VANILLA_ICE_CREAM { get { if (!_VANILLA_ICE_CREAMReady) { _VANILLA_ICE_CREAMContent = SGetField<int>(LocalBridgeClazz, "VANILLA_ICE_CREAM"); _VANILLA_ICE_CREAMReady = true; } return _VANILLA_ICE_CREAMContent; } }
            private static int _VANILLA_ICE_CREAMContent = default;
            private static bool _VANILLA_ICE_CREAMReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Os
{
    #region ProfilingTrigger declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/os/ProfilingTrigger.html"/>
    /// </summary>
    public partial class ProfilingTrigger : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ProfilingTrigger>
    {
        const string _bridgeClassName = "android.os.ProfilingTrigger";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ProfilingTrigger() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ProfilingTrigger(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ProfilingTrigger(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/ProfilingTrigger.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.os.ProfilingTrigger$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Builder(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region ProfilingTrigger implementation
    public partial class ProfilingTrigger
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/ProfilingTrigger.html#TRIGGER_TYPE_ANR"/>
        /// </summary>
        public static int TRIGGER_TYPE_ANR { get { if (!_TRIGGER_TYPE_ANRReady) { _TRIGGER_TYPE_ANRContent = SGetField<int>(LocalBridgeClazz, "TRIGGER_TYPE_ANR"); _TRIGGER_TYPE_ANRReady = true; } return _TRIGGER_TYPE_ANRContent; } }
        private static int _TRIGGER_TYPE_ANRContent = default;
        private static bool _TRIGGER_TYPE_ANRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/ProfilingTrigger.html#TRIGGER_TYPE_APP_FULLY_DRAWN"/>
        /// </summary>
        public static int TRIGGER_TYPE_APP_FULLY_DRAWN { get { if (!_TRIGGER_TYPE_APP_FULLY_DRAWNReady) { _TRIGGER_TYPE_APP_FULLY_DRAWNContent = SGetField<int>(LocalBridgeClazz, "TRIGGER_TYPE_APP_FULLY_DRAWN"); _TRIGGER_TYPE_APP_FULLY_DRAWNReady = true; } return _TRIGGER_TYPE_APP_FULLY_DRAWNContent; } }
        private static int _TRIGGER_TYPE_APP_FULLY_DRAWNContent = default;
        private static bool _TRIGGER_TYPE_APP_FULLY_DRAWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/ProfilingTrigger.html#TRIGGER_TYPE_NONE"/>
        /// </summary>
        public static int TRIGGER_TYPE_NONE { get { if (!_TRIGGER_TYPE_NONEReady) { _TRIGGER_TYPE_NONEContent = SGetField<int>(LocalBridgeClazz, "TRIGGER_TYPE_NONE"); _TRIGGER_TYPE_NONEReady = true; } return _TRIGGER_TYPE_NONEContent; } }
        private static int _TRIGGER_TYPE_NONEContent = default;
        private static bool _TRIGGER_TYPE_NONEReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/ProfilingTrigger.html#getRateLimitingPeriodHours()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRateLimitingPeriodHours()
        {
            return IExecuteWithSignature<int>("getRateLimitingPeriodHours", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/ProfilingTrigger.html#getTriggerType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTriggerType()
        {
            return IExecuteWithSignature<int>("getTriggerType", "()I");
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/ProfilingTrigger.Builder.html#%3Cinit%3E(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public Builder(int arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/ProfilingTrigger.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Os.ProfilingTrigger"/></returns>
            public Android.Os.ProfilingTrigger Build()
            {
                return IExecuteWithSignature<Android.Os.ProfilingTrigger>("build", "()Landroid/os/ProfilingTrigger;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/ProfilingTrigger.Builder.html#setRateLimitingPeriodHours(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Os.ProfilingTrigger.Builder"/></returns>
            public Android.Os.ProfilingTrigger.Builder SetRateLimitingPeriodHours(int arg0)
            {
                return IExecuteWithSignature<Android.Os.ProfilingTrigger.Builder>("setRateLimitingPeriodHours", "(I)Landroid/os/ProfilingTrigger$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
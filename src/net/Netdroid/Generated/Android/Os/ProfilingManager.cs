/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Os
{
    #region ProfilingManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/os/ProfilingManager.html"/>
    /// </summary>
    public partial class ProfilingManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ProfilingManager>
    {
        const string _bridgeClassName = "android.os.ProfilingManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ProfilingManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ProfilingManager(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region ProfilingManager implementation
    public partial class ProfilingManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/ProfilingManager.html#PROFILING_TYPE_HEAP_PROFILE"/>
        /// </summary>
        public static int PROFILING_TYPE_HEAP_PROFILE { get { if (!_PROFILING_TYPE_HEAP_PROFILEReady) { _PROFILING_TYPE_HEAP_PROFILEContent = SGetField<int>(LocalBridgeClazz, "PROFILING_TYPE_HEAP_PROFILE"); _PROFILING_TYPE_HEAP_PROFILEReady = true; } return _PROFILING_TYPE_HEAP_PROFILEContent; } }
        private static int _PROFILING_TYPE_HEAP_PROFILEContent = default;
        private static bool _PROFILING_TYPE_HEAP_PROFILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/ProfilingManager.html#PROFILING_TYPE_JAVA_HEAP_DUMP"/>
        /// </summary>
        public static int PROFILING_TYPE_JAVA_HEAP_DUMP { get { if (!_PROFILING_TYPE_JAVA_HEAP_DUMPReady) { _PROFILING_TYPE_JAVA_HEAP_DUMPContent = SGetField<int>(LocalBridgeClazz, "PROFILING_TYPE_JAVA_HEAP_DUMP"); _PROFILING_TYPE_JAVA_HEAP_DUMPReady = true; } return _PROFILING_TYPE_JAVA_HEAP_DUMPContent; } }
        private static int _PROFILING_TYPE_JAVA_HEAP_DUMPContent = default;
        private static bool _PROFILING_TYPE_JAVA_HEAP_DUMPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/ProfilingManager.html#PROFILING_TYPE_STACK_SAMPLING"/>
        /// </summary>
        public static int PROFILING_TYPE_STACK_SAMPLING { get { if (!_PROFILING_TYPE_STACK_SAMPLINGReady) { _PROFILING_TYPE_STACK_SAMPLINGContent = SGetField<int>(LocalBridgeClazz, "PROFILING_TYPE_STACK_SAMPLING"); _PROFILING_TYPE_STACK_SAMPLINGReady = true; } return _PROFILING_TYPE_STACK_SAMPLINGContent; } }
        private static int _PROFILING_TYPE_STACK_SAMPLINGContent = default;
        private static bool _PROFILING_TYPE_STACK_SAMPLINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/ProfilingManager.html#PROFILING_TYPE_SYSTEM_TRACE"/>
        /// </summary>
        public static int PROFILING_TYPE_SYSTEM_TRACE { get { if (!_PROFILING_TYPE_SYSTEM_TRACEReady) { _PROFILING_TYPE_SYSTEM_TRACEContent = SGetField<int>(LocalBridgeClazz, "PROFILING_TYPE_SYSTEM_TRACE"); _PROFILING_TYPE_SYSTEM_TRACEReady = true; } return _PROFILING_TYPE_SYSTEM_TRACEContent; } }
        private static int _PROFILING_TYPE_SYSTEM_TRACEContent = default;
        private static bool _PROFILING_TYPE_SYSTEM_TRACEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/ProfilingManager.html#registerForAllProfilingResults(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void RegisterForAllProfilingResults(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Android.Os.ProfilingResult> arg1)
        {
            IExecuteWithSignature("registerForAllProfilingResults", "(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/ProfilingManager.html#requestProfiling(int,android.os.Bundle,java.lang.String,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Android.Os.CancellationSignal"/></param>
        /// <param name="arg4"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg5"><see cref="Java.Util.Function.Consumer"/></param>
        public void RequestProfiling(int arg0, Android.Os.Bundle arg1, Java.Lang.String arg2, Android.Os.CancellationSignal arg3, Java.Util.Concurrent.Executor arg4, Java.Util.Function.Consumer<Android.Os.ProfilingResult> arg5)
        {
            IExecuteWithSignature("requestProfiling", "(ILandroid/os/Bundle;Ljava/lang/String;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/ProfilingManager.html#unregisterForAllProfilingResults(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        public void UnregisterForAllProfilingResults(Java.Util.Function.Consumer<Android.Os.ProfilingResult> arg0)
        {
            IExecuteWithSignature("unregisterForAllProfilingResults", "(Ljava/util/function/Consumer;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Os
{
    #region PatternMatcher
    public partial class PatternMatcher
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/PatternMatcher.html#%3Cinit%3E(android.os.Parcel)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        public PatternMatcher(Android.Os.Parcel arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/PatternMatcher.html#%3Cinit%3E(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public PatternMatcher(Java.Lang.String arg0, int arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/PatternMatcher.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/PatternMatcher.html#PATTERN_ADVANCED_GLOB"/>
        /// </summary>
        public static int PATTERN_ADVANCED_GLOB { get { if (!_PATTERN_ADVANCED_GLOBReady) { _PATTERN_ADVANCED_GLOBContent = SGetField<int>(LocalBridgeClazz, "PATTERN_ADVANCED_GLOB"); _PATTERN_ADVANCED_GLOBReady = true; } return _PATTERN_ADVANCED_GLOBContent; } }
        private static int _PATTERN_ADVANCED_GLOBContent = default;
        private static bool _PATTERN_ADVANCED_GLOBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/PatternMatcher.html#PATTERN_LITERAL"/>
        /// </summary>
        public static int PATTERN_LITERAL { get { if (!_PATTERN_LITERALReady) { _PATTERN_LITERALContent = SGetField<int>(LocalBridgeClazz, "PATTERN_LITERAL"); _PATTERN_LITERALReady = true; } return _PATTERN_LITERALContent; } }
        private static int _PATTERN_LITERALContent = default;
        private static bool _PATTERN_LITERALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/PatternMatcher.html#PATTERN_PREFIX"/>
        /// </summary>
        public static int PATTERN_PREFIX { get { if (!_PATTERN_PREFIXReady) { _PATTERN_PREFIXContent = SGetField<int>(LocalBridgeClazz, "PATTERN_PREFIX"); _PATTERN_PREFIXReady = true; } return _PATTERN_PREFIXContent; } }
        private static int _PATTERN_PREFIXContent = default;
        private static bool _PATTERN_PREFIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/PatternMatcher.html#PATTERN_SIMPLE_GLOB"/>
        /// </summary>
        public static int PATTERN_SIMPLE_GLOB { get { if (!_PATTERN_SIMPLE_GLOBReady) { _PATTERN_SIMPLE_GLOBContent = SGetField<int>(LocalBridgeClazz, "PATTERN_SIMPLE_GLOB"); _PATTERN_SIMPLE_GLOBReady = true; } return _PATTERN_SIMPLE_GLOBContent; } }
        private static int _PATTERN_SIMPLE_GLOBContent = default;
        private static bool _PATTERN_SIMPLE_GLOBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/PatternMatcher.html#PATTERN_SUFFIX"/>
        /// </summary>
        public static int PATTERN_SUFFIX { get { if (!_PATTERN_SUFFIXReady) { _PATTERN_SUFFIXContent = SGetField<int>(LocalBridgeClazz, "PATTERN_SUFFIX"); _PATTERN_SUFFIXReady = true; } return _PATTERN_SUFFIXContent; } }
        private static int _PATTERN_SUFFIXContent = default;
        private static bool _PATTERN_SUFFIXReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/PatternMatcher.html#match(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Match(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("match", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/PatternMatcher.html#getType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetType()
        {
            return IExecuteWithSignature<int>("getType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/PatternMatcher.html#getPath()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetPath()
        {
            return IExecuteWithSignature<Java.Lang.String>("getPath", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/PatternMatcher.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/PatternMatcher.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
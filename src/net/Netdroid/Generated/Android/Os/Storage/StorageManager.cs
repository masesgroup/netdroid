/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Os.Storage
{
    #region StorageManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html"/>
    /// </summary>
    public partial class StorageManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<StorageManager>
    {
        const string _bridgeClassName = "android.os.storage.StorageManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public StorageManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public StorageManager(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region StorageVolumeCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.StorageVolumeCallback.html"/>
        /// </summary>
        public partial class StorageVolumeCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<StorageVolumeCallback>
        {
            const string _bridgeClassName = "android.os.storage.StorageManager$StorageVolumeCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public StorageVolumeCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public StorageVolumeCallback(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region StorageManager implementation
    public partial class StorageManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#ACTION_CLEAR_APP_CACHE"/>
        /// </summary>
        public static Java.Lang.String ACTION_CLEAR_APP_CACHE { get { if (!_ACTION_CLEAR_APP_CACHEReady) { _ACTION_CLEAR_APP_CACHEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CLEAR_APP_CACHE"); _ACTION_CLEAR_APP_CACHEReady = true; } return _ACTION_CLEAR_APP_CACHEContent; } }
        private static Java.Lang.String _ACTION_CLEAR_APP_CACHEContent = default;
        private static bool _ACTION_CLEAR_APP_CACHEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#ACTION_MANAGE_STORAGE"/>
        /// </summary>
        public static Java.Lang.String ACTION_MANAGE_STORAGE { get { if (!_ACTION_MANAGE_STORAGEReady) { _ACTION_MANAGE_STORAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MANAGE_STORAGE"); _ACTION_MANAGE_STORAGEReady = true; } return _ACTION_MANAGE_STORAGEContent; } }
        private static Java.Lang.String _ACTION_MANAGE_STORAGEContent = default;
        private static bool _ACTION_MANAGE_STORAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#EXTRA_REQUESTED_BYTES"/>
        /// </summary>
        public static Java.Lang.String EXTRA_REQUESTED_BYTES { get { if (!_EXTRA_REQUESTED_BYTESReady) { _EXTRA_REQUESTED_BYTESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_REQUESTED_BYTES"); _EXTRA_REQUESTED_BYTESReady = true; } return _EXTRA_REQUESTED_BYTESContent; } }
        private static Java.Lang.String _EXTRA_REQUESTED_BYTESContent = default;
        private static bool _EXTRA_REQUESTED_BYTESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#EXTRA_UUID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_UUID { get { if (!_EXTRA_UUIDReady) { _EXTRA_UUIDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_UUID"); _EXTRA_UUIDReady = true; } return _EXTRA_UUIDContent; } }
        private static Java.Lang.String _EXTRA_UUIDContent = default;
        private static bool _EXTRA_UUIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#UUID_DEFAULT"/>
        /// </summary>
        public static Java.Util.UUID UUID_DEFAULT { get { if (!_UUID_DEFAULTReady) { _UUID_DEFAULTContent = SGetField<Java.Util.UUID>(LocalBridgeClazz, "UUID_DEFAULT"); _UUID_DEFAULTReady = true; } return _UUID_DEFAULTContent; } }
        private static Java.Util.UUID _UUID_DEFAULTContent = default;
        private static bool _UUID_DEFAULTReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#getManageSpaceActivityIntent(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.App.PendingIntent"/></returns>
        public Android.App.PendingIntent GetManageSpaceActivityIntent(Java.Lang.String arg0, int arg1)
        {
            return IExecute<Android.App.PendingIntent>("getManageSpaceActivityIntent", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#openProxyFileDescriptor(int,android.os.ProxyFileDescriptorCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Os.ProxyFileDescriptorCallback"/></param>
        /// <param name="arg2"><see cref="Android.Os.Handler"/></param>
        /// <returns><see cref="Android.Os.ParcelFileDescriptor"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Android.Os.ParcelFileDescriptor OpenProxyFileDescriptor(int arg0, Android.Os.ProxyFileDescriptorCallback arg1, Android.Os.Handler arg2)
        {
            return IExecute<Android.Os.ParcelFileDescriptor>("openProxyFileDescriptor", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#getPrimaryStorageVolume()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Storage.StorageVolume"/></returns>
        public Android.Os.Storage.StorageVolume GetPrimaryStorageVolume()
        {
            return IExecuteWithSignature<Android.Os.Storage.StorageVolume>("getPrimaryStorageVolume", "()Landroid/os/storage/StorageVolume;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#getStorageVolume(android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
        /// <returns><see cref="Android.Os.Storage.StorageVolume"/></returns>
        public Android.Os.Storage.StorageVolume GetStorageVolume(Android.Net.Uri arg0)
        {
            return IExecuteWithSignature<Android.Os.Storage.StorageVolume>("getStorageVolume", "(Landroid/net/Uri;)Landroid/os/storage/StorageVolume;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#getStorageVolume(java.io.File)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <returns><see cref="Android.Os.Storage.StorageVolume"/></returns>
        public Android.Os.Storage.StorageVolume GetStorageVolume(Java.Io.File arg0)
        {
            return IExecuteWithSignature<Android.Os.Storage.StorageVolume>("getStorageVolume", "(Ljava/io/File;)Landroid/os/storage/StorageVolume;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#isAllocationSupported(java.io.FileDescriptor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.FileDescriptor"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsAllocationSupported(Java.Io.FileDescriptor arg0)
        {
            return IExecuteWithSignature<bool>("isAllocationSupported", "(Ljava/io/FileDescriptor;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#isCacheBehaviorGroup(java.io.File)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <returns><see cref="bool"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public bool IsCacheBehaviorGroup(Java.Io.File arg0)
        {
            return IExecuteWithSignature<bool>("isCacheBehaviorGroup", "(Ljava/io/File;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#isCacheBehaviorTombstone(java.io.File)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <returns><see cref="bool"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public bool IsCacheBehaviorTombstone(Java.Io.File arg0)
        {
            return IExecuteWithSignature<bool>("isCacheBehaviorTombstone", "(Ljava/io/File;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#isCheckpointSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsCheckpointSupported()
        {
            return IExecuteWithSignature<bool>("isCheckpointSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#isEncrypted(java.io.File)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsEncrypted(Java.Io.File arg0)
        {
            return IExecuteWithSignature<bool>("isEncrypted", "(Ljava/io/File;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#isObbMounted(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsObbMounted(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("isObbMounted", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#mountObb(java.lang.String,java.lang.String,android.os.storage.OnObbStateChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.Storage.OnObbStateChangeListener"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool MountObb(Java.Lang.String arg0, Java.Lang.String arg1, Android.Os.Storage.OnObbStateChangeListener arg2)
        {
            return IExecute<bool>("mountObb", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#unmountObb(java.lang.String,boolean,android.os.storage.OnObbStateChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Android.Os.Storage.OnObbStateChangeListener"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool UnmountObb(Java.Lang.String arg0, bool arg1, Android.Os.Storage.OnObbStateChangeListener arg2)
        {
            return IExecute<bool>("unmountObb", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#getMountedObbPath(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetMountedObbPath(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getMountedObbPath", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#getRecentStorageVolumes()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Os.Storage.StorageVolume> GetRecentStorageVolumes()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Os.Storage.StorageVolume>>("getRecentStorageVolumes", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#getStorageVolumes()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Os.Storage.StorageVolume> GetStorageVolumes()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Os.Storage.StorageVolume>>("getStorageVolumes", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#getStorageVolumesIncludingSharedProfiles()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Os.Storage.StorageVolume> GetStorageVolumesIncludingSharedProfiles()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Os.Storage.StorageVolume>>("getStorageVolumesIncludingSharedProfiles", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#getUuidForPath(java.io.File)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <returns><see cref="Java.Util.UUID"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Java.Util.UUID GetUuidForPath(Java.Io.File arg0)
        {
            return IExecuteWithSignature<Java.Util.UUID>("getUuidForPath", "(Ljava/io/File;)Ljava/util/UUID;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#getAllocatableBytes(java.util.UUID)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.UUID"/></param>
        /// <returns><see cref="long"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public long GetAllocatableBytes(Java.Util.UUID arg0)
        {
            return IExecuteWithSignature<long>("getAllocatableBytes", "(Ljava/util/UUID;)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#getCacheQuotaBytes(java.util.UUID)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.UUID"/></param>
        /// <returns><see cref="long"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public long GetCacheQuotaBytes(Java.Util.UUID arg0)
        {
            return IExecuteWithSignature<long>("getCacheQuotaBytes", "(Ljava/util/UUID;)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#getCacheSizeBytes(java.util.UUID)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.UUID"/></param>
        /// <returns><see cref="long"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public long GetCacheSizeBytes(Java.Util.UUID arg0)
        {
            return IExecuteWithSignature<long>("getCacheSizeBytes", "(Ljava/util/UUID;)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#allocateBytes(java.io.FileDescriptor,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.FileDescriptor"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void AllocateBytes(Java.Io.FileDescriptor arg0, long arg1)
        {
            IExecute("allocateBytes", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#allocateBytes(java.util.UUID,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.UUID"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void AllocateBytes(Java.Util.UUID arg0, long arg1)
        {
            IExecute("allocateBytes", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#registerStorageVolumeCallback(java.util.concurrent.Executor,android.os.storage.StorageManager.StorageVolumeCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Os.Storage.StorageManager.StorageVolumeCallback"/></param>
        public void RegisterStorageVolumeCallback(Java.Util.Concurrent.Executor arg0, Android.Os.Storage.StorageManager.StorageVolumeCallback arg1)
        {
            IExecute("registerStorageVolumeCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#setCacheBehaviorGroup(java.io.File,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void SetCacheBehaviorGroup(Java.Io.File arg0, bool arg1)
        {
            IExecute("setCacheBehaviorGroup", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#setCacheBehaviorTombstone(java.io.File,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void SetCacheBehaviorTombstone(Java.Io.File arg0, bool arg1)
        {
            IExecute("setCacheBehaviorTombstone", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.html#unregisterStorageVolumeCallback(android.os.storage.StorageManager.StorageVolumeCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Storage.StorageManager.StorageVolumeCallback"/></param>
        public void UnregisterStorageVolumeCallback(Android.Os.Storage.StorageManager.StorageVolumeCallback arg0)
        {
            IExecuteWithSignature("unregisterStorageVolumeCallback", "(Landroid/os/storage/StorageManager$StorageVolumeCallback;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region StorageVolumeCallback implementation
        public partial class StorageVolumeCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/os/storage/StorageManager.StorageVolumeCallback.html#onStateChanged(android.os.storage.StorageVolume)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Storage.StorageVolume"/></param>
            public void OnStateChanged(Android.Os.Storage.StorageVolume arg0)
            {
                IExecuteWithSignature("onStateChanged", "(Landroid/os/storage/StorageVolume;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
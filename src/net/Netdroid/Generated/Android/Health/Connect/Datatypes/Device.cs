/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Health.Connect.Datatypes
{
    #region Device
    public partial class Device
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/Device.html#DEVICE_TYPE_CHEST_STRAP"/>
        /// </summary>
        public static int DEVICE_TYPE_CHEST_STRAP { get { if (!_DEVICE_TYPE_CHEST_STRAPReady) { _DEVICE_TYPE_CHEST_STRAPContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_CHEST_STRAP"); _DEVICE_TYPE_CHEST_STRAPReady = true; } return _DEVICE_TYPE_CHEST_STRAPContent; } }
        private static int _DEVICE_TYPE_CHEST_STRAPContent = default;
        private static bool _DEVICE_TYPE_CHEST_STRAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/Device.html#DEVICE_TYPE_FITNESS_BAND"/>
        /// </summary>
        public static int DEVICE_TYPE_FITNESS_BAND { get { if (!_DEVICE_TYPE_FITNESS_BANDReady) { _DEVICE_TYPE_FITNESS_BANDContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_FITNESS_BAND"); _DEVICE_TYPE_FITNESS_BANDReady = true; } return _DEVICE_TYPE_FITNESS_BANDContent; } }
        private static int _DEVICE_TYPE_FITNESS_BANDContent = default;
        private static bool _DEVICE_TYPE_FITNESS_BANDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/Device.html#DEVICE_TYPE_HEAD_MOUNTED"/>
        /// </summary>
        public static int DEVICE_TYPE_HEAD_MOUNTED { get { if (!_DEVICE_TYPE_HEAD_MOUNTEDReady) { _DEVICE_TYPE_HEAD_MOUNTEDContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_HEAD_MOUNTED"); _DEVICE_TYPE_HEAD_MOUNTEDReady = true; } return _DEVICE_TYPE_HEAD_MOUNTEDContent; } }
        private static int _DEVICE_TYPE_HEAD_MOUNTEDContent = default;
        private static bool _DEVICE_TYPE_HEAD_MOUNTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/Device.html#DEVICE_TYPE_PHONE"/>
        /// </summary>
        public static int DEVICE_TYPE_PHONE { get { if (!_DEVICE_TYPE_PHONEReady) { _DEVICE_TYPE_PHONEContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_PHONE"); _DEVICE_TYPE_PHONEReady = true; } return _DEVICE_TYPE_PHONEContent; } }
        private static int _DEVICE_TYPE_PHONEContent = default;
        private static bool _DEVICE_TYPE_PHONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/Device.html#DEVICE_TYPE_RING"/>
        /// </summary>
        public static int DEVICE_TYPE_RING { get { if (!_DEVICE_TYPE_RINGReady) { _DEVICE_TYPE_RINGContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_RING"); _DEVICE_TYPE_RINGReady = true; } return _DEVICE_TYPE_RINGContent; } }
        private static int _DEVICE_TYPE_RINGContent = default;
        private static bool _DEVICE_TYPE_RINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/Device.html#DEVICE_TYPE_SCALE"/>
        /// </summary>
        public static int DEVICE_TYPE_SCALE { get { if (!_DEVICE_TYPE_SCALEReady) { _DEVICE_TYPE_SCALEContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_SCALE"); _DEVICE_TYPE_SCALEReady = true; } return _DEVICE_TYPE_SCALEContent; } }
        private static int _DEVICE_TYPE_SCALEContent = default;
        private static bool _DEVICE_TYPE_SCALEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/Device.html#DEVICE_TYPE_SMART_DISPLAY"/>
        /// </summary>
        public static int DEVICE_TYPE_SMART_DISPLAY { get { if (!_DEVICE_TYPE_SMART_DISPLAYReady) { _DEVICE_TYPE_SMART_DISPLAYContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_SMART_DISPLAY"); _DEVICE_TYPE_SMART_DISPLAYReady = true; } return _DEVICE_TYPE_SMART_DISPLAYContent; } }
        private static int _DEVICE_TYPE_SMART_DISPLAYContent = default;
        private static bool _DEVICE_TYPE_SMART_DISPLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/Device.html#DEVICE_TYPE_UNKNOWN"/>
        /// </summary>
        public static int DEVICE_TYPE_UNKNOWN { get { if (!_DEVICE_TYPE_UNKNOWNReady) { _DEVICE_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_UNKNOWN"); _DEVICE_TYPE_UNKNOWNReady = true; } return _DEVICE_TYPE_UNKNOWNContent; } }
        private static int _DEVICE_TYPE_UNKNOWNContent = default;
        private static bool _DEVICE_TYPE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/Device.html#DEVICE_TYPE_WATCH"/>
        /// </summary>
        public static int DEVICE_TYPE_WATCH { get { if (!_DEVICE_TYPE_WATCHReady) { _DEVICE_TYPE_WATCHContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_WATCH"); _DEVICE_TYPE_WATCHReady = true; } return _DEVICE_TYPE_WATCHContent; } }
        private static int _DEVICE_TYPE_WATCHContent = default;
        private static bool _DEVICE_TYPE_WATCHReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/Device.html#getManufacturer()"/> 
        /// </summary>
        public Java.Lang.String Manufacturer
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getManufacturer", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/Device.html#getModel()"/> 
        /// </summary>
        public Java.Lang.String Model
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getModel", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/Device.html#getType()"/> 
        /// </summary>
        public int Type
        {
            get { return IExecuteWithSignature<int>("getType", "()I"); }
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/Device.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Health.Connect.Datatypes.Device"/></returns>
            public Android.Health.Connect.Datatypes.Device Build()
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.Device>("build", "()Landroid/health/connect/datatypes/Device;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/Device.Builder.html#setManufacturer(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Health.Connect.Datatypes.Device.Builder"/></returns>
            public Android.Health.Connect.Datatypes.Device.Builder SetManufacturer(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.Device.Builder>("setManufacturer", "(Ljava/lang/String;)Landroid/health/connect/datatypes/Device$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/Device.Builder.html#setModel(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Health.Connect.Datatypes.Device.Builder"/></returns>
            public Android.Health.Connect.Datatypes.Device.Builder SetModel(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.Device.Builder>("setModel", "(Ljava/lang/String;)Landroid/health/connect/datatypes/Device$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/Device.Builder.html#setType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Health.Connect.Datatypes.Device.Builder"/></returns>
            public Android.Health.Connect.Datatypes.Device.Builder SetType(int arg0)
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.Device.Builder>("setType", "(I)Landroid/health/connect/datatypes/Device$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Health.Connect.Datatypes
{
    #region OvulationTestRecord
    public partial class OvulationTestRecord
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/OvulationTestRecord.html#getResult()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetResult()
        {
            return IExecuteWithSignature<int>("getResult", "()I");
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/OvulationTestRecord.Builder.html#%3Cinit%3E(android.health.connect.datatypes.Metadata,java.time.Instant,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Health.Connect.Datatypes.Metadata"/></param>
            /// <param name="arg1"><see cref="Java.Time.Instant"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public Builder(Android.Health.Connect.Datatypes.Metadata arg0, Java.Time.Instant arg1, int arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/OvulationTestRecord.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Health.Connect.Datatypes.OvulationTestRecord"/></returns>
            public Android.Health.Connect.Datatypes.OvulationTestRecord Build()
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.OvulationTestRecord>("build", "()Landroid/health/connect/datatypes/OvulationTestRecord;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/OvulationTestRecord.Builder.html#clearZoneOffset()"/>
            /// </summary>
            /// <returns><see cref="Android.Health.Connect.Datatypes.OvulationTestRecord.Builder"/></returns>
            public Android.Health.Connect.Datatypes.OvulationTestRecord.Builder ClearZoneOffset()
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.OvulationTestRecord.Builder>("clearZoneOffset", "()Landroid/health/connect/datatypes/OvulationTestRecord$Builder;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/OvulationTestRecord.Builder.html#setZoneOffset(java.time.ZoneOffset)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Time.ZoneOffset"/></param>
            /// <returns><see cref="Android.Health.Connect.Datatypes.OvulationTestRecord.Builder"/></returns>
            public Android.Health.Connect.Datatypes.OvulationTestRecord.Builder SetZoneOffset(Java.Time.ZoneOffset arg0)
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.OvulationTestRecord.Builder>("setZoneOffset", "(Ljava/time/ZoneOffset;)Landroid/health/connect/datatypes/OvulationTestRecord$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OvulationTestResult
        public partial class OvulationTestResult
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/OvulationTestRecord.OvulationTestResult.html#RESULT_HIGH"/>
            /// </summary>
            public static int RESULT_HIGH { get { if (!_RESULT_HIGHReady) { _RESULT_HIGHContent = SGetField<int>(LocalBridgeClazz, "RESULT_HIGH"); _RESULT_HIGHReady = true; } return _RESULT_HIGHContent; } }
            private static int _RESULT_HIGHContent = default;
            private static bool _RESULT_HIGHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/OvulationTestRecord.OvulationTestResult.html#RESULT_INCONCLUSIVE"/>
            /// </summary>
            public static int RESULT_INCONCLUSIVE { get { if (!_RESULT_INCONCLUSIVEReady) { _RESULT_INCONCLUSIVEContent = SGetField<int>(LocalBridgeClazz, "RESULT_INCONCLUSIVE"); _RESULT_INCONCLUSIVEReady = true; } return _RESULT_INCONCLUSIVEContent; } }
            private static int _RESULT_INCONCLUSIVEContent = default;
            private static bool _RESULT_INCONCLUSIVEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/OvulationTestRecord.OvulationTestResult.html#RESULT_NEGATIVE"/>
            /// </summary>
            public static int RESULT_NEGATIVE { get { if (!_RESULT_NEGATIVEReady) { _RESULT_NEGATIVEContent = SGetField<int>(LocalBridgeClazz, "RESULT_NEGATIVE"); _RESULT_NEGATIVEReady = true; } return _RESULT_NEGATIVEContent; } }
            private static int _RESULT_NEGATIVEContent = default;
            private static bool _RESULT_NEGATIVEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/OvulationTestRecord.OvulationTestResult.html#RESULT_POSITIVE"/>
            /// </summary>
            public static int RESULT_POSITIVE { get { if (!_RESULT_POSITIVEReady) { _RESULT_POSITIVEContent = SGetField<int>(LocalBridgeClazz, "RESULT_POSITIVE"); _RESULT_POSITIVEReady = true; } return _RESULT_POSITIVEContent; } }
            private static int _RESULT_POSITIVEContent = default;
            private static bool _RESULT_POSITIVEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Health.Connect.Datatypes
{
    #region MedicalResource declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html"/>
    /// </summary>
    public partial class MedicalResource : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.health.connect.datatypes.MedicalResource";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public MedicalResource() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public MedicalResource(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public MedicalResource(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.health.connect.datatypes.MedicalResource$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Builder(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region MedicalResource implementation
    public partial class MedicalResource
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#MEDICAL_RESOURCE_TYPE_ALLERGIES_INTOLERANCES"/>
        /// </summary>
        public static int MEDICAL_RESOURCE_TYPE_ALLERGIES_INTOLERANCES { get { if (!_MEDICAL_RESOURCE_TYPE_ALLERGIES_INTOLERANCESReady) { _MEDICAL_RESOURCE_TYPE_ALLERGIES_INTOLERANCESContent = SGetField<int>(LocalBridgeClazz, "MEDICAL_RESOURCE_TYPE_ALLERGIES_INTOLERANCES"); _MEDICAL_RESOURCE_TYPE_ALLERGIES_INTOLERANCESReady = true; } return _MEDICAL_RESOURCE_TYPE_ALLERGIES_INTOLERANCESContent; } }
        private static int _MEDICAL_RESOURCE_TYPE_ALLERGIES_INTOLERANCESContent = default;
        private static bool _MEDICAL_RESOURCE_TYPE_ALLERGIES_INTOLERANCESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#MEDICAL_RESOURCE_TYPE_CONDITIONS"/>
        /// </summary>
        public static int MEDICAL_RESOURCE_TYPE_CONDITIONS { get { if (!_MEDICAL_RESOURCE_TYPE_CONDITIONSReady) { _MEDICAL_RESOURCE_TYPE_CONDITIONSContent = SGetField<int>(LocalBridgeClazz, "MEDICAL_RESOURCE_TYPE_CONDITIONS"); _MEDICAL_RESOURCE_TYPE_CONDITIONSReady = true; } return _MEDICAL_RESOURCE_TYPE_CONDITIONSContent; } }
        private static int _MEDICAL_RESOURCE_TYPE_CONDITIONSContent = default;
        private static bool _MEDICAL_RESOURCE_TYPE_CONDITIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#MEDICAL_RESOURCE_TYPE_LABORATORY_RESULTS"/>
        /// </summary>
        public static int MEDICAL_RESOURCE_TYPE_LABORATORY_RESULTS { get { if (!_MEDICAL_RESOURCE_TYPE_LABORATORY_RESULTSReady) { _MEDICAL_RESOURCE_TYPE_LABORATORY_RESULTSContent = SGetField<int>(LocalBridgeClazz, "MEDICAL_RESOURCE_TYPE_LABORATORY_RESULTS"); _MEDICAL_RESOURCE_TYPE_LABORATORY_RESULTSReady = true; } return _MEDICAL_RESOURCE_TYPE_LABORATORY_RESULTSContent; } }
        private static int _MEDICAL_RESOURCE_TYPE_LABORATORY_RESULTSContent = default;
        private static bool _MEDICAL_RESOURCE_TYPE_LABORATORY_RESULTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#MEDICAL_RESOURCE_TYPE_MEDICATIONS"/>
        /// </summary>
        public static int MEDICAL_RESOURCE_TYPE_MEDICATIONS { get { if (!_MEDICAL_RESOURCE_TYPE_MEDICATIONSReady) { _MEDICAL_RESOURCE_TYPE_MEDICATIONSContent = SGetField<int>(LocalBridgeClazz, "MEDICAL_RESOURCE_TYPE_MEDICATIONS"); _MEDICAL_RESOURCE_TYPE_MEDICATIONSReady = true; } return _MEDICAL_RESOURCE_TYPE_MEDICATIONSContent; } }
        private static int _MEDICAL_RESOURCE_TYPE_MEDICATIONSContent = default;
        private static bool _MEDICAL_RESOURCE_TYPE_MEDICATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#MEDICAL_RESOURCE_TYPE_PERSONAL_DETAILS"/>
        /// </summary>
        public static int MEDICAL_RESOURCE_TYPE_PERSONAL_DETAILS { get { if (!_MEDICAL_RESOURCE_TYPE_PERSONAL_DETAILSReady) { _MEDICAL_RESOURCE_TYPE_PERSONAL_DETAILSContent = SGetField<int>(LocalBridgeClazz, "MEDICAL_RESOURCE_TYPE_PERSONAL_DETAILS"); _MEDICAL_RESOURCE_TYPE_PERSONAL_DETAILSReady = true; } return _MEDICAL_RESOURCE_TYPE_PERSONAL_DETAILSContent; } }
        private static int _MEDICAL_RESOURCE_TYPE_PERSONAL_DETAILSContent = default;
        private static bool _MEDICAL_RESOURCE_TYPE_PERSONAL_DETAILSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#MEDICAL_RESOURCE_TYPE_PRACTITIONER_DETAILS"/>
        /// </summary>
        public static int MEDICAL_RESOURCE_TYPE_PRACTITIONER_DETAILS { get { if (!_MEDICAL_RESOURCE_TYPE_PRACTITIONER_DETAILSReady) { _MEDICAL_RESOURCE_TYPE_PRACTITIONER_DETAILSContent = SGetField<int>(LocalBridgeClazz, "MEDICAL_RESOURCE_TYPE_PRACTITIONER_DETAILS"); _MEDICAL_RESOURCE_TYPE_PRACTITIONER_DETAILSReady = true; } return _MEDICAL_RESOURCE_TYPE_PRACTITIONER_DETAILSContent; } }
        private static int _MEDICAL_RESOURCE_TYPE_PRACTITIONER_DETAILSContent = default;
        private static bool _MEDICAL_RESOURCE_TYPE_PRACTITIONER_DETAILSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#MEDICAL_RESOURCE_TYPE_PREGNANCY"/>
        /// </summary>
        public static int MEDICAL_RESOURCE_TYPE_PREGNANCY { get { if (!_MEDICAL_RESOURCE_TYPE_PREGNANCYReady) { _MEDICAL_RESOURCE_TYPE_PREGNANCYContent = SGetField<int>(LocalBridgeClazz, "MEDICAL_RESOURCE_TYPE_PREGNANCY"); _MEDICAL_RESOURCE_TYPE_PREGNANCYReady = true; } return _MEDICAL_RESOURCE_TYPE_PREGNANCYContent; } }
        private static int _MEDICAL_RESOURCE_TYPE_PREGNANCYContent = default;
        private static bool _MEDICAL_RESOURCE_TYPE_PREGNANCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#MEDICAL_RESOURCE_TYPE_PROCEDURES"/>
        /// </summary>
        public static int MEDICAL_RESOURCE_TYPE_PROCEDURES { get { if (!_MEDICAL_RESOURCE_TYPE_PROCEDURESReady) { _MEDICAL_RESOURCE_TYPE_PROCEDURESContent = SGetField<int>(LocalBridgeClazz, "MEDICAL_RESOURCE_TYPE_PROCEDURES"); _MEDICAL_RESOURCE_TYPE_PROCEDURESReady = true; } return _MEDICAL_RESOURCE_TYPE_PROCEDURESContent; } }
        private static int _MEDICAL_RESOURCE_TYPE_PROCEDURESContent = default;
        private static bool _MEDICAL_RESOURCE_TYPE_PROCEDURESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#MEDICAL_RESOURCE_TYPE_SOCIAL_HISTORY"/>
        /// </summary>
        public static int MEDICAL_RESOURCE_TYPE_SOCIAL_HISTORY { get { if (!_MEDICAL_RESOURCE_TYPE_SOCIAL_HISTORYReady) { _MEDICAL_RESOURCE_TYPE_SOCIAL_HISTORYContent = SGetField<int>(LocalBridgeClazz, "MEDICAL_RESOURCE_TYPE_SOCIAL_HISTORY"); _MEDICAL_RESOURCE_TYPE_SOCIAL_HISTORYReady = true; } return _MEDICAL_RESOURCE_TYPE_SOCIAL_HISTORYContent; } }
        private static int _MEDICAL_RESOURCE_TYPE_SOCIAL_HISTORYContent = default;
        private static bool _MEDICAL_RESOURCE_TYPE_SOCIAL_HISTORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#MEDICAL_RESOURCE_TYPE_VACCINES"/>
        /// </summary>
        public static int MEDICAL_RESOURCE_TYPE_VACCINES { get { if (!_MEDICAL_RESOURCE_TYPE_VACCINESReady) { _MEDICAL_RESOURCE_TYPE_VACCINESContent = SGetField<int>(LocalBridgeClazz, "MEDICAL_RESOURCE_TYPE_VACCINES"); _MEDICAL_RESOURCE_TYPE_VACCINESReady = true; } return _MEDICAL_RESOURCE_TYPE_VACCINESContent; } }
        private static int _MEDICAL_RESOURCE_TYPE_VACCINESContent = default;
        private static bool _MEDICAL_RESOURCE_TYPE_VACCINESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#MEDICAL_RESOURCE_TYPE_VISITS"/>
        /// </summary>
        public static int MEDICAL_RESOURCE_TYPE_VISITS { get { if (!_MEDICAL_RESOURCE_TYPE_VISITSReady) { _MEDICAL_RESOURCE_TYPE_VISITSContent = SGetField<int>(LocalBridgeClazz, "MEDICAL_RESOURCE_TYPE_VISITS"); _MEDICAL_RESOURCE_TYPE_VISITSReady = true; } return _MEDICAL_RESOURCE_TYPE_VISITSContent; } }
        private static int _MEDICAL_RESOURCE_TYPE_VISITSContent = default;
        private static bool _MEDICAL_RESOURCE_TYPE_VISITSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#MEDICAL_RESOURCE_TYPE_VITAL_SIGNS"/>
        /// </summary>
        public static int MEDICAL_RESOURCE_TYPE_VITAL_SIGNS { get { if (!_MEDICAL_RESOURCE_TYPE_VITAL_SIGNSReady) { _MEDICAL_RESOURCE_TYPE_VITAL_SIGNSContent = SGetField<int>(LocalBridgeClazz, "MEDICAL_RESOURCE_TYPE_VITAL_SIGNS"); _MEDICAL_RESOURCE_TYPE_VITAL_SIGNSReady = true; } return _MEDICAL_RESOURCE_TYPE_VITAL_SIGNSContent; } }
        private static int _MEDICAL_RESOURCE_TYPE_VITAL_SIGNSContent = default;
        private static bool _MEDICAL_RESOURCE_TYPE_VITAL_SIGNSReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#getFhirResource()"/>
        /// </summary>
        /// <returns><see cref="Android.Health.Connect.Datatypes.FhirResource"/></returns>
        public Android.Health.Connect.Datatypes.FhirResource GetFhirResource()
        {
            return IExecuteWithSignature<Android.Health.Connect.Datatypes.FhirResource>("getFhirResource", "()Landroid/health/connect/datatypes/FhirResource;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#getFhirVersion()"/>
        /// </summary>
        /// <returns><see cref="Android.Health.Connect.Datatypes.FhirVersion"/></returns>
        public Android.Health.Connect.Datatypes.FhirVersion GetFhirVersion()
        {
            return IExecuteWithSignature<Android.Health.Connect.Datatypes.FhirVersion>("getFhirVersion", "()Landroid/health/connect/datatypes/FhirVersion;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#getId()"/>
        /// </summary>
        /// <returns><see cref="Android.Health.Connect.MedicalResourceId"/></returns>
        public Android.Health.Connect.MedicalResourceId GetId()
        {
            return IExecuteWithSignature<Android.Health.Connect.MedicalResourceId>("getId", "()Landroid/health/connect/MedicalResourceId;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#getType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetType()
        {
            return IExecuteWithSignature<int>("getType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#getDataSourceId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDataSourceId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getDataSourceId", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.Builder.html#%3Cinit%3E(android.health.connect.datatypes.MedicalResource)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Health.Connect.Datatypes.MedicalResource"/></param>
            public Builder(Android.Health.Connect.Datatypes.MedicalResource arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.Builder.html#%3Cinit%3E(android.health.connect.datatypes.MedicalResource.Builder)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Health.Connect.Datatypes.MedicalResource.Builder"/></param>
            public Builder(Android.Health.Connect.Datatypes.MedicalResource.Builder arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.Builder.html#%3Cinit%3E(int,java.lang.String,android.health.connect.datatypes.FhirVersion,android.health.connect.datatypes.FhirResource)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="Android.Health.Connect.Datatypes.FhirVersion"/></param>
            /// <param name="arg3"><see cref="Android.Health.Connect.Datatypes.FhirResource"/></param>
            public Builder(int arg0, Java.Lang.String arg1, Android.Health.Connect.Datatypes.FhirVersion arg2, Android.Health.Connect.Datatypes.FhirResource arg3)
                : base(arg0, arg1, arg2, arg3)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Health.Connect.Datatypes.MedicalResource"/></returns>
            public Android.Health.Connect.Datatypes.MedicalResource Build()
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.MedicalResource>("build", "()Landroid/health/connect/datatypes/MedicalResource;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.Builder.html#setDataSourceId(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Health.Connect.Datatypes.MedicalResource.Builder"/></returns>
            public Android.Health.Connect.Datatypes.MedicalResource.Builder SetDataSourceId(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.MedicalResource.Builder>("setDataSourceId", "(Ljava/lang/String;)Landroid/health/connect/datatypes/MedicalResource$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.Builder.html#setFhirResource(android.health.connect.datatypes.FhirResource)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Health.Connect.Datatypes.FhirResource"/></param>
            /// <returns><see cref="Android.Health.Connect.Datatypes.MedicalResource.Builder"/></returns>
            public Android.Health.Connect.Datatypes.MedicalResource.Builder SetFhirResource(Android.Health.Connect.Datatypes.FhirResource arg0)
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.MedicalResource.Builder>("setFhirResource", "(Landroid/health/connect/datatypes/FhirResource;)Landroid/health/connect/datatypes/MedicalResource$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.Builder.html#setFhirVersion(android.health.connect.datatypes.FhirVersion)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Health.Connect.Datatypes.FhirVersion"/></param>
            /// <returns><see cref="Android.Health.Connect.Datatypes.MedicalResource.Builder"/></returns>
            public Android.Health.Connect.Datatypes.MedicalResource.Builder SetFhirVersion(Android.Health.Connect.Datatypes.FhirVersion arg0)
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.MedicalResource.Builder>("setFhirVersion", "(Landroid/health/connect/datatypes/FhirVersion;)Landroid/health/connect/datatypes/MedicalResource$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MedicalResource.Builder.html#setType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Health.Connect.Datatypes.MedicalResource.Builder"/></returns>
            public Android.Health.Connect.Datatypes.MedicalResource.Builder SetType(int arg0)
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.MedicalResource.Builder>("setType", "(I)Landroid/health/connect/datatypes/MedicalResource$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Health.Connect.Datatypes
{
    #region MealType
    public partial class MealType
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MealType.html#MEAL_TYPE_BREAKFAST"/>
        /// </summary>
        public static int MEAL_TYPE_BREAKFAST { get { if (!_MEAL_TYPE_BREAKFASTReady) { _MEAL_TYPE_BREAKFASTContent = SGetField<int>(LocalBridgeClazz, "MEAL_TYPE_BREAKFAST"); _MEAL_TYPE_BREAKFASTReady = true; } return _MEAL_TYPE_BREAKFASTContent; } }
        private static int _MEAL_TYPE_BREAKFASTContent = default;
        private static bool _MEAL_TYPE_BREAKFASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MealType.html#MEAL_TYPE_DINNER"/>
        /// </summary>
        public static int MEAL_TYPE_DINNER { get { if (!_MEAL_TYPE_DINNERReady) { _MEAL_TYPE_DINNERContent = SGetField<int>(LocalBridgeClazz, "MEAL_TYPE_DINNER"); _MEAL_TYPE_DINNERReady = true; } return _MEAL_TYPE_DINNERContent; } }
        private static int _MEAL_TYPE_DINNERContent = default;
        private static bool _MEAL_TYPE_DINNERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MealType.html#MEAL_TYPE_LUNCH"/>
        /// </summary>
        public static int MEAL_TYPE_LUNCH { get { if (!_MEAL_TYPE_LUNCHReady) { _MEAL_TYPE_LUNCHContent = SGetField<int>(LocalBridgeClazz, "MEAL_TYPE_LUNCH"); _MEAL_TYPE_LUNCHReady = true; } return _MEAL_TYPE_LUNCHContent; } }
        private static int _MEAL_TYPE_LUNCHContent = default;
        private static bool _MEAL_TYPE_LUNCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MealType.html#MEAL_TYPE_SNACK"/>
        /// </summary>
        public static int MEAL_TYPE_SNACK { get { if (!_MEAL_TYPE_SNACKReady) { _MEAL_TYPE_SNACKContent = SGetField<int>(LocalBridgeClazz, "MEAL_TYPE_SNACK"); _MEAL_TYPE_SNACKReady = true; } return _MEAL_TYPE_SNACKContent; } }
        private static int _MEAL_TYPE_SNACKContent = default;
        private static bool _MEAL_TYPE_SNACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/MealType.html#MEAL_TYPE_UNKNOWN"/>
        /// </summary>
        public static int MEAL_TYPE_UNKNOWN { get { if (!_MEAL_TYPE_UNKNOWNReady) { _MEAL_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "MEAL_TYPE_UNKNOWN"); _MEAL_TYPE_UNKNOWNReady = true; } return _MEAL_TYPE_UNKNOWNContent; } }
        private static int _MEAL_TYPE_UNKNOWNContent = default;
        private static bool _MEAL_TYPE_UNKNOWNReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Health.Connect.Datatypes
{
    #region FhirResource declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html"/>
    /// </summary>
    public partial class FhirResource : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.health.connect.datatypes.FhirResource";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public FhirResource() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public FhirResource(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public FhirResource(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.health.connect.datatypes.FhirResource$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Builder(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region FhirResource implementation
    public partial class FhirResource
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#FHIR_RESOURCE_TYPE_ALLERGY_INTOLERANCE"/>
        /// </summary>
        public static int FHIR_RESOURCE_TYPE_ALLERGY_INTOLERANCE { get { if (!_FHIR_RESOURCE_TYPE_ALLERGY_INTOLERANCEReady) { _FHIR_RESOURCE_TYPE_ALLERGY_INTOLERANCEContent = SGetField<int>(LocalBridgeClazz, "FHIR_RESOURCE_TYPE_ALLERGY_INTOLERANCE"); _FHIR_RESOURCE_TYPE_ALLERGY_INTOLERANCEReady = true; } return _FHIR_RESOURCE_TYPE_ALLERGY_INTOLERANCEContent; } }
        private static int _FHIR_RESOURCE_TYPE_ALLERGY_INTOLERANCEContent = default;
        private static bool _FHIR_RESOURCE_TYPE_ALLERGY_INTOLERANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#FHIR_RESOURCE_TYPE_CONDITION"/>
        /// </summary>
        public static int FHIR_RESOURCE_TYPE_CONDITION { get { if (!_FHIR_RESOURCE_TYPE_CONDITIONReady) { _FHIR_RESOURCE_TYPE_CONDITIONContent = SGetField<int>(LocalBridgeClazz, "FHIR_RESOURCE_TYPE_CONDITION"); _FHIR_RESOURCE_TYPE_CONDITIONReady = true; } return _FHIR_RESOURCE_TYPE_CONDITIONContent; } }
        private static int _FHIR_RESOURCE_TYPE_CONDITIONContent = default;
        private static bool _FHIR_RESOURCE_TYPE_CONDITIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#FHIR_RESOURCE_TYPE_ENCOUNTER"/>
        /// </summary>
        public static int FHIR_RESOURCE_TYPE_ENCOUNTER { get { if (!_FHIR_RESOURCE_TYPE_ENCOUNTERReady) { _FHIR_RESOURCE_TYPE_ENCOUNTERContent = SGetField<int>(LocalBridgeClazz, "FHIR_RESOURCE_TYPE_ENCOUNTER"); _FHIR_RESOURCE_TYPE_ENCOUNTERReady = true; } return _FHIR_RESOURCE_TYPE_ENCOUNTERContent; } }
        private static int _FHIR_RESOURCE_TYPE_ENCOUNTERContent = default;
        private static bool _FHIR_RESOURCE_TYPE_ENCOUNTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#FHIR_RESOURCE_TYPE_IMMUNIZATION"/>
        /// </summary>
        public static int FHIR_RESOURCE_TYPE_IMMUNIZATION { get { if (!_FHIR_RESOURCE_TYPE_IMMUNIZATIONReady) { _FHIR_RESOURCE_TYPE_IMMUNIZATIONContent = SGetField<int>(LocalBridgeClazz, "FHIR_RESOURCE_TYPE_IMMUNIZATION"); _FHIR_RESOURCE_TYPE_IMMUNIZATIONReady = true; } return _FHIR_RESOURCE_TYPE_IMMUNIZATIONContent; } }
        private static int _FHIR_RESOURCE_TYPE_IMMUNIZATIONContent = default;
        private static bool _FHIR_RESOURCE_TYPE_IMMUNIZATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#FHIR_RESOURCE_TYPE_LOCATION"/>
        /// </summary>
        public static int FHIR_RESOURCE_TYPE_LOCATION { get { if (!_FHIR_RESOURCE_TYPE_LOCATIONReady) { _FHIR_RESOURCE_TYPE_LOCATIONContent = SGetField<int>(LocalBridgeClazz, "FHIR_RESOURCE_TYPE_LOCATION"); _FHIR_RESOURCE_TYPE_LOCATIONReady = true; } return _FHIR_RESOURCE_TYPE_LOCATIONContent; } }
        private static int _FHIR_RESOURCE_TYPE_LOCATIONContent = default;
        private static bool _FHIR_RESOURCE_TYPE_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#FHIR_RESOURCE_TYPE_MEDICATION"/>
        /// </summary>
        public static int FHIR_RESOURCE_TYPE_MEDICATION { get { if (!_FHIR_RESOURCE_TYPE_MEDICATIONReady) { _FHIR_RESOURCE_TYPE_MEDICATIONContent = SGetField<int>(LocalBridgeClazz, "FHIR_RESOURCE_TYPE_MEDICATION"); _FHIR_RESOURCE_TYPE_MEDICATIONReady = true; } return _FHIR_RESOURCE_TYPE_MEDICATIONContent; } }
        private static int _FHIR_RESOURCE_TYPE_MEDICATIONContent = default;
        private static bool _FHIR_RESOURCE_TYPE_MEDICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#FHIR_RESOURCE_TYPE_MEDICATION_REQUEST"/>
        /// </summary>
        public static int FHIR_RESOURCE_TYPE_MEDICATION_REQUEST { get { if (!_FHIR_RESOURCE_TYPE_MEDICATION_REQUESTReady) { _FHIR_RESOURCE_TYPE_MEDICATION_REQUESTContent = SGetField<int>(LocalBridgeClazz, "FHIR_RESOURCE_TYPE_MEDICATION_REQUEST"); _FHIR_RESOURCE_TYPE_MEDICATION_REQUESTReady = true; } return _FHIR_RESOURCE_TYPE_MEDICATION_REQUESTContent; } }
        private static int _FHIR_RESOURCE_TYPE_MEDICATION_REQUESTContent = default;
        private static bool _FHIR_RESOURCE_TYPE_MEDICATION_REQUESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#FHIR_RESOURCE_TYPE_MEDICATION_STATEMENT"/>
        /// </summary>
        public static int FHIR_RESOURCE_TYPE_MEDICATION_STATEMENT { get { if (!_FHIR_RESOURCE_TYPE_MEDICATION_STATEMENTReady) { _FHIR_RESOURCE_TYPE_MEDICATION_STATEMENTContent = SGetField<int>(LocalBridgeClazz, "FHIR_RESOURCE_TYPE_MEDICATION_STATEMENT"); _FHIR_RESOURCE_TYPE_MEDICATION_STATEMENTReady = true; } return _FHIR_RESOURCE_TYPE_MEDICATION_STATEMENTContent; } }
        private static int _FHIR_RESOURCE_TYPE_MEDICATION_STATEMENTContent = default;
        private static bool _FHIR_RESOURCE_TYPE_MEDICATION_STATEMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#FHIR_RESOURCE_TYPE_OBSERVATION"/>
        /// </summary>
        public static int FHIR_RESOURCE_TYPE_OBSERVATION { get { if (!_FHIR_RESOURCE_TYPE_OBSERVATIONReady) { _FHIR_RESOURCE_TYPE_OBSERVATIONContent = SGetField<int>(LocalBridgeClazz, "FHIR_RESOURCE_TYPE_OBSERVATION"); _FHIR_RESOURCE_TYPE_OBSERVATIONReady = true; } return _FHIR_RESOURCE_TYPE_OBSERVATIONContent; } }
        private static int _FHIR_RESOURCE_TYPE_OBSERVATIONContent = default;
        private static bool _FHIR_RESOURCE_TYPE_OBSERVATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#FHIR_RESOURCE_TYPE_ORGANIZATION"/>
        /// </summary>
        public static int FHIR_RESOURCE_TYPE_ORGANIZATION { get { if (!_FHIR_RESOURCE_TYPE_ORGANIZATIONReady) { _FHIR_RESOURCE_TYPE_ORGANIZATIONContent = SGetField<int>(LocalBridgeClazz, "FHIR_RESOURCE_TYPE_ORGANIZATION"); _FHIR_RESOURCE_TYPE_ORGANIZATIONReady = true; } return _FHIR_RESOURCE_TYPE_ORGANIZATIONContent; } }
        private static int _FHIR_RESOURCE_TYPE_ORGANIZATIONContent = default;
        private static bool _FHIR_RESOURCE_TYPE_ORGANIZATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#FHIR_RESOURCE_TYPE_PATIENT"/>
        /// </summary>
        public static int FHIR_RESOURCE_TYPE_PATIENT { get { if (!_FHIR_RESOURCE_TYPE_PATIENTReady) { _FHIR_RESOURCE_TYPE_PATIENTContent = SGetField<int>(LocalBridgeClazz, "FHIR_RESOURCE_TYPE_PATIENT"); _FHIR_RESOURCE_TYPE_PATIENTReady = true; } return _FHIR_RESOURCE_TYPE_PATIENTContent; } }
        private static int _FHIR_RESOURCE_TYPE_PATIENTContent = default;
        private static bool _FHIR_RESOURCE_TYPE_PATIENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#FHIR_RESOURCE_TYPE_PRACTITIONER"/>
        /// </summary>
        public static int FHIR_RESOURCE_TYPE_PRACTITIONER { get { if (!_FHIR_RESOURCE_TYPE_PRACTITIONERReady) { _FHIR_RESOURCE_TYPE_PRACTITIONERContent = SGetField<int>(LocalBridgeClazz, "FHIR_RESOURCE_TYPE_PRACTITIONER"); _FHIR_RESOURCE_TYPE_PRACTITIONERReady = true; } return _FHIR_RESOURCE_TYPE_PRACTITIONERContent; } }
        private static int _FHIR_RESOURCE_TYPE_PRACTITIONERContent = default;
        private static bool _FHIR_RESOURCE_TYPE_PRACTITIONERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#FHIR_RESOURCE_TYPE_PRACTITIONER_ROLE"/>
        /// </summary>
        public static int FHIR_RESOURCE_TYPE_PRACTITIONER_ROLE { get { if (!_FHIR_RESOURCE_TYPE_PRACTITIONER_ROLEReady) { _FHIR_RESOURCE_TYPE_PRACTITIONER_ROLEContent = SGetField<int>(LocalBridgeClazz, "FHIR_RESOURCE_TYPE_PRACTITIONER_ROLE"); _FHIR_RESOURCE_TYPE_PRACTITIONER_ROLEReady = true; } return _FHIR_RESOURCE_TYPE_PRACTITIONER_ROLEContent; } }
        private static int _FHIR_RESOURCE_TYPE_PRACTITIONER_ROLEContent = default;
        private static bool _FHIR_RESOURCE_TYPE_PRACTITIONER_ROLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#FHIR_RESOURCE_TYPE_PROCEDURE"/>
        /// </summary>
        public static int FHIR_RESOURCE_TYPE_PROCEDURE { get { if (!_FHIR_RESOURCE_TYPE_PROCEDUREReady) { _FHIR_RESOURCE_TYPE_PROCEDUREContent = SGetField<int>(LocalBridgeClazz, "FHIR_RESOURCE_TYPE_PROCEDURE"); _FHIR_RESOURCE_TYPE_PROCEDUREReady = true; } return _FHIR_RESOURCE_TYPE_PROCEDUREContent; } }
        private static int _FHIR_RESOURCE_TYPE_PROCEDUREContent = default;
        private static bool _FHIR_RESOURCE_TYPE_PROCEDUREReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#getType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetType()
        {
            return IExecuteWithSignature<int>("getType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#getData()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetData()
        {
            return IExecuteWithSignature<Java.Lang.String>("getData", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#getId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getId", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.Builder.html#%3Cinit%3E(android.health.connect.datatypes.FhirResource)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Health.Connect.Datatypes.FhirResource"/></param>
            public Builder(Android.Health.Connect.Datatypes.FhirResource arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.Builder.html#%3Cinit%3E(android.health.connect.datatypes.FhirResource.Builder)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Health.Connect.Datatypes.FhirResource.Builder"/></param>
            public Builder(Android.Health.Connect.Datatypes.FhirResource.Builder arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.Builder.html#%3Cinit%3E(int,java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            public Builder(int arg0, Java.Lang.String arg1, Java.Lang.String arg2)
                : base(arg0, arg1, arg2)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Health.Connect.Datatypes.FhirResource"/></returns>
            public Android.Health.Connect.Datatypes.FhirResource Build()
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.FhirResource>("build", "()Landroid/health/connect/datatypes/FhirResource;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.Builder.html#setData(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Health.Connect.Datatypes.FhirResource.Builder"/></returns>
            public Android.Health.Connect.Datatypes.FhirResource.Builder SetData(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.FhirResource.Builder>("setData", "(Ljava/lang/String;)Landroid/health/connect/datatypes/FhirResource$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.Builder.html#setId(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Health.Connect.Datatypes.FhirResource.Builder"/></returns>
            public Android.Health.Connect.Datatypes.FhirResource.Builder SetId(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.FhirResource.Builder>("setId", "(Ljava/lang/String;)Landroid/health/connect/datatypes/FhirResource$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/health/connect/datatypes/FhirResource.Builder.html#setType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Health.Connect.Datatypes.FhirResource.Builder"/></returns>
            public Android.Health.Connect.Datatypes.FhirResource.Builder SetType(int arg0)
            {
                return IExecuteWithSignature<Android.Health.Connect.Datatypes.FhirResource.Builder>("setType", "(I)Landroid/health/connect/datatypes/FhirResource$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
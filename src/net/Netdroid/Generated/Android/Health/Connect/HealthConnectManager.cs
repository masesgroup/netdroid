/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Health.Connect
{
    #region HealthConnectManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/health/connect/HealthConnectManager.html"/>
    /// </summary>
    public partial class HealthConnectManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<HealthConnectManager>
    {
        const string _bridgeClassName = "android.health.connect.HealthConnectManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public HealthConnectManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public HealthConnectManager(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region HealthConnectManager implementation
    public partial class HealthConnectManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/HealthConnectManager.html#ACTION_MANAGE_HEALTH_PERMISSIONS"/>
        /// </summary>
        public static Java.Lang.String ACTION_MANAGE_HEALTH_PERMISSIONS { get { if (!_ACTION_MANAGE_HEALTH_PERMISSIONSReady) { _ACTION_MANAGE_HEALTH_PERMISSIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MANAGE_HEALTH_PERMISSIONS"); _ACTION_MANAGE_HEALTH_PERMISSIONSReady = true; } return _ACTION_MANAGE_HEALTH_PERMISSIONSContent; } }
        private static Java.Lang.String _ACTION_MANAGE_HEALTH_PERMISSIONSContent = default;
        private static bool _ACTION_MANAGE_HEALTH_PERMISSIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/HealthConnectManager.html#ACTION_REQUEST_EXERCISE_ROUTE"/>
        /// </summary>
        public static Java.Lang.String ACTION_REQUEST_EXERCISE_ROUTE { get { if (!_ACTION_REQUEST_EXERCISE_ROUTEReady) { _ACTION_REQUEST_EXERCISE_ROUTEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_REQUEST_EXERCISE_ROUTE"); _ACTION_REQUEST_EXERCISE_ROUTEReady = true; } return _ACTION_REQUEST_EXERCISE_ROUTEContent; } }
        private static Java.Lang.String _ACTION_REQUEST_EXERCISE_ROUTEContent = default;
        private static bool _ACTION_REQUEST_EXERCISE_ROUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/HealthConnectManager.html#CATEGORY_HEALTH_PERMISSIONS"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_HEALTH_PERMISSIONS { get { if (!_CATEGORY_HEALTH_PERMISSIONSReady) { _CATEGORY_HEALTH_PERMISSIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_HEALTH_PERMISSIONS"); _CATEGORY_HEALTH_PERMISSIONSReady = true; } return _CATEGORY_HEALTH_PERMISSIONSContent; } }
        private static Java.Lang.String _CATEGORY_HEALTH_PERMISSIONSContent = default;
        private static bool _CATEGORY_HEALTH_PERMISSIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/HealthConnectManager.html#EXTRA_EXERCISE_ROUTE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_EXERCISE_ROUTE { get { if (!_EXTRA_EXERCISE_ROUTEReady) { _EXTRA_EXERCISE_ROUTEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_EXERCISE_ROUTE"); _EXTRA_EXERCISE_ROUTEReady = true; } return _EXTRA_EXERCISE_ROUTEContent; } }
        private static Java.Lang.String _EXTRA_EXERCISE_ROUTEContent = default;
        private static bool _EXTRA_EXERCISE_ROUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/HealthConnectManager.html#EXTRA_SESSION_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SESSION_ID { get { if (!_EXTRA_SESSION_IDReady) { _EXTRA_SESSION_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SESSION_ID"); _EXTRA_SESSION_IDReady = true; } return _EXTRA_SESSION_IDContent; } }
        private static Java.Lang.String _EXTRA_SESSION_IDContent = default;
        private static bool _EXTRA_SESSION_IDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/HealthConnectManager.html#readRecords(android.health.connect.ReadRecordsRequest,java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Health.Connect.ReadRecordsRequest"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Os.OutcomeReceiver"/></param>
        /// <typeparam name="T"><see cref="Android.Health.Connect.Datatypes.Record"/></typeparam>
        public void ReadRecords<T>(Android.Health.Connect.ReadRecordsRequest<T> arg0, Java.Util.Concurrent.Executor arg1, Android.Os.OutcomeReceiver<Android.Health.Connect.ReadRecordsResponse<T>, Android.Health.Connect.HealthConnectException> arg2) where T : Android.Health.Connect.Datatypes.Record
        {
            IExecuteWithSignature("readRecords", "(Landroid/health/connect/ReadRecordsRequest;Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/HealthConnectManager.html#aggregate(android.health.connect.AggregateRecordsRequest,java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Health.Connect.AggregateRecordsRequest"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Os.OutcomeReceiver"/></param>
        /// <typeparam name="T"></typeparam>
        public void Aggregate<T>(Android.Health.Connect.AggregateRecordsRequest<T> arg0, Java.Util.Concurrent.Executor arg1, Android.Os.OutcomeReceiver<Android.Health.Connect.AggregateRecordsResponse<T>, Android.Health.Connect.HealthConnectException> arg2)
        {
            IExecuteWithSignature("aggregate", "(Landroid/health/connect/AggregateRecordsRequest;Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/HealthConnectManager.html#aggregateGroupByDuration(android.health.connect.AggregateRecordsRequest,java.time.Duration,java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Health.Connect.AggregateRecordsRequest"/></param>
        /// <param name="arg1"><see cref="Java.Time.Duration"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Android.Os.OutcomeReceiver"/></param>
        /// <typeparam name="T"></typeparam>
        public void AggregateGroupByDuration<T>(Android.Health.Connect.AggregateRecordsRequest<T> arg0, Java.Time.Duration arg1, Java.Util.Concurrent.Executor arg2, Android.Os.OutcomeReceiver<Java.Util.List<Android.Health.Connect.AggregateRecordsGroupedByDurationResponse<T>>, Android.Health.Connect.HealthConnectException> arg3)
        {
            IExecuteWithSignature("aggregateGroupByDuration", "(Landroid/health/connect/AggregateRecordsRequest;Ljava/time/Duration;Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/HealthConnectManager.html#aggregateGroupByPeriod(android.health.connect.AggregateRecordsRequest,java.time.Period,java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Health.Connect.AggregateRecordsRequest"/></param>
        /// <param name="arg1"><see cref="Java.Time.Period"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Android.Os.OutcomeReceiver"/></param>
        /// <typeparam name="T"></typeparam>
        public void AggregateGroupByPeriod<T>(Android.Health.Connect.AggregateRecordsRequest<T> arg0, Java.Time.Period arg1, Java.Util.Concurrent.Executor arg2, Android.Os.OutcomeReceiver<Java.Util.List<Android.Health.Connect.AggregateRecordsGroupedByPeriodResponse<T>>, Android.Health.Connect.HealthConnectException> arg3)
        {
            IExecuteWithSignature("aggregateGroupByPeriod", "(Landroid/health/connect/AggregateRecordsRequest;Ljava/time/Period;Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/HealthConnectManager.html#deleteRecords(java.lang.Class,android.health.connect.TimeRangeFilter,java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Class"/></param>
        /// <param name="arg1"><see cref="Android.Health.Connect.TimeRangeFilter"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void DeleteRecords(Java.Lang.Class arg0, Android.Health.Connect.TimeRangeFilter arg1, Java.Util.Concurrent.Executor arg2, Android.Os.OutcomeReceiver<Java.Lang.Void, Android.Health.Connect.HealthConnectException> arg3)
        {
            IExecuteWithSignature("deleteRecords", "(Ljava/lang/Class;Landroid/health/connect/TimeRangeFilter;Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/HealthConnectManager.html#deleteRecords(java.util.List,java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void DeleteRecords(Java.Util.List<Android.Health.Connect.RecordIdFilter> arg0, Java.Util.Concurrent.Executor arg1, Android.Os.OutcomeReceiver<Java.Lang.Void, Android.Health.Connect.HealthConnectException> arg2)
        {
            IExecuteWithSignature("deleteRecords", "(Ljava/util/List;Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/HealthConnectManager.html#getChangeLogs(android.health.connect.changelog.ChangeLogsRequest,java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Health.Connect.Changelog.ChangeLogsRequest"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void GetChangeLogs(Android.Health.Connect.Changelog.ChangeLogsRequest arg0, Java.Util.Concurrent.Executor arg1, Android.Os.OutcomeReceiver<Android.Health.Connect.Changelog.ChangeLogsResponse, Android.Health.Connect.HealthConnectException> arg2)
        {
            IExecuteWithSignature("getChangeLogs", "(Landroid/health/connect/changelog/ChangeLogsRequest;Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/HealthConnectManager.html#getChangeLogToken(android.health.connect.changelog.ChangeLogTokenRequest,java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Health.Connect.Changelog.ChangeLogTokenRequest"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void GetChangeLogToken(Android.Health.Connect.Changelog.ChangeLogTokenRequest arg0, Java.Util.Concurrent.Executor arg1, Android.Os.OutcomeReceiver<Android.Health.Connect.Changelog.ChangeLogTokenResponse, Android.Health.Connect.HealthConnectException> arg2)
        {
            IExecuteWithSignature("getChangeLogToken", "(Landroid/health/connect/changelog/ChangeLogTokenRequest;Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/HealthConnectManager.html#insertRecords(java.util.List,java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void InsertRecords(Java.Util.List<Android.Health.Connect.Datatypes.Record> arg0, Java.Util.Concurrent.Executor arg1, Android.Os.OutcomeReceiver<Android.Health.Connect.InsertRecordsResponse, Android.Health.Connect.HealthConnectException> arg2)
        {
            IExecuteWithSignature("insertRecords", "(Ljava/util/List;Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/health/connect/HealthConnectManager.html#updateRecords(java.util.List,java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void UpdateRecords(Java.Util.List<Android.Health.Connect.Datatypes.Record> arg0, Java.Util.Concurrent.Executor arg1, Android.Os.OutcomeReceiver<Java.Lang.Void, Android.Health.Connect.HealthConnectException> arg2)
        {
            IExecuteWithSignature("updateRecords", "(Ljava/util/List;Ljava/util/concurrent/Executor;Landroid/os/OutcomeReceiver;)V", arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Ranging
{
    #region RangingCapabilities declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/ranging/RangingCapabilities.html"/>
    /// </summary>
    public partial class RangingCapabilities : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.ranging.RangingCapabilities";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public RangingCapabilities() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public RangingCapabilities(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public RangingCapabilities(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region RangingCapabilities implementation
    public partial class RangingCapabilities
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingCapabilities.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingCapabilities.html#DISABLED_REGULATORY"/>
        /// </summary>
        public static int DISABLED_REGULATORY { get { if (!_DISABLED_REGULATORYReady) { _DISABLED_REGULATORYContent = SGetField<int>(LocalBridgeClazz, "DISABLED_REGULATORY"); _DISABLED_REGULATORYReady = true; } return _DISABLED_REGULATORYContent; } }
        private static int _DISABLED_REGULATORYContent = default;
        private static bool _DISABLED_REGULATORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingCapabilities.html#DISABLED_USER"/>
        /// </summary>
        public static int DISABLED_USER { get { if (!_DISABLED_USERReady) { _DISABLED_USERContent = SGetField<int>(LocalBridgeClazz, "DISABLED_USER"); _DISABLED_USERReady = true; } return _DISABLED_USERContent; } }
        private static int _DISABLED_USERContent = default;
        private static bool _DISABLED_USERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingCapabilities.html#DISABLED_USER_RESTRICTIONS"/>
        /// </summary>
        public static int DISABLED_USER_RESTRICTIONS { get { if (!_DISABLED_USER_RESTRICTIONSReady) { _DISABLED_USER_RESTRICTIONSContent = SGetField<int>(LocalBridgeClazz, "DISABLED_USER_RESTRICTIONS"); _DISABLED_USER_RESTRICTIONSReady = true; } return _DISABLED_USER_RESTRICTIONSContent; } }
        private static int _DISABLED_USER_RESTRICTIONSContent = default;
        private static bool _DISABLED_USER_RESTRICTIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingCapabilities.html#ENABLED"/>
        /// </summary>
        public static int ENABLED { get { if (!_ENABLEDReady) { _ENABLEDContent = SGetField<int>(LocalBridgeClazz, "ENABLED"); _ENABLEDReady = true; } return _ENABLEDContent; } }
        private static int _ENABLEDContent = default;
        private static bool _ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingCapabilities.html#NOT_SUPPORTED"/>
        /// </summary>
        public static int NOT_SUPPORTED { get { if (!_NOT_SUPPORTEDReady) { _NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "NOT_SUPPORTED"); _NOT_SUPPORTEDReady = true; } return _NOT_SUPPORTEDContent; } }
        private static int _NOT_SUPPORTEDContent = default;
        private static bool _NOT_SUPPORTEDReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingCapabilities.html#getCsCapabilities()"/>
        /// </summary>
        /// <returns><see cref="Android.Ranging.Ble.Cs.BleCsRangingCapabilities"/></returns>
        public Android.Ranging.Ble.Cs.BleCsRangingCapabilities GetCsCapabilities()
        {
            return IExecuteWithSignature<Android.Ranging.Ble.Cs.BleCsRangingCapabilities>("getCsCapabilities", "()Landroid/ranging/ble/cs/BleCsRangingCapabilities;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingCapabilities.html#getUwbCapabilities()"/>
        /// </summary>
        /// <returns><see cref="Android.Ranging.Uwb.UwbRangingCapabilities"/></returns>
        public Android.Ranging.Uwb.UwbRangingCapabilities GetUwbCapabilities()
        {
            return IExecuteWithSignature<Android.Ranging.Uwb.UwbRangingCapabilities>("getUwbCapabilities", "()Landroid/ranging/uwb/UwbRangingCapabilities;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingCapabilities.html#getRttRangingCapabilities()"/>
        /// </summary>
        /// <returns><see cref="Android.Ranging.Wifi.Rtt.RttRangingCapabilities"/></returns>
        public Android.Ranging.Wifi.Rtt.RttRangingCapabilities GetRttRangingCapabilities()
        {
            return IExecuteWithSignature<Android.Ranging.Wifi.Rtt.RttRangingCapabilities>("getRttRangingCapabilities", "()Landroid/ranging/wifi/rtt/RttRangingCapabilities;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingCapabilities.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingCapabilities.html#getTechnologyAvailability()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<Java.Lang.Integer, Java.Lang.Integer> GetTechnologyAvailability()
        {
            return IExecuteWithSignature<Java.Util.Map<Java.Lang.Integer, Java.Lang.Integer>>("getTechnologyAvailability", "()Ljava/util/Map;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingCapabilities.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
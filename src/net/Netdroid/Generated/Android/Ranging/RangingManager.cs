/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Ranging
{
    #region RangingManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/ranging/RangingManager.html"/>
    /// </summary>
    public partial class RangingManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RangingManager>
    {
        const string _bridgeClassName = "android.ranging.RangingManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public RangingManager() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public RangingManager(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public RangingManager(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region RangingCapabilitiesCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingManager.RangingCapabilitiesCallback.html"/>
        /// </summary>
        public partial class RangingCapabilitiesCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RangingCapabilitiesCallback>
        {
            const string _bridgeClassName = "android.ranging.RangingManager$RangingCapabilitiesCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("RangingCapabilitiesCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public RangingCapabilitiesCallback() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public RangingCapabilitiesCallback(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("RangingCapabilitiesCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public RangingCapabilitiesCallback(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => true;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => true;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region RangingManager implementation
    public partial class RangingManager
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingManager.html#BLE_CS"/>
        /// </summary>
        public static int BLE_CS { get { if (!_BLE_CSReady) { _BLE_CSContent = SGetField<int>(LocalBridgeClazz, "BLE_CS"); _BLE_CSReady = true; } return _BLE_CSContent; } }
        private static int _BLE_CSContent = default;
        private static bool _BLE_CSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingManager.html#BLE_RSSI"/>
        /// </summary>
        public static int BLE_RSSI { get { if (!_BLE_RSSIReady) { _BLE_RSSIContent = SGetField<int>(LocalBridgeClazz, "BLE_RSSI"); _BLE_RSSIReady = true; } return _BLE_RSSIContent; } }
        private static int _BLE_RSSIContent = default;
        private static bool _BLE_RSSIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingManager.html#UWB"/>
        /// </summary>
        public static int UWB { get { if (!_UWBReady) { _UWBContent = SGetField<int>(LocalBridgeClazz, "UWB"); _UWBReady = true; } return _UWBContent; } }
        private static int _UWBContent = default;
        private static bool _UWBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingManager.html#WIFI_NAN_RTT"/>
        /// </summary>
        public static int WIFI_NAN_RTT { get { if (!_WIFI_NAN_RTTReady) { _WIFI_NAN_RTTContent = SGetField<int>(LocalBridgeClazz, "WIFI_NAN_RTT"); _WIFI_NAN_RTTReady = true; } return _WIFI_NAN_RTTContent; } }
        private static int _WIFI_NAN_RTTContent = default;
        private static bool _WIFI_NAN_RTTReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingManager.html#createRangingSession(java.util.concurrent.Executor,android.ranging.RangingSession.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Ranging.RangingSession.Callback"/></param>
        /// <returns><see cref="Android.Ranging.RangingSession"/></returns>
        public Android.Ranging.RangingSession CreateRangingSession(Java.Util.Concurrent.Executor arg0, Android.Ranging.RangingSession.Callback arg1)
        {
            return IExecuteWithSignature<Android.Ranging.RangingSession>("createRangingSession", "(Ljava/util/concurrent/Executor;Landroid/ranging/RangingSession$Callback;)Landroid/ranging/RangingSession;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingManager.html#registerCapabilitiesCallback(java.util.concurrent.Executor,android.ranging.RangingManager.RangingCapabilitiesCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Ranging.RangingManager.RangingCapabilitiesCallback"/></param>
        public void RegisterCapabilitiesCallback(Java.Util.Concurrent.Executor arg0, Android.Ranging.RangingManager.RangingCapabilitiesCallback arg1)
        {
            IExecuteWithSignature("registerCapabilitiesCallback", "(Ljava/util/concurrent/Executor;Landroid/ranging/RangingManager$RangingCapabilitiesCallback;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingManager.html#unregisterCapabilitiesCallback(android.ranging.RangingManager.RangingCapabilitiesCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Ranging.RangingManager.RangingCapabilitiesCallback"/></param>
        public void UnregisterCapabilitiesCallback(Android.Ranging.RangingManager.RangingCapabilitiesCallback arg0)
        {
            IExecuteWithSignature("unregisterCapabilitiesCallback", "(Landroid/ranging/RangingManager$RangingCapabilitiesCallback;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region RangingCapabilitiesCallback implementation
        public partial class RangingCapabilitiesCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/RangingManager.RangingCapabilitiesCallback.html#onRangingCapabilities(android.ranging.RangingCapabilities)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Ranging.RangingCapabilities"/></param>
            public void OnRangingCapabilities(Android.Ranging.RangingCapabilities arg0)
            {
                IExecuteWithSignature("onRangingCapabilities", "(Landroid/ranging/RangingCapabilities;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
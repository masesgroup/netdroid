/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Ranging
{
    #region RangingSession declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.html"/>
    /// </summary>
    public partial class RangingSession : Java.Lang.AutoCloseable
    {
        const string _bridgeClassName = "android.ranging.RangingSession";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public RangingSession() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public RangingSession(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public RangingSession(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => true;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Callback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.Callback.html"/>
        /// </summary>
        public partial class Callback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Callback>
        {
            const string _bridgeClassName = "android.ranging.RangingSession$Callback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("Callback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Callback() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Callback(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("Callback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Callback(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => true;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => true;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region RangingSession implementation
    public partial class RangingSession
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.html#start(android.ranging.RangingPreference)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Ranging.RangingPreference"/></param>
        /// <returns><see cref="Android.Os.CancellationSignal"/></returns>
        public Android.Os.CancellationSignal Start(Android.Ranging.RangingPreference arg0)
        {
            return IExecuteWithSignature<Android.Os.CancellationSignal>("start", "(Landroid/ranging/RangingPreference;)Landroid/os/CancellationSignal;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.html#addDeviceToRangingSession(android.ranging.RangingConfig)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Ranging.RangingConfig"/></param>
        public void AddDeviceToRangingSession(Android.Ranging.RangingConfig arg0)
        {
            IExecuteWithSignature("addDeviceToRangingSession", "(Landroid/ranging/RangingConfig;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.html#reconfigureRangingInterval(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void ReconfigureRangingInterval(int arg0)
        {
            IExecuteWithSignature("reconfigureRangingInterval", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.html#removeDeviceFromRangingSession(android.ranging.RangingDevice)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Ranging.RangingDevice"/></param>
        public void RemoveDeviceFromRangingSession(Android.Ranging.RangingDevice arg0)
        {
            IExecuteWithSignature("removeDeviceFromRangingSession", "(Landroid/ranging/RangingDevice;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.html#stop()"/>
        /// </summary>
        public void Stop()
        {
            IExecuteWithSignature("stop", "()V");
        }
    
        #endregion
    
        #region Nested classes
        #region Callback implementation
        public partial class Callback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.Callback.html#REASON_LOCAL_REQUEST"/>
            /// </summary>
            public static int REASON_LOCAL_REQUEST { get { if (!_REASON_LOCAL_REQUESTReady) { _REASON_LOCAL_REQUESTContent = SGetField<int>(LocalBridgeClazz, "REASON_LOCAL_REQUEST"); _REASON_LOCAL_REQUESTReady = true; } return _REASON_LOCAL_REQUESTContent; } }
            private static int _REASON_LOCAL_REQUESTContent = default;
            private static bool _REASON_LOCAL_REQUESTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.Callback.html#REASON_NO_PEERS_FOUND"/>
            /// </summary>
            public static int REASON_NO_PEERS_FOUND { get { if (!_REASON_NO_PEERS_FOUNDReady) { _REASON_NO_PEERS_FOUNDContent = SGetField<int>(LocalBridgeClazz, "REASON_NO_PEERS_FOUND"); _REASON_NO_PEERS_FOUNDReady = true; } return _REASON_NO_PEERS_FOUNDContent; } }
            private static int _REASON_NO_PEERS_FOUNDContent = default;
            private static bool _REASON_NO_PEERS_FOUNDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.Callback.html#REASON_REMOTE_REQUEST"/>
            /// </summary>
            public static int REASON_REMOTE_REQUEST { get { if (!_REASON_REMOTE_REQUESTReady) { _REASON_REMOTE_REQUESTContent = SGetField<int>(LocalBridgeClazz, "REASON_REMOTE_REQUEST"); _REASON_REMOTE_REQUESTReady = true; } return _REASON_REMOTE_REQUESTContent; } }
            private static int _REASON_REMOTE_REQUESTContent = default;
            private static bool _REASON_REMOTE_REQUESTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.Callback.html#REASON_SYSTEM_POLICY"/>
            /// </summary>
            public static int REASON_SYSTEM_POLICY { get { if (!_REASON_SYSTEM_POLICYReady) { _REASON_SYSTEM_POLICYContent = SGetField<int>(LocalBridgeClazz, "REASON_SYSTEM_POLICY"); _REASON_SYSTEM_POLICYReady = true; } return _REASON_SYSTEM_POLICYContent; } }
            private static int _REASON_SYSTEM_POLICYContent = default;
            private static bool _REASON_SYSTEM_POLICYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.Callback.html#REASON_UNKNOWN"/>
            /// </summary>
            public static int REASON_UNKNOWN { get { if (!_REASON_UNKNOWNReady) { _REASON_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "REASON_UNKNOWN"); _REASON_UNKNOWNReady = true; } return _REASON_UNKNOWNContent; } }
            private static int _REASON_UNKNOWNContent = default;
            private static bool _REASON_UNKNOWNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.Callback.html#REASON_UNSUPPORTED"/>
            /// </summary>
            public static int REASON_UNSUPPORTED { get { if (!_REASON_UNSUPPORTEDReady) { _REASON_UNSUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "REASON_UNSUPPORTED"); _REASON_UNSUPPORTEDReady = true; } return _REASON_UNSUPPORTEDContent; } }
            private static int _REASON_UNSUPPORTEDContent = default;
            private static bool _REASON_UNSUPPORTEDReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.Callback.html#onClosed(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnClosed(int arg0)
            {
                IExecuteWithSignature("onClosed", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.Callback.html#onOpened()"/>
            /// </summary>
            public void OnOpened()
            {
                IExecuteWithSignature("onOpened", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.Callback.html#onOpenFailed(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnOpenFailed(int arg0)
            {
                IExecuteWithSignature("onOpenFailed", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.Callback.html#onResults(android.ranging.RangingDevice,android.ranging.RangingData)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Ranging.RangingDevice"/></param>
            /// <param name="arg1"><see cref="Android.Ranging.RangingData"/></param>
            public void OnResults(Android.Ranging.RangingDevice arg0, Android.Ranging.RangingData arg1)
            {
                IExecuteWithSignature("onResults", "(Landroid/ranging/RangingDevice;Landroid/ranging/RangingData;)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.Callback.html#onStarted(android.ranging.RangingDevice,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Ranging.RangingDevice"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnStarted(Android.Ranging.RangingDevice arg0, int arg1)
            {
                IExecuteWithSignature("onStarted", "(Landroid/ranging/RangingDevice;I)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/RangingSession.Callback.html#onStopped(android.ranging.RangingDevice,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Ranging.RangingDevice"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnStopped(Android.Ranging.RangingDevice arg0, int arg1)
            {
                IExecuteWithSignature("onStopped", "(Landroid/ranging/RangingDevice;I)V", arg0, arg1);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Ranging.Oob
{
    #region TransportHandle declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/ranging/oob/TransportHandle.html"/>
    /// </summary>
    public partial class TransportHandle : Java.Lang.AutoCloseable
    {
        const string _bridgeClassName = "android.ranging.oob.TransportHandle";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("TransportHandle class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public TransportHandle() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public TransportHandle(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("TransportHandle class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public TransportHandle(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => true;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => true;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => true;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region ReceiveCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/oob/TransportHandle.ReceiveCallback.html"/>
        /// </summary>
        public partial class ReceiveCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ReceiveCallback>
        {
            const string _bridgeClassName = "android.ranging.oob.TransportHandle$ReceiveCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("ReceiveCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public ReceiveCallback() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public ReceiveCallback(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("ReceiveCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public ReceiveCallback(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => true;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => true;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region ITransportHandle
    /// <summary>
    /// .NET interface skeleton to be manually developed following <see href="https://developer.android.com/reference/android/ranging/oob/TransportHandle.html"/>
    /// </summary>
    public partial interface ITransportHandle : Java.Lang.IAutoCloseable
    {
        #region Instance methods
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion

    #region TransportHandle implementation
    public partial class TransportHandle : Android.Ranging.Oob.ITransportHandle
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/oob/TransportHandle.html#registerReceiveCallback(java.util.concurrent.Executor,android.ranging.oob.TransportHandle.ReceiveCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Ranging.Oob.TransportHandle.ReceiveCallback"/></param>
        public void RegisterReceiveCallback(Java.Util.Concurrent.Executor arg0, Android.Ranging.Oob.TransportHandle.ReceiveCallback arg1)
        {
            IExecuteWithSignature("registerReceiveCallback", "(Ljava/util/concurrent/Executor;Landroid/ranging/oob/TransportHandle$ReceiveCallback;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/ranging/oob/TransportHandle.html#sendData(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        public void SendData(byte[] arg0)
        {
            IExecuteWithSignature("sendData", "([B)V", new object[] { arg0 });
        }
    
        #endregion
    
        #region Nested classes
        #region ReceiveCallback implementation
        public partial class ReceiveCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/oob/TransportHandle.ReceiveCallback.html#onClose()"/>
            /// </summary>
            public void OnClose()
            {
                IExecuteWithSignature("onClose", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/oob/TransportHandle.ReceiveCallback.html#onDisconnect()"/>
            /// </summary>
            public void OnDisconnect()
            {
                IExecuteWithSignature("onDisconnect", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/oob/TransportHandle.ReceiveCallback.html#onReceiveData(byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            public void OnReceiveData(byte[] arg0)
            {
                IExecuteWithSignature("onReceiveData", "([B)V", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/oob/TransportHandle.ReceiveCallback.html#onReconnect()"/>
            /// </summary>
            public void OnReconnect()
            {
                IExecuteWithSignature("onReconnect", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/ranging/oob/TransportHandle.ReceiveCallback.html#onSendFailed()"/>
            /// </summary>
            public void OnSendFailed()
            {
                IExecuteWithSignature("onSendFailed", "()V");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
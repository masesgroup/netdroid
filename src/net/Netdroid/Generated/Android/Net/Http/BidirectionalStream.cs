/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Http
{
    #region BidirectionalStream declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html"/>
    /// </summary>
    public partial class BidirectionalStream : MASES.JCOBridge.C2JBridge.JVMBridgeBase<BidirectionalStream>
    {
        const string _bridgeClassName = "android.net.http.BidirectionalStream";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("BidirectionalStream class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public BidirectionalStream() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("BidirectionalStream class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public BidirectionalStream(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.net.http.BidirectionalStream$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("Builder class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("Builder class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Builder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Callback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Callback.html"/>
        /// </summary>
        public partial class Callback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Callback>
        {
            const string _bridgeClassName = "android.net.http.BidirectionalStream$Callback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("Callback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Callback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("Callback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Callback(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region BidirectionalStream implementation
    public partial class BidirectionalStream
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#STREAM_PRIORITY_HIGHEST"/>
        /// </summary>
        public static int STREAM_PRIORITY_HIGHEST { get { if (!_STREAM_PRIORITY_HIGHESTReady) { _STREAM_PRIORITY_HIGHESTContent = SGetField<int>(LocalBridgeClazz, "STREAM_PRIORITY_HIGHEST"); _STREAM_PRIORITY_HIGHESTReady = true; } return _STREAM_PRIORITY_HIGHESTContent; } }
        private static int _STREAM_PRIORITY_HIGHESTContent = default;
        private static bool _STREAM_PRIORITY_HIGHESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#STREAM_PRIORITY_IDLE"/>
        /// </summary>
        public static int STREAM_PRIORITY_IDLE { get { if (!_STREAM_PRIORITY_IDLEReady) { _STREAM_PRIORITY_IDLEContent = SGetField<int>(LocalBridgeClazz, "STREAM_PRIORITY_IDLE"); _STREAM_PRIORITY_IDLEReady = true; } return _STREAM_PRIORITY_IDLEContent; } }
        private static int _STREAM_PRIORITY_IDLEContent = default;
        private static bool _STREAM_PRIORITY_IDLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#STREAM_PRIORITY_LOW"/>
        /// </summary>
        public static int STREAM_PRIORITY_LOW { get { if (!_STREAM_PRIORITY_LOWReady) { _STREAM_PRIORITY_LOWContent = SGetField<int>(LocalBridgeClazz, "STREAM_PRIORITY_LOW"); _STREAM_PRIORITY_LOWReady = true; } return _STREAM_PRIORITY_LOWContent; } }
        private static int _STREAM_PRIORITY_LOWContent = default;
        private static bool _STREAM_PRIORITY_LOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#STREAM_PRIORITY_LOWEST"/>
        /// </summary>
        public static int STREAM_PRIORITY_LOWEST { get { if (!_STREAM_PRIORITY_LOWESTReady) { _STREAM_PRIORITY_LOWESTContent = SGetField<int>(LocalBridgeClazz, "STREAM_PRIORITY_LOWEST"); _STREAM_PRIORITY_LOWESTReady = true; } return _STREAM_PRIORITY_LOWESTContent; } }
        private static int _STREAM_PRIORITY_LOWESTContent = default;
        private static bool _STREAM_PRIORITY_LOWESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#STREAM_PRIORITY_MEDIUM"/>
        /// </summary>
        public static int STREAM_PRIORITY_MEDIUM { get { if (!_STREAM_PRIORITY_MEDIUMReady) { _STREAM_PRIORITY_MEDIUMContent = SGetField<int>(LocalBridgeClazz, "STREAM_PRIORITY_MEDIUM"); _STREAM_PRIORITY_MEDIUMReady = true; } return _STREAM_PRIORITY_MEDIUMContent; } }
        private static int _STREAM_PRIORITY_MEDIUMContent = default;
        private static bool _STREAM_PRIORITY_MEDIUMReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#getHeaders()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Http.HeaderBlock"/></returns>
        public Android.Net.Http.HeaderBlock GetHeaders()
        {
            return IExecuteWithSignature<Android.Net.Http.HeaderBlock>("getHeaders", "()Landroid/net/http/HeaderBlock;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#hasTrafficStatsTag()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasTrafficStatsTag()
        {
            return IExecuteWithSignature<bool>("hasTrafficStatsTag", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#hasTrafficStatsUid()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasTrafficStatsUid()
        {
            return IExecuteWithSignature<bool>("hasTrafficStatsUid", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#isDelayRequestHeadersUntilFirstFlushEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDelayRequestHeadersUntilFirstFlushEnabled()
        {
            return IExecuteWithSignature<bool>("isDelayRequestHeadersUntilFirstFlushEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#isDone()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDone()
        {
            return IExecuteWithSignature<bool>("isDone", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#getPriority()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPriority()
        {
            return IExecuteWithSignature<int>("getPriority", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#getTrafficStatsTag()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTrafficStatsTag()
        {
            return IExecuteWithSignature<int>("getTrafficStatsTag", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#getTrafficStatsUid()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTrafficStatsUid()
        {
            return IExecuteWithSignature<int>("getTrafficStatsUid", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#getHttpMethod()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetHttpMethod()
        {
            return IExecuteWithSignature<Java.Lang.String>("getHttpMethod", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#cancel()"/>
        /// </summary>
        public void Cancel()
        {
            IExecuteWithSignature("cancel", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#flush()"/>
        /// </summary>
        public void Flush()
        {
            IExecuteWithSignature("flush", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#read(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        public void Read(Java.Nio.ByteBuffer arg0)
        {
            IExecuteWithSignature("read", "(Ljava/nio/ByteBuffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#start()"/>
        /// </summary>
        public void Start()
        {
            IExecuteWithSignature("start", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.html#write(java.nio.ByteBuffer,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void Write(Java.Nio.ByteBuffer arg0, bool arg1)
        {
            IExecute("write", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Http.BidirectionalStream"/></returns>
            public Android.Net.Http.BidirectionalStream Build()
            {
                return IExecuteWithSignature<Android.Net.Http.BidirectionalStream>("build", "()Landroid/net/http/BidirectionalStream;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Builder.html#addHeader(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.Http.BidirectionalStream.Builder"/></returns>
            public Android.Net.Http.BidirectionalStream.Builder AddHeader(Java.Lang.String arg0, Java.Lang.String arg1)
            {
                return IExecute<Android.Net.Http.BidirectionalStream.Builder>("addHeader", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Builder.html#setDelayRequestHeadersUntilFirstFlushEnabled(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Net.Http.BidirectionalStream.Builder"/></returns>
            public Android.Net.Http.BidirectionalStream.Builder SetDelayRequestHeadersUntilFirstFlushEnabled(bool arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.BidirectionalStream.Builder>("setDelayRequestHeadersUntilFirstFlushEnabled", "(Z)Landroid/net/http/BidirectionalStream$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Builder.html#setHttpMethod(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.Http.BidirectionalStream.Builder"/></returns>
            public Android.Net.Http.BidirectionalStream.Builder SetHttpMethod(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.BidirectionalStream.Builder>("setHttpMethod", "(Ljava/lang/String;)Landroid/net/http/BidirectionalStream$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Builder.html#setPriority(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Http.BidirectionalStream.Builder"/></returns>
            public Android.Net.Http.BidirectionalStream.Builder SetPriority(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.BidirectionalStream.Builder>("setPriority", "(I)Landroid/net/http/BidirectionalStream$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Builder.html#setTrafficStatsTag(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Http.BidirectionalStream.Builder"/></returns>
            public Android.Net.Http.BidirectionalStream.Builder SetTrafficStatsTag(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.BidirectionalStream.Builder>("setTrafficStatsTag", "(I)Landroid/net/http/BidirectionalStream$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Builder.html#setTrafficStatsUid(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Http.BidirectionalStream.Builder"/></returns>
            public Android.Net.Http.BidirectionalStream.Builder SetTrafficStatsUid(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.BidirectionalStream.Builder>("setTrafficStatsUid", "(I)Landroid/net/http/BidirectionalStream$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Callback implementation
        public partial class Callback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Callback.html#onCanceled(android.net.http.BidirectionalStream,android.net.http.UrlResponseInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Http.BidirectionalStream"/></param>
            /// <param name="arg1"><see cref="Android.Net.Http.UrlResponseInfo"/></param>
            public void OnCanceled(Android.Net.Http.BidirectionalStream arg0, Android.Net.Http.UrlResponseInfo arg1)
            {
                IExecute("onCanceled", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Callback.html#onFailed(android.net.http.BidirectionalStream,android.net.http.UrlResponseInfo,android.net.http.HttpException)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Http.BidirectionalStream"/></param>
            /// <param name="arg1"><see cref="Android.Net.Http.UrlResponseInfo"/></param>
            /// <param name="arg2"><see cref="Android.Net.Http.HttpException"/></param>
            public void OnFailed(Android.Net.Http.BidirectionalStream arg0, Android.Net.Http.UrlResponseInfo arg1, MASES.JCOBridge.C2JBridge.JVMBridgeException arg2)
            {
                IExecute("onFailed", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Callback.html#onReadCompleted(android.net.http.BidirectionalStream,android.net.http.UrlResponseInfo,java.nio.ByteBuffer,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Http.BidirectionalStream"/></param>
            /// <param name="arg1"><see cref="Android.Net.Http.UrlResponseInfo"/></param>
            /// <param name="arg2"><see cref="Java.Nio.ByteBuffer"/></param>
            /// <param name="arg3"><see cref="bool"/></param>
            public void OnReadCompleted(Android.Net.Http.BidirectionalStream arg0, Android.Net.Http.UrlResponseInfo arg1, Java.Nio.ByteBuffer arg2, bool arg3)
            {
                IExecute("onReadCompleted", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Callback.html#onResponseHeadersReceived(android.net.http.BidirectionalStream,android.net.http.UrlResponseInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Http.BidirectionalStream"/></param>
            /// <param name="arg1"><see cref="Android.Net.Http.UrlResponseInfo"/></param>
            public void OnResponseHeadersReceived(Android.Net.Http.BidirectionalStream arg0, Android.Net.Http.UrlResponseInfo arg1)
            {
                IExecute("onResponseHeadersReceived", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Callback.html#onResponseTrailersReceived(android.net.http.BidirectionalStream,android.net.http.UrlResponseInfo,android.net.http.HeaderBlock)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Http.BidirectionalStream"/></param>
            /// <param name="arg1"><see cref="Android.Net.Http.UrlResponseInfo"/></param>
            /// <param name="arg2"><see cref="Android.Net.Http.HeaderBlock"/></param>
            public void OnResponseTrailersReceived(Android.Net.Http.BidirectionalStream arg0, Android.Net.Http.UrlResponseInfo arg1, Android.Net.Http.HeaderBlock arg2)
            {
                IExecute("onResponseTrailersReceived", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Callback.html#onStreamReady(android.net.http.BidirectionalStream)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Http.BidirectionalStream"/></param>
            public void OnStreamReady(Android.Net.Http.BidirectionalStream arg0)
            {
                IExecuteWithSignature("onStreamReady", "(Landroid/net/http/BidirectionalStream;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Callback.html#onSucceeded(android.net.http.BidirectionalStream,android.net.http.UrlResponseInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Http.BidirectionalStream"/></param>
            /// <param name="arg1"><see cref="Android.Net.Http.UrlResponseInfo"/></param>
            public void OnSucceeded(Android.Net.Http.BidirectionalStream arg0, Android.Net.Http.UrlResponseInfo arg1)
            {
                IExecute("onSucceeded", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/BidirectionalStream.Callback.html#onWriteCompleted(android.net.http.BidirectionalStream,android.net.http.UrlResponseInfo,java.nio.ByteBuffer,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Http.BidirectionalStream"/></param>
            /// <param name="arg1"><see cref="Android.Net.Http.UrlResponseInfo"/></param>
            /// <param name="arg2"><see cref="Java.Nio.ByteBuffer"/></param>
            /// <param name="arg3"><see cref="bool"/></param>
            public void OnWriteCompleted(Android.Net.Http.BidirectionalStream arg0, Android.Net.Http.UrlResponseInfo arg1, Java.Nio.ByteBuffer arg2, bool arg3)
            {
                IExecute("onWriteCompleted", arg0, arg1, arg2, arg3);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
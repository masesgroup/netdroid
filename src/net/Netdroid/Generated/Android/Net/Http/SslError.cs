/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Http
{
    #region SslError
    public partial class SslError
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/SslError.html#%3Cinit%3E(int,android.net.http.SslCertificate,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Net.Http.SslCertificate"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        public SslError(int arg0, Android.Net.Http.SslCertificate arg1, Java.Lang.String arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/SslError.html#%3Cinit%3E(int,android.net.http.SslCertificate)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Net.Http.SslCertificate"/></param>
        [global::System.Obsolete()]
        public SslError(int arg0, Android.Net.Http.SslCertificate arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/SslError.html#%3Cinit%3E(int,java.security.cert.X509Certificate,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Security.Cert.X509Certificate"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        public SslError(int arg0, Java.Security.Cert.X509Certificate arg1, Java.Lang.String arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/SslError.html#%3Cinit%3E(int,java.security.cert.X509Certificate)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Security.Cert.X509Certificate"/></param>
        [global::System.Obsolete()]
        public SslError(int arg0, Java.Security.Cert.X509Certificate arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/SslError.html#SSL_DATE_INVALID"/>
        /// </summary>
        public static int SSL_DATE_INVALID { get { if (!_SSL_DATE_INVALIDReady) { _SSL_DATE_INVALIDContent = SGetField<int>(LocalBridgeClazz, "SSL_DATE_INVALID"); _SSL_DATE_INVALIDReady = true; } return _SSL_DATE_INVALIDContent; } }
        private static int _SSL_DATE_INVALIDContent = default;
        private static bool _SSL_DATE_INVALIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/SslError.html#SSL_EXPIRED"/>
        /// </summary>
        public static int SSL_EXPIRED { get { if (!_SSL_EXPIREDReady) { _SSL_EXPIREDContent = SGetField<int>(LocalBridgeClazz, "SSL_EXPIRED"); _SSL_EXPIREDReady = true; } return _SSL_EXPIREDContent; } }
        private static int _SSL_EXPIREDContent = default;
        private static bool _SSL_EXPIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/SslError.html#SSL_IDMISMATCH"/>
        /// </summary>
        public static int SSL_IDMISMATCH { get { if (!_SSL_IDMISMATCHReady) { _SSL_IDMISMATCHContent = SGetField<int>(LocalBridgeClazz, "SSL_IDMISMATCH"); _SSL_IDMISMATCHReady = true; } return _SSL_IDMISMATCHContent; } }
        private static int _SSL_IDMISMATCHContent = default;
        private static bool _SSL_IDMISMATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/SslError.html#SSL_INVALID"/>
        /// </summary>
        public static int SSL_INVALID { get { if (!_SSL_INVALIDReady) { _SSL_INVALIDContent = SGetField<int>(LocalBridgeClazz, "SSL_INVALID"); _SSL_INVALIDReady = true; } return _SSL_INVALIDContent; } }
        private static int _SSL_INVALIDContent = default;
        private static bool _SSL_INVALIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/SslError.html#SSL_MAX_ERROR"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SSL_MAX_ERROR { get { if (!_SSL_MAX_ERRORReady) { _SSL_MAX_ERRORContent = SGetField<int>(LocalBridgeClazz, "SSL_MAX_ERROR"); _SSL_MAX_ERRORReady = true; } return _SSL_MAX_ERRORContent; } }
        private static int _SSL_MAX_ERRORContent = default;
        private static bool _SSL_MAX_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/SslError.html#SSL_NOTYETVALID"/>
        /// </summary>
        public static int SSL_NOTYETVALID { get { if (!_SSL_NOTYETVALIDReady) { _SSL_NOTYETVALIDContent = SGetField<int>(LocalBridgeClazz, "SSL_NOTYETVALID"); _SSL_NOTYETVALIDReady = true; } return _SSL_NOTYETVALIDContent; } }
        private static int _SSL_NOTYETVALIDContent = default;
        private static bool _SSL_NOTYETVALIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/SslError.html#SSL_UNTRUSTED"/>
        /// </summary>
        public static int SSL_UNTRUSTED { get { if (!_SSL_UNTRUSTEDReady) { _SSL_UNTRUSTEDContent = SGetField<int>(LocalBridgeClazz, "SSL_UNTRUSTED"); _SSL_UNTRUSTEDReady = true; } return _SSL_UNTRUSTEDContent; } }
        private static int _SSL_UNTRUSTEDContent = default;
        private static bool _SSL_UNTRUSTEDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/SslError.html#getCertificate()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Http.SslCertificate"/></returns>
        public Android.Net.Http.SslCertificate GetCertificate()
        {
            return IExecuteWithSignature<Android.Net.Http.SslCertificate>("getCertificate", "()Landroid/net/http/SslCertificate;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/SslError.html#addError(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool AddError(int arg0)
        {
            return IExecuteWithSignature<bool>("addError", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/SslError.html#hasError(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasError(int arg0)
        {
            return IExecuteWithSignature<bool>("hasError", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/SslError.html#getPrimaryError()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPrimaryError()
        {
            return IExecuteWithSignature<int>("getPrimaryError", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/SslError.html#getUrl()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetUrl()
        {
            return IExecuteWithSignature<Java.Lang.String>("getUrl", "()Ljava/lang/String;");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
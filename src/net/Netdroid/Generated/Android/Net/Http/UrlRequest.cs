/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Http
{
    #region UrlRequest
    public partial class UrlRequest
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#REQUEST_PRIORITY_HIGHEST"/>
        /// </summary>
        public static int REQUEST_PRIORITY_HIGHEST { get { if (!_REQUEST_PRIORITY_HIGHESTReady) { _REQUEST_PRIORITY_HIGHESTContent = SGetField<int>(LocalBridgeClazz, "REQUEST_PRIORITY_HIGHEST"); _REQUEST_PRIORITY_HIGHESTReady = true; } return _REQUEST_PRIORITY_HIGHESTContent; } }
        private static int _REQUEST_PRIORITY_HIGHESTContent = default;
        private static bool _REQUEST_PRIORITY_HIGHESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#REQUEST_PRIORITY_IDLE"/>
        /// </summary>
        public static int REQUEST_PRIORITY_IDLE { get { if (!_REQUEST_PRIORITY_IDLEReady) { _REQUEST_PRIORITY_IDLEContent = SGetField<int>(LocalBridgeClazz, "REQUEST_PRIORITY_IDLE"); _REQUEST_PRIORITY_IDLEReady = true; } return _REQUEST_PRIORITY_IDLEContent; } }
        private static int _REQUEST_PRIORITY_IDLEContent = default;
        private static bool _REQUEST_PRIORITY_IDLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#REQUEST_PRIORITY_LOW"/>
        /// </summary>
        public static int REQUEST_PRIORITY_LOW { get { if (!_REQUEST_PRIORITY_LOWReady) { _REQUEST_PRIORITY_LOWContent = SGetField<int>(LocalBridgeClazz, "REQUEST_PRIORITY_LOW"); _REQUEST_PRIORITY_LOWReady = true; } return _REQUEST_PRIORITY_LOWContent; } }
        private static int _REQUEST_PRIORITY_LOWContent = default;
        private static bool _REQUEST_PRIORITY_LOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#REQUEST_PRIORITY_LOWEST"/>
        /// </summary>
        public static int REQUEST_PRIORITY_LOWEST { get { if (!_REQUEST_PRIORITY_LOWESTReady) { _REQUEST_PRIORITY_LOWESTContent = SGetField<int>(LocalBridgeClazz, "REQUEST_PRIORITY_LOWEST"); _REQUEST_PRIORITY_LOWESTReady = true; } return _REQUEST_PRIORITY_LOWESTContent; } }
        private static int _REQUEST_PRIORITY_LOWESTContent = default;
        private static bool _REQUEST_PRIORITY_LOWESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#REQUEST_PRIORITY_MEDIUM"/>
        /// </summary>
        public static int REQUEST_PRIORITY_MEDIUM { get { if (!_REQUEST_PRIORITY_MEDIUMReady) { _REQUEST_PRIORITY_MEDIUMContent = SGetField<int>(LocalBridgeClazz, "REQUEST_PRIORITY_MEDIUM"); _REQUEST_PRIORITY_MEDIUMReady = true; } return _REQUEST_PRIORITY_MEDIUMContent; } }
        private static int _REQUEST_PRIORITY_MEDIUMContent = default;
        private static bool _REQUEST_PRIORITY_MEDIUMReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#getHeaders()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Http.HeaderBlock"/></returns>
        public Android.Net.Http.HeaderBlock GetHeaders()
        {
            return IExecuteWithSignature<Android.Net.Http.HeaderBlock>("getHeaders", "()Landroid/net/http/HeaderBlock;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#hasTrafficStatsTag()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasTrafficStatsTag()
        {
            return IExecuteWithSignature<bool>("hasTrafficStatsTag", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#hasTrafficStatsUid()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasTrafficStatsUid()
        {
            return IExecuteWithSignature<bool>("hasTrafficStatsUid", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#isCacheDisabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsCacheDisabled()
        {
            return IExecuteWithSignature<bool>("isCacheDisabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#isDirectExecutorAllowed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDirectExecutorAllowed()
        {
            return IExecuteWithSignature<bool>("isDirectExecutorAllowed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#isDone()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDone()
        {
            return IExecuteWithSignature<bool>("isDone", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#getPriority()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPriority()
        {
            return IExecuteWithSignature<int>("getPriority", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#getTrafficStatsTag()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTrafficStatsTag()
        {
            return IExecuteWithSignature<int>("getTrafficStatsTag", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#getTrafficStatsUid()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTrafficStatsUid()
        {
            return IExecuteWithSignature<int>("getTrafficStatsUid", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#getHttpMethod()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetHttpMethod()
        {
            return IExecuteWithSignature<Java.Lang.String>("getHttpMethod", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#cancel()"/>
        /// </summary>
        public void Cancel()
        {
            IExecuteWithSignature("cancel", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#followRedirect()"/>
        /// </summary>
        public void FollowRedirect()
        {
            IExecuteWithSignature("followRedirect", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#getStatus(android.net.http.UrlRequest.StatusListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Http.UrlRequest.StatusListener"/></param>
        public void GetStatus(Android.Net.Http.UrlRequest.StatusListener arg0)
        {
            IExecuteWithSignature("getStatus", "(Landroid/net/http/UrlRequest$StatusListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#read(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        public void Read(Java.Nio.ByteBuffer arg0)
        {
            IExecuteWithSignature("read", "(Ljava/nio/ByteBuffer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.html#start()"/>
        /// </summary>
        public void Start()
        {
            IExecuteWithSignature("start", "()V");
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Http.UrlRequest"/></returns>
            public Android.Net.Http.UrlRequest Build()
            {
                return IExecuteWithSignature<Android.Net.Http.UrlRequest>("build", "()Landroid/net/http/UrlRequest;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Builder.html#addHeader(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.Http.UrlRequest.Builder"/></returns>
            public Android.Net.Http.UrlRequest.Builder AddHeader(Java.Lang.String arg0, Java.Lang.String arg1)
            {
                return IExecute<Android.Net.Http.UrlRequest.Builder>("addHeader", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Builder.html#bindToNetwork(android.net.Network)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            /// <returns><see cref="Android.Net.Http.UrlRequest.Builder"/></returns>
            public Android.Net.Http.UrlRequest.Builder BindToNetwork(Android.Net.Network arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.UrlRequest.Builder>("bindToNetwork", "(Landroid/net/Network;)Landroid/net/http/UrlRequest$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Builder.html#setCacheDisabled(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Net.Http.UrlRequest.Builder"/></returns>
            public Android.Net.Http.UrlRequest.Builder SetCacheDisabled(bool arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.UrlRequest.Builder>("setCacheDisabled", "(Z)Landroid/net/http/UrlRequest$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Builder.html#setDirectExecutorAllowed(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Net.Http.UrlRequest.Builder"/></returns>
            public Android.Net.Http.UrlRequest.Builder SetDirectExecutorAllowed(bool arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.UrlRequest.Builder>("setDirectExecutorAllowed", "(Z)Landroid/net/http/UrlRequest$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Builder.html#setHttpMethod(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.Http.UrlRequest.Builder"/></returns>
            public Android.Net.Http.UrlRequest.Builder SetHttpMethod(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.UrlRequest.Builder>("setHttpMethod", "(Ljava/lang/String;)Landroid/net/http/UrlRequest$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Builder.html#setPriority(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Http.UrlRequest.Builder"/></returns>
            public Android.Net.Http.UrlRequest.Builder SetPriority(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.UrlRequest.Builder>("setPriority", "(I)Landroid/net/http/UrlRequest$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Builder.html#setTrafficStatsTag(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Http.UrlRequest.Builder"/></returns>
            public Android.Net.Http.UrlRequest.Builder SetTrafficStatsTag(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.UrlRequest.Builder>("setTrafficStatsTag", "(I)Landroid/net/http/UrlRequest$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Builder.html#setTrafficStatsUid(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Http.UrlRequest.Builder"/></returns>
            public Android.Net.Http.UrlRequest.Builder SetTrafficStatsUid(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.UrlRequest.Builder>("setTrafficStatsUid", "(I)Landroid/net/http/UrlRequest$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Builder.html#setUploadDataProvider(android.net.http.UploadDataProvider,java.util.concurrent.Executor)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Http.UploadDataProvider"/></param>
            /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
            /// <returns><see cref="Android.Net.Http.UrlRequest.Builder"/></returns>
            public Android.Net.Http.UrlRequest.Builder SetUploadDataProvider(Android.Net.Http.UploadDataProvider arg0, Java.Util.Concurrent.Executor arg1)
            {
                return IExecute<Android.Net.Http.UrlRequest.Builder>("setUploadDataProvider", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Callback
        public partial class Callback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Callback.html#onCanceled(android.net.http.UrlRequest,android.net.http.UrlResponseInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Http.UrlRequest"/></param>
            /// <param name="arg1"><see cref="Android.Net.Http.UrlResponseInfo"/></param>
            public void OnCanceled(Android.Net.Http.UrlRequest arg0, Android.Net.Http.UrlResponseInfo arg1)
            {
                IExecute("onCanceled", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Callback.html#onFailed(android.net.http.UrlRequest,android.net.http.UrlResponseInfo,android.net.http.HttpException)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Http.UrlRequest"/></param>
            /// <param name="arg1"><see cref="Android.Net.Http.UrlResponseInfo"/></param>
            /// <param name="arg2"><see cref="Android.Net.Http.HttpException"/></param>
            public void OnFailed(Android.Net.Http.UrlRequest arg0, Android.Net.Http.UrlResponseInfo arg1, MASES.JCOBridge.C2JBridge.JVMBridgeException arg2)
            {
                IExecute("onFailed", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Callback.html#onReadCompleted(android.net.http.UrlRequest,android.net.http.UrlResponseInfo,java.nio.ByteBuffer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Http.UrlRequest"/></param>
            /// <param name="arg1"><see cref="Android.Net.Http.UrlResponseInfo"/></param>
            /// <param name="arg2"><see cref="Java.Nio.ByteBuffer"/></param>
            /// <exception cref="Java.Lang.Exception"/>
            public void OnReadCompleted(Android.Net.Http.UrlRequest arg0, Android.Net.Http.UrlResponseInfo arg1, Java.Nio.ByteBuffer arg2)
            {
                IExecute("onReadCompleted", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Callback.html#onRedirectReceived(android.net.http.UrlRequest,android.net.http.UrlResponseInfo,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Http.UrlRequest"/></param>
            /// <param name="arg1"><see cref="Android.Net.Http.UrlResponseInfo"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            /// <exception cref="Java.Lang.Exception"/>
            public void OnRedirectReceived(Android.Net.Http.UrlRequest arg0, Android.Net.Http.UrlResponseInfo arg1, Java.Lang.String arg2)
            {
                IExecute("onRedirectReceived", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Callback.html#onResponseStarted(android.net.http.UrlRequest,android.net.http.UrlResponseInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Http.UrlRequest"/></param>
            /// <param name="arg1"><see cref="Android.Net.Http.UrlResponseInfo"/></param>
            /// <exception cref="Java.Lang.Exception"/>
            public void OnResponseStarted(Android.Net.Http.UrlRequest arg0, Android.Net.Http.UrlResponseInfo arg1)
            {
                IExecute("onResponseStarted", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Callback.html#onSucceeded(android.net.http.UrlRequest,android.net.http.UrlResponseInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Http.UrlRequest"/></param>
            /// <param name="arg1"><see cref="Android.Net.Http.UrlResponseInfo"/></param>
            public void OnSucceeded(Android.Net.Http.UrlRequest arg0, Android.Net.Http.UrlResponseInfo arg1)
            {
                IExecute("onSucceeded", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Status
        public partial class Status
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Status.html#CONNECTING"/>
            /// </summary>
            public static int CONNECTING { get { if (!_CONNECTINGReady) { _CONNECTINGContent = SGetField<int>(LocalBridgeClazz, "CONNECTING"); _CONNECTINGReady = true; } return _CONNECTINGContent; } }
            private static int _CONNECTINGContent = default;
            private static bool _CONNECTINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Status.html#DOWNLOADING_PAC_FILE"/>
            /// </summary>
            public static int DOWNLOADING_PAC_FILE { get { if (!_DOWNLOADING_PAC_FILEReady) { _DOWNLOADING_PAC_FILEContent = SGetField<int>(LocalBridgeClazz, "DOWNLOADING_PAC_FILE"); _DOWNLOADING_PAC_FILEReady = true; } return _DOWNLOADING_PAC_FILEContent; } }
            private static int _DOWNLOADING_PAC_FILEContent = default;
            private static bool _DOWNLOADING_PAC_FILEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Status.html#ESTABLISHING_PROXY_TUNNEL"/>
            /// </summary>
            public static int ESTABLISHING_PROXY_TUNNEL { get { if (!_ESTABLISHING_PROXY_TUNNELReady) { _ESTABLISHING_PROXY_TUNNELContent = SGetField<int>(LocalBridgeClazz, "ESTABLISHING_PROXY_TUNNEL"); _ESTABLISHING_PROXY_TUNNELReady = true; } return _ESTABLISHING_PROXY_TUNNELContent; } }
            private static int _ESTABLISHING_PROXY_TUNNELContent = default;
            private static bool _ESTABLISHING_PROXY_TUNNELReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Status.html#IDLE"/>
            /// </summary>
            public static int IDLE { get { if (!_IDLEReady) { _IDLEContent = SGetField<int>(LocalBridgeClazz, "IDLE"); _IDLEReady = true; } return _IDLEContent; } }
            private static int _IDLEContent = default;
            private static bool _IDLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Status.html#INVALID"/>
            /// </summary>
            public static int INVALID { get { if (!_INVALIDReady) { _INVALIDContent = SGetField<int>(LocalBridgeClazz, "INVALID"); _INVALIDReady = true; } return _INVALIDContent; } }
            private static int _INVALIDContent = default;
            private static bool _INVALIDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Status.html#READING_RESPONSE"/>
            /// </summary>
            public static int READING_RESPONSE { get { if (!_READING_RESPONSEReady) { _READING_RESPONSEContent = SGetField<int>(LocalBridgeClazz, "READING_RESPONSE"); _READING_RESPONSEReady = true; } return _READING_RESPONSEContent; } }
            private static int _READING_RESPONSEContent = default;
            private static bool _READING_RESPONSEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Status.html#RESOLVING_HOST"/>
            /// </summary>
            public static int RESOLVING_HOST { get { if (!_RESOLVING_HOSTReady) { _RESOLVING_HOSTContent = SGetField<int>(LocalBridgeClazz, "RESOLVING_HOST"); _RESOLVING_HOSTReady = true; } return _RESOLVING_HOSTContent; } }
            private static int _RESOLVING_HOSTContent = default;
            private static bool _RESOLVING_HOSTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Status.html#RESOLVING_HOST_IN_PAC_FILE"/>
            /// </summary>
            public static int RESOLVING_HOST_IN_PAC_FILE { get { if (!_RESOLVING_HOST_IN_PAC_FILEReady) { _RESOLVING_HOST_IN_PAC_FILEContent = SGetField<int>(LocalBridgeClazz, "RESOLVING_HOST_IN_PAC_FILE"); _RESOLVING_HOST_IN_PAC_FILEReady = true; } return _RESOLVING_HOST_IN_PAC_FILEContent; } }
            private static int _RESOLVING_HOST_IN_PAC_FILEContent = default;
            private static bool _RESOLVING_HOST_IN_PAC_FILEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Status.html#RESOLVING_PROXY_FOR_URL"/>
            /// </summary>
            public static int RESOLVING_PROXY_FOR_URL { get { if (!_RESOLVING_PROXY_FOR_URLReady) { _RESOLVING_PROXY_FOR_URLContent = SGetField<int>(LocalBridgeClazz, "RESOLVING_PROXY_FOR_URL"); _RESOLVING_PROXY_FOR_URLReady = true; } return _RESOLVING_PROXY_FOR_URLContent; } }
            private static int _RESOLVING_PROXY_FOR_URLContent = default;
            private static bool _RESOLVING_PROXY_FOR_URLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Status.html#SENDING_REQUEST"/>
            /// </summary>
            public static int SENDING_REQUEST { get { if (!_SENDING_REQUESTReady) { _SENDING_REQUESTContent = SGetField<int>(LocalBridgeClazz, "SENDING_REQUEST"); _SENDING_REQUESTReady = true; } return _SENDING_REQUESTContent; } }
            private static int _SENDING_REQUESTContent = default;
            private static bool _SENDING_REQUESTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Status.html#SSL_HANDSHAKE"/>
            /// </summary>
            public static int SSL_HANDSHAKE { get { if (!_SSL_HANDSHAKEReady) { _SSL_HANDSHAKEContent = SGetField<int>(LocalBridgeClazz, "SSL_HANDSHAKE"); _SSL_HANDSHAKEReady = true; } return _SSL_HANDSHAKEContent; } }
            private static int _SSL_HANDSHAKEContent = default;
            private static bool _SSL_HANDSHAKEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Status.html#WAITING_FOR_AVAILABLE_SOCKET"/>
            /// </summary>
            public static int WAITING_FOR_AVAILABLE_SOCKET { get { if (!_WAITING_FOR_AVAILABLE_SOCKETReady) { _WAITING_FOR_AVAILABLE_SOCKETContent = SGetField<int>(LocalBridgeClazz, "WAITING_FOR_AVAILABLE_SOCKET"); _WAITING_FOR_AVAILABLE_SOCKETReady = true; } return _WAITING_FOR_AVAILABLE_SOCKETContent; } }
            private static int _WAITING_FOR_AVAILABLE_SOCKETContent = default;
            private static bool _WAITING_FOR_AVAILABLE_SOCKETReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Status.html#WAITING_FOR_CACHE"/>
            /// </summary>
            public static int WAITING_FOR_CACHE { get { if (!_WAITING_FOR_CACHEReady) { _WAITING_FOR_CACHEContent = SGetField<int>(LocalBridgeClazz, "WAITING_FOR_CACHE"); _WAITING_FOR_CACHEReady = true; } return _WAITING_FOR_CACHEContent; } }
            private static int _WAITING_FOR_CACHEContent = default;
            private static bool _WAITING_FOR_CACHEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Status.html#WAITING_FOR_DELEGATE"/>
            /// </summary>
            public static int WAITING_FOR_DELEGATE { get { if (!_WAITING_FOR_DELEGATEReady) { _WAITING_FOR_DELEGATEContent = SGetField<int>(LocalBridgeClazz, "WAITING_FOR_DELEGATE"); _WAITING_FOR_DELEGATEReady = true; } return _WAITING_FOR_DELEGATEContent; } }
            private static int _WAITING_FOR_DELEGATEContent = default;
            private static bool _WAITING_FOR_DELEGATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Status.html#WAITING_FOR_RESPONSE"/>
            /// </summary>
            public static int WAITING_FOR_RESPONSE { get { if (!_WAITING_FOR_RESPONSEReady) { _WAITING_FOR_RESPONSEContent = SGetField<int>(LocalBridgeClazz, "WAITING_FOR_RESPONSE"); _WAITING_FOR_RESPONSEReady = true; } return _WAITING_FOR_RESPONSEContent; } }
            private static int _WAITING_FOR_RESPONSEContent = default;
            private static bool _WAITING_FOR_RESPONSEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.Status.html#WAITING_FOR_STALLED_SOCKET_POOL"/>
            /// </summary>
            public static int WAITING_FOR_STALLED_SOCKET_POOL { get { if (!_WAITING_FOR_STALLED_SOCKET_POOLReady) { _WAITING_FOR_STALLED_SOCKET_POOLContent = SGetField<int>(LocalBridgeClazz, "WAITING_FOR_STALLED_SOCKET_POOL"); _WAITING_FOR_STALLED_SOCKET_POOLReady = true; } return _WAITING_FOR_STALLED_SOCKET_POOLContent; } }
            private static int _WAITING_FOR_STALLED_SOCKET_POOLContent = default;
            private static bool _WAITING_FOR_STALLED_SOCKET_POOLReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region StatusListener
        public partial class StatusListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="StatusListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onStatus", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnStatusEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/http/UrlRequest.StatusListener.html#onStatus(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnStatus"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnStatus { get; set; } = null;

            void OnStatusEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
            {
                var methodToExecute = (OnOnStatus != null) ? OnOnStatus : OnStatus;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.StatusListener.html#onStatus(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public virtual void OnStatus(int arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region StatusListenerDirect
        public partial class StatusListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/UrlRequest.StatusListener.html#onStatus(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnStatus(int arg0)
            {
                IExecuteWithSignature("onStatus", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
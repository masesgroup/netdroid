/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Http
{
    #region DnsOptions declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.html"/>
    /// </summary>
    public partial class DnsOptions : MASES.JCOBridge.C2JBridge.JVMBridgeBase<DnsOptions>
    {
        const string _bridgeClassName = "android.net.http.DnsOptions";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public DnsOptions() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public DnsOptions(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.net.http.DnsOptions$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region StaleDnsOptions declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.StaleDnsOptions.html"/>
        /// </summary>
        public partial class StaleDnsOptions : MASES.JCOBridge.C2JBridge.JVMBridgeBase<StaleDnsOptions>
        {
            const string _bridgeClassName = "android.net.http.DnsOptions$StaleDnsOptions";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public StaleDnsOptions() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public StaleDnsOptions(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
            #region Builder declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.StaleDnsOptions.Builder.html"/>
            /// </summary>
            public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
            {
                const string _bridgeClassName = "android.net.http.DnsOptions$StaleDnsOptions$Builder";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Builder() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Builder(params object[] args) : base(args) { }
            
                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;
            
                // TODO: complete the class
            
            }
            #endregion

        
        }
        #endregion

    
    }
    #endregion

    #region DnsOptions implementation
    public partial class DnsOptions
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.html#DNS_OPTION_DISABLED"/>
        /// </summary>
        public static int DNS_OPTION_DISABLED { get { if (!_DNS_OPTION_DISABLEDReady) { _DNS_OPTION_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "DNS_OPTION_DISABLED"); _DNS_OPTION_DISABLEDReady = true; } return _DNS_OPTION_DISABLEDContent; } }
        private static int _DNS_OPTION_DISABLEDContent = default;
        private static bool _DNS_OPTION_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.html#DNS_OPTION_ENABLED"/>
        /// </summary>
        public static int DNS_OPTION_ENABLED { get { if (!_DNS_OPTION_ENABLEDReady) { _DNS_OPTION_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "DNS_OPTION_ENABLED"); _DNS_OPTION_ENABLEDReady = true; } return _DNS_OPTION_ENABLEDContent; } }
        private static int _DNS_OPTION_ENABLEDContent = default;
        private static bool _DNS_OPTION_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.html#DNS_OPTION_UNSPECIFIED"/>
        /// </summary>
        public static int DNS_OPTION_UNSPECIFIED { get { if (!_DNS_OPTION_UNSPECIFIEDReady) { _DNS_OPTION_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "DNS_OPTION_UNSPECIFIED"); _DNS_OPTION_UNSPECIFIEDReady = true; } return _DNS_OPTION_UNSPECIFIEDContent; } }
        private static int _DNS_OPTION_UNSPECIFIEDContent = default;
        private static bool _DNS_OPTION_UNSPECIFIEDReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.html#getStaleDnsOptions()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Http.DnsOptions.StaleDnsOptions"/></returns>
        public Android.Net.Http.DnsOptions.StaleDnsOptions GetStaleDnsOptions()
        {
            return IExecuteWithSignature<Android.Net.Http.DnsOptions.StaleDnsOptions>("getStaleDnsOptions", "()Landroid/net/http/DnsOptions$StaleDnsOptions;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.html#getPersistHostCache()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPersistHostCache()
        {
            return IExecuteWithSignature<int>("getPersistHostCache", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.html#getPreestablishConnectionsToStaleDnsResults()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPreestablishConnectionsToStaleDnsResults()
        {
            return IExecuteWithSignature<int>("getPreestablishConnectionsToStaleDnsResults", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.html#getStaleDns()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetStaleDns()
        {
            return IExecuteWithSignature<int>("getStaleDns", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.html#getUseHttpStackDnsResolver()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetUseHttpStackDnsResolver()
        {
            return IExecuteWithSignature<int>("getUseHttpStackDnsResolver", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.html#getPersistHostCachePeriod()"/>
        /// </summary>
        /// <returns><see cref="Java.Time.Duration"/></returns>
        public Java.Time.Duration GetPersistHostCachePeriod()
        {
            return IExecuteWithSignature<Java.Time.Duration>("getPersistHostCachePeriod", "()Ljava/time/Duration;");
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Http.DnsOptions"/></returns>
            public Android.Net.Http.DnsOptions Build()
            {
                return IExecuteWithSignature<Android.Net.Http.DnsOptions>("build", "()Landroid/net/http/DnsOptions;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.Builder.html#setPersistHostCache(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Http.DnsOptions.Builder"/></returns>
            public Android.Net.Http.DnsOptions.Builder SetPersistHostCache(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.DnsOptions.Builder>("setPersistHostCache", "(I)Landroid/net/http/DnsOptions$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.Builder.html#setPersistHostCachePeriod(java.time.Duration)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Time.Duration"/></param>
            /// <returns><see cref="Android.Net.Http.DnsOptions.Builder"/></returns>
            public Android.Net.Http.DnsOptions.Builder SetPersistHostCachePeriod(Java.Time.Duration arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.DnsOptions.Builder>("setPersistHostCachePeriod", "(Ljava/time/Duration;)Landroid/net/http/DnsOptions$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.Builder.html#setPreestablishConnectionsToStaleDnsResults(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Http.DnsOptions.Builder"/></returns>
            public Android.Net.Http.DnsOptions.Builder SetPreestablishConnectionsToStaleDnsResults(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.DnsOptions.Builder>("setPreestablishConnectionsToStaleDnsResults", "(I)Landroid/net/http/DnsOptions$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.Builder.html#setStaleDns(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Http.DnsOptions.Builder"/></returns>
            public Android.Net.Http.DnsOptions.Builder SetStaleDns(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.DnsOptions.Builder>("setStaleDns", "(I)Landroid/net/http/DnsOptions$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.Builder.html#setStaleDnsOptions(android.net.http.DnsOptions.StaleDnsOptions)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Http.DnsOptions.StaleDnsOptions"/></param>
            /// <returns><see cref="Android.Net.Http.DnsOptions.Builder"/></returns>
            public Android.Net.Http.DnsOptions.Builder SetStaleDnsOptions(Android.Net.Http.DnsOptions.StaleDnsOptions arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.DnsOptions.Builder>("setStaleDnsOptions", "(Landroid/net/http/DnsOptions$StaleDnsOptions;)Landroid/net/http/DnsOptions$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.Builder.html#setUseHttpStackDnsResolver(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Http.DnsOptions.Builder"/></returns>
            public Android.Net.Http.DnsOptions.Builder SetUseHttpStackDnsResolver(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Http.DnsOptions.Builder>("setUseHttpStackDnsResolver", "(I)Landroid/net/http/DnsOptions$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region StaleDnsOptions implementation
        public partial class StaleDnsOptions
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.StaleDnsOptions.html#getAllowCrossNetworkUsage()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetAllowCrossNetworkUsage()
            {
                return IExecuteWithSignature<int>("getAllowCrossNetworkUsage", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.StaleDnsOptions.html#getUseStaleOnNameNotResolved()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetUseStaleOnNameNotResolved()
            {
                return IExecuteWithSignature<int>("getUseStaleOnNameNotResolved", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.StaleDnsOptions.html#getFreshLookupTimeout()"/>
            /// </summary>
            /// <returns><see cref="Java.Time.Duration"/></returns>
            public Java.Time.Duration GetFreshLookupTimeout()
            {
                return IExecuteWithSignature<Java.Time.Duration>("getFreshLookupTimeout", "()Ljava/time/Duration;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.StaleDnsOptions.html#getMaxExpiredDelay()"/>
            /// </summary>
            /// <returns><see cref="Java.Time.Duration"/></returns>
            public Java.Time.Duration GetMaxExpiredDelay()
            {
                return IExecuteWithSignature<Java.Time.Duration>("getMaxExpiredDelay", "()Ljava/time/Duration;");
            }
        
            #endregion
        
            #region Nested classes
            #region Builder implementation
            public partial class Builder
            {
                #region Constructors
            
                #endregion
            
                #region Class/Interface conversion operators
            
                #endregion
            
                #region Fields
            
                #endregion
            
                #region Static methods
            
                #endregion
            
                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.StaleDnsOptions.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.Net.Http.DnsOptions.StaleDnsOptions"/></returns>
                public Android.Net.Http.DnsOptions.StaleDnsOptions Build()
                {
                    return IExecute<Android.Net.Http.DnsOptions.StaleDnsOptions>("build");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.StaleDnsOptions.Builder.html#setAllowCrossNetworkUsage(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.Net.Http.DnsOptions.StaleDnsOptions.Builder"/></returns>
                public Android.Net.Http.DnsOptions.StaleDnsOptions.Builder SetAllowCrossNetworkUsage(int arg0)
                {
                    return IExecute<Android.Net.Http.DnsOptions.StaleDnsOptions.Builder>("setAllowCrossNetworkUsage", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.StaleDnsOptions.Builder.html#setFreshLookupTimeout(java.time.Duration)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Time.Duration"/></param>
                /// <returns><see cref="Android.Net.Http.DnsOptions.StaleDnsOptions.Builder"/></returns>
                public Android.Net.Http.DnsOptions.StaleDnsOptions.Builder SetFreshLookupTimeout(Java.Time.Duration arg0)
                {
                    return IExecute<Android.Net.Http.DnsOptions.StaleDnsOptions.Builder>("setFreshLookupTimeout", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.StaleDnsOptions.Builder.html#setMaxExpiredDelay(java.time.Duration)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Time.Duration"/></param>
                /// <returns><see cref="Android.Net.Http.DnsOptions.StaleDnsOptions.Builder"/></returns>
                public Android.Net.Http.DnsOptions.StaleDnsOptions.Builder SetMaxExpiredDelay(Java.Time.Duration arg0)
                {
                    return IExecute<Android.Net.Http.DnsOptions.StaleDnsOptions.Builder>("setMaxExpiredDelay", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/net/http/DnsOptions.StaleDnsOptions.Builder.html#setUseStaleOnNameNotResolved(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.Net.Http.DnsOptions.StaleDnsOptions.Builder"/></returns>
                public Android.Net.Http.DnsOptions.StaleDnsOptions.Builder SetUseStaleOnNameNotResolved(int arg0)
                {
                    return IExecute<Android.Net.Http.DnsOptions.StaleDnsOptions.Builder>("setUseStaleOnNameNotResolved", arg0);
                }
            
                #endregion
            
                #region Nested classes
            
                #endregion
            
                // TODO: complete the class
            }
            #endregion

        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
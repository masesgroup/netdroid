/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net
{
    #region VpnManager
    public partial class VpnManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#ERROR_CLASS_NOT_RECOVERABLE"/>
        /// </summary>
        public static int ERROR_CLASS_NOT_RECOVERABLE { get { if (!_ERROR_CLASS_NOT_RECOVERABLEReady) { _ERROR_CLASS_NOT_RECOVERABLEContent = SGetField<int>(LocalBridgeClazz, "ERROR_CLASS_NOT_RECOVERABLE"); _ERROR_CLASS_NOT_RECOVERABLEReady = true; } return _ERROR_CLASS_NOT_RECOVERABLEContent; } }
        private static int _ERROR_CLASS_NOT_RECOVERABLEContent = default;
        private static bool _ERROR_CLASS_NOT_RECOVERABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#ERROR_CLASS_RECOVERABLE"/>
        /// </summary>
        public static int ERROR_CLASS_RECOVERABLE { get { if (!_ERROR_CLASS_RECOVERABLEReady) { _ERROR_CLASS_RECOVERABLEContent = SGetField<int>(LocalBridgeClazz, "ERROR_CLASS_RECOVERABLE"); _ERROR_CLASS_RECOVERABLEReady = true; } return _ERROR_CLASS_RECOVERABLEContent; } }
        private static int _ERROR_CLASS_RECOVERABLEContent = default;
        private static bool _ERROR_CLASS_RECOVERABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#ERROR_CODE_NETWORK_IO"/>
        /// </summary>
        public static int ERROR_CODE_NETWORK_IO { get { if (!_ERROR_CODE_NETWORK_IOReady) { _ERROR_CODE_NETWORK_IOContent = SGetField<int>(LocalBridgeClazz, "ERROR_CODE_NETWORK_IO"); _ERROR_CODE_NETWORK_IOReady = true; } return _ERROR_CODE_NETWORK_IOContent; } }
        private static int _ERROR_CODE_NETWORK_IOContent = default;
        private static bool _ERROR_CODE_NETWORK_IOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#ERROR_CODE_NETWORK_LOST"/>
        /// </summary>
        public static int ERROR_CODE_NETWORK_LOST { get { if (!_ERROR_CODE_NETWORK_LOSTReady) { _ERROR_CODE_NETWORK_LOSTContent = SGetField<int>(LocalBridgeClazz, "ERROR_CODE_NETWORK_LOST"); _ERROR_CODE_NETWORK_LOSTReady = true; } return _ERROR_CODE_NETWORK_LOSTContent; } }
        private static int _ERROR_CODE_NETWORK_LOSTContent = default;
        private static bool _ERROR_CODE_NETWORK_LOSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#ERROR_CODE_NETWORK_PROTOCOL_TIMEOUT"/>
        /// </summary>
        public static int ERROR_CODE_NETWORK_PROTOCOL_TIMEOUT { get { if (!_ERROR_CODE_NETWORK_PROTOCOL_TIMEOUTReady) { _ERROR_CODE_NETWORK_PROTOCOL_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "ERROR_CODE_NETWORK_PROTOCOL_TIMEOUT"); _ERROR_CODE_NETWORK_PROTOCOL_TIMEOUTReady = true; } return _ERROR_CODE_NETWORK_PROTOCOL_TIMEOUTContent; } }
        private static int _ERROR_CODE_NETWORK_PROTOCOL_TIMEOUTContent = default;
        private static bool _ERROR_CODE_NETWORK_PROTOCOL_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#ERROR_CODE_NETWORK_UNKNOWN_HOST"/>
        /// </summary>
        public static int ERROR_CODE_NETWORK_UNKNOWN_HOST { get { if (!_ERROR_CODE_NETWORK_UNKNOWN_HOSTReady) { _ERROR_CODE_NETWORK_UNKNOWN_HOSTContent = SGetField<int>(LocalBridgeClazz, "ERROR_CODE_NETWORK_UNKNOWN_HOST"); _ERROR_CODE_NETWORK_UNKNOWN_HOSTReady = true; } return _ERROR_CODE_NETWORK_UNKNOWN_HOSTContent; } }
        private static int _ERROR_CODE_NETWORK_UNKNOWN_HOSTContent = default;
        private static bool _ERROR_CODE_NETWORK_UNKNOWN_HOSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#ACTION_VPN_MANAGER_EVENT"/>
        /// </summary>
        public static Java.Lang.String ACTION_VPN_MANAGER_EVENT { get { if (!_ACTION_VPN_MANAGER_EVENTReady) { _ACTION_VPN_MANAGER_EVENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_VPN_MANAGER_EVENT"); _ACTION_VPN_MANAGER_EVENTReady = true; } return _ACTION_VPN_MANAGER_EVENTContent; } }
        private static Java.Lang.String _ACTION_VPN_MANAGER_EVENTContent = default;
        private static bool _ACTION_VPN_MANAGER_EVENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGED"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGED { get { if (!_CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGEDReady) { _CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGED"); _CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGEDReady = true; } return _CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGEDContent; } }
        private static Java.Lang.String _CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGEDContent = default;
        private static bool _CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#CATEGORY_EVENT_DEACTIVATED_BY_USER"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_EVENT_DEACTIVATED_BY_USER { get { if (!_CATEGORY_EVENT_DEACTIVATED_BY_USERReady) { _CATEGORY_EVENT_DEACTIVATED_BY_USERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_EVENT_DEACTIVATED_BY_USER"); _CATEGORY_EVENT_DEACTIVATED_BY_USERReady = true; } return _CATEGORY_EVENT_DEACTIVATED_BY_USERContent; } }
        private static Java.Lang.String _CATEGORY_EVENT_DEACTIVATED_BY_USERContent = default;
        private static bool _CATEGORY_EVENT_DEACTIVATED_BY_USERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#CATEGORY_EVENT_IKE_ERROR"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_EVENT_IKE_ERROR { get { if (!_CATEGORY_EVENT_IKE_ERRORReady) { _CATEGORY_EVENT_IKE_ERRORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_EVENT_IKE_ERROR"); _CATEGORY_EVENT_IKE_ERRORReady = true; } return _CATEGORY_EVENT_IKE_ERRORContent; } }
        private static Java.Lang.String _CATEGORY_EVENT_IKE_ERRORContent = default;
        private static bool _CATEGORY_EVENT_IKE_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#CATEGORY_EVENT_NETWORK_ERROR"/>
        /// </summary>
        public static Java.Lang.String CATEGORY_EVENT_NETWORK_ERROR { get { if (!_CATEGORY_EVENT_NETWORK_ERRORReady) { _CATEGORY_EVENT_NETWORK_ERRORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CATEGORY_EVENT_NETWORK_ERROR"); _CATEGORY_EVENT_NETWORK_ERRORReady = true; } return _CATEGORY_EVENT_NETWORK_ERRORContent; } }
        private static Java.Lang.String _CATEGORY_EVENT_NETWORK_ERRORContent = default;
        private static bool _CATEGORY_EVENT_NETWORK_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#EXTRA_ERROR_CLASS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_ERROR_CLASS { get { if (!_EXTRA_ERROR_CLASSReady) { _EXTRA_ERROR_CLASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ERROR_CLASS"); _EXTRA_ERROR_CLASSReady = true; } return _EXTRA_ERROR_CLASSContent; } }
        private static Java.Lang.String _EXTRA_ERROR_CLASSContent = default;
        private static bool _EXTRA_ERROR_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#EXTRA_ERROR_CODE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_ERROR_CODE { get { if (!_EXTRA_ERROR_CODEReady) { _EXTRA_ERROR_CODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ERROR_CODE"); _EXTRA_ERROR_CODEReady = true; } return _EXTRA_ERROR_CODEContent; } }
        private static Java.Lang.String _EXTRA_ERROR_CODEContent = default;
        private static bool _EXTRA_ERROR_CODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#EXTRA_SESSION_KEY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SESSION_KEY { get { if (!_EXTRA_SESSION_KEYReady) { _EXTRA_SESSION_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SESSION_KEY"); _EXTRA_SESSION_KEYReady = true; } return _EXTRA_SESSION_KEYContent; } }
        private static Java.Lang.String _EXTRA_SESSION_KEYContent = default;
        private static bool _EXTRA_SESSION_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#EXTRA_TIMESTAMP_MILLIS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_TIMESTAMP_MILLIS { get { if (!_EXTRA_TIMESTAMP_MILLISReady) { _EXTRA_TIMESTAMP_MILLISContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_TIMESTAMP_MILLIS"); _EXTRA_TIMESTAMP_MILLISReady = true; } return _EXTRA_TIMESTAMP_MILLISContent; } }
        private static Java.Lang.String _EXTRA_TIMESTAMP_MILLISContent = default;
        private static bool _EXTRA_TIMESTAMP_MILLISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#EXTRA_UNDERLYING_LINK_PROPERTIES"/>
        /// </summary>
        public static Java.Lang.String EXTRA_UNDERLYING_LINK_PROPERTIES { get { if (!_EXTRA_UNDERLYING_LINK_PROPERTIESReady) { _EXTRA_UNDERLYING_LINK_PROPERTIESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_UNDERLYING_LINK_PROPERTIES"); _EXTRA_UNDERLYING_LINK_PROPERTIESReady = true; } return _EXTRA_UNDERLYING_LINK_PROPERTIESContent; } }
        private static Java.Lang.String _EXTRA_UNDERLYING_LINK_PROPERTIESContent = default;
        private static bool _EXTRA_UNDERLYING_LINK_PROPERTIESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#EXTRA_UNDERLYING_NETWORK"/>
        /// </summary>
        public static Java.Lang.String EXTRA_UNDERLYING_NETWORK { get { if (!_EXTRA_UNDERLYING_NETWORKReady) { _EXTRA_UNDERLYING_NETWORKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_UNDERLYING_NETWORK"); _EXTRA_UNDERLYING_NETWORKReady = true; } return _EXTRA_UNDERLYING_NETWORKContent; } }
        private static Java.Lang.String _EXTRA_UNDERLYING_NETWORKContent = default;
        private static bool _EXTRA_UNDERLYING_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#EXTRA_UNDERLYING_NETWORK_CAPABILITIES"/>
        /// </summary>
        public static Java.Lang.String EXTRA_UNDERLYING_NETWORK_CAPABILITIES { get { if (!_EXTRA_UNDERLYING_NETWORK_CAPABILITIESReady) { _EXTRA_UNDERLYING_NETWORK_CAPABILITIESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_UNDERLYING_NETWORK_CAPABILITIES"); _EXTRA_UNDERLYING_NETWORK_CAPABILITIESReady = true; } return _EXTRA_UNDERLYING_NETWORK_CAPABILITIESContent; } }
        private static Java.Lang.String _EXTRA_UNDERLYING_NETWORK_CAPABILITIESContent = default;
        private static bool _EXTRA_UNDERLYING_NETWORK_CAPABILITIESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#EXTRA_VPN_PROFILE_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_VPN_PROFILE_STATE { get { if (!_EXTRA_VPN_PROFILE_STATEReady) { _EXTRA_VPN_PROFILE_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_VPN_PROFILE_STATE"); _EXTRA_VPN_PROFILE_STATEReady = true; } return _EXTRA_VPN_PROFILE_STATEContent; } }
        private static Java.Lang.String _EXTRA_VPN_PROFILE_STATEContent = default;
        private static bool _EXTRA_VPN_PROFILE_STATEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#provisionVpnProfile(android.net.PlatformVpnProfile)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.PlatformVpnProfile"/></param>
        /// <returns><see cref="Android.Content.Intent"/></returns>
        public Android.Content.Intent ProvisionVpnProfile(Android.Net.PlatformVpnProfile arg0)
        {
            return IExecuteWithSignature<Android.Content.Intent>("provisionVpnProfile", "(Landroid/net/PlatformVpnProfile;)Landroid/content/Intent;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#getProvisionedVpnProfileState()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.VpnProfileState"/></returns>
        public Android.Net.VpnProfileState GetProvisionedVpnProfileState()
        {
            return IExecuteWithSignature<Android.Net.VpnProfileState>("getProvisionedVpnProfileState", "()Landroid/net/VpnProfileState;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#startProvisionedVpnProfileSession()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String StartProvisionedVpnProfileSession()
        {
            return IExecuteWithSignature<Java.Lang.String>("startProvisionedVpnProfileSession", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#deleteProvisionedVpnProfile()"/>
        /// </summary>
        public void DeleteProvisionedVpnProfile()
        {
            IExecuteWithSignature("deleteProvisionedVpnProfile", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#startProvisionedVpnProfile()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void StartProvisionedVpnProfile()
        {
            IExecuteWithSignature("startProvisionedVpnProfile", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnManager.html#stopProvisionedVpnProfile()"/>
        /// </summary>
        public void StopProvisionedVpnProfile()
        {
            IExecuteWithSignature("stopProvisionedVpnProfile", "()V");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Vcn
{
    #region VcnManager
    public partial class VcnManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnManager.html#VCN_ERROR_CODE_CONFIG_ERROR"/>
        /// </summary>
        public static int VCN_ERROR_CODE_CONFIG_ERROR { get { if (!_VCN_ERROR_CODE_CONFIG_ERRORReady) { _VCN_ERROR_CODE_CONFIG_ERRORContent = SGetField<int>(LocalBridgeClazz, "VCN_ERROR_CODE_CONFIG_ERROR"); _VCN_ERROR_CODE_CONFIG_ERRORReady = true; } return _VCN_ERROR_CODE_CONFIG_ERRORContent; } }
        private static int _VCN_ERROR_CODE_CONFIG_ERRORContent = default;
        private static bool _VCN_ERROR_CODE_CONFIG_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnManager.html#VCN_ERROR_CODE_INTERNAL_ERROR"/>
        /// </summary>
        public static int VCN_ERROR_CODE_INTERNAL_ERROR { get { if (!_VCN_ERROR_CODE_INTERNAL_ERRORReady) { _VCN_ERROR_CODE_INTERNAL_ERRORContent = SGetField<int>(LocalBridgeClazz, "VCN_ERROR_CODE_INTERNAL_ERROR"); _VCN_ERROR_CODE_INTERNAL_ERRORReady = true; } return _VCN_ERROR_CODE_INTERNAL_ERRORContent; } }
        private static int _VCN_ERROR_CODE_INTERNAL_ERRORContent = default;
        private static bool _VCN_ERROR_CODE_INTERNAL_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnManager.html#VCN_ERROR_CODE_NETWORK_ERROR"/>
        /// </summary>
        public static int VCN_ERROR_CODE_NETWORK_ERROR { get { if (!_VCN_ERROR_CODE_NETWORK_ERRORReady) { _VCN_ERROR_CODE_NETWORK_ERRORContent = SGetField<int>(LocalBridgeClazz, "VCN_ERROR_CODE_NETWORK_ERROR"); _VCN_ERROR_CODE_NETWORK_ERRORReady = true; } return _VCN_ERROR_CODE_NETWORK_ERRORContent; } }
        private static int _VCN_ERROR_CODE_NETWORK_ERRORContent = default;
        private static bool _VCN_ERROR_CODE_NETWORK_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnManager.html#VCN_STATUS_CODE_ACTIVE"/>
        /// </summary>
        public static int VCN_STATUS_CODE_ACTIVE { get { if (!_VCN_STATUS_CODE_ACTIVEReady) { _VCN_STATUS_CODE_ACTIVEContent = SGetField<int>(LocalBridgeClazz, "VCN_STATUS_CODE_ACTIVE"); _VCN_STATUS_CODE_ACTIVEReady = true; } return _VCN_STATUS_CODE_ACTIVEContent; } }
        private static int _VCN_STATUS_CODE_ACTIVEContent = default;
        private static bool _VCN_STATUS_CODE_ACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnManager.html#VCN_STATUS_CODE_INACTIVE"/>
        /// </summary>
        public static int VCN_STATUS_CODE_INACTIVE { get { if (!_VCN_STATUS_CODE_INACTIVEReady) { _VCN_STATUS_CODE_INACTIVEContent = SGetField<int>(LocalBridgeClazz, "VCN_STATUS_CODE_INACTIVE"); _VCN_STATUS_CODE_INACTIVEReady = true; } return _VCN_STATUS_CODE_INACTIVEContent; } }
        private static int _VCN_STATUS_CODE_INACTIVEContent = default;
        private static bool _VCN_STATUS_CODE_INACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnManager.html#VCN_STATUS_CODE_NOT_CONFIGURED"/>
        /// </summary>
        public static int VCN_STATUS_CODE_NOT_CONFIGURED { get { if (!_VCN_STATUS_CODE_NOT_CONFIGUREDReady) { _VCN_STATUS_CODE_NOT_CONFIGUREDContent = SGetField<int>(LocalBridgeClazz, "VCN_STATUS_CODE_NOT_CONFIGURED"); _VCN_STATUS_CODE_NOT_CONFIGUREDReady = true; } return _VCN_STATUS_CODE_NOT_CONFIGUREDContent; } }
        private static int _VCN_STATUS_CODE_NOT_CONFIGUREDContent = default;
        private static bool _VCN_STATUS_CODE_NOT_CONFIGUREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnManager.html#VCN_STATUS_CODE_SAFE_MODE"/>
        /// </summary>
        public static int VCN_STATUS_CODE_SAFE_MODE { get { if (!_VCN_STATUS_CODE_SAFE_MODEReady) { _VCN_STATUS_CODE_SAFE_MODEContent = SGetField<int>(LocalBridgeClazz, "VCN_STATUS_CODE_SAFE_MODE"); _VCN_STATUS_CODE_SAFE_MODEReady = true; } return _VCN_STATUS_CODE_SAFE_MODEContent; } }
        private static int _VCN_STATUS_CODE_SAFE_MODEContent = default;
        private static bool _VCN_STATUS_CODE_SAFE_MODEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnManager.html#getConfiguredSubscriptionGroups()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Os.ParcelUuid> GetConfiguredSubscriptionGroups()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Os.ParcelUuid>>("getConfiguredSubscriptionGroups", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnManager.html#clearVcnConfig(android.os.ParcelUuid)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.ParcelUuid"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void ClearVcnConfig(Android.Os.ParcelUuid arg0)
        {
            IExecuteWithSignature("clearVcnConfig", "(Landroid/os/ParcelUuid;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnManager.html#registerVcnStatusCallback(android.os.ParcelUuid,java.util.concurrent.Executor,android.net.vcn.VcnManager.VcnStatusCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.ParcelUuid"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Net.Vcn.VcnManager.VcnStatusCallback"/></param>
        public void RegisterVcnStatusCallback(Android.Os.ParcelUuid arg0, Java.Util.Concurrent.Executor arg1, Android.Net.Vcn.VcnManager.VcnStatusCallback arg2)
        {
            IExecute("registerVcnStatusCallback", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnManager.html#setVcnConfig(android.os.ParcelUuid,android.net.vcn.VcnConfig)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.ParcelUuid"/></param>
        /// <param name="arg1"><see cref="Android.Net.Vcn.VcnConfig"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void SetVcnConfig(Android.Os.ParcelUuid arg0, Android.Net.Vcn.VcnConfig arg1)
        {
            IExecute("setVcnConfig", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnManager.html#unregisterVcnStatusCallback(android.net.vcn.VcnManager.VcnStatusCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Vcn.VcnManager.VcnStatusCallback"/></param>
        public void UnregisterVcnStatusCallback(Android.Net.Vcn.VcnManager.VcnStatusCallback arg0)
        {
            IExecuteWithSignature("unregisterVcnStatusCallback", "(Landroid/net/vcn/VcnManager$VcnStatusCallback;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region VcnStatusCallback
        public partial class VcnStatusCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/vcn/VcnManager.VcnStatusCallback.html#onGatewayConnectionError(java.lang.String,int,java.lang.Throwable)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Java.Lang.Throwable"/></param>
            public void OnGatewayConnectionError(Java.Lang.String arg0, int arg1, MASES.JCOBridge.C2JBridge.JVMBridgeException arg2)
            {
                IExecute("onGatewayConnectionError", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/vcn/VcnManager.VcnStatusCallback.html#onStatusChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnStatusChanged(int arg0)
            {
                IExecuteWithSignature("onStatusChanged", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
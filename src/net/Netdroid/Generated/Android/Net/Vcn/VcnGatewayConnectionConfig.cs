/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Vcn
{
    #region VcnGatewayConnectionConfig declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.html"/>
    /// </summary>
    public partial class VcnGatewayConnectionConfig : MASES.JCOBridge.C2JBridge.JVMBridgeBase<VcnGatewayConnectionConfig>
    {
        const string _bridgeClassName = "android.net.vcn.VcnGatewayConnectionConfig";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public VcnGatewayConnectionConfig() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public VcnGatewayConnectionConfig(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.net.vcn.VcnGatewayConnectionConfig$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region VcnGatewayConnectionConfig implementation
    public partial class VcnGatewayConnectionConfig
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.html#VCN_GATEWAY_OPTION_ENABLE_DATA_STALL_RECOVERY_WITH_MOBILITY"/>
        /// </summary>
        public static int VCN_GATEWAY_OPTION_ENABLE_DATA_STALL_RECOVERY_WITH_MOBILITY { get { if (!_VCN_GATEWAY_OPTION_ENABLE_DATA_STALL_RECOVERY_WITH_MOBILITYReady) { _VCN_GATEWAY_OPTION_ENABLE_DATA_STALL_RECOVERY_WITH_MOBILITYContent = SGetField<int>(LocalBridgeClazz, "VCN_GATEWAY_OPTION_ENABLE_DATA_STALL_RECOVERY_WITH_MOBILITY"); _VCN_GATEWAY_OPTION_ENABLE_DATA_STALL_RECOVERY_WITH_MOBILITYReady = true; } return _VCN_GATEWAY_OPTION_ENABLE_DATA_STALL_RECOVERY_WITH_MOBILITYContent; } }
        private static int _VCN_GATEWAY_OPTION_ENABLE_DATA_STALL_RECOVERY_WITH_MOBILITYContent = default;
        private static bool _VCN_GATEWAY_OPTION_ENABLE_DATA_STALL_RECOVERY_WITH_MOBILITYReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.html#hasGatewayOption(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasGatewayOption(int arg0)
        {
            return IExecuteWithSignature<bool>("hasGatewayOption", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.html#isSafeModeEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSafeModeEnabled()
        {
            return IExecuteWithSignature<bool>("isSafeModeEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.html#getMaxMtu()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxMtu()
        {
            return IExecuteWithSignature<int>("getMaxMtu", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.html#getMinUdpPort4500NatTimeoutSeconds()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMinUdpPort4500NatTimeoutSeconds()
        {
            return IExecuteWithSignature<int>("getMinUdpPort4500NatTimeoutSeconds", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.html#getExposedCapabilities()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int[] GetExposedCapabilities()
        {
            return IExecuteWithSignatureArray<int>("getExposedCapabilities", "()[I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.html#getGatewayConnectionName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetGatewayConnectionName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getGatewayConnectionName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.html#getVcnUnderlyingNetworkPriorities()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Net.Vcn.VcnUnderlyingNetworkTemplate> GetVcnUnderlyingNetworkPriorities()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Net.Vcn.VcnUnderlyingNetworkTemplate>>("getVcnUnderlyingNetworkPriorities", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.html#getRetryIntervalsMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long[] GetRetryIntervalsMillis()
        {
            return IExecuteWithSignatureArray<long>("getRetryIntervalsMillis", "()[J");
        }

        #endregion

        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.Builder.html#%3Cinit%3E(java.lang.String,android.net.ipsec.ike.IkeTunnelConnectionParams)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Android.Net.Ipsec.Ike.IkeTunnelConnectionParams"/></param>
            public Builder(Java.Lang.String arg0, Android.Net.Ipsec.Ike.IkeTunnelConnectionParams arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Vcn.VcnGatewayConnectionConfig"/></returns>
            public Android.Net.Vcn.VcnGatewayConnectionConfig Build()
            {
                return IExecuteWithSignature<Android.Net.Vcn.VcnGatewayConnectionConfig>("build", "()Landroid/net/vcn/VcnGatewayConnectionConfig;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.Builder.html#addExposedCapability(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Vcn.VcnGatewayConnectionConfig.Builder"/></returns>
            public Android.Net.Vcn.VcnGatewayConnectionConfig.Builder AddExposedCapability(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Vcn.VcnGatewayConnectionConfig.Builder>("addExposedCapability", "(I)Landroid/net/vcn/VcnGatewayConnectionConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.Builder.html#addGatewayOption(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Vcn.VcnGatewayConnectionConfig.Builder"/></returns>
            public Android.Net.Vcn.VcnGatewayConnectionConfig.Builder AddGatewayOption(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Vcn.VcnGatewayConnectionConfig.Builder>("addGatewayOption", "(I)Landroid/net/vcn/VcnGatewayConnectionConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.Builder.html#removeExposedCapability(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Vcn.VcnGatewayConnectionConfig.Builder"/></returns>
            public Android.Net.Vcn.VcnGatewayConnectionConfig.Builder RemoveExposedCapability(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Vcn.VcnGatewayConnectionConfig.Builder>("removeExposedCapability", "(I)Landroid/net/vcn/VcnGatewayConnectionConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.Builder.html#removeGatewayOption(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Vcn.VcnGatewayConnectionConfig.Builder"/></returns>
            public Android.Net.Vcn.VcnGatewayConnectionConfig.Builder RemoveGatewayOption(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Vcn.VcnGatewayConnectionConfig.Builder>("removeGatewayOption", "(I)Landroid/net/vcn/VcnGatewayConnectionConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.Builder.html#setMaxMtu(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Vcn.VcnGatewayConnectionConfig.Builder"/></returns>
            public Android.Net.Vcn.VcnGatewayConnectionConfig.Builder SetMaxMtu(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Vcn.VcnGatewayConnectionConfig.Builder>("setMaxMtu", "(I)Landroid/net/vcn/VcnGatewayConnectionConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.Builder.html#setMinUdpPort4500NatTimeoutSeconds(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Vcn.VcnGatewayConnectionConfig.Builder"/></returns>
            public Android.Net.Vcn.VcnGatewayConnectionConfig.Builder SetMinUdpPort4500NatTimeoutSeconds(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Vcn.VcnGatewayConnectionConfig.Builder>("setMinUdpPort4500NatTimeoutSeconds", "(I)Landroid/net/vcn/VcnGatewayConnectionConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.Builder.html#setRetryIntervalsMillis(long[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Net.Vcn.VcnGatewayConnectionConfig.Builder"/></returns>
            public Android.Net.Vcn.VcnGatewayConnectionConfig.Builder SetRetryIntervalsMillis(long[] arg0)
            {
                return IExecuteWithSignature<Android.Net.Vcn.VcnGatewayConnectionConfig.Builder>("setRetryIntervalsMillis", "([J)Landroid/net/vcn/VcnGatewayConnectionConfig$Builder;", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.Builder.html#setSafeModeEnabled(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Net.Vcn.VcnGatewayConnectionConfig.Builder"/></returns>
            public Android.Net.Vcn.VcnGatewayConnectionConfig.Builder SetSafeModeEnabled(bool arg0)
            {
                return IExecuteWithSignature<Android.Net.Vcn.VcnGatewayConnectionConfig.Builder>("setSafeModeEnabled", "(Z)Landroid/net/vcn/VcnGatewayConnectionConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/vcn/VcnGatewayConnectionConfig.Builder.html#setVcnUnderlyingNetworkPriorities(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <returns><see cref="Android.Net.Vcn.VcnGatewayConnectionConfig.Builder"/></returns>
            public Android.Net.Vcn.VcnGatewayConnectionConfig.Builder SetVcnUnderlyingNetworkPriorities(Java.Util.List<Android.Net.Vcn.VcnUnderlyingNetworkTemplate> arg0)
            {
                return IExecuteWithSignature<Android.Net.Vcn.VcnGatewayConnectionConfig.Builder>("setVcnUnderlyingNetworkPriorities", "(Ljava/util/List;)Landroid/net/vcn/VcnGatewayConnectionConfig$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
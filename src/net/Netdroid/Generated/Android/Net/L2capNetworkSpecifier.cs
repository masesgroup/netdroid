/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net
{
    #region L2capNetworkSpecifier declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html"/>
    /// </summary>
    public partial class L2capNetworkSpecifier : Android.Net.NetworkSpecifier
    {
        const string _bridgeClassName = "android.net.L2capNetworkSpecifier";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public L2capNetworkSpecifier() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public L2capNetworkSpecifier(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public L2capNetworkSpecifier(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.net.L2capNetworkSpecifier$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Builder(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region L2capNetworkSpecifier implementation
    public partial class L2capNetworkSpecifier
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Net.L2capNetworkSpecifier"/> to <see cref="Android.Os.Parcelable"/>
        /// </summary>
        public static implicit operator Android.Os.Parcelable(Android.Net.L2capNetworkSpecifier t) => t.Cast<Android.Os.Parcelable>();
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html#HEADER_COMPRESSION_6LOWPAN"/>
        /// </summary>
        public static int HEADER_COMPRESSION_6LOWPAN { get { if (!_HEADER_COMPRESSION_6LOWPANReady) { _HEADER_COMPRESSION_6LOWPANContent = SGetField<int>(LocalBridgeClazz, "HEADER_COMPRESSION_6LOWPAN"); _HEADER_COMPRESSION_6LOWPANReady = true; } return _HEADER_COMPRESSION_6LOWPANContent; } }
        private static int _HEADER_COMPRESSION_6LOWPANContent = default;
        private static bool _HEADER_COMPRESSION_6LOWPANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html#HEADER_COMPRESSION_ANY"/>
        /// </summary>
        public static int HEADER_COMPRESSION_ANY { get { if (!_HEADER_COMPRESSION_ANYReady) { _HEADER_COMPRESSION_ANYContent = SGetField<int>(LocalBridgeClazz, "HEADER_COMPRESSION_ANY"); _HEADER_COMPRESSION_ANYReady = true; } return _HEADER_COMPRESSION_ANYContent; } }
        private static int _HEADER_COMPRESSION_ANYContent = default;
        private static bool _HEADER_COMPRESSION_ANYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html#HEADER_COMPRESSION_NONE"/>
        /// </summary>
        public static int HEADER_COMPRESSION_NONE { get { if (!_HEADER_COMPRESSION_NONEReady) { _HEADER_COMPRESSION_NONEContent = SGetField<int>(LocalBridgeClazz, "HEADER_COMPRESSION_NONE"); _HEADER_COMPRESSION_NONEReady = true; } return _HEADER_COMPRESSION_NONEContent; } }
        private static int _HEADER_COMPRESSION_NONEContent = default;
        private static bool _HEADER_COMPRESSION_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html#PSM_ANY"/>
        /// </summary>
        public static int PSM_ANY { get { if (!_PSM_ANYReady) { _PSM_ANYContent = SGetField<int>(LocalBridgeClazz, "PSM_ANY"); _PSM_ANYReady = true; } return _PSM_ANYContent; } }
        private static int _PSM_ANYContent = default;
        private static bool _PSM_ANYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html#ROLE_ANY"/>
        /// </summary>
        public static int ROLE_ANY { get { if (!_ROLE_ANYReady) { _ROLE_ANYContent = SGetField<int>(LocalBridgeClazz, "ROLE_ANY"); _ROLE_ANYReady = true; } return _ROLE_ANYContent; } }
        private static int _ROLE_ANYContent = default;
        private static bool _ROLE_ANYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html#ROLE_CLIENT"/>
        /// </summary>
        public static int ROLE_CLIENT { get { if (!_ROLE_CLIENTReady) { _ROLE_CLIENTContent = SGetField<int>(LocalBridgeClazz, "ROLE_CLIENT"); _ROLE_CLIENTReady = true; } return _ROLE_CLIENTContent; } }
        private static int _ROLE_CLIENTContent = default;
        private static bool _ROLE_CLIENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html#ROLE_SERVER"/>
        /// </summary>
        public static int ROLE_SERVER { get { if (!_ROLE_SERVERReady) { _ROLE_SERVERContent = SGetField<int>(LocalBridgeClazz, "ROLE_SERVER"); _ROLE_SERVERReady = true; } return _ROLE_SERVERContent; } }
        private static int _ROLE_SERVERContent = default;
        private static bool _ROLE_SERVERReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html#getRemoteAddress()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.MacAddress"/></returns>
        public Android.Net.MacAddress GetRemoteAddress()
        {
            return IExecuteWithSignature<Android.Net.MacAddress>("getRemoteAddress", "()Landroid/net/MacAddress;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html#redact()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.NetworkSpecifier"/></returns>
        public Android.Net.NetworkSpecifier Redact()
        {
            return IExecuteWithSignature<Android.Net.NetworkSpecifier>("redact", "()Landroid/net/NetworkSpecifier;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html#canBeSatisfiedBy(android.net.NetworkSpecifier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkSpecifier"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CanBeSatisfiedBy(Android.Net.NetworkSpecifier arg0)
        {
            return IExecuteWithSignature<bool>("canBeSatisfiedBy", "(Landroid/net/NetworkSpecifier;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html#getHeaderCompression()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHeaderCompression()
        {
            return IExecuteWithSignature<int>("getHeaderCompression", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html#getPsm()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPsm()
        {
            return IExecuteWithSignature<int>("getPsm", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html#getRole()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRole()
        {
            return IExecuteWithSignature<int>("getRole", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.L2capNetworkSpecifier"/></returns>
            public Android.Net.L2capNetworkSpecifier Build()
            {
                return IExecuteWithSignature<Android.Net.L2capNetworkSpecifier>("build", "()Landroid/net/L2capNetworkSpecifier;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.Builder.html#setHeaderCompression(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.L2capNetworkSpecifier.Builder"/></returns>
            public Android.Net.L2capNetworkSpecifier.Builder SetHeaderCompression(int arg0)
            {
                return IExecuteWithSignature<Android.Net.L2capNetworkSpecifier.Builder>("setHeaderCompression", "(I)Landroid/net/L2capNetworkSpecifier$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.Builder.html#setPsm(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.L2capNetworkSpecifier.Builder"/></returns>
            public Android.Net.L2capNetworkSpecifier.Builder SetPsm(int arg0)
            {
                return IExecuteWithSignature<Android.Net.L2capNetworkSpecifier.Builder>("setPsm", "(I)Landroid/net/L2capNetworkSpecifier$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.Builder.html#setRemoteAddress(android.net.MacAddress)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.MacAddress"/></param>
            /// <returns><see cref="Android.Net.L2capNetworkSpecifier.Builder"/></returns>
            public Android.Net.L2capNetworkSpecifier.Builder SetRemoteAddress(Android.Net.MacAddress arg0)
            {
                return IExecuteWithSignature<Android.Net.L2capNetworkSpecifier.Builder>("setRemoteAddress", "(Landroid/net/MacAddress;)Landroid/net/L2capNetworkSpecifier$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/L2capNetworkSpecifier.Builder.html#setRole(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.L2capNetworkSpecifier.Builder"/></returns>
            public Android.Net.L2capNetworkSpecifier.Builder SetRole(int arg0)
            {
                return IExecuteWithSignature<Android.Net.L2capNetworkSpecifier.Builder>("setRole", "(I)Landroid/net/L2capNetworkSpecifier$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
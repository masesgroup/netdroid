/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net
{
    #region ConnectivityDiagnosticsManager
    public partial class ConnectivityDiagnosticsManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.html#registerConnectivityDiagnosticsCallback(android.net.NetworkRequest,java.util.concurrent.Executor,android.net.ConnectivityDiagnosticsManager.ConnectivityDiagnosticsCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Net.ConnectivityDiagnosticsManager.ConnectivityDiagnosticsCallback"/></param>
        public void RegisterConnectivityDiagnosticsCallback(Android.Net.NetworkRequest arg0, Java.Util.Concurrent.Executor arg1, Android.Net.ConnectivityDiagnosticsManager.ConnectivityDiagnosticsCallback arg2)
        {
            IExecute("registerConnectivityDiagnosticsCallback", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.html#unregisterConnectivityDiagnosticsCallback(android.net.ConnectivityDiagnosticsManager.ConnectivityDiagnosticsCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.ConnectivityDiagnosticsManager.ConnectivityDiagnosticsCallback"/></param>
        public void UnregisterConnectivityDiagnosticsCallback(Android.Net.ConnectivityDiagnosticsManager.ConnectivityDiagnosticsCallback arg0)
        {
            IExecuteWithSignature("unregisterConnectivityDiagnosticsCallback", "(Landroid/net/ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region ConnectivityDiagnosticsCallback
        public partial class ConnectivityDiagnosticsCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityDiagnosticsCallback.html#onConnectivityReportAvailable(android.net.ConnectivityDiagnosticsManager.ConnectivityReport)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.ConnectivityDiagnosticsManager.ConnectivityReport"/></param>
            public void OnConnectivityReportAvailable(Android.Net.ConnectivityDiagnosticsManager.ConnectivityReport arg0)
            {
                IExecuteWithSignature("onConnectivityReportAvailable", "(Landroid/net/ConnectivityDiagnosticsManager$ConnectivityReport;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityDiagnosticsCallback.html#onDataStallSuspected(android.net.ConnectivityDiagnosticsManager.DataStallReport)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.ConnectivityDiagnosticsManager.DataStallReport"/></param>
            public void OnDataStallSuspected(Android.Net.ConnectivityDiagnosticsManager.DataStallReport arg0)
            {
                IExecuteWithSignature("onDataStallSuspected", "(Landroid/net/ConnectivityDiagnosticsManager$DataStallReport;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityDiagnosticsCallback.html#onNetworkConnectivityReported(android.net.Network,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            public void OnNetworkConnectivityReported(Android.Net.Network arg0, bool arg1)
            {
                IExecute("onNetworkConnectivityReported", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ConnectivityReport
        public partial class ConnectivityReport
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#%3Cinit%3E(android.net.Network,long,android.net.LinkProperties,android.net.NetworkCapabilities,android.os.PersistableBundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="Android.Net.LinkProperties"/></param>
            /// <param name="arg3"><see cref="Android.Net.NetworkCapabilities"/></param>
            /// <param name="arg4"><see cref="Android.Os.PersistableBundle"/></param>
            public ConnectivityReport(Android.Net.Network arg0, long arg1, Android.Net.LinkProperties arg2, Android.Net.NetworkCapabilities arg3, Android.Os.PersistableBundle arg4)
                : base(arg0, arg1, arg2, arg3, arg4)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#NETWORK_PROBE_DNS"/>
            /// </summary>
            public static int NETWORK_PROBE_DNS { get { if (!_NETWORK_PROBE_DNSReady) { _NETWORK_PROBE_DNSContent = SGetField<int>(LocalBridgeClazz, "NETWORK_PROBE_DNS"); _NETWORK_PROBE_DNSReady = true; } return _NETWORK_PROBE_DNSContent; } }
            private static int _NETWORK_PROBE_DNSContent = default;
            private static bool _NETWORK_PROBE_DNSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#NETWORK_PROBE_FALLBACK"/>
            /// </summary>
            public static int NETWORK_PROBE_FALLBACK { get { if (!_NETWORK_PROBE_FALLBACKReady) { _NETWORK_PROBE_FALLBACKContent = SGetField<int>(LocalBridgeClazz, "NETWORK_PROBE_FALLBACK"); _NETWORK_PROBE_FALLBACKReady = true; } return _NETWORK_PROBE_FALLBACKContent; } }
            private static int _NETWORK_PROBE_FALLBACKContent = default;
            private static bool _NETWORK_PROBE_FALLBACKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#NETWORK_PROBE_HTTP"/>
            /// </summary>
            public static int NETWORK_PROBE_HTTP { get { if (!_NETWORK_PROBE_HTTPReady) { _NETWORK_PROBE_HTTPContent = SGetField<int>(LocalBridgeClazz, "NETWORK_PROBE_HTTP"); _NETWORK_PROBE_HTTPReady = true; } return _NETWORK_PROBE_HTTPContent; } }
            private static int _NETWORK_PROBE_HTTPContent = default;
            private static bool _NETWORK_PROBE_HTTPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#NETWORK_PROBE_HTTPS"/>
            /// </summary>
            public static int NETWORK_PROBE_HTTPS { get { if (!_NETWORK_PROBE_HTTPSReady) { _NETWORK_PROBE_HTTPSContent = SGetField<int>(LocalBridgeClazz, "NETWORK_PROBE_HTTPS"); _NETWORK_PROBE_HTTPSReady = true; } return _NETWORK_PROBE_HTTPSContent; } }
            private static int _NETWORK_PROBE_HTTPSContent = default;
            private static bool _NETWORK_PROBE_HTTPSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#NETWORK_PROBE_PRIVATE_DNS"/>
            /// </summary>
            public static int NETWORK_PROBE_PRIVATE_DNS { get { if (!_NETWORK_PROBE_PRIVATE_DNSReady) { _NETWORK_PROBE_PRIVATE_DNSContent = SGetField<int>(LocalBridgeClazz, "NETWORK_PROBE_PRIVATE_DNS"); _NETWORK_PROBE_PRIVATE_DNSReady = true; } return _NETWORK_PROBE_PRIVATE_DNSContent; } }
            private static int _NETWORK_PROBE_PRIVATE_DNSContent = default;
            private static bool _NETWORK_PROBE_PRIVATE_DNSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#NETWORK_VALIDATION_RESULT_INVALID"/>
            /// </summary>
            public static int NETWORK_VALIDATION_RESULT_INVALID { get { if (!_NETWORK_VALIDATION_RESULT_INVALIDReady) { _NETWORK_VALIDATION_RESULT_INVALIDContent = SGetField<int>(LocalBridgeClazz, "NETWORK_VALIDATION_RESULT_INVALID"); _NETWORK_VALIDATION_RESULT_INVALIDReady = true; } return _NETWORK_VALIDATION_RESULT_INVALIDContent; } }
            private static int _NETWORK_VALIDATION_RESULT_INVALIDContent = default;
            private static bool _NETWORK_VALIDATION_RESULT_INVALIDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#NETWORK_VALIDATION_RESULT_PARTIALLY_VALID"/>
            /// </summary>
            public static int NETWORK_VALIDATION_RESULT_PARTIALLY_VALID { get { if (!_NETWORK_VALIDATION_RESULT_PARTIALLY_VALIDReady) { _NETWORK_VALIDATION_RESULT_PARTIALLY_VALIDContent = SGetField<int>(LocalBridgeClazz, "NETWORK_VALIDATION_RESULT_PARTIALLY_VALID"); _NETWORK_VALIDATION_RESULT_PARTIALLY_VALIDReady = true; } return _NETWORK_VALIDATION_RESULT_PARTIALLY_VALIDContent; } }
            private static int _NETWORK_VALIDATION_RESULT_PARTIALLY_VALIDContent = default;
            private static bool _NETWORK_VALIDATION_RESULT_PARTIALLY_VALIDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#NETWORK_VALIDATION_RESULT_SKIPPED"/>
            /// </summary>
            public static int NETWORK_VALIDATION_RESULT_SKIPPED { get { if (!_NETWORK_VALIDATION_RESULT_SKIPPEDReady) { _NETWORK_VALIDATION_RESULT_SKIPPEDContent = SGetField<int>(LocalBridgeClazz, "NETWORK_VALIDATION_RESULT_SKIPPED"); _NETWORK_VALIDATION_RESULT_SKIPPEDReady = true; } return _NETWORK_VALIDATION_RESULT_SKIPPEDContent; } }
            private static int _NETWORK_VALIDATION_RESULT_SKIPPEDContent = default;
            private static bool _NETWORK_VALIDATION_RESULT_SKIPPEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#NETWORK_VALIDATION_RESULT_VALID"/>
            /// </summary>
            public static int NETWORK_VALIDATION_RESULT_VALID { get { if (!_NETWORK_VALIDATION_RESULT_VALIDReady) { _NETWORK_VALIDATION_RESULT_VALIDContent = SGetField<int>(LocalBridgeClazz, "NETWORK_VALIDATION_RESULT_VALID"); _NETWORK_VALIDATION_RESULT_VALIDReady = true; } return _NETWORK_VALIDATION_RESULT_VALIDContent; } }
            private static int _NETWORK_VALIDATION_RESULT_VALIDContent = default;
            private static bool _NETWORK_VALIDATION_RESULT_VALIDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#KEY_NETWORK_PROBES_ATTEMPTED_BITMASK"/>
            /// </summary>
            public static Java.Lang.String KEY_NETWORK_PROBES_ATTEMPTED_BITMASK { get { if (!_KEY_NETWORK_PROBES_ATTEMPTED_BITMASKReady) { _KEY_NETWORK_PROBES_ATTEMPTED_BITMASKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_NETWORK_PROBES_ATTEMPTED_BITMASK"); _KEY_NETWORK_PROBES_ATTEMPTED_BITMASKReady = true; } return _KEY_NETWORK_PROBES_ATTEMPTED_BITMASKContent; } }
            private static Java.Lang.String _KEY_NETWORK_PROBES_ATTEMPTED_BITMASKContent = default;
            private static bool _KEY_NETWORK_PROBES_ATTEMPTED_BITMASKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#KEY_NETWORK_PROBES_SUCCEEDED_BITMASK"/>
            /// </summary>
            public static Java.Lang.String KEY_NETWORK_PROBES_SUCCEEDED_BITMASK { get { if (!_KEY_NETWORK_PROBES_SUCCEEDED_BITMASKReady) { _KEY_NETWORK_PROBES_SUCCEEDED_BITMASKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_NETWORK_PROBES_SUCCEEDED_BITMASK"); _KEY_NETWORK_PROBES_SUCCEEDED_BITMASKReady = true; } return _KEY_NETWORK_PROBES_SUCCEEDED_BITMASKContent; } }
            private static Java.Lang.String _KEY_NETWORK_PROBES_SUCCEEDED_BITMASKContent = default;
            private static bool _KEY_NETWORK_PROBES_SUCCEEDED_BITMASKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#KEY_NETWORK_VALIDATION_RESULT"/>
            /// </summary>
            public static Java.Lang.String KEY_NETWORK_VALIDATION_RESULT { get { if (!_KEY_NETWORK_VALIDATION_RESULTReady) { _KEY_NETWORK_VALIDATION_RESULTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_NETWORK_VALIDATION_RESULT"); _KEY_NETWORK_VALIDATION_RESULTReady = true; } return _KEY_NETWORK_VALIDATION_RESULTContent; } }
            private static Java.Lang.String _KEY_NETWORK_VALIDATION_RESULTContent = default;
            private static bool _KEY_NETWORK_VALIDATION_RESULTReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#getLinkProperties()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.LinkProperties"/></returns>
            public Android.Net.LinkProperties GetLinkProperties()
            {
                return IExecuteWithSignature<Android.Net.LinkProperties>("getLinkProperties", "()Landroid/net/LinkProperties;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#getNetwork()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Network"/></returns>
            public Android.Net.Network GetNetwork()
            {
                return IExecuteWithSignature<Android.Net.Network>("getNetwork", "()Landroid/net/Network;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#getNetworkCapabilities()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.NetworkCapabilities"/></returns>
            public Android.Net.NetworkCapabilities GetNetworkCapabilities()
            {
                return IExecuteWithSignature<Android.Net.NetworkCapabilities>("getNetworkCapabilities", "()Landroid/net/NetworkCapabilities;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#getAdditionalInfo()"/>
            /// </summary>
            /// <returns><see cref="Android.Os.PersistableBundle"/></returns>
            public Android.Os.PersistableBundle GetAdditionalInfo()
            {
                return IExecuteWithSignature<Android.Os.PersistableBundle>("getAdditionalInfo", "()Landroid/os/PersistableBundle;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#getReportTimestamp()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetReportTimestamp()
            {
                return IExecuteWithSignature<long>("getReportTimestamp", "()J");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.ConnectivityReport.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DataStallReport
        public partial class DataStallReport
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.DataStallReport.html#%3Cinit%3E(android.net.Network,long,int,android.net.LinkProperties,android.net.NetworkCapabilities,android.os.PersistableBundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="Android.Net.LinkProperties"/></param>
            /// <param name="arg4"><see cref="Android.Net.NetworkCapabilities"/></param>
            /// <param name="arg5"><see cref="Android.Os.PersistableBundle"/></param>
            public DataStallReport(Android.Net.Network arg0, long arg1, int arg2, Android.Net.LinkProperties arg3, Android.Net.NetworkCapabilities arg4, Android.Os.PersistableBundle arg5)
                : base(arg0, arg1, arg2, arg3, arg4, arg5)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.DataStallReport.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.DataStallReport.html#DETECTION_METHOD_DNS_EVENTS"/>
            /// </summary>
            public static int DETECTION_METHOD_DNS_EVENTS { get { if (!_DETECTION_METHOD_DNS_EVENTSReady) { _DETECTION_METHOD_DNS_EVENTSContent = SGetField<int>(LocalBridgeClazz, "DETECTION_METHOD_DNS_EVENTS"); _DETECTION_METHOD_DNS_EVENTSReady = true; } return _DETECTION_METHOD_DNS_EVENTSContent; } }
            private static int _DETECTION_METHOD_DNS_EVENTSContent = default;
            private static bool _DETECTION_METHOD_DNS_EVENTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.DataStallReport.html#DETECTION_METHOD_TCP_METRICS"/>
            /// </summary>
            public static int DETECTION_METHOD_TCP_METRICS { get { if (!_DETECTION_METHOD_TCP_METRICSReady) { _DETECTION_METHOD_TCP_METRICSContent = SGetField<int>(LocalBridgeClazz, "DETECTION_METHOD_TCP_METRICS"); _DETECTION_METHOD_TCP_METRICSReady = true; } return _DETECTION_METHOD_TCP_METRICSContent; } }
            private static int _DETECTION_METHOD_TCP_METRICSContent = default;
            private static bool _DETECTION_METHOD_TCP_METRICSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.DataStallReport.html#KEY_DNS_CONSECUTIVE_TIMEOUTS"/>
            /// </summary>
            public static Java.Lang.String KEY_DNS_CONSECUTIVE_TIMEOUTS { get { if (!_KEY_DNS_CONSECUTIVE_TIMEOUTSReady) { _KEY_DNS_CONSECUTIVE_TIMEOUTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_DNS_CONSECUTIVE_TIMEOUTS"); _KEY_DNS_CONSECUTIVE_TIMEOUTSReady = true; } return _KEY_DNS_CONSECUTIVE_TIMEOUTSContent; } }
            private static Java.Lang.String _KEY_DNS_CONSECUTIVE_TIMEOUTSContent = default;
            private static bool _KEY_DNS_CONSECUTIVE_TIMEOUTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.DataStallReport.html#KEY_TCP_METRICS_COLLECTION_PERIOD_MILLIS"/>
            /// </summary>
            public static Java.Lang.String KEY_TCP_METRICS_COLLECTION_PERIOD_MILLIS { get { if (!_KEY_TCP_METRICS_COLLECTION_PERIOD_MILLISReady) { _KEY_TCP_METRICS_COLLECTION_PERIOD_MILLISContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_TCP_METRICS_COLLECTION_PERIOD_MILLIS"); _KEY_TCP_METRICS_COLLECTION_PERIOD_MILLISReady = true; } return _KEY_TCP_METRICS_COLLECTION_PERIOD_MILLISContent; } }
            private static Java.Lang.String _KEY_TCP_METRICS_COLLECTION_PERIOD_MILLISContent = default;
            private static bool _KEY_TCP_METRICS_COLLECTION_PERIOD_MILLISReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.DataStallReport.html#KEY_TCP_PACKET_FAIL_RATE"/>
            /// </summary>
            public static Java.Lang.String KEY_TCP_PACKET_FAIL_RATE { get { if (!_KEY_TCP_PACKET_FAIL_RATEReady) { _KEY_TCP_PACKET_FAIL_RATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_TCP_PACKET_FAIL_RATE"); _KEY_TCP_PACKET_FAIL_RATEReady = true; } return _KEY_TCP_PACKET_FAIL_RATEContent; } }
            private static Java.Lang.String _KEY_TCP_PACKET_FAIL_RATEContent = default;
            private static bool _KEY_TCP_PACKET_FAIL_RATEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.DataStallReport.html#getLinkProperties()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.LinkProperties"/></returns>
            public Android.Net.LinkProperties GetLinkProperties()
            {
                return IExecuteWithSignature<Android.Net.LinkProperties>("getLinkProperties", "()Landroid/net/LinkProperties;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.DataStallReport.html#getNetwork()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Network"/></returns>
            public Android.Net.Network GetNetwork()
            {
                return IExecuteWithSignature<Android.Net.Network>("getNetwork", "()Landroid/net/Network;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.DataStallReport.html#getNetworkCapabilities()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.NetworkCapabilities"/></returns>
            public Android.Net.NetworkCapabilities GetNetworkCapabilities()
            {
                return IExecuteWithSignature<Android.Net.NetworkCapabilities>("getNetworkCapabilities", "()Landroid/net/NetworkCapabilities;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.DataStallReport.html#getStallDetails()"/>
            /// </summary>
            /// <returns><see cref="Android.Os.PersistableBundle"/></returns>
            public Android.Os.PersistableBundle GetStallDetails()
            {
                return IExecuteWithSignature<Android.Os.PersistableBundle>("getStallDetails", "()Landroid/os/PersistableBundle;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.DataStallReport.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.DataStallReport.html#getDetectionMethod()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetDetectionMethod()
            {
                return IExecuteWithSignature<int>("getDetectionMethod", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.DataStallReport.html#getReportTimestamp()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetReportTimestamp()
            {
                return IExecuteWithSignature<long>("getReportTimestamp", "()J");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityDiagnosticsManager.DataStallReport.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
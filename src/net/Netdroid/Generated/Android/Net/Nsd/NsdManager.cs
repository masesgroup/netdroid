/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Nsd
{
    #region NsdManager
    public partial class NsdManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#FAILURE_ALREADY_ACTIVE"/>
        /// </summary>
        public static int FAILURE_ALREADY_ACTIVE { get { if (!_FAILURE_ALREADY_ACTIVEReady) { _FAILURE_ALREADY_ACTIVEContent = SGetField<int>(LocalBridgeClazz, "FAILURE_ALREADY_ACTIVE"); _FAILURE_ALREADY_ACTIVEReady = true; } return _FAILURE_ALREADY_ACTIVEContent; } }
        private static int _FAILURE_ALREADY_ACTIVEContent = default;
        private static bool _FAILURE_ALREADY_ACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#FAILURE_BAD_PARAMETERS"/>
        /// </summary>
        public static int FAILURE_BAD_PARAMETERS { get { if (!_FAILURE_BAD_PARAMETERSReady) { _FAILURE_BAD_PARAMETERSContent = SGetField<int>(LocalBridgeClazz, "FAILURE_BAD_PARAMETERS"); _FAILURE_BAD_PARAMETERSReady = true; } return _FAILURE_BAD_PARAMETERSContent; } }
        private static int _FAILURE_BAD_PARAMETERSContent = default;
        private static bool _FAILURE_BAD_PARAMETERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#FAILURE_INTERNAL_ERROR"/>
        /// </summary>
        public static int FAILURE_INTERNAL_ERROR { get { if (!_FAILURE_INTERNAL_ERRORReady) { _FAILURE_INTERNAL_ERRORContent = SGetField<int>(LocalBridgeClazz, "FAILURE_INTERNAL_ERROR"); _FAILURE_INTERNAL_ERRORReady = true; } return _FAILURE_INTERNAL_ERRORContent; } }
        private static int _FAILURE_INTERNAL_ERRORContent = default;
        private static bool _FAILURE_INTERNAL_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#FAILURE_MAX_LIMIT"/>
        /// </summary>
        public static int FAILURE_MAX_LIMIT { get { if (!_FAILURE_MAX_LIMITReady) { _FAILURE_MAX_LIMITContent = SGetField<int>(LocalBridgeClazz, "FAILURE_MAX_LIMIT"); _FAILURE_MAX_LIMITReady = true; } return _FAILURE_MAX_LIMITContent; } }
        private static int _FAILURE_MAX_LIMITContent = default;
        private static bool _FAILURE_MAX_LIMITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#FAILURE_OPERATION_NOT_RUNNING"/>
        /// </summary>
        public static int FAILURE_OPERATION_NOT_RUNNING { get { if (!_FAILURE_OPERATION_NOT_RUNNINGReady) { _FAILURE_OPERATION_NOT_RUNNINGContent = SGetField<int>(LocalBridgeClazz, "FAILURE_OPERATION_NOT_RUNNING"); _FAILURE_OPERATION_NOT_RUNNINGReady = true; } return _FAILURE_OPERATION_NOT_RUNNINGContent; } }
        private static int _FAILURE_OPERATION_NOT_RUNNINGContent = default;
        private static bool _FAILURE_OPERATION_NOT_RUNNINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#NSD_STATE_DISABLED"/>
        /// </summary>
        public static int NSD_STATE_DISABLED { get { if (!_NSD_STATE_DISABLEDReady) { _NSD_STATE_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "NSD_STATE_DISABLED"); _NSD_STATE_DISABLEDReady = true; } return _NSD_STATE_DISABLEDContent; } }
        private static int _NSD_STATE_DISABLEDContent = default;
        private static bool _NSD_STATE_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#NSD_STATE_ENABLED"/>
        /// </summary>
        public static int NSD_STATE_ENABLED { get { if (!_NSD_STATE_ENABLEDReady) { _NSD_STATE_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "NSD_STATE_ENABLED"); _NSD_STATE_ENABLEDReady = true; } return _NSD_STATE_ENABLEDContent; } }
        private static int _NSD_STATE_ENABLEDContent = default;
        private static bool _NSD_STATE_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#PROTOCOL_DNS_SD"/>
        /// </summary>
        public static int PROTOCOL_DNS_SD { get { if (!_PROTOCOL_DNS_SDReady) { _PROTOCOL_DNS_SDContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_DNS_SD"); _PROTOCOL_DNS_SDReady = true; } return _PROTOCOL_DNS_SDContent; } }
        private static int _PROTOCOL_DNS_SDContent = default;
        private static bool _PROTOCOL_DNS_SDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#ACTION_NSD_STATE_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_NSD_STATE_CHANGED { get { if (!_ACTION_NSD_STATE_CHANGEDReady) { _ACTION_NSD_STATE_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NSD_STATE_CHANGED"); _ACTION_NSD_STATE_CHANGEDReady = true; } return _ACTION_NSD_STATE_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_NSD_STATE_CHANGEDContent = default;
        private static bool _ACTION_NSD_STATE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#EXTRA_NSD_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NSD_STATE { get { if (!_EXTRA_NSD_STATEReady) { _EXTRA_NSD_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NSD_STATE"); _EXTRA_NSD_STATEReady = true; } return _EXTRA_NSD_STATEContent; } }
        private static Java.Lang.String _EXTRA_NSD_STATEContent = default;
        private static bool _EXTRA_NSD_STATEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#discoverServices(java.lang.String,int,android.net.Network,java.util.concurrent.Executor,android.net.nsd.NsdManager.DiscoveryListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Net.Network"/></param>
        /// <param name="arg3"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg4"><see cref="Android.Net.Nsd.NsdManager.DiscoveryListener"/></param>
        public void DiscoverServices(Java.Lang.String arg0, int arg1, Android.Net.Network arg2, Java.Util.Concurrent.Executor arg3, Android.Net.Nsd.NsdManager.DiscoveryListener arg4)
        {
            IExecute("discoverServices", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#discoverServices(java.lang.String,int,android.net.NetworkRequest,java.util.concurrent.Executor,android.net.nsd.NsdManager.DiscoveryListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg3"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg4"><see cref="Android.Net.Nsd.NsdManager.DiscoveryListener"/></param>
        public void DiscoverServices(Java.Lang.String arg0, int arg1, Android.Net.NetworkRequest arg2, Java.Util.Concurrent.Executor arg3, Android.Net.Nsd.NsdManager.DiscoveryListener arg4)
        {
            IExecute("discoverServices", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#discoverServices(java.lang.String,int,android.net.nsd.NsdManager.DiscoveryListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Net.Nsd.NsdManager.DiscoveryListener"/></param>
        public void DiscoverServices(Java.Lang.String arg0, int arg1, Android.Net.Nsd.NsdManager.DiscoveryListener arg2)
        {
            IExecute("discoverServices", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#registerService(android.net.nsd.NsdServiceInfo,int,android.net.nsd.NsdManager.RegistrationListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Net.Nsd.NsdManager.RegistrationListener"/></param>
        public void RegisterService(Android.Net.Nsd.NsdServiceInfo arg0, int arg1, Android.Net.Nsd.NsdManager.RegistrationListener arg2)
        {
            IExecute("registerService", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#registerService(android.net.nsd.NsdServiceInfo,int,java.util.concurrent.Executor,android.net.nsd.NsdManager.RegistrationListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Android.Net.Nsd.NsdManager.RegistrationListener"/></param>
        public void RegisterService(Android.Net.Nsd.NsdServiceInfo arg0, int arg1, Java.Util.Concurrent.Executor arg2, Android.Net.Nsd.NsdManager.RegistrationListener arg3)
        {
            IExecute("registerService", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#registerServiceInfoCallback(android.net.nsd.NsdServiceInfo,java.util.concurrent.Executor,android.net.nsd.NsdManager.ServiceInfoCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Net.Nsd.NsdManager.ServiceInfoCallback"/></param>
        public void RegisterServiceInfoCallback(Android.Net.Nsd.NsdServiceInfo arg0, Java.Util.Concurrent.Executor arg1, Android.Net.Nsd.NsdManager.ServiceInfoCallback arg2)
        {
            IExecute("registerServiceInfoCallback", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#stopServiceDiscovery(android.net.nsd.NsdManager.DiscoveryListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Nsd.NsdManager.DiscoveryListener"/></param>
        public void StopServiceDiscovery(Android.Net.Nsd.NsdManager.DiscoveryListener arg0)
        {
            IExecuteWithSignature("stopServiceDiscovery", "(Landroid/net/nsd/NsdManager$DiscoveryListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#stopServiceResolution(android.net.nsd.NsdManager.ResolveListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Nsd.NsdManager.ResolveListener"/></param>
        public void StopServiceResolution(Android.Net.Nsd.NsdManager.ResolveListener arg0)
        {
            IExecuteWithSignature("stopServiceResolution", "(Landroid/net/nsd/NsdManager$ResolveListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#unregisterService(android.net.nsd.NsdManager.RegistrationListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Nsd.NsdManager.RegistrationListener"/></param>
        public void UnregisterService(Android.Net.Nsd.NsdManager.RegistrationListener arg0)
        {
            IExecuteWithSignature("unregisterService", "(Landroid/net/nsd/NsdManager$RegistrationListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.html#unregisterServiceInfoCallback(android.net.nsd.NsdManager.ServiceInfoCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Nsd.NsdManager.ServiceInfoCallback"/></param>
        public void UnregisterServiceInfoCallback(Android.Net.Nsd.NsdManager.ServiceInfoCallback arg0)
        {
            IExecuteWithSignature("unregisterServiceInfoCallback", "(Landroid/net/nsd/NsdManager$ServiceInfoCallback;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region DiscoveryListener
        public partial class DiscoveryListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="DiscoveryListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDiscoveryStarted", new System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(OnDiscoveryStartedEventHandler));
                AddEventHandler("onDiscoveryStopped", new System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(OnDiscoveryStoppedEventHandler));
                AddEventHandler("onServiceFound", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>>>(OnServiceFoundEventHandler));
                AddEventHandler("onServiceLost", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>>>(OnServiceLostEventHandler));
                AddEventHandler("onStartDiscoveryFailed", new System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(OnStartDiscoveryFailedEventHandler));
                AddEventHandler("onStopDiscoveryFailed", new System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(OnStopDiscoveryFailedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onDiscoveryStarted(java.lang.String)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDiscoveryStarted"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Java.Lang.String> OnOnDiscoveryStarted { get; set; } = null;

            void OnDiscoveryStartedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
            {
                var methodToExecute = (OnOnDiscoveryStarted != null) ? OnOnDiscoveryStarted : OnDiscoveryStarted;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onDiscoveryStarted(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public virtual void OnDiscoveryStarted(Java.Lang.String arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onDiscoveryStopped(java.lang.String)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDiscoveryStopped"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Java.Lang.String> OnOnDiscoveryStopped { get; set; } = null;

            void OnDiscoveryStoppedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
            {
                var methodToExecute = (OnOnDiscoveryStopped != null) ? OnOnDiscoveryStopped : OnDiscoveryStopped;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onDiscoveryStopped(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public virtual void OnDiscoveryStopped(Java.Lang.String arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onServiceFound(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnServiceFound"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Nsd.NsdServiceInfo> OnOnServiceFound { get; set; } = null;

            void OnServiceFoundEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>> data)
            {
                var methodToExecute = (OnOnServiceFound != null) ? OnOnServiceFound : OnServiceFound;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onServiceFound(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            public virtual void OnServiceFound(Android.Net.Nsd.NsdServiceInfo arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onServiceLost(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnServiceLost"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Nsd.NsdServiceInfo> OnOnServiceLost { get; set; } = null;

            void OnServiceLostEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>> data)
            {
                var methodToExecute = (OnOnServiceLost != null) ? OnOnServiceLost : OnServiceLost;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onServiceLost(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            public virtual void OnServiceLost(Android.Net.Nsd.NsdServiceInfo arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onStartDiscoveryFailed(java.lang.String,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnStartDiscoveryFailed"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Java.Lang.String, int> OnOnStartDiscoveryFailed { get; set; } = null;

            void OnStartDiscoveryFailedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
            {
                var methodToExecute = (OnOnStartDiscoveryFailed != null) ? OnOnStartDiscoveryFailed : OnStartDiscoveryFailed;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onStartDiscoveryFailed(java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public virtual void OnStartDiscoveryFailed(Java.Lang.String arg0, int arg1)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onStopDiscoveryFailed(java.lang.String,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnStopDiscoveryFailed"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Java.Lang.String, int> OnOnStopDiscoveryFailed { get; set; } = null;

            void OnStopDiscoveryFailedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
            {
                var methodToExecute = (OnOnStopDiscoveryFailed != null) ? OnOnStopDiscoveryFailed : OnStopDiscoveryFailed;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onStopDiscoveryFailed(java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public virtual void OnStopDiscoveryFailed(Java.Lang.String arg0, int arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DiscoveryListenerDirect
        public partial class DiscoveryListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onDiscoveryStarted(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public override void OnDiscoveryStarted(Java.Lang.String arg0)
            {
                IExecuteWithSignature("onDiscoveryStarted", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onDiscoveryStopped(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public override void OnDiscoveryStopped(Java.Lang.String arg0)
            {
                IExecuteWithSignature("onDiscoveryStopped", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onServiceFound(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            public override void OnServiceFound(Android.Net.Nsd.NsdServiceInfo arg0)
            {
                IExecuteWithSignature("onServiceFound", "(Landroid/net/nsd/NsdServiceInfo;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onServiceLost(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            public override void OnServiceLost(Android.Net.Nsd.NsdServiceInfo arg0)
            {
                IExecuteWithSignature("onServiceLost", "(Landroid/net/nsd/NsdServiceInfo;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onStartDiscoveryFailed(java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public override void OnStartDiscoveryFailed(Java.Lang.String arg0, int arg1)
            {
                IExecute("onStartDiscoveryFailed", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.DiscoveryListener.html#onStopDiscoveryFailed(java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public override void OnStopDiscoveryFailed(Java.Lang.String arg0, int arg1)
            {
                IExecute("onStopDiscoveryFailed", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RegistrationListener
        public partial class RegistrationListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="RegistrationListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onRegistrationFailed", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>>>(OnRegistrationFailedEventHandler));
                AddEventHandler("onServiceRegistered", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>>>(OnServiceRegisteredEventHandler));
                AddEventHandler("onServiceUnregistered", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>>>(OnServiceUnregisteredEventHandler));
                AddEventHandler("onUnregistrationFailed", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>>>(OnUnregistrationFailedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onRegistrationFailed(android.net.nsd.NsdServiceInfo,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnRegistrationFailed"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Nsd.NsdServiceInfo, int> OnOnRegistrationFailed { get; set; } = null;

            void OnRegistrationFailedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>> data)
            {
                var methodToExecute = (OnOnRegistrationFailed != null) ? OnOnRegistrationFailed : OnRegistrationFailed;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onRegistrationFailed(android.net.nsd.NsdServiceInfo,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public virtual void OnRegistrationFailed(Android.Net.Nsd.NsdServiceInfo arg0, int arg1)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onServiceRegistered(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnServiceRegistered"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Nsd.NsdServiceInfo> OnOnServiceRegistered { get; set; } = null;

            void OnServiceRegisteredEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>> data)
            {
                var methodToExecute = (OnOnServiceRegistered != null) ? OnOnServiceRegistered : OnServiceRegistered;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onServiceRegistered(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            public virtual void OnServiceRegistered(Android.Net.Nsd.NsdServiceInfo arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onServiceUnregistered(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnServiceUnregistered"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Nsd.NsdServiceInfo> OnOnServiceUnregistered { get; set; } = null;

            void OnServiceUnregisteredEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>> data)
            {
                var methodToExecute = (OnOnServiceUnregistered != null) ? OnOnServiceUnregistered : OnServiceUnregistered;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onServiceUnregistered(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            public virtual void OnServiceUnregistered(Android.Net.Nsd.NsdServiceInfo arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onUnregistrationFailed(android.net.nsd.NsdServiceInfo,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnUnregistrationFailed"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Nsd.NsdServiceInfo, int> OnOnUnregistrationFailed { get; set; } = null;

            void OnUnregistrationFailedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>> data)
            {
                var methodToExecute = (OnOnUnregistrationFailed != null) ? OnOnUnregistrationFailed : OnUnregistrationFailed;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onUnregistrationFailed(android.net.nsd.NsdServiceInfo,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public virtual void OnUnregistrationFailed(Android.Net.Nsd.NsdServiceInfo arg0, int arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RegistrationListenerDirect
        public partial class RegistrationListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onRegistrationFailed(android.net.nsd.NsdServiceInfo,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public override void OnRegistrationFailed(Android.Net.Nsd.NsdServiceInfo arg0, int arg1)
            {
                IExecute("onRegistrationFailed", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onServiceRegistered(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            public override void OnServiceRegistered(Android.Net.Nsd.NsdServiceInfo arg0)
            {
                IExecuteWithSignature("onServiceRegistered", "(Landroid/net/nsd/NsdServiceInfo;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onServiceUnregistered(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            public override void OnServiceUnregistered(Android.Net.Nsd.NsdServiceInfo arg0)
            {
                IExecuteWithSignature("onServiceUnregistered", "(Landroid/net/nsd/NsdServiceInfo;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onUnregistrationFailed(android.net.nsd.NsdServiceInfo,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public override void OnUnregistrationFailed(Android.Net.Nsd.NsdServiceInfo arg0, int arg1)
            {
                IExecute("onUnregistrationFailed", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ResolveListener
        public partial class ResolveListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="ResolveListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onResolveFailed", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>>>(OnResolveFailedEventHandler));
                AddEventHandler("onServiceResolved", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>>>(OnServiceResolvedEventHandler));
                AddEventHandler("onResolutionStopped", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>>>(OnResolutionStoppedEventHandler));
                AddEventHandler("onStopResolutionFailed", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>>>(OnStopResolutionFailedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html#onResolveFailed(android.net.nsd.NsdServiceInfo,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnResolveFailed"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Nsd.NsdServiceInfo, int> OnOnResolveFailed { get; set; } = null;

            void OnResolveFailedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>> data)
            {
                var methodToExecute = (OnOnResolveFailed != null) ? OnOnResolveFailed : OnResolveFailed;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html#onResolveFailed(android.net.nsd.NsdServiceInfo,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public virtual void OnResolveFailed(Android.Net.Nsd.NsdServiceInfo arg0, int arg1)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html#onServiceResolved(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnServiceResolved"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Nsd.NsdServiceInfo> OnOnServiceResolved { get; set; } = null;

            void OnServiceResolvedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>> data)
            {
                var methodToExecute = (OnOnServiceResolved != null) ? OnOnServiceResolved : OnServiceResolved;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html#onServiceResolved(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            public virtual void OnServiceResolved(Android.Net.Nsd.NsdServiceInfo arg0)
            {
                
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html#onResolutionStopped(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnResolutionStoppedDefault(Android.Net.Nsd.NsdServiceInfo arg0)
            {
                IExecuteWithSignature("onResolutionStoppedDefault", "(Landroid/net/nsd/NsdServiceInfo;)V", arg0);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html#onResolutionStopped(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnResolutionStopped"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Nsd.NsdServiceInfo> OnOnResolutionStopped { get; set; } = null;

            void OnResolutionStoppedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>> data)
            {
                var methodToExecute = (OnOnResolutionStopped != null) ? OnOnResolutionStopped : OnResolutionStopped;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html#onResolutionStopped(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnResolutionStoppedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnResolutionStopped(Android.Net.Nsd.NsdServiceInfo arg0)
            {
                OnResolutionStoppedDefault(arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html#onStopResolutionFailed(android.net.nsd.NsdServiceInfo,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnStopResolutionFailedDefault(Android.Net.Nsd.NsdServiceInfo arg0, int arg1)
            {
                IExecute("onStopResolutionFailedDefault", arg0, arg1);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html#onStopResolutionFailed(android.net.nsd.NsdServiceInfo,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnStopResolutionFailed"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Nsd.NsdServiceInfo, int> OnOnStopResolutionFailed { get; set; } = null;

            void OnStopResolutionFailedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Nsd.NsdServiceInfo>> data)
            {
                var methodToExecute = (OnOnStopResolutionFailed != null) ? OnOnStopResolutionFailed : OnStopResolutionFailed;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html#onStopResolutionFailed(android.net.nsd.NsdServiceInfo,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnStopResolutionFailedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnStopResolutionFailed(Android.Net.Nsd.NsdServiceInfo arg0, int arg1)
            {
                OnStopResolutionFailedDefault(arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ResolveListenerDirect
        public partial class ResolveListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html#onResolveFailed(android.net.nsd.NsdServiceInfo,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public override void OnResolveFailed(Android.Net.Nsd.NsdServiceInfo arg0, int arg1)
            {
                IExecute("onResolveFailed", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html#onServiceResolved(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            public override void OnServiceResolved(Android.Net.Nsd.NsdServiceInfo arg0)
            {
                IExecuteWithSignature("onServiceResolved", "(Landroid/net/nsd/NsdServiceInfo;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html#onResolutionStopped(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            public override void OnResolutionStopped(Android.Net.Nsd.NsdServiceInfo arg0)
            {
                IExecuteWithSignature("onResolutionStopped", "(Landroid/net/nsd/NsdServiceInfo;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ResolveListener.html#onStopResolutionFailed(android.net.nsd.NsdServiceInfo,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public override void OnStopResolutionFailed(Android.Net.Nsd.NsdServiceInfo arg0, int arg1)
            {
                IExecute("onStopResolutionFailed", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ServiceInfoCallback
        public partial class ServiceInfoCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ServiceInfoCallback.html#onServiceInfoCallbackRegistrationFailed(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnServiceInfoCallbackRegistrationFailed(int arg0)
            {
                IExecuteWithSignature("onServiceInfoCallbackRegistrationFailed", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ServiceInfoCallback.html#onServiceInfoCallbackUnregistered()"/>
            /// </summary>
            public void OnServiceInfoCallbackUnregistered()
            {
                IExecuteWithSignature("onServiceInfoCallbackUnregistered", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ServiceInfoCallback.html#onServiceLost()"/>
            /// </summary>
            public void OnServiceLost()
            {
                IExecuteWithSignature("onServiceLost", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/nsd/NsdManager.ServiceInfoCallback.html#onServiceUpdated(android.net.nsd.NsdServiceInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Nsd.NsdServiceInfo"/></param>
            public void OnServiceUpdated(Android.Net.Nsd.NsdServiceInfo arg0)
            {
                IExecuteWithSignature("onServiceUpdated", "(Landroid/net/nsd/NsdServiceInfo;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
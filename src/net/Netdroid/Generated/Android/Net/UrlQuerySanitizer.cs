/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net
{
    #region UrlQuerySanitizer
    public partial class UrlQuerySanitizer
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#%3Cinit%3E(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public UrlQuerySanitizer(Java.Lang.String arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAllButNulAndAngleBracketsLegal()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.UrlQuerySanitizer.ValueSanitizer"/></returns>
        public static Android.Net.UrlQuerySanitizer.ValueSanitizer GetAllButNulAndAngleBracketsLegal()
        {
            return SExecuteWithSignature<Android.Net.UrlQuerySanitizer.ValueSanitizer>(LocalBridgeClazz, "getAllButNulAndAngleBracketsLegal", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAllButNulLegal()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.UrlQuerySanitizer.ValueSanitizer"/></returns>
        public static Android.Net.UrlQuerySanitizer.ValueSanitizer GetAllButNulLegal()
        {
            return SExecuteWithSignature<Android.Net.UrlQuerySanitizer.ValueSanitizer>(LocalBridgeClazz, "getAllButNulLegal", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAllButWhitespaceLegal()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.UrlQuerySanitizer.ValueSanitizer"/></returns>
        public static Android.Net.UrlQuerySanitizer.ValueSanitizer GetAllButWhitespaceLegal()
        {
            return SExecuteWithSignature<Android.Net.UrlQuerySanitizer.ValueSanitizer>(LocalBridgeClazz, "getAllButWhitespaceLegal", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAllIllegal()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.UrlQuerySanitizer.ValueSanitizer"/></returns>
        public static Android.Net.UrlQuerySanitizer.ValueSanitizer GetAllIllegal()
        {
            return SExecuteWithSignature<Android.Net.UrlQuerySanitizer.ValueSanitizer>(LocalBridgeClazz, "getAllIllegal", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAmpAndSpaceLegal()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.UrlQuerySanitizer.ValueSanitizer"/></returns>
        public static Android.Net.UrlQuerySanitizer.ValueSanitizer GetAmpAndSpaceLegal()
        {
            return SExecuteWithSignature<Android.Net.UrlQuerySanitizer.ValueSanitizer>(LocalBridgeClazz, "getAmpAndSpaceLegal", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAmpLegal()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.UrlQuerySanitizer.ValueSanitizer"/></returns>
        public static Android.Net.UrlQuerySanitizer.ValueSanitizer GetAmpLegal()
        {
            return SExecuteWithSignature<Android.Net.UrlQuerySanitizer.ValueSanitizer>(LocalBridgeClazz, "getAmpLegal", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getSpaceLegal()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.UrlQuerySanitizer.ValueSanitizer"/></returns>
        public static Android.Net.UrlQuerySanitizer.ValueSanitizer GetSpaceLegal()
        {
            return SExecuteWithSignature<Android.Net.UrlQuerySanitizer.ValueSanitizer>(LocalBridgeClazz, "getSpaceLegal", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getUrlAndSpaceLegal()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.UrlQuerySanitizer.ValueSanitizer"/></returns>
        public static Android.Net.UrlQuerySanitizer.ValueSanitizer GetUrlAndSpaceLegal()
        {
            return SExecuteWithSignature<Android.Net.UrlQuerySanitizer.ValueSanitizer>(LocalBridgeClazz, "getUrlAndSpaceLegal", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getUrlLegal()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.UrlQuerySanitizer.ValueSanitizer"/></returns>
        public static Android.Net.UrlQuerySanitizer.ValueSanitizer GetUrlLegal()
        {
            return SExecuteWithSignature<Android.Net.UrlQuerySanitizer.ValueSanitizer>(LocalBridgeClazz, "getUrlLegal", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getEffectiveValueSanitizer(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Net.UrlQuerySanitizer.ValueSanitizer"/></returns>
        public Android.Net.UrlQuerySanitizer.ValueSanitizer GetEffectiveValueSanitizer(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Net.UrlQuerySanitizer.ValueSanitizer>("getEffectiveValueSanitizer", "(Ljava/lang/String;)Landroid/net/UrlQuerySanitizer$ValueSanitizer;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getUnregisteredParameterValueSanitizer()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.UrlQuerySanitizer.ValueSanitizer"/></returns>
        public Android.Net.UrlQuerySanitizer.ValueSanitizer GetUnregisteredParameterValueSanitizer()
        {
            return IExecuteWithSignature<Android.Net.UrlQuerySanitizer.ValueSanitizer>("getUnregisteredParameterValueSanitizer", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getValueSanitizer(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Net.UrlQuerySanitizer.ValueSanitizer"/></returns>
        public Android.Net.UrlQuerySanitizer.ValueSanitizer GetValueSanitizer(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Net.UrlQuerySanitizer.ValueSanitizer>("getValueSanitizer", "(Ljava/lang/String;)Landroid/net/UrlQuerySanitizer$ValueSanitizer;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAllowUnregisteredParamaters()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetAllowUnregisteredParamaters()
        {
            return IExecuteWithSignature<bool>("getAllowUnregisteredParamaters", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getPreferFirstRepeatedParameter()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetPreferFirstRepeatedParameter()
        {
            return IExecuteWithSignature<bool>("getPreferFirstRepeatedParameter", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#hasParameter(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasParameter(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("hasParameter", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getValue(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetValue(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getValue", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#unescape(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String Unescape(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("unescape", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getParameterList()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Net.UrlQuerySanitizer.ParameterValuePair> GetParameterList()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Net.UrlQuerySanitizer.ParameterValuePair>>("getParameterList", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getParameterSet()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.String> GetParameterSet()
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getParameterSet", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#parseQuery(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void ParseQuery(Java.Lang.String arg0)
        {
            IExecuteWithSignature("parseQuery", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#parseUrl(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void ParseUrl(Java.Lang.String arg0)
        {
            IExecuteWithSignature("parseUrl", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#registerParameter(java.lang.String,android.net.UrlQuerySanitizer.ValueSanitizer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Net.UrlQuerySanitizer.ValueSanitizer"/></param>
        public void RegisterParameter(Java.Lang.String arg0, Android.Net.UrlQuerySanitizer.ValueSanitizer arg1)
        {
            IExecute("registerParameter", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#registerParameters(java.lang.String[],android.net.UrlQuerySanitizer.ValueSanitizer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Net.UrlQuerySanitizer.ValueSanitizer"/></param>
        public void RegisterParameters(Java.Lang.String[] arg0, Android.Net.UrlQuerySanitizer.ValueSanitizer arg1)
        {
            IExecute("registerParameters", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#setAllowUnregisteredParamaters(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAllowUnregisteredParamaters(bool arg0)
        {
            IExecuteWithSignature("setAllowUnregisteredParamaters", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#setPreferFirstRepeatedParameter(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetPreferFirstRepeatedParameter(bool arg0)
        {
            IExecuteWithSignature("setPreferFirstRepeatedParameter", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#setUnregisteredParameterValueSanitizer(android.net.UrlQuerySanitizer.ValueSanitizer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.UrlQuerySanitizer.ValueSanitizer"/></param>
        public void SetUnregisteredParameterValueSanitizer(Android.Net.UrlQuerySanitizer.ValueSanitizer arg0)
        {
            IExecuteWithSignature("setUnregisteredParameterValueSanitizer", "(Landroid/net/UrlQuerySanitizer$ValueSanitizer;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region IllegalCharacterValueSanitizer
        public partial class IllegalCharacterValueSanitizer
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#%3Cinit%3E(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public IllegalCharacterValueSanitizer(int arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL"/>
            /// </summary>
            public static int ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL { get { if (!_ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGALReady) { _ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGALContent = SGetField<int>(LocalBridgeClazz, "ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGAL"); _ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGALReady = true; } return _ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGALContent; } }
            private static int _ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGALContent = default;
            private static bool _ALL_BUT_NUL_AND_ANGLE_BRACKETS_LEGALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#ALL_BUT_NUL_LEGAL"/>
            /// </summary>
            public static int ALL_BUT_NUL_LEGAL { get { if (!_ALL_BUT_NUL_LEGALReady) { _ALL_BUT_NUL_LEGALContent = SGetField<int>(LocalBridgeClazz, "ALL_BUT_NUL_LEGAL"); _ALL_BUT_NUL_LEGALReady = true; } return _ALL_BUT_NUL_LEGALContent; } }
            private static int _ALL_BUT_NUL_LEGALContent = default;
            private static bool _ALL_BUT_NUL_LEGALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#ALL_BUT_WHITESPACE_LEGAL"/>
            /// </summary>
            public static int ALL_BUT_WHITESPACE_LEGAL { get { if (!_ALL_BUT_WHITESPACE_LEGALReady) { _ALL_BUT_WHITESPACE_LEGALContent = SGetField<int>(LocalBridgeClazz, "ALL_BUT_WHITESPACE_LEGAL"); _ALL_BUT_WHITESPACE_LEGALReady = true; } return _ALL_BUT_WHITESPACE_LEGALContent; } }
            private static int _ALL_BUT_WHITESPACE_LEGALContent = default;
            private static bool _ALL_BUT_WHITESPACE_LEGALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#ALL_ILLEGAL"/>
            /// </summary>
            public static int ALL_ILLEGAL { get { if (!_ALL_ILLEGALReady) { _ALL_ILLEGALContent = SGetField<int>(LocalBridgeClazz, "ALL_ILLEGAL"); _ALL_ILLEGALReady = true; } return _ALL_ILLEGALContent; } }
            private static int _ALL_ILLEGALContent = default;
            private static bool _ALL_ILLEGALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#ALL_OK"/>
            /// </summary>
            public static int ALL_OK { get { if (!_ALL_OKReady) { _ALL_OKContent = SGetField<int>(LocalBridgeClazz, "ALL_OK"); _ALL_OKReady = true; } return _ALL_OKContent; } }
            private static int _ALL_OKContent = default;
            private static bool _ALL_OKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#ALL_WHITESPACE_OK"/>
            /// </summary>
            public static int ALL_WHITESPACE_OK { get { if (!_ALL_WHITESPACE_OKReady) { _ALL_WHITESPACE_OKContent = SGetField<int>(LocalBridgeClazz, "ALL_WHITESPACE_OK"); _ALL_WHITESPACE_OKReady = true; } return _ALL_WHITESPACE_OKContent; } }
            private static int _ALL_WHITESPACE_OKContent = default;
            private static bool _ALL_WHITESPACE_OKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#AMP_AND_SPACE_LEGAL"/>
            /// </summary>
            public static int AMP_AND_SPACE_LEGAL { get { if (!_AMP_AND_SPACE_LEGALReady) { _AMP_AND_SPACE_LEGALContent = SGetField<int>(LocalBridgeClazz, "AMP_AND_SPACE_LEGAL"); _AMP_AND_SPACE_LEGALReady = true; } return _AMP_AND_SPACE_LEGALContent; } }
            private static int _AMP_AND_SPACE_LEGALContent = default;
            private static bool _AMP_AND_SPACE_LEGALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#AMP_LEGAL"/>
            /// </summary>
            public static int AMP_LEGAL { get { if (!_AMP_LEGALReady) { _AMP_LEGALContent = SGetField<int>(LocalBridgeClazz, "AMP_LEGAL"); _AMP_LEGALReady = true; } return _AMP_LEGALContent; } }
            private static int _AMP_LEGALContent = default;
            private static bool _AMP_LEGALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#AMP_OK"/>
            /// </summary>
            public static int AMP_OK { get { if (!_AMP_OKReady) { _AMP_OKContent = SGetField<int>(LocalBridgeClazz, "AMP_OK"); _AMP_OKReady = true; } return _AMP_OKContent; } }
            private static int _AMP_OKContent = default;
            private static bool _AMP_OKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#DQUOTE_OK"/>
            /// </summary>
            public static int DQUOTE_OK { get { if (!_DQUOTE_OKReady) { _DQUOTE_OKContent = SGetField<int>(LocalBridgeClazz, "DQUOTE_OK"); _DQUOTE_OKReady = true; } return _DQUOTE_OKContent; } }
            private static int _DQUOTE_OKContent = default;
            private static bool _DQUOTE_OKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#GT_OK"/>
            /// </summary>
            public static int GT_OK { get { if (!_GT_OKReady) { _GT_OKContent = SGetField<int>(LocalBridgeClazz, "GT_OK"); _GT_OKReady = true; } return _GT_OKContent; } }
            private static int _GT_OKContent = default;
            private static bool _GT_OKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#LT_OK"/>
            /// </summary>
            public static int LT_OK { get { if (!_LT_OKReady) { _LT_OKContent = SGetField<int>(LocalBridgeClazz, "LT_OK"); _LT_OKReady = true; } return _LT_OKContent; } }
            private static int _LT_OKContent = default;
            private static bool _LT_OKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#NON_7_BIT_ASCII_OK"/>
            /// </summary>
            public static int NON_7_BIT_ASCII_OK { get { if (!_NON_7_BIT_ASCII_OKReady) { _NON_7_BIT_ASCII_OKContent = SGetField<int>(LocalBridgeClazz, "NON_7_BIT_ASCII_OK"); _NON_7_BIT_ASCII_OKReady = true; } return _NON_7_BIT_ASCII_OKContent; } }
            private static int _NON_7_BIT_ASCII_OKContent = default;
            private static bool _NON_7_BIT_ASCII_OKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#NUL_OK"/>
            /// </summary>
            public static int NUL_OK { get { if (!_NUL_OKReady) { _NUL_OKContent = SGetField<int>(LocalBridgeClazz, "NUL_OK"); _NUL_OKReady = true; } return _NUL_OKContent; } }
            private static int _NUL_OKContent = default;
            private static bool _NUL_OKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#OTHER_WHITESPACE_OK"/>
            /// </summary>
            public static int OTHER_WHITESPACE_OK { get { if (!_OTHER_WHITESPACE_OKReady) { _OTHER_WHITESPACE_OKContent = SGetField<int>(LocalBridgeClazz, "OTHER_WHITESPACE_OK"); _OTHER_WHITESPACE_OKReady = true; } return _OTHER_WHITESPACE_OKContent; } }
            private static int _OTHER_WHITESPACE_OKContent = default;
            private static bool _OTHER_WHITESPACE_OKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#PCT_OK"/>
            /// </summary>
            public static int PCT_OK { get { if (!_PCT_OKReady) { _PCT_OKContent = SGetField<int>(LocalBridgeClazz, "PCT_OK"); _PCT_OKReady = true; } return _PCT_OKContent; } }
            private static int _PCT_OKContent = default;
            private static bool _PCT_OKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#SCRIPT_URL_OK"/>
            /// </summary>
            public static int SCRIPT_URL_OK { get { if (!_SCRIPT_URL_OKReady) { _SCRIPT_URL_OKContent = SGetField<int>(LocalBridgeClazz, "SCRIPT_URL_OK"); _SCRIPT_URL_OKReady = true; } return _SCRIPT_URL_OKContent; } }
            private static int _SCRIPT_URL_OKContent = default;
            private static bool _SCRIPT_URL_OKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#SPACE_LEGAL"/>
            /// </summary>
            public static int SPACE_LEGAL { get { if (!_SPACE_LEGALReady) { _SPACE_LEGALContent = SGetField<int>(LocalBridgeClazz, "SPACE_LEGAL"); _SPACE_LEGALReady = true; } return _SPACE_LEGALContent; } }
            private static int _SPACE_LEGALContent = default;
            private static bool _SPACE_LEGALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#SPACE_OK"/>
            /// </summary>
            public static int SPACE_OK { get { if (!_SPACE_OKReady) { _SPACE_OKContent = SGetField<int>(LocalBridgeClazz, "SPACE_OK"); _SPACE_OKReady = true; } return _SPACE_OKContent; } }
            private static int _SPACE_OKContent = default;
            private static bool _SPACE_OKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#SQUOTE_OK"/>
            /// </summary>
            public static int SQUOTE_OK { get { if (!_SQUOTE_OKReady) { _SQUOTE_OKContent = SGetField<int>(LocalBridgeClazz, "SQUOTE_OK"); _SQUOTE_OKReady = true; } return _SQUOTE_OKContent; } }
            private static int _SQUOTE_OKContent = default;
            private static bool _SQUOTE_OKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#URL_AND_SPACE_LEGAL"/>
            /// </summary>
            public static int URL_AND_SPACE_LEGAL { get { if (!_URL_AND_SPACE_LEGALReady) { _URL_AND_SPACE_LEGALContent = SGetField<int>(LocalBridgeClazz, "URL_AND_SPACE_LEGAL"); _URL_AND_SPACE_LEGALReady = true; } return _URL_AND_SPACE_LEGALContent; } }
            private static int _URL_AND_SPACE_LEGALContent = default;
            private static bool _URL_AND_SPACE_LEGALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#URL_LEGAL"/>
            /// </summary>
            public static int URL_LEGAL { get { if (!_URL_LEGALReady) { _URL_LEGALContent = SGetField<int>(LocalBridgeClazz, "URL_LEGAL"); _URL_LEGALReady = true; } return _URL_LEGALContent; } }
            private static int _URL_LEGALContent = default;
            private static bool _URL_LEGALReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.IllegalCharacterValueSanitizer.html#sanitize(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String Sanitize(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Java.Lang.String>("sanitize", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ParameterValuePair
        public partial class ParameterValuePair
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.ParameterValuePair.html#%3Cinit%3E(android.net.UrlQuerySanitizer,java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.UrlQuerySanitizer"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            public ParameterValuePair(Android.Net.UrlQuerySanitizer arg0, Java.Lang.String arg1, Java.Lang.String arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.ParameterValuePair.html#mParameter"/>
            /// </summary>
            public Java.Lang.String mParameter { get { return IGetField<Java.Lang.String>("mParameter"); } set { ISetField("mParameter", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.ParameterValuePair.html#mValue"/>
            /// </summary>
            public Java.Lang.String mValue { get { return IGetField<Java.Lang.String>("mValue"); } set { ISetField("mValue", value); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ValueSanitizer
        public partial class ValueSanitizer
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/UrlQuerySanitizer.ValueSanitizer.html#sanitize(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String Sanitize(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Java.Lang.String>("sanitize", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Ipsec.Ike
{
    #region SaProposal
    public partial class SaProposal
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#DH_GROUP_1024_BIT_MODP"/>
        /// </summary>
        public static int DH_GROUP_1024_BIT_MODP { get { if (!_DH_GROUP_1024_BIT_MODPReady) { _DH_GROUP_1024_BIT_MODPContent = SGetField<int>(LocalBridgeClazz, "DH_GROUP_1024_BIT_MODP"); _DH_GROUP_1024_BIT_MODPReady = true; } return _DH_GROUP_1024_BIT_MODPContent; } }
        private static int _DH_GROUP_1024_BIT_MODPContent = default;
        private static bool _DH_GROUP_1024_BIT_MODPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#DH_GROUP_1536_BIT_MODP"/>
        /// </summary>
        public static int DH_GROUP_1536_BIT_MODP { get { if (!_DH_GROUP_1536_BIT_MODPReady) { _DH_GROUP_1536_BIT_MODPContent = SGetField<int>(LocalBridgeClazz, "DH_GROUP_1536_BIT_MODP"); _DH_GROUP_1536_BIT_MODPReady = true; } return _DH_GROUP_1536_BIT_MODPContent; } }
        private static int _DH_GROUP_1536_BIT_MODPContent = default;
        private static bool _DH_GROUP_1536_BIT_MODPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#DH_GROUP_2048_BIT_MODP"/>
        /// </summary>
        public static int DH_GROUP_2048_BIT_MODP { get { if (!_DH_GROUP_2048_BIT_MODPReady) { _DH_GROUP_2048_BIT_MODPContent = SGetField<int>(LocalBridgeClazz, "DH_GROUP_2048_BIT_MODP"); _DH_GROUP_2048_BIT_MODPReady = true; } return _DH_GROUP_2048_BIT_MODPContent; } }
        private static int _DH_GROUP_2048_BIT_MODPContent = default;
        private static bool _DH_GROUP_2048_BIT_MODPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#DH_GROUP_3072_BIT_MODP"/>
        /// </summary>
        public static int DH_GROUP_3072_BIT_MODP { get { if (!_DH_GROUP_3072_BIT_MODPReady) { _DH_GROUP_3072_BIT_MODPContent = SGetField<int>(LocalBridgeClazz, "DH_GROUP_3072_BIT_MODP"); _DH_GROUP_3072_BIT_MODPReady = true; } return _DH_GROUP_3072_BIT_MODPContent; } }
        private static int _DH_GROUP_3072_BIT_MODPContent = default;
        private static bool _DH_GROUP_3072_BIT_MODPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#DH_GROUP_4096_BIT_MODP"/>
        /// </summary>
        public static int DH_GROUP_4096_BIT_MODP { get { if (!_DH_GROUP_4096_BIT_MODPReady) { _DH_GROUP_4096_BIT_MODPContent = SGetField<int>(LocalBridgeClazz, "DH_GROUP_4096_BIT_MODP"); _DH_GROUP_4096_BIT_MODPReady = true; } return _DH_GROUP_4096_BIT_MODPContent; } }
        private static int _DH_GROUP_4096_BIT_MODPContent = default;
        private static bool _DH_GROUP_4096_BIT_MODPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#DH_GROUP_CURVE_25519"/>
        /// </summary>
        public static int DH_GROUP_CURVE_25519 { get { if (!_DH_GROUP_CURVE_25519Ready) { _DH_GROUP_CURVE_25519Content = SGetField<int>(LocalBridgeClazz, "DH_GROUP_CURVE_25519"); _DH_GROUP_CURVE_25519Ready = true; } return _DH_GROUP_CURVE_25519Content; } }
        private static int _DH_GROUP_CURVE_25519Content = default;
        private static bool _DH_GROUP_CURVE_25519Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#DH_GROUP_NONE"/>
        /// </summary>
        public static int DH_GROUP_NONE { get { if (!_DH_GROUP_NONEReady) { _DH_GROUP_NONEContent = SGetField<int>(LocalBridgeClazz, "DH_GROUP_NONE"); _DH_GROUP_NONEReady = true; } return _DH_GROUP_NONEContent; } }
        private static int _DH_GROUP_NONEContent = default;
        private static bool _DH_GROUP_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#ENCRYPTION_ALGORITHM_3DES"/>
        /// </summary>
        public static int ENCRYPTION_ALGORITHM_3DES { get { if (!_ENCRYPTION_ALGORITHM_3DESReady) { _ENCRYPTION_ALGORITHM_3DESContent = SGetField<int>(LocalBridgeClazz, "ENCRYPTION_ALGORITHM_3DES"); _ENCRYPTION_ALGORITHM_3DESReady = true; } return _ENCRYPTION_ALGORITHM_3DESContent; } }
        private static int _ENCRYPTION_ALGORITHM_3DESContent = default;
        private static bool _ENCRYPTION_ALGORITHM_3DESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#ENCRYPTION_ALGORITHM_AES_CBC"/>
        /// </summary>
        public static int ENCRYPTION_ALGORITHM_AES_CBC { get { if (!_ENCRYPTION_ALGORITHM_AES_CBCReady) { _ENCRYPTION_ALGORITHM_AES_CBCContent = SGetField<int>(LocalBridgeClazz, "ENCRYPTION_ALGORITHM_AES_CBC"); _ENCRYPTION_ALGORITHM_AES_CBCReady = true; } return _ENCRYPTION_ALGORITHM_AES_CBCContent; } }
        private static int _ENCRYPTION_ALGORITHM_AES_CBCContent = default;
        private static bool _ENCRYPTION_ALGORITHM_AES_CBCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#ENCRYPTION_ALGORITHM_AES_CTR"/>
        /// </summary>
        public static int ENCRYPTION_ALGORITHM_AES_CTR { get { if (!_ENCRYPTION_ALGORITHM_AES_CTRReady) { _ENCRYPTION_ALGORITHM_AES_CTRContent = SGetField<int>(LocalBridgeClazz, "ENCRYPTION_ALGORITHM_AES_CTR"); _ENCRYPTION_ALGORITHM_AES_CTRReady = true; } return _ENCRYPTION_ALGORITHM_AES_CTRContent; } }
        private static int _ENCRYPTION_ALGORITHM_AES_CTRContent = default;
        private static bool _ENCRYPTION_ALGORITHM_AES_CTRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#ENCRYPTION_ALGORITHM_AES_GCM_12"/>
        /// </summary>
        public static int ENCRYPTION_ALGORITHM_AES_GCM_12 { get { if (!_ENCRYPTION_ALGORITHM_AES_GCM_12Ready) { _ENCRYPTION_ALGORITHM_AES_GCM_12Content = SGetField<int>(LocalBridgeClazz, "ENCRYPTION_ALGORITHM_AES_GCM_12"); _ENCRYPTION_ALGORITHM_AES_GCM_12Ready = true; } return _ENCRYPTION_ALGORITHM_AES_GCM_12Content; } }
        private static int _ENCRYPTION_ALGORITHM_AES_GCM_12Content = default;
        private static bool _ENCRYPTION_ALGORITHM_AES_GCM_12Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#ENCRYPTION_ALGORITHM_AES_GCM_16"/>
        /// </summary>
        public static int ENCRYPTION_ALGORITHM_AES_GCM_16 { get { if (!_ENCRYPTION_ALGORITHM_AES_GCM_16Ready) { _ENCRYPTION_ALGORITHM_AES_GCM_16Content = SGetField<int>(LocalBridgeClazz, "ENCRYPTION_ALGORITHM_AES_GCM_16"); _ENCRYPTION_ALGORITHM_AES_GCM_16Ready = true; } return _ENCRYPTION_ALGORITHM_AES_GCM_16Content; } }
        private static int _ENCRYPTION_ALGORITHM_AES_GCM_16Content = default;
        private static bool _ENCRYPTION_ALGORITHM_AES_GCM_16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#ENCRYPTION_ALGORITHM_AES_GCM_8"/>
        /// </summary>
        public static int ENCRYPTION_ALGORITHM_AES_GCM_8 { get { if (!_ENCRYPTION_ALGORITHM_AES_GCM_8Ready) { _ENCRYPTION_ALGORITHM_AES_GCM_8Content = SGetField<int>(LocalBridgeClazz, "ENCRYPTION_ALGORITHM_AES_GCM_8"); _ENCRYPTION_ALGORITHM_AES_GCM_8Ready = true; } return _ENCRYPTION_ALGORITHM_AES_GCM_8Content; } }
        private static int _ENCRYPTION_ALGORITHM_AES_GCM_8Content = default;
        private static bool _ENCRYPTION_ALGORITHM_AES_GCM_8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#ENCRYPTION_ALGORITHM_CHACHA20_POLY1305"/>
        /// </summary>
        public static int ENCRYPTION_ALGORITHM_CHACHA20_POLY1305 { get { if (!_ENCRYPTION_ALGORITHM_CHACHA20_POLY1305Ready) { _ENCRYPTION_ALGORITHM_CHACHA20_POLY1305Content = SGetField<int>(LocalBridgeClazz, "ENCRYPTION_ALGORITHM_CHACHA20_POLY1305"); _ENCRYPTION_ALGORITHM_CHACHA20_POLY1305Ready = true; } return _ENCRYPTION_ALGORITHM_CHACHA20_POLY1305Content; } }
        private static int _ENCRYPTION_ALGORITHM_CHACHA20_POLY1305Content = default;
        private static bool _ENCRYPTION_ALGORITHM_CHACHA20_POLY1305Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#INTEGRITY_ALGORITHM_AES_CMAC_96"/>
        /// </summary>
        public static int INTEGRITY_ALGORITHM_AES_CMAC_96 { get { if (!_INTEGRITY_ALGORITHM_AES_CMAC_96Ready) { _INTEGRITY_ALGORITHM_AES_CMAC_96Content = SGetField<int>(LocalBridgeClazz, "INTEGRITY_ALGORITHM_AES_CMAC_96"); _INTEGRITY_ALGORITHM_AES_CMAC_96Ready = true; } return _INTEGRITY_ALGORITHM_AES_CMAC_96Content; } }
        private static int _INTEGRITY_ALGORITHM_AES_CMAC_96Content = default;
        private static bool _INTEGRITY_ALGORITHM_AES_CMAC_96Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#INTEGRITY_ALGORITHM_AES_XCBC_96"/>
        /// </summary>
        public static int INTEGRITY_ALGORITHM_AES_XCBC_96 { get { if (!_INTEGRITY_ALGORITHM_AES_XCBC_96Ready) { _INTEGRITY_ALGORITHM_AES_XCBC_96Content = SGetField<int>(LocalBridgeClazz, "INTEGRITY_ALGORITHM_AES_XCBC_96"); _INTEGRITY_ALGORITHM_AES_XCBC_96Ready = true; } return _INTEGRITY_ALGORITHM_AES_XCBC_96Content; } }
        private static int _INTEGRITY_ALGORITHM_AES_XCBC_96Content = default;
        private static bool _INTEGRITY_ALGORITHM_AES_XCBC_96Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#INTEGRITY_ALGORITHM_HMAC_SHA1_96"/>
        /// </summary>
        public static int INTEGRITY_ALGORITHM_HMAC_SHA1_96 { get { if (!_INTEGRITY_ALGORITHM_HMAC_SHA1_96Ready) { _INTEGRITY_ALGORITHM_HMAC_SHA1_96Content = SGetField<int>(LocalBridgeClazz, "INTEGRITY_ALGORITHM_HMAC_SHA1_96"); _INTEGRITY_ALGORITHM_HMAC_SHA1_96Ready = true; } return _INTEGRITY_ALGORITHM_HMAC_SHA1_96Content; } }
        private static int _INTEGRITY_ALGORITHM_HMAC_SHA1_96Content = default;
        private static bool _INTEGRITY_ALGORITHM_HMAC_SHA1_96Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#INTEGRITY_ALGORITHM_HMAC_SHA2_256_128"/>
        /// </summary>
        public static int INTEGRITY_ALGORITHM_HMAC_SHA2_256_128 { get { if (!_INTEGRITY_ALGORITHM_HMAC_SHA2_256_128Ready) { _INTEGRITY_ALGORITHM_HMAC_SHA2_256_128Content = SGetField<int>(LocalBridgeClazz, "INTEGRITY_ALGORITHM_HMAC_SHA2_256_128"); _INTEGRITY_ALGORITHM_HMAC_SHA2_256_128Ready = true; } return _INTEGRITY_ALGORITHM_HMAC_SHA2_256_128Content; } }
        private static int _INTEGRITY_ALGORITHM_HMAC_SHA2_256_128Content = default;
        private static bool _INTEGRITY_ALGORITHM_HMAC_SHA2_256_128Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#INTEGRITY_ALGORITHM_HMAC_SHA2_384_192"/>
        /// </summary>
        public static int INTEGRITY_ALGORITHM_HMAC_SHA2_384_192 { get { if (!_INTEGRITY_ALGORITHM_HMAC_SHA2_384_192Ready) { _INTEGRITY_ALGORITHM_HMAC_SHA2_384_192Content = SGetField<int>(LocalBridgeClazz, "INTEGRITY_ALGORITHM_HMAC_SHA2_384_192"); _INTEGRITY_ALGORITHM_HMAC_SHA2_384_192Ready = true; } return _INTEGRITY_ALGORITHM_HMAC_SHA2_384_192Content; } }
        private static int _INTEGRITY_ALGORITHM_HMAC_SHA2_384_192Content = default;
        private static bool _INTEGRITY_ALGORITHM_HMAC_SHA2_384_192Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#INTEGRITY_ALGORITHM_HMAC_SHA2_512_256"/>
        /// </summary>
        public static int INTEGRITY_ALGORITHM_HMAC_SHA2_512_256 { get { if (!_INTEGRITY_ALGORITHM_HMAC_SHA2_512_256Ready) { _INTEGRITY_ALGORITHM_HMAC_SHA2_512_256Content = SGetField<int>(LocalBridgeClazz, "INTEGRITY_ALGORITHM_HMAC_SHA2_512_256"); _INTEGRITY_ALGORITHM_HMAC_SHA2_512_256Ready = true; } return _INTEGRITY_ALGORITHM_HMAC_SHA2_512_256Content; } }
        private static int _INTEGRITY_ALGORITHM_HMAC_SHA2_512_256Content = default;
        private static bool _INTEGRITY_ALGORITHM_HMAC_SHA2_512_256Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#INTEGRITY_ALGORITHM_NONE"/>
        /// </summary>
        public static int INTEGRITY_ALGORITHM_NONE { get { if (!_INTEGRITY_ALGORITHM_NONEReady) { _INTEGRITY_ALGORITHM_NONEContent = SGetField<int>(LocalBridgeClazz, "INTEGRITY_ALGORITHM_NONE"); _INTEGRITY_ALGORITHM_NONEReady = true; } return _INTEGRITY_ALGORITHM_NONEContent; } }
        private static int _INTEGRITY_ALGORITHM_NONEContent = default;
        private static bool _INTEGRITY_ALGORITHM_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#KEY_LEN_AES_128"/>
        /// </summary>
        public static int KEY_LEN_AES_128 { get { if (!_KEY_LEN_AES_128Ready) { _KEY_LEN_AES_128Content = SGetField<int>(LocalBridgeClazz, "KEY_LEN_AES_128"); _KEY_LEN_AES_128Ready = true; } return _KEY_LEN_AES_128Content; } }
        private static int _KEY_LEN_AES_128Content = default;
        private static bool _KEY_LEN_AES_128Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#KEY_LEN_AES_192"/>
        /// </summary>
        public static int KEY_LEN_AES_192 { get { if (!_KEY_LEN_AES_192Ready) { _KEY_LEN_AES_192Content = SGetField<int>(LocalBridgeClazz, "KEY_LEN_AES_192"); _KEY_LEN_AES_192Ready = true; } return _KEY_LEN_AES_192Content; } }
        private static int _KEY_LEN_AES_192Content = default;
        private static bool _KEY_LEN_AES_192Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#KEY_LEN_AES_256"/>
        /// </summary>
        public static int KEY_LEN_AES_256 { get { if (!_KEY_LEN_AES_256Ready) { _KEY_LEN_AES_256Content = SGetField<int>(LocalBridgeClazz, "KEY_LEN_AES_256"); _KEY_LEN_AES_256Ready = true; } return _KEY_LEN_AES_256Content; } }
        private static int _KEY_LEN_AES_256Content = default;
        private static bool _KEY_LEN_AES_256Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#KEY_LEN_UNUSED"/>
        /// </summary>
        public static int KEY_LEN_UNUSED { get { if (!_KEY_LEN_UNUSEDReady) { _KEY_LEN_UNUSEDContent = SGetField<int>(LocalBridgeClazz, "KEY_LEN_UNUSED"); _KEY_LEN_UNUSEDReady = true; } return _KEY_LEN_UNUSEDContent; } }
        private static int _KEY_LEN_UNUSEDContent = default;
        private static bool _KEY_LEN_UNUSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#PSEUDORANDOM_FUNCTION_AES128_CMAC"/>
        /// </summary>
        public static int PSEUDORANDOM_FUNCTION_AES128_CMAC { get { if (!_PSEUDORANDOM_FUNCTION_AES128_CMACReady) { _PSEUDORANDOM_FUNCTION_AES128_CMACContent = SGetField<int>(LocalBridgeClazz, "PSEUDORANDOM_FUNCTION_AES128_CMAC"); _PSEUDORANDOM_FUNCTION_AES128_CMACReady = true; } return _PSEUDORANDOM_FUNCTION_AES128_CMACContent; } }
        private static int _PSEUDORANDOM_FUNCTION_AES128_CMACContent = default;
        private static bool _PSEUDORANDOM_FUNCTION_AES128_CMACReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#PSEUDORANDOM_FUNCTION_AES128_XCBC"/>
        /// </summary>
        public static int PSEUDORANDOM_FUNCTION_AES128_XCBC { get { if (!_PSEUDORANDOM_FUNCTION_AES128_XCBCReady) { _PSEUDORANDOM_FUNCTION_AES128_XCBCContent = SGetField<int>(LocalBridgeClazz, "PSEUDORANDOM_FUNCTION_AES128_XCBC"); _PSEUDORANDOM_FUNCTION_AES128_XCBCReady = true; } return _PSEUDORANDOM_FUNCTION_AES128_XCBCContent; } }
        private static int _PSEUDORANDOM_FUNCTION_AES128_XCBCContent = default;
        private static bool _PSEUDORANDOM_FUNCTION_AES128_XCBCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#PSEUDORANDOM_FUNCTION_HMAC_SHA1"/>
        /// </summary>
        public static int PSEUDORANDOM_FUNCTION_HMAC_SHA1 { get { if (!_PSEUDORANDOM_FUNCTION_HMAC_SHA1Ready) { _PSEUDORANDOM_FUNCTION_HMAC_SHA1Content = SGetField<int>(LocalBridgeClazz, "PSEUDORANDOM_FUNCTION_HMAC_SHA1"); _PSEUDORANDOM_FUNCTION_HMAC_SHA1Ready = true; } return _PSEUDORANDOM_FUNCTION_HMAC_SHA1Content; } }
        private static int _PSEUDORANDOM_FUNCTION_HMAC_SHA1Content = default;
        private static bool _PSEUDORANDOM_FUNCTION_HMAC_SHA1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#PSEUDORANDOM_FUNCTION_SHA2_256"/>
        /// </summary>
        public static int PSEUDORANDOM_FUNCTION_SHA2_256 { get { if (!_PSEUDORANDOM_FUNCTION_SHA2_256Ready) { _PSEUDORANDOM_FUNCTION_SHA2_256Content = SGetField<int>(LocalBridgeClazz, "PSEUDORANDOM_FUNCTION_SHA2_256"); _PSEUDORANDOM_FUNCTION_SHA2_256Ready = true; } return _PSEUDORANDOM_FUNCTION_SHA2_256Content; } }
        private static int _PSEUDORANDOM_FUNCTION_SHA2_256Content = default;
        private static bool _PSEUDORANDOM_FUNCTION_SHA2_256Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#PSEUDORANDOM_FUNCTION_SHA2_384"/>
        /// </summary>
        public static int PSEUDORANDOM_FUNCTION_SHA2_384 { get { if (!_PSEUDORANDOM_FUNCTION_SHA2_384Ready) { _PSEUDORANDOM_FUNCTION_SHA2_384Content = SGetField<int>(LocalBridgeClazz, "PSEUDORANDOM_FUNCTION_SHA2_384"); _PSEUDORANDOM_FUNCTION_SHA2_384Ready = true; } return _PSEUDORANDOM_FUNCTION_SHA2_384Content; } }
        private static int _PSEUDORANDOM_FUNCTION_SHA2_384Content = default;
        private static bool _PSEUDORANDOM_FUNCTION_SHA2_384Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#PSEUDORANDOM_FUNCTION_SHA2_512"/>
        /// </summary>
        public static int PSEUDORANDOM_FUNCTION_SHA2_512 { get { if (!_PSEUDORANDOM_FUNCTION_SHA2_512Ready) { _PSEUDORANDOM_FUNCTION_SHA2_512Content = SGetField<int>(LocalBridgeClazz, "PSEUDORANDOM_FUNCTION_SHA2_512"); _PSEUDORANDOM_FUNCTION_SHA2_512Ready = true; } return _PSEUDORANDOM_FUNCTION_SHA2_512Content; } }
        private static int _PSEUDORANDOM_FUNCTION_SHA2_512Content = default;
        private static bool _PSEUDORANDOM_FUNCTION_SHA2_512Ready = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#getSupportedDhGroups()"/> 
        /// </summary>
        public static Java.Util.Set<Java.Lang.Integer> SupportedDhGroups
        {
            get { return SExecuteWithSignature<Java.Util.Set<Java.Lang.Integer>>(LocalBridgeClazz, "getSupportedDhGroups", "()Ljava/util/Set;"); }
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#getDhGroups()"/> 
        /// </summary>
        public Java.Util.List<Java.Lang.Integer> DhGroups
        {
            get { return IExecuteWithSignature<Java.Util.List<Java.Lang.Integer>>("getDhGroups", "()Ljava/util/List;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#getEncryptionAlgorithms()"/> 
        /// </summary>
        public Java.Util.List<Android.Util.Pair<Java.Lang.Integer, Java.Lang.Integer>> EncryptionAlgorithms
        {
            get { return IExecuteWithSignature<Java.Util.List<Android.Util.Pair<Java.Lang.Integer, Java.Lang.Integer>>>("getEncryptionAlgorithms", "()Ljava/util/List;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ipsec/ike/SaProposal.html#getIntegrityAlgorithms()"/> 
        /// </summary>
        public Java.Util.List<Java.Lang.Integer> IntegrityAlgorithms
        {
            get { return IExecuteWithSignature<Java.Util.List<Java.Lang.Integer>>("getIntegrityAlgorithms", "()Ljava/util/List;"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
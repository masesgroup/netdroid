/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Sip
{
    #region SipAudioCall
    public partial class SipAudioCall
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#%3Cinit%3E(android.content.Context,android.net.sip.SipProfile)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Net.Sip.SipProfile"/></param>
        [System.Obsolete()]
        public SipAudioCall(Android.Content.Context arg0, Android.Net.Sip.SipProfile arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#getLocalProfile()"/> 
        /// </summary>
        [System.Obsolete()]
        public Android.Net.Sip.SipProfile LocalProfile
        {
            get { return IExecuteWithSignature<Android.Net.Sip.SipProfile>("getLocalProfile", "()Landroid/net/sip/SipProfile;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#getPeerProfile()"/> 
        /// </summary>
        [System.Obsolete()]
        public Android.Net.Sip.SipProfile PeerProfile
        {
            get { return IExecuteWithSignature<Android.Net.Sip.SipProfile>("getPeerProfile", "()Landroid/net/sip/SipProfile;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#getState()"/> 
        /// </summary>
        [System.Obsolete()]
        public int State
        {
            get { return IExecuteWithSignature<int>("getState", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#isInCall()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [System.Obsolete()]
        public bool IsInCall()
        {
            return IExecuteWithSignature<bool>("isInCall", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#isMuted()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [System.Obsolete()]
        public bool IsMuted()
        {
            return IExecuteWithSignature<bool>("isMuted", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#isOnHold()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [System.Obsolete()]
        public bool IsOnHold()
        {
            return IExecuteWithSignature<bool>("isOnHold", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#answerCall(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Android.Net.Sip.SipException"/>
        [System.Obsolete()]
        public void AnswerCall(int arg0)
        {
            IExecuteWithSignature("answerCall", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#attachCall(android.net.sip.SipSession,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Sip.SipSession"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <exception cref="Android.Net.Sip.SipException"/>
        [System.Obsolete()]
        public void AttachCall(Android.Net.Sip.SipSession arg0, Java.Lang.String arg1)
        {
            IExecute("attachCall", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#close()"/>
        /// </summary>
        [System.Obsolete()]
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#continueCall(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Android.Net.Sip.SipException"/>
        [System.Obsolete()]
        public void ContinueCall(int arg0)
        {
            IExecuteWithSignature("continueCall", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#endCall()"/>
        /// </summary>
        /// <exception cref="Android.Net.Sip.SipException"/>
        [System.Obsolete()]
        public void EndCall()
        {
            IExecuteWithSignature("endCall", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#holdCall(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Android.Net.Sip.SipException"/>
        [System.Obsolete()]
        public void HoldCall(int arg0)
        {
            IExecuteWithSignature("holdCall", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#makeCall(android.net.sip.SipProfile,android.net.sip.SipSession,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Sip.SipProfile"/></param>
        /// <param name="arg1"><see cref="Android.Net.Sip.SipSession"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <exception cref="Android.Net.Sip.SipException"/>
        [System.Obsolete()]
        public void MakeCall(Android.Net.Sip.SipProfile arg0, Android.Net.Sip.SipSession arg1, int arg2)
        {
            IExecute("makeCall", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#sendDtmf(int,android.os.Message)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Os.Message"/></param>
        [System.Obsolete()]
        public void SendDtmf(int arg0, Android.Os.Message arg1)
        {
            IExecute("sendDtmf", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#sendDtmf(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public void SendDtmf(int arg0)
        {
            IExecuteWithSignature("sendDtmf", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#setListener(android.net.sip.SipAudioCall.Listener,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall.Listener"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        [System.Obsolete()]
        public void SetListener(Android.Net.Sip.SipAudioCall.Listener arg0, bool arg1)
        {
            IExecute("setListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#setListener(android.net.sip.SipAudioCall.Listener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall.Listener"/></param>
        [System.Obsolete()]
        public void SetListener(Android.Net.Sip.SipAudioCall.Listener arg0)
        {
            IExecuteWithSignature("setListener", "(Landroid/net/sip/SipAudioCall$Listener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#setSpeakerMode(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [System.Obsolete()]
        public void SetSpeakerMode(bool arg0)
        {
            IExecuteWithSignature("setSpeakerMode", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#startAudio()"/>
        /// </summary>
        [System.Obsolete()]
        public void StartAudio()
        {
            IExecuteWithSignature("startAudio", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.html#toggleMute()"/>
        /// </summary>
        [System.Obsolete()]
        public void ToggleMute()
        {
            IExecuteWithSignature("toggleMute", "()V");
        }

        #endregion

        #region Nested classes
        #region Listener
        public partial class Listener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="Listener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onCallBusy", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>>>(OnCallBusyEventHandler));
                AddEventHandler("onCallEnded", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>>>(OnCallEndedEventHandler));
                AddEventHandler("onCallEstablished", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>>>(OnCallEstablishedEventHandler));
                AddEventHandler("onCallHeld", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>>>(OnCallHeldEventHandler));
                AddEventHandler("onCalling", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>>>(OnCallingEventHandler));
                AddEventHandler("onChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>>>(OnChangedEventHandler));
                AddEventHandler("onError", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>>>(OnErrorEventHandler));
                AddEventHandler("onReadyToCall", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>>>(OnReadyToCallEventHandler));
                AddEventHandler("onRinging", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>>>(OnRingingEventHandler));
                AddEventHandler("onRingingBack", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>>>(OnRingingBackEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCallBusy(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnCallBusy"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Sip.SipAudioCall> OnOnCallBusy { get; set; } = null;

            void OnCallBusyEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>> data)
            {
                var methodToExecute = (OnOnCallBusy != null) ? OnOnCallBusy : OnCallBusy;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCallBusy(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            [System.Obsolete()]
            public virtual void OnCallBusy(Android.Net.Sip.SipAudioCall arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCallEnded(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnCallEnded"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Sip.SipAudioCall> OnOnCallEnded { get; set; } = null;

            void OnCallEndedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>> data)
            {
                var methodToExecute = (OnOnCallEnded != null) ? OnOnCallEnded : OnCallEnded;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCallEnded(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            [System.Obsolete()]
            public virtual void OnCallEnded(Android.Net.Sip.SipAudioCall arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCallEstablished(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnCallEstablished"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Sip.SipAudioCall> OnOnCallEstablished { get; set; } = null;

            void OnCallEstablishedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>> data)
            {
                var methodToExecute = (OnOnCallEstablished != null) ? OnOnCallEstablished : OnCallEstablished;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCallEstablished(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            [System.Obsolete()]
            public virtual void OnCallEstablished(Android.Net.Sip.SipAudioCall arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCallHeld(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnCallHeld"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Sip.SipAudioCall> OnOnCallHeld { get; set; } = null;

            void OnCallHeldEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>> data)
            {
                var methodToExecute = (OnOnCallHeld != null) ? OnOnCallHeld : OnCallHeld;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCallHeld(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            [System.Obsolete()]
            public virtual void OnCallHeld(Android.Net.Sip.SipAudioCall arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCalling(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnCalling"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Sip.SipAudioCall> OnOnCalling { get; set; } = null;

            void OnCallingEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>> data)
            {
                var methodToExecute = (OnOnCalling != null) ? OnOnCalling : OnCalling;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCalling(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            [System.Obsolete()]
            public virtual void OnCalling(Android.Net.Sip.SipAudioCall arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onChanged(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Sip.SipAudioCall> OnOnChanged { get; set; } = null;

            void OnChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>> data)
            {
                var methodToExecute = (OnOnChanged != null) ? OnOnChanged : OnChanged;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onChanged(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            [System.Obsolete()]
            public virtual void OnChanged(Android.Net.Sip.SipAudioCall arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onError(android.net.sip.SipAudioCall,int,java.lang.String)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnError"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Sip.SipAudioCall, int, Java.Lang.String> OnOnError { get; set; } = null;

            void OnErrorEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>> data)
            {
                var methodToExecute = (OnOnError != null) ? OnOnError : OnError;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<Java.Lang.String>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onError(android.net.sip.SipAudioCall,int,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            [System.Obsolete()]
            public virtual void OnError(Android.Net.Sip.SipAudioCall arg0, int arg1, Java.Lang.String arg2)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onReadyToCall(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnReadyToCall"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Sip.SipAudioCall> OnOnReadyToCall { get; set; } = null;

            void OnReadyToCallEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>> data)
            {
                var methodToExecute = (OnOnReadyToCall != null) ? OnOnReadyToCall : OnReadyToCall;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onReadyToCall(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            [System.Obsolete()]
            public virtual void OnReadyToCall(Android.Net.Sip.SipAudioCall arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onRinging(android.net.sip.SipAudioCall,android.net.sip.SipProfile)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnRinging"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Sip.SipAudioCall, Android.Net.Sip.SipProfile> OnOnRinging { get; set; } = null;

            void OnRingingEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>> data)
            {
                var methodToExecute = (OnOnRinging != null) ? OnOnRinging : OnRinging;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Net.Sip.SipProfile>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onRinging(android.net.sip.SipAudioCall,android.net.sip.SipProfile)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            /// <param name="arg1"><see cref="Android.Net.Sip.SipProfile"/></param>
            [System.Obsolete()]
            public virtual void OnRinging(Android.Net.Sip.SipAudioCall arg0, Android.Net.Sip.SipProfile arg1)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onRingingBack(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnRingingBack"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Sip.SipAudioCall> OnOnRingingBack { get; set; } = null;

            void OnRingingBackEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Sip.SipAudioCall>> data)
            {
                var methodToExecute = (OnOnRingingBack != null) ? OnOnRingingBack : OnRingingBack;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onRingingBack(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            [System.Obsolete()]
            public virtual void OnRingingBack(Android.Net.Sip.SipAudioCall arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ListenerDirect
        public partial class ListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCallBusy(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            [System.Obsolete()]
            public override void OnCallBusy(Android.Net.Sip.SipAudioCall arg0)
            {
                IExecuteWithSignature("onCallBusy", "(Landroid/net/sip/SipAudioCall;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCallEnded(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            [System.Obsolete()]
            public override void OnCallEnded(Android.Net.Sip.SipAudioCall arg0)
            {
                IExecuteWithSignature("onCallEnded", "(Landroid/net/sip/SipAudioCall;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCallEstablished(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            [System.Obsolete()]
            public override void OnCallEstablished(Android.Net.Sip.SipAudioCall arg0)
            {
                IExecuteWithSignature("onCallEstablished", "(Landroid/net/sip/SipAudioCall;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCallHeld(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            [System.Obsolete()]
            public override void OnCallHeld(Android.Net.Sip.SipAudioCall arg0)
            {
                IExecuteWithSignature("onCallHeld", "(Landroid/net/sip/SipAudioCall;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCalling(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            [System.Obsolete()]
            public override void OnCalling(Android.Net.Sip.SipAudioCall arg0)
            {
                IExecuteWithSignature("onCalling", "(Landroid/net/sip/SipAudioCall;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onChanged(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            [System.Obsolete()]
            public override void OnChanged(Android.Net.Sip.SipAudioCall arg0)
            {
                IExecuteWithSignature("onChanged", "(Landroid/net/sip/SipAudioCall;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onError(android.net.sip.SipAudioCall,int,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            [System.Obsolete()]
            public override void OnError(Android.Net.Sip.SipAudioCall arg0, int arg1, Java.Lang.String arg2)
            {
                IExecute("onError", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onReadyToCall(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            [System.Obsolete()]
            public override void OnReadyToCall(Android.Net.Sip.SipAudioCall arg0)
            {
                IExecuteWithSignature("onReadyToCall", "(Landroid/net/sip/SipAudioCall;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onRinging(android.net.sip.SipAudioCall,android.net.sip.SipProfile)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            /// <param name="arg1"><see cref="Android.Net.Sip.SipProfile"/></param>
            [System.Obsolete()]
            public override void OnRinging(Android.Net.Sip.SipAudioCall arg0, Android.Net.Sip.SipProfile arg1)
            {
                IExecute("onRinging", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onRingingBack(android.net.sip.SipAudioCall)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Sip.SipAudioCall"/></param>
            [System.Obsolete()]
            public override void OnRingingBack(Android.Net.Sip.SipAudioCall arg0)
            {
                IExecuteWithSignature("onRingingBack", "(Landroid/net/sip/SipAudioCall;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
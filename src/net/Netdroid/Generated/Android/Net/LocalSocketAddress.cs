/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net
{
    #region LocalSocketAddress
    public partial class LocalSocketAddress
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/LocalSocketAddress.html#%3Cinit%3E(java.lang.String,android.net.LocalSocketAddress.Namespace)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Net.LocalSocketAddress.Namespace"/></param>
        public LocalSocketAddress(Java.Lang.String arg0, Android.Net.LocalSocketAddress.Namespace arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/LocalSocketAddress.html#%3Cinit%3E(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public LocalSocketAddress(Java.Lang.String arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/LocalSocketAddress.html#getNamespace()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.LocalSocketAddress.Namespace"/></returns>
        public Android.Net.LocalSocketAddress.Namespace GetNamespace()
        {
            return IExecuteWithSignature<Android.Net.LocalSocketAddress.Namespace>("getNamespace", "()Landroid/net/LocalSocketAddress$Namespace;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/LocalSocketAddress.html#getName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
        }

        #endregion

        #region Nested classes
        #region Namespace
        public partial class Namespace
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/LocalSocketAddress.Namespace.html#ABSTRACT"/>
            /// </summary>
            public static Android.Net.LocalSocketAddress.Namespace ABSTRACT { get { if (!_ABSTRACTReady) { _ABSTRACTContent = SGetField<Android.Net.LocalSocketAddress.Namespace>(LocalBridgeClazz, "ABSTRACT"); _ABSTRACTReady = true; } return _ABSTRACTContent; } }
            private static Android.Net.LocalSocketAddress.Namespace _ABSTRACTContent = default;
            private static bool _ABSTRACTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/LocalSocketAddress.Namespace.html#FILESYSTEM"/>
            /// </summary>
            public static Android.Net.LocalSocketAddress.Namespace FILESYSTEM { get { if (!_FILESYSTEMReady) { _FILESYSTEMContent = SGetField<Android.Net.LocalSocketAddress.Namespace>(LocalBridgeClazz, "FILESYSTEM"); _FILESYSTEMReady = true; } return _FILESYSTEMContent; } }
            private static Android.Net.LocalSocketAddress.Namespace _FILESYSTEMContent = default;
            private static bool _FILESYSTEMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/LocalSocketAddress.Namespace.html#RESERVED"/>
            /// </summary>
            public static Android.Net.LocalSocketAddress.Namespace RESERVED { get { if (!_RESERVEDReady) { _RESERVEDContent = SGetField<Android.Net.LocalSocketAddress.Namespace>(LocalBridgeClazz, "RESERVED"); _RESERVEDReady = true; } return _RESERVEDContent; } }
            private static Android.Net.LocalSocketAddress.Namespace _RESERVEDContent = default;
            private static bool _RESERVEDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/LocalSocketAddress.Namespace.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.LocalSocketAddress.Namespace"/></returns>
            public static Android.Net.LocalSocketAddress.Namespace ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Net.LocalSocketAddress.Namespace>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/net/LocalSocketAddress$Namespace;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/LocalSocketAddress.Namespace.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.LocalSocketAddress.Namespace"/></returns>
            public static Android.Net.LocalSocketAddress.Namespace[] Values()
            {
                return SExecuteWithSignatureArray<Android.Net.LocalSocketAddress.Namespace>(LocalBridgeClazz, "values", "()[Landroid/net/LocalSocketAddress$Namespace;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
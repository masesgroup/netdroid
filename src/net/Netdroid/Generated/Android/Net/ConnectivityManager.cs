/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net
{
    #region ConnectivityManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html"/>
    /// </summary>
    public partial class ConnectivityManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ConnectivityManager>
    {
        const string _bridgeClassName = "android.net.ConnectivityManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ConnectivityManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ConnectivityManager(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region NetworkCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html"/>
        /// </summary>
        public partial class NetworkCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<NetworkCallback>
        {
            const string _bridgeClassName = "android.net.ConnectivityManager$NetworkCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public NetworkCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public NetworkCallback(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region OnNetworkActiveListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.OnNetworkActiveListener.html"/>
        /// </summary>
        public partial class OnNetworkActiveListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnNetworkActiveListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.ConnectivityManager_OnNetworkActiveListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnNetworkActiveListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnNetworkActiveListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnNetworkActiveListenerDirect : OnNetworkActiveListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.net.ConnectivityManager$OnNetworkActiveListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

    
    }
    #endregion

    #region ConnectivityManager implementation
    public partial class ConnectivityManager
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#DEFAULT_NETWORK_PREFERENCE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int DEFAULT_NETWORK_PREFERENCE { get { if (!_DEFAULT_NETWORK_PREFERENCEReady) { _DEFAULT_NETWORK_PREFERENCEContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_NETWORK_PREFERENCE"); _DEFAULT_NETWORK_PREFERENCEReady = true; } return _DEFAULT_NETWORK_PREFERENCEContent; } }
        private static int _DEFAULT_NETWORK_PREFERENCEContent = default;
        private static bool _DEFAULT_NETWORK_PREFERENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#MULTIPATH_PREFERENCE_HANDOVER"/>
        /// </summary>
        public static int MULTIPATH_PREFERENCE_HANDOVER { get { if (!_MULTIPATH_PREFERENCE_HANDOVERReady) { _MULTIPATH_PREFERENCE_HANDOVERContent = SGetField<int>(LocalBridgeClazz, "MULTIPATH_PREFERENCE_HANDOVER"); _MULTIPATH_PREFERENCE_HANDOVERReady = true; } return _MULTIPATH_PREFERENCE_HANDOVERContent; } }
        private static int _MULTIPATH_PREFERENCE_HANDOVERContent = default;
        private static bool _MULTIPATH_PREFERENCE_HANDOVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#MULTIPATH_PREFERENCE_PERFORMANCE"/>
        /// </summary>
        public static int MULTIPATH_PREFERENCE_PERFORMANCE { get { if (!_MULTIPATH_PREFERENCE_PERFORMANCEReady) { _MULTIPATH_PREFERENCE_PERFORMANCEContent = SGetField<int>(LocalBridgeClazz, "MULTIPATH_PREFERENCE_PERFORMANCE"); _MULTIPATH_PREFERENCE_PERFORMANCEReady = true; } return _MULTIPATH_PREFERENCE_PERFORMANCEContent; } }
        private static int _MULTIPATH_PREFERENCE_PERFORMANCEContent = default;
        private static bool _MULTIPATH_PREFERENCE_PERFORMANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#MULTIPATH_PREFERENCE_RELIABILITY"/>
        /// </summary>
        public static int MULTIPATH_PREFERENCE_RELIABILITY { get { if (!_MULTIPATH_PREFERENCE_RELIABILITYReady) { _MULTIPATH_PREFERENCE_RELIABILITYContent = SGetField<int>(LocalBridgeClazz, "MULTIPATH_PREFERENCE_RELIABILITY"); _MULTIPATH_PREFERENCE_RELIABILITYReady = true; } return _MULTIPATH_PREFERENCE_RELIABILITYContent; } }
        private static int _MULTIPATH_PREFERENCE_RELIABILITYContent = default;
        private static bool _MULTIPATH_PREFERENCE_RELIABILITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#RESTRICT_BACKGROUND_STATUS_DISABLED"/>
        /// </summary>
        public static int RESTRICT_BACKGROUND_STATUS_DISABLED { get { if (!_RESTRICT_BACKGROUND_STATUS_DISABLEDReady) { _RESTRICT_BACKGROUND_STATUS_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "RESTRICT_BACKGROUND_STATUS_DISABLED"); _RESTRICT_BACKGROUND_STATUS_DISABLEDReady = true; } return _RESTRICT_BACKGROUND_STATUS_DISABLEDContent; } }
        private static int _RESTRICT_BACKGROUND_STATUS_DISABLEDContent = default;
        private static bool _RESTRICT_BACKGROUND_STATUS_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#RESTRICT_BACKGROUND_STATUS_ENABLED"/>
        /// </summary>
        public static int RESTRICT_BACKGROUND_STATUS_ENABLED { get { if (!_RESTRICT_BACKGROUND_STATUS_ENABLEDReady) { _RESTRICT_BACKGROUND_STATUS_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "RESTRICT_BACKGROUND_STATUS_ENABLED"); _RESTRICT_BACKGROUND_STATUS_ENABLEDReady = true; } return _RESTRICT_BACKGROUND_STATUS_ENABLEDContent; } }
        private static int _RESTRICT_BACKGROUND_STATUS_ENABLEDContent = default;
        private static bool _RESTRICT_BACKGROUND_STATUS_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#RESTRICT_BACKGROUND_STATUS_WHITELISTED"/>
        /// </summary>
        public static int RESTRICT_BACKGROUND_STATUS_WHITELISTED { get { if (!_RESTRICT_BACKGROUND_STATUS_WHITELISTEDReady) { _RESTRICT_BACKGROUND_STATUS_WHITELISTEDContent = SGetField<int>(LocalBridgeClazz, "RESTRICT_BACKGROUND_STATUS_WHITELISTED"); _RESTRICT_BACKGROUND_STATUS_WHITELISTEDReady = true; } return _RESTRICT_BACKGROUND_STATUS_WHITELISTEDContent; } }
        private static int _RESTRICT_BACKGROUND_STATUS_WHITELISTEDContent = default;
        private static bool _RESTRICT_BACKGROUND_STATUS_WHITELISTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_BLUETOOTH"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int TYPE_BLUETOOTH { get { if (!_TYPE_BLUETOOTHReady) { _TYPE_BLUETOOTHContent = SGetField<int>(LocalBridgeClazz, "TYPE_BLUETOOTH"); _TYPE_BLUETOOTHReady = true; } return _TYPE_BLUETOOTHContent; } }
        private static int _TYPE_BLUETOOTHContent = default;
        private static bool _TYPE_BLUETOOTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_DUMMY"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int TYPE_DUMMY { get { if (!_TYPE_DUMMYReady) { _TYPE_DUMMYContent = SGetField<int>(LocalBridgeClazz, "TYPE_DUMMY"); _TYPE_DUMMYReady = true; } return _TYPE_DUMMYContent; } }
        private static int _TYPE_DUMMYContent = default;
        private static bool _TYPE_DUMMYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_ETHERNET"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int TYPE_ETHERNET { get { if (!_TYPE_ETHERNETReady) { _TYPE_ETHERNETContent = SGetField<int>(LocalBridgeClazz, "TYPE_ETHERNET"); _TYPE_ETHERNETReady = true; } return _TYPE_ETHERNETContent; } }
        private static int _TYPE_ETHERNETContent = default;
        private static bool _TYPE_ETHERNETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int TYPE_MOBILE { get { if (!_TYPE_MOBILEReady) { _TYPE_MOBILEContent = SGetField<int>(LocalBridgeClazz, "TYPE_MOBILE"); _TYPE_MOBILEReady = true; } return _TYPE_MOBILEContent; } }
        private static int _TYPE_MOBILEContent = default;
        private static bool _TYPE_MOBILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_DUN"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int TYPE_MOBILE_DUN { get { if (!_TYPE_MOBILE_DUNReady) { _TYPE_MOBILE_DUNContent = SGetField<int>(LocalBridgeClazz, "TYPE_MOBILE_DUN"); _TYPE_MOBILE_DUNReady = true; } return _TYPE_MOBILE_DUNContent; } }
        private static int _TYPE_MOBILE_DUNContent = default;
        private static bool _TYPE_MOBILE_DUNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_HIPRI"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int TYPE_MOBILE_HIPRI { get { if (!_TYPE_MOBILE_HIPRIReady) { _TYPE_MOBILE_HIPRIContent = SGetField<int>(LocalBridgeClazz, "TYPE_MOBILE_HIPRI"); _TYPE_MOBILE_HIPRIReady = true; } return _TYPE_MOBILE_HIPRIContent; } }
        private static int _TYPE_MOBILE_HIPRIContent = default;
        private static bool _TYPE_MOBILE_HIPRIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_MMS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int TYPE_MOBILE_MMS { get { if (!_TYPE_MOBILE_MMSReady) { _TYPE_MOBILE_MMSContent = SGetField<int>(LocalBridgeClazz, "TYPE_MOBILE_MMS"); _TYPE_MOBILE_MMSReady = true; } return _TYPE_MOBILE_MMSContent; } }
        private static int _TYPE_MOBILE_MMSContent = default;
        private static bool _TYPE_MOBILE_MMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_SUPL"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int TYPE_MOBILE_SUPL { get { if (!_TYPE_MOBILE_SUPLReady) { _TYPE_MOBILE_SUPLContent = SGetField<int>(LocalBridgeClazz, "TYPE_MOBILE_SUPL"); _TYPE_MOBILE_SUPLReady = true; } return _TYPE_MOBILE_SUPLContent; } }
        private static int _TYPE_MOBILE_SUPLContent = default;
        private static bool _TYPE_MOBILE_SUPLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_VPN"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int TYPE_VPN { get { if (!_TYPE_VPNReady) { _TYPE_VPNContent = SGetField<int>(LocalBridgeClazz, "TYPE_VPN"); _TYPE_VPNReady = true; } return _TYPE_VPNContent; } }
        private static int _TYPE_VPNContent = default;
        private static bool _TYPE_VPNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_WIFI"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int TYPE_WIFI { get { if (!_TYPE_WIFIReady) { _TYPE_WIFIContent = SGetField<int>(LocalBridgeClazz, "TYPE_WIFI"); _TYPE_WIFIReady = true; } return _TYPE_WIFIContent; } }
        private static int _TYPE_WIFIContent = default;
        private static bool _TYPE_WIFIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_WIMAX"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int TYPE_WIMAX { get { if (!_TYPE_WIMAXReady) { _TYPE_WIMAXContent = SGetField<int>(LocalBridgeClazz, "TYPE_WIMAX"); _TYPE_WIMAXReady = true; } return _TYPE_WIMAXContent; } }
        private static int _TYPE_WIMAXContent = default;
        private static bool _TYPE_WIMAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#ACTION_BACKGROUND_DATA_SETTING_CHANGED"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String ACTION_BACKGROUND_DATA_SETTING_CHANGED { get { if (!_ACTION_BACKGROUND_DATA_SETTING_CHANGEDReady) { _ACTION_BACKGROUND_DATA_SETTING_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_BACKGROUND_DATA_SETTING_CHANGED"); _ACTION_BACKGROUND_DATA_SETTING_CHANGEDReady = true; } return _ACTION_BACKGROUND_DATA_SETTING_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_BACKGROUND_DATA_SETTING_CHANGEDContent = default;
        private static bool _ACTION_BACKGROUND_DATA_SETTING_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#ACTION_CAPTIVE_PORTAL_SIGN_IN"/>
        /// </summary>
        public static Java.Lang.String ACTION_CAPTIVE_PORTAL_SIGN_IN { get { if (!_ACTION_CAPTIVE_PORTAL_SIGN_INReady) { _ACTION_CAPTIVE_PORTAL_SIGN_INContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CAPTIVE_PORTAL_SIGN_IN"); _ACTION_CAPTIVE_PORTAL_SIGN_INReady = true; } return _ACTION_CAPTIVE_PORTAL_SIGN_INContent; } }
        private static Java.Lang.String _ACTION_CAPTIVE_PORTAL_SIGN_INContent = default;
        private static bool _ACTION_CAPTIVE_PORTAL_SIGN_INReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#ACTION_RESTRICT_BACKGROUND_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_RESTRICT_BACKGROUND_CHANGED { get { if (!_ACTION_RESTRICT_BACKGROUND_CHANGEDReady) { _ACTION_RESTRICT_BACKGROUND_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_RESTRICT_BACKGROUND_CHANGED"); _ACTION_RESTRICT_BACKGROUND_CHANGEDReady = true; } return _ACTION_RESTRICT_BACKGROUND_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_RESTRICT_BACKGROUND_CHANGEDContent = default;
        private static bool _ACTION_RESTRICT_BACKGROUND_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#CONNECTIVITY_ACTION"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String CONNECTIVITY_ACTION { get { if (!_CONNECTIVITY_ACTIONReady) { _CONNECTIVITY_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONNECTIVITY_ACTION"); _CONNECTIVITY_ACTIONReady = true; } return _CONNECTIVITY_ACTIONContent; } }
        private static Java.Lang.String _CONNECTIVITY_ACTIONContent = default;
        private static bool _CONNECTIVITY_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_CAPTIVE_PORTAL"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CAPTIVE_PORTAL { get { if (!_EXTRA_CAPTIVE_PORTALReady) { _EXTRA_CAPTIVE_PORTALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CAPTIVE_PORTAL"); _EXTRA_CAPTIVE_PORTALReady = true; } return _EXTRA_CAPTIVE_PORTALContent; } }
        private static Java.Lang.String _EXTRA_CAPTIVE_PORTALContent = default;
        private static bool _EXTRA_CAPTIVE_PORTALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_CAPTIVE_PORTAL_URL"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CAPTIVE_PORTAL_URL { get { if (!_EXTRA_CAPTIVE_PORTAL_URLReady) { _EXTRA_CAPTIVE_PORTAL_URLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CAPTIVE_PORTAL_URL"); _EXTRA_CAPTIVE_PORTAL_URLReady = true; } return _EXTRA_CAPTIVE_PORTAL_URLContent; } }
        private static Java.Lang.String _EXTRA_CAPTIVE_PORTAL_URLContent = default;
        private static bool _EXTRA_CAPTIVE_PORTAL_URLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_EXTRA_INFO"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_EXTRA_INFO { get { if (!_EXTRA_EXTRA_INFOReady) { _EXTRA_EXTRA_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_EXTRA_INFO"); _EXTRA_EXTRA_INFOReady = true; } return _EXTRA_EXTRA_INFOContent; } }
        private static Java.Lang.String _EXTRA_EXTRA_INFOContent = default;
        private static bool _EXTRA_EXTRA_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_IS_FAILOVER"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_IS_FAILOVER { get { if (!_EXTRA_IS_FAILOVERReady) { _EXTRA_IS_FAILOVERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_IS_FAILOVER"); _EXTRA_IS_FAILOVERReady = true; } return _EXTRA_IS_FAILOVERContent; } }
        private static Java.Lang.String _EXTRA_IS_FAILOVERContent = default;
        private static bool _EXTRA_IS_FAILOVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NETWORK"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NETWORK { get { if (!_EXTRA_NETWORKReady) { _EXTRA_NETWORKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NETWORK"); _EXTRA_NETWORKReady = true; } return _EXTRA_NETWORKContent; } }
        private static Java.Lang.String _EXTRA_NETWORKContent = default;
        private static bool _EXTRA_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NETWORK_INFO"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_NETWORK_INFO { get { if (!_EXTRA_NETWORK_INFOReady) { _EXTRA_NETWORK_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NETWORK_INFO"); _EXTRA_NETWORK_INFOReady = true; } return _EXTRA_NETWORK_INFOContent; } }
        private static Java.Lang.String _EXTRA_NETWORK_INFOContent = default;
        private static bool _EXTRA_NETWORK_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NETWORK_REQUEST"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NETWORK_REQUEST { get { if (!_EXTRA_NETWORK_REQUESTReady) { _EXTRA_NETWORK_REQUESTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NETWORK_REQUEST"); _EXTRA_NETWORK_REQUESTReady = true; } return _EXTRA_NETWORK_REQUESTContent; } }
        private static Java.Lang.String _EXTRA_NETWORK_REQUESTContent = default;
        private static bool _EXTRA_NETWORK_REQUESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NETWORK_TYPE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_NETWORK_TYPE { get { if (!_EXTRA_NETWORK_TYPEReady) { _EXTRA_NETWORK_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NETWORK_TYPE"); _EXTRA_NETWORK_TYPEReady = true; } return _EXTRA_NETWORK_TYPEContent; } }
        private static Java.Lang.String _EXTRA_NETWORK_TYPEContent = default;
        private static bool _EXTRA_NETWORK_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NO_CONNECTIVITY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NO_CONNECTIVITY { get { if (!_EXTRA_NO_CONNECTIVITYReady) { _EXTRA_NO_CONNECTIVITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NO_CONNECTIVITY"); _EXTRA_NO_CONNECTIVITYReady = true; } return _EXTRA_NO_CONNECTIVITYContent; } }
        private static Java.Lang.String _EXTRA_NO_CONNECTIVITYContent = default;
        private static bool _EXTRA_NO_CONNECTIVITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_OTHER_NETWORK_INFO"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_OTHER_NETWORK_INFO { get { if (!_EXTRA_OTHER_NETWORK_INFOReady) { _EXTRA_OTHER_NETWORK_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_OTHER_NETWORK_INFO"); _EXTRA_OTHER_NETWORK_INFOReady = true; } return _EXTRA_OTHER_NETWORK_INFOContent; } }
        private static Java.Lang.String _EXTRA_OTHER_NETWORK_INFOContent = default;
        private static bool _EXTRA_OTHER_NETWORK_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_REASON"/>
        /// </summary>
        public static Java.Lang.String EXTRA_REASON { get { if (!_EXTRA_REASONReady) { _EXTRA_REASONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_REASON"); _EXTRA_REASONReady = true; } return _EXTRA_REASONContent; } }
        private static Java.Lang.String _EXTRA_REASONContent = default;
        private static bool _EXTRA_REASONReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getProcessDefaultNetwork()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Network"/></returns>
        [global::System.Obsolete()]
        public static Android.Net.Network GetProcessDefaultNetwork()
        {
            return SExecuteWithSignature<Android.Net.Network>(LocalBridgeClazz, "getProcessDefaultNetwork", "()Landroid/net/Network;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#isNetworkTypeValid(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public static bool IsNetworkTypeValid(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isNetworkTypeValid", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#setProcessDefaultNetwork(android.net.Network)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public static bool SetProcessDefaultNetwork(Android.Net.Network arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "setProcessDefaultNetwork", "(Landroid/net/Network;)Z", arg0);
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getLinkProperties(android.net.Network)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <returns><see cref="Android.Net.LinkProperties"/></returns>
        public Android.Net.LinkProperties GetLinkProperties(Android.Net.Network arg0)
        {
            return IExecuteWithSignature<Android.Net.LinkProperties>("getLinkProperties", "(Landroid/net/Network;)Landroid/net/LinkProperties;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getActiveNetwork()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Network"/></returns>
        public Android.Net.Network GetActiveNetwork()
        {
            return IExecuteWithSignature<Android.Net.Network>("getActiveNetwork", "()Landroid/net/Network;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getBoundNetworkForProcess()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Network"/></returns>
        public Android.Net.Network GetBoundNetworkForProcess()
        {
            return IExecuteWithSignature<Android.Net.Network>("getBoundNetworkForProcess", "()Landroid/net/Network;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getAllNetworks()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Network"/></returns>
        [global::System.Obsolete()]
        public Android.Net.Network[] GetAllNetworks()
        {
            return IExecuteWithSignatureArray<Android.Net.Network>("getAllNetworks", "()[Landroid/net/Network;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkCapabilities(android.net.Network)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <returns><see cref="Android.Net.NetworkCapabilities"/></returns>
        public Android.Net.NetworkCapabilities GetNetworkCapabilities(Android.Net.Network arg0)
        {
            return IExecuteWithSignature<Android.Net.NetworkCapabilities>("getNetworkCapabilities", "(Landroid/net/Network;)Landroid/net/NetworkCapabilities;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getActiveNetworkInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.NetworkInfo"/></returns>
        [global::System.Obsolete()]
        public Android.Net.NetworkInfo GetActiveNetworkInfo()
        {
            return IExecuteWithSignature<Android.Net.NetworkInfo>("getActiveNetworkInfo", "()Landroid/net/NetworkInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkInfo(android.net.Network)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <returns><see cref="Android.Net.NetworkInfo"/></returns>
        [global::System.Obsolete()]
        public Android.Net.NetworkInfo GetNetworkInfo(Android.Net.Network arg0)
        {
            return IExecuteWithSignature<Android.Net.NetworkInfo>("getNetworkInfo", "(Landroid/net/Network;)Landroid/net/NetworkInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkInfo(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Net.NetworkInfo"/></returns>
        [global::System.Obsolete()]
        public Android.Net.NetworkInfo GetNetworkInfo(int arg0)
        {
            return IExecuteWithSignature<Android.Net.NetworkInfo>("getNetworkInfo", "(I)Landroid/net/NetworkInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getAllNetworkInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.NetworkInfo"/></returns>
        [global::System.Obsolete()]
        public Android.Net.NetworkInfo[] GetAllNetworkInfo()
        {
            return IExecuteWithSignatureArray<Android.Net.NetworkInfo>("getAllNetworkInfo", "()[Landroid/net/NetworkInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getDefaultProxy()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.ProxyInfo"/></returns>
        public Android.Net.ProxyInfo GetDefaultProxy()
        {
            return IExecuteWithSignature<Android.Net.ProxyInfo>("getDefaultProxy", "()Landroid/net/ProxyInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#createSocketKeepalive(android.net.Network,android.net.IpSecManager.UdpEncapsulationSocket,java.net.InetAddress,java.net.InetAddress,java.util.concurrent.Executor,android.net.SocketKeepalive.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <param name="arg1"><see cref="Android.Net.IpSecManager.UdpEncapsulationSocket"/></param>
        /// <param name="arg2"><see cref="Java.Net.InetAddress"/></param>
        /// <param name="arg3"><see cref="Java.Net.InetAddress"/></param>
        /// <param name="arg4"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg5"><see cref="Android.Net.SocketKeepalive.Callback"/></param>
        /// <returns><see cref="Android.Net.SocketKeepalive"/></returns>
        public Android.Net.SocketKeepalive CreateSocketKeepalive(Android.Net.Network arg0, Android.Net.IpSecManager.UdpEncapsulationSocket arg1, Java.Net.InetAddress arg2, Java.Net.InetAddress arg3, Java.Util.Concurrent.Executor arg4, Android.Net.SocketKeepalive.Callback arg5)
        {
            return IExecuteWithSignature<Android.Net.SocketKeepalive>("createSocketKeepalive", "(Landroid/net/Network;Landroid/net/IpSecManager$UdpEncapsulationSocket;Ljava/net/InetAddress;Ljava/net/InetAddress;Ljava/util/concurrent/Executor;Landroid/net/SocketKeepalive$Callback;)Landroid/net/SocketKeepalive;", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#bindProcessToNetwork(android.net.Network)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool BindProcessToNetwork(Android.Net.Network arg0)
        {
            return IExecuteWithSignature<bool>("bindProcessToNetwork", "(Landroid/net/Network;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getBackgroundDataSetting()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool GetBackgroundDataSetting()
        {
            return IExecuteWithSignature<bool>("getBackgroundDataSetting", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#isActiveNetworkMetered()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsActiveNetworkMetered()
        {
            return IExecuteWithSignature<bool>("isActiveNetworkMetered", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#isDefaultNetworkActive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDefaultNetworkActive()
        {
            return IExecuteWithSignature<bool>("isDefaultNetworkActive", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#requestBandwidthUpdate(android.net.Network)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestBandwidthUpdate(Android.Net.Network arg0)
        {
            return IExecuteWithSignature<bool>("requestBandwidthUpdate", "(Landroid/net/Network;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkWatchlistConfigHash()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        public byte[] GetNetworkWatchlistConfigHash()
        {
            return IExecuteWithSignatureArray<byte>("getNetworkWatchlistConfigHash", "()[B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getConnectionOwnerUid(int,java.net.InetSocketAddress,java.net.InetSocketAddress)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Net.InetSocketAddress"/></param>
        /// <param name="arg2"><see cref="Java.Net.InetSocketAddress"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetConnectionOwnerUid(int arg0, Java.Net.InetSocketAddress arg1, Java.Net.InetSocketAddress arg2)
        {
            return IExecuteWithSignature<int>("getConnectionOwnerUid", "(ILjava/net/InetSocketAddress;Ljava/net/InetSocketAddress;)I", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getMultipathPreference(android.net.Network)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetMultipathPreference(Android.Net.Network arg0)
        {
            return IExecuteWithSignature<int>("getMultipathPreference", "(Landroid/net/Network;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkPreference()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetNetworkPreference()
        {
            return IExecuteWithSignature<int>("getNetworkPreference", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getRestrictBackgroundStatus()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRestrictBackgroundStatus()
        {
            return IExecuteWithSignature<int>("getRestrictBackgroundStatus", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#addDefaultNetworkActiveListener(android.net.ConnectivityManager.OnNetworkActiveListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.ConnectivityManager.OnNetworkActiveListener"/></param>
        public void AddDefaultNetworkActiveListener(Android.Net.ConnectivityManager.OnNetworkActiveListener arg0)
        {
            IExecuteWithSignature("addDefaultNetworkActiveListener", "(Landroid/net/ConnectivityManager$OnNetworkActiveListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#registerBestMatchingNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        /// <param name="arg2"><see cref="Android.Os.Handler"/></param>
        public void RegisterBestMatchingNetworkCallback(Android.Net.NetworkRequest arg0, Android.Net.ConnectivityManager.NetworkCallback arg1, Android.Os.Handler arg2)
        {
            IExecuteWithSignature("registerBestMatchingNetworkCallback", "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void RegisterDefaultNetworkCallback(Android.Net.ConnectivityManager.NetworkCallback arg0, Android.Os.Handler arg1)
        {
            IExecuteWithSignature("registerDefaultNetworkCallback", "(Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        public void RegisterDefaultNetworkCallback(Android.Net.ConnectivityManager.NetworkCallback arg0)
        {
            IExecuteWithSignature("registerDefaultNetworkCallback", "(Landroid/net/ConnectivityManager$NetworkCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkCallback(android.net.NetworkRequest,android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.App.PendingIntent"/></param>
        public void RegisterNetworkCallback(Android.Net.NetworkRequest arg0, Android.App.PendingIntent arg1)
        {
            IExecuteWithSignature("registerNetworkCallback", "(Landroid/net/NetworkRequest;Landroid/app/PendingIntent;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        /// <param name="arg2"><see cref="Android.Os.Handler"/></param>
        public void RegisterNetworkCallback(Android.Net.NetworkRequest arg0, Android.Net.ConnectivityManager.NetworkCallback arg1, Android.Os.Handler arg2)
        {
            IExecuteWithSignature("registerNetworkCallback", "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        public void RegisterNetworkCallback(Android.Net.NetworkRequest arg0, Android.Net.ConnectivityManager.NetworkCallback arg1)
        {
            IExecuteWithSignature("registerNetworkCallback", "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#releaseNetworkRequest(android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
        public void ReleaseNetworkRequest(Android.App.PendingIntent arg0)
        {
            IExecuteWithSignature("releaseNetworkRequest", "(Landroid/app/PendingIntent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#removeDefaultNetworkActiveListener(android.net.ConnectivityManager.OnNetworkActiveListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.ConnectivityManager.OnNetworkActiveListener"/></param>
        public void RemoveDefaultNetworkActiveListener(Android.Net.ConnectivityManager.OnNetworkActiveListener arg0)
        {
            IExecuteWithSignature("removeDefaultNetworkActiveListener", "(Landroid/net/ConnectivityManager$OnNetworkActiveListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#reportBadNetwork(android.net.Network)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        [global::System.Obsolete()]
        public void ReportBadNetwork(Android.Net.Network arg0)
        {
            IExecuteWithSignature("reportBadNetwork", "(Landroid/net/Network;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#reportNetworkConnectivity(android.net.Network,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void ReportNetworkConnectivity(Android.Net.Network arg0, bool arg1)
        {
            IExecuteWithSignature("reportNetworkConnectivity", "(Landroid/net/Network;Z)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest,android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.App.PendingIntent"/></param>
        public void RequestNetwork(Android.Net.NetworkRequest arg0, Android.App.PendingIntent arg1)
        {
            IExecuteWithSignature("requestNetwork", "(Landroid/net/NetworkRequest;Landroid/app/PendingIntent;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        /// <param name="arg2"><see cref="Android.Os.Handler"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void RequestNetwork(Android.Net.NetworkRequest arg0, Android.Net.ConnectivityManager.NetworkCallback arg1, Android.Os.Handler arg2, int arg3)
        {
            IExecuteWithSignature("requestNetwork", "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;I)V", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        /// <param name="arg2"><see cref="Android.Os.Handler"/></param>
        public void RequestNetwork(Android.Net.NetworkRequest arg0, Android.Net.ConnectivityManager.NetworkCallback arg1, Android.Os.Handler arg2)
        {
            IExecuteWithSignature("requestNetwork", "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void RequestNetwork(Android.Net.NetworkRequest arg0, Android.Net.ConnectivityManager.NetworkCallback arg1, int arg2)
        {
            IExecuteWithSignature("requestNetwork", "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;I)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        public void RequestNetwork(Android.Net.NetworkRequest arg0, Android.Net.ConnectivityManager.NetworkCallback arg1)
        {
            IExecuteWithSignature("requestNetwork", "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#setNetworkPreference(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetNetworkPreference(int arg0)
        {
            IExecuteWithSignature("setNetworkPreference", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#unregisterNetworkCallback(android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
        public void UnregisterNetworkCallback(Android.App.PendingIntent arg0)
        {
            IExecuteWithSignature("unregisterNetworkCallback", "(Landroid/app/PendingIntent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        public void UnregisterNetworkCallback(Android.Net.ConnectivityManager.NetworkCallback arg0)
        {
            IExecuteWithSignature("unregisterNetworkCallback", "(Landroid/net/ConnectivityManager$NetworkCallback;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region NetworkCallback implementation
        public partial class NetworkCallback
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#%3Cinit%3E(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public NetworkCallback(int arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#FLAG_INCLUDE_LOCATION_INFO"/>
            /// </summary>
            public static int FLAG_INCLUDE_LOCATION_INFO { get { if (!_FLAG_INCLUDE_LOCATION_INFOReady) { _FLAG_INCLUDE_LOCATION_INFOContent = SGetField<int>(LocalBridgeClazz, "FLAG_INCLUDE_LOCATION_INFO"); _FLAG_INCLUDE_LOCATION_INFOReady = true; } return _FLAG_INCLUDE_LOCATION_INFOContent; } }
            private static int _FLAG_INCLUDE_LOCATION_INFOContent = default;
            private static bool _FLAG_INCLUDE_LOCATION_INFOReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onAvailable(android.net.Network)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            public void OnAvailable(Android.Net.Network arg0)
            {
                IExecuteWithSignature("onAvailable", "(Landroid/net/Network;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onBlockedStatusChanged(android.net.Network,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            public void OnBlockedStatusChanged(Android.Net.Network arg0, bool arg1)
            {
                IExecuteWithSignature("onBlockedStatusChanged", "(Landroid/net/Network;Z)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            /// <param name="arg1"><see cref="Android.Net.NetworkCapabilities"/></param>
            public void OnCapabilitiesChanged(Android.Net.Network arg0, Android.Net.NetworkCapabilities arg1)
            {
                IExecuteWithSignature("onCapabilitiesChanged", "(Landroid/net/Network;Landroid/net/NetworkCapabilities;)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onLinkPropertiesChanged(android.net.Network,android.net.LinkProperties)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            /// <param name="arg1"><see cref="Android.Net.LinkProperties"/></param>
            public void OnLinkPropertiesChanged(Android.Net.Network arg0, Android.Net.LinkProperties arg1)
            {
                IExecuteWithSignature("onLinkPropertiesChanged", "(Landroid/net/Network;Landroid/net/LinkProperties;)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onLosing(android.net.Network,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnLosing(Android.Net.Network arg0, int arg1)
            {
                IExecuteWithSignature("onLosing", "(Landroid/net/Network;I)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onLost(android.net.Network)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            public void OnLost(Android.Net.Network arg0)
            {
                IExecuteWithSignature("onLost", "(Landroid/net/Network;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onUnavailable()"/>
            /// </summary>
            public void OnUnavailable()
            {
                IExecuteWithSignature("onUnavailable", "()V");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnNetworkActiveListener implementation
        public partial class OnNetworkActiveListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnNetworkActiveListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onNetworkActive", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnNetworkActiveEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/ConnectivityManager.OnNetworkActiveListener.html#onNetworkActive()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnNetworkActive"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnNetworkActive { get; set; } = null;
            
            bool hasOverrideOnNetworkActive = true;
            void OnNetworkActiveEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnNetworkActive = true;
                var methodToExecute = (OnOnNetworkActive != null) ? OnOnNetworkActive : OnNetworkActive;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnNetworkActive;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.OnNetworkActiveListener.html#onNetworkActive()"/>
            /// </summary>
            public virtual void OnNetworkActive()
            {
                hasOverrideOnNetworkActive = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnNetworkActiveListenerDirect implementation
        public partial class OnNetworkActiveListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.OnNetworkActiveListener.html#onNetworkActive()"/>
            /// </summary>
            public override void OnNetworkActive()
            {
                IExecuteWithSignature("onNetworkActive", "()V");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
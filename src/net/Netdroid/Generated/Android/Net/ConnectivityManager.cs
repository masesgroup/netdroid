/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net
{
    #region ConnectivityManager
    public partial class ConnectivityManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#MULTIPATH_PREFERENCE_HANDOVER"/>
        /// </summary>
        public static int MULTIPATH_PREFERENCE_HANDOVER { get { if (!_MULTIPATH_PREFERENCE_HANDOVERReady) { _MULTIPATH_PREFERENCE_HANDOVERContent = SGetField<int>(LocalBridgeClazz, "MULTIPATH_PREFERENCE_HANDOVER"); _MULTIPATH_PREFERENCE_HANDOVERReady = true; } return _MULTIPATH_PREFERENCE_HANDOVERContent; } }
        private static int _MULTIPATH_PREFERENCE_HANDOVERContent = default;
        private static bool _MULTIPATH_PREFERENCE_HANDOVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#MULTIPATH_PREFERENCE_PERFORMANCE"/>
        /// </summary>
        public static int MULTIPATH_PREFERENCE_PERFORMANCE { get { if (!_MULTIPATH_PREFERENCE_PERFORMANCEReady) { _MULTIPATH_PREFERENCE_PERFORMANCEContent = SGetField<int>(LocalBridgeClazz, "MULTIPATH_PREFERENCE_PERFORMANCE"); _MULTIPATH_PREFERENCE_PERFORMANCEReady = true; } return _MULTIPATH_PREFERENCE_PERFORMANCEContent; } }
        private static int _MULTIPATH_PREFERENCE_PERFORMANCEContent = default;
        private static bool _MULTIPATH_PREFERENCE_PERFORMANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#MULTIPATH_PREFERENCE_RELIABILITY"/>
        /// </summary>
        public static int MULTIPATH_PREFERENCE_RELIABILITY { get { if (!_MULTIPATH_PREFERENCE_RELIABILITYReady) { _MULTIPATH_PREFERENCE_RELIABILITYContent = SGetField<int>(LocalBridgeClazz, "MULTIPATH_PREFERENCE_RELIABILITY"); _MULTIPATH_PREFERENCE_RELIABILITYReady = true; } return _MULTIPATH_PREFERENCE_RELIABILITYContent; } }
        private static int _MULTIPATH_PREFERENCE_RELIABILITYContent = default;
        private static bool _MULTIPATH_PREFERENCE_RELIABILITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#RESTRICT_BACKGROUND_STATUS_DISABLED"/>
        /// </summary>
        public static int RESTRICT_BACKGROUND_STATUS_DISABLED { get { if (!_RESTRICT_BACKGROUND_STATUS_DISABLEDReady) { _RESTRICT_BACKGROUND_STATUS_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "RESTRICT_BACKGROUND_STATUS_DISABLED"); _RESTRICT_BACKGROUND_STATUS_DISABLEDReady = true; } return _RESTRICT_BACKGROUND_STATUS_DISABLEDContent; } }
        private static int _RESTRICT_BACKGROUND_STATUS_DISABLEDContent = default;
        private static bool _RESTRICT_BACKGROUND_STATUS_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#RESTRICT_BACKGROUND_STATUS_ENABLED"/>
        /// </summary>
        public static int RESTRICT_BACKGROUND_STATUS_ENABLED { get { if (!_RESTRICT_BACKGROUND_STATUS_ENABLEDReady) { _RESTRICT_BACKGROUND_STATUS_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "RESTRICT_BACKGROUND_STATUS_ENABLED"); _RESTRICT_BACKGROUND_STATUS_ENABLEDReady = true; } return _RESTRICT_BACKGROUND_STATUS_ENABLEDContent; } }
        private static int _RESTRICT_BACKGROUND_STATUS_ENABLEDContent = default;
        private static bool _RESTRICT_BACKGROUND_STATUS_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#RESTRICT_BACKGROUND_STATUS_WHITELISTED"/>
        /// </summary>
        public static int RESTRICT_BACKGROUND_STATUS_WHITELISTED { get { if (!_RESTRICT_BACKGROUND_STATUS_WHITELISTEDReady) { _RESTRICT_BACKGROUND_STATUS_WHITELISTEDContent = SGetField<int>(LocalBridgeClazz, "RESTRICT_BACKGROUND_STATUS_WHITELISTED"); _RESTRICT_BACKGROUND_STATUS_WHITELISTEDReady = true; } return _RESTRICT_BACKGROUND_STATUS_WHITELISTEDContent; } }
        private static int _RESTRICT_BACKGROUND_STATUS_WHITELISTEDContent = default;
        private static bool _RESTRICT_BACKGROUND_STATUS_WHITELISTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#ACTION_CAPTIVE_PORTAL_SIGN_IN"/>
        /// </summary>
        public static Java.Lang.String ACTION_CAPTIVE_PORTAL_SIGN_IN { get { if (!_ACTION_CAPTIVE_PORTAL_SIGN_INReady) { _ACTION_CAPTIVE_PORTAL_SIGN_INContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CAPTIVE_PORTAL_SIGN_IN"); _ACTION_CAPTIVE_PORTAL_SIGN_INReady = true; } return _ACTION_CAPTIVE_PORTAL_SIGN_INContent; } }
        private static Java.Lang.String _ACTION_CAPTIVE_PORTAL_SIGN_INContent = default;
        private static bool _ACTION_CAPTIVE_PORTAL_SIGN_INReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#ACTION_RESTRICT_BACKGROUND_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_RESTRICT_BACKGROUND_CHANGED { get { if (!_ACTION_RESTRICT_BACKGROUND_CHANGEDReady) { _ACTION_RESTRICT_BACKGROUND_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_RESTRICT_BACKGROUND_CHANGED"); _ACTION_RESTRICT_BACKGROUND_CHANGEDReady = true; } return _ACTION_RESTRICT_BACKGROUND_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_RESTRICT_BACKGROUND_CHANGEDContent = default;
        private static bool _ACTION_RESTRICT_BACKGROUND_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_CAPTIVE_PORTAL"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CAPTIVE_PORTAL { get { if (!_EXTRA_CAPTIVE_PORTALReady) { _EXTRA_CAPTIVE_PORTALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CAPTIVE_PORTAL"); _EXTRA_CAPTIVE_PORTALReady = true; } return _EXTRA_CAPTIVE_PORTALContent; } }
        private static Java.Lang.String _EXTRA_CAPTIVE_PORTALContent = default;
        private static bool _EXTRA_CAPTIVE_PORTALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_CAPTIVE_PORTAL_URL"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CAPTIVE_PORTAL_URL { get { if (!_EXTRA_CAPTIVE_PORTAL_URLReady) { _EXTRA_CAPTIVE_PORTAL_URLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CAPTIVE_PORTAL_URL"); _EXTRA_CAPTIVE_PORTAL_URLReady = true; } return _EXTRA_CAPTIVE_PORTAL_URLContent; } }
        private static Java.Lang.String _EXTRA_CAPTIVE_PORTAL_URLContent = default;
        private static bool _EXTRA_CAPTIVE_PORTAL_URLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NETWORK"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NETWORK { get { if (!_EXTRA_NETWORKReady) { _EXTRA_NETWORKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NETWORK"); _EXTRA_NETWORKReady = true; } return _EXTRA_NETWORKContent; } }
        private static Java.Lang.String _EXTRA_NETWORKContent = default;
        private static bool _EXTRA_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NETWORK_REQUEST"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NETWORK_REQUEST { get { if (!_EXTRA_NETWORK_REQUESTReady) { _EXTRA_NETWORK_REQUESTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NETWORK_REQUEST"); _EXTRA_NETWORK_REQUESTReady = true; } return _EXTRA_NETWORK_REQUESTContent; } }
        private static Java.Lang.String _EXTRA_NETWORK_REQUESTContent = default;
        private static bool _EXTRA_NETWORK_REQUESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NO_CONNECTIVITY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NO_CONNECTIVITY { get { if (!_EXTRA_NO_CONNECTIVITYReady) { _EXTRA_NO_CONNECTIVITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NO_CONNECTIVITY"); _EXTRA_NO_CONNECTIVITYReady = true; } return _EXTRA_NO_CONNECTIVITYContent; } }
        private static Java.Lang.String _EXTRA_NO_CONNECTIVITYContent = default;
        private static bool _EXTRA_NO_CONNECTIVITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_REASON"/>
        /// </summary>
        public static Java.Lang.String EXTRA_REASON { get { if (!_EXTRA_REASONReady) { _EXTRA_REASONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_REASON"); _EXTRA_REASONReady = true; } return _EXTRA_REASONContent; } }
        private static Java.Lang.String _EXTRA_REASONContent = default;
        private static bool _EXTRA_REASONReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getActiveNetwork()"/> 
        /// </summary>
        public Android.Net.Network ActiveNetwork
        {
            get { return IExecuteWithSignature<Android.Net.Network>("getActiveNetwork", "()Landroid/net/Network;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getBoundNetworkForProcess()"/> 
        /// </summary>
        public Android.Net.Network BoundNetworkForProcess
        {
            get { return IExecuteWithSignature<Android.Net.Network>("getBoundNetworkForProcess", "()Landroid/net/Network;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getDefaultProxy()"/> 
        /// </summary>
        public Android.Net.ProxyInfo DefaultProxy
        {
            get { return IExecuteWithSignature<Android.Net.ProxyInfo>("getDefaultProxy", "()Landroid/net/ProxyInfo;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkWatchlistConfigHash()"/> 
        /// </summary>
        public byte[] NetworkWatchlistConfigHash
        {
            get { return IExecuteWithSignatureArray<byte>("getNetworkWatchlistConfigHash", "()[B"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getRestrictBackgroundStatus()"/> 
        /// </summary>
        public int RestrictBackgroundStatus
        {
            get { return IExecuteWithSignature<int>("getRestrictBackgroundStatus", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getLinkProperties(android.net.Network)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <returns><see cref="Android.Net.LinkProperties"/></returns>
        public Android.Net.LinkProperties GetLinkProperties(Android.Net.Network arg0)
        {
            return IExecuteWithSignature<Android.Net.LinkProperties>("getLinkProperties", "(Landroid/net/Network;)Landroid/net/LinkProperties;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkCapabilities(android.net.Network)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <returns><see cref="Android.Net.NetworkCapabilities"/></returns>
        public Android.Net.NetworkCapabilities GetNetworkCapabilities(Android.Net.Network arg0)
        {
            return IExecuteWithSignature<Android.Net.NetworkCapabilities>("getNetworkCapabilities", "(Landroid/net/Network;)Landroid/net/NetworkCapabilities;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#createSocketKeepalive(android.net.Network,android.net.IpSecManager.UdpEncapsulationSocket,java.net.InetAddress,java.net.InetAddress,java.util.concurrent.Executor,android.net.SocketKeepalive.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <param name="arg1"><see cref="Android.Net.IpSecManager.UdpEncapsulationSocket"/></param>
        /// <param name="arg2"><see cref="Java.Net.InetAddress"/></param>
        /// <param name="arg3"><see cref="Java.Net.InetAddress"/></param>
        /// <param name="arg4"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg5"><see cref="Android.Net.SocketKeepalive.Callback"/></param>
        /// <returns><see cref="Android.Net.SocketKeepalive"/></returns>
        public Android.Net.SocketKeepalive CreateSocketKeepalive(Android.Net.Network arg0, Android.Net.IpSecManager.UdpEncapsulationSocket arg1, Java.Net.InetAddress arg2, Java.Net.InetAddress arg3, Java.Util.Concurrent.Executor arg4, Android.Net.SocketKeepalive.Callback arg5)
        {
            return IExecute<Android.Net.SocketKeepalive>("createSocketKeepalive", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#bindProcessToNetwork(android.net.Network)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool BindProcessToNetwork(Android.Net.Network arg0)
        {
            return IExecuteWithSignature<bool>("bindProcessToNetwork", "(Landroid/net/Network;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#isActiveNetworkMetered()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsActiveNetworkMetered()
        {
            return IExecuteWithSignature<bool>("isActiveNetworkMetered", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#isDefaultNetworkActive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDefaultNetworkActive()
        {
            return IExecuteWithSignature<bool>("isDefaultNetworkActive", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#requestBandwidthUpdate(android.net.Network)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestBandwidthUpdate(Android.Net.Network arg0)
        {
            return IExecuteWithSignature<bool>("requestBandwidthUpdate", "(Landroid/net/Network;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getConnectionOwnerUid(int,java.net.InetSocketAddress,java.net.InetSocketAddress)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Net.InetSocketAddress"/></param>
        /// <param name="arg2"><see cref="Java.Net.InetSocketAddress"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetConnectionOwnerUid(int arg0, Java.Net.InetSocketAddress arg1, Java.Net.InetSocketAddress arg2)
        {
            return IExecute<int>("getConnectionOwnerUid", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#getMultipathPreference(android.net.Network)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetMultipathPreference(Android.Net.Network arg0)
        {
            return IExecuteWithSignature<int>("getMultipathPreference", "(Landroid/net/Network;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#addDefaultNetworkActiveListener(android.net.ConnectivityManager.OnNetworkActiveListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.ConnectivityManager.OnNetworkActiveListener"/></param>
        public void AddDefaultNetworkActiveListener(Android.Net.ConnectivityManager.OnNetworkActiveListener arg0)
        {
            IExecuteWithSignature("addDefaultNetworkActiveListener", "(Landroid/net/ConnectivityManager$OnNetworkActiveListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#registerBestMatchingNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        /// <param name="arg2"><see cref="Android.Os.Handler"/></param>
        public void RegisterBestMatchingNetworkCallback(Android.Net.NetworkRequest arg0, Android.Net.ConnectivityManager.NetworkCallback arg1, Android.Os.Handler arg2)
        {
            IExecute("registerBestMatchingNetworkCallback", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void RegisterDefaultNetworkCallback(Android.Net.ConnectivityManager.NetworkCallback arg0, Android.Os.Handler arg1)
        {
            IExecute("registerDefaultNetworkCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        public void RegisterDefaultNetworkCallback(Android.Net.ConnectivityManager.NetworkCallback arg0)
        {
            IExecuteWithSignature("registerDefaultNetworkCallback", "(Landroid/net/ConnectivityManager$NetworkCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkCallback(android.net.NetworkRequest,android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.App.PendingIntent"/></param>
        public void RegisterNetworkCallback(Android.Net.NetworkRequest arg0, Android.App.PendingIntent arg1)
        {
            IExecute("registerNetworkCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        /// <param name="arg2"><see cref="Android.Os.Handler"/></param>
        public void RegisterNetworkCallback(Android.Net.NetworkRequest arg0, Android.Net.ConnectivityManager.NetworkCallback arg1, Android.Os.Handler arg2)
        {
            IExecute("registerNetworkCallback", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        public void RegisterNetworkCallback(Android.Net.NetworkRequest arg0, Android.Net.ConnectivityManager.NetworkCallback arg1)
        {
            IExecute("registerNetworkCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#releaseNetworkRequest(android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
        public void ReleaseNetworkRequest(Android.App.PendingIntent arg0)
        {
            IExecuteWithSignature("releaseNetworkRequest", "(Landroid/app/PendingIntent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#removeDefaultNetworkActiveListener(android.net.ConnectivityManager.OnNetworkActiveListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.ConnectivityManager.OnNetworkActiveListener"/></param>
        public void RemoveDefaultNetworkActiveListener(Android.Net.ConnectivityManager.OnNetworkActiveListener arg0)
        {
            IExecuteWithSignature("removeDefaultNetworkActiveListener", "(Landroid/net/ConnectivityManager$OnNetworkActiveListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#reportNetworkConnectivity(android.net.Network,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void ReportNetworkConnectivity(Android.Net.Network arg0, bool arg1)
        {
            IExecute("reportNetworkConnectivity", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest,android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.App.PendingIntent"/></param>
        public void RequestNetwork(Android.Net.NetworkRequest arg0, Android.App.PendingIntent arg1)
        {
            IExecute("requestNetwork", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        /// <param name="arg2"><see cref="Android.Os.Handler"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void RequestNetwork(Android.Net.NetworkRequest arg0, Android.Net.ConnectivityManager.NetworkCallback arg1, Android.Os.Handler arg2, int arg3)
        {
            IExecute("requestNetwork", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        /// <param name="arg2"><see cref="Android.Os.Handler"/></param>
        public void RequestNetwork(Android.Net.NetworkRequest arg0, Android.Net.ConnectivityManager.NetworkCallback arg1, Android.Os.Handler arg2)
        {
            IExecute("requestNetwork", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void RequestNetwork(Android.Net.NetworkRequest arg0, Android.Net.ConnectivityManager.NetworkCallback arg1, int arg2)
        {
            IExecute("requestNetwork", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager.NetworkCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.NetworkRequest"/></param>
        /// <param name="arg1"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        public void RequestNetwork(Android.Net.NetworkRequest arg0, Android.Net.ConnectivityManager.NetworkCallback arg1)
        {
            IExecute("requestNetwork", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#unregisterNetworkCallback(android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
        public void UnregisterNetworkCallback(Android.App.PendingIntent arg0)
        {
            IExecuteWithSignature("unregisterNetworkCallback", "(Landroid/app/PendingIntent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.html#unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.ConnectivityManager.NetworkCallback"/></param>
        public void UnregisterNetworkCallback(Android.Net.ConnectivityManager.NetworkCallback arg0)
        {
            IExecuteWithSignature("unregisterNetworkCallback", "(Landroid/net/ConnectivityManager$NetworkCallback;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region NetworkCallback
        public partial class NetworkCallback
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#%3Cinit%3E(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public NetworkCallback(int arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#FLAG_INCLUDE_LOCATION_INFO"/>
            /// </summary>
            public static int FLAG_INCLUDE_LOCATION_INFO { get { if (!_FLAG_INCLUDE_LOCATION_INFOReady) { _FLAG_INCLUDE_LOCATION_INFOContent = SGetField<int>(LocalBridgeClazz, "FLAG_INCLUDE_LOCATION_INFO"); _FLAG_INCLUDE_LOCATION_INFOReady = true; } return _FLAG_INCLUDE_LOCATION_INFOContent; } }
            private static int _FLAG_INCLUDE_LOCATION_INFOContent = default;
            private static bool _FLAG_INCLUDE_LOCATION_INFOReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onAvailable(android.net.Network)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            public void OnAvailable(Android.Net.Network arg0)
            {
                IExecuteWithSignature("onAvailable", "(Landroid/net/Network;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onBlockedStatusChanged(android.net.Network,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            public void OnBlockedStatusChanged(Android.Net.Network arg0, bool arg1)
            {
                IExecute("onBlockedStatusChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            /// <param name="arg1"><see cref="Android.Net.NetworkCapabilities"/></param>
            public void OnCapabilitiesChanged(Android.Net.Network arg0, Android.Net.NetworkCapabilities arg1)
            {
                IExecute("onCapabilitiesChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onLinkPropertiesChanged(android.net.Network,android.net.LinkProperties)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            /// <param name="arg1"><see cref="Android.Net.LinkProperties"/></param>
            public void OnLinkPropertiesChanged(Android.Net.Network arg0, Android.Net.LinkProperties arg1)
            {
                IExecute("onLinkPropertiesChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onLosing(android.net.Network,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnLosing(Android.Net.Network arg0, int arg1)
            {
                IExecute("onLosing", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onLost(android.net.Network)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            public void OnLost(Android.Net.Network arg0)
            {
                IExecuteWithSignature("onLost", "(Landroid/net/Network;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onUnavailable()"/>
            /// </summary>
            public void OnUnavailable()
            {
                IExecuteWithSignature("onUnavailable", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnNetworkActiveListener
        public partial class OnNetworkActiveListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnNetworkActiveListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onNetworkActive", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(OnNetworkActiveEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/ConnectivityManager.OnNetworkActiveListener.html#onNetworkActive()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnNetworkActive"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action OnOnNetworkActive { get; set; } = null;

            void OnNetworkActiveEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
            {
                var methodToExecute = (OnOnNetworkActive != null) ? OnOnNetworkActive : OnNetworkActive;
                methodToExecute.Invoke();
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.OnNetworkActiveListener.html#onNetworkActive()"/>
            /// </summary>
            public virtual void OnNetworkActive()
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnNetworkActiveListenerDirect
        public partial class OnNetworkActiveListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/ConnectivityManager.OnNetworkActiveListener.html#onNetworkActive()"/>
            /// </summary>
            public override void OnNetworkActive()
            {
                IExecuteWithSignature("onNetworkActive", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
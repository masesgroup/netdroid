/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi
{
    #region SoftApConfiguration declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/wifi/SoftApConfiguration.html"/>
    /// </summary>
    public partial class SoftApConfiguration : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.net.wifi.SoftApConfiguration";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public SoftApConfiguration() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public SoftApConfiguration(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region SoftApConfiguration implementation
    public partial class SoftApConfiguration
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/SoftApConfiguration.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/SoftApConfiguration.html#SECURITY_TYPE_OPEN"/>
        /// </summary>
        public static int SECURITY_TYPE_OPEN { get { if (!_SECURITY_TYPE_OPENReady) { _SECURITY_TYPE_OPENContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_OPEN"); _SECURITY_TYPE_OPENReady = true; } return _SECURITY_TYPE_OPENContent; } }
        private static int _SECURITY_TYPE_OPENContent = default;
        private static bool _SECURITY_TYPE_OPENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/SoftApConfiguration.html#SECURITY_TYPE_WPA2_PSK"/>
        /// </summary>
        public static int SECURITY_TYPE_WPA2_PSK { get { if (!_SECURITY_TYPE_WPA2_PSKReady) { _SECURITY_TYPE_WPA2_PSKContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_WPA2_PSK"); _SECURITY_TYPE_WPA2_PSKReady = true; } return _SECURITY_TYPE_WPA2_PSKContent; } }
        private static int _SECURITY_TYPE_WPA2_PSKContent = default;
        private static bool _SECURITY_TYPE_WPA2_PSKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/SoftApConfiguration.html#SECURITY_TYPE_WPA3_OWE"/>
        /// </summary>
        public static int SECURITY_TYPE_WPA3_OWE { get { if (!_SECURITY_TYPE_WPA3_OWEReady) { _SECURITY_TYPE_WPA3_OWEContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_WPA3_OWE"); _SECURITY_TYPE_WPA3_OWEReady = true; } return _SECURITY_TYPE_WPA3_OWEContent; } }
        private static int _SECURITY_TYPE_WPA3_OWEContent = default;
        private static bool _SECURITY_TYPE_WPA3_OWEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/SoftApConfiguration.html#SECURITY_TYPE_WPA3_OWE_TRANSITION"/>
        /// </summary>
        public static int SECURITY_TYPE_WPA3_OWE_TRANSITION { get { if (!_SECURITY_TYPE_WPA3_OWE_TRANSITIONReady) { _SECURITY_TYPE_WPA3_OWE_TRANSITIONContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_WPA3_OWE_TRANSITION"); _SECURITY_TYPE_WPA3_OWE_TRANSITIONReady = true; } return _SECURITY_TYPE_WPA3_OWE_TRANSITIONContent; } }
        private static int _SECURITY_TYPE_WPA3_OWE_TRANSITIONContent = default;
        private static bool _SECURITY_TYPE_WPA3_OWE_TRANSITIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/SoftApConfiguration.html#SECURITY_TYPE_WPA3_SAE"/>
        /// </summary>
        public static int SECURITY_TYPE_WPA3_SAE { get { if (!_SECURITY_TYPE_WPA3_SAEReady) { _SECURITY_TYPE_WPA3_SAEContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_WPA3_SAE"); _SECURITY_TYPE_WPA3_SAEReady = true; } return _SECURITY_TYPE_WPA3_SAEContent; } }
        private static int _SECURITY_TYPE_WPA3_SAEContent = default;
        private static bool _SECURITY_TYPE_WPA3_SAEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/SoftApConfiguration.html#SECURITY_TYPE_WPA3_SAE_TRANSITION"/>
        /// </summary>
        public static int SECURITY_TYPE_WPA3_SAE_TRANSITION { get { if (!_SECURITY_TYPE_WPA3_SAE_TRANSITIONReady) { _SECURITY_TYPE_WPA3_SAE_TRANSITIONContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_WPA3_SAE_TRANSITION"); _SECURITY_TYPE_WPA3_SAE_TRANSITIONReady = true; } return _SECURITY_TYPE_WPA3_SAE_TRANSITIONContent; } }
        private static int _SECURITY_TYPE_WPA3_SAE_TRANSITIONContent = default;
        private static bool _SECURITY_TYPE_WPA3_SAE_TRANSITIONReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/SoftApConfiguration.html#getBssid()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.MacAddress"/></returns>
        public Android.Net.MacAddress GetBssid()
        {
            return IExecuteWithSignature<Android.Net.MacAddress>("getBssid", "()Landroid/net/MacAddress;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/SoftApConfiguration.html#getWifiSsid()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Wifi.WifiSsid"/></returns>
        public Android.Net.Wifi.WifiSsid GetWifiSsid()
        {
            return IExecuteWithSignature<Android.Net.Wifi.WifiSsid>("getWifiSsid", "()Landroid/net/wifi/WifiSsid;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/SoftApConfiguration.html#isHiddenSsid()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHiddenSsid()
        {
            return IExecuteWithSignature<bool>("isHiddenSsid", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/SoftApConfiguration.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/SoftApConfiguration.html#getSecurityType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSecurityType()
        {
            return IExecuteWithSignature<int>("getSecurityType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/SoftApConfiguration.html#getPassphrase()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetPassphrase()
        {
            return IExecuteWithSignature<Java.Lang.String>("getPassphrase", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/SoftApConfiguration.html#getSsid()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.String GetSsid()
        {
            return IExecuteWithSignature<Java.Lang.String>("getSsid", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/SoftApConfiguration.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
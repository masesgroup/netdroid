/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi.P2p
{
    #region WifiP2pConfig declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html"/>
    /// </summary>
    public partial class WifiP2pConfig : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pConfig";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public WifiP2pConfig() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public WifiP2pConfig(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public WifiP2pConfig(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pConfig$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Builder(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region WifiP2pConfig implementation
    public partial class WifiP2pConfig
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#%3Cinit%3E(android.net.wifi.p2p.WifiP2pConfig)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pConfig"/></param>
        public WifiP2pConfig(Android.Net.Wifi.P2p.WifiP2pConfig arg0)
            : base(arg0)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#wps"/>
        /// </summary>
        public Android.Net.Wifi.WpsInfo wps { get { return IGetField<Android.Net.Wifi.WpsInfo>("wps"); } set { ISetField("wps", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#groupOwnerIntent"/>
        /// </summary>
        public int groupOwnerIntent { get { return IGetField<int>("groupOwnerIntent"); } set { ISetField("groupOwnerIntent", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#deviceAddress"/>
        /// </summary>
        public Java.Lang.String deviceAddress { get { return IGetField<Java.Lang.String>("deviceAddress"); } set { ISetField("deviceAddress", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#GROUP_CLIENT_IP_PROVISIONING_MODE_IPV4_DHCP"/>
        /// </summary>
        public static int GROUP_CLIENT_IP_PROVISIONING_MODE_IPV4_DHCP { get { if (!_GROUP_CLIENT_IP_PROVISIONING_MODE_IPV4_DHCPReady) { _GROUP_CLIENT_IP_PROVISIONING_MODE_IPV4_DHCPContent = SGetField<int>(LocalBridgeClazz, "GROUP_CLIENT_IP_PROVISIONING_MODE_IPV4_DHCP"); _GROUP_CLIENT_IP_PROVISIONING_MODE_IPV4_DHCPReady = true; } return _GROUP_CLIENT_IP_PROVISIONING_MODE_IPV4_DHCPContent; } }
        private static int _GROUP_CLIENT_IP_PROVISIONING_MODE_IPV4_DHCPContent = default;
        private static bool _GROUP_CLIENT_IP_PROVISIONING_MODE_IPV4_DHCPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#GROUP_CLIENT_IP_PROVISIONING_MODE_IPV6_LINK_LOCAL"/>
        /// </summary>
        public static int GROUP_CLIENT_IP_PROVISIONING_MODE_IPV6_LINK_LOCAL { get { if (!_GROUP_CLIENT_IP_PROVISIONING_MODE_IPV6_LINK_LOCALReady) { _GROUP_CLIENT_IP_PROVISIONING_MODE_IPV6_LINK_LOCALContent = SGetField<int>(LocalBridgeClazz, "GROUP_CLIENT_IP_PROVISIONING_MODE_IPV6_LINK_LOCAL"); _GROUP_CLIENT_IP_PROVISIONING_MODE_IPV6_LINK_LOCALReady = true; } return _GROUP_CLIENT_IP_PROVISIONING_MODE_IPV6_LINK_LOCALContent; } }
        private static int _GROUP_CLIENT_IP_PROVISIONING_MODE_IPV6_LINK_LOCALContent = default;
        private static bool _GROUP_CLIENT_IP_PROVISIONING_MODE_IPV6_LINK_LOCALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#GROUP_OWNER_BAND_2GHZ"/>
        /// </summary>
        public static int GROUP_OWNER_BAND_2GHZ { get { if (!_GROUP_OWNER_BAND_2GHZReady) { _GROUP_OWNER_BAND_2GHZContent = SGetField<int>(LocalBridgeClazz, "GROUP_OWNER_BAND_2GHZ"); _GROUP_OWNER_BAND_2GHZReady = true; } return _GROUP_OWNER_BAND_2GHZContent; } }
        private static int _GROUP_OWNER_BAND_2GHZContent = default;
        private static bool _GROUP_OWNER_BAND_2GHZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#GROUP_OWNER_BAND_5GHZ"/>
        /// </summary>
        public static int GROUP_OWNER_BAND_5GHZ { get { if (!_GROUP_OWNER_BAND_5GHZReady) { _GROUP_OWNER_BAND_5GHZContent = SGetField<int>(LocalBridgeClazz, "GROUP_OWNER_BAND_5GHZ"); _GROUP_OWNER_BAND_5GHZReady = true; } return _GROUP_OWNER_BAND_5GHZContent; } }
        private static int _GROUP_OWNER_BAND_5GHZContent = default;
        private static bool _GROUP_OWNER_BAND_5GHZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#GROUP_OWNER_BAND_6GHZ"/>
        /// </summary>
        public static int GROUP_OWNER_BAND_6GHZ { get { if (!_GROUP_OWNER_BAND_6GHZReady) { _GROUP_OWNER_BAND_6GHZContent = SGetField<int>(LocalBridgeClazz, "GROUP_OWNER_BAND_6GHZ"); _GROUP_OWNER_BAND_6GHZReady = true; } return _GROUP_OWNER_BAND_6GHZContent; } }
        private static int _GROUP_OWNER_BAND_6GHZContent = default;
        private static bool _GROUP_OWNER_BAND_6GHZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#GROUP_OWNER_BAND_AUTO"/>
        /// </summary>
        public static int GROUP_OWNER_BAND_AUTO { get { if (!_GROUP_OWNER_BAND_AUTOReady) { _GROUP_OWNER_BAND_AUTOContent = SGetField<int>(LocalBridgeClazz, "GROUP_OWNER_BAND_AUTO"); _GROUP_OWNER_BAND_AUTOReady = true; } return _GROUP_OWNER_BAND_AUTOContent; } }
        private static int _GROUP_OWNER_BAND_AUTOContent = default;
        private static bool _GROUP_OWNER_BAND_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#GROUP_OWNER_INTENT_AUTO"/>
        /// </summary>
        public static int GROUP_OWNER_INTENT_AUTO { get { if (!_GROUP_OWNER_INTENT_AUTOReady) { _GROUP_OWNER_INTENT_AUTOContent = SGetField<int>(LocalBridgeClazz, "GROUP_OWNER_INTENT_AUTO"); _GROUP_OWNER_INTENT_AUTOReady = true; } return _GROUP_OWNER_INTENT_AUTOContent; } }
        private static int _GROUP_OWNER_INTENT_AUTOContent = default;
        private static bool _GROUP_OWNER_INTENT_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#GROUP_OWNER_INTENT_MAX"/>
        /// </summary>
        public static int GROUP_OWNER_INTENT_MAX { get { if (!_GROUP_OWNER_INTENT_MAXReady) { _GROUP_OWNER_INTENT_MAXContent = SGetField<int>(LocalBridgeClazz, "GROUP_OWNER_INTENT_MAX"); _GROUP_OWNER_INTENT_MAXReady = true; } return _GROUP_OWNER_INTENT_MAXContent; } }
        private static int _GROUP_OWNER_INTENT_MAXContent = default;
        private static bool _GROUP_OWNER_INTENT_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#GROUP_OWNER_INTENT_MIN"/>
        /// </summary>
        public static int GROUP_OWNER_INTENT_MIN { get { if (!_GROUP_OWNER_INTENT_MINReady) { _GROUP_OWNER_INTENT_MINContent = SGetField<int>(LocalBridgeClazz, "GROUP_OWNER_INTENT_MIN"); _GROUP_OWNER_INTENT_MINReady = true; } return _GROUP_OWNER_INTENT_MINContent; } }
        private static int _GROUP_OWNER_INTENT_MINContent = default;
        private static bool _GROUP_OWNER_INTENT_MINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#P2P_VERSION_1"/>
        /// </summary>
        public static int P2P_VERSION_1 { get { if (!_P2P_VERSION_1Ready) { _P2P_VERSION_1Content = SGetField<int>(LocalBridgeClazz, "P2P_VERSION_1"); _P2P_VERSION_1Ready = true; } return _P2P_VERSION_1Content; } }
        private static int _P2P_VERSION_1Content = default;
        private static bool _P2P_VERSION_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#P2P_VERSION_2"/>
        /// </summary>
        public static int P2P_VERSION_2 { get { if (!_P2P_VERSION_2Ready) { _P2P_VERSION_2Content = SGetField<int>(LocalBridgeClazz, "P2P_VERSION_2"); _P2P_VERSION_2Ready = true; } return _P2P_VERSION_2Content; } }
        private static int _P2P_VERSION_2Content = default;
        private static bool _P2P_VERSION_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#PCC_MODE_CONNECTION_TYPE_LEGACY_ONLY"/>
        /// </summary>
        public static int PCC_MODE_CONNECTION_TYPE_LEGACY_ONLY { get { if (!_PCC_MODE_CONNECTION_TYPE_LEGACY_ONLYReady) { _PCC_MODE_CONNECTION_TYPE_LEGACY_ONLYContent = SGetField<int>(LocalBridgeClazz, "PCC_MODE_CONNECTION_TYPE_LEGACY_ONLY"); _PCC_MODE_CONNECTION_TYPE_LEGACY_ONLYReady = true; } return _PCC_MODE_CONNECTION_TYPE_LEGACY_ONLYContent; } }
        private static int _PCC_MODE_CONNECTION_TYPE_LEGACY_ONLYContent = default;
        private static bool _PCC_MODE_CONNECTION_TYPE_LEGACY_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#PCC_MODE_CONNECTION_TYPE_LEGACY_OR_R2"/>
        /// </summary>
        public static int PCC_MODE_CONNECTION_TYPE_LEGACY_OR_R2 { get { if (!_PCC_MODE_CONNECTION_TYPE_LEGACY_OR_R2Ready) { _PCC_MODE_CONNECTION_TYPE_LEGACY_OR_R2Content = SGetField<int>(LocalBridgeClazz, "PCC_MODE_CONNECTION_TYPE_LEGACY_OR_R2"); _PCC_MODE_CONNECTION_TYPE_LEGACY_OR_R2Ready = true; } return _PCC_MODE_CONNECTION_TYPE_LEGACY_OR_R2Content; } }
        private static int _PCC_MODE_CONNECTION_TYPE_LEGACY_OR_R2Content = default;
        private static bool _PCC_MODE_CONNECTION_TYPE_LEGACY_OR_R2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#PCC_MODE_CONNECTION_TYPE_R2_ONLY"/>
        /// </summary>
        public static int PCC_MODE_CONNECTION_TYPE_R2_ONLY { get { if (!_PCC_MODE_CONNECTION_TYPE_R2_ONLYReady) { _PCC_MODE_CONNECTION_TYPE_R2_ONLYContent = SGetField<int>(LocalBridgeClazz, "PCC_MODE_CONNECTION_TYPE_R2_ONLY"); _PCC_MODE_CONNECTION_TYPE_R2_ONLYReady = true; } return _PCC_MODE_CONNECTION_TYPE_R2_ONLYContent; } }
        private static int _PCC_MODE_CONNECTION_TYPE_R2_ONLYContent = default;
        private static bool _PCC_MODE_CONNECTION_TYPE_R2_ONLYReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#getPairingBootstrappingConfig()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Wifi.P2p.WifiP2pPairingBootstrappingConfig"/></returns>
        public Android.Net.Wifi.P2p.WifiP2pPairingBootstrappingConfig GetPairingBootstrappingConfig()
        {
            return IExecuteWithSignature<Android.Net.Wifi.P2p.WifiP2pPairingBootstrappingConfig>("getPairingBootstrappingConfig", "()Landroid/net/wifi/p2p/WifiP2pPairingBootstrappingConfig;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#isAuthorizeConnectionFromPeerEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAuthorizeConnectionFromPeerEnabled()
        {
            return IExecuteWithSignature<bool>("isAuthorizeConnectionFromPeerEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#getGroupClientIpProvisioningMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetGroupClientIpProvisioningMode()
        {
            return IExecuteWithSignature<int>("getGroupClientIpProvisioningMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#getGroupOwnerBand()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetGroupOwnerBand()
        {
            return IExecuteWithSignature<int>("getGroupOwnerBand", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#getGroupOwnerVersion()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetGroupOwnerVersion()
        {
            return IExecuteWithSignature<int>("getGroupOwnerVersion", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#getNetworkId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNetworkId()
        {
            return IExecuteWithSignature<int>("getNetworkId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#getPccModeConnectionType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPccModeConnectionType()
        {
            return IExecuteWithSignature<int>("getPccModeConnectionType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#getNetworkName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetNetworkName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getNetworkName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#getPassphrase()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetPassphrase()
        {
            return IExecuteWithSignature<Java.Lang.String>("getPassphrase", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#setGroupOwnerVersion(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetGroupOwnerVersion(int arg0)
        {
            IExecuteWithSignature("setGroupOwnerVersion", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Wifi.P2p.WifiP2pConfig"/></returns>
            public Android.Net.Wifi.P2p.WifiP2pConfig Build()
            {
                return IExecuteWithSignature<Android.Net.Wifi.P2p.WifiP2pConfig>("build", "()Landroid/net/wifi/p2p/WifiP2pConfig;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#enablePersistentMode(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Net.Wifi.P2p.WifiP2pConfig.Builder"/></returns>
            public Android.Net.Wifi.P2p.WifiP2pConfig.Builder EnablePersistentMode(bool arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.P2p.WifiP2pConfig.Builder>("enablePersistentMode", "(Z)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#setAuthorizeConnectionFromPeerEnabled(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Net.Wifi.P2p.WifiP2pConfig.Builder"/></returns>
            public Android.Net.Wifi.P2p.WifiP2pConfig.Builder SetAuthorizeConnectionFromPeerEnabled(bool arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.P2p.WifiP2pConfig.Builder>("setAuthorizeConnectionFromPeerEnabled", "(Z)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#setDeviceAddress(android.net.MacAddress)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.MacAddress"/></param>
            /// <returns><see cref="Android.Net.Wifi.P2p.WifiP2pConfig.Builder"/></returns>
            public Android.Net.Wifi.P2p.WifiP2pConfig.Builder SetDeviceAddress(Android.Net.MacAddress arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.P2p.WifiP2pConfig.Builder>("setDeviceAddress", "(Landroid/net/MacAddress;)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#setGroupClientIpProvisioningMode(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.P2p.WifiP2pConfig.Builder"/></returns>
            public Android.Net.Wifi.P2p.WifiP2pConfig.Builder SetGroupClientIpProvisioningMode(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.P2p.WifiP2pConfig.Builder>("setGroupClientIpProvisioningMode", "(I)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#setGroupOperatingBand(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.P2p.WifiP2pConfig.Builder"/></returns>
            public Android.Net.Wifi.P2p.WifiP2pConfig.Builder SetGroupOperatingBand(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.P2p.WifiP2pConfig.Builder>("setGroupOperatingBand", "(I)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#setGroupOperatingFrequency(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.P2p.WifiP2pConfig.Builder"/></returns>
            public Android.Net.Wifi.P2p.WifiP2pConfig.Builder SetGroupOperatingFrequency(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.P2p.WifiP2pConfig.Builder>("setGroupOperatingFrequency", "(I)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#setNetworkName(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.Wifi.P2p.WifiP2pConfig.Builder"/></returns>
            public Android.Net.Wifi.P2p.WifiP2pConfig.Builder SetNetworkName(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.P2p.WifiP2pConfig.Builder>("setNetworkName", "(Ljava/lang/String;)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#setPairingBootstrappingConfig(android.net.wifi.p2p.WifiP2pPairingBootstrappingConfig)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pPairingBootstrappingConfig"/></param>
            /// <returns><see cref="Android.Net.Wifi.P2p.WifiP2pConfig.Builder"/></returns>
            public Android.Net.Wifi.P2p.WifiP2pConfig.Builder SetPairingBootstrappingConfig(Android.Net.Wifi.P2p.WifiP2pPairingBootstrappingConfig arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.P2p.WifiP2pConfig.Builder>("setPairingBootstrappingConfig", "(Landroid/net/wifi/p2p/WifiP2pPairingBootstrappingConfig;)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#setPassphrase(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.Wifi.P2p.WifiP2pConfig.Builder"/></returns>
            public Android.Net.Wifi.P2p.WifiP2pConfig.Builder SetPassphrase(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.P2p.WifiP2pConfig.Builder>("setPassphrase", "(Ljava/lang/String;)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#setPccModeConnectionType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.P2p.WifiP2pConfig.Builder"/></returns>
            public Android.Net.Wifi.P2p.WifiP2pConfig.Builder SetPccModeConnectionType(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.P2p.WifiP2pConfig.Builder>("setPccModeConnectionType", "(I)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi.P2p.Nsd
{
    #region WifiP2pUsdBasedServiceConfig declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig.html"/>
    /// </summary>
    public partial class WifiP2pUsdBasedServiceConfig : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.net.wifi.p2p.nsd.WifiP2pUsdBasedServiceConfig";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public WifiP2pUsdBasedServiceConfig() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public WifiP2pUsdBasedServiceConfig(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public WifiP2pUsdBasedServiceConfig(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.net.wifi.p2p.nsd.WifiP2pUsdBasedServiceConfig$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Builder(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region WifiP2pUsdBasedServiceConfig implementation
    public partial class WifiP2pUsdBasedServiceConfig
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig.html#SERVICE_PROTOCOL_TYPE_BONJOUR"/>
        /// </summary>
        public static int SERVICE_PROTOCOL_TYPE_BONJOUR { get { if (!_SERVICE_PROTOCOL_TYPE_BONJOURReady) { _SERVICE_PROTOCOL_TYPE_BONJOURContent = SGetField<int>(LocalBridgeClazz, "SERVICE_PROTOCOL_TYPE_BONJOUR"); _SERVICE_PROTOCOL_TYPE_BONJOURReady = true; } return _SERVICE_PROTOCOL_TYPE_BONJOURContent; } }
        private static int _SERVICE_PROTOCOL_TYPE_BONJOURContent = default;
        private static bool _SERVICE_PROTOCOL_TYPE_BONJOURReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig.html#SERVICE_PROTOCOL_TYPE_GENERIC"/>
        /// </summary>
        public static int SERVICE_PROTOCOL_TYPE_GENERIC { get { if (!_SERVICE_PROTOCOL_TYPE_GENERICReady) { _SERVICE_PROTOCOL_TYPE_GENERICContent = SGetField<int>(LocalBridgeClazz, "SERVICE_PROTOCOL_TYPE_GENERIC"); _SERVICE_PROTOCOL_TYPE_GENERICReady = true; } return _SERVICE_PROTOCOL_TYPE_GENERICContent; } }
        private static int _SERVICE_PROTOCOL_TYPE_GENERICContent = default;
        private static bool _SERVICE_PROTOCOL_TYPE_GENERICReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig.html#getMaxAllowedServiceSpecificInfoLength()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public static int GetMaxAllowedServiceSpecificInfoLength()
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getMaxAllowedServiceSpecificInfoLength", "()I");
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig.html#getServiceSpecificInfo()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        public byte[] GetServiceSpecificInfo()
        {
            return IExecuteWithSignatureArray<byte>("getServiceSpecificInfo", "()[B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig.html#getServiceProtocolType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetServiceProtocolType()
        {
            return IExecuteWithSignature<int>("getServiceProtocolType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig.html#getServiceName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetServiceName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getServiceName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig.Builder.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public Builder(Java.Lang.String arg0)
                : base(arg0)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Wifi.P2p.Nsd.WifiP2pUsdBasedServiceConfig"/></returns>
            public Android.Net.Wifi.P2p.Nsd.WifiP2pUsdBasedServiceConfig Build()
            {
                return IExecuteWithSignature<Android.Net.Wifi.P2p.Nsd.WifiP2pUsdBasedServiceConfig>("build", "()Landroid/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig.Builder.html#setServiceProtocolType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.P2p.Nsd.WifiP2pUsdBasedServiceConfig.Builder"/></returns>
            public Android.Net.Wifi.P2p.Nsd.WifiP2pUsdBasedServiceConfig.Builder SetServiceProtocolType(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.P2p.Nsd.WifiP2pUsdBasedServiceConfig.Builder>("setServiceProtocolType", "(I)Landroid/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig.Builder.html#setServiceSpecificInfo(byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <returns><see cref="Android.Net.Wifi.P2p.Nsd.WifiP2pUsdBasedServiceConfig.Builder"/></returns>
            public Android.Net.Wifi.P2p.Nsd.WifiP2pUsdBasedServiceConfig.Builder SetServiceSpecificInfo(byte[] arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.P2p.Nsd.WifiP2pUsdBasedServiceConfig.Builder>("setServiceSpecificInfo", "([B)Landroid/net/wifi/p2p/nsd/WifiP2pUsdBasedServiceConfig$Builder;", new object[] { arg0 });
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
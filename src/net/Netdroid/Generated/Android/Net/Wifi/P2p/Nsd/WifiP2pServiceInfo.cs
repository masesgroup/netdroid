/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi.P2p.Nsd
{
    #region WifiP2pServiceInfo
    public partial class WifiP2pServiceInfo
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pServiceInfo.html#SERVICE_TYPE_ALL"/>
        /// </summary>
        public static int SERVICE_TYPE_ALL { get { if (!_SERVICE_TYPE_ALLReady) { _SERVICE_TYPE_ALLContent = SGetField<int>(LocalBridgeClazz, "SERVICE_TYPE_ALL"); _SERVICE_TYPE_ALLReady = true; } return _SERVICE_TYPE_ALLContent; } }
        private static int _SERVICE_TYPE_ALLContent = default;
        private static bool _SERVICE_TYPE_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pServiceInfo.html#SERVICE_TYPE_BONJOUR"/>
        /// </summary>
        public static int SERVICE_TYPE_BONJOUR { get { if (!_SERVICE_TYPE_BONJOURReady) { _SERVICE_TYPE_BONJOURContent = SGetField<int>(LocalBridgeClazz, "SERVICE_TYPE_BONJOUR"); _SERVICE_TYPE_BONJOURReady = true; } return _SERVICE_TYPE_BONJOURContent; } }
        private static int _SERVICE_TYPE_BONJOURContent = default;
        private static bool _SERVICE_TYPE_BONJOURReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pServiceInfo.html#SERVICE_TYPE_UPNP"/>
        /// </summary>
        public static int SERVICE_TYPE_UPNP { get { if (!_SERVICE_TYPE_UPNPReady) { _SERVICE_TYPE_UPNPContent = SGetField<int>(LocalBridgeClazz, "SERVICE_TYPE_UPNP"); _SERVICE_TYPE_UPNPReady = true; } return _SERVICE_TYPE_UPNPContent; } }
        private static int _SERVICE_TYPE_UPNPContent = default;
        private static bool _SERVICE_TYPE_UPNPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pServiceInfo.html#SERVICE_TYPE_VENDOR_SPECIFIC"/>
        /// </summary>
        public static int SERVICE_TYPE_VENDOR_SPECIFIC { get { if (!_SERVICE_TYPE_VENDOR_SPECIFICReady) { _SERVICE_TYPE_VENDOR_SPECIFICContent = SGetField<int>(LocalBridgeClazz, "SERVICE_TYPE_VENDOR_SPECIFIC"); _SERVICE_TYPE_VENDOR_SPECIFICReady = true; } return _SERVICE_TYPE_VENDOR_SPECIFICContent; } }
        private static int _SERVICE_TYPE_VENDOR_SPECIFICContent = default;
        private static bool _SERVICE_TYPE_VENDOR_SPECIFICReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pServiceInfo.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pServiceInfo.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi.P2p
{
    #region WifiP2pPairingBootstrappingConfig declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pPairingBootstrappingConfig.html"/>
    /// </summary>
    public partial class WifiP2pPairingBootstrappingConfig : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pPairingBootstrappingConfig";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public WifiP2pPairingBootstrappingConfig() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public WifiP2pPairingBootstrappingConfig(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public WifiP2pPairingBootstrappingConfig(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region WifiP2pPairingBootstrappingConfig implementation
    public partial class WifiP2pPairingBootstrappingConfig
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pPairingBootstrappingConfig.html#%3Cinit%3E(int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public WifiP2pPairingBootstrappingConfig(int arg0, Java.Lang.String arg1)
            : base(arg0, arg1)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pPairingBootstrappingConfig.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pPairingBootstrappingConfig.html#PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PASSPHRASE"/>
        /// </summary>
        public static int PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PASSPHRASE { get { if (!_PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PASSPHRASEReady) { _PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PASSPHRASEContent = SGetField<int>(LocalBridgeClazz, "PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PASSPHRASE"); _PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PASSPHRASEReady = true; } return _PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PASSPHRASEContent; } }
        private static int _PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PASSPHRASEContent = default;
        private static bool _PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PASSPHRASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pPairingBootstrappingConfig.html#PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PINCODE"/>
        /// </summary>
        public static int PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PINCODE { get { if (!_PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PINCODEReady) { _PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PINCODEContent = SGetField<int>(LocalBridgeClazz, "PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PINCODE"); _PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PINCODEReady = true; } return _PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PINCODEContent; } }
        private static int _PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PINCODEContent = default;
        private static bool _PAIRING_BOOTSTRAPPING_METHOD_DISPLAY_PINCODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pPairingBootstrappingConfig.html#PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PASSPHRASE"/>
        /// </summary>
        public static int PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PASSPHRASE { get { if (!_PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PASSPHRASEReady) { _PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PASSPHRASEContent = SGetField<int>(LocalBridgeClazz, "PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PASSPHRASE"); _PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PASSPHRASEReady = true; } return _PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PASSPHRASEContent; } }
        private static int _PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PASSPHRASEContent = default;
        private static bool _PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PASSPHRASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pPairingBootstrappingConfig.html#PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PINCODE"/>
        /// </summary>
        public static int PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PINCODE { get { if (!_PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PINCODEReady) { _PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PINCODEContent = SGetField<int>(LocalBridgeClazz, "PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PINCODE"); _PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PINCODEReady = true; } return _PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PINCODEContent; } }
        private static int _PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PINCODEContent = default;
        private static bool _PAIRING_BOOTSTRAPPING_METHOD_KEYPAD_PINCODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pPairingBootstrappingConfig.html#PAIRING_BOOTSTRAPPING_METHOD_OPPORTUNISTIC"/>
        /// </summary>
        public static int PAIRING_BOOTSTRAPPING_METHOD_OPPORTUNISTIC { get { if (!_PAIRING_BOOTSTRAPPING_METHOD_OPPORTUNISTICReady) { _PAIRING_BOOTSTRAPPING_METHOD_OPPORTUNISTICContent = SGetField<int>(LocalBridgeClazz, "PAIRING_BOOTSTRAPPING_METHOD_OPPORTUNISTIC"); _PAIRING_BOOTSTRAPPING_METHOD_OPPORTUNISTICReady = true; } return _PAIRING_BOOTSTRAPPING_METHOD_OPPORTUNISTICContent; } }
        private static int _PAIRING_BOOTSTRAPPING_METHOD_OPPORTUNISTICContent = default;
        private static bool _PAIRING_BOOTSTRAPPING_METHOD_OPPORTUNISTICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pPairingBootstrappingConfig.html#PAIRING_BOOTSTRAPPING_METHOD_OUT_OF_BAND"/>
        /// </summary>
        public static int PAIRING_BOOTSTRAPPING_METHOD_OUT_OF_BAND { get { if (!_PAIRING_BOOTSTRAPPING_METHOD_OUT_OF_BANDReady) { _PAIRING_BOOTSTRAPPING_METHOD_OUT_OF_BANDContent = SGetField<int>(LocalBridgeClazz, "PAIRING_BOOTSTRAPPING_METHOD_OUT_OF_BAND"); _PAIRING_BOOTSTRAPPING_METHOD_OUT_OF_BANDReady = true; } return _PAIRING_BOOTSTRAPPING_METHOD_OUT_OF_BANDContent; } }
        private static int _PAIRING_BOOTSTRAPPING_METHOD_OUT_OF_BANDContent = default;
        private static bool _PAIRING_BOOTSTRAPPING_METHOD_OUT_OF_BANDReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pPairingBootstrappingConfig.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pPairingBootstrappingConfig.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
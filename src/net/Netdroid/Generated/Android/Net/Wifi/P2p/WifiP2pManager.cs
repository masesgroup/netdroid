/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi.P2p
{
    #region WifiP2pManager
    public partial class WifiP2pManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#BUSY"/>
        /// </summary>
        public static int BUSY { get { if (!_BUSYReady) { _BUSYContent = SGetField<int>(LocalBridgeClazz, "BUSY"); _BUSYReady = true; } return _BUSYContent; } }
        private static int _BUSYContent = default;
        private static bool _BUSYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#CONNECTION_REQUEST_ACCEPT"/>
        /// </summary>
        public static int CONNECTION_REQUEST_ACCEPT { get { if (!_CONNECTION_REQUEST_ACCEPTReady) { _CONNECTION_REQUEST_ACCEPTContent = SGetField<int>(LocalBridgeClazz, "CONNECTION_REQUEST_ACCEPT"); _CONNECTION_REQUEST_ACCEPTReady = true; } return _CONNECTION_REQUEST_ACCEPTContent; } }
        private static int _CONNECTION_REQUEST_ACCEPTContent = default;
        private static bool _CONNECTION_REQUEST_ACCEPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICE"/>
        /// </summary>
        public static int CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICE { get { if (!_CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICEReady) { _CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICEContent = SGetField<int>(LocalBridgeClazz, "CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICE"); _CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICEReady = true; } return _CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICEContent; } }
        private static int _CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICEContent = default;
        private static bool _CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#CONNECTION_REQUEST_DEFER_TO_SERVICE"/>
        /// </summary>
        public static int CONNECTION_REQUEST_DEFER_TO_SERVICE { get { if (!_CONNECTION_REQUEST_DEFER_TO_SERVICEReady) { _CONNECTION_REQUEST_DEFER_TO_SERVICEContent = SGetField<int>(LocalBridgeClazz, "CONNECTION_REQUEST_DEFER_TO_SERVICE"); _CONNECTION_REQUEST_DEFER_TO_SERVICEReady = true; } return _CONNECTION_REQUEST_DEFER_TO_SERVICEContent; } }
        private static int _CONNECTION_REQUEST_DEFER_TO_SERVICEContent = default;
        private static bool _CONNECTION_REQUEST_DEFER_TO_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#CONNECTION_REQUEST_REJECT"/>
        /// </summary>
        public static int CONNECTION_REQUEST_REJECT { get { if (!_CONNECTION_REQUEST_REJECTReady) { _CONNECTION_REQUEST_REJECTContent = SGetField<int>(LocalBridgeClazz, "CONNECTION_REQUEST_REJECT"); _CONNECTION_REQUEST_REJECTReady = true; } return _CONNECTION_REQUEST_REJECTContent; } }
        private static int _CONNECTION_REQUEST_REJECTContent = default;
        private static bool _CONNECTION_REQUEST_REJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#ERROR"/>
        /// </summary>
        public static int ERROR { get { if (!_ERRORReady) { _ERRORContent = SGetField<int>(LocalBridgeClazz, "ERROR"); _ERRORReady = true; } return _ERRORContent; } }
        private static int _ERRORContent = default;
        private static bool _ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#NO_SERVICE_REQUESTS"/>
        /// </summary>
        public static int NO_SERVICE_REQUESTS { get { if (!_NO_SERVICE_REQUESTSReady) { _NO_SERVICE_REQUESTSContent = SGetField<int>(LocalBridgeClazz, "NO_SERVICE_REQUESTS"); _NO_SERVICE_REQUESTSReady = true; } return _NO_SERVICE_REQUESTSContent; } }
        private static int _NO_SERVICE_REQUESTSContent = default;
        private static bool _NO_SERVICE_REQUESTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#P2P_UNSUPPORTED"/>
        /// </summary>
        public static int P2P_UNSUPPORTED { get { if (!_P2P_UNSUPPORTEDReady) { _P2P_UNSUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "P2P_UNSUPPORTED"); _P2P_UNSUPPORTEDReady = true; } return _P2P_UNSUPPORTEDContent; } }
        private static int _P2P_UNSUPPORTEDContent = default;
        private static bool _P2P_UNSUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_DISCOVERY_STARTED"/>
        /// </summary>
        public static int WIFI_P2P_DISCOVERY_STARTED { get { if (!_WIFI_P2P_DISCOVERY_STARTEDReady) { _WIFI_P2P_DISCOVERY_STARTEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_P2P_DISCOVERY_STARTED"); _WIFI_P2P_DISCOVERY_STARTEDReady = true; } return _WIFI_P2P_DISCOVERY_STARTEDContent; } }
        private static int _WIFI_P2P_DISCOVERY_STARTEDContent = default;
        private static bool _WIFI_P2P_DISCOVERY_STARTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_DISCOVERY_STOPPED"/>
        /// </summary>
        public static int WIFI_P2P_DISCOVERY_STOPPED { get { if (!_WIFI_P2P_DISCOVERY_STOPPEDReady) { _WIFI_P2P_DISCOVERY_STOPPEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_P2P_DISCOVERY_STOPPED"); _WIFI_P2P_DISCOVERY_STOPPEDReady = true; } return _WIFI_P2P_DISCOVERY_STOPPEDContent; } }
        private static int _WIFI_P2P_DISCOVERY_STOPPEDContent = default;
        private static bool _WIFI_P2P_DISCOVERY_STOPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_LISTEN_STARTED"/>
        /// </summary>
        public static int WIFI_P2P_LISTEN_STARTED { get { if (!_WIFI_P2P_LISTEN_STARTEDReady) { _WIFI_P2P_LISTEN_STARTEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_P2P_LISTEN_STARTED"); _WIFI_P2P_LISTEN_STARTEDReady = true; } return _WIFI_P2P_LISTEN_STARTEDContent; } }
        private static int _WIFI_P2P_LISTEN_STARTEDContent = default;
        private static bool _WIFI_P2P_LISTEN_STARTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_LISTEN_STOPPED"/>
        /// </summary>
        public static int WIFI_P2P_LISTEN_STOPPED { get { if (!_WIFI_P2P_LISTEN_STOPPEDReady) { _WIFI_P2P_LISTEN_STOPPEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_P2P_LISTEN_STOPPED"); _WIFI_P2P_LISTEN_STOPPEDReady = true; } return _WIFI_P2P_LISTEN_STOPPEDContent; } }
        private static int _WIFI_P2P_LISTEN_STOPPEDContent = default;
        private static bool _WIFI_P2P_LISTEN_STOPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_STATE_DISABLED"/>
        /// </summary>
        public static int WIFI_P2P_STATE_DISABLED { get { if (!_WIFI_P2P_STATE_DISABLEDReady) { _WIFI_P2P_STATE_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_P2P_STATE_DISABLED"); _WIFI_P2P_STATE_DISABLEDReady = true; } return _WIFI_P2P_STATE_DISABLEDContent; } }
        private static int _WIFI_P2P_STATE_DISABLEDContent = default;
        private static bool _WIFI_P2P_STATE_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_STATE_ENABLED"/>
        /// </summary>
        public static int WIFI_P2P_STATE_ENABLED { get { if (!_WIFI_P2P_STATE_ENABLEDReady) { _WIFI_P2P_STATE_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_P2P_STATE_ENABLED"); _WIFI_P2P_STATE_ENABLEDReady = true; } return _WIFI_P2P_STATE_ENABLEDContent; } }
        private static int _WIFI_P2P_STATE_ENABLEDContent = default;
        private static bool _WIFI_P2P_STATE_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#ACTION_WIFI_P2P_LISTEN_STATE_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_WIFI_P2P_LISTEN_STATE_CHANGED { get { if (!_ACTION_WIFI_P2P_LISTEN_STATE_CHANGEDReady) { _ACTION_WIFI_P2P_LISTEN_STATE_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_WIFI_P2P_LISTEN_STATE_CHANGED"); _ACTION_WIFI_P2P_LISTEN_STATE_CHANGEDReady = true; } return _ACTION_WIFI_P2P_LISTEN_STATE_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_WIFI_P2P_LISTEN_STATE_CHANGEDContent = default;
        private static bool _ACTION_WIFI_P2P_LISTEN_STATE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGED { get { if (!_ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGEDReady) { _ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGED"); _ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGEDReady = true; } return _ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGEDContent = default;
        private static bool _ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_DISCOVERY_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DISCOVERY_STATE { get { if (!_EXTRA_DISCOVERY_STATEReady) { _EXTRA_DISCOVERY_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DISCOVERY_STATE"); _EXTRA_DISCOVERY_STATEReady = true; } return _EXTRA_DISCOVERY_STATEContent; } }
        private static Java.Lang.String _EXTRA_DISCOVERY_STATEContent = default;
        private static bool _EXTRA_DISCOVERY_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_LISTEN_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_LISTEN_STATE { get { if (!_EXTRA_LISTEN_STATEReady) { _EXTRA_LISTEN_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_LISTEN_STATE"); _EXTRA_LISTEN_STATEReady = true; } return _EXTRA_LISTEN_STATEContent; } }
        private static Java.Lang.String _EXTRA_LISTEN_STATEContent = default;
        private static bool _EXTRA_LISTEN_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_NETWORK_INFO"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NETWORK_INFO { get { if (!_EXTRA_NETWORK_INFOReady) { _EXTRA_NETWORK_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NETWORK_INFO"); _EXTRA_NETWORK_INFOReady = true; } return _EXTRA_NETWORK_INFOContent; } }
        private static Java.Lang.String _EXTRA_NETWORK_INFOContent = default;
        private static bool _EXTRA_NETWORK_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_P2P_DEVICE_LIST"/>
        /// </summary>
        public static Java.Lang.String EXTRA_P2P_DEVICE_LIST { get { if (!_EXTRA_P2P_DEVICE_LISTReady) { _EXTRA_P2P_DEVICE_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_P2P_DEVICE_LIST"); _EXTRA_P2P_DEVICE_LISTReady = true; } return _EXTRA_P2P_DEVICE_LISTContent; } }
        private static Java.Lang.String _EXTRA_P2P_DEVICE_LISTContent = default;
        private static bool _EXTRA_P2P_DEVICE_LISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_REQUEST_CONFIG"/>
        /// </summary>
        public static Java.Lang.String EXTRA_REQUEST_CONFIG { get { if (!_EXTRA_REQUEST_CONFIGReady) { _EXTRA_REQUEST_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_REQUEST_CONFIG"); _EXTRA_REQUEST_CONFIGReady = true; } return _EXTRA_REQUEST_CONFIGContent; } }
        private static Java.Lang.String _EXTRA_REQUEST_CONFIGContent = default;
        private static bool _EXTRA_REQUEST_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_REQUEST_RESPONSE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_REQUEST_RESPONSE { get { if (!_EXTRA_REQUEST_RESPONSEReady) { _EXTRA_REQUEST_RESPONSEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_REQUEST_RESPONSE"); _EXTRA_REQUEST_RESPONSEReady = true; } return _EXTRA_REQUEST_RESPONSEContent; } }
        private static Java.Lang.String _EXTRA_REQUEST_RESPONSEContent = default;
        private static bool _EXTRA_REQUEST_RESPONSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_WIFI_P2P_DEVICE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_WIFI_P2P_DEVICE { get { if (!_EXTRA_WIFI_P2P_DEVICEReady) { _EXTRA_WIFI_P2P_DEVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_WIFI_P2P_DEVICE"); _EXTRA_WIFI_P2P_DEVICEReady = true; } return _EXTRA_WIFI_P2P_DEVICEContent; } }
        private static Java.Lang.String _EXTRA_WIFI_P2P_DEVICEContent = default;
        private static bool _EXTRA_WIFI_P2P_DEVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_WIFI_P2P_GROUP"/>
        /// </summary>
        public static Java.Lang.String EXTRA_WIFI_P2P_GROUP { get { if (!_EXTRA_WIFI_P2P_GROUPReady) { _EXTRA_WIFI_P2P_GROUPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_WIFI_P2P_GROUP"); _EXTRA_WIFI_P2P_GROUPReady = true; } return _EXTRA_WIFI_P2P_GROUPContent; } }
        private static Java.Lang.String _EXTRA_WIFI_P2P_GROUPContent = default;
        private static bool _EXTRA_WIFI_P2P_GROUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_WIFI_P2P_INFO"/>
        /// </summary>
        public static Java.Lang.String EXTRA_WIFI_P2P_INFO { get { if (!_EXTRA_WIFI_P2P_INFOReady) { _EXTRA_WIFI_P2P_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_WIFI_P2P_INFO"); _EXTRA_WIFI_P2P_INFOReady = true; } return _EXTRA_WIFI_P2P_INFOContent; } }
        private static Java.Lang.String _EXTRA_WIFI_P2P_INFOContent = default;
        private static bool _EXTRA_WIFI_P2P_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_WIFI_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_WIFI_STATE { get { if (!_EXTRA_WIFI_STATEReady) { _EXTRA_WIFI_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_WIFI_STATE"); _EXTRA_WIFI_STATEReady = true; } return _EXTRA_WIFI_STATEContent; } }
        private static Java.Lang.String _EXTRA_WIFI_STATEContent = default;
        private static bool _EXTRA_WIFI_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_CONNECTION_CHANGED_ACTION"/>
        /// </summary>
        public static Java.Lang.String WIFI_P2P_CONNECTION_CHANGED_ACTION { get { if (!_WIFI_P2P_CONNECTION_CHANGED_ACTIONReady) { _WIFI_P2P_CONNECTION_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_P2P_CONNECTION_CHANGED_ACTION"); _WIFI_P2P_CONNECTION_CHANGED_ACTIONReady = true; } return _WIFI_P2P_CONNECTION_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _WIFI_P2P_CONNECTION_CHANGED_ACTIONContent = default;
        private static bool _WIFI_P2P_CONNECTION_CHANGED_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_DISCOVERY_CHANGED_ACTION"/>
        /// </summary>
        public static Java.Lang.String WIFI_P2P_DISCOVERY_CHANGED_ACTION { get { if (!_WIFI_P2P_DISCOVERY_CHANGED_ACTIONReady) { _WIFI_P2P_DISCOVERY_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_P2P_DISCOVERY_CHANGED_ACTION"); _WIFI_P2P_DISCOVERY_CHANGED_ACTIONReady = true; } return _WIFI_P2P_DISCOVERY_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _WIFI_P2P_DISCOVERY_CHANGED_ACTIONContent = default;
        private static bool _WIFI_P2P_DISCOVERY_CHANGED_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_PEERS_CHANGED_ACTION"/>
        /// </summary>
        public static Java.Lang.String WIFI_P2P_PEERS_CHANGED_ACTION { get { if (!_WIFI_P2P_PEERS_CHANGED_ACTIONReady) { _WIFI_P2P_PEERS_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_P2P_PEERS_CHANGED_ACTION"); _WIFI_P2P_PEERS_CHANGED_ACTIONReady = true; } return _WIFI_P2P_PEERS_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _WIFI_P2P_PEERS_CHANGED_ACTIONContent = default;
        private static bool _WIFI_P2P_PEERS_CHANGED_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_STATE_CHANGED_ACTION"/>
        /// </summary>
        public static Java.Lang.String WIFI_P2P_STATE_CHANGED_ACTION { get { if (!_WIFI_P2P_STATE_CHANGED_ACTIONReady) { _WIFI_P2P_STATE_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_P2P_STATE_CHANGED_ACTION"); _WIFI_P2P_STATE_CHANGED_ACTIONReady = true; } return _WIFI_P2P_STATE_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _WIFI_P2P_STATE_CHANGED_ACTIONContent = default;
        private static bool _WIFI_P2P_STATE_CHANGED_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_THIS_DEVICE_CHANGED_ACTION"/>
        /// </summary>
        public static Java.Lang.String WIFI_P2P_THIS_DEVICE_CHANGED_ACTION { get { if (!_WIFI_P2P_THIS_DEVICE_CHANGED_ACTIONReady) { _WIFI_P2P_THIS_DEVICE_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_P2P_THIS_DEVICE_CHANGED_ACTION"); _WIFI_P2P_THIS_DEVICE_CHANGED_ACTIONReady = true; } return _WIFI_P2P_THIS_DEVICE_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _WIFI_P2P_THIS_DEVICE_CHANGED_ACTIONContent = default;
        private static bool _WIFI_P2P_THIS_DEVICE_CHANGED_ACTIONReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#getP2pMaxAllowedVendorElementsLengthBytes()"/> 
        /// </summary>
        public static int P2pMaxAllowedVendorElementsLengthBytes
        {
            get { return SExecuteWithSignature<int>(LocalBridgeClazz, "getP2pMaxAllowedVendorElementsLengthBytes", "()I"); }
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager.ChannelListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Os.Looper"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ChannelListener"/></param>
        /// <returns><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></returns>
        public Android.Net.Wifi.P2p.WifiP2pManager.Channel Initialize(Android.Content.Context arg0, Android.Os.Looper arg1, Android.Net.Wifi.P2p.WifiP2pManager.ChannelListener arg2)
        {
            return IExecute<Android.Net.Wifi.P2p.WifiP2pManager.Channel>("initialize", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#isChannelConstrainedDiscoverySupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsChannelConstrainedDiscoverySupported()
        {
            return IExecuteWithSignature<bool>("isChannelConstrainedDiscoverySupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#isGroupClientRemovalSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsGroupClientRemovalSupported()
        {
            return IExecuteWithSignature<bool>("isGroupClientRemovalSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#isGroupOwnerIPv6LinkLocalAddressProvided()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsGroupOwnerIPv6LinkLocalAddressProvided()
        {
            return IExecuteWithSignature<bool>("isGroupOwnerIPv6LinkLocalAddressProvided", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#isSetVendorElementsSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSetVendorElementsSupported()
        {
            return IExecuteWithSignature<bool>("isSetVendorElementsSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#addExternalApprover(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.MacAddress,android.net.wifi.p2p.WifiP2pManager.ExternalApproverRequestListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.MacAddress"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ExternalApproverRequestListener"/></param>
        public void AddExternalApprover(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.MacAddress arg1, Android.Net.Wifi.P2p.WifiP2pManager.ExternalApproverRequestListener arg2)
        {
            IExecute("addExternalApprover", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#addLocalService(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.Nsd.WifiP2pServiceInfo"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void AddLocalService(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.Nsd.WifiP2pServiceInfo arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecute("addLocalService", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#addServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.Nsd.WifiP2pServiceRequest"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void AddServiceRequest(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.Nsd.WifiP2pServiceRequest arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecute("addServiceRequest", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#cancelConnect(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void CancelConnect(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecute("cancelConnect", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#clearLocalServices(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void ClearLocalServices(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecute("clearLocalServices", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#clearServiceRequests(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void ClearServiceRequests(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecute("clearServiceRequests", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#connect(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pConfig"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void Connect(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pConfig arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecute("connect", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#createGroup(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pConfig"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void CreateGroup(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pConfig arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecute("createGroup", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#createGroup(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void CreateGroup(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecute("createGroup", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void DiscoverPeers(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecute("discoverPeers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#discoverPeersOnSocialChannels(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void DiscoverPeersOnSocialChannels(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecute("discoverPeersOnSocialChannels", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#discoverPeersOnSpecificFrequency(android.net.wifi.p2p.WifiP2pManager.Channel,int,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void DiscoverPeersOnSpecificFrequency(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, int arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecute("discoverPeersOnSpecificFrequency", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#discoverServices(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void DiscoverServices(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecute("discoverServices", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#getListenState(android.net.wifi.p2p.WifiP2pManager.Channel,java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.Consumer"/></param>
        public void GetListenState(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Java.Util.Concurrent.Executor arg1, Java.Util.Function.Consumer<Java.Lang.Integer> arg2)
        {
            IExecute("getListenState", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeClient(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.MacAddress,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.MacAddress"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void RemoveClient(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.MacAddress arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecute("removeClient", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeExternalApprover(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.MacAddress,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.MacAddress"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void RemoveExternalApprover(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.MacAddress arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecute("removeExternalApprover", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeGroup(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void RemoveGroup(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecute("removeGroup", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeLocalService(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.Nsd.WifiP2pServiceInfo"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void RemoveLocalService(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.Nsd.WifiP2pServiceInfo arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecute("removeLocalService", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.Nsd.WifiP2pServiceRequest"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void RemoveServiceRequest(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.Nsd.WifiP2pServiceRequest arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecute("removeServiceRequest", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ConnectionInfoListener"/></param>
        public void RequestConnectionInfo(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ConnectionInfoListener arg1)
        {
            IExecute("requestConnectionInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestDeviceInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DeviceInfoListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.DeviceInfoListener"/></param>
        public void RequestDeviceInfo(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.DeviceInfoListener arg1)
        {
            IExecute("requestDeviceInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestDiscoveryState(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DiscoveryStateListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.DiscoveryStateListener"/></param>
        public void RequestDiscoveryState(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.DiscoveryStateListener arg1)
        {
            IExecute("requestDiscoveryState", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestGroupInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.GroupInfoListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.GroupInfoListener"/></param>
        public void RequestGroupInfo(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.GroupInfoListener arg1)
        {
            IExecute("requestGroupInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestNetworkInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.NetworkInfoListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.NetworkInfoListener"/></param>
        public void RequestNetworkInfo(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.NetworkInfoListener arg1)
        {
            IExecute("requestNetworkInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestP2pState(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.P2pStateListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.P2pStateListener"/></param>
        public void RequestP2pState(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.P2pStateListener arg1)
        {
            IExecute("requestP2pState", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestPeers(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.PeerListListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.PeerListListener"/></param>
        public void RequestPeers(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.PeerListListener arg1)
        {
            IExecute("requestPeers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setConnectionRequestResult(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.MacAddress,int,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.MacAddress"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void SetConnectionRequestResult(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.MacAddress arg1, int arg2, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg3)
        {
            IExecute("setConnectionRequestResult", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setConnectionRequestResult(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.MacAddress,int,java.lang.String,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.MacAddress"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void SetConnectionRequestResult(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.MacAddress arg1, int arg2, Java.Lang.String arg3, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg4)
        {
            IExecute("setConnectionRequestResult", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setDnsSdResponseListeners(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DnsSdServiceResponseListener,android.net.wifi.p2p.WifiP2pManager.DnsSdTxtRecordListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.DnsSdServiceResponseListener"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.DnsSdTxtRecordListener"/></param>
        public void SetDnsSdResponseListeners(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.DnsSdServiceResponseListener arg1, Android.Net.Wifi.P2p.WifiP2pManager.DnsSdTxtRecordListener arg2)
        {
            IExecute("setDnsSdResponseListeners", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setServiceResponseListener(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ServiceResponseListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ServiceResponseListener"/></param>
        public void SetServiceResponseListener(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ServiceResponseListener arg1)
        {
            IExecute("setServiceResponseListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setUpnpServiceResponseListener(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.UpnpServiceResponseListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.UpnpServiceResponseListener"/></param>
        public void SetUpnpServiceResponseListener(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.UpnpServiceResponseListener arg1)
        {
            IExecute("setUpnpServiceResponseListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setVendorElements(android.net.wifi.p2p.WifiP2pManager.Channel,java.util.List,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void SetVendorElements(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Java.Util.List<Android.Net.Wifi.ScanResult.InformationElement> arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecute("setVendorElements", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setWfdInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pWfdInfo,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pWfdInfo"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void SetWfdInfo(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pWfdInfo arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecute("setWfdInfo", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#startListening(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void StartListening(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecute("startListening", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#stopListening(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void StopListening(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecute("stopListening", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void StopPeerDiscovery(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecute("stopPeerDiscovery", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region ActionListener
        public partial class ActionListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="ActionListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onFailure", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnFailureEventHandler));
                AddEventHandler("onSuccess", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(OnSuccessEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html#onFailure(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnFailure"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<int> OnOnFailure { get; set; } = null;

            void OnFailureEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
            {
                var methodToExecute = (OnOnFailure != null) ? OnOnFailure : OnFailure;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html#onFailure(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public virtual void OnFailure(int arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html#onSuccess()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnSuccess"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action OnOnSuccess { get; set; } = null;

            void OnSuccessEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
            {
                var methodToExecute = (OnOnSuccess != null) ? OnOnSuccess : OnSuccess;
                methodToExecute.Invoke();
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html#onSuccess()"/>
            /// </summary>
            public virtual void OnSuccess()
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ActionListenerDirect
        public partial class ActionListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html#onFailure(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnFailure(int arg0)
            {
                IExecuteWithSignature("onFailure", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html#onSuccess()"/>
            /// </summary>
            public override void OnSuccess()
            {
                IExecuteWithSignature("onSuccess", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Channel
        public partial class Channel
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.Channel.html#close()"/>
            /// </summary>
            public void Close()
            {
                IExecuteWithSignature("close", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ChannelListener
        public partial class ChannelListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="ChannelListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onChannelDisconnected", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(OnChannelDisconnectedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ChannelListener.html#onChannelDisconnected()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnChannelDisconnected"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action OnOnChannelDisconnected { get; set; } = null;

            void OnChannelDisconnectedEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
            {
                var methodToExecute = (OnOnChannelDisconnected != null) ? OnOnChannelDisconnected : OnChannelDisconnected;
                methodToExecute.Invoke();
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ChannelListener.html#onChannelDisconnected()"/>
            /// </summary>
            public virtual void OnChannelDisconnected()
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ChannelListenerDirect
        public partial class ChannelListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ChannelListener.html#onChannelDisconnected()"/>
            /// </summary>
            public override void OnChannelDisconnected()
            {
                IExecuteWithSignature("onChannelDisconnected", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ConnectionInfoListener
        public partial class ConnectionInfoListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="ConnectionInfoListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onConnectionInfoAvailable", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Wifi.P2p.WifiP2pInfo>>>(OnConnectionInfoAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ConnectionInfoListener.html#onConnectionInfoAvailable(android.net.wifi.p2p.WifiP2pInfo)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnConnectionInfoAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Wifi.P2p.WifiP2pInfo> OnOnConnectionInfoAvailable { get; set; } = null;

            void OnConnectionInfoAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Wifi.P2p.WifiP2pInfo>> data)
            {
                var methodToExecute = (OnOnConnectionInfoAvailable != null) ? OnOnConnectionInfoAvailable : OnConnectionInfoAvailable;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ConnectionInfoListener.html#onConnectionInfoAvailable(android.net.wifi.p2p.WifiP2pInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pInfo"/></param>
            public virtual void OnConnectionInfoAvailable(Android.Net.Wifi.P2p.WifiP2pInfo arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ConnectionInfoListenerDirect
        public partial class ConnectionInfoListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ConnectionInfoListener.html#onConnectionInfoAvailable(android.net.wifi.p2p.WifiP2pInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pInfo"/></param>
            public override void OnConnectionInfoAvailable(Android.Net.Wifi.P2p.WifiP2pInfo arg0)
            {
                IExecuteWithSignature("onConnectionInfoAvailable", "(Landroid/net/wifi/p2p/WifiP2pInfo;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DeviceInfoListener
        public partial class DeviceInfoListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="DeviceInfoListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDeviceInfoAvailable", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Wifi.P2p.WifiP2pDevice>>>(OnDeviceInfoAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DeviceInfoListener.html#onDeviceInfoAvailable(android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDeviceInfoAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Wifi.P2p.WifiP2pDevice> OnOnDeviceInfoAvailable { get; set; } = null;

            void OnDeviceInfoAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Wifi.P2p.WifiP2pDevice>> data)
            {
                var methodToExecute = (OnOnDeviceInfoAvailable != null) ? OnOnDeviceInfoAvailable : OnDeviceInfoAvailable;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DeviceInfoListener.html#onDeviceInfoAvailable(android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public virtual void OnDeviceInfoAvailable(Android.Net.Wifi.P2p.WifiP2pDevice arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DeviceInfoListenerDirect
        public partial class DeviceInfoListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DeviceInfoListener.html#onDeviceInfoAvailable(android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public override void OnDeviceInfoAvailable(Android.Net.Wifi.P2p.WifiP2pDevice arg0)
            {
                IExecuteWithSignature("onDeviceInfoAvailable", "(Landroid/net/wifi/p2p/WifiP2pDevice;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DiscoveryStateListener
        public partial class DiscoveryStateListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="DiscoveryStateListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDiscoveryStateAvailable", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnDiscoveryStateAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DiscoveryStateListener.html#onDiscoveryStateAvailable(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDiscoveryStateAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<int> OnOnDiscoveryStateAvailable { get; set; } = null;

            void OnDiscoveryStateAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
            {
                var methodToExecute = (OnOnDiscoveryStateAvailable != null) ? OnOnDiscoveryStateAvailable : OnDiscoveryStateAvailable;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DiscoveryStateListener.html#onDiscoveryStateAvailable(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public virtual void OnDiscoveryStateAvailable(int arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DiscoveryStateListenerDirect
        public partial class DiscoveryStateListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DiscoveryStateListener.html#onDiscoveryStateAvailable(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnDiscoveryStateAvailable(int arg0)
            {
                IExecuteWithSignature("onDiscoveryStateAvailable", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DnsSdServiceResponseListener
        public partial class DnsSdServiceResponseListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="DnsSdServiceResponseListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDnsSdServiceAvailable", new System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(OnDnsSdServiceAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdServiceResponseListener.html#onDnsSdServiceAvailable(java.lang.String,java.lang.String,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDnsSdServiceAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Java.Lang.String, Java.Lang.String, Android.Net.Wifi.P2p.WifiP2pDevice> OnOnDnsSdServiceAvailable { get; set; } = null;

            void OnDnsSdServiceAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
            {
                var methodToExecute = (OnOnDnsSdServiceAvailable != null) ? OnOnDnsSdServiceAvailable : OnDnsSdServiceAvailable;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Java.Lang.String>(0), data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pDevice>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdServiceResponseListener.html#onDnsSdServiceAvailable(java.lang.String,java.lang.String,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public virtual void OnDnsSdServiceAvailable(Java.Lang.String arg0, Java.Lang.String arg1, Android.Net.Wifi.P2p.WifiP2pDevice arg2)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DnsSdServiceResponseListenerDirect
        public partial class DnsSdServiceResponseListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdServiceResponseListener.html#onDnsSdServiceAvailable(java.lang.String,java.lang.String,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public override void OnDnsSdServiceAvailable(Java.Lang.String arg0, Java.Lang.String arg1, Android.Net.Wifi.P2p.WifiP2pDevice arg2)
            {
                IExecute("onDnsSdServiceAvailable", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DnsSdTxtRecordListener
        public partial class DnsSdTxtRecordListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="DnsSdTxtRecordListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDnsSdTxtRecordAvailable", new System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(OnDnsSdTxtRecordAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdTxtRecordListener.html#onDnsSdTxtRecordAvailable(java.lang.String,java.util.Map,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDnsSdTxtRecordAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Java.Lang.String, Java.Util.Map<Java.Lang.String, Java.Lang.String>, Android.Net.Wifi.P2p.WifiP2pDevice> OnOnDnsSdTxtRecordAvailable { get; set; } = null;

            void OnDnsSdTxtRecordAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
            {
                var methodToExecute = (OnOnDnsSdTxtRecordAvailable != null) ? OnOnDnsSdTxtRecordAvailable : OnDnsSdTxtRecordAvailable;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Java.Util.Map<Java.Lang.String, Java.Lang.String>>(0), data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pDevice>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdTxtRecordListener.html#onDnsSdTxtRecordAvailable(java.lang.String,java.util.Map,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Util.Map"/></param>
            /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public virtual void OnDnsSdTxtRecordAvailable(Java.Lang.String arg0, Java.Util.Map<Java.Lang.String, Java.Lang.String> arg1, Android.Net.Wifi.P2p.WifiP2pDevice arg2)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DnsSdTxtRecordListenerDirect
        public partial class DnsSdTxtRecordListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdTxtRecordListener.html#onDnsSdTxtRecordAvailable(java.lang.String,java.util.Map,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Util.Map"/></param>
            /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public override void OnDnsSdTxtRecordAvailable(Java.Lang.String arg0, Java.Util.Map<Java.Lang.String, Java.Lang.String> arg1, Android.Net.Wifi.P2p.WifiP2pDevice arg2)
            {
                IExecute("onDnsSdTxtRecordAvailable", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ExternalApproverRequestListener
        public partial class ExternalApproverRequestListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="ExternalApproverRequestListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onAttached", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.MacAddress>>>(OnAttachedEventHandler));
                AddEventHandler("onConnectionRequested", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnConnectionRequestedEventHandler));
                AddEventHandler("onDetached", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.MacAddress>>>(OnDetachedEventHandler));
                AddEventHandler("onPinGenerated", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.MacAddress>>>(OnPinGeneratedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onAttached(android.net.MacAddress)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnAttached"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.MacAddress> OnOnAttached { get; set; } = null;

            void OnAttachedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.MacAddress>> data)
            {
                var methodToExecute = (OnOnAttached != null) ? OnOnAttached : OnAttached;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onAttached(android.net.MacAddress)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.MacAddress"/></param>
            public virtual void OnAttached(Android.Net.MacAddress arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onConnectionRequested(int,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnConnectionRequested"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<int, Android.Net.Wifi.P2p.WifiP2pConfig, Android.Net.Wifi.P2p.WifiP2pDevice> OnOnConnectionRequested { get; set; } = null;

            void OnConnectionRequestedEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
            {
                var methodToExecute = (OnOnConnectionRequested != null) ? OnOnConnectionRequested : OnConnectionRequested;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pConfig>(0), data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pDevice>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onConnectionRequested(int,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pConfig"/></param>
            /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public virtual void OnConnectionRequested(int arg0, Android.Net.Wifi.P2p.WifiP2pConfig arg1, Android.Net.Wifi.P2p.WifiP2pDevice arg2)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onDetached(android.net.MacAddress,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDetached"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.MacAddress, int> OnOnDetached { get; set; } = null;

            void OnDetachedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.MacAddress>> data)
            {
                var methodToExecute = (OnOnDetached != null) ? OnOnDetached : OnDetached;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onDetached(android.net.MacAddress,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.MacAddress"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public virtual void OnDetached(Android.Net.MacAddress arg0, int arg1)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onPinGenerated(android.net.MacAddress,java.lang.String)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPinGenerated"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.MacAddress, Java.Lang.String> OnOnPinGenerated { get; set; } = null;

            void OnPinGeneratedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.MacAddress>> data)
            {
                var methodToExecute = (OnOnPinGenerated != null) ? OnOnPinGenerated : OnPinGenerated;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Java.Lang.String>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onPinGenerated(android.net.MacAddress,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.MacAddress"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            public virtual void OnPinGenerated(Android.Net.MacAddress arg0, Java.Lang.String arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ExternalApproverRequestListenerDirect
        public partial class ExternalApproverRequestListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onAttached(android.net.MacAddress)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.MacAddress"/></param>
            public override void OnAttached(Android.Net.MacAddress arg0)
            {
                IExecuteWithSignature("onAttached", "(Landroid/net/MacAddress;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onConnectionRequested(int,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pConfig"/></param>
            /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public override void OnConnectionRequested(int arg0, Android.Net.Wifi.P2p.WifiP2pConfig arg1, Android.Net.Wifi.P2p.WifiP2pDevice arg2)
            {
                IExecute("onConnectionRequested", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onDetached(android.net.MacAddress,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.MacAddress"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public override void OnDetached(Android.Net.MacAddress arg0, int arg1)
            {
                IExecute("onDetached", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onPinGenerated(android.net.MacAddress,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.MacAddress"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            public override void OnPinGenerated(Android.Net.MacAddress arg0, Java.Lang.String arg1)
            {
                IExecute("onPinGenerated", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region GroupInfoListener
        public partial class GroupInfoListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="GroupInfoListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onGroupInfoAvailable", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Wifi.P2p.WifiP2pGroup>>>(OnGroupInfoAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.GroupInfoListener.html#onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGroupInfoAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Wifi.P2p.WifiP2pGroup> OnOnGroupInfoAvailable { get; set; } = null;

            void OnGroupInfoAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Wifi.P2p.WifiP2pGroup>> data)
            {
                var methodToExecute = (OnOnGroupInfoAvailable != null) ? OnOnGroupInfoAvailable : OnGroupInfoAvailable;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.GroupInfoListener.html#onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
            public virtual void OnGroupInfoAvailable(Android.Net.Wifi.P2p.WifiP2pGroup arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region GroupInfoListenerDirect
        public partial class GroupInfoListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.GroupInfoListener.html#onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
            public override void OnGroupInfoAvailable(Android.Net.Wifi.P2p.WifiP2pGroup arg0)
            {
                IExecuteWithSignature("onGroupInfoAvailable", "(Landroid/net/wifi/p2p/WifiP2pGroup;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region NetworkInfoListener
        public partial class NetworkInfoListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="NetworkInfoListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onNetworkInfoAvailable", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.NetworkInfo>>>(OnNetworkInfoAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.NetworkInfoListener.html#onNetworkInfoAvailable(android.net.NetworkInfo)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnNetworkInfoAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.NetworkInfo> OnOnNetworkInfoAvailable { get; set; } = null;

            void OnNetworkInfoAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.NetworkInfo>> data)
            {
                var methodToExecute = (OnOnNetworkInfoAvailable != null) ? OnOnNetworkInfoAvailable : OnNetworkInfoAvailable;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.NetworkInfoListener.html#onNetworkInfoAvailable(android.net.NetworkInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.NetworkInfo"/></param>
            public virtual void OnNetworkInfoAvailable(Android.Net.NetworkInfo arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region NetworkInfoListenerDirect
        public partial class NetworkInfoListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.NetworkInfoListener.html#onNetworkInfoAvailable(android.net.NetworkInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.NetworkInfo"/></param>
            public override void OnNetworkInfoAvailable(Android.Net.NetworkInfo arg0)
            {
                IExecuteWithSignature("onNetworkInfoAvailable", "(Landroid/net/NetworkInfo;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region P2pStateListener
        public partial class P2pStateListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="P2pStateListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onP2pStateAvailable", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnP2pStateAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.P2pStateListener.html#onP2pStateAvailable(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnP2pStateAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<int> OnOnP2pStateAvailable { get; set; } = null;

            void OnP2pStateAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
            {
                var methodToExecute = (OnOnP2pStateAvailable != null) ? OnOnP2pStateAvailable : OnP2pStateAvailable;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.P2pStateListener.html#onP2pStateAvailable(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public virtual void OnP2pStateAvailable(int arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region P2pStateListenerDirect
        public partial class P2pStateListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.P2pStateListener.html#onP2pStateAvailable(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnP2pStateAvailable(int arg0)
            {
                IExecuteWithSignature("onP2pStateAvailable", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PeerListListener
        public partial class PeerListListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="PeerListListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onPeersAvailable", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Net.Wifi.P2p.WifiP2pDeviceList>>>(OnPeersAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.PeerListListener.html#onPeersAvailable(android.net.wifi.p2p.WifiP2pDeviceList)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPeersAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.Net.Wifi.P2p.WifiP2pDeviceList> OnOnPeersAvailable { get; set; } = null;

            void OnPeersAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Net.Wifi.P2p.WifiP2pDeviceList>> data)
            {
                var methodToExecute = (OnOnPeersAvailable != null) ? OnOnPeersAvailable : OnPeersAvailable;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.PeerListListener.html#onPeersAvailable(android.net.wifi.p2p.WifiP2pDeviceList)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pDeviceList"/></param>
            public virtual void OnPeersAvailable(Android.Net.Wifi.P2p.WifiP2pDeviceList arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PeerListListenerDirect
        public partial class PeerListListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.PeerListListener.html#onPeersAvailable(android.net.wifi.p2p.WifiP2pDeviceList)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pDeviceList"/></param>
            public override void OnPeersAvailable(Android.Net.Wifi.P2p.WifiP2pDeviceList arg0)
            {
                IExecuteWithSignature("onPeersAvailable", "(Landroid/net/wifi/p2p/WifiP2pDeviceList;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ServiceResponseListener
        public partial class ServiceResponseListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="ServiceResponseListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onServiceAvailable", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnServiceAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ServiceResponseListener.html#onServiceAvailable(int,byte[],android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnServiceAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<int, byte[], Android.Net.Wifi.P2p.WifiP2pDevice> OnOnServiceAvailable { get; set; } = null;

            void OnServiceAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
            {
                var methodToExecute = (OnOnServiceAvailable != null) ? OnOnServiceAvailable : OnServiceAvailable;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<byte[]>(0), data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pDevice>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ServiceResponseListener.html#onServiceAvailable(int,byte[],android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public virtual void OnServiceAvailable(int arg0, byte[] arg1, Android.Net.Wifi.P2p.WifiP2pDevice arg2)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ServiceResponseListenerDirect
        public partial class ServiceResponseListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ServiceResponseListener.html#onServiceAvailable(int,byte[],android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public override void OnServiceAvailable(int arg0, byte[] arg1, Android.Net.Wifi.P2p.WifiP2pDevice arg2)
            {
                IExecute("onServiceAvailable", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region UpnpServiceResponseListener
        public partial class UpnpServiceResponseListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="UpnpServiceResponseListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onUpnpServiceAvailable", new System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Util.List<Java.Lang.String>>>>(OnUpnpServiceAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.UpnpServiceResponseListener.html#onUpnpServiceAvailable(java.util.List,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnUpnpServiceAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Java.Util.List<Java.Lang.String>, Android.Net.Wifi.P2p.WifiP2pDevice> OnOnUpnpServiceAvailable { get; set; } = null;

            void OnUpnpServiceAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Util.List<Java.Lang.String>>> data)
            {
                var methodToExecute = (OnOnUpnpServiceAvailable != null) ? OnOnUpnpServiceAvailable : OnUpnpServiceAvailable;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pDevice>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.UpnpServiceResponseListener.html#onUpnpServiceAvailable(java.util.List,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public virtual void OnUpnpServiceAvailable(Java.Util.List<Java.Lang.String> arg0, Android.Net.Wifi.P2p.WifiP2pDevice arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region UpnpServiceResponseListenerDirect
        public partial class UpnpServiceResponseListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.UpnpServiceResponseListener.html#onUpnpServiceAvailable(java.util.List,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public override void OnUpnpServiceAvailable(Java.Util.List<Java.Lang.String> arg0, Android.Net.Wifi.P2p.WifiP2pDevice arg1)
            {
                IExecute("onUpnpServiceAvailable", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
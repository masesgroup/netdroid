/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi.P2p
{
    #region WifiP2pManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html"/>
    /// </summary>
    public partial class WifiP2pManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<WifiP2pManager>
    {
        const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public WifiP2pManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public WifiP2pManager(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region ActionListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html"/>
        /// </summary>
        public partial class ActionListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ActionListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.p2p.WifiP2pManager_ActionListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region ActionListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="ActionListener"/> or its generic type if there is one
        /// </summary>
        public partial class ActionListenerDirect : ActionListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager$ActionListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region Channel declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.Channel.html"/>
        /// </summary>
        public partial class Channel : Java.Lang.AutoCloseable
        {
            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager$Channel";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Channel() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Channel(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ChannelListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ChannelListener.html"/>
        /// </summary>
        public partial class ChannelListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ChannelListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.p2p.WifiP2pManager_ChannelListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region ChannelListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="ChannelListener"/> or its generic type if there is one
        /// </summary>
        public partial class ChannelListenerDirect : ChannelListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager$ChannelListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region ConnectionInfoListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ConnectionInfoListener.html"/>
        /// </summary>
        public partial class ConnectionInfoListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ConnectionInfoListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.p2p.WifiP2pManager_ConnectionInfoListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region ConnectionInfoListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="ConnectionInfoListener"/> or its generic type if there is one
        /// </summary>
        public partial class ConnectionInfoListenerDirect : ConnectionInfoListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region DeviceInfoListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DeviceInfoListener.html"/>
        /// </summary>
        public partial class DeviceInfoListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public DeviceInfoListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.p2p.WifiP2pManager_DeviceInfoListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region DeviceInfoListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="DeviceInfoListener"/> or its generic type if there is one
        /// </summary>
        public partial class DeviceInfoListenerDirect : DeviceInfoListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager$DeviceInfoListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region DiscoveryStateListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DiscoveryStateListener.html"/>
        /// </summary>
        public partial class DiscoveryStateListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public DiscoveryStateListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.p2p.WifiP2pManager_DiscoveryStateListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region DiscoveryStateListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="DiscoveryStateListener"/> or its generic type if there is one
        /// </summary>
        public partial class DiscoveryStateListenerDirect : DiscoveryStateListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager$DiscoveryStateListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region DnsSdServiceResponseListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdServiceResponseListener.html"/>
        /// </summary>
        public partial class DnsSdServiceResponseListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public DnsSdServiceResponseListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.p2p.WifiP2pManager_DnsSdServiceResponseListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region DnsSdServiceResponseListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="DnsSdServiceResponseListener"/> or its generic type if there is one
        /// </summary>
        public partial class DnsSdServiceResponseListenerDirect : DnsSdServiceResponseListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region DnsSdTxtRecordListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdTxtRecordListener.html"/>
        /// </summary>
        public partial class DnsSdTxtRecordListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public DnsSdTxtRecordListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.p2p.WifiP2pManager_DnsSdTxtRecordListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region DnsSdTxtRecordListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="DnsSdTxtRecordListener"/> or its generic type if there is one
        /// </summary>
        public partial class DnsSdTxtRecordListenerDirect : DnsSdTxtRecordListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region ExternalApproverRequestListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html"/>
        /// </summary>
        public partial class ExternalApproverRequestListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ExternalApproverRequestListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.p2p.WifiP2pManager_ExternalApproverRequestListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region ExternalApproverRequestListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="ExternalApproverRequestListener"/> or its generic type if there is one
        /// </summary>
        public partial class ExternalApproverRequestListenerDirect : ExternalApproverRequestListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager$ExternalApproverRequestListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region GroupInfoListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.GroupInfoListener.html"/>
        /// </summary>
        public partial class GroupInfoListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public GroupInfoListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.p2p.WifiP2pManager_GroupInfoListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region GroupInfoListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="GroupInfoListener"/> or its generic type if there is one
        /// </summary>
        public partial class GroupInfoListenerDirect : GroupInfoListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager$GroupInfoListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region NetworkInfoListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.NetworkInfoListener.html"/>
        /// </summary>
        public partial class NetworkInfoListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public NetworkInfoListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.p2p.WifiP2pManager_NetworkInfoListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region NetworkInfoListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="NetworkInfoListener"/> or its generic type if there is one
        /// </summary>
        public partial class NetworkInfoListenerDirect : NetworkInfoListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager$NetworkInfoListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region P2pStateListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.P2pStateListener.html"/>
        /// </summary>
        public partial class P2pStateListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public P2pStateListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.p2p.WifiP2pManager_P2pStateListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region P2pStateListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="P2pStateListener"/> or its generic type if there is one
        /// </summary>
        public partial class P2pStateListenerDirect : P2pStateListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager$P2pStateListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region PeerListListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.PeerListListener.html"/>
        /// </summary>
        public partial class PeerListListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public PeerListListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.p2p.WifiP2pManager_PeerListListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region PeerListListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="PeerListListener"/> or its generic type if there is one
        /// </summary>
        public partial class PeerListListenerDirect : PeerListListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager$PeerListListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region ServiceResponseListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ServiceResponseListener.html"/>
        /// </summary>
        public partial class ServiceResponseListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ServiceResponseListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.p2p.WifiP2pManager_ServiceResponseListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region ServiceResponseListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="ServiceResponseListener"/> or its generic type if there is one
        /// </summary>
        public partial class ServiceResponseListenerDirect : ServiceResponseListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region UpnpServiceResponseListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.UpnpServiceResponseListener.html"/>
        /// </summary>
        public partial class UpnpServiceResponseListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public UpnpServiceResponseListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.p2p.WifiP2pManager_UpnpServiceResponseListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region UpnpServiceResponseListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="UpnpServiceResponseListener"/> or its generic type if there is one
        /// </summary>
        public partial class UpnpServiceResponseListenerDirect : UpnpServiceResponseListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region WifiP2pListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html"/>
        /// </summary>
        public partial class WifiP2pListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public WifiP2pListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.net.wifi.p2p.WifiP2pManager_WifiP2pListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region WifiP2pListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="WifiP2pListener"/> or its generic type if there is one
        /// </summary>
        public partial class WifiP2pListenerDirect : WifiP2pListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pManager$WifiP2pListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

    
    }
    #endregion

    #region WifiP2pManager implementation
    public partial class WifiP2pManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#BUSY"/>
        /// </summary>
        public static int BUSY { get { if (!_BUSYReady) { _BUSYContent = SGetField<int>(LocalBridgeClazz, "BUSY"); _BUSYReady = true; } return _BUSYContent; } }
        private static int _BUSYContent = default;
        private static bool _BUSYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#CONNECTION_REQUEST_ACCEPT"/>
        /// </summary>
        public static int CONNECTION_REQUEST_ACCEPT { get { if (!_CONNECTION_REQUEST_ACCEPTReady) { _CONNECTION_REQUEST_ACCEPTContent = SGetField<int>(LocalBridgeClazz, "CONNECTION_REQUEST_ACCEPT"); _CONNECTION_REQUEST_ACCEPTReady = true; } return _CONNECTION_REQUEST_ACCEPTContent; } }
        private static int _CONNECTION_REQUEST_ACCEPTContent = default;
        private static bool _CONNECTION_REQUEST_ACCEPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICE"/>
        /// </summary>
        public static int CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICE { get { if (!_CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICEReady) { _CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICEContent = SGetField<int>(LocalBridgeClazz, "CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICE"); _CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICEReady = true; } return _CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICEContent; } }
        private static int _CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICEContent = default;
        private static bool _CONNECTION_REQUEST_DEFER_SHOW_PIN_TO_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#CONNECTION_REQUEST_DEFER_TO_SERVICE"/>
        /// </summary>
        public static int CONNECTION_REQUEST_DEFER_TO_SERVICE { get { if (!_CONNECTION_REQUEST_DEFER_TO_SERVICEReady) { _CONNECTION_REQUEST_DEFER_TO_SERVICEContent = SGetField<int>(LocalBridgeClazz, "CONNECTION_REQUEST_DEFER_TO_SERVICE"); _CONNECTION_REQUEST_DEFER_TO_SERVICEReady = true; } return _CONNECTION_REQUEST_DEFER_TO_SERVICEContent; } }
        private static int _CONNECTION_REQUEST_DEFER_TO_SERVICEContent = default;
        private static bool _CONNECTION_REQUEST_DEFER_TO_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#CONNECTION_REQUEST_REJECT"/>
        /// </summary>
        public static int CONNECTION_REQUEST_REJECT { get { if (!_CONNECTION_REQUEST_REJECTReady) { _CONNECTION_REQUEST_REJECTContent = SGetField<int>(LocalBridgeClazz, "CONNECTION_REQUEST_REJECT"); _CONNECTION_REQUEST_REJECTReady = true; } return _CONNECTION_REQUEST_REJECTContent; } }
        private static int _CONNECTION_REQUEST_REJECTContent = default;
        private static bool _CONNECTION_REQUEST_REJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#ERROR"/>
        /// </summary>
        public static int ERROR { get { if (!_ERRORReady) { _ERRORContent = SGetField<int>(LocalBridgeClazz, "ERROR"); _ERRORReady = true; } return _ERRORContent; } }
        private static int _ERRORContent = default;
        private static bool _ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#GROUP_CREATION_FAILURE_REASON_CONNECTION_CANCELLED"/>
        /// </summary>
        public static int GROUP_CREATION_FAILURE_REASON_CONNECTION_CANCELLED { get { if (!_GROUP_CREATION_FAILURE_REASON_CONNECTION_CANCELLEDReady) { _GROUP_CREATION_FAILURE_REASON_CONNECTION_CANCELLEDContent = SGetField<int>(LocalBridgeClazz, "GROUP_CREATION_FAILURE_REASON_CONNECTION_CANCELLED"); _GROUP_CREATION_FAILURE_REASON_CONNECTION_CANCELLEDReady = true; } return _GROUP_CREATION_FAILURE_REASON_CONNECTION_CANCELLEDContent; } }
        private static int _GROUP_CREATION_FAILURE_REASON_CONNECTION_CANCELLEDContent = default;
        private static bool _GROUP_CREATION_FAILURE_REASON_CONNECTION_CANCELLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#GROUP_CREATION_FAILURE_REASON_GROUP_REMOVED"/>
        /// </summary>
        public static int GROUP_CREATION_FAILURE_REASON_GROUP_REMOVED { get { if (!_GROUP_CREATION_FAILURE_REASON_GROUP_REMOVEDReady) { _GROUP_CREATION_FAILURE_REASON_GROUP_REMOVEDContent = SGetField<int>(LocalBridgeClazz, "GROUP_CREATION_FAILURE_REASON_GROUP_REMOVED"); _GROUP_CREATION_FAILURE_REASON_GROUP_REMOVEDReady = true; } return _GROUP_CREATION_FAILURE_REASON_GROUP_REMOVEDContent; } }
        private static int _GROUP_CREATION_FAILURE_REASON_GROUP_REMOVEDContent = default;
        private static bool _GROUP_CREATION_FAILURE_REASON_GROUP_REMOVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#GROUP_CREATION_FAILURE_REASON_INVITATION_FAILED"/>
        /// </summary>
        public static int GROUP_CREATION_FAILURE_REASON_INVITATION_FAILED { get { if (!_GROUP_CREATION_FAILURE_REASON_INVITATION_FAILEDReady) { _GROUP_CREATION_FAILURE_REASON_INVITATION_FAILEDContent = SGetField<int>(LocalBridgeClazz, "GROUP_CREATION_FAILURE_REASON_INVITATION_FAILED"); _GROUP_CREATION_FAILURE_REASON_INVITATION_FAILEDReady = true; } return _GROUP_CREATION_FAILURE_REASON_INVITATION_FAILEDContent; } }
        private static int _GROUP_CREATION_FAILURE_REASON_INVITATION_FAILEDContent = default;
        private static bool _GROUP_CREATION_FAILURE_REASON_INVITATION_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#GROUP_CREATION_FAILURE_REASON_PROVISION_DISCOVERY_FAILED"/>
        /// </summary>
        public static int GROUP_CREATION_FAILURE_REASON_PROVISION_DISCOVERY_FAILED { get { if (!_GROUP_CREATION_FAILURE_REASON_PROVISION_DISCOVERY_FAILEDReady) { _GROUP_CREATION_FAILURE_REASON_PROVISION_DISCOVERY_FAILEDContent = SGetField<int>(LocalBridgeClazz, "GROUP_CREATION_FAILURE_REASON_PROVISION_DISCOVERY_FAILED"); _GROUP_CREATION_FAILURE_REASON_PROVISION_DISCOVERY_FAILEDReady = true; } return _GROUP_CREATION_FAILURE_REASON_PROVISION_DISCOVERY_FAILEDContent; } }
        private static int _GROUP_CREATION_FAILURE_REASON_PROVISION_DISCOVERY_FAILEDContent = default;
        private static bool _GROUP_CREATION_FAILURE_REASON_PROVISION_DISCOVERY_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#GROUP_CREATION_FAILURE_REASON_TIMED_OUT"/>
        /// </summary>
        public static int GROUP_CREATION_FAILURE_REASON_TIMED_OUT { get { if (!_GROUP_CREATION_FAILURE_REASON_TIMED_OUTReady) { _GROUP_CREATION_FAILURE_REASON_TIMED_OUTContent = SGetField<int>(LocalBridgeClazz, "GROUP_CREATION_FAILURE_REASON_TIMED_OUT"); _GROUP_CREATION_FAILURE_REASON_TIMED_OUTReady = true; } return _GROUP_CREATION_FAILURE_REASON_TIMED_OUTContent; } }
        private static int _GROUP_CREATION_FAILURE_REASON_TIMED_OUTContent = default;
        private static bool _GROUP_CREATION_FAILURE_REASON_TIMED_OUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#GROUP_CREATION_FAILURE_REASON_USER_REJECTED"/>
        /// </summary>
        public static int GROUP_CREATION_FAILURE_REASON_USER_REJECTED { get { if (!_GROUP_CREATION_FAILURE_REASON_USER_REJECTEDReady) { _GROUP_CREATION_FAILURE_REASON_USER_REJECTEDContent = SGetField<int>(LocalBridgeClazz, "GROUP_CREATION_FAILURE_REASON_USER_REJECTED"); _GROUP_CREATION_FAILURE_REASON_USER_REJECTEDReady = true; } return _GROUP_CREATION_FAILURE_REASON_USER_REJECTEDContent; } }
        private static int _GROUP_CREATION_FAILURE_REASON_USER_REJECTEDContent = default;
        private static bool _GROUP_CREATION_FAILURE_REASON_USER_REJECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#NO_SERVICE_REQUESTS"/>
        /// </summary>
        public static int NO_SERVICE_REQUESTS { get { if (!_NO_SERVICE_REQUESTSReady) { _NO_SERVICE_REQUESTSContent = SGetField<int>(LocalBridgeClazz, "NO_SERVICE_REQUESTS"); _NO_SERVICE_REQUESTSReady = true; } return _NO_SERVICE_REQUESTSContent; } }
        private static int _NO_SERVICE_REQUESTSContent = default;
        private static bool _NO_SERVICE_REQUESTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#P2P_UNSUPPORTED"/>
        /// </summary>
        public static int P2P_UNSUPPORTED { get { if (!_P2P_UNSUPPORTEDReady) { _P2P_UNSUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "P2P_UNSUPPORTED"); _P2P_UNSUPPORTEDReady = true; } return _P2P_UNSUPPORTEDContent; } }
        private static int _P2P_UNSUPPORTEDContent = default;
        private static bool _P2P_UNSUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_DISCOVERY_STARTED"/>
        /// </summary>
        public static int WIFI_P2P_DISCOVERY_STARTED { get { if (!_WIFI_P2P_DISCOVERY_STARTEDReady) { _WIFI_P2P_DISCOVERY_STARTEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_P2P_DISCOVERY_STARTED"); _WIFI_P2P_DISCOVERY_STARTEDReady = true; } return _WIFI_P2P_DISCOVERY_STARTEDContent; } }
        private static int _WIFI_P2P_DISCOVERY_STARTEDContent = default;
        private static bool _WIFI_P2P_DISCOVERY_STARTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_DISCOVERY_STOPPED"/>
        /// </summary>
        public static int WIFI_P2P_DISCOVERY_STOPPED { get { if (!_WIFI_P2P_DISCOVERY_STOPPEDReady) { _WIFI_P2P_DISCOVERY_STOPPEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_P2P_DISCOVERY_STOPPED"); _WIFI_P2P_DISCOVERY_STOPPEDReady = true; } return _WIFI_P2P_DISCOVERY_STOPPEDContent; } }
        private static int _WIFI_P2P_DISCOVERY_STOPPEDContent = default;
        private static bool _WIFI_P2P_DISCOVERY_STOPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_LISTEN_STARTED"/>
        /// </summary>
        public static int WIFI_P2P_LISTEN_STARTED { get { if (!_WIFI_P2P_LISTEN_STARTEDReady) { _WIFI_P2P_LISTEN_STARTEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_P2P_LISTEN_STARTED"); _WIFI_P2P_LISTEN_STARTEDReady = true; } return _WIFI_P2P_LISTEN_STARTEDContent; } }
        private static int _WIFI_P2P_LISTEN_STARTEDContent = default;
        private static bool _WIFI_P2P_LISTEN_STARTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_LISTEN_STOPPED"/>
        /// </summary>
        public static int WIFI_P2P_LISTEN_STOPPED { get { if (!_WIFI_P2P_LISTEN_STOPPEDReady) { _WIFI_P2P_LISTEN_STOPPEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_P2P_LISTEN_STOPPED"); _WIFI_P2P_LISTEN_STOPPEDReady = true; } return _WIFI_P2P_LISTEN_STOPPEDContent; } }
        private static int _WIFI_P2P_LISTEN_STOPPEDContent = default;
        private static bool _WIFI_P2P_LISTEN_STOPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_SCAN_FULL"/>
        /// </summary>
        public static int WIFI_P2P_SCAN_FULL { get { if (!_WIFI_P2P_SCAN_FULLReady) { _WIFI_P2P_SCAN_FULLContent = SGetField<int>(LocalBridgeClazz, "WIFI_P2P_SCAN_FULL"); _WIFI_P2P_SCAN_FULLReady = true; } return _WIFI_P2P_SCAN_FULLContent; } }
        private static int _WIFI_P2P_SCAN_FULLContent = default;
        private static bool _WIFI_P2P_SCAN_FULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_SCAN_SINGLE_FREQ"/>
        /// </summary>
        public static int WIFI_P2P_SCAN_SINGLE_FREQ { get { if (!_WIFI_P2P_SCAN_SINGLE_FREQReady) { _WIFI_P2P_SCAN_SINGLE_FREQContent = SGetField<int>(LocalBridgeClazz, "WIFI_P2P_SCAN_SINGLE_FREQ"); _WIFI_P2P_SCAN_SINGLE_FREQReady = true; } return _WIFI_P2P_SCAN_SINGLE_FREQContent; } }
        private static int _WIFI_P2P_SCAN_SINGLE_FREQContent = default;
        private static bool _WIFI_P2P_SCAN_SINGLE_FREQReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_SCAN_SOCIAL"/>
        /// </summary>
        public static int WIFI_P2P_SCAN_SOCIAL { get { if (!_WIFI_P2P_SCAN_SOCIALReady) { _WIFI_P2P_SCAN_SOCIALContent = SGetField<int>(LocalBridgeClazz, "WIFI_P2P_SCAN_SOCIAL"); _WIFI_P2P_SCAN_SOCIALReady = true; } return _WIFI_P2P_SCAN_SOCIALContent; } }
        private static int _WIFI_P2P_SCAN_SOCIALContent = default;
        private static bool _WIFI_P2P_SCAN_SOCIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_STATE_DISABLED"/>
        /// </summary>
        public static int WIFI_P2P_STATE_DISABLED { get { if (!_WIFI_P2P_STATE_DISABLEDReady) { _WIFI_P2P_STATE_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_P2P_STATE_DISABLED"); _WIFI_P2P_STATE_DISABLEDReady = true; } return _WIFI_P2P_STATE_DISABLEDContent; } }
        private static int _WIFI_P2P_STATE_DISABLEDContent = default;
        private static bool _WIFI_P2P_STATE_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_STATE_ENABLED"/>
        /// </summary>
        public static int WIFI_P2P_STATE_ENABLED { get { if (!_WIFI_P2P_STATE_ENABLEDReady) { _WIFI_P2P_STATE_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_P2P_STATE_ENABLED"); _WIFI_P2P_STATE_ENABLEDReady = true; } return _WIFI_P2P_STATE_ENABLEDContent; } }
        private static int _WIFI_P2P_STATE_ENABLEDContent = default;
        private static bool _WIFI_P2P_STATE_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#ACTION_WIFI_P2P_LISTEN_STATE_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_WIFI_P2P_LISTEN_STATE_CHANGED { get { if (!_ACTION_WIFI_P2P_LISTEN_STATE_CHANGEDReady) { _ACTION_WIFI_P2P_LISTEN_STATE_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_WIFI_P2P_LISTEN_STATE_CHANGED"); _ACTION_WIFI_P2P_LISTEN_STATE_CHANGEDReady = true; } return _ACTION_WIFI_P2P_LISTEN_STATE_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_WIFI_P2P_LISTEN_STATE_CHANGEDContent = default;
        private static bool _ACTION_WIFI_P2P_LISTEN_STATE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGED { get { if (!_ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGEDReady) { _ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGED"); _ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGEDReady = true; } return _ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGEDContent = default;
        private static bool _ACTION_WIFI_P2P_REQUEST_RESPONSE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_DISCOVERY_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DISCOVERY_STATE { get { if (!_EXTRA_DISCOVERY_STATEReady) { _EXTRA_DISCOVERY_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DISCOVERY_STATE"); _EXTRA_DISCOVERY_STATEReady = true; } return _EXTRA_DISCOVERY_STATEContent; } }
        private static Java.Lang.String _EXTRA_DISCOVERY_STATEContent = default;
        private static bool _EXTRA_DISCOVERY_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_LISTEN_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_LISTEN_STATE { get { if (!_EXTRA_LISTEN_STATEReady) { _EXTRA_LISTEN_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_LISTEN_STATE"); _EXTRA_LISTEN_STATEReady = true; } return _EXTRA_LISTEN_STATEContent; } }
        private static Java.Lang.String _EXTRA_LISTEN_STATEContent = default;
        private static bool _EXTRA_LISTEN_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_NETWORK_INFO"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NETWORK_INFO { get { if (!_EXTRA_NETWORK_INFOReady) { _EXTRA_NETWORK_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NETWORK_INFO"); _EXTRA_NETWORK_INFOReady = true; } return _EXTRA_NETWORK_INFOContent; } }
        private static Java.Lang.String _EXTRA_NETWORK_INFOContent = default;
        private static bool _EXTRA_NETWORK_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_P2P_DEVICE_LIST"/>
        /// </summary>
        public static Java.Lang.String EXTRA_P2P_DEVICE_LIST { get { if (!_EXTRA_P2P_DEVICE_LISTReady) { _EXTRA_P2P_DEVICE_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_P2P_DEVICE_LIST"); _EXTRA_P2P_DEVICE_LISTReady = true; } return _EXTRA_P2P_DEVICE_LISTContent; } }
        private static Java.Lang.String _EXTRA_P2P_DEVICE_LISTContent = default;
        private static bool _EXTRA_P2P_DEVICE_LISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_REQUEST_CONFIG"/>
        /// </summary>
        public static Java.Lang.String EXTRA_REQUEST_CONFIG { get { if (!_EXTRA_REQUEST_CONFIGReady) { _EXTRA_REQUEST_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_REQUEST_CONFIG"); _EXTRA_REQUEST_CONFIGReady = true; } return _EXTRA_REQUEST_CONFIGContent; } }
        private static Java.Lang.String _EXTRA_REQUEST_CONFIGContent = default;
        private static bool _EXTRA_REQUEST_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_REQUEST_RESPONSE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_REQUEST_RESPONSE { get { if (!_EXTRA_REQUEST_RESPONSEReady) { _EXTRA_REQUEST_RESPONSEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_REQUEST_RESPONSE"); _EXTRA_REQUEST_RESPONSEReady = true; } return _EXTRA_REQUEST_RESPONSEContent; } }
        private static Java.Lang.String _EXTRA_REQUEST_RESPONSEContent = default;
        private static bool _EXTRA_REQUEST_RESPONSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_WIFI_P2P_DEVICE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_WIFI_P2P_DEVICE { get { if (!_EXTRA_WIFI_P2P_DEVICEReady) { _EXTRA_WIFI_P2P_DEVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_WIFI_P2P_DEVICE"); _EXTRA_WIFI_P2P_DEVICEReady = true; } return _EXTRA_WIFI_P2P_DEVICEContent; } }
        private static Java.Lang.String _EXTRA_WIFI_P2P_DEVICEContent = default;
        private static bool _EXTRA_WIFI_P2P_DEVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_WIFI_P2P_GROUP"/>
        /// </summary>
        public static Java.Lang.String EXTRA_WIFI_P2P_GROUP { get { if (!_EXTRA_WIFI_P2P_GROUPReady) { _EXTRA_WIFI_P2P_GROUPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_WIFI_P2P_GROUP"); _EXTRA_WIFI_P2P_GROUPReady = true; } return _EXTRA_WIFI_P2P_GROUPContent; } }
        private static Java.Lang.String _EXTRA_WIFI_P2P_GROUPContent = default;
        private static bool _EXTRA_WIFI_P2P_GROUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_WIFI_P2P_INFO"/>
        /// </summary>
        public static Java.Lang.String EXTRA_WIFI_P2P_INFO { get { if (!_EXTRA_WIFI_P2P_INFOReady) { _EXTRA_WIFI_P2P_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_WIFI_P2P_INFO"); _EXTRA_WIFI_P2P_INFOReady = true; } return _EXTRA_WIFI_P2P_INFOContent; } }
        private static Java.Lang.String _EXTRA_WIFI_P2P_INFOContent = default;
        private static bool _EXTRA_WIFI_P2P_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_WIFI_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_WIFI_STATE { get { if (!_EXTRA_WIFI_STATEReady) { _EXTRA_WIFI_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_WIFI_STATE"); _EXTRA_WIFI_STATEReady = true; } return _EXTRA_WIFI_STATEContent; } }
        private static Java.Lang.String _EXTRA_WIFI_STATEContent = default;
        private static bool _EXTRA_WIFI_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_CONNECTION_CHANGED_ACTION"/>
        /// </summary>
        public static Java.Lang.String WIFI_P2P_CONNECTION_CHANGED_ACTION { get { if (!_WIFI_P2P_CONNECTION_CHANGED_ACTIONReady) { _WIFI_P2P_CONNECTION_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_P2P_CONNECTION_CHANGED_ACTION"); _WIFI_P2P_CONNECTION_CHANGED_ACTIONReady = true; } return _WIFI_P2P_CONNECTION_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _WIFI_P2P_CONNECTION_CHANGED_ACTIONContent = default;
        private static bool _WIFI_P2P_CONNECTION_CHANGED_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_DISCOVERY_CHANGED_ACTION"/>
        /// </summary>
        public static Java.Lang.String WIFI_P2P_DISCOVERY_CHANGED_ACTION { get { if (!_WIFI_P2P_DISCOVERY_CHANGED_ACTIONReady) { _WIFI_P2P_DISCOVERY_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_P2P_DISCOVERY_CHANGED_ACTION"); _WIFI_P2P_DISCOVERY_CHANGED_ACTIONReady = true; } return _WIFI_P2P_DISCOVERY_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _WIFI_P2P_DISCOVERY_CHANGED_ACTIONContent = default;
        private static bool _WIFI_P2P_DISCOVERY_CHANGED_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_PEERS_CHANGED_ACTION"/>
        /// </summary>
        public static Java.Lang.String WIFI_P2P_PEERS_CHANGED_ACTION { get { if (!_WIFI_P2P_PEERS_CHANGED_ACTIONReady) { _WIFI_P2P_PEERS_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_P2P_PEERS_CHANGED_ACTION"); _WIFI_P2P_PEERS_CHANGED_ACTIONReady = true; } return _WIFI_P2P_PEERS_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _WIFI_P2P_PEERS_CHANGED_ACTIONContent = default;
        private static bool _WIFI_P2P_PEERS_CHANGED_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_STATE_CHANGED_ACTION"/>
        /// </summary>
        public static Java.Lang.String WIFI_P2P_STATE_CHANGED_ACTION { get { if (!_WIFI_P2P_STATE_CHANGED_ACTIONReady) { _WIFI_P2P_STATE_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_P2P_STATE_CHANGED_ACTION"); _WIFI_P2P_STATE_CHANGED_ACTIONReady = true; } return _WIFI_P2P_STATE_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _WIFI_P2P_STATE_CHANGED_ACTIONContent = default;
        private static bool _WIFI_P2P_STATE_CHANGED_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_THIS_DEVICE_CHANGED_ACTION"/>
        /// </summary>
        public static Java.Lang.String WIFI_P2P_THIS_DEVICE_CHANGED_ACTION { get { if (!_WIFI_P2P_THIS_DEVICE_CHANGED_ACTIONReady) { _WIFI_P2P_THIS_DEVICE_CHANGED_ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_P2P_THIS_DEVICE_CHANGED_ACTION"); _WIFI_P2P_THIS_DEVICE_CHANGED_ACTIONReady = true; } return _WIFI_P2P_THIS_DEVICE_CHANGED_ACTIONContent; } }
        private static Java.Lang.String _WIFI_P2P_THIS_DEVICE_CHANGED_ACTIONContent = default;
        private static bool _WIFI_P2P_THIS_DEVICE_CHANGED_ACTIONReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#getP2pMaxAllowedVendorElementsLengthBytes()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public static int GetP2pMaxAllowedVendorElementsLengthBytes()
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getP2pMaxAllowedVendorElementsLengthBytes", "()I");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager.ChannelListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Os.Looper"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ChannelListener"/></param>
        /// <returns><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></returns>
        public Android.Net.Wifi.P2p.WifiP2pManager.Channel Initialize(Android.Content.Context arg0, Android.Os.Looper arg1, Android.Net.Wifi.P2p.WifiP2pManager.ChannelListener arg2)
        {
            return IExecuteWithSignature<Android.Net.Wifi.P2p.WifiP2pManager.Channel>("initialize", "(Landroid/content/Context;Landroid/os/Looper;Landroid/net/wifi/p2p/WifiP2pManager$ChannelListener;)Landroid/net/wifi/p2p/WifiP2pManager$Channel;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#isChannelConstrainedDiscoverySupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsChannelConstrainedDiscoverySupported()
        {
            return IExecuteWithSignature<bool>("isChannelConstrainedDiscoverySupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#isGroupClientRemovalSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsGroupClientRemovalSupported()
        {
            return IExecuteWithSignature<bool>("isGroupClientRemovalSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#isGroupOwnerIPv6LinkLocalAddressProvided()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsGroupOwnerIPv6LinkLocalAddressProvided()
        {
            return IExecuteWithSignature<bool>("isGroupOwnerIPv6LinkLocalAddressProvided", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#isSetVendorElementsSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSetVendorElementsSupported()
        {
            return IExecuteWithSignature<bool>("isSetVendorElementsSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#addExternalApprover(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.MacAddress,android.net.wifi.p2p.WifiP2pManager.ExternalApproverRequestListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.MacAddress"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ExternalApproverRequestListener"/></param>
        public void AddExternalApprover(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.MacAddress arg1, Android.Net.Wifi.P2p.WifiP2pManager.ExternalApproverRequestListener arg2)
        {
            IExecuteWithSignature("addExternalApprover", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/MacAddress;Landroid/net/wifi/p2p/WifiP2pManager$ExternalApproverRequestListener;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#addLocalService(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.Nsd.WifiP2pServiceInfo"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void AddLocalService(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.Nsd.WifiP2pServiceInfo arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecuteWithSignature("addLocalService", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/nsd/WifiP2pServiceInfo;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#addServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.Nsd.WifiP2pServiceRequest"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void AddServiceRequest(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.Nsd.WifiP2pServiceRequest arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecuteWithSignature("addServiceRequest", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/nsd/WifiP2pServiceRequest;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#cancelConnect(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void CancelConnect(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecuteWithSignature("cancelConnect", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#clearLocalServices(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void ClearLocalServices(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecuteWithSignature("clearLocalServices", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#clearServiceRequests(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void ClearServiceRequests(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecuteWithSignature("clearServiceRequests", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#connect(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pConfig"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void Connect(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pConfig arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecuteWithSignature("connect", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pConfig;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#createGroup(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pConfig"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void CreateGroup(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pConfig arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecuteWithSignature("createGroup", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pConfig;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#createGroup(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void CreateGroup(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecuteWithSignature("createGroup", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void DiscoverPeers(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecuteWithSignature("discoverPeers", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#discoverPeersOnSocialChannels(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void DiscoverPeersOnSocialChannels(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecuteWithSignature("discoverPeersOnSocialChannels", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#discoverPeersOnSpecificFrequency(android.net.wifi.p2p.WifiP2pManager.Channel,int,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void DiscoverPeersOnSpecificFrequency(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, int arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecuteWithSignature("discoverPeersOnSpecificFrequency", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;ILandroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#discoverServices(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void DiscoverServices(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecuteWithSignature("discoverServices", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#getListenState(android.net.wifi.p2p.WifiP2pManager.Channel,java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.Consumer"/></param>
        public void GetListenState(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Java.Util.Concurrent.Executor arg1, Java.Util.Function.Consumer<Java.Lang.Integer> arg2)
        {
            IExecuteWithSignature("getListenState", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#registerWifiP2pListener(java.util.concurrent.Executor,android.net.wifi.p2p.WifiP2pManager.WifiP2pListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.WifiP2pListener"/></param>
        public void RegisterWifiP2pListener(Java.Util.Concurrent.Executor arg0, Android.Net.Wifi.P2p.WifiP2pManager.WifiP2pListener arg1)
        {
            IExecuteWithSignature("registerWifiP2pListener", "(Ljava/util/concurrent/Executor;Landroid/net/wifi/p2p/WifiP2pManager$WifiP2pListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeClient(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.MacAddress,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.MacAddress"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void RemoveClient(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.MacAddress arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecuteWithSignature("removeClient", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/MacAddress;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeExternalApprover(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.MacAddress,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.MacAddress"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void RemoveExternalApprover(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.MacAddress arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecuteWithSignature("removeExternalApprover", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/MacAddress;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeGroup(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void RemoveGroup(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecuteWithSignature("removeGroup", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeLocalService(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.Nsd.WifiP2pServiceInfo"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void RemoveLocalService(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.Nsd.WifiP2pServiceInfo arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecuteWithSignature("removeLocalService", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/nsd/WifiP2pServiceInfo;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.Nsd.WifiP2pServiceRequest"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void RemoveServiceRequest(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.Nsd.WifiP2pServiceRequest arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecuteWithSignature("removeServiceRequest", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/nsd/WifiP2pServiceRequest;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ConnectionInfoListener"/></param>
        public void RequestConnectionInfo(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ConnectionInfoListener arg1)
        {
            IExecuteWithSignature("requestConnectionInfo", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ConnectionInfoListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestDeviceInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DeviceInfoListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.DeviceInfoListener"/></param>
        public void RequestDeviceInfo(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.DeviceInfoListener arg1)
        {
            IExecuteWithSignature("requestDeviceInfo", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$DeviceInfoListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestDiscoveryState(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DiscoveryStateListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.DiscoveryStateListener"/></param>
        public void RequestDiscoveryState(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.DiscoveryStateListener arg1)
        {
            IExecuteWithSignature("requestDiscoveryState", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$DiscoveryStateListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestGroupInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.GroupInfoListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.GroupInfoListener"/></param>
        public void RequestGroupInfo(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.GroupInfoListener arg1)
        {
            IExecuteWithSignature("requestGroupInfo", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$GroupInfoListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestNetworkInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.NetworkInfoListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.NetworkInfoListener"/></param>
        public void RequestNetworkInfo(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.NetworkInfoListener arg1)
        {
            IExecuteWithSignature("requestNetworkInfo", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$NetworkInfoListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestP2pState(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.P2pStateListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.P2pStateListener"/></param>
        public void RequestP2pState(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.P2pStateListener arg1)
        {
            IExecuteWithSignature("requestP2pState", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$P2pStateListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestPeers(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.PeerListListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.PeerListListener"/></param>
        public void RequestPeers(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.PeerListListener arg1)
        {
            IExecuteWithSignature("requestPeers", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$PeerListListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setConnectionRequestResult(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.MacAddress,int,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.MacAddress"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void SetConnectionRequestResult(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.MacAddress arg1, int arg2, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg3)
        {
            IExecuteWithSignature("setConnectionRequestResult", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/MacAddress;ILandroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setConnectionRequestResult(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.MacAddress,int,java.lang.String,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.MacAddress"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Lang.String"/></param>
        /// <param name="arg4"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void SetConnectionRequestResult(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.MacAddress arg1, int arg2, Java.Lang.String arg3, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg4)
        {
            IExecuteWithSignature("setConnectionRequestResult", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/MacAddress;ILjava/lang/String;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setDnsSdResponseListeners(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DnsSdServiceResponseListener,android.net.wifi.p2p.WifiP2pManager.DnsSdTxtRecordListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.DnsSdServiceResponseListener"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.DnsSdTxtRecordListener"/></param>
        public void SetDnsSdResponseListeners(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.DnsSdServiceResponseListener arg1, Android.Net.Wifi.P2p.WifiP2pManager.DnsSdTxtRecordListener arg2)
        {
            IExecuteWithSignature("setDnsSdResponseListeners", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$DnsSdServiceResponseListener;Landroid/net/wifi/p2p/WifiP2pManager$DnsSdTxtRecordListener;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setServiceResponseListener(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ServiceResponseListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ServiceResponseListener"/></param>
        public void SetServiceResponseListener(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ServiceResponseListener arg1)
        {
            IExecuteWithSignature("setServiceResponseListener", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ServiceResponseListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setUpnpServiceResponseListener(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.UpnpServiceResponseListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.UpnpServiceResponseListener"/></param>
        public void SetUpnpServiceResponseListener(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.UpnpServiceResponseListener arg1)
        {
            IExecuteWithSignature("setUpnpServiceResponseListener", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$UpnpServiceResponseListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setVendorElements(android.net.wifi.p2p.WifiP2pManager.Channel,java.util.List,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void SetVendorElements(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Java.Util.List<Android.Net.Wifi.ScanResult.InformationElement> arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecuteWithSignature("setVendorElements", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Ljava/util/List;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setWfdInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pWfdInfo,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pWfdInfo"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void SetWfdInfo(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pWfdInfo arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecuteWithSignature("setWfdInfo", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pWfdInfo;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#startListening(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void StartListening(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecuteWithSignature("startListening", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#startPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pDiscoveryConfig,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pDiscoveryConfig"/></param>
        /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void StartPeerDiscovery(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pDiscoveryConfig arg1, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg2)
        {
            IExecuteWithSignature("startPeerDiscovery", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pDiscoveryConfig;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#stopListening(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void StopListening(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecuteWithSignature("stopListening", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.Channel"/></param>
        /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.ActionListener"/></param>
        public void StopPeerDiscovery(Android.Net.Wifi.P2p.WifiP2pManager.Channel arg0, Android.Net.Wifi.P2p.WifiP2pManager.ActionListener arg1)
        {
            IExecuteWithSignature("stopPeerDiscovery", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#unregisterWifiP2pListener(android.net.wifi.p2p.WifiP2pManager.WifiP2pListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pManager.WifiP2pListener"/></param>
        public void UnregisterWifiP2pListener(Android.Net.Wifi.P2p.WifiP2pManager.WifiP2pListener arg0)
        {
            IExecuteWithSignature("unregisterWifiP2pListener", "(Landroid/net/wifi/p2p/WifiP2pManager$WifiP2pListener;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region ActionListener implementation
        public partial class ActionListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="ActionListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onFailure", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnFailureEventHandler));
                AddEventHandler("onSuccess", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnSuccessEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html#onFailure(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnFailure"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnFailure { get; set; } = null;

            bool hasOverrideOnFailure = true;
            void OnFailureEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnFailure = true;
                var methodToExecute = (OnOnFailure != null) ? OnOnFailure : OnFailure;
                methodToExecute.Invoke(data.EventData.GetAt<int>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnFailure;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html#onFailure(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public virtual void OnFailure(int arg0)
            {
                hasOverrideOnFailure = false;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html#onSuccess()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnSuccess"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnSuccess { get; set; } = null;

            bool hasOverrideOnSuccess = true;
            void OnSuccessEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnSuccess = true;
                var methodToExecute = (OnOnSuccess != null) ? OnOnSuccess : OnSuccess;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnSuccess;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html#onSuccess()"/>
            /// </summary>
            public virtual void OnSuccess()
            {
                hasOverrideOnSuccess = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ActionListenerDirect implementation
        public partial class ActionListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html#onFailure(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnFailure(int arg0)
            {
                IExecuteWithSignature("onFailure", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ActionListener.html#onSuccess()"/>
            /// </summary>
            public override void OnSuccess()
            {
                IExecuteWithSignature("onSuccess", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Channel implementation
        public partial class Channel
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.Channel.html#close()"/>
            /// </summary>
            public void Close()
            {
                IExecuteWithSignature("close", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ChannelListener implementation
        public partial class ChannelListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="ChannelListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onChannelDisconnected", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnChannelDisconnectedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ChannelListener.html#onChannelDisconnected()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnChannelDisconnected"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnChannelDisconnected { get; set; } = null;

            bool hasOverrideOnChannelDisconnected = true;
            void OnChannelDisconnectedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnChannelDisconnected = true;
                var methodToExecute = (OnOnChannelDisconnected != null) ? OnOnChannelDisconnected : OnChannelDisconnected;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnChannelDisconnected;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ChannelListener.html#onChannelDisconnected()"/>
            /// </summary>
            public virtual void OnChannelDisconnected()
            {
                hasOverrideOnChannelDisconnected = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ChannelListenerDirect implementation
        public partial class ChannelListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ChannelListener.html#onChannelDisconnected()"/>
            /// </summary>
            public override void OnChannelDisconnected()
            {
                IExecuteWithSignature("onChannelDisconnected", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ConnectionInfoListener implementation
        public partial class ConnectionInfoListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="ConnectionInfoListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onConnectionInfoAvailable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnConnectionInfoAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ConnectionInfoListener.html#onConnectionInfoAvailable(android.net.wifi.p2p.WifiP2pInfo)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnConnectionInfoAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Net.Wifi.P2p.WifiP2pInfo> OnOnConnectionInfoAvailable { get; set; } = null;

            bool hasOverrideOnConnectionInfoAvailable = true;
            void OnConnectionInfoAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnConnectionInfoAvailable = true;
                var methodToExecute = (OnOnConnectionInfoAvailable != null) ? OnOnConnectionInfoAvailable : OnConnectionInfoAvailable;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pInfo>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnConnectionInfoAvailable;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ConnectionInfoListener.html#onConnectionInfoAvailable(android.net.wifi.p2p.WifiP2pInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pInfo"/></param>
            public virtual void OnConnectionInfoAvailable(Android.Net.Wifi.P2p.WifiP2pInfo arg0)
            {
                hasOverrideOnConnectionInfoAvailable = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ConnectionInfoListenerDirect implementation
        public partial class ConnectionInfoListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ConnectionInfoListener.html#onConnectionInfoAvailable(android.net.wifi.p2p.WifiP2pInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pInfo"/></param>
            public override void OnConnectionInfoAvailable(Android.Net.Wifi.P2p.WifiP2pInfo arg0)
            {
                IExecuteWithSignature("onConnectionInfoAvailable", "(Landroid/net/wifi/p2p/WifiP2pInfo;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DeviceInfoListener implementation
        public partial class DeviceInfoListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="DeviceInfoListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDeviceInfoAvailable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDeviceInfoAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DeviceInfoListener.html#onDeviceInfoAvailable(android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDeviceInfoAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Net.Wifi.P2p.WifiP2pDevice> OnOnDeviceInfoAvailable { get; set; } = null;

            bool hasOverrideOnDeviceInfoAvailable = true;
            void OnDeviceInfoAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDeviceInfoAvailable = true;
                var methodToExecute = (OnOnDeviceInfoAvailable != null) ? OnOnDeviceInfoAvailable : OnDeviceInfoAvailable;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pDevice>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnDeviceInfoAvailable;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DeviceInfoListener.html#onDeviceInfoAvailable(android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public virtual void OnDeviceInfoAvailable(Android.Net.Wifi.P2p.WifiP2pDevice arg0)
            {
                hasOverrideOnDeviceInfoAvailable = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DeviceInfoListenerDirect implementation
        public partial class DeviceInfoListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DeviceInfoListener.html#onDeviceInfoAvailable(android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public override void OnDeviceInfoAvailable(Android.Net.Wifi.P2p.WifiP2pDevice arg0)
            {
                IExecuteWithSignature("onDeviceInfoAvailable", "(Landroid/net/wifi/p2p/WifiP2pDevice;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DiscoveryStateListener implementation
        public partial class DiscoveryStateListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="DiscoveryStateListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDiscoveryStateAvailable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDiscoveryStateAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DiscoveryStateListener.html#onDiscoveryStateAvailable(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDiscoveryStateAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnDiscoveryStateAvailable { get; set; } = null;

            bool hasOverrideOnDiscoveryStateAvailable = true;
            void OnDiscoveryStateAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDiscoveryStateAvailable = true;
                var methodToExecute = (OnOnDiscoveryStateAvailable != null) ? OnOnDiscoveryStateAvailable : OnDiscoveryStateAvailable;
                methodToExecute.Invoke(data.EventData.GetAt<int>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnDiscoveryStateAvailable;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DiscoveryStateListener.html#onDiscoveryStateAvailable(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public virtual void OnDiscoveryStateAvailable(int arg0)
            {
                hasOverrideOnDiscoveryStateAvailable = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DiscoveryStateListenerDirect implementation
        public partial class DiscoveryStateListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DiscoveryStateListener.html#onDiscoveryStateAvailable(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnDiscoveryStateAvailable(int arg0)
            {
                IExecuteWithSignature("onDiscoveryStateAvailable", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DnsSdServiceResponseListener implementation
        public partial class DnsSdServiceResponseListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="DnsSdServiceResponseListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDnsSdServiceAvailable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDnsSdServiceAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdServiceResponseListener.html#onDnsSdServiceAvailable(java.lang.String,java.lang.String,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDnsSdServiceAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Java.Lang.String, Java.Lang.String, Android.Net.Wifi.P2p.WifiP2pDevice> OnOnDnsSdServiceAvailable { get; set; } = null;

            bool hasOverrideOnDnsSdServiceAvailable = true;
            void OnDnsSdServiceAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDnsSdServiceAvailable = true;
                var methodToExecute = (OnOnDnsSdServiceAvailable != null) ? OnOnDnsSdServiceAvailable : OnDnsSdServiceAvailable;
                methodToExecute.Invoke(data.EventData.GetAt<Java.Lang.String>(0), data.EventData.GetAt<Java.Lang.String>(1), data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pDevice>(2));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnDnsSdServiceAvailable;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdServiceResponseListener.html#onDnsSdServiceAvailable(java.lang.String,java.lang.String,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public virtual void OnDnsSdServiceAvailable(Java.Lang.String arg0, Java.Lang.String arg1, Android.Net.Wifi.P2p.WifiP2pDevice arg2)
            {
                hasOverrideOnDnsSdServiceAvailable = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DnsSdServiceResponseListenerDirect implementation
        public partial class DnsSdServiceResponseListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdServiceResponseListener.html#onDnsSdServiceAvailable(java.lang.String,java.lang.String,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public override void OnDnsSdServiceAvailable(Java.Lang.String arg0, Java.Lang.String arg1, Android.Net.Wifi.P2p.WifiP2pDevice arg2)
            {
                IExecuteWithSignature("onDnsSdServiceAvailable", "(Ljava/lang/String;Ljava/lang/String;Landroid/net/wifi/p2p/WifiP2pDevice;)V", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DnsSdTxtRecordListener implementation
        public partial class DnsSdTxtRecordListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="DnsSdTxtRecordListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDnsSdTxtRecordAvailable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDnsSdTxtRecordAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdTxtRecordListener.html#onDnsSdTxtRecordAvailable(java.lang.String,java.util.Map,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDnsSdTxtRecordAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Java.Lang.String, Java.Util.Map<Java.Lang.String, Java.Lang.String>, Android.Net.Wifi.P2p.WifiP2pDevice> OnOnDnsSdTxtRecordAvailable { get; set; } = null;

            bool hasOverrideOnDnsSdTxtRecordAvailable = true;
            void OnDnsSdTxtRecordAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDnsSdTxtRecordAvailable = true;
                var methodToExecute = (OnOnDnsSdTxtRecordAvailable != null) ? OnOnDnsSdTxtRecordAvailable : OnDnsSdTxtRecordAvailable;
                methodToExecute.Invoke(data.EventData.GetAt<Java.Lang.String>(0), data.EventData.GetAt<Java.Util.Map<Java.Lang.String, Java.Lang.String>>(1), data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pDevice>(2));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnDnsSdTxtRecordAvailable;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdTxtRecordListener.html#onDnsSdTxtRecordAvailable(java.lang.String,java.util.Map,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Util.Map"/></param>
            /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public virtual void OnDnsSdTxtRecordAvailable(Java.Lang.String arg0, Java.Util.Map<Java.Lang.String, Java.Lang.String> arg1, Android.Net.Wifi.P2p.WifiP2pDevice arg2)
            {
                hasOverrideOnDnsSdTxtRecordAvailable = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DnsSdTxtRecordListenerDirect implementation
        public partial class DnsSdTxtRecordListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.DnsSdTxtRecordListener.html#onDnsSdTxtRecordAvailable(java.lang.String,java.util.Map,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Util.Map"/></param>
            /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public override void OnDnsSdTxtRecordAvailable(Java.Lang.String arg0, Java.Util.Map<Java.Lang.String, Java.Lang.String> arg1, Android.Net.Wifi.P2p.WifiP2pDevice arg2)
            {
                IExecuteWithSignature("onDnsSdTxtRecordAvailable", "(Ljava/lang/String;Ljava/util/Map;Landroid/net/wifi/p2p/WifiP2pDevice;)V", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ExternalApproverRequestListener implementation
        public partial class ExternalApproverRequestListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="ExternalApproverRequestListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onAttached", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnAttachedEventHandler));
                AddEventHandler("onConnectionRequested", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnConnectionRequestedEventHandler));
                AddEventHandler("onDetached", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDetachedEventHandler));
                AddEventHandler("onPinGenerated", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnPinGeneratedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onAttached(android.net.MacAddress)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnAttached"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Net.MacAddress> OnOnAttached { get; set; } = null;

            bool hasOverrideOnAttached = true;
            void OnAttachedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnAttached = true;
                var methodToExecute = (OnOnAttached != null) ? OnOnAttached : OnAttached;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Net.MacAddress>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnAttached;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onAttached(android.net.MacAddress)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.MacAddress"/></param>
            public virtual void OnAttached(Android.Net.MacAddress arg0)
            {
                hasOverrideOnAttached = false;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onConnectionRequested(int,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnConnectionRequested"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int, Android.Net.Wifi.P2p.WifiP2pConfig, Android.Net.Wifi.P2p.WifiP2pDevice> OnOnConnectionRequested { get; set; } = null;

            bool hasOverrideOnConnectionRequested = true;
            void OnConnectionRequestedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnConnectionRequested = true;
                var methodToExecute = (OnOnConnectionRequested != null) ? OnOnConnectionRequested : OnConnectionRequested;
                methodToExecute.Invoke(data.EventData.GetAt<int>(0), data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pConfig>(1), data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pDevice>(2));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnConnectionRequested;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onConnectionRequested(int,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pConfig"/></param>
            /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public virtual void OnConnectionRequested(int arg0, Android.Net.Wifi.P2p.WifiP2pConfig arg1, Android.Net.Wifi.P2p.WifiP2pDevice arg2)
            {
                hasOverrideOnConnectionRequested = false;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onDetached(android.net.MacAddress,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDetached"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Net.MacAddress, int> OnOnDetached { get; set; } = null;

            bool hasOverrideOnDetached = true;
            void OnDetachedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDetached = true;
                var methodToExecute = (OnOnDetached != null) ? OnOnDetached : OnDetached;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Net.MacAddress>(0), data.EventData.GetAt<int>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnDetached;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onDetached(android.net.MacAddress,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.MacAddress"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public virtual void OnDetached(Android.Net.MacAddress arg0, int arg1)
            {
                hasOverrideOnDetached = false;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onPinGenerated(android.net.MacAddress,java.lang.String)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPinGenerated"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Net.MacAddress, Java.Lang.String> OnOnPinGenerated { get; set; } = null;

            bool hasOverrideOnPinGenerated = true;
            void OnPinGeneratedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnPinGenerated = true;
                var methodToExecute = (OnOnPinGenerated != null) ? OnOnPinGenerated : OnPinGenerated;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Net.MacAddress>(0), data.EventData.GetAt<Java.Lang.String>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnPinGenerated;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onPinGenerated(android.net.MacAddress,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.MacAddress"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            public virtual void OnPinGenerated(Android.Net.MacAddress arg0, Java.Lang.String arg1)
            {
                hasOverrideOnPinGenerated = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ExternalApproverRequestListenerDirect implementation
        public partial class ExternalApproverRequestListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onAttached(android.net.MacAddress)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.MacAddress"/></param>
            public override void OnAttached(Android.Net.MacAddress arg0)
            {
                IExecuteWithSignature("onAttached", "(Landroid/net/MacAddress;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onConnectionRequested(int,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pConfig"/></param>
            /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public override void OnConnectionRequested(int arg0, Android.Net.Wifi.P2p.WifiP2pConfig arg1, Android.Net.Wifi.P2p.WifiP2pDevice arg2)
            {
                IExecuteWithSignature("onConnectionRequested", "(ILandroid/net/wifi/p2p/WifiP2pConfig;Landroid/net/wifi/p2p/WifiP2pDevice;)V", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onDetached(android.net.MacAddress,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.MacAddress"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public override void OnDetached(Android.Net.MacAddress arg0, int arg1)
            {
                IExecuteWithSignature("onDetached", "(Landroid/net/MacAddress;I)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ExternalApproverRequestListener.html#onPinGenerated(android.net.MacAddress,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.MacAddress"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            public override void OnPinGenerated(Android.Net.MacAddress arg0, Java.Lang.String arg1)
            {
                IExecuteWithSignature("onPinGenerated", "(Landroid/net/MacAddress;Ljava/lang/String;)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region GroupInfoListener implementation
        public partial class GroupInfoListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="GroupInfoListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onGroupInfoAvailable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGroupInfoAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.GroupInfoListener.html#onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGroupInfoAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Net.Wifi.P2p.WifiP2pGroup> OnOnGroupInfoAvailable { get; set; } = null;

            bool hasOverrideOnGroupInfoAvailable = true;
            void OnGroupInfoAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnGroupInfoAvailable = true;
                var methodToExecute = (OnOnGroupInfoAvailable != null) ? OnOnGroupInfoAvailable : OnGroupInfoAvailable;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pGroup>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnGroupInfoAvailable;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.GroupInfoListener.html#onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
            public virtual void OnGroupInfoAvailable(Android.Net.Wifi.P2p.WifiP2pGroup arg0)
            {
                hasOverrideOnGroupInfoAvailable = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region GroupInfoListenerDirect implementation
        public partial class GroupInfoListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.GroupInfoListener.html#onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
            public override void OnGroupInfoAvailable(Android.Net.Wifi.P2p.WifiP2pGroup arg0)
            {
                IExecuteWithSignature("onGroupInfoAvailable", "(Landroid/net/wifi/p2p/WifiP2pGroup;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region NetworkInfoListener implementation
        public partial class NetworkInfoListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="NetworkInfoListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onNetworkInfoAvailable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnNetworkInfoAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.NetworkInfoListener.html#onNetworkInfoAvailable(android.net.NetworkInfo)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnNetworkInfoAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Net.NetworkInfo> OnOnNetworkInfoAvailable { get; set; } = null;

            bool hasOverrideOnNetworkInfoAvailable = true;
            void OnNetworkInfoAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnNetworkInfoAvailable = true;
                var methodToExecute = (OnOnNetworkInfoAvailable != null) ? OnOnNetworkInfoAvailable : OnNetworkInfoAvailable;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Net.NetworkInfo>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnNetworkInfoAvailable;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.NetworkInfoListener.html#onNetworkInfoAvailable(android.net.NetworkInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.NetworkInfo"/></param>
            public virtual void OnNetworkInfoAvailable(Android.Net.NetworkInfo arg0)
            {
                hasOverrideOnNetworkInfoAvailable = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region NetworkInfoListenerDirect implementation
        public partial class NetworkInfoListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.NetworkInfoListener.html#onNetworkInfoAvailable(android.net.NetworkInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.NetworkInfo"/></param>
            public override void OnNetworkInfoAvailable(Android.Net.NetworkInfo arg0)
            {
                IExecuteWithSignature("onNetworkInfoAvailable", "(Landroid/net/NetworkInfo;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region P2pStateListener implementation
        public partial class P2pStateListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="P2pStateListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onP2pStateAvailable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnP2pStateAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.P2pStateListener.html#onP2pStateAvailable(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnP2pStateAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnP2pStateAvailable { get; set; } = null;

            bool hasOverrideOnP2pStateAvailable = true;
            void OnP2pStateAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnP2pStateAvailable = true;
                var methodToExecute = (OnOnP2pStateAvailable != null) ? OnOnP2pStateAvailable : OnP2pStateAvailable;
                methodToExecute.Invoke(data.EventData.GetAt<int>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnP2pStateAvailable;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.P2pStateListener.html#onP2pStateAvailable(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public virtual void OnP2pStateAvailable(int arg0)
            {
                hasOverrideOnP2pStateAvailable = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region P2pStateListenerDirect implementation
        public partial class P2pStateListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.P2pStateListener.html#onP2pStateAvailable(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnP2pStateAvailable(int arg0)
            {
                IExecuteWithSignature("onP2pStateAvailable", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PeerListListener implementation
        public partial class PeerListListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="PeerListListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onPeersAvailable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnPeersAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.PeerListListener.html#onPeersAvailable(android.net.wifi.p2p.WifiP2pDeviceList)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPeersAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Net.Wifi.P2p.WifiP2pDeviceList> OnOnPeersAvailable { get; set; } = null;

            bool hasOverrideOnPeersAvailable = true;
            void OnPeersAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnPeersAvailable = true;
                var methodToExecute = (OnOnPeersAvailable != null) ? OnOnPeersAvailable : OnPeersAvailable;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pDeviceList>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnPeersAvailable;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.PeerListListener.html#onPeersAvailable(android.net.wifi.p2p.WifiP2pDeviceList)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pDeviceList"/></param>
            public virtual void OnPeersAvailable(Android.Net.Wifi.P2p.WifiP2pDeviceList arg0)
            {
                hasOverrideOnPeersAvailable = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PeerListListenerDirect implementation
        public partial class PeerListListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.PeerListListener.html#onPeersAvailable(android.net.wifi.p2p.WifiP2pDeviceList)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pDeviceList"/></param>
            public override void OnPeersAvailable(Android.Net.Wifi.P2p.WifiP2pDeviceList arg0)
            {
                IExecuteWithSignature("onPeersAvailable", "(Landroid/net/wifi/p2p/WifiP2pDeviceList;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ServiceResponseListener implementation
        public partial class ServiceResponseListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="ServiceResponseListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onServiceAvailable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnServiceAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ServiceResponseListener.html#onServiceAvailable(int,byte[],android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnServiceAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int, byte[], Android.Net.Wifi.P2p.WifiP2pDevice> OnOnServiceAvailable { get; set; } = null;

            bool hasOverrideOnServiceAvailable = true;
            void OnServiceAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnServiceAvailable = true;
                var methodToExecute = (OnOnServiceAvailable != null) ? OnOnServiceAvailable : OnServiceAvailable;
                methodToExecute.Invoke(data.EventData.GetAt<int>(0), data.EventData.GetAt<byte[]>(1), data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pDevice>(2));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnServiceAvailable;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ServiceResponseListener.html#onServiceAvailable(int,byte[],android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public virtual void OnServiceAvailable(int arg0, byte[] arg1, Android.Net.Wifi.P2p.WifiP2pDevice arg2)
            {
                hasOverrideOnServiceAvailable = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ServiceResponseListenerDirect implementation
        public partial class ServiceResponseListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.ServiceResponseListener.html#onServiceAvailable(int,byte[],android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public override void OnServiceAvailable(int arg0, byte[] arg1, Android.Net.Wifi.P2p.WifiP2pDevice arg2)
            {
                IExecuteWithSignature("onServiceAvailable", "(I[BLandroid/net/wifi/p2p/WifiP2pDevice;)V", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region UpnpServiceResponseListener implementation
        public partial class UpnpServiceResponseListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="UpnpServiceResponseListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onUpnpServiceAvailable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnUpnpServiceAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.UpnpServiceResponseListener.html#onUpnpServiceAvailable(java.util.List,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnUpnpServiceAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Java.Util.List<Java.Lang.String>, Android.Net.Wifi.P2p.WifiP2pDevice> OnOnUpnpServiceAvailable { get; set; } = null;

            bool hasOverrideOnUpnpServiceAvailable = true;
            void OnUpnpServiceAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnUpnpServiceAvailable = true;
                var methodToExecute = (OnOnUpnpServiceAvailable != null) ? OnOnUpnpServiceAvailable : OnUpnpServiceAvailable;
                methodToExecute.Invoke(data.EventData.GetAt<Java.Util.List<Java.Lang.String>>(0), data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pDevice>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnUpnpServiceAvailable;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.UpnpServiceResponseListener.html#onUpnpServiceAvailable(java.util.List,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public virtual void OnUpnpServiceAvailable(Java.Util.List<Java.Lang.String> arg0, Android.Net.Wifi.P2p.WifiP2pDevice arg1)
            {
                hasOverrideOnUpnpServiceAvailable = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region UpnpServiceResponseListenerDirect implementation
        public partial class UpnpServiceResponseListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.UpnpServiceResponseListener.html#onUpnpServiceAvailable(java.util.List,android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public override void OnUpnpServiceAvailable(Java.Util.List<Java.Lang.String> arg0, Android.Net.Wifi.P2p.WifiP2pDevice arg1)
            {
                IExecuteWithSignature("onUpnpServiceAvailable", "(Ljava/util/List;Landroid/net/wifi/p2p/WifiP2pDevice;)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region WifiP2pListener implementation
        public partial class WifiP2pListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="WifiP2pListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDeviceConfigurationChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDeviceConfigurationChangedEventHandler));
                AddEventHandler("onDiscoveryStateChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDiscoveryStateChangedEventHandler));
                AddEventHandler("onFrequencyChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnFrequencyChangedEventHandler));
                AddEventHandler("onGroupCreated", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGroupCreatedEventHandler));
                AddEventHandler("onGroupCreating", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGroupCreatingEventHandler));
                AddEventHandler("onGroupCreationFailed", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGroupCreationFailedEventHandler));
                AddEventHandler("onGroupNegotiationRejectedByUser", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGroupNegotiationRejectedByUserEventHandler));
                AddEventHandler("onGroupRemoved", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGroupRemovedEventHandler));
                AddEventHandler("onListenStateChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnListenStateChangedEventHandler));
                AddEventHandler("onP2pStateChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnP2pStateChangedEventHandler));
                AddEventHandler("onPeerClientDisconnected", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnPeerClientDisconnectedEventHandler));
                AddEventHandler("onPeerClientJoined", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnPeerClientJoinedEventHandler));
                AddEventHandler("onPeerListChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnPeerListChangedEventHandler));

            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onDeviceConfigurationChanged(android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnDeviceConfigurationChangedDefault(Android.Net.Wifi.P2p.WifiP2pDevice arg0)
            {
                IExecuteWithSignature("onDeviceConfigurationChangedDefault", "(Landroid/net/wifi/p2p/WifiP2pDevice;)V", arg0);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onDeviceConfigurationChanged(android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDeviceConfigurationChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Net.Wifi.P2p.WifiP2pDevice> OnOnDeviceConfigurationChanged { get; set; } = null;

            bool hasOverrideOnDeviceConfigurationChanged = true;
            void OnDeviceConfigurationChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDeviceConfigurationChanged = true;
                var methodToExecute = (OnOnDeviceConfigurationChanged != null) ? OnOnDeviceConfigurationChanged : OnDeviceConfigurationChanged;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pDevice>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnDeviceConfigurationChanged;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onDeviceConfigurationChanged(android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnDeviceConfigurationChangedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnDeviceConfigurationChanged(Android.Net.Wifi.P2p.WifiP2pDevice arg0)
            {
                hasOverrideOnDeviceConfigurationChanged = false;
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onDiscoveryStateChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnDiscoveryStateChangedDefault(int arg0)
            {
                IExecuteWithSignature("onDiscoveryStateChangedDefault", "(I)V", arg0);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onDiscoveryStateChanged(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDiscoveryStateChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnDiscoveryStateChanged { get; set; } = null;

            bool hasOverrideOnDiscoveryStateChanged = true;
            void OnDiscoveryStateChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDiscoveryStateChanged = true;
                var methodToExecute = (OnOnDiscoveryStateChanged != null) ? OnOnDiscoveryStateChanged : OnDiscoveryStateChanged;
                methodToExecute.Invoke(data.EventData.GetAt<int>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnDiscoveryStateChanged;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onDiscoveryStateChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnDiscoveryStateChangedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnDiscoveryStateChanged(int arg0)
            {
                hasOverrideOnDiscoveryStateChanged = false;
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onFrequencyChanged(android.net.wifi.p2p.WifiP2pInfo,android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pInfo"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnFrequencyChangedDefault(Android.Net.Wifi.P2p.WifiP2pInfo arg0, Android.Net.Wifi.P2p.WifiP2pGroup arg1)
            {
                IExecuteWithSignature("onFrequencyChangedDefault", "(Landroid/net/wifi/p2p/WifiP2pInfo;Landroid/net/wifi/p2p/WifiP2pGroup;)V", arg0, arg1);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onFrequencyChanged(android.net.wifi.p2p.WifiP2pInfo,android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnFrequencyChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Net.Wifi.P2p.WifiP2pInfo, Android.Net.Wifi.P2p.WifiP2pGroup> OnOnFrequencyChanged { get; set; } = null;

            bool hasOverrideOnFrequencyChanged = true;
            void OnFrequencyChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnFrequencyChanged = true;
                var methodToExecute = (OnOnFrequencyChanged != null) ? OnOnFrequencyChanged : OnFrequencyChanged;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pInfo>(0), data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pGroup>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnFrequencyChanged;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onFrequencyChanged(android.net.wifi.p2p.WifiP2pInfo,android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pInfo"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnFrequencyChangedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnFrequencyChanged(Android.Net.Wifi.P2p.WifiP2pInfo arg0, Android.Net.Wifi.P2p.WifiP2pGroup arg1)
            {
                hasOverrideOnFrequencyChanged = false;
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupCreated(android.net.wifi.p2p.WifiP2pInfo,android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pInfo"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnGroupCreatedDefault(Android.Net.Wifi.P2p.WifiP2pInfo arg0, Android.Net.Wifi.P2p.WifiP2pGroup arg1)
            {
                IExecuteWithSignature("onGroupCreatedDefault", "(Landroid/net/wifi/p2p/WifiP2pInfo;Landroid/net/wifi/p2p/WifiP2pGroup;)V", arg0, arg1);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupCreated(android.net.wifi.p2p.WifiP2pInfo,android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGroupCreated"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Net.Wifi.P2p.WifiP2pInfo, Android.Net.Wifi.P2p.WifiP2pGroup> OnOnGroupCreated { get; set; } = null;

            bool hasOverrideOnGroupCreated = true;
            void OnGroupCreatedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnGroupCreated = true;
                var methodToExecute = (OnOnGroupCreated != null) ? OnOnGroupCreated : OnGroupCreated;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pInfo>(0), data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pGroup>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnGroupCreated;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupCreated(android.net.wifi.p2p.WifiP2pInfo,android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pInfo"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnGroupCreatedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnGroupCreated(Android.Net.Wifi.P2p.WifiP2pInfo arg0, Android.Net.Wifi.P2p.WifiP2pGroup arg1)
            {
                hasOverrideOnGroupCreated = false;
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupCreating()"/>
            /// </summary>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnGroupCreatingDefault()
            {
                IExecuteWithSignature("onGroupCreatingDefault", "()V");
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupCreating()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGroupCreating"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnGroupCreating { get; set; } = null;

            bool hasOverrideOnGroupCreating = true;
            void OnGroupCreatingEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnGroupCreating = true;
                var methodToExecute = (OnOnGroupCreating != null) ? OnOnGroupCreating : OnGroupCreating;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnGroupCreating;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupCreating()"/>
            /// </summary>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnGroupCreatingDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnGroupCreating()
            {
                hasOverrideOnGroupCreating = false;
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupCreationFailed(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnGroupCreationFailedDefault(int arg0)
            {
                IExecuteWithSignature("onGroupCreationFailedDefault", "(I)V", arg0);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupCreationFailed(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGroupCreationFailed"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnGroupCreationFailed { get; set; } = null;

            bool hasOverrideOnGroupCreationFailed = true;
            void OnGroupCreationFailedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnGroupCreationFailed = true;
                var methodToExecute = (OnOnGroupCreationFailed != null) ? OnOnGroupCreationFailed : OnGroupCreationFailed;
                methodToExecute.Invoke(data.EventData.GetAt<int>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnGroupCreationFailed;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupCreationFailed(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnGroupCreationFailedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnGroupCreationFailed(int arg0)
            {
                hasOverrideOnGroupCreationFailed = false;
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupNegotiationRejectedByUser()"/>
            /// </summary>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnGroupNegotiationRejectedByUserDefault()
            {
                IExecuteWithSignature("onGroupNegotiationRejectedByUserDefault", "()V");
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupNegotiationRejectedByUser()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGroupNegotiationRejectedByUser"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnGroupNegotiationRejectedByUser { get; set; } = null;

            bool hasOverrideOnGroupNegotiationRejectedByUser = true;
            void OnGroupNegotiationRejectedByUserEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnGroupNegotiationRejectedByUser = true;
                var methodToExecute = (OnOnGroupNegotiationRejectedByUser != null) ? OnOnGroupNegotiationRejectedByUser : OnGroupNegotiationRejectedByUser;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnGroupNegotiationRejectedByUser;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupNegotiationRejectedByUser()"/>
            /// </summary>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnGroupNegotiationRejectedByUserDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnGroupNegotiationRejectedByUser()
            {
                hasOverrideOnGroupNegotiationRejectedByUser = false;
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupRemoved()"/>
            /// </summary>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnGroupRemovedDefault()
            {
                IExecuteWithSignature("onGroupRemovedDefault", "()V");
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupRemoved()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGroupRemoved"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnGroupRemoved { get; set; } = null;

            bool hasOverrideOnGroupRemoved = true;
            void OnGroupRemovedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnGroupRemoved = true;
                var methodToExecute = (OnOnGroupRemoved != null) ? OnOnGroupRemoved : OnGroupRemoved;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnGroupRemoved;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupRemoved()"/>
            /// </summary>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnGroupRemovedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnGroupRemoved()
            {
                hasOverrideOnGroupRemoved = false;
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onListenStateChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnListenStateChangedDefault(int arg0)
            {
                IExecuteWithSignature("onListenStateChangedDefault", "(I)V", arg0);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onListenStateChanged(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnListenStateChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnListenStateChanged { get; set; } = null;

            bool hasOverrideOnListenStateChanged = true;
            void OnListenStateChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnListenStateChanged = true;
                var methodToExecute = (OnOnListenStateChanged != null) ? OnOnListenStateChanged : OnListenStateChanged;
                methodToExecute.Invoke(data.EventData.GetAt<int>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnListenStateChanged;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onListenStateChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnListenStateChangedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnListenStateChanged(int arg0)
            {
                hasOverrideOnListenStateChanged = false;
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onP2pStateChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnP2pStateChangedDefault(int arg0)
            {
                IExecuteWithSignature("onP2pStateChangedDefault", "(I)V", arg0);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onP2pStateChanged(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnP2pStateChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnP2pStateChanged { get; set; } = null;

            bool hasOverrideOnP2pStateChanged = true;
            void OnP2pStateChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnP2pStateChanged = true;
                var methodToExecute = (OnOnP2pStateChanged != null) ? OnOnP2pStateChanged : OnP2pStateChanged;
                methodToExecute.Invoke(data.EventData.GetAt<int>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnP2pStateChanged;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onP2pStateChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnP2pStateChangedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnP2pStateChanged(int arg0)
            {
                hasOverrideOnP2pStateChanged = false;
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onPeerClientDisconnected(android.net.wifi.p2p.WifiP2pInfo,android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pInfo"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnPeerClientDisconnectedDefault(Android.Net.Wifi.P2p.WifiP2pInfo arg0, Android.Net.Wifi.P2p.WifiP2pGroup arg1)
            {
                IExecuteWithSignature("onPeerClientDisconnectedDefault", "(Landroid/net/wifi/p2p/WifiP2pInfo;Landroid/net/wifi/p2p/WifiP2pGroup;)V", arg0, arg1);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onPeerClientDisconnected(android.net.wifi.p2p.WifiP2pInfo,android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPeerClientDisconnected"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Net.Wifi.P2p.WifiP2pInfo, Android.Net.Wifi.P2p.WifiP2pGroup> OnOnPeerClientDisconnected { get; set; } = null;

            bool hasOverrideOnPeerClientDisconnected = true;
            void OnPeerClientDisconnectedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnPeerClientDisconnected = true;
                var methodToExecute = (OnOnPeerClientDisconnected != null) ? OnOnPeerClientDisconnected : OnPeerClientDisconnected;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pInfo>(0), data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pGroup>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnPeerClientDisconnected;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onPeerClientDisconnected(android.net.wifi.p2p.WifiP2pInfo,android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pInfo"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnPeerClientDisconnectedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnPeerClientDisconnected(Android.Net.Wifi.P2p.WifiP2pInfo arg0, Android.Net.Wifi.P2p.WifiP2pGroup arg1)
            {
                hasOverrideOnPeerClientDisconnected = false;
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onPeerClientJoined(android.net.wifi.p2p.WifiP2pInfo,android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pInfo"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnPeerClientJoinedDefault(Android.Net.Wifi.P2p.WifiP2pInfo arg0, Android.Net.Wifi.P2p.WifiP2pGroup arg1)
            {
                IExecuteWithSignature("onPeerClientJoinedDefault", "(Landroid/net/wifi/p2p/WifiP2pInfo;Landroid/net/wifi/p2p/WifiP2pGroup;)V", arg0, arg1);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onPeerClientJoined(android.net.wifi.p2p.WifiP2pInfo,android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPeerClientJoined"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Net.Wifi.P2p.WifiP2pInfo, Android.Net.Wifi.P2p.WifiP2pGroup> OnOnPeerClientJoined { get; set; } = null;

            bool hasOverrideOnPeerClientJoined = true;
            void OnPeerClientJoinedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnPeerClientJoined = true;
                var methodToExecute = (OnOnPeerClientJoined != null) ? OnOnPeerClientJoined : OnPeerClientJoined;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pInfo>(0), data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pGroup>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnPeerClientJoined;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onPeerClientJoined(android.net.wifi.p2p.WifiP2pInfo,android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pInfo"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnPeerClientJoinedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnPeerClientJoined(Android.Net.Wifi.P2p.WifiP2pInfo arg0, Android.Net.Wifi.P2p.WifiP2pGroup arg1)
            {
                hasOverrideOnPeerClientJoined = false;
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onPeerListChanged(android.net.wifi.p2p.WifiP2pDeviceList)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pDeviceList"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void OnPeerListChangedDefault(Android.Net.Wifi.P2p.WifiP2pDeviceList arg0)
            {
                IExecuteWithSignature("onPeerListChangedDefault", "(Landroid/net/wifi/p2p/WifiP2pDeviceList;)V", arg0);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onPeerListChanged(android.net.wifi.p2p.WifiP2pDeviceList)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPeerListChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Net.Wifi.P2p.WifiP2pDeviceList> OnOnPeerListChanged { get; set; } = null;

            bool hasOverrideOnPeerListChanged = true;
            void OnPeerListChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnPeerListChanged = true;
                var methodToExecute = (OnOnPeerListChanged != null) ? OnOnPeerListChanged : OnPeerListChanged;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Net.Wifi.P2p.WifiP2pDeviceList>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnPeerListChanged;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onPeerListChanged(android.net.wifi.p2p.WifiP2pDeviceList)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pDeviceList"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnPeerListChangedDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void OnPeerListChanged(Android.Net.Wifi.P2p.WifiP2pDeviceList arg0)
            {
                hasOverrideOnPeerListChanged = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region WifiP2pListenerDirect implementation
        public partial class WifiP2pListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onDeviceConfigurationChanged(android.net.wifi.p2p.WifiP2pDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></param>
            public override void OnDeviceConfigurationChanged(Android.Net.Wifi.P2p.WifiP2pDevice arg0)
            {
                IExecuteWithSignature("onDeviceConfigurationChanged", "(Landroid/net/wifi/p2p/WifiP2pDevice;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onDiscoveryStateChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnDiscoveryStateChanged(int arg0)
            {
                IExecuteWithSignature("onDiscoveryStateChanged", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onFrequencyChanged(android.net.wifi.p2p.WifiP2pInfo,android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pInfo"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
            public override void OnFrequencyChanged(Android.Net.Wifi.P2p.WifiP2pInfo arg0, Android.Net.Wifi.P2p.WifiP2pGroup arg1)
            {
                IExecuteWithSignature("onFrequencyChanged", "(Landroid/net/wifi/p2p/WifiP2pInfo;Landroid/net/wifi/p2p/WifiP2pGroup;)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupCreated(android.net.wifi.p2p.WifiP2pInfo,android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pInfo"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
            public override void OnGroupCreated(Android.Net.Wifi.P2p.WifiP2pInfo arg0, Android.Net.Wifi.P2p.WifiP2pGroup arg1)
            {
                IExecuteWithSignature("onGroupCreated", "(Landroid/net/wifi/p2p/WifiP2pInfo;Landroid/net/wifi/p2p/WifiP2pGroup;)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupCreating()"/>
            /// </summary>
            public override void OnGroupCreating()
            {
                IExecuteWithSignature("onGroupCreating", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupCreationFailed(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnGroupCreationFailed(int arg0)
            {
                IExecuteWithSignature("onGroupCreationFailed", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupNegotiationRejectedByUser()"/>
            /// </summary>
            public override void OnGroupNegotiationRejectedByUser()
            {
                IExecuteWithSignature("onGroupNegotiationRejectedByUser", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onGroupRemoved()"/>
            /// </summary>
            public override void OnGroupRemoved()
            {
                IExecuteWithSignature("onGroupRemoved", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onListenStateChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnListenStateChanged(int arg0)
            {
                IExecuteWithSignature("onListenStateChanged", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onP2pStateChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnP2pStateChanged(int arg0)
            {
                IExecuteWithSignature("onP2pStateChanged", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onPeerClientDisconnected(android.net.wifi.p2p.WifiP2pInfo,android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pInfo"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
            public override void OnPeerClientDisconnected(Android.Net.Wifi.P2p.WifiP2pInfo arg0, Android.Net.Wifi.P2p.WifiP2pGroup arg1)
            {
                IExecuteWithSignature("onPeerClientDisconnected", "(Landroid/net/wifi/p2p/WifiP2pInfo;Landroid/net/wifi/p2p/WifiP2pGroup;)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onPeerClientJoined(android.net.wifi.p2p.WifiP2pInfo,android.net.wifi.p2p.WifiP2pGroup)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pInfo"/></param>
            /// <param name="arg1"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
            public override void OnPeerClientJoined(Android.Net.Wifi.P2p.WifiP2pInfo arg0, Android.Net.Wifi.P2p.WifiP2pGroup arg1)
            {
                IExecuteWithSignature("onPeerClientJoined", "(Landroid/net/wifi/p2p/WifiP2pInfo;Landroid/net/wifi/p2p/WifiP2pGroup;)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.WifiP2pListener.html#onPeerListChanged(android.net.wifi.p2p.WifiP2pDeviceList)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pDeviceList"/></param>
            public override void OnPeerListChanged(Android.Net.Wifi.P2p.WifiP2pDeviceList arg0)
            {
                IExecuteWithSignature("onPeerListChanged", "(Landroid/net/wifi/p2p/WifiP2pDeviceList;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
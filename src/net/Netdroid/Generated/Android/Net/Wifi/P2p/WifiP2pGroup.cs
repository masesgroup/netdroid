/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi.P2p
{
    #region WifiP2pGroup declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html"/>
    /// </summary>
    public partial class WifiP2pGroup : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.net.wifi.p2p.WifiP2pGroup";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public WifiP2pGroup() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public WifiP2pGroup(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public WifiP2pGroup(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region WifiP2pGroup implementation
    public partial class WifiP2pGroup
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#%3Cinit%3E(android.net.wifi.p2p.WifiP2pGroup)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.P2p.WifiP2pGroup"/></param>
        public WifiP2pGroup(Android.Net.Wifi.P2p.WifiP2pGroup arg0)
            : base(arg0)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#NETWORK_ID_PERSISTENT"/>
        /// </summary>
        public static int NETWORK_ID_PERSISTENT { get { if (!_NETWORK_ID_PERSISTENTReady) { _NETWORK_ID_PERSISTENTContent = SGetField<int>(LocalBridgeClazz, "NETWORK_ID_PERSISTENT"); _NETWORK_ID_PERSISTENTReady = true; } return _NETWORK_ID_PERSISTENTContent; } }
        private static int _NETWORK_ID_PERSISTENTContent = default;
        private static bool _NETWORK_ID_PERSISTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#NETWORK_ID_TEMPORARY"/>
        /// </summary>
        public static int NETWORK_ID_TEMPORARY { get { if (!_NETWORK_ID_TEMPORARYReady) { _NETWORK_ID_TEMPORARYContent = SGetField<int>(LocalBridgeClazz, "NETWORK_ID_TEMPORARY"); _NETWORK_ID_TEMPORARYReady = true; } return _NETWORK_ID_TEMPORARYContent; } }
        private static int _NETWORK_ID_TEMPORARYContent = default;
        private static bool _NETWORK_ID_TEMPORARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#SECURITY_TYPE_UNKNOWN"/>
        /// </summary>
        public static int SECURITY_TYPE_UNKNOWN { get { if (!_SECURITY_TYPE_UNKNOWNReady) { _SECURITY_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_UNKNOWN"); _SECURITY_TYPE_UNKNOWNReady = true; } return _SECURITY_TYPE_UNKNOWNContent; } }
        private static int _SECURITY_TYPE_UNKNOWNContent = default;
        private static bool _SECURITY_TYPE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#SECURITY_TYPE_WPA2_PSK"/>
        /// </summary>
        public static int SECURITY_TYPE_WPA2_PSK { get { if (!_SECURITY_TYPE_WPA2_PSKReady) { _SECURITY_TYPE_WPA2_PSKContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_WPA2_PSK"); _SECURITY_TYPE_WPA2_PSKReady = true; } return _SECURITY_TYPE_WPA2_PSKContent; } }
        private static int _SECURITY_TYPE_WPA2_PSKContent = default;
        private static bool _SECURITY_TYPE_WPA2_PSKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#SECURITY_TYPE_WPA3_COMPATIBILITY"/>
        /// </summary>
        public static int SECURITY_TYPE_WPA3_COMPATIBILITY { get { if (!_SECURITY_TYPE_WPA3_COMPATIBILITYReady) { _SECURITY_TYPE_WPA3_COMPATIBILITYContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_WPA3_COMPATIBILITY"); _SECURITY_TYPE_WPA3_COMPATIBILITYReady = true; } return _SECURITY_TYPE_WPA3_COMPATIBILITYContent; } }
        private static int _SECURITY_TYPE_WPA3_COMPATIBILITYContent = default;
        private static bool _SECURITY_TYPE_WPA3_COMPATIBILITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#SECURITY_TYPE_WPA3_SAE"/>
        /// </summary>
        public static int SECURITY_TYPE_WPA3_SAE { get { if (!_SECURITY_TYPE_WPA3_SAEReady) { _SECURITY_TYPE_WPA3_SAEContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_WPA3_SAE"); _SECURITY_TYPE_WPA3_SAEReady = true; } return _SECURITY_TYPE_WPA3_SAEContent; } }
        private static int _SECURITY_TYPE_WPA3_SAEContent = default;
        private static bool _SECURITY_TYPE_WPA3_SAEReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#getGroupOwnerBssid()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.MacAddress"/></returns>
        public Android.Net.MacAddress GetGroupOwnerBssid()
        {
            return IExecuteWithSignature<Android.Net.MacAddress>("getGroupOwnerBssid", "()Landroid/net/MacAddress;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#getOwner()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Wifi.P2p.WifiP2pDevice"/></returns>
        public Android.Net.Wifi.P2p.WifiP2pDevice GetOwner()
        {
            return IExecuteWithSignature<Android.Net.Wifi.P2p.WifiP2pDevice>("getOwner", "()Landroid/net/wifi/p2p/WifiP2pDevice;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#isGroupOwner()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsGroupOwner()
        {
            return IExecuteWithSignature<bool>("isGroupOwner", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#getFrequency()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFrequency()
        {
            return IExecuteWithSignature<int>("getFrequency", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#getNetworkId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNetworkId()
        {
            return IExecuteWithSignature<int>("getNetworkId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#getSecurityType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSecurityType()
        {
            return IExecuteWithSignature<int>("getSecurityType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#getInterface()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetInterface()
        {
            return IExecuteWithSignature<Java.Lang.String>("getInterface", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#getNetworkName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetNetworkName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getNetworkName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#getPassphrase()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetPassphrase()
        {
            return IExecuteWithSignature<Java.Lang.String>("getPassphrase", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#getClientList()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Collection"/></returns>
        public Java.Util.Collection<Android.Net.Wifi.P2p.WifiP2pDevice> GetClientList()
        {
            return IExecuteWithSignature<Java.Util.Collection<Android.Net.Wifi.P2p.WifiP2pDevice>>("getClientList", "()Ljava/util/Collection;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pGroup.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
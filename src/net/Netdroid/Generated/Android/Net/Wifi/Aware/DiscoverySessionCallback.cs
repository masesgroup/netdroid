/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi.Aware
{
    #region DiscoverySessionCallback declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html"/>
    /// </summary>
    public partial class DiscoverySessionCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<DiscoverySessionCallback>
    {
        const string _bridgeClassName = "android.net.wifi.aware.DiscoverySessionCallback";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public DiscoverySessionCallback() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public DiscoverySessionCallback(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region DiscoverySessionCallback implementation
    public partial class DiscoverySessionCallback
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onBootstrappingFailed(android.net.wifi.aware.PeerHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Aware.PeerHandle"/></param>
        public void OnBootstrappingFailed(Android.Net.Wifi.Aware.PeerHandle arg0)
        {
            IExecuteWithSignature("onBootstrappingFailed", "(Landroid/net/wifi/aware/PeerHandle;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onBootstrappingSucceeded(android.net.wifi.aware.PeerHandle,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Aware.PeerHandle"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void OnBootstrappingSucceeded(Android.Net.Wifi.Aware.PeerHandle arg0, int arg1)
        {
            IExecute("onBootstrappingSucceeded", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onMessageReceived(android.net.wifi.aware.PeerHandle,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Aware.PeerHandle"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        public void OnMessageReceived(Android.Net.Wifi.Aware.PeerHandle arg0, byte[] arg1)
        {
            IExecute("onMessageReceived", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onMessageSendFailed(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OnMessageSendFailed(int arg0)
        {
            IExecuteWithSignature("onMessageSendFailed", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onMessageSendSucceeded(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OnMessageSendSucceeded(int arg0)
        {
            IExecuteWithSignature("onMessageSendSucceeded", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onPairingSetupFailed(android.net.wifi.aware.PeerHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Aware.PeerHandle"/></param>
        public void OnPairingSetupFailed(Android.Net.Wifi.Aware.PeerHandle arg0)
        {
            IExecuteWithSignature("onPairingSetupFailed", "(Landroid/net/wifi/aware/PeerHandle;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onPairingSetupRequestReceived(android.net.wifi.aware.PeerHandle,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Aware.PeerHandle"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void OnPairingSetupRequestReceived(Android.Net.Wifi.Aware.PeerHandle arg0, int arg1)
        {
            IExecute("onPairingSetupRequestReceived", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onPairingSetupSucceeded(android.net.wifi.aware.PeerHandle,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Aware.PeerHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void OnPairingSetupSucceeded(Android.Net.Wifi.Aware.PeerHandle arg0, Java.Lang.String arg1)
        {
            IExecute("onPairingSetupSucceeded", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onPairingVerificationFailed(android.net.wifi.aware.PeerHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Aware.PeerHandle"/></param>
        public void OnPairingVerificationFailed(Android.Net.Wifi.Aware.PeerHandle arg0)
        {
            IExecuteWithSignature("onPairingVerificationFailed", "(Landroid/net/wifi/aware/PeerHandle;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onPairingVerificationSucceed(android.net.wifi.aware.PeerHandle,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Aware.PeerHandle"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        public void OnPairingVerificationSucceed(Android.Net.Wifi.Aware.PeerHandle arg0, Java.Lang.String arg1)
        {
            IExecute("onPairingVerificationSucceed", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onPublishStarted(android.net.wifi.aware.PublishDiscoverySession)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Aware.PublishDiscoverySession"/></param>
        public void OnPublishStarted(Android.Net.Wifi.Aware.PublishDiscoverySession arg0)
        {
            IExecuteWithSignature("onPublishStarted", "(Landroid/net/wifi/aware/PublishDiscoverySession;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onServiceDiscovered(android.net.wifi.aware.PeerHandle,byte[],java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Aware.PeerHandle"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="Java.Util.List"/></param>
        public void OnServiceDiscovered(Android.Net.Wifi.Aware.PeerHandle arg0, byte[] arg1, Java.Util.List<byte[]> arg2)
        {
            IExecute("onServiceDiscovered", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onServiceDiscovered(android.net.wifi.aware.ServiceDiscoveryInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Aware.ServiceDiscoveryInfo"/></param>
        public void OnServiceDiscovered(Android.Net.Wifi.Aware.ServiceDiscoveryInfo arg0)
        {
            IExecuteWithSignature("onServiceDiscovered", "(Landroid/net/wifi/aware/ServiceDiscoveryInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onServiceDiscoveredWithinRange(android.net.wifi.aware.PeerHandle,byte[],java.util.List,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Aware.PeerHandle"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="Java.Util.List"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void OnServiceDiscoveredWithinRange(Android.Net.Wifi.Aware.PeerHandle arg0, byte[] arg1, Java.Util.List<byte[]> arg2, int arg3)
        {
            IExecute("onServiceDiscoveredWithinRange", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onServiceDiscoveredWithinRange(android.net.wifi.aware.ServiceDiscoveryInfo,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Aware.ServiceDiscoveryInfo"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void OnServiceDiscoveredWithinRange(Android.Net.Wifi.Aware.ServiceDiscoveryInfo arg0, int arg1)
        {
            IExecute("onServiceDiscoveredWithinRange", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onServiceLost(android.net.wifi.aware.PeerHandle,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Aware.PeerHandle"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void OnServiceLost(Android.Net.Wifi.Aware.PeerHandle arg0, int arg1)
        {
            IExecute("onServiceLost", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onSessionConfigFailed()"/>
        /// </summary>
        public void OnSessionConfigFailed()
        {
            IExecuteWithSignature("onSessionConfigFailed", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onSessionConfigUpdated()"/>
        /// </summary>
        public void OnSessionConfigUpdated()
        {
            IExecuteWithSignature("onSessionConfigUpdated", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onSessionTerminated()"/>
        /// </summary>
        public void OnSessionTerminated()
        {
            IExecuteWithSignature("onSessionTerminated", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onSubscribeStarted(android.net.wifi.aware.SubscribeDiscoverySession)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Aware.SubscribeDiscoverySession"/></param>
        public void OnSubscribeStarted(Android.Net.Wifi.Aware.SubscribeDiscoverySession arg0)
        {
            IExecuteWithSignature("onSubscribeStarted", "(Landroid/net/wifi/aware/SubscribeDiscoverySession;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi.Aware
{
    #region ServiceDiscoveryInfo
    public partial class ServiceDiscoveryInfo
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/ServiceDiscoveryInfo.html#getPairingConfig()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Wifi.Aware.AwarePairingConfig"/></returns>
        public Android.Net.Wifi.Aware.AwarePairingConfig GetPairingConfig()
        {
            return IExecuteWithSignature<Android.Net.Wifi.Aware.AwarePairingConfig>("getPairingConfig", "()Landroid/net/wifi/aware/AwarePairingConfig;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/ServiceDiscoveryInfo.html#getPeerHandle()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Wifi.Aware.PeerHandle"/></returns>
        public Android.Net.Wifi.Aware.PeerHandle GetPeerHandle()
        {
            return IExecuteWithSignature<Android.Net.Wifi.Aware.PeerHandle>("getPeerHandle", "()Landroid/net/wifi/aware/PeerHandle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/ServiceDiscoveryInfo.html#getScid()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        public byte[] GetScid()
        {
            return IExecuteWithSignatureArray<byte>("getScid", "()[B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/ServiceDiscoveryInfo.html#getServiceSpecificInfo()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        public byte[] GetServiceSpecificInfo()
        {
            return IExecuteWithSignatureArray<byte>("getServiceSpecificInfo", "()[B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/ServiceDiscoveryInfo.html#getPeerCipherSuite()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPeerCipherSuite()
        {
            return IExecuteWithSignature<int>("getPeerCipherSuite", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/ServiceDiscoveryInfo.html#getPairedAlias()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetPairedAlias()
        {
            return IExecuteWithSignature<Java.Lang.String>("getPairedAlias", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/ServiceDiscoveryInfo.html#getMatchFilters()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<byte[]> GetMatchFilters()
        {
            return IExecuteWithSignature<Java.Util.List<byte[]>>("getMatchFilters", "()Ljava/util/List;");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi.Aware
{
    #region Characteristics
    public partial class Characteristics
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#WIFI_AWARE_CIPHER_SUITE_NCS_PK_128"/>
        /// </summary>
        public static int WIFI_AWARE_CIPHER_SUITE_NCS_PK_128 { get { if (!_WIFI_AWARE_CIPHER_SUITE_NCS_PK_128Ready) { _WIFI_AWARE_CIPHER_SUITE_NCS_PK_128Content = SGetField<int>(LocalBridgeClazz, "WIFI_AWARE_CIPHER_SUITE_NCS_PK_128"); _WIFI_AWARE_CIPHER_SUITE_NCS_PK_128Ready = true; } return _WIFI_AWARE_CIPHER_SUITE_NCS_PK_128Content; } }
        private static int _WIFI_AWARE_CIPHER_SUITE_NCS_PK_128Content = default;
        private static bool _WIFI_AWARE_CIPHER_SUITE_NCS_PK_128Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#WIFI_AWARE_CIPHER_SUITE_NCS_PK_256"/>
        /// </summary>
        public static int WIFI_AWARE_CIPHER_SUITE_NCS_PK_256 { get { if (!_WIFI_AWARE_CIPHER_SUITE_NCS_PK_256Ready) { _WIFI_AWARE_CIPHER_SUITE_NCS_PK_256Content = SGetField<int>(LocalBridgeClazz, "WIFI_AWARE_CIPHER_SUITE_NCS_PK_256"); _WIFI_AWARE_CIPHER_SUITE_NCS_PK_256Ready = true; } return _WIFI_AWARE_CIPHER_SUITE_NCS_PK_256Content; } }
        private static int _WIFI_AWARE_CIPHER_SUITE_NCS_PK_256Content = default;
        private static bool _WIFI_AWARE_CIPHER_SUITE_NCS_PK_256Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_128"/>
        /// </summary>
        public static int WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_128 { get { if (!_WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_128Ready) { _WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_128Content = SGetField<int>(LocalBridgeClazz, "WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_128"); _WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_128Ready = true; } return _WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_128Content; } }
        private static int _WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_128Content = default;
        private static bool _WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_128Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_256"/>
        /// </summary>
        public static int WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_256 { get { if (!_WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_256Ready) { _WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_256Content = SGetField<int>(LocalBridgeClazz, "WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_256"); _WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_256Ready = true; } return _WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_256Content; } }
        private static int _WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_256Content = default;
        private static bool _WIFI_AWARE_CIPHER_SUITE_NCS_PK_PASN_256Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#WIFI_AWARE_CIPHER_SUITE_NCS_SK_128"/>
        /// </summary>
        public static int WIFI_AWARE_CIPHER_SUITE_NCS_SK_128 { get { if (!_WIFI_AWARE_CIPHER_SUITE_NCS_SK_128Ready) { _WIFI_AWARE_CIPHER_SUITE_NCS_SK_128Content = SGetField<int>(LocalBridgeClazz, "WIFI_AWARE_CIPHER_SUITE_NCS_SK_128"); _WIFI_AWARE_CIPHER_SUITE_NCS_SK_128Ready = true; } return _WIFI_AWARE_CIPHER_SUITE_NCS_SK_128Content; } }
        private static int _WIFI_AWARE_CIPHER_SUITE_NCS_SK_128Content = default;
        private static bool _WIFI_AWARE_CIPHER_SUITE_NCS_SK_128Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#WIFI_AWARE_CIPHER_SUITE_NCS_SK_256"/>
        /// </summary>
        public static int WIFI_AWARE_CIPHER_SUITE_NCS_SK_256 { get { if (!_WIFI_AWARE_CIPHER_SUITE_NCS_SK_256Ready) { _WIFI_AWARE_CIPHER_SUITE_NCS_SK_256Content = SGetField<int>(LocalBridgeClazz, "WIFI_AWARE_CIPHER_SUITE_NCS_SK_256"); _WIFI_AWARE_CIPHER_SUITE_NCS_SK_256Ready = true; } return _WIFI_AWARE_CIPHER_SUITE_NCS_SK_256Content; } }
        private static int _WIFI_AWARE_CIPHER_SUITE_NCS_SK_256Content = default;
        private static bool _WIFI_AWARE_CIPHER_SUITE_NCS_SK_256Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#WIFI_AWARE_CIPHER_SUITE_NONE"/>
        /// </summary>
        public static int WIFI_AWARE_CIPHER_SUITE_NONE { get { if (!_WIFI_AWARE_CIPHER_SUITE_NONEReady) { _WIFI_AWARE_CIPHER_SUITE_NONEContent = SGetField<int>(LocalBridgeClazz, "WIFI_AWARE_CIPHER_SUITE_NONE"); _WIFI_AWARE_CIPHER_SUITE_NONEReady = true; } return _WIFI_AWARE_CIPHER_SUITE_NONEContent; } }
        private static int _WIFI_AWARE_CIPHER_SUITE_NONEContent = default;
        private static bool _WIFI_AWARE_CIPHER_SUITE_NONEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#isAwarePairingSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAwarePairingSupported()
        {
            return IExecuteWithSignature<bool>("isAwarePairingSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#isInstantCommunicationModeSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsInstantCommunicationModeSupported()
        {
            return IExecuteWithSignature<bool>("isInstantCommunicationModeSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#isSuspensionSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSuspensionSupported()
        {
            return IExecuteWithSignature<bool>("isSuspensionSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#getMaxMatchFilterLength()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxMatchFilterLength()
        {
            return IExecuteWithSignature<int>("getMaxMatchFilterLength", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#getMaxServiceNameLength()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxServiceNameLength()
        {
            return IExecuteWithSignature<int>("getMaxServiceNameLength", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#getMaxServiceSpecificInfoLength()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxServiceSpecificInfoLength()
        {
            return IExecuteWithSignature<int>("getMaxServiceSpecificInfoLength", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#getNumberOfSupportedDataInterfaces()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNumberOfSupportedDataInterfaces()
        {
            return IExecuteWithSignature<int>("getNumberOfSupportedDataInterfaces", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#getNumberOfSupportedDataPaths()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNumberOfSupportedDataPaths()
        {
            return IExecuteWithSignature<int>("getNumberOfSupportedDataPaths", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#getNumberOfSupportedPublishSessions()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNumberOfSupportedPublishSessions()
        {
            return IExecuteWithSignature<int>("getNumberOfSupportedPublishSessions", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#getNumberOfSupportedSubscribeSessions()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNumberOfSupportedSubscribeSessions()
        {
            return IExecuteWithSignature<int>("getNumberOfSupportedSubscribeSessions", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#getSupportedCipherSuites()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSupportedCipherSuites()
        {
            return IExecuteWithSignature<int>("getSupportedCipherSuites", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#getSupportedPairingCipherSuites()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSupportedPairingCipherSuites()
        {
            return IExecuteWithSignature<int>("getSupportedPairingCipherSuites", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/aware/Characteristics.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
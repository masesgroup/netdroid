/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi
{
    #region WpsInfo declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/wifi/WpsInfo.html"/>
    /// </summary>
    public partial class WpsInfo : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.net.wifi.WpsInfo";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public WpsInfo() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public WpsInfo(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region WpsInfo implementation
    public partial class WpsInfo
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WpsInfo.html#%3Cinit%3E(android.net.wifi.WpsInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.WpsInfo"/></param>
        public WpsInfo(Android.Net.Wifi.WpsInfo arg0)
            : base(arg0)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WpsInfo.html#setup"/>
        /// </summary>
        public int setup { get { return IGetField<int>("setup"); } set { ISetField("setup", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WpsInfo.html#BSSID"/>
        /// </summary>
        public Java.Lang.String BSSID { get { return IGetField<Java.Lang.String>("BSSID"); } set { ISetField("BSSID", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WpsInfo.html#pin"/>
        /// </summary>
        public Java.Lang.String pin { get { return IGetField<Java.Lang.String>("pin"); } set { ISetField("pin", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WpsInfo.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WpsInfo.html#DISPLAY"/>
        /// </summary>
        public static int DISPLAY { get { if (!_DISPLAYReady) { _DISPLAYContent = SGetField<int>(LocalBridgeClazz, "DISPLAY"); _DISPLAYReady = true; } return _DISPLAYContent; } }
        private static int _DISPLAYContent = default;
        private static bool _DISPLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WpsInfo.html#INVALID"/>
        /// </summary>
        public static int INVALID { get { if (!_INVALIDReady) { _INVALIDContent = SGetField<int>(LocalBridgeClazz, "INVALID"); _INVALIDReady = true; } return _INVALIDContent; } }
        private static int _INVALIDContent = default;
        private static bool _INVALIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WpsInfo.html#KEYPAD"/>
        /// </summary>
        public static int KEYPAD { get { if (!_KEYPADReady) { _KEYPADContent = SGetField<int>(LocalBridgeClazz, "KEYPAD"); _KEYPADReady = true; } return _KEYPADContent; } }
        private static int _KEYPADContent = default;
        private static bool _KEYPADReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WpsInfo.html#LABEL"/>
        /// </summary>
        public static int LABEL { get { if (!_LABELReady) { _LABELContent = SGetField<int>(LocalBridgeClazz, "LABEL"); _LABELReady = true; } return _LABELContent; } }
        private static int _LABELContent = default;
        private static bool _LABELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WpsInfo.html#PBC"/>
        /// </summary>
        public static int PBC { get { if (!_PBCReady) { _PBCContent = SGetField<int>(LocalBridgeClazz, "PBC"); _PBCReady = true; } return _PBCContent; } }
        private static int _PBCContent = default;
        private static bool _PBCReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WpsInfo.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WpsInfo.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
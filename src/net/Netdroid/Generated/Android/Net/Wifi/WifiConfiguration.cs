/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi
{
    #region WifiConfiguration declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html"/>
    /// </summary>
    [global::System.Obsolete()]
    public partial class WifiConfiguration : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.net.wifi.WifiConfiguration";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public WifiConfiguration() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public WifiConfiguration(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region AuthAlgorithm declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.AuthAlgorithm.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class AuthAlgorithm : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AuthAlgorithm>
        {
            const string _bridgeClassName = "android.net.wifi.WifiConfiguration$AuthAlgorithm";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public AuthAlgorithm() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public AuthAlgorithm(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region GroupCipher declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.GroupCipher.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class GroupCipher : MASES.JCOBridge.C2JBridge.JVMBridgeBase<GroupCipher>
        {
            const string _bridgeClassName = "android.net.wifi.WifiConfiguration$GroupCipher";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public GroupCipher() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public GroupCipher(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region GroupMgmtCipher declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.GroupMgmtCipher.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class GroupMgmtCipher : MASES.JCOBridge.C2JBridge.JVMBridgeBase<GroupMgmtCipher>
        {
            const string _bridgeClassName = "android.net.wifi.WifiConfiguration$GroupMgmtCipher";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public GroupMgmtCipher() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public GroupMgmtCipher(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region KeyMgmt declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class KeyMgmt : MASES.JCOBridge.C2JBridge.JVMBridgeBase<KeyMgmt>
        {
            const string _bridgeClassName = "android.net.wifi.WifiConfiguration$KeyMgmt";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public KeyMgmt() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public KeyMgmt(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region PairwiseCipher declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.PairwiseCipher.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class PairwiseCipher : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PairwiseCipher>
        {
            const string _bridgeClassName = "android.net.wifi.WifiConfiguration$PairwiseCipher";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public PairwiseCipher() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public PairwiseCipher(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Protocol declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.Protocol.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class Protocol : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Protocol>
        {
            const string _bridgeClassName = "android.net.wifi.WifiConfiguration$Protocol";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Protocol() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Protocol(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region Status declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.Status.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class Status : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Status>
        {
            const string _bridgeClassName = "android.net.wifi.WifiConfiguration$Status";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Status() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Status(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region WifiConfiguration implementation
    public partial class WifiConfiguration
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#%3Cinit%3E(android.net.wifi.WifiConfiguration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.WifiConfiguration"/></param>
        [global::System.Obsolete()]
        public WifiConfiguration(Android.Net.Wifi.WifiConfiguration arg0)
            : base(arg0)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#enterpriseConfig"/>
        /// </summary>
        [global::System.Obsolete()]
        public Android.Net.Wifi.WifiEnterpriseConfig enterpriseConfig { get { return IGetField<Android.Net.Wifi.WifiEnterpriseConfig>("enterpriseConfig"); } set { ISetField("enterpriseConfig", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#hiddenSSID"/>
        /// </summary>
        [global::System.Obsolete()]
        public bool hiddenSSID { get { return IGetField<bool>("hiddenSSID"); } set { ISetField("hiddenSSID", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#isHomeProviderNetwork"/>
        /// </summary>
        [global::System.Obsolete()]
        public bool isHomeProviderNetwork { get { return IGetField<bool>("isHomeProviderNetwork"); } set { ISetField("isHomeProviderNetwork", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#networkId"/>
        /// </summary>
        [global::System.Obsolete()]
        public int networkId { get { return IGetField<int>("networkId"); } set { ISetField("networkId", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#priority"/>
        /// </summary>
        [global::System.Obsolete()]
        public int priority { get { return IGetField<int>("priority"); } set { ISetField("priority", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#status"/>
        /// </summary>
        [global::System.Obsolete()]
        public int status { get { return IGetField<int>("status"); } set { ISetField("status", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#wepTxKeyIndex"/>
        /// </summary>
        [global::System.Obsolete()]
        public int wepTxKeyIndex { get { return IGetField<int>("wepTxKeyIndex"); } set { ISetField("wepTxKeyIndex", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#BSSID"/>
        /// </summary>
        [global::System.Obsolete()]
        public Java.Lang.String BSSID { get { return IGetField<Java.Lang.String>("BSSID"); } set { ISetField("BSSID", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#FQDN"/>
        /// </summary>
        [global::System.Obsolete()]
        public Java.Lang.String FQDN { get { return IGetField<Java.Lang.String>("FQDN"); } set { ISetField("FQDN", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#preSharedKey"/>
        /// </summary>
        [global::System.Obsolete()]
        public Java.Lang.String preSharedKey { get { return IGetField<Java.Lang.String>("preSharedKey"); } set { ISetField("preSharedKey", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#providerFriendlyName"/>
        /// </summary>
        [global::System.Obsolete()]
        public Java.Lang.String providerFriendlyName { get { return IGetField<Java.Lang.String>("providerFriendlyName"); } set { ISetField("providerFriendlyName", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#SSID"/>
        /// </summary>
        [global::System.Obsolete()]
        public Java.Lang.String SSID { get { return IGetField<Java.Lang.String>("SSID"); } set { ISetField("SSID", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#wepKeys"/>
        /// </summary>
        [global::System.Obsolete()]
        public Java.Lang.String[] wepKeys { get { return IGetFieldArray<Java.Lang.String>("wepKeys"); } set { ISetField("wepKeys", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedAuthAlgorithms"/>
        /// </summary>
        [global::System.Obsolete()]
        public Java.Util.BitSet allowedAuthAlgorithms { get { return IGetField<Java.Util.BitSet>("allowedAuthAlgorithms"); } set { ISetField("allowedAuthAlgorithms", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedGroupCiphers"/>
        /// </summary>
        [global::System.Obsolete()]
        public Java.Util.BitSet allowedGroupCiphers { get { return IGetField<Java.Util.BitSet>("allowedGroupCiphers"); } set { ISetField("allowedGroupCiphers", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedGroupManagementCiphers"/>
        /// </summary>
        [global::System.Obsolete()]
        public Java.Util.BitSet allowedGroupManagementCiphers { get { return IGetField<Java.Util.BitSet>("allowedGroupManagementCiphers"); } set { ISetField("allowedGroupManagementCiphers", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedKeyManagement"/>
        /// </summary>
        [global::System.Obsolete()]
        public Java.Util.BitSet allowedKeyManagement { get { return IGetField<Java.Util.BitSet>("allowedKeyManagement"); } set { ISetField("allowedKeyManagement", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedPairwiseCiphers"/>
        /// </summary>
        [global::System.Obsolete()]
        public Java.Util.BitSet allowedPairwiseCiphers { get { return IGetField<Java.Util.BitSet>("allowedPairwiseCiphers"); } set { ISetField("allowedPairwiseCiphers", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedProtocols"/>
        /// </summary>
        [global::System.Obsolete()]
        public Java.Util.BitSet allowedProtocols { get { return IGetField<Java.Util.BitSet>("allowedProtocols"); } set { ISetField("allowedProtocols", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedSuiteBCiphers"/>
        /// </summary>
        [global::System.Obsolete()]
        public Java.Util.BitSet allowedSuiteBCiphers { get { return IGetField<Java.Util.BitSet>("allowedSuiteBCiphers"); } set { ISetField("allowedSuiteBCiphers", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#roamingConsortiumIds"/>
        /// </summary>
        [global::System.Obsolete()]
        public long[] roamingConsortiumIds { get { return IGetFieldArray<long>("roamingConsortiumIds"); } set { ISetField("roamingConsortiumIds", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#RANDOMIZATION_AUTO"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int RANDOMIZATION_AUTO { get { if (!_RANDOMIZATION_AUTOReady) { _RANDOMIZATION_AUTOContent = SGetField<int>(LocalBridgeClazz, "RANDOMIZATION_AUTO"); _RANDOMIZATION_AUTOReady = true; } return _RANDOMIZATION_AUTOContent; } }
        private static int _RANDOMIZATION_AUTOContent = default;
        private static bool _RANDOMIZATION_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#RANDOMIZATION_NON_PERSISTENT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int RANDOMIZATION_NON_PERSISTENT { get { if (!_RANDOMIZATION_NON_PERSISTENTReady) { _RANDOMIZATION_NON_PERSISTENTContent = SGetField<int>(LocalBridgeClazz, "RANDOMIZATION_NON_PERSISTENT"); _RANDOMIZATION_NON_PERSISTENTReady = true; } return _RANDOMIZATION_NON_PERSISTENTContent; } }
        private static int _RANDOMIZATION_NON_PERSISTENTContent = default;
        private static bool _RANDOMIZATION_NON_PERSISTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#RANDOMIZATION_NONE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int RANDOMIZATION_NONE { get { if (!_RANDOMIZATION_NONEReady) { _RANDOMIZATION_NONEContent = SGetField<int>(LocalBridgeClazz, "RANDOMIZATION_NONE"); _RANDOMIZATION_NONEReady = true; } return _RANDOMIZATION_NONEContent; } }
        private static int _RANDOMIZATION_NONEContent = default;
        private static bool _RANDOMIZATION_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#RANDOMIZATION_PERSISTENT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int RANDOMIZATION_PERSISTENT { get { if (!_RANDOMIZATION_PERSISTENTReady) { _RANDOMIZATION_PERSISTENTContent = SGetField<int>(LocalBridgeClazz, "RANDOMIZATION_PERSISTENT"); _RANDOMIZATION_PERSISTENTReady = true; } return _RANDOMIZATION_PERSISTENTContent; } }
        private static int _RANDOMIZATION_PERSISTENTContent = default;
        private static bool _RANDOMIZATION_PERSISTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#SECURITY_TYPE_DPP"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SECURITY_TYPE_DPP { get { if (!_SECURITY_TYPE_DPPReady) { _SECURITY_TYPE_DPPContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_DPP"); _SECURITY_TYPE_DPPReady = true; } return _SECURITY_TYPE_DPPContent; } }
        private static int _SECURITY_TYPE_DPPContent = default;
        private static bool _SECURITY_TYPE_DPPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#SECURITY_TYPE_EAP"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SECURITY_TYPE_EAP { get { if (!_SECURITY_TYPE_EAPReady) { _SECURITY_TYPE_EAPContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_EAP"); _SECURITY_TYPE_EAPReady = true; } return _SECURITY_TYPE_EAPContent; } }
        private static int _SECURITY_TYPE_EAPContent = default;
        private static bool _SECURITY_TYPE_EAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#SECURITY_TYPE_EAP_SUITE_B"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SECURITY_TYPE_EAP_SUITE_B { get { if (!_SECURITY_TYPE_EAP_SUITE_BReady) { _SECURITY_TYPE_EAP_SUITE_BContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_EAP_SUITE_B"); _SECURITY_TYPE_EAP_SUITE_BReady = true; } return _SECURITY_TYPE_EAP_SUITE_BContent; } }
        private static int _SECURITY_TYPE_EAP_SUITE_BContent = default;
        private static bool _SECURITY_TYPE_EAP_SUITE_BReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#SECURITY_TYPE_EAP_WPA3_ENTERPRISE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SECURITY_TYPE_EAP_WPA3_ENTERPRISE { get { if (!_SECURITY_TYPE_EAP_WPA3_ENTERPRISEReady) { _SECURITY_TYPE_EAP_WPA3_ENTERPRISEContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_EAP_WPA3_ENTERPRISE"); _SECURITY_TYPE_EAP_WPA3_ENTERPRISEReady = true; } return _SECURITY_TYPE_EAP_WPA3_ENTERPRISEContent; } }
        private static int _SECURITY_TYPE_EAP_WPA3_ENTERPRISEContent = default;
        private static bool _SECURITY_TYPE_EAP_WPA3_ENTERPRISEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT { get { if (!_SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BITReady) { _SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BITContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT"); _SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BITReady = true; } return _SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BITContent; } }
        private static int _SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BITContent = default;
        private static bool _SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#SECURITY_TYPE_OPEN"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SECURITY_TYPE_OPEN { get { if (!_SECURITY_TYPE_OPENReady) { _SECURITY_TYPE_OPENContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_OPEN"); _SECURITY_TYPE_OPENReady = true; } return _SECURITY_TYPE_OPENContent; } }
        private static int _SECURITY_TYPE_OPENContent = default;
        private static bool _SECURITY_TYPE_OPENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#SECURITY_TYPE_OWE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SECURITY_TYPE_OWE { get { if (!_SECURITY_TYPE_OWEReady) { _SECURITY_TYPE_OWEContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_OWE"); _SECURITY_TYPE_OWEReady = true; } return _SECURITY_TYPE_OWEContent; } }
        private static int _SECURITY_TYPE_OWEContent = default;
        private static bool _SECURITY_TYPE_OWEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#SECURITY_TYPE_PSK"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SECURITY_TYPE_PSK { get { if (!_SECURITY_TYPE_PSKReady) { _SECURITY_TYPE_PSKContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_PSK"); _SECURITY_TYPE_PSKReady = true; } return _SECURITY_TYPE_PSKContent; } }
        private static int _SECURITY_TYPE_PSKContent = default;
        private static bool _SECURITY_TYPE_PSKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#SECURITY_TYPE_SAE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SECURITY_TYPE_SAE { get { if (!_SECURITY_TYPE_SAEReady) { _SECURITY_TYPE_SAEContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_SAE"); _SECURITY_TYPE_SAEReady = true; } return _SECURITY_TYPE_SAEContent; } }
        private static int _SECURITY_TYPE_SAEContent = default;
        private static bool _SECURITY_TYPE_SAEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#SECURITY_TYPE_WAPI_CERT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SECURITY_TYPE_WAPI_CERT { get { if (!_SECURITY_TYPE_WAPI_CERTReady) { _SECURITY_TYPE_WAPI_CERTContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_WAPI_CERT"); _SECURITY_TYPE_WAPI_CERTReady = true; } return _SECURITY_TYPE_WAPI_CERTContent; } }
        private static int _SECURITY_TYPE_WAPI_CERTContent = default;
        private static bool _SECURITY_TYPE_WAPI_CERTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#SECURITY_TYPE_WAPI_PSK"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SECURITY_TYPE_WAPI_PSK { get { if (!_SECURITY_TYPE_WAPI_PSKReady) { _SECURITY_TYPE_WAPI_PSKContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_WAPI_PSK"); _SECURITY_TYPE_WAPI_PSKReady = true; } return _SECURITY_TYPE_WAPI_PSKContent; } }
        private static int _SECURITY_TYPE_WAPI_PSKContent = default;
        private static bool _SECURITY_TYPE_WAPI_PSKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#SECURITY_TYPE_WEP"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SECURITY_TYPE_WEP { get { if (!_SECURITY_TYPE_WEPReady) { _SECURITY_TYPE_WEPContent = SGetField<int>(LocalBridgeClazz, "SECURITY_TYPE_WEP"); _SECURITY_TYPE_WEPReady = true; } return _SECURITY_TYPE_WEPContent; } }
        private static int _SECURITY_TYPE_WEPContent = default;
        private static bool _SECURITY_TYPE_WEPReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#getRandomizedMacAddress()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.MacAddress"/></returns>
        [global::System.Obsolete()]
        public Android.Net.MacAddress GetRandomizedMacAddress()
        {
            return IExecuteWithSignature<Android.Net.MacAddress>("getRandomizedMacAddress", "()Landroid/net/MacAddress;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#getHttpProxy()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.ProxyInfo"/></returns>
        [global::System.Obsolete()]
        public Android.Net.ProxyInfo GetHttpProxy()
        {
            return IExecuteWithSignature<Android.Net.ProxyInfo>("getHttpProxy", "()Landroid/net/ProxyInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#isDppConfigurator()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsDppConfigurator()
        {
            return IExecuteWithSignature<bool>("isDppConfigurator", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#isPasspoint()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsPasspoint()
        {
            return IExecuteWithSignature<bool>("isPasspoint", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#getMacRandomizationSetting()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetMacRandomizationSetting()
        {
            return IExecuteWithSignature<int>("getMacRandomizationSetting", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#getKey()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.String GetKey()
        {
            return IExecuteWithSignature<Java.Lang.String>("getKey", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#setHttpProxy(android.net.ProxyInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.ProxyInfo"/></param>
        [global::System.Obsolete()]
        public void SetHttpProxy(Android.Net.ProxyInfo arg0)
        {
            IExecuteWithSignature("setHttpProxy", "(Landroid/net/ProxyInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#setIpConfiguration(android.net.IpConfiguration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.IpConfiguration"/></param>
        [global::System.Obsolete()]
        public void SetIpConfiguration(Android.Net.IpConfiguration arg0)
        {
            IExecuteWithSignature("setIpConfiguration", "(Landroid/net/IpConfiguration;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#setMacRandomizationSetting(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetMacRandomizationSetting(int arg0)
        {
            IExecuteWithSignature("setMacRandomizationSetting", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#setSecurityParams(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetSecurityParams(int arg0)
        {
            IExecuteWithSignature("setSecurityParams", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region AuthAlgorithm implementation
        public partial class AuthAlgorithm
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.AuthAlgorithm.html#LEAP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int LEAP { get { if (!_LEAPReady) { _LEAPContent = SGetField<int>(LocalBridgeClazz, "LEAP"); _LEAPReady = true; } return _LEAPContent; } }
            private static int _LEAPContent = default;
            private static bool _LEAPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.AuthAlgorithm.html#OPEN"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int OPEN { get { if (!_OPENReady) { _OPENContent = SGetField<int>(LocalBridgeClazz, "OPEN"); _OPENReady = true; } return _OPENContent; } }
            private static int _OPENContent = default;
            private static bool _OPENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.AuthAlgorithm.html#SAE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SAE { get { if (!_SAEReady) { _SAEContent = SGetField<int>(LocalBridgeClazz, "SAE"); _SAEReady = true; } return _SAEContent; } }
            private static int _SAEContent = default;
            private static bool _SAEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.AuthAlgorithm.html#SHARED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SHARED { get { if (!_SHAREDReady) { _SHAREDContent = SGetField<int>(LocalBridgeClazz, "SHARED"); _SHAREDReady = true; } return _SHAREDContent; } }
            private static int _SHAREDContent = default;
            private static bool _SHAREDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.AuthAlgorithm.html#varName"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String varName { get { if (!_varNameReady) { _varNameContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "varName"); _varNameReady = true; } return _varNameContent; } }
            private static Java.Lang.String _varNameContent = default;
            private static bool _varNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.AuthAlgorithm.html#strings"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String[] strings { get { if (!_stringsReady) { _stringsContent = SGetFieldArray<Java.Lang.String>(LocalBridgeClazz, "strings"); _stringsReady = true; } return _stringsContent; } }
            private static Java.Lang.String[] _stringsContent = default;
            private static bool _stringsReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region GroupCipher implementation
        public partial class GroupCipher
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.GroupCipher.html#CCMP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int CCMP { get { if (!_CCMPReady) { _CCMPContent = SGetField<int>(LocalBridgeClazz, "CCMP"); _CCMPReady = true; } return _CCMPContent; } }
            private static int _CCMPContent = default;
            private static bool _CCMPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.GroupCipher.html#GCMP_128"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int GCMP_128 { get { if (!_GCMP_128Ready) { _GCMP_128Content = SGetField<int>(LocalBridgeClazz, "GCMP_128"); _GCMP_128Ready = true; } return _GCMP_128Content; } }
            private static int _GCMP_128Content = default;
            private static bool _GCMP_128Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.GroupCipher.html#GCMP_256"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int GCMP_256 { get { if (!_GCMP_256Ready) { _GCMP_256Content = SGetField<int>(LocalBridgeClazz, "GCMP_256"); _GCMP_256Ready = true; } return _GCMP_256Content; } }
            private static int _GCMP_256Content = default;
            private static bool _GCMP_256Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.GroupCipher.html#SMS4"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SMS4 { get { if (!_SMS4Ready) { _SMS4Content = SGetField<int>(LocalBridgeClazz, "SMS4"); _SMS4Ready = true; } return _SMS4Content; } }
            private static int _SMS4Content = default;
            private static bool _SMS4Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.GroupCipher.html#TKIP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int TKIP { get { if (!_TKIPReady) { _TKIPContent = SGetField<int>(LocalBridgeClazz, "TKIP"); _TKIPReady = true; } return _TKIPContent; } }
            private static int _TKIPContent = default;
            private static bool _TKIPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.GroupCipher.html#WEP104"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WEP104 { get { if (!_WEP104Ready) { _WEP104Content = SGetField<int>(LocalBridgeClazz, "WEP104"); _WEP104Ready = true; } return _WEP104Content; } }
            private static int _WEP104Content = default;
            private static bool _WEP104Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.GroupCipher.html#WEP40"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WEP40 { get { if (!_WEP40Ready) { _WEP40Content = SGetField<int>(LocalBridgeClazz, "WEP40"); _WEP40Ready = true; } return _WEP40Content; } }
            private static int _WEP40Content = default;
            private static bool _WEP40Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.GroupCipher.html#varName"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String varName { get { if (!_varNameReady) { _varNameContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "varName"); _varNameReady = true; } return _varNameContent; } }
            private static Java.Lang.String _varNameContent = default;
            private static bool _varNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.GroupCipher.html#strings"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String[] strings { get { if (!_stringsReady) { _stringsContent = SGetFieldArray<Java.Lang.String>(LocalBridgeClazz, "strings"); _stringsReady = true; } return _stringsContent; } }
            private static Java.Lang.String[] _stringsContent = default;
            private static bool _stringsReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region GroupMgmtCipher implementation
        public partial class GroupMgmtCipher
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.GroupMgmtCipher.html#BIP_CMAC_256"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int BIP_CMAC_256 { get { if (!_BIP_CMAC_256Ready) { _BIP_CMAC_256Content = SGetField<int>(LocalBridgeClazz, "BIP_CMAC_256"); _BIP_CMAC_256Ready = true; } return _BIP_CMAC_256Content; } }
            private static int _BIP_CMAC_256Content = default;
            private static bool _BIP_CMAC_256Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.GroupMgmtCipher.html#BIP_GMAC_128"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int BIP_GMAC_128 { get { if (!_BIP_GMAC_128Ready) { _BIP_GMAC_128Content = SGetField<int>(LocalBridgeClazz, "BIP_GMAC_128"); _BIP_GMAC_128Ready = true; } return _BIP_GMAC_128Content; } }
            private static int _BIP_GMAC_128Content = default;
            private static bool _BIP_GMAC_128Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.GroupMgmtCipher.html#BIP_GMAC_256"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int BIP_GMAC_256 { get { if (!_BIP_GMAC_256Ready) { _BIP_GMAC_256Content = SGetField<int>(LocalBridgeClazz, "BIP_GMAC_256"); _BIP_GMAC_256Ready = true; } return _BIP_GMAC_256Content; } }
            private static int _BIP_GMAC_256Content = default;
            private static bool _BIP_GMAC_256Ready = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region KeyMgmt implementation
        public partial class KeyMgmt
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#DPP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int DPP { get { if (!_DPPReady) { _DPPContent = SGetField<int>(LocalBridgeClazz, "DPP"); _DPPReady = true; } return _DPPContent; } }
            private static int _DPPContent = default;
            private static bool _DPPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#FILS_SHA256"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FILS_SHA256 { get { if (!_FILS_SHA256Ready) { _FILS_SHA256Content = SGetField<int>(LocalBridgeClazz, "FILS_SHA256"); _FILS_SHA256Ready = true; } return _FILS_SHA256Content; } }
            private static int _FILS_SHA256Content = default;
            private static bool _FILS_SHA256Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#FILS_SHA384"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FILS_SHA384 { get { if (!_FILS_SHA384Ready) { _FILS_SHA384Content = SGetField<int>(LocalBridgeClazz, "FILS_SHA384"); _FILS_SHA384Ready = true; } return _FILS_SHA384Content; } }
            private static int _FILS_SHA384Content = default;
            private static bool _FILS_SHA384Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#FT_EAP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FT_EAP { get { if (!_FT_EAPReady) { _FT_EAPContent = SGetField<int>(LocalBridgeClazz, "FT_EAP"); _FT_EAPReady = true; } return _FT_EAPContent; } }
            private static int _FT_EAPContent = default;
            private static bool _FT_EAPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#FT_PSK"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FT_PSK { get { if (!_FT_PSKReady) { _FT_PSKContent = SGetField<int>(LocalBridgeClazz, "FT_PSK"); _FT_PSKReady = true; } return _FT_PSKContent; } }
            private static int _FT_PSKContent = default;
            private static bool _FT_PSKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#IEEE8021X"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int IEEE8021X { get { if (!_IEEE8021XReady) { _IEEE8021XContent = SGetField<int>(LocalBridgeClazz, "IEEE8021X"); _IEEE8021XReady = true; } return _IEEE8021XContent; } }
            private static int _IEEE8021XContent = default;
            private static bool _IEEE8021XReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#NONE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int NONE { get { if (!_NONEReady) { _NONEContent = SGetField<int>(LocalBridgeClazz, "NONE"); _NONEReady = true; } return _NONEContent; } }
            private static int _NONEContent = default;
            private static bool _NONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#OSEN"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int OSEN { get { if (!_OSENReady) { _OSENContent = SGetField<int>(LocalBridgeClazz, "OSEN"); _OSENReady = true; } return _OSENContent; } }
            private static int _OSENContent = default;
            private static bool _OSENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#OWE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int OWE { get { if (!_OWEReady) { _OWEContent = SGetField<int>(LocalBridgeClazz, "OWE"); _OWEReady = true; } return _OWEContent; } }
            private static int _OWEContent = default;
            private static bool _OWEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#SAE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SAE { get { if (!_SAEReady) { _SAEContent = SGetField<int>(LocalBridgeClazz, "SAE"); _SAEReady = true; } return _SAEContent; } }
            private static int _SAEContent = default;
            private static bool _SAEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#SUITE_B_192"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SUITE_B_192 { get { if (!_SUITE_B_192Ready) { _SUITE_B_192Content = SGetField<int>(LocalBridgeClazz, "SUITE_B_192"); _SUITE_B_192Ready = true; } return _SUITE_B_192Content; } }
            private static int _SUITE_B_192Content = default;
            private static bool _SUITE_B_192Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#WAPI_CERT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WAPI_CERT { get { if (!_WAPI_CERTReady) { _WAPI_CERTContent = SGetField<int>(LocalBridgeClazz, "WAPI_CERT"); _WAPI_CERTReady = true; } return _WAPI_CERTContent; } }
            private static int _WAPI_CERTContent = default;
            private static bool _WAPI_CERTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#WAPI_PSK"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WAPI_PSK { get { if (!_WAPI_PSKReady) { _WAPI_PSKContent = SGetField<int>(LocalBridgeClazz, "WAPI_PSK"); _WAPI_PSKReady = true; } return _WAPI_PSKContent; } }
            private static int _WAPI_PSKContent = default;
            private static bool _WAPI_PSKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#WPA_EAP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WPA_EAP { get { if (!_WPA_EAPReady) { _WPA_EAPContent = SGetField<int>(LocalBridgeClazz, "WPA_EAP"); _WPA_EAPReady = true; } return _WPA_EAPContent; } }
            private static int _WPA_EAPContent = default;
            private static bool _WPA_EAPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#WPA_EAP_SHA256"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WPA_EAP_SHA256 { get { if (!_WPA_EAP_SHA256Ready) { _WPA_EAP_SHA256Content = SGetField<int>(LocalBridgeClazz, "WPA_EAP_SHA256"); _WPA_EAP_SHA256Ready = true; } return _WPA_EAP_SHA256Content; } }
            private static int _WPA_EAP_SHA256Content = default;
            private static bool _WPA_EAP_SHA256Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#WPA_PSK"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WPA_PSK { get { if (!_WPA_PSKReady) { _WPA_PSKContent = SGetField<int>(LocalBridgeClazz, "WPA_PSK"); _WPA_PSKReady = true; } return _WPA_PSKContent; } }
            private static int _WPA_PSKContent = default;
            private static bool _WPA_PSKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#WPA_PSK_SHA256"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WPA_PSK_SHA256 { get { if (!_WPA_PSK_SHA256Ready) { _WPA_PSK_SHA256Content = SGetField<int>(LocalBridgeClazz, "WPA_PSK_SHA256"); _WPA_PSK_SHA256Ready = true; } return _WPA_PSK_SHA256Content; } }
            private static int _WPA_PSK_SHA256Content = default;
            private static bool _WPA_PSK_SHA256Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#WPA2_PSK"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WPA2_PSK { get { if (!_WPA2_PSKReady) { _WPA2_PSKContent = SGetField<int>(LocalBridgeClazz, "WPA2_PSK"); _WPA2_PSKReady = true; } return _WPA2_PSKContent; } }
            private static int _WPA2_PSKContent = default;
            private static bool _WPA2_PSKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#varName"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String varName { get { if (!_varNameReady) { _varNameContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "varName"); _varNameReady = true; } return _varNameContent; } }
            private static Java.Lang.String _varNameContent = default;
            private static bool _varNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.KeyMgmt.html#strings"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String[] strings { get { if (!_stringsReady) { _stringsContent = SGetFieldArray<Java.Lang.String>(LocalBridgeClazz, "strings"); _stringsReady = true; } return _stringsContent; } }
            private static Java.Lang.String[] _stringsContent = default;
            private static bool _stringsReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region PairwiseCipher implementation
        public partial class PairwiseCipher
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.PairwiseCipher.html#CCMP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int CCMP { get { if (!_CCMPReady) { _CCMPContent = SGetField<int>(LocalBridgeClazz, "CCMP"); _CCMPReady = true; } return _CCMPContent; } }
            private static int _CCMPContent = default;
            private static bool _CCMPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.PairwiseCipher.html#GCMP_128"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int GCMP_128 { get { if (!_GCMP_128Ready) { _GCMP_128Content = SGetField<int>(LocalBridgeClazz, "GCMP_128"); _GCMP_128Ready = true; } return _GCMP_128Content; } }
            private static int _GCMP_128Content = default;
            private static bool _GCMP_128Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.PairwiseCipher.html#GCMP_256"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int GCMP_256 { get { if (!_GCMP_256Ready) { _GCMP_256Content = SGetField<int>(LocalBridgeClazz, "GCMP_256"); _GCMP_256Ready = true; } return _GCMP_256Content; } }
            private static int _GCMP_256Content = default;
            private static bool _GCMP_256Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.PairwiseCipher.html#NONE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int NONE { get { if (!_NONEReady) { _NONEContent = SGetField<int>(LocalBridgeClazz, "NONE"); _NONEReady = true; } return _NONEContent; } }
            private static int _NONEContent = default;
            private static bool _NONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.PairwiseCipher.html#SMS4"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SMS4 { get { if (!_SMS4Ready) { _SMS4Content = SGetField<int>(LocalBridgeClazz, "SMS4"); _SMS4Ready = true; } return _SMS4Content; } }
            private static int _SMS4Content = default;
            private static bool _SMS4Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.PairwiseCipher.html#TKIP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int TKIP { get { if (!_TKIPReady) { _TKIPContent = SGetField<int>(LocalBridgeClazz, "TKIP"); _TKIPReady = true; } return _TKIPContent; } }
            private static int _TKIPContent = default;
            private static bool _TKIPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.PairwiseCipher.html#varName"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String varName { get { if (!_varNameReady) { _varNameContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "varName"); _varNameReady = true; } return _varNameContent; } }
            private static Java.Lang.String _varNameContent = default;
            private static bool _varNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.PairwiseCipher.html#strings"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String[] strings { get { if (!_stringsReady) { _stringsContent = SGetFieldArray<Java.Lang.String>(LocalBridgeClazz, "strings"); _stringsReady = true; } return _stringsContent; } }
            private static Java.Lang.String[] _stringsContent = default;
            private static bool _stringsReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Protocol implementation
        public partial class Protocol
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.Protocol.html#RSN"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int RSN { get { if (!_RSNReady) { _RSNContent = SGetField<int>(LocalBridgeClazz, "RSN"); _RSNReady = true; } return _RSNContent; } }
            private static int _RSNContent = default;
            private static bool _RSNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.Protocol.html#WAPI"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WAPI { get { if (!_WAPIReady) { _WAPIContent = SGetField<int>(LocalBridgeClazz, "WAPI"); _WAPIReady = true; } return _WAPIContent; } }
            private static int _WAPIContent = default;
            private static bool _WAPIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.Protocol.html#WPA"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WPA { get { if (!_WPAReady) { _WPAContent = SGetField<int>(LocalBridgeClazz, "WPA"); _WPAReady = true; } return _WPAContent; } }
            private static int _WPAContent = default;
            private static bool _WPAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.Protocol.html#varName"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String varName { get { if (!_varNameReady) { _varNameContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "varName"); _varNameReady = true; } return _varNameContent; } }
            private static Java.Lang.String _varNameContent = default;
            private static bool _varNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.Protocol.html#strings"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String[] strings { get { if (!_stringsReady) { _stringsContent = SGetFieldArray<Java.Lang.String>(LocalBridgeClazz, "strings"); _stringsReady = true; } return _stringsContent; } }
            private static Java.Lang.String[] _stringsContent = default;
            private static bool _stringsReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region Status implementation
        public partial class Status
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.Status.html#CURRENT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int CURRENT { get { if (!_CURRENTReady) { _CURRENTContent = SGetField<int>(LocalBridgeClazz, "CURRENT"); _CURRENTReady = true; } return _CURRENTContent; } }
            private static int _CURRENTContent = default;
            private static bool _CURRENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.Status.html#DISABLED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int DISABLED { get { if (!_DISABLEDReady) { _DISABLEDContent = SGetField<int>(LocalBridgeClazz, "DISABLED"); _DISABLEDReady = true; } return _DISABLEDContent; } }
            private static int _DISABLEDContent = default;
            private static bool _DISABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.Status.html#ENABLED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int ENABLED { get { if (!_ENABLEDReady) { _ENABLEDContent = SGetField<int>(LocalBridgeClazz, "ENABLED"); _ENABLEDReady = true; } return _ENABLEDContent; } }
            private static int _ENABLEDContent = default;
            private static bool _ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiConfiguration.Status.html#strings"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String[] strings { get { if (!_stringsReady) { _stringsContent = SGetFieldArray<Java.Lang.String>(LocalBridgeClazz, "strings"); _stringsReady = true; } return _stringsContent; } }
            private static Java.Lang.String[] _stringsContent = default;
            private static bool _stringsReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
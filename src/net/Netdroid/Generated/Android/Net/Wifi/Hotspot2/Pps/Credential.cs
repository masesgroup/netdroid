/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi.Hotspot2.Pps
{
    #region Credential
    public partial class Credential
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#%3Cinit%3E(android.net.wifi.hotspot2.pps.Credential)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Hotspot2.Pps.Credential"/></param>
        public Credential(Android.Net.Wifi.Hotspot2.Pps.Credential arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#getCertCredential()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Wifi.Hotspot2.Pps.Credential.CertificateCredential"/></returns>
        public Android.Net.Wifi.Hotspot2.Pps.Credential.CertificateCredential GetCertCredential()
        {
            return IExecuteWithSignature<Android.Net.Wifi.Hotspot2.Pps.Credential.CertificateCredential>("getCertCredential", "()Landroid/net/wifi/hotspot2/pps/Credential$CertificateCredential;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#getSimCredential()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Wifi.Hotspot2.Pps.Credential.SimCredential"/></returns>
        public Android.Net.Wifi.Hotspot2.Pps.Credential.SimCredential GetSimCredential()
        {
            return IExecuteWithSignature<Android.Net.Wifi.Hotspot2.Pps.Credential.SimCredential>("getSimCredential", "()Landroid/net/wifi/hotspot2/pps/Credential$SimCredential;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#getUserCredential()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Wifi.Hotspot2.Pps.Credential.UserCredential"/></returns>
        public Android.Net.Wifi.Hotspot2.Pps.Credential.UserCredential GetUserCredential()
        {
            return IExecuteWithSignature<Android.Net.Wifi.Hotspot2.Pps.Credential.UserCredential>("getUserCredential", "()Landroid/net/wifi/hotspot2/pps/Credential$UserCredential;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#getMinimumTlsVersion()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMinimumTlsVersion()
        {
            return IExecuteWithSignature<int>("getMinimumTlsVersion", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#getRealm()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetRealm()
        {
            return IExecuteWithSignature<Java.Lang.String>("getRealm", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#getCaCertificate()"/>
        /// </summary>
        /// <returns><see cref="Java.Security.Cert.X509Certificate"/></returns>
        public Java.Security.Cert.X509Certificate GetCaCertificate()
        {
            return IExecuteWithSignature<Java.Security.Cert.X509Certificate>("getCaCertificate", "()Ljava/security/cert/X509Certificate;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#getClientCertificateChain()"/>
        /// </summary>
        /// <returns><see cref="Java.Security.Cert.X509Certificate"/></returns>
        public Java.Security.Cert.X509Certificate[] GetClientCertificateChain()
        {
            return IExecuteWithSignatureArray<Java.Security.Cert.X509Certificate>("getClientCertificateChain", "()[Ljava/security/cert/X509Certificate;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#getClientPrivateKey()"/>
        /// </summary>
        /// <returns><see cref="Java.Security.PrivateKey"/></returns>
        public Java.Security.PrivateKey GetClientPrivateKey()
        {
            return IExecuteWithSignature<Java.Security.PrivateKey>("getClientPrivateKey", "()Ljava/security/PrivateKey;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#setCaCertificate(java.security.cert.X509Certificate)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Security.Cert.X509Certificate"/></param>
        public void SetCaCertificate(Java.Security.Cert.X509Certificate arg0)
        {
            IExecuteWithSignature("setCaCertificate", "(Ljava/security/cert/X509Certificate;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#setCertCredential(android.net.wifi.hotspot2.pps.Credential.CertificateCredential)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Hotspot2.Pps.Credential.CertificateCredential"/></param>
        public void SetCertCredential(Android.Net.Wifi.Hotspot2.Pps.Credential.CertificateCredential arg0)
        {
            IExecuteWithSignature("setCertCredential", "(Landroid/net/wifi/hotspot2/pps/Credential$CertificateCredential;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#setClientCertificateChain(java.security.cert.X509Certificate[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Security.Cert.X509Certificate"/></param>
        public void SetClientCertificateChain(Java.Security.Cert.X509Certificate[] arg0)
        {
            IExecuteWithSignature("setClientCertificateChain", "([Ljava/security/cert/X509Certificate;)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#setClientPrivateKey(java.security.PrivateKey)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Security.PrivateKey"/></param>
        public void SetClientPrivateKey(Java.Security.PrivateKey arg0)
        {
            IExecuteWithSignature("setClientPrivateKey", "(Ljava/security/PrivateKey;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#setMinimumTlsVersion(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        public void SetMinimumTlsVersion(int arg0)
        {
            IExecuteWithSignature("setMinimumTlsVersion", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#setRealm(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetRealm(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setRealm", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#setSimCredential(android.net.wifi.hotspot2.pps.Credential.SimCredential)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Hotspot2.Pps.Credential.SimCredential"/></param>
        public void SetSimCredential(Android.Net.Wifi.Hotspot2.Pps.Credential.SimCredential arg0)
        {
            IExecuteWithSignature("setSimCredential", "(Landroid/net/wifi/hotspot2/pps/Credential$SimCredential;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#setUserCredential(android.net.wifi.hotspot2.pps.Credential.UserCredential)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.Hotspot2.Pps.Credential.UserCredential"/></param>
        public void SetUserCredential(Android.Net.Wifi.Hotspot2.Pps.Credential.UserCredential arg0)
        {
            IExecuteWithSignature("setUserCredential", "(Landroid/net/wifi/hotspot2/pps/Credential$UserCredential;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region CertificateCredential
        public partial class CertificateCredential
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.CertificateCredential.html#%3Cinit%3E(android.net.wifi.hotspot2.pps.Credential.CertificateCredential)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.Hotspot2.Pps.Credential.CertificateCredential"/></param>
            public CertificateCredential(Android.Net.Wifi.Hotspot2.Pps.Credential.CertificateCredential arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.CertificateCredential.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.CertificateCredential.html#getCertSha256Fingerprint()"/>
            /// </summary>
            /// <returns><see cref="byte"/></returns>
            public byte[] GetCertSha256Fingerprint()
            {
                return IExecuteWithSignatureArray<byte>("getCertSha256Fingerprint", "()[B");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.CertificateCredential.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.CertificateCredential.html#getCertType()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetCertType()
            {
                return IExecuteWithSignature<Java.Lang.String>("getCertType", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.CertificateCredential.html#setCertSha256Fingerprint(byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            public void SetCertSha256Fingerprint(byte[] arg0)
            {
                IExecuteWithSignature("setCertSha256Fingerprint", "([B)V", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.CertificateCredential.html#setCertType(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public void SetCertType(Java.Lang.String arg0)
            {
                IExecuteWithSignature("setCertType", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.CertificateCredential.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SimCredential
        public partial class SimCredential
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.SimCredential.html#%3Cinit%3E(android.net.wifi.hotspot2.pps.Credential.SimCredential)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.Hotspot2.Pps.Credential.SimCredential"/></param>
            public SimCredential(Android.Net.Wifi.Hotspot2.Pps.Credential.SimCredential arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.SimCredential.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.SimCredential.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.SimCredential.html#getEapType()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetEapType()
            {
                return IExecuteWithSignature<int>("getEapType", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.SimCredential.html#getImsi()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetImsi()
            {
                return IExecuteWithSignature<Java.Lang.String>("getImsi", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.SimCredential.html#setEapType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetEapType(int arg0)
            {
                IExecuteWithSignature("setEapType", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.SimCredential.html#setImsi(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public void SetImsi(Java.Lang.String arg0)
            {
                IExecuteWithSignature("setImsi", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.SimCredential.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region UserCredential
        public partial class UserCredential
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.UserCredential.html#%3Cinit%3E(android.net.wifi.hotspot2.pps.Credential.UserCredential)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.Hotspot2.Pps.Credential.UserCredential"/></param>
            public UserCredential(Android.Net.Wifi.Hotspot2.Pps.Credential.UserCredential arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.UserCredential.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.UserCredential.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.UserCredential.html#getEapType()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetEapType()
            {
                return IExecuteWithSignature<int>("getEapType", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.UserCredential.html#getNonEapInnerMethod()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetNonEapInnerMethod()
            {
                return IExecuteWithSignature<Java.Lang.String>("getNonEapInnerMethod", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.UserCredential.html#getPassword()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetPassword()
            {
                return IExecuteWithSignature<Java.Lang.String>("getPassword", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.UserCredential.html#getUsername()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetUsername()
            {
                return IExecuteWithSignature<Java.Lang.String>("getUsername", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.UserCredential.html#setEapType(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetEapType(int arg0)
            {
                IExecuteWithSignature("setEapType", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.UserCredential.html#setNonEapInnerMethod(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public void SetNonEapInnerMethod(Java.Lang.String arg0)
            {
                IExecuteWithSignature("setNonEapInnerMethod", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.UserCredential.html#setPassword(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public void SetPassword(Java.Lang.String arg0)
            {
                IExecuteWithSignature("setPassword", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.UserCredential.html#setUsername(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            public void SetUsername(Java.Lang.String arg0)
            {
                IExecuteWithSignature("setUsername", "(Ljava/lang/String;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.UserCredential.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
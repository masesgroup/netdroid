/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi
{
    #region WifiEnterpriseConfig
    public partial class WifiEnterpriseConfig
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#%3Cinit%3E(android.net.wifi.WifiEnterpriseConfig)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Wifi.WifiEnterpriseConfig"/></param>
        public WifiEnterpriseConfig(Android.Net.Wifi.WifiEnterpriseConfig arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#TLS_V1_0"/>
        /// </summary>
        public static int TLS_V1_0 { get { if (!_TLS_V1_0Ready) { _TLS_V1_0Content = SGetField<int>(LocalBridgeClazz, "TLS_V1_0"); _TLS_V1_0Ready = true; } return _TLS_V1_0Content; } }
        private static int _TLS_V1_0Content = default;
        private static bool _TLS_V1_0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#TLS_V1_1"/>
        /// </summary>
        public static int TLS_V1_1 { get { if (!_TLS_V1_1Ready) { _TLS_V1_1Content = SGetField<int>(LocalBridgeClazz, "TLS_V1_1"); _TLS_V1_1Ready = true; } return _TLS_V1_1Content; } }
        private static int _TLS_V1_1Content = default;
        private static bool _TLS_V1_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#TLS_V1_2"/>
        /// </summary>
        public static int TLS_V1_2 { get { if (!_TLS_V1_2Ready) { _TLS_V1_2Content = SGetField<int>(LocalBridgeClazz, "TLS_V1_2"); _TLS_V1_2Ready = true; } return _TLS_V1_2Content; } }
        private static int _TLS_V1_2Content = default;
        private static bool _TLS_V1_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#TLS_V1_3"/>
        /// </summary>
        public static int TLS_V1_3 { get { if (!_TLS_V1_3Ready) { _TLS_V1_3Content = SGetField<int>(LocalBridgeClazz, "TLS_V1_3"); _TLS_V1_3Ready = true; } return _TLS_V1_3Content; } }
        private static int _TLS_V1_3Content = default;
        private static bool _TLS_V1_3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#EXTRA_WAPI_AS_CERTIFICATE_DATA"/>
        /// </summary>
        public static Java.Lang.String EXTRA_WAPI_AS_CERTIFICATE_DATA { get { if (!_EXTRA_WAPI_AS_CERTIFICATE_DATAReady) { _EXTRA_WAPI_AS_CERTIFICATE_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_WAPI_AS_CERTIFICATE_DATA"); _EXTRA_WAPI_AS_CERTIFICATE_DATAReady = true; } return _EXTRA_WAPI_AS_CERTIFICATE_DATAContent; } }
        private static Java.Lang.String _EXTRA_WAPI_AS_CERTIFICATE_DATAContent = default;
        private static bool _EXTRA_WAPI_AS_CERTIFICATE_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#EXTRA_WAPI_AS_CERTIFICATE_NAME"/>
        /// </summary>
        public static Java.Lang.String EXTRA_WAPI_AS_CERTIFICATE_NAME { get { if (!_EXTRA_WAPI_AS_CERTIFICATE_NAMEReady) { _EXTRA_WAPI_AS_CERTIFICATE_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_WAPI_AS_CERTIFICATE_NAME"); _EXTRA_WAPI_AS_CERTIFICATE_NAMEReady = true; } return _EXTRA_WAPI_AS_CERTIFICATE_NAMEContent; } }
        private static Java.Lang.String _EXTRA_WAPI_AS_CERTIFICATE_NAMEContent = default;
        private static bool _EXTRA_WAPI_AS_CERTIFICATE_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#EXTRA_WAPI_USER_CERTIFICATE_DATA"/>
        /// </summary>
        public static Java.Lang.String EXTRA_WAPI_USER_CERTIFICATE_DATA { get { if (!_EXTRA_WAPI_USER_CERTIFICATE_DATAReady) { _EXTRA_WAPI_USER_CERTIFICATE_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_WAPI_USER_CERTIFICATE_DATA"); _EXTRA_WAPI_USER_CERTIFICATE_DATAReady = true; } return _EXTRA_WAPI_USER_CERTIFICATE_DATAContent; } }
        private static Java.Lang.String _EXTRA_WAPI_USER_CERTIFICATE_DATAContent = default;
        private static bool _EXTRA_WAPI_USER_CERTIFICATE_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#EXTRA_WAPI_USER_CERTIFICATE_NAME"/>
        /// </summary>
        public static Java.Lang.String EXTRA_WAPI_USER_CERTIFICATE_NAME { get { if (!_EXTRA_WAPI_USER_CERTIFICATE_NAMEReady) { _EXTRA_WAPI_USER_CERTIFICATE_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_WAPI_USER_CERTIFICATE_NAME"); _EXTRA_WAPI_USER_CERTIFICATE_NAMEReady = true; } return _EXTRA_WAPI_USER_CERTIFICATE_NAMEContent; } }
        private static Java.Lang.String _EXTRA_WAPI_USER_CERTIFICATE_NAMEContent = default;
        private static bool _EXTRA_WAPI_USER_CERTIFICATE_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#WAPI_AS_CERTIFICATE"/>
        /// </summary>
        public static Java.Lang.String WAPI_AS_CERTIFICATE { get { if (!_WAPI_AS_CERTIFICATEReady) { _WAPI_AS_CERTIFICATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WAPI_AS_CERTIFICATE"); _WAPI_AS_CERTIFICATEReady = true; } return _WAPI_AS_CERTIFICATEContent; } }
        private static Java.Lang.String _WAPI_AS_CERTIFICATEContent = default;
        private static bool _WAPI_AS_CERTIFICATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#WAPI_USER_CERTIFICATE"/>
        /// </summary>
        public static Java.Lang.String WAPI_USER_CERTIFICATE { get { if (!_WAPI_USER_CERTIFICATEReady) { _WAPI_USER_CERTIFICATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WAPI_USER_CERTIFICATE"); _WAPI_USER_CERTIFICATEReady = true; } return _WAPI_USER_CERTIFICATEContent; } }
        private static Java.Lang.String _WAPI_USER_CERTIFICATEContent = default;
        private static bool _WAPI_USER_CERTIFICATEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getAltSubjectMatch()"/> <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setAltSubjectMatch(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String AltSubjectMatch
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getAltSubjectMatch", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setAltSubjectMatch", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getAnonymousIdentity()"/> <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setAnonymousIdentity(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String AnonymousIdentity
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getAnonymousIdentity", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setAnonymousIdentity", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getCaCertificate()"/> <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setCaCertificate(java.security.cert.X509Certificate)"/>
        /// </summary>
        public Java.Security.Cert.X509Certificate CaCertificate
        {
            get { return IExecuteWithSignature<Java.Security.Cert.X509Certificate>("getCaCertificate", "()Ljava/security/cert/X509Certificate;"); } set { IExecuteWithSignature("setCaCertificate", "(Ljava/security/cert/X509Certificate;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getCaCertificates()"/> <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setCaCertificates(java.security.cert.X509Certificate[])"/>
        /// </summary>
        public Java.Security.Cert.X509Certificate[] CaCertificates
        {
            get { return IExecuteWithSignatureArray<Java.Security.Cert.X509Certificate>("getCaCertificates", "()[Ljava/security/cert/X509Certificate;"); } set { IExecuteWithSignature("setCaCertificates", "([Ljava/security/cert/X509Certificate;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getClientCertificate()"/> 
        /// </summary>
        public Java.Security.Cert.X509Certificate ClientCertificate
        {
            get { return IExecuteWithSignature<Java.Security.Cert.X509Certificate>("getClientCertificate", "()Ljava/security/cert/X509Certificate;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getClientCertificateChain()"/> 
        /// </summary>
        public Java.Security.Cert.X509Certificate[] ClientCertificateChain
        {
            get { return IExecuteWithSignatureArray<Java.Security.Cert.X509Certificate>("getClientCertificateChain", "()[Ljava/security/cert/X509Certificate;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getClientKeyPairAlias()"/> <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setClientKeyPairAlias(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String ClientKeyPairAlias
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getClientKeyPairAlias", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setClientKeyPairAlias", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getClientPrivateKey()"/> 
        /// </summary>
        public Java.Security.PrivateKey ClientPrivateKey
        {
            get { return IExecuteWithSignature<Java.Security.PrivateKey>("getClientPrivateKey", "()Ljava/security/PrivateKey;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getDecoratedIdentityPrefix()"/> <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setDecoratedIdentityPrefix(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String DecoratedIdentityPrefix
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getDecoratedIdentityPrefix", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setDecoratedIdentityPrefix", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getDomainSuffixMatch()"/> <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setDomainSuffixMatch(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String DomainSuffixMatch
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getDomainSuffixMatch", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setDomainSuffixMatch", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getEapMethod()"/> <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setEapMethod(int)"/>
        /// </summary>
        public int EapMethod
        {
            get { return IExecuteWithSignature<int>("getEapMethod", "()I"); } set { IExecuteWithSignature("setEapMethod", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getIdentity()"/> <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setIdentity(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String Identity
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getIdentity", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setIdentity", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getMinimumTlsVersion()"/> <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setMinimumTlsVersion(int)"/>
        /// </summary>
        public int MinimumTlsVersion
        {
            get { return IExecuteWithSignature<int>("getMinimumTlsVersion", "()I"); } set { IExecuteWithSignature("setMinimumTlsVersion", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getPassword()"/> <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setPassword(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String Password
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getPassword", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setPassword", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getPhase2Method()"/> <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setPhase2Method(int)"/>
        /// </summary>
        public int Phase2Method
        {
            get { return IExecuteWithSignature<int>("getPhase2Method", "()I"); } set { IExecuteWithSignature("setPhase2Method", "(I)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getPlmn()"/> <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setPlmn(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String Plmn
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getPlmn", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setPlmn", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getRealm()"/> <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setRealm(java.lang.String)"/>
        /// </summary>
        public Java.Lang.String Realm
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getRealm", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setRealm", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#getSubjectMatch()"/> <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setSubjectMatch(java.lang.String)"/>
        /// </summary>
        [System.Obsolete()]
        public Java.Lang.String SubjectMatch
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getSubjectMatch", "()Ljava/lang/String;"); } set { IExecuteWithSignature("setSubjectMatch", "(Ljava/lang/String;)V", value); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#hasCaCertificate()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasCaCertificate()
        {
            return IExecuteWithSignature<bool>("hasCaCertificate", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#isAuthenticationSimBased()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAuthenticationSimBased()
        {
            return IExecuteWithSignature<bool>("isAuthenticationSimBased", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#isEapMethodServerCertUsed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEapMethodServerCertUsed()
        {
            return IExecuteWithSignature<bool>("isEapMethodServerCertUsed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#isServerCertValidationEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsServerCertValidationEnabled()
        {
            return IExecuteWithSignature<bool>("isServerCertValidationEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#isTrustOnFirstUseEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTrustOnFirstUseEnabled()
        {
            return IExecuteWithSignature<bool>("isTrustOnFirstUseEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#enableTrustOnFirstUse(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void EnableTrustOnFirstUse(bool arg0)
        {
            IExecuteWithSignature("enableTrustOnFirstUse", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setClientKeyEntry(java.security.PrivateKey,java.security.cert.X509Certificate)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Security.PrivateKey"/></param>
        /// <param name="arg1"><see cref="Java.Security.Cert.X509Certificate"/></param>
        public void SetClientKeyEntry(Java.Security.PrivateKey arg0, Java.Security.Cert.X509Certificate arg1)
        {
            IExecute("setClientKeyEntry", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#setClientKeyEntryWithCertificateChain(java.security.PrivateKey,java.security.cert.X509Certificate[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Security.PrivateKey"/></param>
        /// <param name="arg1"><see cref="Java.Security.Cert.X509Certificate"/></param>
        public void SetClientKeyEntryWithCertificateChain(Java.Security.PrivateKey arg0, Java.Security.Cert.X509Certificate[] arg1)
        {
            IExecute("setClientKeyEntryWithCertificateChain", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Eap
        public partial class Eap
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Eap.html#AKA"/>
            /// </summary>
            public static int AKA { get { if (!_AKAReady) { _AKAContent = SGetField<int>(LocalBridgeClazz, "AKA"); _AKAReady = true; } return _AKAContent; } }
            private static int _AKAContent = default;
            private static bool _AKAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Eap.html#AKA_PRIME"/>
            /// </summary>
            public static int AKA_PRIME { get { if (!_AKA_PRIMEReady) { _AKA_PRIMEContent = SGetField<int>(LocalBridgeClazz, "AKA_PRIME"); _AKA_PRIMEReady = true; } return _AKA_PRIMEContent; } }
            private static int _AKA_PRIMEContent = default;
            private static bool _AKA_PRIMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Eap.html#NONE"/>
            /// </summary>
            public static int NONE { get { if (!_NONEReady) { _NONEContent = SGetField<int>(LocalBridgeClazz, "NONE"); _NONEReady = true; } return _NONEContent; } }
            private static int _NONEContent = default;
            private static bool _NONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Eap.html#PEAP"/>
            /// </summary>
            public static int PEAP { get { if (!_PEAPReady) { _PEAPContent = SGetField<int>(LocalBridgeClazz, "PEAP"); _PEAPReady = true; } return _PEAPContent; } }
            private static int _PEAPContent = default;
            private static bool _PEAPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Eap.html#PWD"/>
            /// </summary>
            public static int PWD { get { if (!_PWDReady) { _PWDContent = SGetField<int>(LocalBridgeClazz, "PWD"); _PWDReady = true; } return _PWDContent; } }
            private static int _PWDContent = default;
            private static bool _PWDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Eap.html#SIM"/>
            /// </summary>
            public static int SIM { get { if (!_SIMReady) { _SIMContent = SGetField<int>(LocalBridgeClazz, "SIM"); _SIMReady = true; } return _SIMContent; } }
            private static int _SIMContent = default;
            private static bool _SIMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Eap.html#TLS"/>
            /// </summary>
            public static int TLS { get { if (!_TLSReady) { _TLSContent = SGetField<int>(LocalBridgeClazz, "TLS"); _TLSReady = true; } return _TLSContent; } }
            private static int _TLSContent = default;
            private static bool _TLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Eap.html#TTLS"/>
            /// </summary>
            public static int TTLS { get { if (!_TTLSReady) { _TTLSContent = SGetField<int>(LocalBridgeClazz, "TTLS"); _TTLSReady = true; } return _TTLSContent; } }
            private static int _TTLSContent = default;
            private static bool _TTLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Eap.html#UNAUTH_TLS"/>
            /// </summary>
            public static int UNAUTH_TLS { get { if (!_UNAUTH_TLSReady) { _UNAUTH_TLSContent = SGetField<int>(LocalBridgeClazz, "UNAUTH_TLS"); _UNAUTH_TLSReady = true; } return _UNAUTH_TLSContent; } }
            private static int _UNAUTH_TLSContent = default;
            private static bool _UNAUTH_TLSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Eap.html#WAPI_CERT"/>
            /// </summary>
            public static int WAPI_CERT { get { if (!_WAPI_CERTReady) { _WAPI_CERTContent = SGetField<int>(LocalBridgeClazz, "WAPI_CERT"); _WAPI_CERTReady = true; } return _WAPI_CERTContent; } }
            private static int _WAPI_CERTContent = default;
            private static bool _WAPI_CERTReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Phase2
        public partial class Phase2
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Phase2.html#AKA"/>
            /// </summary>
            public static int AKA { get { if (!_AKAReady) { _AKAContent = SGetField<int>(LocalBridgeClazz, "AKA"); _AKAReady = true; } return _AKAContent; } }
            private static int _AKAContent = default;
            private static bool _AKAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Phase2.html#AKA_PRIME"/>
            /// </summary>
            public static int AKA_PRIME { get { if (!_AKA_PRIMEReady) { _AKA_PRIMEContent = SGetField<int>(LocalBridgeClazz, "AKA_PRIME"); _AKA_PRIMEReady = true; } return _AKA_PRIMEContent; } }
            private static int _AKA_PRIMEContent = default;
            private static bool _AKA_PRIMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Phase2.html#GTC"/>
            /// </summary>
            public static int GTC { get { if (!_GTCReady) { _GTCContent = SGetField<int>(LocalBridgeClazz, "GTC"); _GTCReady = true; } return _GTCContent; } }
            private static int _GTCContent = default;
            private static bool _GTCReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Phase2.html#MSCHAP"/>
            /// </summary>
            public static int MSCHAP { get { if (!_MSCHAPReady) { _MSCHAPContent = SGetField<int>(LocalBridgeClazz, "MSCHAP"); _MSCHAPReady = true; } return _MSCHAPContent; } }
            private static int _MSCHAPContent = default;
            private static bool _MSCHAPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Phase2.html#MSCHAPV2"/>
            /// </summary>
            public static int MSCHAPV2 { get { if (!_MSCHAPV2Ready) { _MSCHAPV2Content = SGetField<int>(LocalBridgeClazz, "MSCHAPV2"); _MSCHAPV2Ready = true; } return _MSCHAPV2Content; } }
            private static int _MSCHAPV2Content = default;
            private static bool _MSCHAPV2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Phase2.html#NONE"/>
            /// </summary>
            public static int NONE { get { if (!_NONEReady) { _NONEContent = SGetField<int>(LocalBridgeClazz, "NONE"); _NONEReady = true; } return _NONEContent; } }
            private static int _NONEContent = default;
            private static bool _NONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Phase2.html#PAP"/>
            /// </summary>
            public static int PAP { get { if (!_PAPReady) { _PAPContent = SGetField<int>(LocalBridgeClazz, "PAP"); _PAPReady = true; } return _PAPContent; } }
            private static int _PAPContent = default;
            private static bool _PAPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/WifiEnterpriseConfig.Phase2.html#SIM"/>
            /// </summary>
            public static int SIM { get { if (!_SIMReady) { _SIMContent = SGetField<int>(LocalBridgeClazz, "SIM"); _SIMReady = true; } return _SIMContent; } }
            private static int _SIMContent = default;
            private static bool _SIMReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
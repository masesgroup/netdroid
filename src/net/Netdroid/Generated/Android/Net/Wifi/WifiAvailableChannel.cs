/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi
{
    #region WifiAvailableChannel
    public partial class WifiAvailableChannel
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiAvailableChannel.html#%3Cinit%3E(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public WifiAvailableChannel(int arg0, int arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiAvailableChannel.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiAvailableChannel.html#OP_MODE_SAP"/>
        /// </summary>
        public static int OP_MODE_SAP { get { if (!_OP_MODE_SAPReady) { _OP_MODE_SAPContent = SGetField<int>(LocalBridgeClazz, "OP_MODE_SAP"); _OP_MODE_SAPReady = true; } return _OP_MODE_SAPContent; } }
        private static int _OP_MODE_SAPContent = default;
        private static bool _OP_MODE_SAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiAvailableChannel.html#OP_MODE_STA"/>
        /// </summary>
        public static int OP_MODE_STA { get { if (!_OP_MODE_STAReady) { _OP_MODE_STAContent = SGetField<int>(LocalBridgeClazz, "OP_MODE_STA"); _OP_MODE_STAReady = true; } return _OP_MODE_STAContent; } }
        private static int _OP_MODE_STAContent = default;
        private static bool _OP_MODE_STAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiAvailableChannel.html#OP_MODE_TDLS"/>
        /// </summary>
        public static int OP_MODE_TDLS { get { if (!_OP_MODE_TDLSReady) { _OP_MODE_TDLSContent = SGetField<int>(LocalBridgeClazz, "OP_MODE_TDLS"); _OP_MODE_TDLSReady = true; } return _OP_MODE_TDLSContent; } }
        private static int _OP_MODE_TDLSContent = default;
        private static bool _OP_MODE_TDLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiAvailableChannel.html#OP_MODE_WIFI_AWARE"/>
        /// </summary>
        public static int OP_MODE_WIFI_AWARE { get { if (!_OP_MODE_WIFI_AWAREReady) { _OP_MODE_WIFI_AWAREContent = SGetField<int>(LocalBridgeClazz, "OP_MODE_WIFI_AWARE"); _OP_MODE_WIFI_AWAREReady = true; } return _OP_MODE_WIFI_AWAREContent; } }
        private static int _OP_MODE_WIFI_AWAREContent = default;
        private static bool _OP_MODE_WIFI_AWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiAvailableChannel.html#OP_MODE_WIFI_DIRECT_CLI"/>
        /// </summary>
        public static int OP_MODE_WIFI_DIRECT_CLI { get { if (!_OP_MODE_WIFI_DIRECT_CLIReady) { _OP_MODE_WIFI_DIRECT_CLIContent = SGetField<int>(LocalBridgeClazz, "OP_MODE_WIFI_DIRECT_CLI"); _OP_MODE_WIFI_DIRECT_CLIReady = true; } return _OP_MODE_WIFI_DIRECT_CLIContent; } }
        private static int _OP_MODE_WIFI_DIRECT_CLIContent = default;
        private static bool _OP_MODE_WIFI_DIRECT_CLIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiAvailableChannel.html#OP_MODE_WIFI_DIRECT_GO"/>
        /// </summary>
        public static int OP_MODE_WIFI_DIRECT_GO { get { if (!_OP_MODE_WIFI_DIRECT_GOReady) { _OP_MODE_WIFI_DIRECT_GOContent = SGetField<int>(LocalBridgeClazz, "OP_MODE_WIFI_DIRECT_GO"); _OP_MODE_WIFI_DIRECT_GOReady = true; } return _OP_MODE_WIFI_DIRECT_GOContent; } }
        private static int _OP_MODE_WIFI_DIRECT_GOContent = default;
        private static bool _OP_MODE_WIFI_DIRECT_GOReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiAvailableChannel.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiAvailableChannel.html#getFrequencyMhz()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFrequencyMhz()
        {
            return IExecuteWithSignature<int>("getFrequencyMhz", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiAvailableChannel.html#getOperationalModes()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetOperationalModes()
        {
            return IExecuteWithSignature<int>("getOperationalModes", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/WifiAvailableChannel.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
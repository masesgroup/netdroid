/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net.Wifi.Rtt
{
    #region RangingResult declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html"/>
    /// </summary>
    public partial class RangingResult : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.net.wifi.rtt.RangingResult";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public RangingResult() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public RangingResult(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.net.wifi.rtt.RangingResult$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region RangingResult implementation
    public partial class RangingResult
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#STATUS_FAIL"/>
        /// </summary>
        public static int STATUS_FAIL { get { if (!_STATUS_FAILReady) { _STATUS_FAILContent = SGetField<int>(LocalBridgeClazz, "STATUS_FAIL"); _STATUS_FAILReady = true; } return _STATUS_FAILContent; } }
        private static int _STATUS_FAILContent = default;
        private static bool _STATUS_FAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MC"/>
        /// </summary>
        public static int STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MC { get { if (!_STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MCReady) { _STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MCContent = SGetField<int>(LocalBridgeClazz, "STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MC"); _STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MCReady = true; } return _STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MCContent; } }
        private static int _STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MCContent = default;
        private static bool _STATUS_RESPONDER_DOES_NOT_SUPPORT_IEEE80211MCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#STATUS_SUCCESS"/>
        /// </summary>
        public static int STATUS_SUCCESS { get { if (!_STATUS_SUCCESSReady) { _STATUS_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "STATUS_SUCCESS"); _STATUS_SUCCESSReady = true; } return _STATUS_SUCCESSContent; } }
        private static int _STATUS_SUCCESSContent = default;
        private static bool _STATUS_SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#UNSPECIFIED"/>
        /// </summary>
        public static int UNSPECIFIED { get { if (!_UNSPECIFIEDReady) { _UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "UNSPECIFIED"); _UNSPECIFIEDReady = true; } return _UNSPECIFIEDContent; } }
        private static int _UNSPECIFIEDContent = default;
        private static bool _UNSPECIFIEDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#getMacAddress()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.MacAddress"/></returns>
        public Android.Net.MacAddress GetMacAddress()
        {
            return IExecuteWithSignature<Android.Net.MacAddress>("getMacAddress", "()Landroid/net/MacAddress;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#getPeerHandle()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Wifi.Aware.PeerHandle"/></returns>
        public Android.Net.Wifi.Aware.PeerHandle GetPeerHandle()
        {
            return IExecuteWithSignature<Android.Net.Wifi.Aware.PeerHandle>("getPeerHandle", "()Landroid/net/wifi/aware/PeerHandle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#getUnverifiedResponderLocation()"/>
        /// </summary>
        /// <returns><see cref="Android.Net.Wifi.Rtt.ResponderLocation"/></returns>
        public Android.Net.Wifi.Rtt.ResponderLocation GetUnverifiedResponderLocation()
        {
            return IExecuteWithSignature<Android.Net.Wifi.Rtt.ResponderLocation>("getUnverifiedResponderLocation", "()Landroid/net/wifi/rtt/ResponderLocation;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#is80211azNtbMeasurement()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool Is80211azNtbMeasurement()
        {
            return IExecuteWithSignature<bool>("is80211azNtbMeasurement", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#is80211mcMeasurement()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool Is80211mcMeasurement()
        {
            return IExecuteWithSignature<bool>("is80211mcMeasurement", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#getLci()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        public byte[] GetLci()
        {
            return IExecuteWithSignatureArray<byte>("getLci", "()[B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#getLcr()"/>
        /// </summary>
        /// <returns><see cref="byte"/></returns>
        public byte[] GetLcr()
        {
            return IExecuteWithSignatureArray<byte>("getLcr", "()[B");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#get80211azInitiatorTxLtfRepetitionsCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Get80211azInitiatorTxLtfRepetitionsCount()
        {
            return IExecuteWithSignature<int>("get80211azInitiatorTxLtfRepetitionsCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#get80211azNumberOfRxSpatialStreams()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Get80211azNumberOfRxSpatialStreams()
        {
            return IExecuteWithSignature<int>("get80211azNumberOfRxSpatialStreams", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#get80211azNumberOfTxSpatialStreams()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Get80211azNumberOfTxSpatialStreams()
        {
            return IExecuteWithSignature<int>("get80211azNumberOfTxSpatialStreams", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#get80211azResponderTxLtfRepetitionsCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Get80211azResponderTxLtfRepetitionsCount()
        {
            return IExecuteWithSignature<int>("get80211azResponderTxLtfRepetitionsCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#getDistanceMm()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDistanceMm()
        {
            return IExecuteWithSignature<int>("getDistanceMm", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#getDistanceStdDevMm()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDistanceStdDevMm()
        {
            return IExecuteWithSignature<int>("getDistanceStdDevMm", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#getMeasurementBandwidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMeasurementBandwidth()
        {
            return IExecuteWithSignature<int>("getMeasurementBandwidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#getMeasurementChannelFrequencyMHz()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMeasurementChannelFrequencyMHz()
        {
            return IExecuteWithSignature<int>("getMeasurementChannelFrequencyMHz", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#getNumAttemptedMeasurements()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNumAttemptedMeasurements()
        {
            return IExecuteWithSignature<int>("getNumAttemptedMeasurements", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#getNumSuccessfulMeasurements()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNumSuccessfulMeasurements()
        {
            return IExecuteWithSignature<int>("getNumSuccessfulMeasurements", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#getRssi()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRssi()
        {
            return IExecuteWithSignature<int>("getRssi", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#getStatus()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetStatus()
        {
            return IExecuteWithSignature<int>("getStatus", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#getMaxTimeBetweenNtbMeasurementsMicros()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetMaxTimeBetweenNtbMeasurementsMicros()
        {
            return IExecuteWithSignature<long>("getMaxTimeBetweenNtbMeasurementsMicros", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#getMinTimeBetweenNtbMeasurementsMicros()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetMinTimeBetweenNtbMeasurementsMicros()
        {
            return IExecuteWithSignature<long>("getMinTimeBetweenNtbMeasurementsMicros", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#getRangingTimestampMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetRangingTimestampMillis()
        {
            return IExecuteWithSignature<long>("getRangingTimestampMillis", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult Build()
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult>("build", "()Landroid/net/wifi/rtt/RangingResult;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#set80211azInitiatorTxLtfRepetitionsCount(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder Set80211azInitiatorTxLtfRepetitionsCount(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("set80211azInitiatorTxLtfRepetitionsCount", "(I)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#set80211azNtbMeasurement(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder Set80211azNtbMeasurement(bool arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("set80211azNtbMeasurement", "(Z)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#set80211azNumberOfRxSpatialStreams(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder Set80211azNumberOfRxSpatialStreams(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("set80211azNumberOfRxSpatialStreams", "(I)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#set80211azNumberOfTxSpatialStreams(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder Set80211azNumberOfTxSpatialStreams(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("set80211azNumberOfTxSpatialStreams", "(I)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#set80211azResponderTxLtfRepetitionsCount(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder Set80211azResponderTxLtfRepetitionsCount(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("set80211azResponderTxLtfRepetitionsCount", "(I)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#set80211mcMeasurement(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder Set80211mcMeasurement(bool arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("set80211mcMeasurement", "(Z)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#setDistanceMm(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder SetDistanceMm(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("setDistanceMm", "(I)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#setDistanceStdDevMm(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder SetDistanceStdDevMm(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("setDistanceStdDevMm", "(I)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#setLci(byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder SetLci(byte[] arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("setLci", "([B)Landroid/net/wifi/rtt/RangingResult$Builder;", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#setLcr(byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder SetLcr(byte[] arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("setLcr", "([B)Landroid/net/wifi/rtt/RangingResult$Builder;", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#setMacAddress(android.net.MacAddress)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.MacAddress"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder SetMacAddress(Android.Net.MacAddress arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("setMacAddress", "(Landroid/net/MacAddress;)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#setMaxTimeBetweenNtbMeasurementsMicros(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder SetMaxTimeBetweenNtbMeasurementsMicros(long arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("setMaxTimeBetweenNtbMeasurementsMicros", "(J)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#setMeasurementBandwidth(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder SetMeasurementBandwidth(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("setMeasurementBandwidth", "(I)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#setMeasurementChannelFrequencyMHz(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder SetMeasurementChannelFrequencyMHz(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("setMeasurementChannelFrequencyMHz", "(I)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#setMinTimeBetweenNtbMeasurementsMicros(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder SetMinTimeBetweenNtbMeasurementsMicros(long arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("setMinTimeBetweenNtbMeasurementsMicros", "(J)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#setNumAttemptedMeasurements(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder SetNumAttemptedMeasurements(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("setNumAttemptedMeasurements", "(I)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#setNumSuccessfulMeasurements(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder SetNumSuccessfulMeasurements(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("setNumSuccessfulMeasurements", "(I)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#setPeerHandle(android.net.wifi.aware.PeerHandle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.Aware.PeerHandle"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder SetPeerHandle(Android.Net.Wifi.Aware.PeerHandle arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("setPeerHandle", "(Landroid/net/wifi/aware/PeerHandle;)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#setRangingTimestampMillis(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder SetRangingTimestampMillis(long arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("setRangingTimestampMillis", "(J)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#setRssi(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder SetRssi(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("setRssi", "(I)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#setStatus(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder SetStatus(int arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("setStatus", "(I)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.Builder.html#setUnverifiedResponderLocation(android.net.wifi.rtt.ResponderLocation)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Wifi.Rtt.ResponderLocation"/></param>
            /// <returns><see cref="Android.Net.Wifi.Rtt.RangingResult.Builder"/></returns>
            public Android.Net.Wifi.Rtt.RangingResult.Builder SetUnverifiedResponderLocation(Android.Net.Wifi.Rtt.ResponderLocation arg0)
            {
                return IExecuteWithSignature<Android.Net.Wifi.Rtt.RangingResult.Builder>("setUnverifiedResponderLocation", "(Landroid/net/wifi/rtt/ResponderLocation;)Landroid/net/wifi/rtt/RangingResult$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
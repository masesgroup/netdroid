/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net
{
    #region VpnService
    public partial class VpnService
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnService.html#SERVICE_INTERFACE"/>
        /// </summary>
        public static Java.Lang.String SERVICE_INTERFACE { get { if (!_SERVICE_INTERFACEReady) { _SERVICE_INTERFACEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SERVICE_INTERFACE"); _SERVICE_INTERFACEReady = true; } return _SERVICE_INTERFACEContent; } }
        private static Java.Lang.String _SERVICE_INTERFACEContent = default;
        private static bool _SERVICE_INTERFACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnService.html#SERVICE_META_DATA_SUPPORTS_ALWAYS_ON"/>
        /// </summary>
        public static Java.Lang.String SERVICE_META_DATA_SUPPORTS_ALWAYS_ON { get { if (!_SERVICE_META_DATA_SUPPORTS_ALWAYS_ONReady) { _SERVICE_META_DATA_SUPPORTS_ALWAYS_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SERVICE_META_DATA_SUPPORTS_ALWAYS_ON"); _SERVICE_META_DATA_SUPPORTS_ALWAYS_ONReady = true; } return _SERVICE_META_DATA_SUPPORTS_ALWAYS_ONContent; } }
        private static Java.Lang.String _SERVICE_META_DATA_SUPPORTS_ALWAYS_ONContent = default;
        private static bool _SERVICE_META_DATA_SUPPORTS_ALWAYS_ONReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnService.html#prepare(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="Android.Content.Intent"/></returns>
        public static Android.Content.Intent Prepare(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<Android.Content.Intent>(LocalBridgeClazz, "prepare", "(Landroid/content/Context;)Landroid/content/Intent;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnService.html#protect(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Protect(int arg0)
        {
            return IExecuteWithSignature<bool>("protect", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnService.html#protect(java.net.DatagramSocket)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Net.DatagramSocket"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Protect(Java.Net.DatagramSocket arg0)
        {
            return IExecuteWithSignature<bool>("protect", "(Ljava/net/DatagramSocket;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnService.html#protect(java.net.Socket)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Net.Socket"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Protect(Java.Net.Socket arg0)
        {
            return IExecuteWithSignature<bool>("protect", "(Ljava/net/Socket;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnService.html#setUnderlyingNetworks(android.net.Network[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.Network"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetUnderlyingNetworks(Android.Net.Network[] arg0)
        {
            return IExecuteWithSignature<bool>("setUnderlyingNetworks", "([Landroid/net/Network;)Z", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnService.html#isAlwaysOn()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAlwaysOn()
        {
            return IExecuteWithSignature<bool>("isAlwaysOn", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnService.html#isLockdownEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLockdownEnabled()
        {
            return IExecuteWithSignature<bool>("isLockdownEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/VpnService.html#onRevoke()"/>
        /// </summary>
        public void OnRevoke()
        {
            IExecuteWithSignature("onRevoke", "()V");
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#%3Cinit%3E(android.net.VpnService)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.VpnService"/></param>
            public Builder(Android.Net.VpnService arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#addAddress(java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder AddAddress(Java.Lang.String arg0, int arg1)
            {
                return IExecute<Android.Net.VpnService.Builder>("addAddress", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#addAddress(java.net.InetAddress,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Net.InetAddress"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder AddAddress(Java.Net.InetAddress arg0, int arg1)
            {
                return IExecute<Android.Net.VpnService.Builder>("addAddress", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#addAllowedApplication(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
            public Android.Net.VpnService.Builder AddAllowedApplication(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Net.VpnService.Builder>("addAllowedApplication", "(Ljava/lang/String;)Landroid/net/VpnService$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#addDisallowedApplication(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            /// <exception cref="Android.Content.Pm.PackageManager.NameNotFoundException"/>
            public Android.Net.VpnService.Builder AddDisallowedApplication(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Net.VpnService.Builder>("addDisallowedApplication", "(Ljava/lang/String;)Landroid/net/VpnService$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#addDnsServer(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder AddDnsServer(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Net.VpnService.Builder>("addDnsServer", "(Ljava/lang/String;)Landroid/net/VpnService$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#addDnsServer(java.net.InetAddress)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Net.InetAddress"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder AddDnsServer(Java.Net.InetAddress arg0)
            {
                return IExecuteWithSignature<Android.Net.VpnService.Builder>("addDnsServer", "(Ljava/net/InetAddress;)Landroid/net/VpnService$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#addRoute(android.net.IpPrefix)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.IpPrefix"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder AddRoute(Android.Net.IpPrefix arg0)
            {
                return IExecuteWithSignature<Android.Net.VpnService.Builder>("addRoute", "(Landroid/net/IpPrefix;)Landroid/net/VpnService$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#addRoute(java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder AddRoute(Java.Lang.String arg0, int arg1)
            {
                return IExecute<Android.Net.VpnService.Builder>("addRoute", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#addRoute(java.net.InetAddress,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Net.InetAddress"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder AddRoute(Java.Net.InetAddress arg0, int arg1)
            {
                return IExecute<Android.Net.VpnService.Builder>("addRoute", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#addSearchDomain(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder AddSearchDomain(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Net.VpnService.Builder>("addSearchDomain", "(Ljava/lang/String;)Landroid/net/VpnService$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#allowBypass()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder AllowBypass()
            {
                return IExecuteWithSignature<Android.Net.VpnService.Builder>("allowBypass", "()Landroid/net/VpnService$Builder;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#allowFamily(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder AllowFamily(int arg0)
            {
                return IExecuteWithSignature<Android.Net.VpnService.Builder>("allowFamily", "(I)Landroid/net/VpnService$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#excludeRoute(android.net.IpPrefix)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.IpPrefix"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder ExcludeRoute(Android.Net.IpPrefix arg0)
            {
                return IExecuteWithSignature<Android.Net.VpnService.Builder>("excludeRoute", "(Landroid/net/IpPrefix;)Landroid/net/VpnService$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#setBlocking(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder SetBlocking(bool arg0)
            {
                return IExecuteWithSignature<Android.Net.VpnService.Builder>("setBlocking", "(Z)Landroid/net/VpnService$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#setConfigureIntent(android.app.PendingIntent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder SetConfigureIntent(Android.App.PendingIntent arg0)
            {
                return IExecuteWithSignature<Android.Net.VpnService.Builder>("setConfigureIntent", "(Landroid/app/PendingIntent;)Landroid/net/VpnService$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#setHttpProxy(android.net.ProxyInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.ProxyInfo"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder SetHttpProxy(Android.Net.ProxyInfo arg0)
            {
                return IExecuteWithSignature<Android.Net.VpnService.Builder>("setHttpProxy", "(Landroid/net/ProxyInfo;)Landroid/net/VpnService$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#setMetered(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder SetMetered(bool arg0)
            {
                return IExecuteWithSignature<Android.Net.VpnService.Builder>("setMetered", "(Z)Landroid/net/VpnService$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#setMtu(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder SetMtu(int arg0)
            {
                return IExecuteWithSignature<Android.Net.VpnService.Builder>("setMtu", "(I)Landroid/net/VpnService$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#setSession(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder SetSession(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Net.VpnService.Builder>("setSession", "(Ljava/lang/String;)Landroid/net/VpnService$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#setUnderlyingNetworks(android.net.Network[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Network"/></param>
            /// <returns><see cref="Android.Net.VpnService.Builder"/></returns>
            public Android.Net.VpnService.Builder SetUnderlyingNetworks(Android.Net.Network[] arg0)
            {
                return IExecuteWithSignature<Android.Net.VpnService.Builder>("setUnderlyingNetworks", "([Landroid/net/Network;)Landroid/net/VpnService$Builder;", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/VpnService.Builder.html#establish()"/>
            /// </summary>
            /// <returns><see cref="Android.Os.ParcelFileDescriptor"/></returns>
            public Android.Os.ParcelFileDescriptor Establish()
            {
                return IExecuteWithSignature<Android.Os.ParcelFileDescriptor>("establish", "()Landroid/os/ParcelFileDescriptor;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
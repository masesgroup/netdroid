/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Net
{
    #region TetheringManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html"/>
    /// </summary>
    public partial class TetheringManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TetheringManager>
    {
        const string _bridgeClassName = "android.net.TetheringManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public TetheringManager() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public TetheringManager(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public TetheringManager(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region StartTetheringCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.StartTetheringCallback.html"/>
        /// </summary>
        public partial class StartTetheringCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<StartTetheringCallback>
        {
            const string _bridgeClassName = "android.net.TetheringManager$StartTetheringCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("StartTetheringCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public StartTetheringCallback() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public StartTetheringCallback(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("StartTetheringCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public StartTetheringCallback(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => true;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => true;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region StopTetheringCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.StopTetheringCallback.html"/>
        /// </summary>
        public partial class StopTetheringCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<StopTetheringCallback>
        {
            const string _bridgeClassName = "android.net.TetheringManager$StopTetheringCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("StopTetheringCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public StopTetheringCallback() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public StopTetheringCallback(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("StopTetheringCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public StopTetheringCallback(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => true;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => true;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region TetheringEventCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.TetheringEventCallback.html"/>
        /// </summary>
        public partial class TetheringEventCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TetheringEventCallback>
        {
            const string _bridgeClassName = "android.net.TetheringManager$TetheringEventCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("TetheringEventCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public TetheringEventCallback() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public TetheringEventCallback(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("TetheringEventCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public TetheringEventCallback(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => true;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => true;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region TetheringRequest declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.TetheringRequest.html"/>
        /// </summary>
        public partial class TetheringRequest : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.net.TetheringManager$TetheringRequest";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TetheringRequest() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public TetheringRequest(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TetheringRequest(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
            #region Builder declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/TetheringManager.TetheringRequest.Builder.html"/>
            /// </summary>
            public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
            {
                const string _bridgeClassName = "android.net.TetheringManager$TetheringRequest$Builder";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Builder() { }
                /// <summary>
                /// Internal constructor: used internally from JCOBridge
                /// </summary>
                [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
                public Builder(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Builder(params object[] args) : base(args) { }
            
                private static readonly global::System.Exception _LocalBridgeClazzException = null;
                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
                /// <inheritdoc/>
                public override string BridgeClassName => _bridgeClassName;
                /// <inheritdoc/>
                public override bool IsBridgeAbstract => false;
                /// <inheritdoc/>
                public override bool IsBridgeCloseable => false;
                /// <inheritdoc/>
                public override bool IsBridgeInterface => false;
                /// <inheritdoc/>
                public override bool IsBridgeStatic => true;
            
                // TODO: complete the class
            
            }
            #endregion

        
        }
        #endregion

    
    }
    #endregion

    #region TetheringManager implementation
    public partial class TetheringManager
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#CONNECTIVITY_SCOPE_GLOBAL"/>
        /// </summary>
        public static int CONNECTIVITY_SCOPE_GLOBAL { get { if (!_CONNECTIVITY_SCOPE_GLOBALReady) { _CONNECTIVITY_SCOPE_GLOBALContent = SGetField<int>(LocalBridgeClazz, "CONNECTIVITY_SCOPE_GLOBAL"); _CONNECTIVITY_SCOPE_GLOBALReady = true; } return _CONNECTIVITY_SCOPE_GLOBALContent; } }
        private static int _CONNECTIVITY_SCOPE_GLOBALContent = default;
        private static bool _CONNECTIVITY_SCOPE_GLOBALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_DHCPSERVER_ERROR"/>
        /// </summary>
        public static int TETHER_ERROR_DHCPSERVER_ERROR { get { if (!_TETHER_ERROR_DHCPSERVER_ERRORReady) { _TETHER_ERROR_DHCPSERVER_ERRORContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_DHCPSERVER_ERROR"); _TETHER_ERROR_DHCPSERVER_ERRORReady = true; } return _TETHER_ERROR_DHCPSERVER_ERRORContent; } }
        private static int _TETHER_ERROR_DHCPSERVER_ERRORContent = default;
        private static bool _TETHER_ERROR_DHCPSERVER_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_DISABLE_FORWARDING_ERROR"/>
        /// </summary>
        public static int TETHER_ERROR_DISABLE_FORWARDING_ERROR { get { if (!_TETHER_ERROR_DISABLE_FORWARDING_ERRORReady) { _TETHER_ERROR_DISABLE_FORWARDING_ERRORContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_DISABLE_FORWARDING_ERROR"); _TETHER_ERROR_DISABLE_FORWARDING_ERRORReady = true; } return _TETHER_ERROR_DISABLE_FORWARDING_ERRORContent; } }
        private static int _TETHER_ERROR_DISABLE_FORWARDING_ERRORContent = default;
        private static bool _TETHER_ERROR_DISABLE_FORWARDING_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_DUPLICATE_REQUEST"/>
        /// </summary>
        public static int TETHER_ERROR_DUPLICATE_REQUEST { get { if (!_TETHER_ERROR_DUPLICATE_REQUESTReady) { _TETHER_ERROR_DUPLICATE_REQUESTContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_DUPLICATE_REQUEST"); _TETHER_ERROR_DUPLICATE_REQUESTReady = true; } return _TETHER_ERROR_DUPLICATE_REQUESTContent; } }
        private static int _TETHER_ERROR_DUPLICATE_REQUESTContent = default;
        private static bool _TETHER_ERROR_DUPLICATE_REQUESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_ENABLE_FORWARDING_ERROR"/>
        /// </summary>
        public static int TETHER_ERROR_ENABLE_FORWARDING_ERROR { get { if (!_TETHER_ERROR_ENABLE_FORWARDING_ERRORReady) { _TETHER_ERROR_ENABLE_FORWARDING_ERRORContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_ENABLE_FORWARDING_ERROR"); _TETHER_ERROR_ENABLE_FORWARDING_ERRORReady = true; } return _TETHER_ERROR_ENABLE_FORWARDING_ERRORContent; } }
        private static int _TETHER_ERROR_ENABLE_FORWARDING_ERRORContent = default;
        private static bool _TETHER_ERROR_ENABLE_FORWARDING_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_ENTITLEMENT_UNKNOWN"/>
        /// </summary>
        public static int TETHER_ERROR_ENTITLEMENT_UNKNOWN { get { if (!_TETHER_ERROR_ENTITLEMENT_UNKNOWNReady) { _TETHER_ERROR_ENTITLEMENT_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_ENTITLEMENT_UNKNOWN"); _TETHER_ERROR_ENTITLEMENT_UNKNOWNReady = true; } return _TETHER_ERROR_ENTITLEMENT_UNKNOWNContent; } }
        private static int _TETHER_ERROR_ENTITLEMENT_UNKNOWNContent = default;
        private static bool _TETHER_ERROR_ENTITLEMENT_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_IFACE_CFG_ERROR"/>
        /// </summary>
        public static int TETHER_ERROR_IFACE_CFG_ERROR { get { if (!_TETHER_ERROR_IFACE_CFG_ERRORReady) { _TETHER_ERROR_IFACE_CFG_ERRORContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_IFACE_CFG_ERROR"); _TETHER_ERROR_IFACE_CFG_ERRORReady = true; } return _TETHER_ERROR_IFACE_CFG_ERRORContent; } }
        private static int _TETHER_ERROR_IFACE_CFG_ERRORContent = default;
        private static bool _TETHER_ERROR_IFACE_CFG_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_INTERNAL_ERROR"/>
        /// </summary>
        public static int TETHER_ERROR_INTERNAL_ERROR { get { if (!_TETHER_ERROR_INTERNAL_ERRORReady) { _TETHER_ERROR_INTERNAL_ERRORContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_INTERNAL_ERROR"); _TETHER_ERROR_INTERNAL_ERRORReady = true; } return _TETHER_ERROR_INTERNAL_ERRORContent; } }
        private static int _TETHER_ERROR_INTERNAL_ERRORContent = default;
        private static bool _TETHER_ERROR_INTERNAL_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_NO_ACCESS_TETHERING_PERMISSION"/>
        /// </summary>
        public static int TETHER_ERROR_NO_ACCESS_TETHERING_PERMISSION { get { if (!_TETHER_ERROR_NO_ACCESS_TETHERING_PERMISSIONReady) { _TETHER_ERROR_NO_ACCESS_TETHERING_PERMISSIONContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_NO_ACCESS_TETHERING_PERMISSION"); _TETHER_ERROR_NO_ACCESS_TETHERING_PERMISSIONReady = true; } return _TETHER_ERROR_NO_ACCESS_TETHERING_PERMISSIONContent; } }
        private static int _TETHER_ERROR_NO_ACCESS_TETHERING_PERMISSIONContent = default;
        private static bool _TETHER_ERROR_NO_ACCESS_TETHERING_PERMISSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSION"/>
        /// </summary>
        public static int TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSION { get { if (!_TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSIONReady) { _TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSIONContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSION"); _TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSIONReady = true; } return _TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSIONContent; } }
        private static int _TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSIONContent = default;
        private static bool _TETHER_ERROR_NO_CHANGE_TETHERING_PERMISSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_NO_ERROR"/>
        /// </summary>
        public static int TETHER_ERROR_NO_ERROR { get { if (!_TETHER_ERROR_NO_ERRORReady) { _TETHER_ERROR_NO_ERRORContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_NO_ERROR"); _TETHER_ERROR_NO_ERRORReady = true; } return _TETHER_ERROR_NO_ERRORContent; } }
        private static int _TETHER_ERROR_NO_ERRORContent = default;
        private static bool _TETHER_ERROR_NO_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_PROVISIONING_FAILED"/>
        /// </summary>
        public static int TETHER_ERROR_PROVISIONING_FAILED { get { if (!_TETHER_ERROR_PROVISIONING_FAILEDReady) { _TETHER_ERROR_PROVISIONING_FAILEDContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_PROVISIONING_FAILED"); _TETHER_ERROR_PROVISIONING_FAILEDReady = true; } return _TETHER_ERROR_PROVISIONING_FAILEDContent; } }
        private static int _TETHER_ERROR_PROVISIONING_FAILEDContent = default;
        private static bool _TETHER_ERROR_PROVISIONING_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_SERVICE_UNAVAIL"/>
        /// </summary>
        public static int TETHER_ERROR_SERVICE_UNAVAIL { get { if (!_TETHER_ERROR_SERVICE_UNAVAILReady) { _TETHER_ERROR_SERVICE_UNAVAILContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_SERVICE_UNAVAIL"); _TETHER_ERROR_SERVICE_UNAVAILReady = true; } return _TETHER_ERROR_SERVICE_UNAVAILContent; } }
        private static int _TETHER_ERROR_SERVICE_UNAVAILContent = default;
        private static bool _TETHER_ERROR_SERVICE_UNAVAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_TETHER_IFACE_ERROR"/>
        /// </summary>
        public static int TETHER_ERROR_TETHER_IFACE_ERROR { get { if (!_TETHER_ERROR_TETHER_IFACE_ERRORReady) { _TETHER_ERROR_TETHER_IFACE_ERRORContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_TETHER_IFACE_ERROR"); _TETHER_ERROR_TETHER_IFACE_ERRORReady = true; } return _TETHER_ERROR_TETHER_IFACE_ERRORContent; } }
        private static int _TETHER_ERROR_TETHER_IFACE_ERRORContent = default;
        private static bool _TETHER_ERROR_TETHER_IFACE_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_UNAVAIL_IFACE"/>
        /// </summary>
        public static int TETHER_ERROR_UNAVAIL_IFACE { get { if (!_TETHER_ERROR_UNAVAIL_IFACEReady) { _TETHER_ERROR_UNAVAIL_IFACEContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_UNAVAIL_IFACE"); _TETHER_ERROR_UNAVAIL_IFACEReady = true; } return _TETHER_ERROR_UNAVAIL_IFACEContent; } }
        private static int _TETHER_ERROR_UNAVAIL_IFACEContent = default;
        private static bool _TETHER_ERROR_UNAVAIL_IFACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_UNKNOWN_IFACE"/>
        /// </summary>
        public static int TETHER_ERROR_UNKNOWN_IFACE { get { if (!_TETHER_ERROR_UNKNOWN_IFACEReady) { _TETHER_ERROR_UNKNOWN_IFACEContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_UNKNOWN_IFACE"); _TETHER_ERROR_UNKNOWN_IFACEReady = true; } return _TETHER_ERROR_UNKNOWN_IFACEContent; } }
        private static int _TETHER_ERROR_UNKNOWN_IFACEContent = default;
        private static bool _TETHER_ERROR_UNKNOWN_IFACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_UNKNOWN_REQUEST"/>
        /// </summary>
        public static int TETHER_ERROR_UNKNOWN_REQUEST { get { if (!_TETHER_ERROR_UNKNOWN_REQUESTReady) { _TETHER_ERROR_UNKNOWN_REQUESTContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_UNKNOWN_REQUEST"); _TETHER_ERROR_UNKNOWN_REQUESTReady = true; } return _TETHER_ERROR_UNKNOWN_REQUESTContent; } }
        private static int _TETHER_ERROR_UNKNOWN_REQUESTContent = default;
        private static bool _TETHER_ERROR_UNKNOWN_REQUESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_UNKNOWN_TYPE"/>
        /// </summary>
        public static int TETHER_ERROR_UNKNOWN_TYPE { get { if (!_TETHER_ERROR_UNKNOWN_TYPEReady) { _TETHER_ERROR_UNKNOWN_TYPEContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_UNKNOWN_TYPE"); _TETHER_ERROR_UNKNOWN_TYPEReady = true; } return _TETHER_ERROR_UNKNOWN_TYPEContent; } }
        private static int _TETHER_ERROR_UNKNOWN_TYPEContent = default;
        private static bool _TETHER_ERROR_UNKNOWN_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_UNSUPPORTED"/>
        /// </summary>
        public static int TETHER_ERROR_UNSUPPORTED { get { if (!_TETHER_ERROR_UNSUPPORTEDReady) { _TETHER_ERROR_UNSUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_UNSUPPORTED"); _TETHER_ERROR_UNSUPPORTEDReady = true; } return _TETHER_ERROR_UNSUPPORTEDContent; } }
        private static int _TETHER_ERROR_UNSUPPORTEDContent = default;
        private static bool _TETHER_ERROR_UNSUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHER_ERROR_UNTETHER_IFACE_ERROR"/>
        /// </summary>
        public static int TETHER_ERROR_UNTETHER_IFACE_ERROR { get { if (!_TETHER_ERROR_UNTETHER_IFACE_ERRORReady) { _TETHER_ERROR_UNTETHER_IFACE_ERRORContent = SGetField<int>(LocalBridgeClazz, "TETHER_ERROR_UNTETHER_IFACE_ERROR"); _TETHER_ERROR_UNTETHER_IFACE_ERRORReady = true; } return _TETHER_ERROR_UNTETHER_IFACE_ERRORContent; } }
        private static int _TETHER_ERROR_UNTETHER_IFACE_ERRORContent = default;
        private static bool _TETHER_ERROR_UNTETHER_IFACE_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#TETHERING_WIFI"/>
        /// </summary>
        public static int TETHERING_WIFI { get { if (!_TETHERING_WIFIReady) { _TETHERING_WIFIContent = SGetField<int>(LocalBridgeClazz, "TETHERING_WIFI"); _TETHERING_WIFIReady = true; } return _TETHERING_WIFIContent; } }
        private static int _TETHERING_WIFIContent = default;
        private static bool _TETHERING_WIFIReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#registerTetheringEventCallback(java.util.concurrent.Executor,android.net.TetheringManager.TetheringEventCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Net.TetheringManager.TetheringEventCallback"/></param>
        public void RegisterTetheringEventCallback(Java.Util.Concurrent.Executor arg0, Android.Net.TetheringManager.TetheringEventCallback arg1)
        {
            IExecuteWithSignature("registerTetheringEventCallback", "(Ljava/util/concurrent/Executor;Landroid/net/TetheringManager$TetheringEventCallback;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#startTethering(android.net.TetheringManager.TetheringRequest,java.util.concurrent.Executor,android.net.TetheringManager.StartTetheringCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.TetheringManager.TetheringRequest"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Net.TetheringManager.StartTetheringCallback"/></param>
        public void StartTethering(Android.Net.TetheringManager.TetheringRequest arg0, Java.Util.Concurrent.Executor arg1, Android.Net.TetheringManager.StartTetheringCallback arg2)
        {
            IExecuteWithSignature("startTethering", "(Landroid/net/TetheringManager$TetheringRequest;Ljava/util/concurrent/Executor;Landroid/net/TetheringManager$StartTetheringCallback;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#stopTethering(android.net.TetheringManager.TetheringRequest,java.util.concurrent.Executor,android.net.TetheringManager.StopTetheringCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.TetheringManager.TetheringRequest"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Net.TetheringManager.StopTetheringCallback"/></param>
        public void StopTethering(Android.Net.TetheringManager.TetheringRequest arg0, Java.Util.Concurrent.Executor arg1, Android.Net.TetheringManager.StopTetheringCallback arg2)
        {
            IExecuteWithSignature("stopTethering", "(Landroid/net/TetheringManager$TetheringRequest;Ljava/util/concurrent/Executor;Landroid/net/TetheringManager$StopTetheringCallback;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/net/TetheringManager.html#unregisterTetheringEventCallback(android.net.TetheringManager.TetheringEventCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Net.TetheringManager.TetheringEventCallback"/></param>
        public void UnregisterTetheringEventCallback(Android.Net.TetheringManager.TetheringEventCallback arg0)
        {
            IExecuteWithSignature("unregisterTetheringEventCallback", "(Landroid/net/TetheringManager$TetheringEventCallback;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region StartTetheringCallback implementation
        public partial class StartTetheringCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/TetheringManager.StartTetheringCallback.html#onTetheringFailed(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnTetheringFailed(int arg0)
            {
                IExecuteWithSignature("onTetheringFailed", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/TetheringManager.StartTetheringCallback.html#onTetheringStarted()"/>
            /// </summary>
            public void OnTetheringStarted()
            {
                IExecuteWithSignature("onTetheringStarted", "()V");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region StopTetheringCallback implementation
        public partial class StopTetheringCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/TetheringManager.StopTetheringCallback.html#onStopTetheringFailed(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnStopTetheringFailed(int arg0)
            {
                IExecuteWithSignature("onStopTetheringFailed", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/TetheringManager.StopTetheringCallback.html#onStopTetheringSucceeded()"/>
            /// </summary>
            public void OnStopTetheringSucceeded()
            {
                IExecuteWithSignature("onStopTetheringSucceeded", "()V");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region TetheringEventCallback implementation
        public partial class TetheringEventCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/TetheringManager.TetheringEventCallback.html#onTetheredInterfacesChanged(java.util.Set)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Set"/></param>
            public void OnTetheredInterfacesChanged(Java.Util.Set<Android.Net.TetheringInterface> arg0)
            {
                IExecuteWithSignature("onTetheredInterfacesChanged", "(Ljava/util/Set;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region TetheringRequest implementation
        public partial class TetheringRequest
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/TetheringManager.TetheringRequest.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/TetheringManager.TetheringRequest.html#getSoftApConfiguration()"/>
            /// </summary>
            /// <returns><see cref="Android.Net.Wifi.SoftApConfiguration"/></returns>
            public Android.Net.Wifi.SoftApConfiguration GetSoftApConfiguration()
            {
                return IExecuteWithSignature<Android.Net.Wifi.SoftApConfiguration>("getSoftApConfiguration", "()Landroid/net/wifi/SoftApConfiguration;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/TetheringManager.TetheringRequest.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/net/TetheringManager.TetheringRequest.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }
        
            #endregion
        
            #region Nested classes
            #region Builder implementation
            public partial class Builder
            {
                #region Constructors
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/net/TetheringManager.TetheringRequest.Builder.html#%3Cinit%3E(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                public Builder(int arg0)
                    : base(arg0)
                {
                }
            
                #endregion
            
                #region Class/Interface conversion operators
            
                #endregion
            
                #region Fields
            
                #endregion
            
                #region Static methods
            
                #endregion
            
                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/net/TetheringManager.TetheringRequest.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.Net.TetheringManager.TetheringRequest"/></returns>
                public Android.Net.TetheringManager.TetheringRequest Build()
                {
                    return IExecute<Android.Net.TetheringManager.TetheringRequest>("build");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/net/TetheringManager.TetheringRequest.Builder.html#setSoftApConfiguration(android.net.wifi.SoftApConfiguration)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Net.Wifi.SoftApConfiguration"/></param>
                /// <returns><see cref="Android.Net.TetheringManager.TetheringRequest.Builder"/></returns>
                public Android.Net.TetheringManager.TetheringRequest.Builder SetSoftApConfiguration(Android.Net.Wifi.SoftApConfiguration arg0)
                {
                    return IExecute<Android.Net.TetheringManager.TetheringRequest.Builder>("setSoftApConfiguration", arg0);
                }
            
                #endregion
            
                #region Nested classes
            
                #endregion
            
                // TODO: complete the class
            }
            #endregion

        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
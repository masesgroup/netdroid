/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Widget.Photopicker
{
    #region EmbeddedPhotoPickerSession declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerSession.html"/>
    /// </summary>
    public partial class EmbeddedPhotoPickerSession : MASES.JCOBridge.C2JBridge.JVMBridgeBase<EmbeddedPhotoPickerSession>
    {
        const string _bridgeClassName = "android.widget.photopicker.EmbeddedPhotoPickerSession";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("EmbeddedPhotoPickerSession class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public EmbeddedPhotoPickerSession() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public EmbeddedPhotoPickerSession(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("EmbeddedPhotoPickerSession class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public EmbeddedPhotoPickerSession(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => true;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => true;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region IEmbeddedPhotoPickerSession
    /// <summary>
    /// .NET interface skeleton to be manually developed following <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerSession.html"/>
    /// </summary>
    public partial interface IEmbeddedPhotoPickerSession
    {
        #region Instance methods
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion

    #region EmbeddedPhotoPickerSession implementation
    public partial class EmbeddedPhotoPickerSession : Android.Widget.Photopicker.IEmbeddedPhotoPickerSession
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerSession.html#getSurfacePackage()"/>
        /// </summary>
        /// <returns><see cref="Android.View.SurfaceControlViewHost.SurfacePackage"/></returns>
        public Android.View.SurfaceControlViewHost.SurfacePackage GetSurfacePackage()
        {
            return IExecuteWithSignature<Android.View.SurfaceControlViewHost.SurfacePackage>("getSurfacePackage", "()Landroid/view/SurfaceControlViewHost$SurfacePackage;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerSession.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerSession.html#notifyConfigurationChanged(android.content.res.Configuration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Configuration"/></param>
        public void NotifyConfigurationChanged(Android.Content.Res.Configuration arg0)
        {
            IExecuteWithSignature("notifyConfigurationChanged", "(Landroid/content/res/Configuration;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerSession.html#notifyPhotoPickerExpanded(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void NotifyPhotoPickerExpanded(bool arg0)
        {
            IExecuteWithSignature("notifyPhotoPickerExpanded", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerSession.html#notifyResized(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void NotifyResized(int arg0, int arg1)
        {
            IExecuteWithSignature("notifyResized", "(II)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerSession.html#notifyVisibilityChanged(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void NotifyVisibilityChanged(bool arg0)
        {
            IExecuteWithSignature("notifyVisibilityChanged", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerSession.html#requestRevokeUriPermission(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void RequestRevokeUriPermission(Java.Util.List<Android.Net.Uri> arg0)
        {
            IExecuteWithSignature("requestRevokeUriPermission", "(Ljava/util/List;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
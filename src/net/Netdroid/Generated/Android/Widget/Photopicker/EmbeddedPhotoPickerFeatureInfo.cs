/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Widget.Photopicker
{
    #region EmbeddedPhotoPickerFeatureInfo declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.html"/>
    /// </summary>
    public partial class EmbeddedPhotoPickerFeatureInfo : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.widget.photopicker.EmbeddedPhotoPickerFeatureInfo";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public EmbeddedPhotoPickerFeatureInfo() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public EmbeddedPhotoPickerFeatureInfo(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public EmbeddedPhotoPickerFeatureInfo(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.widget.photopicker.EmbeddedPhotoPickerFeatureInfo$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Builder(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region EmbeddedPhotoPickerFeatureInfo implementation
    public partial class EmbeddedPhotoPickerFeatureInfo
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.html#isOrderedSelection()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsOrderedSelection()
        {
            return IExecuteWithSignature<bool>("isOrderedSelection", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.html#getMaxSelectionLimit()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxSelectionLimit()
        {
            return IExecuteWithSignature<int>("getMaxSelectionLimit", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.html#getThemeNightMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetThemeNightMode()
        {
            return IExecuteWithSignature<int>("getThemeNightMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.html#getPreSelectedUris()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Net.Uri> GetPreSelectedUris()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Net.Uri>>("getPreSelectedUris", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.html#getMimeTypes()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetMimeTypes()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getMimeTypes", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.html#getAccentColor()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetAccentColor()
        {
            return IExecuteWithSignature<long>("getAccentColor", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo"/></returns>
            public Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo Build()
            {
                return IExecuteWithSignature<Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo>("build", "()Landroid/widget/photopicker/EmbeddedPhotoPickerFeatureInfo;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.Builder.html#setAccentColor(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder"/></returns>
            public Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder SetAccentColor(long arg0)
            {
                return IExecuteWithSignature<Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder>("setAccentColor", "(J)Landroid/widget/photopicker/EmbeddedPhotoPickerFeatureInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.Builder.html#setMaxSelectionLimit(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder"/></returns>
            public Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder SetMaxSelectionLimit(int arg0)
            {
                return IExecuteWithSignature<Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder>("setMaxSelectionLimit", "(I)Landroid/widget/photopicker/EmbeddedPhotoPickerFeatureInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.Builder.html#setMimeTypes(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <returns><see cref="Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder"/></returns>
            public Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder SetMimeTypes(Java.Util.List<Java.Lang.String> arg0)
            {
                return IExecuteWithSignature<Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder>("setMimeTypes", "(Ljava/util/List;)Landroid/widget/photopicker/EmbeddedPhotoPickerFeatureInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.Builder.html#setOrderedSelection(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder"/></returns>
            public Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder SetOrderedSelection(bool arg0)
            {
                return IExecuteWithSignature<Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder>("setOrderedSelection", "(Z)Landroid/widget/photopicker/EmbeddedPhotoPickerFeatureInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.Builder.html#setPreSelectedUris(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <returns><see cref="Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder"/></returns>
            public Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder SetPreSelectedUris(Java.Util.List<Android.Net.Uri> arg0)
            {
                return IExecuteWithSignature<Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder>("setPreSelectedUris", "(Ljava/util/List;)Landroid/widget/photopicker/EmbeddedPhotoPickerFeatureInfo$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/photopicker/EmbeddedPhotoPickerFeatureInfo.Builder.html#setThemeNightMode(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder"/></returns>
            public Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder SetThemeNightMode(int arg0)
            {
                return IExecuteWithSignature<Android.Widget.Photopicker.EmbeddedPhotoPickerFeatureInfo.Builder>("setThemeNightMode", "(I)Landroid/widget/photopicker/EmbeddedPhotoPickerFeatureInfo$Builder;", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Widget
{
    #region PopupWindow
    public partial class PopupWindow
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public PopupWindow(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2, int arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public PopupWindow(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        public PopupWindow(Android.Content.Context arg0, Android.Util.AttributeSet arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        public PopupWindow(Android.Content.Context arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#%3Cinit%3E(android.view.View,int,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        public PopupWindow(Android.View.View arg0, int arg1, int arg2, bool arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#%3Cinit%3E(android.view.View,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public PopupWindow(Android.View.View arg0, int arg1, int arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#%3Cinit%3E(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public PopupWindow(Android.View.View arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#%3Cinit%3E(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public PopupWindow(int arg0, int arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#INPUT_METHOD_FROM_FOCUSABLE"/>
        /// </summary>
        public static int INPUT_METHOD_FROM_FOCUSABLE { get { if (!_INPUT_METHOD_FROM_FOCUSABLEReady) { _INPUT_METHOD_FROM_FOCUSABLEContent = SGetField<int>(LocalBridgeClazz, "INPUT_METHOD_FROM_FOCUSABLE"); _INPUT_METHOD_FROM_FOCUSABLEReady = true; } return _INPUT_METHOD_FROM_FOCUSABLEContent; } }
        private static int _INPUT_METHOD_FROM_FOCUSABLEContent = default;
        private static bool _INPUT_METHOD_FROM_FOCUSABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#INPUT_METHOD_NEEDED"/>
        /// </summary>
        public static int INPUT_METHOD_NEEDED { get { if (!_INPUT_METHOD_NEEDEDReady) { _INPUT_METHOD_NEEDEDContent = SGetField<int>(LocalBridgeClazz, "INPUT_METHOD_NEEDED"); _INPUT_METHOD_NEEDEDReady = true; } return _INPUT_METHOD_NEEDEDContent; } }
        private static int _INPUT_METHOD_NEEDEDContent = default;
        private static bool _INPUT_METHOD_NEEDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#INPUT_METHOD_NOT_NEEDED"/>
        /// </summary>
        public static int INPUT_METHOD_NOT_NEEDED { get { if (!_INPUT_METHOD_NOT_NEEDEDReady) { _INPUT_METHOD_NOT_NEEDEDContent = SGetField<int>(LocalBridgeClazz, "INPUT_METHOD_NOT_NEEDED"); _INPUT_METHOD_NOT_NEEDEDReady = true; } return _INPUT_METHOD_NOT_NEEDEDContent; } }
        private static int _INPUT_METHOD_NOT_NEEDEDContent = default;
        private static bool _INPUT_METHOD_NOT_NEEDEDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#getBackground()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetBackground()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getBackground", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#getEpicenterBounds()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Rect"/></returns>
        public Android.Graphics.Rect GetEpicenterBounds()
        {
            return IExecuteWithSignature<Android.Graphics.Rect>("getEpicenterBounds", "()Landroid/graphics/Rect;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#getEnterTransition()"/>
        /// </summary>
        /// <returns><see cref="Android.Transition.Transition"/></returns>
        public Android.Transition.Transition GetEnterTransition()
        {
            return IExecuteWithSignature<Android.Transition.Transition>("getEnterTransition", "()Landroid/transition/Transition;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#getExitTransition()"/>
        /// </summary>
        /// <returns><see cref="Android.Transition.Transition"/></returns>
        public Android.Transition.Transition GetExitTransition()
        {
            return IExecuteWithSignature<Android.Transition.Transition>("getExitTransition", "()Landroid/transition/Transition;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#getContentView()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View"/></returns>
        public Android.View.View GetContentView()
        {
            return IExecuteWithSignature<Android.View.View>("getContentView", "()Landroid/view/View;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#getOverlapAnchor()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetOverlapAnchor()
        {
            return IExecuteWithSignature<bool>("getOverlapAnchor", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#isAboveAnchor()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAboveAnchor()
        {
            return IExecuteWithSignature<bool>("isAboveAnchor", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#isAttachedInDecor()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAttachedInDecor()
        {
            return IExecuteWithSignature<bool>("isAttachedInDecor", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#isClippedToScreen()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsClippedToScreen()
        {
            return IExecuteWithSignature<bool>("isClippedToScreen", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#isClippingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsClippingEnabled()
        {
            return IExecuteWithSignature<bool>("isClippingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#isFocusable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFocusable()
        {
            return IExecuteWithSignature<bool>("isFocusable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#isLaidOutInScreen()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLaidOutInScreen()
        {
            return IExecuteWithSignature<bool>("isLaidOutInScreen", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#isOutsideTouchable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsOutsideTouchable()
        {
            return IExecuteWithSignature<bool>("isOutsideTouchable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#isShowing()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsShowing()
        {
            return IExecuteWithSignature<bool>("isShowing", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#isSplitTouchEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSplitTouchEnabled()
        {
            return IExecuteWithSignature<bool>("isSplitTouchEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#isTouchable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTouchable()
        {
            return IExecuteWithSignature<bool>("isTouchable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#isTouchModal()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTouchModal()
        {
            return IExecuteWithSignature<bool>("isTouchModal", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#getElevation()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetElevation()
        {
            return IExecuteWithSignature<float>("getElevation", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#getAnimationStyle()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAnimationStyle()
        {
            return IExecuteWithSignature<int>("getAnimationStyle", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#getHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHeight()
        {
            return IExecuteWithSignature<int>("getHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#getInputMethodMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetInputMethodMode()
        {
            return IExecuteWithSignature<int>("getInputMethodMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#getMaxAvailableHeight(android.view.View,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetMaxAvailableHeight(Android.View.View arg0, int arg1, bool arg2)
        {
            return IExecute<int>("getMaxAvailableHeight", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#getMaxAvailableHeight(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetMaxAvailableHeight(Android.View.View arg0, int arg1)
        {
            return IExecute<int>("getMaxAvailableHeight", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#getMaxAvailableHeight(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetMaxAvailableHeight(Android.View.View arg0)
        {
            return IExecuteWithSignature<int>("getMaxAvailableHeight", "(Landroid/view/View;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#getSoftInputMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSoftInputMode()
        {
            return IExecuteWithSignature<int>("getSoftInputMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#getWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetWidth()
        {
            return IExecuteWithSignature<int>("getWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#getWindowLayoutType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetWindowLayoutType()
        {
            return IExecuteWithSignature<int>("getWindowLayoutType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#dismiss()"/>
        /// </summary>
        public void Dismiss()
        {
            IExecuteWithSignature("dismiss", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setAnimationStyle(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAnimationStyle(int arg0)
        {
            IExecuteWithSignature("setAnimationStyle", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setAttachedInDecor(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAttachedInDecor(bool arg0)
        {
            IExecuteWithSignature("setAttachedInDecor", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setBackgroundDrawable(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetBackgroundDrawable(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setBackgroundDrawable", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setClippingEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetClippingEnabled(bool arg0)
        {
            IExecuteWithSignature("setClippingEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setContentView(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void SetContentView(Android.View.View arg0)
        {
            IExecuteWithSignature("setContentView", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setElevation(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetElevation(float arg0)
        {
            IExecuteWithSignature("setElevation", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setEnterTransition(android.transition.Transition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Transition.Transition"/></param>
        public void SetEnterTransition(Android.Transition.Transition arg0)
        {
            IExecuteWithSignature("setEnterTransition", "(Landroid/transition/Transition;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setEpicenterBounds(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public void SetEpicenterBounds(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("setEpicenterBounds", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setExitTransition(android.transition.Transition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Transition.Transition"/></param>
        public void SetExitTransition(Android.Transition.Transition arg0)
        {
            IExecuteWithSignature("setExitTransition", "(Landroid/transition/Transition;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setFocusable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFocusable(bool arg0)
        {
            IExecuteWithSignature("setFocusable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setHeight(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetHeight(int arg0)
        {
            IExecuteWithSignature("setHeight", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setIgnoreCheekPress()"/>
        /// </summary>
        public void SetIgnoreCheekPress()
        {
            IExecuteWithSignature("setIgnoreCheekPress", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setInputMethodMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetInputMethodMode(int arg0)
        {
            IExecuteWithSignature("setInputMethodMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setIsClippedToScreen(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetIsClippedToScreen(bool arg0)
        {
            IExecuteWithSignature("setIsClippedToScreen", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setIsLaidOutInScreen(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetIsLaidOutInScreen(bool arg0)
        {
            IExecuteWithSignature("setIsLaidOutInScreen", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setOnDismissListener(android.widget.PopupWindow.OnDismissListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.PopupWindow.OnDismissListener"/></param>
        public void SetOnDismissListener(Android.Widget.PopupWindow.OnDismissListener arg0)
        {
            IExecuteWithSignature("setOnDismissListener", "(Landroid/widget/PopupWindow$OnDismissListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setOutsideTouchable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetOutsideTouchable(bool arg0)
        {
            IExecuteWithSignature("setOutsideTouchable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setOverlapAnchor(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetOverlapAnchor(bool arg0)
        {
            IExecuteWithSignature("setOverlapAnchor", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setSoftInputMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetSoftInputMode(int arg0)
        {
            IExecuteWithSignature("setSoftInputMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setSplitTouchEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSplitTouchEnabled(bool arg0)
        {
            IExecuteWithSignature("setSplitTouchEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setTouchable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetTouchable(bool arg0)
        {
            IExecuteWithSignature("setTouchable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setTouchInterceptor(android.view.View.OnTouchListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnTouchListener"/></param>
        public void SetTouchInterceptor(Android.View.View.OnTouchListener arg0)
        {
            IExecuteWithSignature("setTouchInterceptor", "(Landroid/view/View$OnTouchListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setTouchModal(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetTouchModal(bool arg0)
        {
            IExecuteWithSignature("setTouchModal", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setWidth(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetWidth(int arg0)
        {
            IExecuteWithSignature("setWidth", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setWindowLayoutMode(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetWindowLayoutMode(int arg0, int arg1)
        {
            IExecute("setWindowLayoutMode", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#setWindowLayoutType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetWindowLayoutType(int arg0)
        {
            IExecuteWithSignature("setWindowLayoutType", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#showAsDropDown(android.view.View,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void ShowAsDropDown(Android.View.View arg0, int arg1, int arg2, int arg3)
        {
            IExecute("showAsDropDown", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#showAsDropDown(android.view.View,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void ShowAsDropDown(Android.View.View arg0, int arg1, int arg2)
        {
            IExecute("showAsDropDown", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#showAsDropDown(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void ShowAsDropDown(Android.View.View arg0)
        {
            IExecuteWithSignature("showAsDropDown", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#showAtLocation(android.view.View,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void ShowAtLocation(Android.View.View arg0, int arg1, int arg2, int arg3)
        {
            IExecute("showAtLocation", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#update()"/>
        /// </summary>
        public void Update()
        {
            IExecuteWithSignature("update", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#update(android.view.View,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public void Update(Android.View.View arg0, int arg1, int arg2, int arg3, int arg4)
        {
            IExecute("update", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#update(android.view.View,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void Update(Android.View.View arg0, int arg1, int arg2)
        {
            IExecute("update", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#update(int,int,int,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="bool"/></param>
        public void Update(int arg0, int arg1, int arg2, int arg3, bool arg4)
        {
            IExecute("update", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#update(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void Update(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("update", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.html#update(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void Update(int arg0, int arg1)
        {
            IExecute("update", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region OnDismissListener
        public partial class OnDismissListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnDismissListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDismiss", new global::System.EventHandler<CLRListenerEventArgs<CLREventData>>(OnDismissEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/widget/PopupWindow.OnDismissListener.html#onDismiss()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDismiss"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnDismiss { get; set; } = null;

            void OnDismissEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
            {
                var methodToExecute = (OnOnDismiss != null) ? OnOnDismiss : OnDismiss;
                methodToExecute.Invoke();
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.OnDismissListener.html#onDismiss()"/>
            /// </summary>
            public virtual void OnDismiss()
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnDismissListenerDirect
        public partial class OnDismissListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/PopupWindow.OnDismissListener.html#onDismiss()"/>
            /// </summary>
            public override void OnDismiss()
            {
                IExecuteWithSignature("onDismiss", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
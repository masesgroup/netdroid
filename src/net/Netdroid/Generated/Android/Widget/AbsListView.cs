/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Widget
{
    #region AbsListView declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html"/>
    /// </summary>
    public partial class AbsListView : Android.Widget.AdapterView<Android.Widget.ListAdapter>
    {
        const string _bridgeClassName = "android.widget.AbsListView";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("AbsListView class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public AbsListView() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("AbsListView class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public AbsListView(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region LayoutParams declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.LayoutParams.html"/>
        /// </summary>
        public partial class LayoutParams : Android.View.ViewGroup.LayoutParams
        {
            const string _bridgeClassName = "android.widget.AbsListView$LayoutParams";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public LayoutParams() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public LayoutParams(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region MultiChoiceModeListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.MultiChoiceModeListener.html"/>
        /// </summary>
        public partial class MultiChoiceModeListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public MultiChoiceModeListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.widget.AbsListView_MultiChoiceModeListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region MultiChoiceModeListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="MultiChoiceModeListener"/> or its generic type if there is one
        /// </summary>
        public partial class MultiChoiceModeListenerDirect : MultiChoiceModeListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.widget.AbsListView$MultiChoiceModeListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnScrollListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.OnScrollListener.html"/>
        /// </summary>
        public partial class OnScrollListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnScrollListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.widget.AbsListView_OnScrollListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnScrollListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnScrollListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnScrollListenerDirect : OnScrollListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.widget.AbsListView$OnScrollListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region RecyclerListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.RecyclerListener.html"/>
        /// </summary>
        public partial class RecyclerListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RecyclerListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.widget.AbsListView_RecyclerListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region RecyclerListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="RecyclerListener"/> or its generic type if there is one
        /// </summary>
        public partial class RecyclerListenerDirect : RecyclerListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.widget.AbsListView$RecyclerListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region SelectionBoundsAdjuster declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.SelectionBoundsAdjuster.html"/>
        /// </summary>
        public partial class SelectionBoundsAdjuster : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SelectionBoundsAdjuster>
        {
            const string _bridgeClassName = "android.widget.AbsListView$SelectionBoundsAdjuster";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("SelectionBoundsAdjuster class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public SelectionBoundsAdjuster() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("SelectionBoundsAdjuster class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public SelectionBoundsAdjuster(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region AbsListView implementation
    public partial class AbsListView : Android.Text.ITextWatcher
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public AbsListView(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2, int arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public AbsListView(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        public AbsListView(Android.Content.Context arg0, Android.Util.AttributeSet arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        public AbsListView(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Widget.AbsListView"/> to <see cref="Android.Text.TextWatcher"/>
        /// </summary>
        public static implicit operator Android.Text.TextWatcher(Android.Widget.AbsListView t) => t.Cast<Android.Text.TextWatcher>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#CHOICE_MODE_MULTIPLE"/>
        /// </summary>
        public static int CHOICE_MODE_MULTIPLE { get { if (!_CHOICE_MODE_MULTIPLEReady) { _CHOICE_MODE_MULTIPLEContent = SGetField<int>(LocalBridgeClazz, "CHOICE_MODE_MULTIPLE"); _CHOICE_MODE_MULTIPLEReady = true; } return _CHOICE_MODE_MULTIPLEContent; } }
        private static int _CHOICE_MODE_MULTIPLEContent = default;
        private static bool _CHOICE_MODE_MULTIPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#CHOICE_MODE_MULTIPLE_MODAL"/>
        /// </summary>
        public static int CHOICE_MODE_MULTIPLE_MODAL { get { if (!_CHOICE_MODE_MULTIPLE_MODALReady) { _CHOICE_MODE_MULTIPLE_MODALContent = SGetField<int>(LocalBridgeClazz, "CHOICE_MODE_MULTIPLE_MODAL"); _CHOICE_MODE_MULTIPLE_MODALReady = true; } return _CHOICE_MODE_MULTIPLE_MODALContent; } }
        private static int _CHOICE_MODE_MULTIPLE_MODALContent = default;
        private static bool _CHOICE_MODE_MULTIPLE_MODALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#CHOICE_MODE_NONE"/>
        /// </summary>
        public static int CHOICE_MODE_NONE { get { if (!_CHOICE_MODE_NONEReady) { _CHOICE_MODE_NONEContent = SGetField<int>(LocalBridgeClazz, "CHOICE_MODE_NONE"); _CHOICE_MODE_NONEReady = true; } return _CHOICE_MODE_NONEContent; } }
        private static int _CHOICE_MODE_NONEContent = default;
        private static bool _CHOICE_MODE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#CHOICE_MODE_SINGLE"/>
        /// </summary>
        public static int CHOICE_MODE_SINGLE { get { if (!_CHOICE_MODE_SINGLEReady) { _CHOICE_MODE_SINGLEContent = SGetField<int>(LocalBridgeClazz, "CHOICE_MODE_SINGLE"); _CHOICE_MODE_SINGLEReady = true; } return _CHOICE_MODE_SINGLEContent; } }
        private static int _CHOICE_MODE_SINGLEContent = default;
        private static bool _CHOICE_MODE_SINGLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#TRANSCRIPT_MODE_ALWAYS_SCROLL"/>
        /// </summary>
        public static int TRANSCRIPT_MODE_ALWAYS_SCROLL { get { if (!_TRANSCRIPT_MODE_ALWAYS_SCROLLReady) { _TRANSCRIPT_MODE_ALWAYS_SCROLLContent = SGetField<int>(LocalBridgeClazz, "TRANSCRIPT_MODE_ALWAYS_SCROLL"); _TRANSCRIPT_MODE_ALWAYS_SCROLLReady = true; } return _TRANSCRIPT_MODE_ALWAYS_SCROLLContent; } }
        private static int _TRANSCRIPT_MODE_ALWAYS_SCROLLContent = default;
        private static bool _TRANSCRIPT_MODE_ALWAYS_SCROLLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#TRANSCRIPT_MODE_DISABLED"/>
        /// </summary>
        public static int TRANSCRIPT_MODE_DISABLED { get { if (!_TRANSCRIPT_MODE_DISABLEDReady) { _TRANSCRIPT_MODE_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "TRANSCRIPT_MODE_DISABLED"); _TRANSCRIPT_MODE_DISABLEDReady = true; } return _TRANSCRIPT_MODE_DISABLEDContent; } }
        private static int _TRANSCRIPT_MODE_DISABLEDContent = default;
        private static bool _TRANSCRIPT_MODE_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#TRANSCRIPT_MODE_NORMAL"/>
        /// </summary>
        public static int TRANSCRIPT_MODE_NORMAL { get { if (!_TRANSCRIPT_MODE_NORMALReady) { _TRANSCRIPT_MODE_NORMALContent = SGetField<int>(LocalBridgeClazz, "TRANSCRIPT_MODE_NORMAL"); _TRANSCRIPT_MODE_NORMALReady = true; } return _TRANSCRIPT_MODE_NORMALContent; } }
        private static int _TRANSCRIPT_MODE_NORMALContent = default;
        private static bool _TRANSCRIPT_MODE_NORMALReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#getSelector()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetSelector()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getSelector", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#onSaveInstanceState()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Parcelable"/></returns>
        public Android.Os.Parcelable OnSaveInstanceState()
        {
            return IExecuteWithSignature<Android.Os.Parcelable>("onSaveInstanceState", "()Landroid/os/Parcelable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#getCheckedItemPositions()"/>
        /// </summary>
        /// <returns><see cref="Android.Util.SparseBooleanArray"/></returns>
        public Android.Util.SparseBooleanArray GetCheckedItemPositions()
        {
            return IExecuteWithSignature<Android.Util.SparseBooleanArray>("getCheckedItemPositions", "()Landroid/util/SparseBooleanArray;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#canScrollList(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CanScrollList(int arg0)
        {
            return IExecuteWithSignature<bool>("canScrollList", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#hasTextFilter()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasTextFilter()
        {
            return IExecuteWithSignature<bool>("hasTextFilter", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#isDrawSelectorOnTop()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDrawSelectorOnTop()
        {
            return IExecuteWithSignature<bool>("isDrawSelectorOnTop", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#isFastScrollAlwaysVisible()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFastScrollAlwaysVisible()
        {
            return IExecuteWithSignature<bool>("isFastScrollAlwaysVisible", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#isFastScrollEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFastScrollEnabled()
        {
            return IExecuteWithSignature<bool>("isFastScrollEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#isItemChecked(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsItemChecked(int arg0)
        {
            return IExecuteWithSignature<bool>("isItemChecked", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#isScrollingCacheEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsScrollingCacheEnabled()
        {
            return IExecuteWithSignature<bool>("isScrollingCacheEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#isSelectedChildViewEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSelectedChildViewEnabled()
        {
            return IExecuteWithSignature<bool>("isSelectedChildViewEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#isSmoothScrollbarEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSmoothScrollbarEnabled()
        {
            return IExecuteWithSignature<bool>("isSmoothScrollbarEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#isStackFromBottom()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsStackFromBottom()
        {
            return IExecuteWithSignature<bool>("isStackFromBottom", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#isTextFilterEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTextFilterEnabled()
        {
            return IExecuteWithSignature<bool>("isTextFilterEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#onRemoteAdapterConnected()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool OnRemoteAdapterConnected()
        {
            return IExecuteWithSignature<bool>("onRemoteAdapterConnected", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#verifyDrawable(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool VerifyDrawable(Android.Graphics.Drawable.Drawable arg0)
        {
            return IExecuteWithSignature<bool>("verifyDrawable", "(Landroid/graphics/drawable/Drawable;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#getBottomEdgeEffectColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetBottomEdgeEffectColor()
        {
            return IExecuteWithSignature<int>("getBottomEdgeEffectColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#getCacheColorHint()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCacheColorHint()
        {
            return IExecuteWithSignature<int>("getCacheColorHint", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#getCheckedItemCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCheckedItemCount()
        {
            return IExecuteWithSignature<int>("getCheckedItemCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#getCheckedItemPosition()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCheckedItemPosition()
        {
            return IExecuteWithSignature<int>("getCheckedItemPosition", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#getChoiceMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetChoiceMode()
        {
            return IExecuteWithSignature<int>("getChoiceMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#getListPaddingBottom()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetListPaddingBottom()
        {
            return IExecuteWithSignature<int>("getListPaddingBottom", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#getListPaddingLeft()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetListPaddingLeft()
        {
            return IExecuteWithSignature<int>("getListPaddingLeft", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#getListPaddingRight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetListPaddingRight()
        {
            return IExecuteWithSignature<int>("getListPaddingRight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#getListPaddingTop()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetListPaddingTop()
        {
            return IExecuteWithSignature<int>("getListPaddingTop", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#getTopEdgeEffectColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTopEdgeEffectColor()
        {
            return IExecuteWithSignature<int>("getTopEdgeEffectColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#getTranscriptMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTranscriptMode()
        {
            return IExecuteWithSignature<int>("getTranscriptMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#pointToPosition(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int PointToPosition(int arg0, int arg1)
        {
            return IExecute<int>("pointToPosition", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#getTextFilter()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetTextFilter()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getTextFilter", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#pointToRowId(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public long PointToRowId(int arg0, int arg1)
        {
            return IExecute<long>("pointToRowId", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#getCheckedItemIds()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long[] GetCheckedItemIds()
        {
            return IExecuteWithSignatureArray<long>("getCheckedItemIds", "()[J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#afterTextChanged(android.text.Editable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Editable"/></param>
        public void AfterTextChanged(Android.Text.Editable arg0)
        {
            IExecuteWithSignature("afterTextChanged", "(Landroid/text/Editable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#beforeTextChanged(java.lang.CharSequence,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void BeforeTextChanged(Java.Lang.CharSequence arg0, int arg1, int arg2, int arg3)
        {
            IExecute("beforeTextChanged", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#clearChoices()"/>
        /// </summary>
        public void ClearChoices()
        {
            IExecuteWithSignature("clearChoices", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#clearTextFilter()"/>
        /// </summary>
        public void ClearTextFilter()
        {
            IExecuteWithSignature("clearTextFilter", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#deferNotifyDataSetChanged()"/>
        /// </summary>
        public void DeferNotifyDataSetChanged()
        {
            IExecuteWithSignature("deferNotifyDataSetChanged", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#fling(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void Fling(int arg0)
        {
            IExecuteWithSignature("fling", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#invalidateViews()"/>
        /// </summary>
        public void InvalidateViews()
        {
            IExecuteWithSignature("invalidateViews", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#onFilterComplete(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OnFilterComplete(int arg0)
        {
            IExecuteWithSignature("onFilterComplete", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#onGlobalLayout()"/>
        /// </summary>
        public void OnGlobalLayout()
        {
            IExecuteWithSignature("onGlobalLayout", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></param>
        public void OnInitializeAccessibilityNodeInfoForItem(Android.View.View arg0, int arg1, Android.View.Accessibility.AccessibilityNodeInfo arg2)
        {
            IExecute("onInitializeAccessibilityNodeInfoForItem", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#onRemoteAdapterDisconnected()"/>
        /// </summary>
        public void OnRemoteAdapterDisconnected()
        {
            IExecuteWithSignature("onRemoteAdapterDisconnected", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#onRestoreInstanceState(android.os.Parcelable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcelable"/></param>
        public void OnRestoreInstanceState(Android.Os.Parcelable arg0)
        {
            IExecuteWithSignature("onRestoreInstanceState", "(Landroid/os/Parcelable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#onTextChanged(java.lang.CharSequence,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void OnTextChanged(Java.Lang.CharSequence arg0, int arg1, int arg2, int arg3)
        {
            IExecute("onTextChanged", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#onTouchModeChanged(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void OnTouchModeChanged(bool arg0)
        {
            IExecuteWithSignature("onTouchModeChanged", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#reclaimViews(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void ReclaimViews(Java.Util.List<Android.View.View> arg0)
        {
            IExecuteWithSignature("reclaimViews", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#scrollListBy(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void ScrollListBy(int arg0)
        {
            IExecuteWithSignature("scrollListBy", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setAdapter(android.widget.ListAdapter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.ListAdapter"/></param>
        public void SetAdapter(Android.Widget.ListAdapter arg0)
        {
            IExecuteWithSignature("setAdapter", "(Landroid/widget/ListAdapter;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setBottomEdgeEffectColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetBottomEdgeEffectColor(int arg0)
        {
            IExecuteWithSignature("setBottomEdgeEffectColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setCacheColorHint(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetCacheColorHint(int arg0)
        {
            IExecuteWithSignature("setCacheColorHint", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setChoiceMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetChoiceMode(int arg0)
        {
            IExecuteWithSignature("setChoiceMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setDrawSelectorOnTop(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetDrawSelectorOnTop(bool arg0)
        {
            IExecuteWithSignature("setDrawSelectorOnTop", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setEdgeEffectColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetEdgeEffectColor(int arg0)
        {
            IExecuteWithSignature("setEdgeEffectColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setFastScrollAlwaysVisible(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFastScrollAlwaysVisible(bool arg0)
        {
            IExecuteWithSignature("setFastScrollAlwaysVisible", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setFastScrollEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFastScrollEnabled(bool arg0)
        {
            IExecuteWithSignature("setFastScrollEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setFastScrollStyle(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetFastScrollStyle(int arg0)
        {
            IExecuteWithSignature("setFastScrollStyle", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setFilterText(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetFilterText(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setFilterText", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setFriction(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetFriction(float arg0)
        {
            IExecuteWithSignature("setFriction", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setItemChecked(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetItemChecked(int arg0, bool arg1)
        {
            IExecute("setItemChecked", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setMultiChoiceModeListener(android.widget.AbsListView.MultiChoiceModeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.AbsListView.MultiChoiceModeListener"/></param>
        public void SetMultiChoiceModeListener(Android.Widget.AbsListView.MultiChoiceModeListener arg0)
        {
            IExecuteWithSignature("setMultiChoiceModeListener", "(Landroid/widget/AbsListView$MultiChoiceModeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setOnScrollListener(android.widget.AbsListView.OnScrollListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.AbsListView.OnScrollListener"/></param>
        public void SetOnScrollListener(Android.Widget.AbsListView.OnScrollListener arg0)
        {
            IExecuteWithSignature("setOnScrollListener", "(Landroid/widget/AbsListView$OnScrollListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setRecyclerListener(android.widget.AbsListView.RecyclerListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.AbsListView.RecyclerListener"/></param>
        public void SetRecyclerListener(Android.Widget.AbsListView.RecyclerListener arg0)
        {
            IExecuteWithSignature("setRecyclerListener", "(Landroid/widget/AbsListView$RecyclerListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setRemoteViewsAdapter(android.content.Intent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Intent"/></param>
        public void SetRemoteViewsAdapter(Android.Content.Intent arg0)
        {
            IExecuteWithSignature("setRemoteViewsAdapter", "(Landroid/content/Intent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setScrollIndicators(android.view.View,android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.View"/></param>
        public void SetScrollIndicators(Android.View.View arg0, Android.View.View arg1)
        {
            IExecute("setScrollIndicators", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setScrollingCacheEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetScrollingCacheEnabled(bool arg0)
        {
            IExecuteWithSignature("setScrollingCacheEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setSelectedChildViewEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSelectedChildViewEnabled(bool arg0)
        {
            IExecuteWithSignature("setSelectedChildViewEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setSelectionFromTop(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetSelectionFromTop(int arg0, int arg1)
        {
            IExecute("setSelectionFromTop", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setSelector(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetSelector(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setSelector", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setSelector(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetSelector(int arg0)
        {
            IExecuteWithSignature("setSelector", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setSmoothScrollbarEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSmoothScrollbarEnabled(bool arg0)
        {
            IExecuteWithSignature("setSmoothScrollbarEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setStackFromBottom(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetStackFromBottom(bool arg0)
        {
            IExecuteWithSignature("setStackFromBottom", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setTextFilterEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetTextFilterEnabled(bool arg0)
        {
            IExecuteWithSignature("setTextFilterEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setTopEdgeEffectColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetTopEdgeEffectColor(int arg0)
        {
            IExecuteWithSignature("setTopEdgeEffectColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setTranscriptMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetTranscriptMode(int arg0)
        {
            IExecuteWithSignature("setTranscriptMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#setVelocityScale(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetVelocityScale(float arg0)
        {
            IExecuteWithSignature("setVelocityScale", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#smoothScrollBy(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SmoothScrollBy(int arg0, int arg1)
        {
            IExecute("smoothScrollBy", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#smoothScrollToPosition(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SmoothScrollToPosition(int arg0, int arg1)
        {
            IExecute("smoothScrollToPosition", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#smoothScrollToPosition(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SmoothScrollToPosition(int arg0)
        {
            IExecuteWithSignature("smoothScrollToPosition", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#smoothScrollToPositionFromTop(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void SmoothScrollToPositionFromTop(int arg0, int arg1, int arg2)
        {
            IExecute("smoothScrollToPositionFromTop", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/AbsListView.html#smoothScrollToPositionFromTop(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SmoothScrollToPositionFromTop(int arg0, int arg1)
        {
            IExecute("smoothScrollToPositionFromTop", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region LayoutParams implementation
        public partial class LayoutParams
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/AbsListView.LayoutParams.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
            public LayoutParams(Android.Content.Context arg0, Android.Util.AttributeSet arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/AbsListView.LayoutParams.html#%3Cinit%3E(android.view.ViewGroup.LayoutParams)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ViewGroup.LayoutParams"/></param>
            public LayoutParams(Android.View.ViewGroup.LayoutParams arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/AbsListView.LayoutParams.html#%3Cinit%3E(int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public LayoutParams(int arg0, int arg1, int arg2)
                : base(arg0, arg1, arg2)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/AbsListView.LayoutParams.html#%3Cinit%3E(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public LayoutParams(int arg0, int arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MultiChoiceModeListener implementation
        public partial class MultiChoiceModeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="MultiChoiceModeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onActionItemClicked", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnActionItemClickedEventHandler));
                AddEventHandler("onCreateActionMode", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnCreateActionModeEventHandler));
                AddEventHandler("onPrepareActionMode", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnPrepareActionModeEventHandler));
                AddEventHandler("onDestroyActionMode", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDestroyActionModeEventHandler));
                AddEventHandler("onItemCheckedStateChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnItemCheckedStateChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ActionMode.Callback.html#onActionItemClicked(android.view.ActionMode,android.view.MenuItem)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnActionItemClicked"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.ActionMode, Android.View.MenuItem, bool> OnOnActionItemClicked { get; set; } = null;

            bool hasOverrideOnActionItemClicked = true;
            void OnActionItemClickedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnActionItemClicked = true;
                var methodToExecute = (OnOnActionItemClicked != null) ? OnOnActionItemClicked : OnActionItemClicked;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.ActionMode>(0), data.EventData.GetAt<Android.View.MenuItem>(1));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnActionItemClicked, executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ActionMode.Callback.html#onActionItemClicked(android.view.ActionMode,android.view.MenuItem)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ActionMode"/></param>
            /// <param name="arg1"><see cref="Android.View.MenuItem"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnActionItemClicked(Android.View.ActionMode arg0, Android.View.MenuItem arg1)
            {
                hasOverrideOnActionItemClicked = false; return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ActionMode.Callback.html#onCreateActionMode(android.view.ActionMode,android.view.Menu)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnCreateActionMode"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.ActionMode, Android.View.Menu, bool> OnOnCreateActionMode { get; set; } = null;

            bool hasOverrideOnCreateActionMode = true;
            void OnCreateActionModeEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnCreateActionMode = true;
                var methodToExecute = (OnOnCreateActionMode != null) ? OnOnCreateActionMode : OnCreateActionMode;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.ActionMode>(0), data.EventData.GetAt<Android.View.Menu>(1));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnCreateActionMode, executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ActionMode.Callback.html#onCreateActionMode(android.view.ActionMode,android.view.Menu)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ActionMode"/></param>
            /// <param name="arg1"><see cref="Android.View.Menu"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnCreateActionMode(Android.View.ActionMode arg0, Android.View.Menu arg1)
            {
                hasOverrideOnCreateActionMode = false; return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ActionMode.Callback.html#onPrepareActionMode(android.view.ActionMode,android.view.Menu)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPrepareActionMode"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.ActionMode, Android.View.Menu, bool> OnOnPrepareActionMode { get; set; } = null;

            bool hasOverrideOnPrepareActionMode = true;
            void OnPrepareActionModeEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnPrepareActionMode = true;
                var methodToExecute = (OnOnPrepareActionMode != null) ? OnOnPrepareActionMode : OnPrepareActionMode;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.View.ActionMode>(0), data.EventData.GetAt<Android.View.Menu>(1));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnPrepareActionMode, executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ActionMode.Callback.html#onPrepareActionMode(android.view.ActionMode,android.view.Menu)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ActionMode"/></param>
            /// <param name="arg1"><see cref="Android.View.Menu"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnPrepareActionMode(Android.View.ActionMode arg0, Android.View.Menu arg1)
            {
                hasOverrideOnPrepareActionMode = false; return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ActionMode.Callback.html#onDestroyActionMode(android.view.ActionMode)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDestroyActionMode"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.ActionMode> OnOnDestroyActionMode { get; set; } = null;

            bool hasOverrideOnDestroyActionMode = true;
            void OnDestroyActionModeEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDestroyActionMode = true;
                var methodToExecute = (OnOnDestroyActionMode != null) ? OnOnDestroyActionMode : OnDestroyActionMode;
                methodToExecute.Invoke(data.EventData.GetAt<Android.View.ActionMode>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnDestroyActionMode;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ActionMode.Callback.html#onDestroyActionMode(android.view.ActionMode)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ActionMode"/></param>
            public virtual void OnDestroyActionMode(Android.View.ActionMode arg0)
            {
                hasOverrideOnDestroyActionMode = false;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/widget/AbsListView.MultiChoiceModeListener.html#onItemCheckedStateChanged(android.view.ActionMode,int,long,boolean)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnItemCheckedStateChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.ActionMode, int, long, bool> OnOnItemCheckedStateChanged { get; set; } = null;

            bool hasOverrideOnItemCheckedStateChanged = true;
            void OnItemCheckedStateChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnItemCheckedStateChanged = true;
                var methodToExecute = (OnOnItemCheckedStateChanged != null) ? OnOnItemCheckedStateChanged : OnItemCheckedStateChanged;
                methodToExecute.Invoke(data.EventData.GetAt<Android.View.ActionMode>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<long>(2), data.EventData.GetAt<bool>(3));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnItemCheckedStateChanged;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/AbsListView.MultiChoiceModeListener.html#onItemCheckedStateChanged(android.view.ActionMode,int,long,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ActionMode"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            /// <param name="arg3"><see cref="bool"/></param>
            public virtual void OnItemCheckedStateChanged(Android.View.ActionMode arg0, int arg1, long arg2, bool arg3)
            {
                hasOverrideOnItemCheckedStateChanged = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MultiChoiceModeListenerDirect implementation
        public partial class MultiChoiceModeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ActionMode.Callback.html#onActionItemClicked(android.view.ActionMode,android.view.MenuItem)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ActionMode"/></param>
            /// <param name="arg1"><see cref="Android.View.MenuItem"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnActionItemClicked(Android.View.ActionMode arg0, Android.View.MenuItem arg1)
            {
                return IExecute<bool>("onActionItemClicked", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ActionMode.Callback.html#onCreateActionMode(android.view.ActionMode,android.view.Menu)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ActionMode"/></param>
            /// <param name="arg1"><see cref="Android.View.Menu"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnCreateActionMode(Android.View.ActionMode arg0, Android.View.Menu arg1)
            {
                return IExecute<bool>("onCreateActionMode", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ActionMode.Callback.html#onPrepareActionMode(android.view.ActionMode,android.view.Menu)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ActionMode"/></param>
            /// <param name="arg1"><see cref="Android.View.Menu"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnPrepareActionMode(Android.View.ActionMode arg0, Android.View.Menu arg1)
            {
                return IExecute<bool>("onPrepareActionMode", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ActionMode.Callback.html#onDestroyActionMode(android.view.ActionMode)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ActionMode"/></param>
            public override void OnDestroyActionMode(Android.View.ActionMode arg0)
            {
                IExecute("onDestroyActionMode", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/AbsListView.MultiChoiceModeListener.html#onItemCheckedStateChanged(android.view.ActionMode,int,long,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ActionMode"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            /// <param name="arg3"><see cref="bool"/></param>
            public override void OnItemCheckedStateChanged(Android.View.ActionMode arg0, int arg1, long arg2, bool arg3)
            {
                IExecute("onItemCheckedStateChanged", arg0, arg1, arg2, arg3);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnScrollListener implementation
        public partial class OnScrollListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnScrollListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onScroll", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnScrollEventHandler));
                AddEventHandler("onScrollStateChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnScrollStateChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/widget/AbsListView.OnScrollListener.html#onScroll(android.widget.AbsListView,int,int,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnScroll"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Widget.AbsListView, int, int, int> OnOnScroll { get; set; } = null;

            bool hasOverrideOnScroll = true;
            void OnScrollEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnScroll = true;
                var methodToExecute = (OnOnScroll != null) ? OnOnScroll : OnScroll;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Widget.AbsListView>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<int>(3));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnScroll;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/AbsListView.OnScrollListener.html#onScroll(android.widget.AbsListView,int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Widget.AbsListView"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            public virtual void OnScroll(Android.Widget.AbsListView arg0, int arg1, int arg2, int arg3)
            {
                hasOverrideOnScroll = false;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/widget/AbsListView.OnScrollListener.html#onScrollStateChanged(android.widget.AbsListView,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnScrollStateChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Widget.AbsListView, int> OnOnScrollStateChanged { get; set; } = null;

            bool hasOverrideOnScrollStateChanged = true;
            void OnScrollStateChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnScrollStateChanged = true;
                var methodToExecute = (OnOnScrollStateChanged != null) ? OnOnScrollStateChanged : OnScrollStateChanged;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Widget.AbsListView>(0), data.EventData.GetAt<int>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnScrollStateChanged;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/AbsListView.OnScrollListener.html#onScrollStateChanged(android.widget.AbsListView,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Widget.AbsListView"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public virtual void OnScrollStateChanged(Android.Widget.AbsListView arg0, int arg1)
            {
                hasOverrideOnScrollStateChanged = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnScrollListenerDirect implementation
        public partial class OnScrollListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/AbsListView.OnScrollListener.html#onScroll(android.widget.AbsListView,int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Widget.AbsListView"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            public override void OnScroll(Android.Widget.AbsListView arg0, int arg1, int arg2, int arg3)
            {
                IExecute("onScroll", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/AbsListView.OnScrollListener.html#onScrollStateChanged(android.widget.AbsListView,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Widget.AbsListView"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public override void OnScrollStateChanged(Android.Widget.AbsListView arg0, int arg1)
            {
                IExecute("onScrollStateChanged", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RecyclerListener implementation
        public partial class RecyclerListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="RecyclerListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onMovedToScrapHeap", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnMovedToScrapHeapEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/widget/AbsListView.RecyclerListener.html#onMovedToScrapHeap(android.view.View)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnMovedToScrapHeap"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.View> OnOnMovedToScrapHeap { get; set; } = null;

            bool hasOverrideOnMovedToScrapHeap = true;
            void OnMovedToScrapHeapEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnMovedToScrapHeap = true;
                var methodToExecute = (OnOnMovedToScrapHeap != null) ? OnOnMovedToScrapHeap : OnMovedToScrapHeap;
                methodToExecute.Invoke(data.EventData.GetAt<Android.View.View>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnMovedToScrapHeap;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/AbsListView.RecyclerListener.html#onMovedToScrapHeap(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            public virtual void OnMovedToScrapHeap(Android.View.View arg0)
            {
                hasOverrideOnMovedToScrapHeap = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RecyclerListenerDirect implementation
        public partial class RecyclerListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/AbsListView.RecyclerListener.html#onMovedToScrapHeap(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            public override void OnMovedToScrapHeap(Android.View.View arg0)
            {
                IExecuteWithSignature("onMovedToScrapHeap", "(Landroid/view/View;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SelectionBoundsAdjuster implementation
        public partial class SelectionBoundsAdjuster
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/AbsListView.SelectionBoundsAdjuster.html#adjustListItemSelectionBounds(android.graphics.Rect)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
            public void AdjustListItemSelectionBounds(Android.Graphics.Rect arg0)
            {
                IExecuteWithSignature("adjustListItemSelectionBounds", "(Landroid/graphics/Rect;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
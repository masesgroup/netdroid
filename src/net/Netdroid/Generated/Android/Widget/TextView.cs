/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Widget
{
    #region TextView declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/widget/TextView.html"/>
    /// </summary>
    public partial class TextView : Android.View.View
    {
        const string _bridgeClassName = "android.widget.TextView";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public TextView() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public TextView(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region BufferType declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.BufferType.html"/>
        /// </summary>
        public partial class BufferType : Java.Lang.Enum<Android.Widget.TextView.BufferType>
        {
            const string _bridgeClassName = "android.widget.TextView$BufferType";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public BufferType() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public BufferType(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

        #region OnEditorActionListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.OnEditorActionListener.html"/>
        /// </summary>
        public partial class OnEditorActionListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnEditorActionListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.widget.TextView_OnEditorActionListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnEditorActionListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnEditorActionListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnEditorActionListenerDirect : OnEditorActionListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.widget.TextView$OnEditorActionListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region SavedState declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.SavedState.html"/>
        /// </summary>
        public partial class SavedState : Android.View.View.BaseSavedState
        {
            const string _bridgeClassName = "android.widget.TextView$SavedState";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public SavedState() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public SavedState(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region TextView implementation
    public partial class TextView
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public TextView(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2, int arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public TextView(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        public TextView(Android.Content.Context arg0, Android.Util.AttributeSet arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        public TextView(Android.Content.Context arg0)
            : base(arg0)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#AUTO_SIZE_TEXT_TYPE_NONE"/>
        /// </summary>
        public static int AUTO_SIZE_TEXT_TYPE_NONE { get { if (!_AUTO_SIZE_TEXT_TYPE_NONEReady) { _AUTO_SIZE_TEXT_TYPE_NONEContent = SGetField<int>(LocalBridgeClazz, "AUTO_SIZE_TEXT_TYPE_NONE"); _AUTO_SIZE_TEXT_TYPE_NONEReady = true; } return _AUTO_SIZE_TEXT_TYPE_NONEContent; } }
        private static int _AUTO_SIZE_TEXT_TYPE_NONEContent = default;
        private static bool _AUTO_SIZE_TEXT_TYPE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#AUTO_SIZE_TEXT_TYPE_UNIFORM"/>
        /// </summary>
        public static int AUTO_SIZE_TEXT_TYPE_UNIFORM { get { if (!_AUTO_SIZE_TEXT_TYPE_UNIFORMReady) { _AUTO_SIZE_TEXT_TYPE_UNIFORMContent = SGetField<int>(LocalBridgeClazz, "AUTO_SIZE_TEXT_TYPE_UNIFORM"); _AUTO_SIZE_TEXT_TYPE_UNIFORMReady = true; } return _AUTO_SIZE_TEXT_TYPE_UNIFORMContent; } }
        private static int _AUTO_SIZE_TEXT_TYPE_UNIFORMContent = default;
        private static bool _AUTO_SIZE_TEXT_TYPE_UNIFORMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#FOCUSED_SEARCH_RESULT_INDEX_NONE"/>
        /// </summary>
        public static int FOCUSED_SEARCH_RESULT_INDEX_NONE { get { if (!_FOCUSED_SEARCH_RESULT_INDEX_NONEReady) { _FOCUSED_SEARCH_RESULT_INDEX_NONEContent = SGetField<int>(LocalBridgeClazz, "FOCUSED_SEARCH_RESULT_INDEX_NONE"); _FOCUSED_SEARCH_RESULT_INDEX_NONEReady = true; } return _FOCUSED_SEARCH_RESULT_INDEX_NONEContent; } }
        private static int _FOCUSED_SEARCH_RESULT_INDEX_NONEContent = default;
        private static bool _FOCUSED_SEARCH_RESULT_INDEX_NONEReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getCompoundDrawableTintList()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Res.ColorStateList"/></returns>
        public Android.Content.Res.ColorStateList GetCompoundDrawableTintList()
        {
            return IExecuteWithSignature<Android.Content.Res.ColorStateList>("getCompoundDrawableTintList", "()Landroid/content/res/ColorStateList;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getCompoundDrawableTintBlendMode()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.BlendMode"/></returns>
        public Android.Graphics.BlendMode GetCompoundDrawableTintBlendMode()
        {
            return IExecuteWithSignature<Android.Graphics.BlendMode>("getCompoundDrawableTintBlendMode", "()Landroid/graphics/BlendMode;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTextCursorDrawable()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetTextCursorDrawable()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getTextCursorDrawable", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTextSelectHandle()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetTextSelectHandle()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getTextSelectHandle", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTextSelectHandleLeft()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetTextSelectHandleLeft()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getTextSelectHandleLeft", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTextSelectHandleRight()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetTextSelectHandleRight()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getTextSelectHandleRight", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getCompoundDrawables()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable[] GetCompoundDrawables()
        {
            return IExecuteWithSignatureArray<Android.Graphics.Drawable.Drawable>("getCompoundDrawables", "()[Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getCompoundDrawablesRelative()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable[] GetCompoundDrawablesRelative()
        {
            return IExecuteWithSignatureArray<Android.Graphics.Drawable.Drawable>("getCompoundDrawablesRelative", "()[Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getMinimumFontMetrics()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Paint.FontMetrics"/></returns>
        public Android.Graphics.Paint.FontMetrics GetMinimumFontMetrics()
        {
            return IExecuteWithSignature<Android.Graphics.Paint.FontMetrics>("getMinimumFontMetrics", "()Landroid/graphics/Paint$FontMetrics;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getCompoundDrawableTintMode()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.PorterDuff.Mode"/></returns>
        public Android.Graphics.PorterDuff.Mode GetCompoundDrawableTintMode()
        {
            return IExecuteWithSignature<Android.Graphics.PorterDuff.Mode>("getCompoundDrawableTintMode", "()Landroid/graphics/PorterDuff$Mode;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTypeface()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Typeface"/></returns>
        public Android.Graphics.Typeface GetTypeface()
        {
            return IExecuteWithSignature<Android.Graphics.Typeface>("getTypeface", "()Landroid/graphics/Typeface;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getInputExtras(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetInputExtras(bool arg0)
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getInputExtras", "(Z)Landroid/os/Bundle;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getImeHintLocales()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.LocaleList"/></returns>
        public Android.Os.LocaleList GetImeHintLocales()
        {
            return IExecuteWithSignature<Android.Os.LocaleList>("getImeHintLocales", "()Landroid/os/LocaleList;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTextLocales()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.LocaleList"/></returns>
        public Android.Os.LocaleList GetTextLocales()
        {
            return IExecuteWithSignature<Android.Os.LocaleList>("getTextLocales", "()Landroid/os/LocaleList;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#onSaveInstanceState()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Parcelable"/></returns>
        public Android.Os.Parcelable OnSaveInstanceState()
        {
            return IExecuteWithSignature<Android.Os.Parcelable>("onSaveInstanceState", "()Landroid/os/Parcelable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getEditableText()"/>
        /// </summary>
        /// <returns><see cref="Android.Text.Editable"/></returns>
        public Android.Text.Editable GetEditableText()
        {
            return IExecuteWithSignature<Android.Text.Editable>("getEditableText", "()Landroid/text/Editable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getHighlights()"/>
        /// </summary>
        /// <returns><see cref="Android.Text.Highlights"/></returns>
        public Android.Text.Highlights GetHighlights()
        {
            return IExecuteWithSignature<Android.Text.Highlights>("getHighlights", "()Landroid/text/Highlights;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getFilters()"/>
        /// </summary>
        /// <returns><see cref="Android.Text.InputFilter"/></returns>
        public Android.Text.InputFilter[] GetFilters()
        {
            return IExecuteWithSignatureArray<Android.Text.InputFilter>("getFilters", "()[Landroid/text/InputFilter;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTextMetricsParams()"/>
        /// </summary>
        /// <returns><see cref="Android.Text.PrecomputedText.Params"/></returns>
        public Android.Text.PrecomputedText.Params GetTextMetricsParams()
        {
            return IExecuteWithSignature<Android.Text.PrecomputedText.Params>("getTextMetricsParams", "()Landroid/text/PrecomputedText$Params;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getUrls()"/>
        /// </summary>
        /// <returns><see cref="Android.Text.Style.URLSpan"/></returns>
        public Android.Text.Style.URLSpan[] GetUrls()
        {
            return IExecuteWithSignatureArray<Android.Text.Style.URLSpan>("getUrls", "()[Landroid/text/style/URLSpan;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTextDirectionHeuristic()"/>
        /// </summary>
        /// <returns><see cref="Android.Text.TextDirectionHeuristic"/></returns>
        public Android.Text.TextDirectionHeuristic GetTextDirectionHeuristic()
        {
            return IExecuteWithSignature<Android.Text.TextDirectionHeuristic>("getTextDirectionHeuristic", "()Landroid/text/TextDirectionHeuristic;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getPaint()"/>
        /// </summary>
        /// <returns><see cref="Android.Text.TextPaint"/></returns>
        public Android.Text.TextPaint GetPaint()
        {
            return IExecuteWithSignature<Android.Text.TextPaint>("getPaint", "()Landroid/text/TextPaint;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getEllipsize()"/>
        /// </summary>
        /// <returns><see cref="Android.Text.TextUtils.TruncateAt"/></returns>
        public Android.Text.TextUtils.TruncateAt GetEllipsize()
        {
            return IExecuteWithSignature<Android.Text.TextUtils.TruncateAt>("getEllipsize", "()Landroid/text/TextUtils$TruncateAt;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getCustomInsertionActionModeCallback()"/>
        /// </summary>
        /// <returns><see cref="Android.View.ActionMode.Callback"/></returns>
        public Android.View.ActionMode.Callback GetCustomInsertionActionModeCallback()
        {
            return IExecuteWithSignature<Android.View.ActionMode.Callback>("getCustomInsertionActionModeCallback", "()Landroid/view/ActionMode$Callback;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getCustomSelectionActionModeCallback()"/>
        /// </summary>
        /// <returns><see cref="Android.View.ActionMode.Callback"/></returns>
        public Android.View.ActionMode.Callback GetCustomSelectionActionModeCallback()
        {
            return IExecuteWithSignature<Android.View.ActionMode.Callback>("getCustomSelectionActionModeCallback", "()Landroid/view/ActionMode$Callback;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTextClassifier()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Textclassifier.TextClassifier"/></returns>
        public Android.View.Textclassifier.TextClassifier GetTextClassifier()
        {
            return IExecute<Android.View.Textclassifier.TextClassifier>("getTextClassifier");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#bringPointIntoView(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool BringPointIntoView(int arg0, bool arg1)
        {
            return IExecute<bool>("bringPointIntoView", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#bringPointIntoView(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool BringPointIntoView(int arg0)
        {
            return IExecuteWithSignature<bool>("bringPointIntoView", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#didTouchFocusSelect()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool DidTouchFocusSelect()
        {
            return IExecuteWithSignature<bool>("didTouchFocusSelect", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#extractText(android.view.inputmethod.ExtractedTextRequest,android.view.inputmethod.ExtractedText)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.ExtractedTextRequest"/></param>
        /// <param name="arg1"><see cref="Android.View.Inputmethod.ExtractedText"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ExtractText(Android.View.Inputmethod.ExtractedTextRequest arg0, Android.View.Inputmethod.ExtractedText arg1)
        {
            return IExecute<bool>("extractText", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getFreezesText()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetFreezesText()
        {
            return IExecuteWithSignature<bool>("getFreezesText", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getIncludeFontPadding()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetIncludeFontPadding()
        {
            return IExecuteWithSignature<bool>("getIncludeFontPadding", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getShiftDrawingOffsetForStartOverhang()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetShiftDrawingOffsetForStartOverhang()
        {
            return IExecuteWithSignature<bool>("getShiftDrawingOffsetForStartOverhang", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getUseBoundsForWidth()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetUseBoundsForWidth()
        {
            return IExecuteWithSignature<bool>("getUseBoundsForWidth", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#hasSelection()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasSelection()
        {
            return IExecuteWithSignature<bool>("hasSelection", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#isAllCaps()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAllCaps()
        {
            return IExecuteWithSignature<bool>("isAllCaps", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#isCursorVisible()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsCursorVisible()
        {
            return IExecuteWithSignature<bool>("isCursorVisible", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#isElegantTextHeight()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsElegantTextHeight()
        {
            return IExecuteWithSignature<bool>("isElegantTextHeight", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#isFallbackLineSpacing()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFallbackLineSpacing()
        {
            return IExecuteWithSignature<bool>("isFallbackLineSpacing", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#isInputMethodTarget()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsInputMethodTarget()
        {
            return IExecuteWithSignature<bool>("isInputMethodTarget", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#isLocalePreferredLineHeightForMinimumUsed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLocalePreferredLineHeightForMinimumUsed()
        {
            return IExecuteWithSignature<bool>("isLocalePreferredLineHeightForMinimumUsed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#isSingleLine()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSingleLine()
        {
            return IExecuteWithSignature<bool>("isSingleLine", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#isSuggestionsEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSuggestionsEnabled()
        {
            return IExecuteWithSignature<bool>("isSuggestionsEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#isTextSelectable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTextSelectable()
        {
            return IExecuteWithSignature<bool>("isTextSelectable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#moveCursorToVisibleOffset()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool MoveCursorToVisibleOffset()
        {
            return IExecuteWithSignature<bool>("moveCursorToVisibleOffset", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#onPreDraw()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool OnPreDraw()
        {
            return IExecuteWithSignature<bool>("onPreDraw", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#onPrivateIMECommand(java.lang.String,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnPrivateIMECommand(Java.Lang.String arg0, Android.Os.Bundle arg1)
        {
            return IExecute<bool>("onPrivateIMECommand", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#onTextContextMenuItem(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnTextContextMenuItem(int arg0)
        {
            return IExecuteWithSignature<bool>("onTextContextMenuItem", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setFontVariationSettings(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetFontVariationSettings(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("setFontVariationSettings", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getHintTextColors()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Res.ColorStateList"/></returns>
        public Android.Content.Res.ColorStateList GetHintTextColors()
        {
            return IExecuteWithSignature<Android.Content.Res.ColorStateList>("getHintTextColors", "()Landroid/content/res/ColorStateList;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getLinkTextColors()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Res.ColorStateList"/></returns>
        public Android.Content.Res.ColorStateList GetLinkTextColors()
        {
            return IExecuteWithSignature<Android.Content.Res.ColorStateList>("getLinkTextColors", "()Landroid/content/res/ColorStateList;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTextColors()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Res.ColorStateList"/></returns>
        public Android.Content.Res.ColorStateList GetTextColors()
        {
            return IExecuteWithSignature<Android.Content.Res.ColorStateList>("getTextColors", "()Landroid/content/res/ColorStateList;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getLayout()"/>
        /// </summary>
        /// <returns><see cref="Android.Text.Layout"/></returns>
        public Android.Text.Layout GetLayout()
        {
            return IExecuteWithSignature<Android.Text.Layout>("getLayout", "()Landroid/text/Layout;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getKeyListener()"/>
        /// </summary>
        /// <returns><see cref="Android.Text.Method.KeyListener"/></returns>
        public Android.Text.Method.KeyListener GetKeyListener()
        {
            return IExecuteWithSignature<Android.Text.Method.KeyListener>("getKeyListener", "()Landroid/text/method/KeyListener;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getKeyListener()"/>
        /// </summary>
        /// <returns><see cref="Android.Text.Method.KeyListener"/></returns>
        public Android.Text.Method.KeyListener GetKeyListenerDirect()
        {
            return IExecuteWithSignature<Android.Text.Method.KeyListenerDirect, Android.Text.Method.KeyListener>("getKeyListener", "()Landroid/text/method/KeyListener;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getMovementMethod()"/>
        /// </summary>
        /// <returns><see cref="Android.Text.Method.MovementMethod"/></returns>
        public Android.Text.Method.MovementMethod GetMovementMethod()
        {
            return IExecuteWithSignature<Android.Text.Method.MovementMethod>("getMovementMethod", "()Landroid/text/method/MovementMethod;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTransformationMethod()"/>
        /// </summary>
        /// <returns><see cref="Android.Text.Method.TransformationMethod"/></returns>
        public Android.Text.Method.TransformationMethod GetTransformationMethod()
        {
            return IExecuteWithSignature<Android.Text.Method.TransformationMethod>("getTransformationMethod", "()Landroid/text/method/TransformationMethod;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getLinksClickable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetLinksClickable()
        {
            return IExecuteWithSignature<bool>("getLinksClickable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getShowSoftInputOnFocus()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetShowSoftInputOnFocus()
        {
            return IExecuteWithSignature<bool>("getShowSoftInputOnFocus", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#isHorizontallyScrollable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHorizontallyScrollable()
        {
            return IExecuteWithSignature<bool>("isHorizontallyScrollable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getAutoLinkMask()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAutoLinkMask()
        {
            return IExecuteWithSignature<int>("getAutoLinkMask", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getCurrentHintTextColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCurrentHintTextColor()
        {
            return IExecuteWithSignature<int>("getCurrentHintTextColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getCurrentTextColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCurrentTextColor()
        {
            return IExecuteWithSignature<int>("getCurrentTextColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#append(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void Append(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("append", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setAutoLinkMask(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAutoLinkMask(int arg0)
        {
            IExecuteWithSignature("setAutoLinkMask", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setEditableFactory(android.text.Editable.Factory)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Editable.Factory"/></param>
        public void SetEditableFactory(Android.Text.Editable.Factory arg0)
        {
            IExecuteWithSignature("setEditableFactory", "(Landroid/text/Editable$Factory;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setHint(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetHint(int arg0)
        {
            IExecuteWithSignature("setHint", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setHint(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetHint(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setHint", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setHintTextColor(android.content.res.ColorStateList)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.ColorStateList"/></param>
        public void SetHintTextColor(Android.Content.Res.ColorStateList arg0)
        {
            IExecuteWithSignature("setHintTextColor", "(Landroid/content/res/ColorStateList;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setHintTextColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetHintTextColor(int arg0)
        {
            IExecuteWithSignature("setHintTextColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setLinksClickable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetLinksClickable(bool arg0)
        {
            IExecuteWithSignature("setLinksClickable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setLinkTextColor(android.content.res.ColorStateList)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.ColorStateList"/></param>
        public void SetLinkTextColor(Android.Content.Res.ColorStateList arg0)
        {
            IExecuteWithSignature("setLinkTextColor", "(Landroid/content/res/ColorStateList;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setLinkTextColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetLinkTextColor(int arg0)
        {
            IExecuteWithSignature("setLinkTextColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setMovementMethod(android.text.method.MovementMethod)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Method.MovementMethod"/></param>
        public void SetMovementMethod(Android.Text.Method.MovementMethod arg0)
        {
            IExecuteWithSignature("setMovementMethod", "(Landroid/text/method/MovementMethod;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setShowSoftInputOnFocus(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetShowSoftInputOnFocus(bool arg0)
        {
            IExecuteWithSignature("setShowSoftInputOnFocus", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setSpannableFactory(android.text.Spannable.Factory)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Spannable.Factory"/></param>
        public void SetSpannableFactory(Android.Text.Spannable.Factory arg0)
        {
            IExecuteWithSignature("setSpannableFactory", "(Landroid/text/Spannable$Factory;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setText(char[],int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void SetText(char[] arg0, int arg1, int arg2)
        {
            IExecute("setText", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setText(int,android.widget.TextView.BufferType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Widget.TextView.BufferType"/></param>
        public void SetText(int arg0, Android.Widget.TextView.BufferType arg1)
        {
            IExecute("setText", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setText(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetText(int arg0)
        {
            IExecuteWithSignature("setText", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setText(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetText(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setText", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextKeepState(java.lang.CharSequence,android.widget.TextView.BufferType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Android.Widget.TextView.BufferType"/></param>
        public void SetTextKeepState(Java.Lang.CharSequence arg0, Android.Widget.TextView.BufferType arg1)
        {
            IExecute("setTextKeepState", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextKeepState(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetTextKeepState(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setTextKeepState", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTransformationMethod(android.text.method.TransformationMethod)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Method.TransformationMethod"/></param>
        public void SetTransformationMethod(Android.Text.Method.TransformationMethod arg0)
        {
            IExecuteWithSignature("setTransformationMethod", "(Landroid/text/method/TransformationMethod;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getLetterSpacing()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetLetterSpacing()
        {
            return IExecuteWithSignature<float>("getLetterSpacing", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getLineSpacingExtra()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetLineSpacingExtra()
        {
            return IExecuteWithSignature<float>("getLineSpacingExtra", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getLineSpacingMultiplier()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetLineSpacingMultiplier()
        {
            return IExecuteWithSignature<float>("getLineSpacingMultiplier", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getShadowDx()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetShadowDx()
        {
            return IExecuteWithSignature<float>("getShadowDx", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getShadowDy()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetShadowDy()
        {
            return IExecuteWithSignature<float>("getShadowDy", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getShadowRadius()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetShadowRadius()
        {
            return IExecuteWithSignature<float>("getShadowRadius", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTextScaleX()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetTextScaleX()
        {
            return IExecuteWithSignature<float>("getTextScaleX", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTextSize()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetTextSize()
        {
            return IExecuteWithSignature<float>("getTextSize", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getAutoSizeMaxTextSize()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAutoSizeMaxTextSize()
        {
            return IExecuteWithSignature<int>("getAutoSizeMaxTextSize", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getAutoSizeMinTextSize()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAutoSizeMinTextSize()
        {
            return IExecuteWithSignature<int>("getAutoSizeMinTextSize", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getAutoSizeStepGranularity()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAutoSizeStepGranularity()
        {
            return IExecuteWithSignature<int>("getAutoSizeStepGranularity", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getAutoSizeTextType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAutoSizeTextType()
        {
            return IExecuteWithSignature<int>("getAutoSizeTextType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getBreakStrategy()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetBreakStrategy()
        {
            return IExecuteWithSignature<int>("getBreakStrategy", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getCompoundDrawablePadding()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCompoundDrawablePadding()
        {
            return IExecuteWithSignature<int>("getCompoundDrawablePadding", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getCompoundPaddingBottom()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCompoundPaddingBottom()
        {
            return IExecuteWithSignature<int>("getCompoundPaddingBottom", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getCompoundPaddingEnd()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCompoundPaddingEnd()
        {
            return IExecuteWithSignature<int>("getCompoundPaddingEnd", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getCompoundPaddingLeft()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCompoundPaddingLeft()
        {
            return IExecuteWithSignature<int>("getCompoundPaddingLeft", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getCompoundPaddingRight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCompoundPaddingRight()
        {
            return IExecuteWithSignature<int>("getCompoundPaddingRight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getCompoundPaddingStart()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCompoundPaddingStart()
        {
            return IExecuteWithSignature<int>("getCompoundPaddingStart", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getCompoundPaddingTop()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCompoundPaddingTop()
        {
            return IExecuteWithSignature<int>("getCompoundPaddingTop", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getExtendedPaddingBottom()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetExtendedPaddingBottom()
        {
            return IExecuteWithSignature<int>("getExtendedPaddingBottom", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getExtendedPaddingTop()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetExtendedPaddingTop()
        {
            return IExecuteWithSignature<int>("getExtendedPaddingTop", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getFirstBaselineToTopHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFirstBaselineToTopHeight()
        {
            return IExecuteWithSignature<int>("getFirstBaselineToTopHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getFocusedSearchResultHighlightColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFocusedSearchResultHighlightColor()
        {
            return IExecuteWithSignature<int>("getFocusedSearchResultHighlightColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getFocusedSearchResultIndex()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFocusedSearchResultIndex()
        {
            return IExecuteWithSignature<int>("getFocusedSearchResultIndex", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getGravity()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetGravity()
        {
            return IExecuteWithSignature<int>("getGravity", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getHighlightColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHighlightColor()
        {
            return IExecuteWithSignature<int>("getHighlightColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getHyphenationFrequency()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHyphenationFrequency()
        {
            return IExecuteWithSignature<int>("getHyphenationFrequency", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getImeActionId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetImeActionId()
        {
            return IExecuteWithSignature<int>("getImeActionId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getImeOptions()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetImeOptions()
        {
            return IExecuteWithSignature<int>("getImeOptions", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getInputType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetInputType()
        {
            return IExecuteWithSignature<int>("getInputType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getJustificationMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetJustificationMode()
        {
            return IExecuteWithSignature<int>("getJustificationMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getLastBaselineToBottomHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLastBaselineToBottomHeight()
        {
            return IExecuteWithSignature<int>("getLastBaselineToBottomHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getLineBounds(int,android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetLineBounds(int arg0, Android.Graphics.Rect arg1)
        {
            return IExecute<int>("getLineBounds", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getLineBreakStyle()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLineBreakStyle()
        {
            return IExecuteWithSignature<int>("getLineBreakStyle", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getLineBreakWordStyle()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLineBreakWordStyle()
        {
            return IExecuteWithSignature<int>("getLineBreakWordStyle", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getLineCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLineCount()
        {
            return IExecuteWithSignature<int>("getLineCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getLineHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLineHeight()
        {
            return IExecuteWithSignature<int>("getLineHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getMarqueeRepeatLimit()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMarqueeRepeatLimit()
        {
            return IExecuteWithSignature<int>("getMarqueeRepeatLimit", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getMaxEms()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxEms()
        {
            return IExecuteWithSignature<int>("getMaxEms", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getMaxHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxHeight()
        {
            return IExecuteWithSignature<int>("getMaxHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getMaxLines()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxLines()
        {
            return IExecuteWithSignature<int>("getMaxLines", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getMaxWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxWidth()
        {
            return IExecuteWithSignature<int>("getMaxWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getMinEms()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMinEms()
        {
            return IExecuteWithSignature<int>("getMinEms", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getMinHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMinHeight()
        {
            return IExecuteWithSignature<int>("getMinHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getMinLines()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMinLines()
        {
            return IExecuteWithSignature<int>("getMinLines", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getMinWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMinWidth()
        {
            return IExecuteWithSignature<int>("getMinWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getOffsetForPosition(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetOffsetForPosition(float arg0, float arg1)
        {
            return IExecute<int>("getOffsetForPosition", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getPaintFlags()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPaintFlags()
        {
            return IExecuteWithSignature<int>("getPaintFlags", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getSearchResultHighlightColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSearchResultHighlightColor()
        {
            return IExecuteWithSignature<int>("getSearchResultHighlightColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getSelectionEnd()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSelectionEnd()
        {
            return IExecuteWithSignature<int>("getSelectionEnd", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getSelectionStart()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSelectionStart()
        {
            return IExecuteWithSignature<int>("getSelectionStart", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getShadowColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetShadowColor()
        {
            return IExecuteWithSignature<int>("getShadowColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTextSizeUnit()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTextSizeUnit()
        {
            return IExecuteWithSignature<int>("getTextSizeUnit", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTotalPaddingBottom()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTotalPaddingBottom()
        {
            return IExecuteWithSignature<int>("getTotalPaddingBottom", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTotalPaddingEnd()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTotalPaddingEnd()
        {
            return IExecuteWithSignature<int>("getTotalPaddingEnd", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTotalPaddingLeft()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTotalPaddingLeft()
        {
            return IExecuteWithSignature<int>("getTotalPaddingLeft", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTotalPaddingRight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTotalPaddingRight()
        {
            return IExecuteWithSignature<int>("getTotalPaddingRight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTotalPaddingStart()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTotalPaddingStart()
        {
            return IExecuteWithSignature<int>("getTotalPaddingStart", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTotalPaddingTop()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTotalPaddingTop()
        {
            return IExecuteWithSignature<int>("getTotalPaddingTop", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#length()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Length()
        {
            return IExecuteWithSignature<int>("length", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getAutoSizeTextAvailableSizes()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int[] GetAutoSizeTextAvailableSizes()
        {
            return IExecuteWithSignatureArray<int>("getAutoSizeTextAvailableSizes", "()[I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getSearchResultHighlights()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int[] GetSearchResultHighlights()
        {
            return IExecuteWithSignatureArray<int>("getSearchResultHighlights", "()[I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getError()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetError()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getError", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getHint()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetHint()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getHint", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getImeActionLabel()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetImeActionLabel()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getImeActionLabel", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getText()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetText()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getText", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getFontFeatureSettings()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetFontFeatureSettings()
        {
            return IExecuteWithSignature<Java.Lang.String>("getFontFeatureSettings", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getFontVariationSettings()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetFontVariationSettings()
        {
            return IExecuteWithSignature<Java.Lang.String>("getFontVariationSettings", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getPrivateImeOptions()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetPrivateImeOptions()
        {
            return IExecuteWithSignature<Java.Lang.String>("getPrivateImeOptions", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#getTextLocale()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Locale"/></returns>
        public Java.Util.Locale GetTextLocale()
        {
            return IExecuteWithSignature<Java.Util.Locale>("getTextLocale", "()Ljava/util/Locale;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#addTextChangedListener(android.text.TextWatcher)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.TextWatcher"/></param>
        public void AddTextChangedListener(Android.Text.TextWatcher arg0)
        {
            IExecuteWithSignature("addTextChangedListener", "(Landroid/text/TextWatcher;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#append(java.lang.CharSequence,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void Append(Java.Lang.CharSequence arg0, int arg1, int arg2)
        {
            IExecute("append", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#beginBatchEdit()"/>
        /// </summary>
        public void BeginBatchEdit()
        {
            IExecuteWithSignature("beginBatchEdit", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#clearComposingText()"/>
        /// </summary>
        public void ClearComposingText()
        {
            IExecuteWithSignature("clearComposingText", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#debug(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void Debug(int arg0)
        {
            IExecuteWithSignature("debug", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#endBatchEdit()"/>
        /// </summary>
        public void EndBatchEdit()
        {
            IExecuteWithSignature("endBatchEdit", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#onBeginBatchEdit()"/>
        /// </summary>
        public void OnBeginBatchEdit()
        {
            IExecuteWithSignature("onBeginBatchEdit", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#onCommitCompletion(android.view.inputmethod.CompletionInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.CompletionInfo"/></param>
        public void OnCommitCompletion(Android.View.Inputmethod.CompletionInfo arg0)
        {
            IExecuteWithSignature("onCommitCompletion", "(Landroid/view/inputmethod/CompletionInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#onCommitCorrection(android.view.inputmethod.CorrectionInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.CorrectionInfo"/></param>
        public void OnCommitCorrection(Android.View.Inputmethod.CorrectionInfo arg0)
        {
            IExecuteWithSignature("onCommitCorrection", "(Landroid/view/inputmethod/CorrectionInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#onEditorAction(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OnEditorAction(int arg0)
        {
            IExecuteWithSignature("onEditorAction", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#onEndBatchEdit()"/>
        /// </summary>
        public void OnEndBatchEdit()
        {
            IExecuteWithSignature("onEndBatchEdit", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#onRestoreInstanceState(android.os.Parcelable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcelable"/></param>
        public void OnRestoreInstanceState(Android.Os.Parcelable arg0)
        {
            IExecuteWithSignature("onRestoreInstanceState", "(Landroid/os/Parcelable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#removeTextChangedListener(android.text.TextWatcher)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.TextWatcher"/></param>
        public void RemoveTextChangedListener(Android.Text.TextWatcher arg0)
        {
            IExecuteWithSignature("removeTextChangedListener", "(Landroid/text/TextWatcher;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setAllCaps(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAllCaps(bool arg0)
        {
            IExecuteWithSignature("setAllCaps", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void SetAutoSizeTextTypeUniformWithConfiguration(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("setAutoSizeTextTypeUniformWithConfiguration", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setAutoSizeTextTypeUniformWithPresetSizes(int[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetAutoSizeTextTypeUniformWithPresetSizes(int[] arg0, int arg1)
        {
            IExecute("setAutoSizeTextTypeUniformWithPresetSizes", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setAutoSizeTextTypeWithDefaults(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAutoSizeTextTypeWithDefaults(int arg0)
        {
            IExecuteWithSignature("setAutoSizeTextTypeWithDefaults", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setBreakStrategy(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetBreakStrategy(int arg0)
        {
            IExecuteWithSignature("setBreakStrategy", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setCompoundDrawablePadding(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetCompoundDrawablePadding(int arg0)
        {
            IExecuteWithSignature("setCompoundDrawablePadding", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetCompoundDrawables(Android.Graphics.Drawable.Drawable arg0, Android.Graphics.Drawable.Drawable arg1, Android.Graphics.Drawable.Drawable arg2, Android.Graphics.Drawable.Drawable arg3)
        {
            IExecute("setCompoundDrawables", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setCompoundDrawablesRelative(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetCompoundDrawablesRelative(Android.Graphics.Drawable.Drawable arg0, Android.Graphics.Drawable.Drawable arg1, Android.Graphics.Drawable.Drawable arg2, Android.Graphics.Drawable.Drawable arg3)
        {
            IExecute("setCompoundDrawablesRelative", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetCompoundDrawablesRelativeWithIntrinsicBounds(Android.Graphics.Drawable.Drawable arg0, Android.Graphics.Drawable.Drawable arg1, Android.Graphics.Drawable.Drawable arg2, Android.Graphics.Drawable.Drawable arg3)
        {
            IExecute("setCompoundDrawablesRelativeWithIntrinsicBounds", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void SetCompoundDrawablesRelativeWithIntrinsicBounds(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("setCompoundDrawablesRelativeWithIntrinsicBounds", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <param name="arg3"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetCompoundDrawablesWithIntrinsicBounds(Android.Graphics.Drawable.Drawable arg0, Android.Graphics.Drawable.Drawable arg1, Android.Graphics.Drawable.Drawable arg2, Android.Graphics.Drawable.Drawable arg3)
        {
            IExecute("setCompoundDrawablesWithIntrinsicBounds", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void SetCompoundDrawablesWithIntrinsicBounds(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("setCompoundDrawablesWithIntrinsicBounds", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setCompoundDrawableTintBlendMode(android.graphics.BlendMode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.BlendMode"/></param>
        public void SetCompoundDrawableTintBlendMode(Android.Graphics.BlendMode arg0)
        {
            IExecuteWithSignature("setCompoundDrawableTintBlendMode", "(Landroid/graphics/BlendMode;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setCompoundDrawableTintList(android.content.res.ColorStateList)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.ColorStateList"/></param>
        public void SetCompoundDrawableTintList(Android.Content.Res.ColorStateList arg0)
        {
            IExecuteWithSignature("setCompoundDrawableTintList", "(Landroid/content/res/ColorStateList;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setCompoundDrawableTintMode(android.graphics.PorterDuff.Mode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.PorterDuff.Mode"/></param>
        public void SetCompoundDrawableTintMode(Android.Graphics.PorterDuff.Mode arg0)
        {
            IExecuteWithSignature("setCompoundDrawableTintMode", "(Landroid/graphics/PorterDuff$Mode;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setCursorVisible(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetCursorVisible(bool arg0)
        {
            IExecuteWithSignature("setCursorVisible", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setCustomInsertionActionModeCallback(android.view.ActionMode.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ActionMode.Callback"/></param>
        public void SetCustomInsertionActionModeCallback(Android.View.ActionMode.Callback arg0)
        {
            IExecuteWithSignature("setCustomInsertionActionModeCallback", "(Landroid/view/ActionMode$Callback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setCustomSelectionActionModeCallback(android.view.ActionMode.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ActionMode.Callback"/></param>
        public void SetCustomSelectionActionModeCallback(Android.View.ActionMode.Callback arg0)
        {
            IExecuteWithSignature("setCustomSelectionActionModeCallback", "(Landroid/view/ActionMode$Callback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setElegantTextHeight(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetElegantTextHeight(bool arg0)
        {
            IExecuteWithSignature("setElegantTextHeight", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setEllipsize(android.text.TextUtils.TruncateAt)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.TextUtils.TruncateAt"/></param>
        public void SetEllipsize(Android.Text.TextUtils.TruncateAt arg0)
        {
            IExecuteWithSignature("setEllipsize", "(Landroid/text/TextUtils$TruncateAt;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setEms(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetEms(int arg0)
        {
            IExecuteWithSignature("setEms", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setError(java.lang.CharSequence,android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetError(Java.Lang.CharSequence arg0, Android.Graphics.Drawable.Drawable arg1)
        {
            IExecute("setError", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setError(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetError(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setError", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setExtractedText(android.view.inputmethod.ExtractedText)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.ExtractedText"/></param>
        public void SetExtractedText(Android.View.Inputmethod.ExtractedText arg0)
        {
            IExecuteWithSignature("setExtractedText", "(Landroid/view/inputmethod/ExtractedText;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setFallbackLineSpacing(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFallbackLineSpacing(bool arg0)
        {
            IExecuteWithSignature("setFallbackLineSpacing", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setFilters(android.text.InputFilter[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.InputFilter"/></param>
        public void SetFilters(Android.Text.InputFilter[] arg0)
        {
            IExecuteWithSignature("setFilters", "([Landroid/text/InputFilter;)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setFirstBaselineToTopHeight(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetFirstBaselineToTopHeight(int arg0)
        {
            IExecuteWithSignature("setFirstBaselineToTopHeight", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setFocusedSearchResultHighlightColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetFocusedSearchResultHighlightColor(int arg0)
        {
            IExecuteWithSignature("setFocusedSearchResultHighlightColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setFocusedSearchResultIndex(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetFocusedSearchResultIndex(int arg0)
        {
            IExecuteWithSignature("setFocusedSearchResultIndex", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setFontFeatureSettings(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetFontFeatureSettings(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setFontFeatureSettings", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setFreezesText(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFreezesText(bool arg0)
        {
            IExecuteWithSignature("setFreezesText", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setGravity(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetGravity(int arg0)
        {
            IExecuteWithSignature("setGravity", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setHeight(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetHeight(int arg0)
        {
            IExecuteWithSignature("setHeight", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setHighlightColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetHighlightColor(int arg0)
        {
            IExecuteWithSignature("setHighlightColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setHighlights(android.text.Highlights)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Highlights"/></param>
        public void SetHighlights(Android.Text.Highlights arg0)
        {
            IExecuteWithSignature("setHighlights", "(Landroid/text/Highlights;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setHorizontallyScrolling(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetHorizontallyScrolling(bool arg0)
        {
            IExecuteWithSignature("setHorizontallyScrolling", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setHyphenationFrequency(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetHyphenationFrequency(int arg0)
        {
            IExecuteWithSignature("setHyphenationFrequency", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setImeActionLabel(java.lang.CharSequence,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetImeActionLabel(Java.Lang.CharSequence arg0, int arg1)
        {
            IExecute("setImeActionLabel", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setImeHintLocales(android.os.LocaleList)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.LocaleList"/></param>
        public void SetImeHintLocales(Android.Os.LocaleList arg0)
        {
            IExecuteWithSignature("setImeHintLocales", "(Landroid/os/LocaleList;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setImeOptions(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetImeOptions(int arg0)
        {
            IExecuteWithSignature("setImeOptions", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setIncludeFontPadding(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetIncludeFontPadding(bool arg0)
        {
            IExecuteWithSignature("setIncludeFontPadding", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setInputExtras(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Org.Xmlpull.V1.XmlPullParserException"/>
        public void SetInputExtras(int arg0)
        {
            IExecuteWithSignature("setInputExtras", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setInputType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetInputType(int arg0)
        {
            IExecuteWithSignature("setInputType", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setJustificationMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetJustificationMode(int arg0)
        {
            IExecuteWithSignature("setJustificationMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setKeyListener(android.text.method.KeyListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.Method.KeyListener"/></param>
        public void SetKeyListener(Android.Text.Method.KeyListener arg0)
        {
            IExecuteWithSignature("setKeyListener", "(Landroid/text/method/KeyListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setLastBaselineToBottomHeight(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetLastBaselineToBottomHeight(int arg0)
        {
            IExecuteWithSignature("setLastBaselineToBottomHeight", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setLetterSpacing(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetLetterSpacing(float arg0)
        {
            IExecuteWithSignature("setLetterSpacing", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setLineBreakStyle(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetLineBreakStyle(int arg0)
        {
            IExecuteWithSignature("setLineBreakStyle", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setLineBreakWordStyle(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetLineBreakWordStyle(int arg0)
        {
            IExecuteWithSignature("setLineBreakWordStyle", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setLineHeight(int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void SetLineHeight(int arg0, float arg1)
        {
            IExecute("setLineHeight", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setLineHeight(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetLineHeight(int arg0)
        {
            IExecuteWithSignature("setLineHeight", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setLines(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetLines(int arg0)
        {
            IExecuteWithSignature("setLines", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setLineSpacing(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void SetLineSpacing(float arg0, float arg1)
        {
            IExecute("setLineSpacing", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setLocalePreferredLineHeightForMinimumUsed(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetLocalePreferredLineHeightForMinimumUsed(bool arg0)
        {
            IExecuteWithSignature("setLocalePreferredLineHeightForMinimumUsed", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setMarqueeRepeatLimit(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMarqueeRepeatLimit(int arg0)
        {
            IExecuteWithSignature("setMarqueeRepeatLimit", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setMaxEms(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMaxEms(int arg0)
        {
            IExecuteWithSignature("setMaxEms", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setMaxHeight(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMaxHeight(int arg0)
        {
            IExecuteWithSignature("setMaxHeight", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setMaxLines(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMaxLines(int arg0)
        {
            IExecuteWithSignature("setMaxLines", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setMaxWidth(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMaxWidth(int arg0)
        {
            IExecuteWithSignature("setMaxWidth", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setMinEms(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMinEms(int arg0)
        {
            IExecuteWithSignature("setMinEms", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setMinHeight(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMinHeight(int arg0)
        {
            IExecuteWithSignature("setMinHeight", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setMinimumFontMetrics(android.graphics.Paint.FontMetrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Paint.FontMetrics"/></param>
        public void SetMinimumFontMetrics(Android.Graphics.Paint.FontMetrics arg0)
        {
            IExecuteWithSignature("setMinimumFontMetrics", "(Landroid/graphics/Paint$FontMetrics;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setMinLines(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMinLines(int arg0)
        {
            IExecuteWithSignature("setMinLines", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setMinWidth(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMinWidth(int arg0)
        {
            IExecuteWithSignature("setMinWidth", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setOnEditorActionListener(android.widget.TextView.OnEditorActionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.TextView.OnEditorActionListener"/></param>
        public void SetOnEditorActionListener(Android.Widget.TextView.OnEditorActionListener arg0)
        {
            IExecuteWithSignature("setOnEditorActionListener", "(Landroid/widget/TextView$OnEditorActionListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setPaintFlags(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetPaintFlags(int arg0)
        {
            IExecuteWithSignature("setPaintFlags", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setPrivateImeOptions(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetPrivateImeOptions(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setPrivateImeOptions", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setRawInputType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetRawInputType(int arg0)
        {
            IExecuteWithSignature("setRawInputType", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setScroller(android.widget.Scroller)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.Scroller"/></param>
        public void SetScroller(Android.Widget.Scroller arg0)
        {
            IExecuteWithSignature("setScroller", "(Landroid/widget/Scroller;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setSearchResultHighlightColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetSearchResultHighlightColor(int arg0)
        {
            IExecuteWithSignature("setSearchResultHighlightColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setSearchResultHighlights(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetSearchResultHighlights(params int[] arg0)
        {
            if (arg0.Length == 0) IExecuteWithSignature("setSearchResultHighlights", "([I)V"); else IExecuteWithSignature("setSearchResultHighlights", "([I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setSelectAllOnFocus(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSelectAllOnFocus(bool arg0)
        {
            IExecuteWithSignature("setSelectAllOnFocus", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setShadowLayer(float,float,float,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void SetShadowLayer(float arg0, float arg1, float arg2, int arg3)
        {
            IExecute("setShadowLayer", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setShiftDrawingOffsetForStartOverhang(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetShiftDrawingOffsetForStartOverhang(bool arg0)
        {
            IExecuteWithSignature("setShiftDrawingOffsetForStartOverhang", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setSingleLine()"/>
        /// </summary>
        public void SetSingleLine()
        {
            IExecuteWithSignature("setSingleLine", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setSingleLine(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSingleLine(bool arg0)
        {
            IExecuteWithSignature("setSingleLine", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setText(java.lang.CharSequence,android.widget.TextView.BufferType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="Android.Widget.TextView.BufferType"/></param>
        public void SetText(Java.Lang.CharSequence arg0, Android.Widget.TextView.BufferType arg1)
        {
            IExecute("setText", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextAppearance(android.content.Context,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetTextAppearance(Android.Content.Context arg0, int arg1)
        {
            IExecute("setTextAppearance", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextAppearance(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetTextAppearance(int arg0)
        {
            IExecuteWithSignature("setTextAppearance", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextClassifier(android.view.textclassifier.TextClassifier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Textclassifier.TextClassifier"/></param>
        public void SetTextClassifier(Android.View.Textclassifier.TextClassifier arg0)
        {
            IExecute("setTextClassifier", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextColor(android.content.res.ColorStateList)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.ColorStateList"/></param>
        public void SetTextColor(Android.Content.Res.ColorStateList arg0)
        {
            IExecuteWithSignature("setTextColor", "(Landroid/content/res/ColorStateList;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetTextColor(int arg0)
        {
            IExecuteWithSignature("setTextColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextCursorDrawable(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetTextCursorDrawable(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setTextCursorDrawable", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextCursorDrawable(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetTextCursorDrawable(int arg0)
        {
            IExecuteWithSignature("setTextCursorDrawable", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextIsSelectable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetTextIsSelectable(bool arg0)
        {
            IExecuteWithSignature("setTextIsSelectable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextLocale(java.util.Locale)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Locale"/></param>
        public void SetTextLocale(Java.Util.Locale arg0)
        {
            IExecuteWithSignature("setTextLocale", "(Ljava/util/Locale;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextLocales(android.os.LocaleList)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.LocaleList"/></param>
        public void SetTextLocales(Android.Os.LocaleList arg0)
        {
            IExecuteWithSignature("setTextLocales", "(Landroid/os/LocaleList;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextMetricsParams(android.text.PrecomputedText.Params)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Text.PrecomputedText.Params"/></param>
        public void SetTextMetricsParams(Android.Text.PrecomputedText.Params arg0)
        {
            IExecuteWithSignature("setTextMetricsParams", "(Landroid/text/PrecomputedText$Params;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextScaleX(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetTextScaleX(float arg0)
        {
            IExecuteWithSignature("setTextScaleX", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextSelectHandle(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetTextSelectHandle(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setTextSelectHandle", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextSelectHandle(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetTextSelectHandle(int arg0)
        {
            IExecuteWithSignature("setTextSelectHandle", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextSelectHandleLeft(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetTextSelectHandleLeft(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setTextSelectHandleLeft", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextSelectHandleLeft(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetTextSelectHandleLeft(int arg0)
        {
            IExecuteWithSignature("setTextSelectHandleLeft", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextSelectHandleRight(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetTextSelectHandleRight(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setTextSelectHandleRight", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextSelectHandleRight(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetTextSelectHandleRight(int arg0)
        {
            IExecuteWithSignature("setTextSelectHandleRight", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextSize(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetTextSize(float arg0)
        {
            IExecuteWithSignature("setTextSize", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTextSize(int,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void SetTextSize(int arg0, float arg1)
        {
            IExecute("setTextSize", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTypeface(android.graphics.Typeface,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Typeface"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetTypeface(Android.Graphics.Typeface arg0, int arg1)
        {
            IExecute("setTypeface", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setTypeface(android.graphics.Typeface)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Typeface"/></param>
        public void SetTypeface(Android.Graphics.Typeface arg0)
        {
            IExecuteWithSignature("setTypeface", "(Landroid/graphics/Typeface;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setUseBoundsForWidth(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetUseBoundsForWidth(bool arg0)
        {
            IExecuteWithSignature("setUseBoundsForWidth", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/TextView.html#setWidth(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetWidth(int arg0)
        {
            IExecuteWithSignature("setWidth", "(I)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region BufferType implementation
        public partial class BufferType
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/TextView.BufferType.html#EDITABLE"/>
            /// </summary>
            public static Android.Widget.TextView.BufferType EDITABLE { get { if (!_EDITABLEReady) { _EDITABLEContent = SGetField<Android.Widget.TextView.BufferType>(LocalBridgeClazz, "EDITABLE"); _EDITABLEReady = true; } return _EDITABLEContent; } }
            private static Android.Widget.TextView.BufferType _EDITABLEContent = default;
            private static bool _EDITABLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/TextView.BufferType.html#NORMAL"/>
            /// </summary>
            public static Android.Widget.TextView.BufferType NORMAL { get { if (!_NORMALReady) { _NORMALContent = SGetField<Android.Widget.TextView.BufferType>(LocalBridgeClazz, "NORMAL"); _NORMALReady = true; } return _NORMALContent; } }
            private static Android.Widget.TextView.BufferType _NORMALContent = default;
            private static bool _NORMALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/TextView.BufferType.html#SPANNABLE"/>
            /// </summary>
            public static Android.Widget.TextView.BufferType SPANNABLE { get { if (!_SPANNABLEReady) { _SPANNABLEContent = SGetField<Android.Widget.TextView.BufferType>(LocalBridgeClazz, "SPANNABLE"); _SPANNABLEReady = true; } return _SPANNABLEContent; } }
            private static Android.Widget.TextView.BufferType _SPANNABLEContent = default;
            private static bool _SPANNABLEReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/TextView.BufferType.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Widget.TextView.BufferType"/></returns>
            public static Android.Widget.TextView.BufferType ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Widget.TextView.BufferType>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/widget/TextView$BufferType;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/TextView.BufferType.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Widget.TextView.BufferType"/></returns>
            public static Android.Widget.TextView.BufferType[] Values()
            {
                return SExecuteWithSignatureArray<Android.Widget.TextView.BufferType>(LocalBridgeClazz, "values", "()[Landroid/widget/TextView$BufferType;");
            }
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnEditorActionListener implementation
        public partial class OnEditorActionListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnEditorActionListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onEditorAction", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnEditorActionEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/widget/TextView.OnEditorActionListener.html#onEditorAction(android.widget.TextView,int,android.view.KeyEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnEditorAction"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.Widget.TextView, int, Android.View.KeyEvent, bool> OnOnEditorAction { get; set; } = null;
            
            bool hasOverrideOnEditorAction = true;
            void OnEditorActionEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnEditorAction = true;
                var methodToExecute = (OnOnEditorAction != null) ? OnOnEditorAction : OnEditorAction;
                var executionResult = methodToExecute.Invoke(data.EventData.GetAt<Android.Widget.TextView>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<Android.View.KeyEvent>(2));
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnEditorAction, executionResult);
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/TextView.OnEditorActionListener.html#onEditorAction(android.widget.TextView,int,android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Widget.TextView"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnEditorAction(Android.Widget.TextView arg0, int arg1, Android.View.KeyEvent arg2)
            {
                hasOverrideOnEditorAction = false; return default;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnEditorActionListenerDirect implementation
        public partial class OnEditorActionListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/TextView.OnEditorActionListener.html#onEditorAction(android.widget.TextView,int,android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Widget.TextView"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnEditorAction(Android.Widget.TextView arg0, int arg1, Android.View.KeyEvent arg2)
            {
                return IExecute<bool>("onEditorAction", arg0, arg1, arg2);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region SavedState implementation
        public partial class SavedState
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/TextView.SavedState.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
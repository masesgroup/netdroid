/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Widget
{
    #region IExpandableListAdapter
    /// <summary>
    /// .NET interface for org.mases.netdroid.generated.android.widget.ExpandableListAdapter implementing <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html"/>
    /// </summary>
    public partial interface IExpandableListAdapter
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region ExpandableListAdapter
    public partial class ExpandableListAdapter : Android.Widget.IExpandableListAdapter
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// Handlers initializer for <see cref="ExpandableListAdapter"/>
        /// </summary>
        protected virtual void InitializeHandlers()
        {
            AddEventHandler("getChildView", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(GetChildViewEventHandler));
            AddEventHandler("getGroupView", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(GetGroupViewEventHandler));
            AddEventHandler("areAllItemsEnabled", new global::System.EventHandler<CLRListenerEventArgs<CLREventData>>(AreAllItemsEnabledEventHandler));
            AddEventHandler("hasStableIds", new global::System.EventHandler<CLRListenerEventArgs<CLREventData>>(HasStableIdsEventHandler));
            AddEventHandler("isChildSelectable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(IsChildSelectableEventHandler));
            AddEventHandler("isEmpty", new global::System.EventHandler<CLRListenerEventArgs<CLREventData>>(IsEmptyEventHandler));
            AddEventHandler("getChildrenCount", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(GetChildrenCountEventHandler));
            AddEventHandler("getGroupCount", new global::System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetGroupCountEventHandler));
            AddEventHandler("getChild", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(GetChildEventHandler));
            AddEventHandler("getGroup", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(GetGroupEventHandler));
            AddEventHandler("getChildId", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(GetChildIdEventHandler));
            AddEventHandler("getCombinedChildId", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<long>>>(GetCombinedChildIdEventHandler));
            AddEventHandler("getCombinedGroupId", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<long>>>(GetCombinedGroupIdEventHandler));
            AddEventHandler("getGroupId", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(GetGroupIdEventHandler));
            AddEventHandler("onGroupCollapsed", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnGroupCollapsedEventHandler));
            AddEventHandler("onGroupExpanded", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnGroupExpandedEventHandler));
            AddEventHandler("registerDataSetObserver", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Database.DataSetObserver>>>(RegisterDataSetObserverEventHandler));
            AddEventHandler("unregisterDataSetObserver", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Database.DataSetObserver>>>(UnregisterDataSetObserverEventHandler));

        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetChildView"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, int, bool, Android.View.View, Android.View.ViewGroup, Android.View.View> OnGetChildView { get; set; } = null;

        void GetChildViewEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnGetChildView != null) ? OnGetChildView : GetChildView;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<bool>(1), data.EventData.GetAt<Android.View.View>(2), data.EventData.GetAt<Android.View.ViewGroup>(3));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="Android.View.View"/></param>
        /// <param name="arg4"><see cref="Android.View.ViewGroup"/></param>
        /// <returns><see cref="Android.View.View"/></returns>
        public virtual Android.View.View GetChildView(int arg0, int arg1, bool arg2, Android.View.View arg3, Android.View.ViewGroup arg4)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupView(int,boolean,android.view.View,android.view.ViewGroup)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetGroupView"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, bool, Android.View.View, Android.View.ViewGroup, Android.View.View> OnGetGroupView { get; set; } = null;

        void GetGroupViewEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnGetGroupView != null) ? OnGetGroupView : GetGroupView;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<bool>(0), data.EventData.GetAt<Android.View.View>(1), data.EventData.GetAt<Android.View.ViewGroup>(2));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupView(int,boolean,android.view.View,android.view.ViewGroup)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Android.View.View"/></param>
        /// <param name="arg3"><see cref="Android.View.ViewGroup"/></param>
        /// <returns><see cref="Android.View.View"/></returns>
        public virtual Android.View.View GetGroupView(int arg0, bool arg1, Android.View.View arg2, Android.View.ViewGroup arg3)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#areAllItemsEnabled()"/>
        /// </summary>
        /// <remarks>If <see cref="OnAreAllItemsEnabled"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<bool> OnAreAllItemsEnabled { get; set; } = null;

        void AreAllItemsEnabledEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnAreAllItemsEnabled != null) ? OnAreAllItemsEnabled : AreAllItemsEnabled;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#areAllItemsEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool AreAllItemsEnabled()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#hasStableIds()"/>
        /// </summary>
        /// <remarks>If <see cref="OnHasStableIds"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<bool> OnHasStableIds { get; set; } = null;

        void HasStableIdsEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnHasStableIds != null) ? OnHasStableIds : HasStableIds;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#hasStableIds()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool HasStableIds()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#isChildSelectable(int,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsChildSelectable"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, int, bool> OnIsChildSelectable { get; set; } = null;

        void IsChildSelectableEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnIsChildSelectable != null) ? OnIsChildSelectable : IsChildSelectable;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#isChildSelectable(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public virtual bool IsChildSelectable(int arg0, int arg1)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#isEmpty()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsEmpty"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<bool> OnIsEmpty { get; set; } = null;

        void IsEmptyEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIsEmpty != null) ? OnIsEmpty : IsEmpty;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#isEmpty()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool IsEmpty()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildrenCount(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetChildrenCount"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, int> OnGetChildrenCount { get; set; } = null;

        void GetChildrenCountEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnGetChildrenCount != null) ? OnGetChildrenCount : GetChildrenCount;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildrenCount(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public virtual int GetChildrenCount(int arg0)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupCount()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetGroupCount"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int> OnGetGroupCount { get; set; } = null;

        void GetGroupCountEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetGroupCount != null) ? OnGetGroupCount : GetGroupCount;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public virtual int GetGroupCount()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChild(int,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetChild"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, int, object> OnGetChild { get; set; } = null;

        void GetChildEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnGetChild != null) ? OnGetChild : GetChild;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChild(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public virtual object GetChild(int arg0, int arg1)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroup(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetGroup"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, object> OnGetGroup { get; set; } = null;

        void GetGroupEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnGetGroup != null) ? OnGetGroup : GetGroup;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroup(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public virtual object GetGroup(int arg0)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildId(int,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetChildId"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, int, long> OnGetChildId { get; set; } = null;

        void GetChildIdEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnGetChildId != null) ? OnGetChildId : GetChildId;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildId(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public virtual long GetChildId(int arg0, int arg1)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getCombinedChildId(long,long)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetCombinedChildId"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<long, long, long> OnGetCombinedChildId { get; set; } = null;

        void GetCombinedChildIdEventHandler(object sender, CLRListenerEventArgs<CLREventData<long>> data)
        {
            var methodToExecute = (OnGetCombinedChildId != null) ? OnGetCombinedChildId : GetCombinedChildId;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<long>(0));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getCombinedChildId(long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public virtual long GetCombinedChildId(long arg0, long arg1)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getCombinedGroupId(long)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetCombinedGroupId"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<long, long> OnGetCombinedGroupId { get; set; } = null;

        void GetCombinedGroupIdEventHandler(object sender, CLRListenerEventArgs<CLREventData<long>> data)
        {
            var methodToExecute = (OnGetCombinedGroupId != null) ? OnGetCombinedGroupId : GetCombinedGroupId;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getCombinedGroupId(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public virtual long GetCombinedGroupId(long arg0)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupId(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetGroupId"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Func<int, long> OnGetGroupId { get; set; } = null;

        void GetGroupIdEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnGetGroupId != null) ? OnGetGroupId : GetGroupId;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupId(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public virtual long GetGroupId(int arg0)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#onGroupCollapsed(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnGroupCollapsed"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<int> OnOnGroupCollapsed { get; set; } = null;

        void OnGroupCollapsedEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnOnGroupCollapsed != null) ? OnOnGroupCollapsed : OnGroupCollapsed;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#onGroupCollapsed(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public virtual void OnGroupCollapsed(int arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#onGroupExpanded(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnGroupExpanded"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<int> OnOnGroupExpanded { get; set; } = null;

        void OnGroupExpandedEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnOnGroupExpanded != null) ? OnOnGroupExpanded : OnGroupExpanded;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#onGroupExpanded(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public virtual void OnGroupExpanded(int arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#registerDataSetObserver(android.database.DataSetObserver)"/>
        /// </summary>
        /// <remarks>If <see cref="OnRegisterDataSetObserver"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<Android.Database.DataSetObserver> OnRegisterDataSetObserver { get; set; } = null;

        void RegisterDataSetObserverEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Database.DataSetObserver>> data)
        {
            var methodToExecute = (OnRegisterDataSetObserver != null) ? OnRegisterDataSetObserver : RegisterDataSetObserver;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#registerDataSetObserver(android.database.DataSetObserver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.DataSetObserver"/></param>
        public virtual void RegisterDataSetObserver(Android.Database.DataSetObserver arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#unregisterDataSetObserver(android.database.DataSetObserver)"/>
        /// </summary>
        /// <remarks>If <see cref="OnUnregisterDataSetObserver"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<Android.Database.DataSetObserver> OnUnregisterDataSetObserver { get; set; } = null;

        void UnregisterDataSetObserverEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Database.DataSetObserver>> data)
        {
            var methodToExecute = (OnUnregisterDataSetObserver != null) ? OnUnregisterDataSetObserver : UnregisterDataSetObserver;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#unregisterDataSetObserver(android.database.DataSetObserver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.DataSetObserver"/></param>
        public virtual void UnregisterDataSetObserver(Android.Database.DataSetObserver arg0)
        {
            
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region ExpandableListAdapterDirect
    public partial class ExpandableListAdapterDirect : Android.Widget.IExpandableListAdapter
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="Android.View.View"/></param>
        /// <param name="arg4"><see cref="Android.View.ViewGroup"/></param>
        /// <returns><see cref="Android.View.View"/></returns>
        public override Android.View.View GetChildView(int arg0, int arg1, bool arg2, Android.View.View arg3, Android.View.ViewGroup arg4)
        {
            return IExecute<Android.View.View>("getChildView", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupView(int,boolean,android.view.View,android.view.ViewGroup)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Android.View.View"/></param>
        /// <param name="arg3"><see cref="Android.View.ViewGroup"/></param>
        /// <returns><see cref="Android.View.View"/></returns>
        public override Android.View.View GetGroupView(int arg0, bool arg1, Android.View.View arg2, Android.View.ViewGroup arg3)
        {
            return IExecute<Android.View.View>("getGroupView", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#areAllItemsEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool AreAllItemsEnabled()
        {
            return IExecuteWithSignature<bool>("areAllItemsEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#hasStableIds()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool HasStableIds()
        {
            return IExecuteWithSignature<bool>("hasStableIds", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#isChildSelectable(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public override bool IsChildSelectable(int arg0, int arg1)
        {
            return IExecute<bool>("isChildSelectable", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#isEmpty()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool IsEmpty()
        {
            return IExecuteWithSignature<bool>("isEmpty", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildrenCount(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public override int GetChildrenCount(int arg0)
        {
            return IExecuteWithSignature<int>("getChildrenCount", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public override int GetGroupCount()
        {
            return IExecuteWithSignature<int>("getGroupCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChild(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public override object GetChild(int arg0, int arg1)
        {
            return IExecute("getChild", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroup(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public override object GetGroup(int arg0)
        {
            return IExecuteWithSignature("getGroup", "(I)Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getChildId(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public override long GetChildId(int arg0, int arg1)
        {
            return IExecute<long>("getChildId", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getCombinedChildId(long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public override long GetCombinedChildId(long arg0, long arg1)
        {
            return IExecute<long>("getCombinedChildId", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getCombinedGroupId(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public override long GetCombinedGroupId(long arg0)
        {
            return IExecuteWithSignature<long>("getCombinedGroupId", "(J)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#getGroupId(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public override long GetGroupId(int arg0)
        {
            return IExecuteWithSignature<long>("getGroupId", "(I)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#onGroupCollapsed(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public override void OnGroupCollapsed(int arg0)
        {
            IExecuteWithSignature("onGroupCollapsed", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#onGroupExpanded(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public override void OnGroupExpanded(int arg0)
        {
            IExecuteWithSignature("onGroupExpanded", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#registerDataSetObserver(android.database.DataSetObserver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.DataSetObserver"/></param>
        public override void RegisterDataSetObserver(Android.Database.DataSetObserver arg0)
        {
            IExecuteWithSignature("registerDataSetObserver", "(Landroid/database/DataSetObserver;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListAdapter.html#unregisterDataSetObserver(android.database.DataSetObserver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Database.DataSetObserver"/></param>
        public override void UnregisterDataSetObserver(Android.Database.DataSetObserver arg0)
        {
            IExecuteWithSignature("unregisterDataSetObserver", "(Landroid/database/DataSetObserver;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
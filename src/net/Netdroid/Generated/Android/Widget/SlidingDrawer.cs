/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Widget
{
    #region SlidingDrawer declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html"/>
    /// </summary>
    [global::System.Obsolete()]
    public partial class SlidingDrawer : Android.View.ViewGroup
    {
        const string _bridgeClassName = "android.widget.SlidingDrawer";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public SlidingDrawer() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public SlidingDrawer(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region OnDrawerCloseListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerCloseListener.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class OnDrawerCloseListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnDrawerCloseListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.widget.SlidingDrawer_OnDrawerCloseListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnDrawerCloseListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnDrawerCloseListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnDrawerCloseListenerDirect : OnDrawerCloseListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.widget.SlidingDrawer$OnDrawerCloseListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnDrawerOpenListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerOpenListener.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class OnDrawerOpenListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnDrawerOpenListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.widget.SlidingDrawer_OnDrawerOpenListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnDrawerOpenListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnDrawerOpenListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnDrawerOpenListenerDirect : OnDrawerOpenListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.widget.SlidingDrawer$OnDrawerOpenListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnDrawerScrollListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerScrollListener.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class OnDrawerScrollListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnDrawerScrollListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.widget.SlidingDrawer_OnDrawerScrollListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnDrawerScrollListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnDrawerScrollListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnDrawerScrollListenerDirect : OnDrawerScrollListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.widget.SlidingDrawer$OnDrawerScrollListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

    
    }
    #endregion

    #region SlidingDrawer implementation
    public partial class SlidingDrawer
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        [global::System.Obsolete()]
        public SlidingDrawer(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2, int arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [global::System.Obsolete()]
        public SlidingDrawer(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        [global::System.Obsolete()]
        public SlidingDrawer(Android.Content.Context arg0, Android.Util.AttributeSet arg1)
            : base(arg0, arg1)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#ORIENTATION_HORIZONTAL"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ORIENTATION_HORIZONTAL { get { if (!_ORIENTATION_HORIZONTALReady) { _ORIENTATION_HORIZONTALContent = SGetField<int>(LocalBridgeClazz, "ORIENTATION_HORIZONTAL"); _ORIENTATION_HORIZONTALReady = true; } return _ORIENTATION_HORIZONTALContent; } }
        private static int _ORIENTATION_HORIZONTALContent = default;
        private static bool _ORIENTATION_HORIZONTALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#ORIENTATION_VERTICAL"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ORIENTATION_VERTICAL { get { if (!_ORIENTATION_VERTICALReady) { _ORIENTATION_VERTICALContent = SGetField<int>(LocalBridgeClazz, "ORIENTATION_VERTICAL"); _ORIENTATION_VERTICALReady = true; } return _ORIENTATION_VERTICALContent; } }
        private static int _ORIENTATION_VERTICALContent = default;
        private static bool _ORIENTATION_VERTICALReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#getContent()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View"/></returns>
        [global::System.Obsolete()]
        public Android.View.View GetContent()
        {
            return IExecuteWithSignature<Android.View.View>("getContent", "()Landroid/view/View;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#getHandle()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View"/></returns>
        [global::System.Obsolete()]
        public Android.View.View GetHandle()
        {
            return IExecuteWithSignature<Android.View.View>("getHandle", "()Landroid/view/View;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#isMoving()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsMoving()
        {
            return IExecuteWithSignature<bool>("isMoving", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#isOpened()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsOpened()
        {
            return IExecuteWithSignature<bool>("isOpened", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#animateClose()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void AnimateClose()
        {
            IExecuteWithSignature("animateClose", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#animateOpen()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void AnimateOpen()
        {
            IExecuteWithSignature("animateOpen", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#animateToggle()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void AnimateToggle()
        {
            IExecuteWithSignature("animateToggle", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#close()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#lock()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Lock()
        {
            IExecuteWithSignature("lock", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#open()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Open()
        {
            IExecuteWithSignature("open", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#setOnDrawerCloseListener(android.widget.SlidingDrawer.OnDrawerCloseListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.SlidingDrawer.OnDrawerCloseListener"/></param>
        [global::System.Obsolete()]
        public void SetOnDrawerCloseListener(Android.Widget.SlidingDrawer.OnDrawerCloseListener arg0)
        {
            IExecuteWithSignature("setOnDrawerCloseListener", "(Landroid/widget/SlidingDrawer$OnDrawerCloseListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#setOnDrawerOpenListener(android.widget.SlidingDrawer.OnDrawerOpenListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.SlidingDrawer.OnDrawerOpenListener"/></param>
        [global::System.Obsolete()]
        public void SetOnDrawerOpenListener(Android.Widget.SlidingDrawer.OnDrawerOpenListener arg0)
        {
            IExecuteWithSignature("setOnDrawerOpenListener", "(Landroid/widget/SlidingDrawer$OnDrawerOpenListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#setOnDrawerScrollListener(android.widget.SlidingDrawer.OnDrawerScrollListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.SlidingDrawer.OnDrawerScrollListener"/></param>
        [global::System.Obsolete()]
        public void SetOnDrawerScrollListener(Android.Widget.SlidingDrawer.OnDrawerScrollListener arg0)
        {
            IExecuteWithSignature("setOnDrawerScrollListener", "(Landroid/widget/SlidingDrawer$OnDrawerScrollListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#toggle()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Toggle()
        {
            IExecuteWithSignature("toggle", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.html#unlock()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Unlock()
        {
            IExecuteWithSignature("unlock", "()V");
        }
    
        #endregion
    
        #region Nested classes
        #region OnDrawerCloseListener implementation
        public partial class OnDrawerCloseListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnDrawerCloseListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDrawerClosed", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDrawerClosedEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerCloseListener.html#onDrawerClosed()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDrawerClosed"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnDrawerClosed { get; set; } = null;
            
            bool hasOverrideOnDrawerClosed = true;
            void OnDrawerClosedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDrawerClosed = true;
                var methodToExecute = (OnOnDrawerClosed != null) ? OnOnDrawerClosed : OnDrawerClosed;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnDrawerClosed;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerCloseListener.html#onDrawerClosed()"/>
            /// </summary>
            [global::System.Obsolete()]
            public virtual void OnDrawerClosed()
            {
                hasOverrideOnDrawerClosed = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnDrawerCloseListenerDirect implementation
        public partial class OnDrawerCloseListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerCloseListener.html#onDrawerClosed()"/>
            /// </summary>
            [global::System.Obsolete()]
            public override void OnDrawerClosed()
            {
                IExecuteWithSignature("onDrawerClosed", "()V");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnDrawerOpenListener implementation
        public partial class OnDrawerOpenListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnDrawerOpenListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDrawerOpened", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDrawerOpenedEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerOpenListener.html#onDrawerOpened()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDrawerOpened"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnDrawerOpened { get; set; } = null;
            
            bool hasOverrideOnDrawerOpened = true;
            void OnDrawerOpenedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDrawerOpened = true;
                var methodToExecute = (OnOnDrawerOpened != null) ? OnOnDrawerOpened : OnDrawerOpened;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnDrawerOpened;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerOpenListener.html#onDrawerOpened()"/>
            /// </summary>
            [global::System.Obsolete()]
            public virtual void OnDrawerOpened()
            {
                hasOverrideOnDrawerOpened = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnDrawerOpenListenerDirect implementation
        public partial class OnDrawerOpenListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerOpenListener.html#onDrawerOpened()"/>
            /// </summary>
            [global::System.Obsolete()]
            public override void OnDrawerOpened()
            {
                IExecuteWithSignature("onDrawerOpened", "()V");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnDrawerScrollListener implementation
        public partial class OnDrawerScrollListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnDrawerScrollListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onScrollEnded", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnScrollEndedEventHandler));
                AddEventHandler("onScrollStarted", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnScrollStartedEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerScrollListener.html#onScrollEnded()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnScrollEnded"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnScrollEnded { get; set; } = null;
            
            bool hasOverrideOnScrollEnded = true;
            void OnScrollEndedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnScrollEnded = true;
                var methodToExecute = (OnOnScrollEnded != null) ? OnOnScrollEnded : OnScrollEnded;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnScrollEnded;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerScrollListener.html#onScrollEnded()"/>
            /// </summary>
            [global::System.Obsolete()]
            public virtual void OnScrollEnded()
            {
                hasOverrideOnScrollEnded = false;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerScrollListener.html#onScrollStarted()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnScrollStarted"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnScrollStarted { get; set; } = null;
            
            bool hasOverrideOnScrollStarted = true;
            void OnScrollStartedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnScrollStarted = true;
                var methodToExecute = (OnOnScrollStarted != null) ? OnOnScrollStarted : OnScrollStarted;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnScrollStarted;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerScrollListener.html#onScrollStarted()"/>
            /// </summary>
            [global::System.Obsolete()]
            public virtual void OnScrollStarted()
            {
                hasOverrideOnScrollStarted = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnDrawerScrollListenerDirect implementation
        public partial class OnDrawerScrollListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerScrollListener.html#onScrollEnded()"/>
            /// </summary>
            [global::System.Obsolete()]
            public override void OnScrollEnded()
            {
                IExecuteWithSignature("onScrollEnded", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/SlidingDrawer.OnDrawerScrollListener.html#onScrollStarted()"/>
            /// </summary>
            [global::System.Obsolete()]
            public override void OnScrollStarted()
            {
                IExecuteWithSignature("onScrollStarted", "()V");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Widget
{
    #region ExpandableListView
    public partial class ExpandableListView
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public ExpandableListView(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2, int arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public ExpandableListView(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        public ExpandableListView(Android.Content.Context arg0, Android.Util.AttributeSet arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        public ExpandableListView(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#CHILD_INDICATOR_INHERIT"/>
        /// </summary>
        public static int CHILD_INDICATOR_INHERIT { get { if (!_CHILD_INDICATOR_INHERITReady) { _CHILD_INDICATOR_INHERITContent = SGetField<int>(LocalBridgeClazz, "CHILD_INDICATOR_INHERIT"); _CHILD_INDICATOR_INHERITReady = true; } return _CHILD_INDICATOR_INHERITContent; } }
        private static int _CHILD_INDICATOR_INHERITContent = default;
        private static bool _CHILD_INDICATOR_INHERITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#PACKED_POSITION_TYPE_CHILD"/>
        /// </summary>
        public static int PACKED_POSITION_TYPE_CHILD { get { if (!_PACKED_POSITION_TYPE_CHILDReady) { _PACKED_POSITION_TYPE_CHILDContent = SGetField<int>(LocalBridgeClazz, "PACKED_POSITION_TYPE_CHILD"); _PACKED_POSITION_TYPE_CHILDReady = true; } return _PACKED_POSITION_TYPE_CHILDContent; } }
        private static int _PACKED_POSITION_TYPE_CHILDContent = default;
        private static bool _PACKED_POSITION_TYPE_CHILDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#PACKED_POSITION_TYPE_GROUP"/>
        /// </summary>
        public static int PACKED_POSITION_TYPE_GROUP { get { if (!_PACKED_POSITION_TYPE_GROUPReady) { _PACKED_POSITION_TYPE_GROUPContent = SGetField<int>(LocalBridgeClazz, "PACKED_POSITION_TYPE_GROUP"); _PACKED_POSITION_TYPE_GROUPReady = true; } return _PACKED_POSITION_TYPE_GROUPContent; } }
        private static int _PACKED_POSITION_TYPE_GROUPContent = default;
        private static bool _PACKED_POSITION_TYPE_GROUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#PACKED_POSITION_TYPE_NULL"/>
        /// </summary>
        public static int PACKED_POSITION_TYPE_NULL { get { if (!_PACKED_POSITION_TYPE_NULLReady) { _PACKED_POSITION_TYPE_NULLContent = SGetField<int>(LocalBridgeClazz, "PACKED_POSITION_TYPE_NULL"); _PACKED_POSITION_TYPE_NULLReady = true; } return _PACKED_POSITION_TYPE_NULLContent; } }
        private static int _PACKED_POSITION_TYPE_NULLContent = default;
        private static bool _PACKED_POSITION_TYPE_NULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#PACKED_POSITION_VALUE_NULL"/>
        /// </summary>
        public static long PACKED_POSITION_VALUE_NULL { get { if (!_PACKED_POSITION_VALUE_NULLReady) { _PACKED_POSITION_VALUE_NULLContent = SGetField<long>(LocalBridgeClazz, "PACKED_POSITION_VALUE_NULL"); _PACKED_POSITION_VALUE_NULLReady = true; } return _PACKED_POSITION_VALUE_NULLContent; } }
        private static long _PACKED_POSITION_VALUE_NULLContent = default;
        private static bool _PACKED_POSITION_VALUE_NULLReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#getPackedPositionChild(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetPackedPositionChild(long arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getPackedPositionChild", "(J)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#getPackedPositionGroup(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetPackedPositionGroup(long arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getPackedPositionGroup", "(J)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#getPackedPositionType(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetPackedPositionType(long arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getPackedPositionType", "(J)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#getPackedPositionForChild(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public static long GetPackedPositionForChild(int arg0, int arg1)
        {
            return SExecute<long>(LocalBridgeClazz, "getPackedPositionForChild", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#getPackedPositionForGroup(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public static long GetPackedPositionForGroup(int arg0)
        {
            return SExecuteWithSignature<long>(LocalBridgeClazz, "getPackedPositionForGroup", "(I)J", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#getExpandableListAdapter()"/>
        /// </summary>
        /// <returns><see cref="Android.Widget.ExpandableListAdapter"/></returns>
        public Android.Widget.ExpandableListAdapter GetExpandableListAdapter()
        {
            return IExecuteWithSignature<Android.Widget.ExpandableListAdapter>("getExpandableListAdapter", "()Landroid/widget/ExpandableListAdapter;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#getExpandableListAdapter()"/>
        /// </summary>
        /// <returns><see cref="Android.Widget.ExpandableListAdapter"/></returns>
        public Android.Widget.ExpandableListAdapter GetExpandableListAdapterDirect()
        {
            return IExecuteWithSignature<Android.Widget.ExpandableListAdapterDirect, Android.Widget.ExpandableListAdapter>("getExpandableListAdapter", "()Landroid/widget/ExpandableListAdapter;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#collapseGroup(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CollapseGroup(int arg0)
        {
            return IExecuteWithSignature<bool>("collapseGroup", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#expandGroup(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ExpandGroup(int arg0, bool arg1)
        {
            return IExecute<bool>("expandGroup", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#expandGroup(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ExpandGroup(int arg0)
        {
            return IExecuteWithSignature<bool>("expandGroup", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#isGroupExpanded(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsGroupExpanded(int arg0)
        {
            return IExecuteWithSignature<bool>("isGroupExpanded", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#setSelectedChild(int,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetSelectedChild(int arg0, int arg1, bool arg2)
        {
            return IExecute<bool>("setSelectedChild", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#getFlatListPosition(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetFlatListPosition(long arg0)
        {
            return IExecuteWithSignature<int>("getFlatListPosition", "(J)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#getExpandableListPosition(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetExpandableListPosition(int arg0)
        {
            return IExecuteWithSignature<long>("getExpandableListPosition", "(I)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#getSelectedId()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetSelectedId()
        {
            return IExecuteWithSignature<long>("getSelectedId", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#getSelectedPosition()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetSelectedPosition()
        {
            return IExecuteWithSignature<long>("getSelectedPosition", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#setAdapter(android.widget.ExpandableListAdapter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.ExpandableListAdapter"/></param>
        public void SetAdapter(Android.Widget.ExpandableListAdapter arg0)
        {
            IExecuteWithSignature("setAdapter", "(Landroid/widget/ExpandableListAdapter;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#setChildDivider(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetChildDivider(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setChildDivider", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#setChildIndicator(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetChildIndicator(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setChildIndicator", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#setChildIndicatorBounds(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetChildIndicatorBounds(int arg0, int arg1)
        {
            IExecute("setChildIndicatorBounds", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#setChildIndicatorBoundsRelative(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetChildIndicatorBoundsRelative(int arg0, int arg1)
        {
            IExecute("setChildIndicatorBoundsRelative", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#setGroupIndicator(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetGroupIndicator(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setGroupIndicator", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#setIndicatorBounds(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetIndicatorBounds(int arg0, int arg1)
        {
            IExecute("setIndicatorBounds", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#setIndicatorBoundsRelative(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetIndicatorBoundsRelative(int arg0, int arg1)
        {
            IExecute("setIndicatorBoundsRelative", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnChildClickListener(android.widget.ExpandableListView.OnChildClickListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.ExpandableListView.OnChildClickListener"/></param>
        public void SetOnChildClickListener(Android.Widget.ExpandableListView.OnChildClickListener arg0)
        {
            IExecuteWithSignature("setOnChildClickListener", "(Landroid/widget/ExpandableListView$OnChildClickListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnGroupClickListener(android.widget.ExpandableListView.OnGroupClickListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.ExpandableListView.OnGroupClickListener"/></param>
        public void SetOnGroupClickListener(Android.Widget.ExpandableListView.OnGroupClickListener arg0)
        {
            IExecuteWithSignature("setOnGroupClickListener", "(Landroid/widget/ExpandableListView$OnGroupClickListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnGroupCollapseListener(android.widget.ExpandableListView.OnGroupCollapseListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.ExpandableListView.OnGroupCollapseListener"/></param>
        public void SetOnGroupCollapseListener(Android.Widget.ExpandableListView.OnGroupCollapseListener arg0)
        {
            IExecuteWithSignature("setOnGroupCollapseListener", "(Landroid/widget/ExpandableListView$OnGroupCollapseListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnGroupExpandListener(android.widget.ExpandableListView.OnGroupExpandListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Widget.ExpandableListView.OnGroupExpandListener"/></param>
        public void SetOnGroupExpandListener(Android.Widget.ExpandableListView.OnGroupExpandListener arg0)
        {
            IExecuteWithSignature("setOnGroupExpandListener", "(Landroid/widget/ExpandableListView$OnGroupExpandListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.html#setSelectedGroup(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetSelectedGroup(int arg0)
        {
            IExecuteWithSignature("setSelectedGroup", "(I)V", arg0);
        }

        #endregion

        #region Nested classes
        #region ExpandableListContextMenuInfo
        public partial class ExpandableListContextMenuInfo
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.ExpandableListContextMenuInfo.html#%3Cinit%3E(android.view.View,long,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            public ExpandableListContextMenuInfo(Android.View.View arg0, long arg1, long arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.ExpandableListContextMenuInfo.html#targetView"/>
            /// </summary>
            public Android.View.View targetView { get { return IGetField<Android.View.View>("targetView"); } set { ISetField("targetView", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.ExpandableListContextMenuInfo.html#id"/>
            /// </summary>
            public long id { get { return IGetField<long>("id"); } set { ISetField("id", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.ExpandableListContextMenuInfo.html#packedPosition"/>
            /// </summary>
            public long packedPosition { get { return IGetField<long>("packedPosition"); } set { ISetField("packedPosition", value); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnChildClickListener
        public partial class OnChildClickListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnChildClickListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onChildClick", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Widget.ExpandableListView>>>(OnChildClickEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListView.OnChildClickListener.html#onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnChildClick"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.Widget.ExpandableListView, Android.View.View, int, int, long, bool> OnOnChildClick { get; set; } = null;

            void OnChildClickEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Widget.ExpandableListView>> data)
            {
                var methodToExecute = (OnOnChildClick != null) ? OnOnChildClick : OnChildClick;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.View>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<long>(3));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.OnChildClickListener.html#onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Widget.ExpandableListView"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="long"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnChildClick(Android.Widget.ExpandableListView arg0, Android.View.View arg1, int arg2, int arg3, long arg4)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnChildClickListenerDirect
        public partial class OnChildClickListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.OnChildClickListener.html#onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Widget.ExpandableListView"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="long"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnChildClick(Android.Widget.ExpandableListView arg0, Android.View.View arg1, int arg2, int arg3, long arg4)
            {
                return IExecute<bool>("onChildClick", arg0, arg1, arg2, arg3, arg4);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGroupClickListener
        public partial class OnGroupClickListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnGroupClickListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onGroupClick", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Widget.ExpandableListView>>>(OnGroupClickEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListView.OnGroupClickListener.html#onGroupClick(android.widget.ExpandableListView,android.view.View,int,long)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGroupClick"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.Widget.ExpandableListView, Android.View.View, int, long, bool> OnOnGroupClick { get; set; } = null;

            void OnGroupClickEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Widget.ExpandableListView>> data)
            {
                var methodToExecute = (OnOnGroupClick != null) ? OnOnGroupClick : OnGroupClick;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.View>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<long>(2));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.OnGroupClickListener.html#onGroupClick(android.widget.ExpandableListView,android.view.View,int,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Widget.ExpandableListView"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="long"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnGroupClick(Android.Widget.ExpandableListView arg0, Android.View.View arg1, int arg2, long arg3)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGroupClickListenerDirect
        public partial class OnGroupClickListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.OnGroupClickListener.html#onGroupClick(android.widget.ExpandableListView,android.view.View,int,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Widget.ExpandableListView"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="long"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnGroupClick(Android.Widget.ExpandableListView arg0, Android.View.View arg1, int arg2, long arg3)
            {
                return IExecute<bool>("onGroupClick", arg0, arg1, arg2, arg3);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGroupCollapseListener
        public partial class OnGroupCollapseListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnGroupCollapseListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onGroupCollapse", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnGroupCollapseEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListView.OnGroupCollapseListener.html#onGroupCollapse(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGroupCollapse"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnGroupCollapse { get; set; } = null;

            void OnGroupCollapseEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
            {
                var methodToExecute = (OnOnGroupCollapse != null) ? OnOnGroupCollapse : OnGroupCollapse;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.OnGroupCollapseListener.html#onGroupCollapse(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public virtual void OnGroupCollapse(int arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGroupCollapseListenerDirect
        public partial class OnGroupCollapseListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.OnGroupCollapseListener.html#onGroupCollapse(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnGroupCollapse(int arg0)
            {
                IExecuteWithSignature("onGroupCollapse", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGroupExpandListener
        public partial class OnGroupExpandListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnGroupExpandListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onGroupExpand", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnGroupExpandEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/widget/ExpandableListView.OnGroupExpandListener.html#onGroupExpand(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGroupExpand"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnGroupExpand { get; set; } = null;

            void OnGroupExpandEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
            {
                var methodToExecute = (OnOnGroupExpand != null) ? OnOnGroupExpand : OnGroupExpand;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.OnGroupExpandListener.html#onGroupExpand(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public virtual void OnGroupExpand(int arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGroupExpandListenerDirect
        public partial class OnGroupExpandListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/widget/ExpandableListView.OnGroupExpandListener.html#onGroupExpand(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnGroupExpand(int arg0)
            {
                IExecuteWithSignature("onGroupExpand", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Widget
{
    #region EdgeEffect
    public partial class EdgeEffect
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        public EdgeEffect(Android.Content.Context arg0, Android.Util.AttributeSet arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        public EdgeEffect(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#DEFAULT_BLEND_MODE"/>
        /// </summary>
        public static Android.Graphics.BlendMode DEFAULT_BLEND_MODE { get { if (!_DEFAULT_BLEND_MODEReady) { _DEFAULT_BLEND_MODEContent = SGetField<Android.Graphics.BlendMode>(LocalBridgeClazz, "DEFAULT_BLEND_MODE"); _DEFAULT_BLEND_MODEReady = true; } return _DEFAULT_BLEND_MODEContent; } }
        private static Android.Graphics.BlendMode _DEFAULT_BLEND_MODEContent = default;
        private static bool _DEFAULT_BLEND_MODEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#getBlendMode()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.BlendMode"/></returns>
        public Android.Graphics.BlendMode GetBlendMode()
        {
            return IExecuteWithSignature<Android.Graphics.BlendMode>("getBlendMode", "()Landroid/graphics/BlendMode;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#draw(android.graphics.Canvas)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Canvas"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Draw(Android.Graphics.Canvas arg0)
        {
            return IExecuteWithSignature<bool>("draw", "(Landroid/graphics/Canvas;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#isFinished()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFinished()
        {
            return IExecuteWithSignature<bool>("isFinished", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#getDistance()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetDistance()
        {
            return IExecuteWithSignature<float>("getDistance", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#onPullDistance(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="float"/></returns>
        public float OnPullDistance(float arg0, float arg1)
        {
            return IExecute<float>("onPullDistance", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#getColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetColor()
        {
            return IExecuteWithSignature<int>("getColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#getMaxHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxHeight()
        {
            return IExecuteWithSignature<int>("getMaxHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#finish()"/>
        /// </summary>
        public void Finish()
        {
            IExecuteWithSignature("finish", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#onAbsorb(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OnAbsorb(int arg0)
        {
            IExecuteWithSignature("onAbsorb", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#onPull(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void OnPull(float arg0, float arg1)
        {
            IExecute("onPull", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#onPull(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void OnPull(float arg0)
        {
            IExecuteWithSignature("onPull", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#onRelease()"/>
        /// </summary>
        public void OnRelease()
        {
            IExecuteWithSignature("onRelease", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#setBlendMode(android.graphics.BlendMode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.BlendMode"/></param>
        public void SetBlendMode(Android.Graphics.BlendMode arg0)
        {
            IExecuteWithSignature("setBlendMode", "(Landroid/graphics/BlendMode;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#setColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetColor(int arg0)
        {
            IExecuteWithSignature("setColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/widget/EdgeEffect.html#setSize(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetSize(int arg0, int arg1)
        {
            IExecute("setSize", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
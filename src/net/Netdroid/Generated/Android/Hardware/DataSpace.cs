/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Hardware
{
    #region DataSpace
    public partial class DataSpace
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_ADOBE_RGB"/>
        /// </summary>
        public static int DATASPACE_ADOBE_RGB { get { if (!_DATASPACE_ADOBE_RGBReady) { _DATASPACE_ADOBE_RGBContent = SGetField<int>(LocalBridgeClazz, "DATASPACE_ADOBE_RGB"); _DATASPACE_ADOBE_RGBReady = true; } return _DATASPACE_ADOBE_RGBContent; } }
        private static int _DATASPACE_ADOBE_RGBContent = default;
        private static bool _DATASPACE_ADOBE_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_BT2020"/>
        /// </summary>
        public static int DATASPACE_BT2020 { get { if (!_DATASPACE_BT2020Ready) { _DATASPACE_BT2020Content = SGetField<int>(LocalBridgeClazz, "DATASPACE_BT2020"); _DATASPACE_BT2020Ready = true; } return _DATASPACE_BT2020Content; } }
        private static int _DATASPACE_BT2020Content = default;
        private static bool _DATASPACE_BT2020Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_BT2020_HLG"/>
        /// </summary>
        public static int DATASPACE_BT2020_HLG { get { if (!_DATASPACE_BT2020_HLGReady) { _DATASPACE_BT2020_HLGContent = SGetField<int>(LocalBridgeClazz, "DATASPACE_BT2020_HLG"); _DATASPACE_BT2020_HLGReady = true; } return _DATASPACE_BT2020_HLGContent; } }
        private static int _DATASPACE_BT2020_HLGContent = default;
        private static bool _DATASPACE_BT2020_HLGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_BT2020_PQ"/>
        /// </summary>
        public static int DATASPACE_BT2020_PQ { get { if (!_DATASPACE_BT2020_PQReady) { _DATASPACE_BT2020_PQContent = SGetField<int>(LocalBridgeClazz, "DATASPACE_BT2020_PQ"); _DATASPACE_BT2020_PQReady = true; } return _DATASPACE_BT2020_PQContent; } }
        private static int _DATASPACE_BT2020_PQContent = default;
        private static bool _DATASPACE_BT2020_PQReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_BT601_525"/>
        /// </summary>
        public static int DATASPACE_BT601_525 { get { if (!_DATASPACE_BT601_525Ready) { _DATASPACE_BT601_525Content = SGetField<int>(LocalBridgeClazz, "DATASPACE_BT601_525"); _DATASPACE_BT601_525Ready = true; } return _DATASPACE_BT601_525Content; } }
        private static int _DATASPACE_BT601_525Content = default;
        private static bool _DATASPACE_BT601_525Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_BT601_625"/>
        /// </summary>
        public static int DATASPACE_BT601_625 { get { if (!_DATASPACE_BT601_625Ready) { _DATASPACE_BT601_625Content = SGetField<int>(LocalBridgeClazz, "DATASPACE_BT601_625"); _DATASPACE_BT601_625Ready = true; } return _DATASPACE_BT601_625Content; } }
        private static int _DATASPACE_BT601_625Content = default;
        private static bool _DATASPACE_BT601_625Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_BT709"/>
        /// </summary>
        public static int DATASPACE_BT709 { get { if (!_DATASPACE_BT709Ready) { _DATASPACE_BT709Content = SGetField<int>(LocalBridgeClazz, "DATASPACE_BT709"); _DATASPACE_BT709Ready = true; } return _DATASPACE_BT709Content; } }
        private static int _DATASPACE_BT709Content = default;
        private static bool _DATASPACE_BT709Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_DCI_P3"/>
        /// </summary>
        public static int DATASPACE_DCI_P3 { get { if (!_DATASPACE_DCI_P3Ready) { _DATASPACE_DCI_P3Content = SGetField<int>(LocalBridgeClazz, "DATASPACE_DCI_P3"); _DATASPACE_DCI_P3Ready = true; } return _DATASPACE_DCI_P3Content; } }
        private static int _DATASPACE_DCI_P3Content = default;
        private static bool _DATASPACE_DCI_P3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_DEPTH"/>
        /// </summary>
        public static int DATASPACE_DEPTH { get { if (!_DATASPACE_DEPTHReady) { _DATASPACE_DEPTHContent = SGetField<int>(LocalBridgeClazz, "DATASPACE_DEPTH"); _DATASPACE_DEPTHReady = true; } return _DATASPACE_DEPTHContent; } }
        private static int _DATASPACE_DEPTHContent = default;
        private static bool _DATASPACE_DEPTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_DISPLAY_P3"/>
        /// </summary>
        public static int DATASPACE_DISPLAY_P3 { get { if (!_DATASPACE_DISPLAY_P3Ready) { _DATASPACE_DISPLAY_P3Content = SGetField<int>(LocalBridgeClazz, "DATASPACE_DISPLAY_P3"); _DATASPACE_DISPLAY_P3Ready = true; } return _DATASPACE_DISPLAY_P3Content; } }
        private static int _DATASPACE_DISPLAY_P3Content = default;
        private static bool _DATASPACE_DISPLAY_P3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_DYNAMIC_DEPTH"/>
        /// </summary>
        public static int DATASPACE_DYNAMIC_DEPTH { get { if (!_DATASPACE_DYNAMIC_DEPTHReady) { _DATASPACE_DYNAMIC_DEPTHContent = SGetField<int>(LocalBridgeClazz, "DATASPACE_DYNAMIC_DEPTH"); _DATASPACE_DYNAMIC_DEPTHReady = true; } return _DATASPACE_DYNAMIC_DEPTHContent; } }
        private static int _DATASPACE_DYNAMIC_DEPTHContent = default;
        private static bool _DATASPACE_DYNAMIC_DEPTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_HEIF"/>
        /// </summary>
        public static int DATASPACE_HEIF { get { if (!_DATASPACE_HEIFReady) { _DATASPACE_HEIFContent = SGetField<int>(LocalBridgeClazz, "DATASPACE_HEIF"); _DATASPACE_HEIFReady = true; } return _DATASPACE_HEIFContent; } }
        private static int _DATASPACE_HEIFContent = default;
        private static bool _DATASPACE_HEIFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_JFIF"/>
        /// </summary>
        public static int DATASPACE_JFIF { get { if (!_DATASPACE_JFIFReady) { _DATASPACE_JFIFContent = SGetField<int>(LocalBridgeClazz, "DATASPACE_JFIF"); _DATASPACE_JFIFReady = true; } return _DATASPACE_JFIFContent; } }
        private static int _DATASPACE_JFIFContent = default;
        private static bool _DATASPACE_JFIFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_JPEG_R"/>
        /// </summary>
        public static int DATASPACE_JPEG_R { get { if (!_DATASPACE_JPEG_RReady) { _DATASPACE_JPEG_RContent = SGetField<int>(LocalBridgeClazz, "DATASPACE_JPEG_R"); _DATASPACE_JPEG_RReady = true; } return _DATASPACE_JPEG_RContent; } }
        private static int _DATASPACE_JPEG_RContent = default;
        private static bool _DATASPACE_JPEG_RReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_SCRGB"/>
        /// </summary>
        public static int DATASPACE_SCRGB { get { if (!_DATASPACE_SCRGBReady) { _DATASPACE_SCRGBContent = SGetField<int>(LocalBridgeClazz, "DATASPACE_SCRGB"); _DATASPACE_SCRGBReady = true; } return _DATASPACE_SCRGBContent; } }
        private static int _DATASPACE_SCRGBContent = default;
        private static bool _DATASPACE_SCRGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_SCRGB_LINEAR"/>
        /// </summary>
        public static int DATASPACE_SCRGB_LINEAR { get { if (!_DATASPACE_SCRGB_LINEARReady) { _DATASPACE_SCRGB_LINEARContent = SGetField<int>(LocalBridgeClazz, "DATASPACE_SCRGB_LINEAR"); _DATASPACE_SCRGB_LINEARReady = true; } return _DATASPACE_SCRGB_LINEARContent; } }
        private static int _DATASPACE_SCRGB_LINEARContent = default;
        private static bool _DATASPACE_SCRGB_LINEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_SRGB"/>
        /// </summary>
        public static int DATASPACE_SRGB { get { if (!_DATASPACE_SRGBReady) { _DATASPACE_SRGBContent = SGetField<int>(LocalBridgeClazz, "DATASPACE_SRGB"); _DATASPACE_SRGBReady = true; } return _DATASPACE_SRGBContent; } }
        private static int _DATASPACE_SRGBContent = default;
        private static bool _DATASPACE_SRGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_SRGB_LINEAR"/>
        /// </summary>
        public static int DATASPACE_SRGB_LINEAR { get { if (!_DATASPACE_SRGB_LINEARReady) { _DATASPACE_SRGB_LINEARContent = SGetField<int>(LocalBridgeClazz, "DATASPACE_SRGB_LINEAR"); _DATASPACE_SRGB_LINEARReady = true; } return _DATASPACE_SRGB_LINEARContent; } }
        private static int _DATASPACE_SRGB_LINEARContent = default;
        private static bool _DATASPACE_SRGB_LINEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#DATASPACE_UNKNOWN"/>
        /// </summary>
        public static int DATASPACE_UNKNOWN { get { if (!_DATASPACE_UNKNOWNReady) { _DATASPACE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "DATASPACE_UNKNOWN"); _DATASPACE_UNKNOWNReady = true; } return _DATASPACE_UNKNOWNContent; } }
        private static int _DATASPACE_UNKNOWNContent = default;
        private static bool _DATASPACE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#RANGE_EXTENDED"/>
        /// </summary>
        public static int RANGE_EXTENDED { get { if (!_RANGE_EXTENDEDReady) { _RANGE_EXTENDEDContent = SGetField<int>(LocalBridgeClazz, "RANGE_EXTENDED"); _RANGE_EXTENDEDReady = true; } return _RANGE_EXTENDEDContent; } }
        private static int _RANGE_EXTENDEDContent = default;
        private static bool _RANGE_EXTENDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#RANGE_FULL"/>
        /// </summary>
        public static int RANGE_FULL { get { if (!_RANGE_FULLReady) { _RANGE_FULLContent = SGetField<int>(LocalBridgeClazz, "RANGE_FULL"); _RANGE_FULLReady = true; } return _RANGE_FULLContent; } }
        private static int _RANGE_FULLContent = default;
        private static bool _RANGE_FULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#RANGE_LIMITED"/>
        /// </summary>
        public static int RANGE_LIMITED { get { if (!_RANGE_LIMITEDReady) { _RANGE_LIMITEDContent = SGetField<int>(LocalBridgeClazz, "RANGE_LIMITED"); _RANGE_LIMITEDReady = true; } return _RANGE_LIMITEDContent; } }
        private static int _RANGE_LIMITEDContent = default;
        private static bool _RANGE_LIMITEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#RANGE_UNSPECIFIED"/>
        /// </summary>
        public static int RANGE_UNSPECIFIED { get { if (!_RANGE_UNSPECIFIEDReady) { _RANGE_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "RANGE_UNSPECIFIED"); _RANGE_UNSPECIFIEDReady = true; } return _RANGE_UNSPECIFIEDContent; } }
        private static int _RANGE_UNSPECIFIEDContent = default;
        private static bool _RANGE_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#STANDARD_ADOBE_RGB"/>
        /// </summary>
        public static int STANDARD_ADOBE_RGB { get { if (!_STANDARD_ADOBE_RGBReady) { _STANDARD_ADOBE_RGBContent = SGetField<int>(LocalBridgeClazz, "STANDARD_ADOBE_RGB"); _STANDARD_ADOBE_RGBReady = true; } return _STANDARD_ADOBE_RGBContent; } }
        private static int _STANDARD_ADOBE_RGBContent = default;
        private static bool _STANDARD_ADOBE_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#STANDARD_BT2020"/>
        /// </summary>
        public static int STANDARD_BT2020 { get { if (!_STANDARD_BT2020Ready) { _STANDARD_BT2020Content = SGetField<int>(LocalBridgeClazz, "STANDARD_BT2020"); _STANDARD_BT2020Ready = true; } return _STANDARD_BT2020Content; } }
        private static int _STANDARD_BT2020Content = default;
        private static bool _STANDARD_BT2020Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#STANDARD_BT2020_CONSTANT_LUMINANCE"/>
        /// </summary>
        public static int STANDARD_BT2020_CONSTANT_LUMINANCE { get { if (!_STANDARD_BT2020_CONSTANT_LUMINANCEReady) { _STANDARD_BT2020_CONSTANT_LUMINANCEContent = SGetField<int>(LocalBridgeClazz, "STANDARD_BT2020_CONSTANT_LUMINANCE"); _STANDARD_BT2020_CONSTANT_LUMINANCEReady = true; } return _STANDARD_BT2020_CONSTANT_LUMINANCEContent; } }
        private static int _STANDARD_BT2020_CONSTANT_LUMINANCEContent = default;
        private static bool _STANDARD_BT2020_CONSTANT_LUMINANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#STANDARD_BT470M"/>
        /// </summary>
        public static int STANDARD_BT470M { get { if (!_STANDARD_BT470MReady) { _STANDARD_BT470MContent = SGetField<int>(LocalBridgeClazz, "STANDARD_BT470M"); _STANDARD_BT470MReady = true; } return _STANDARD_BT470MContent; } }
        private static int _STANDARD_BT470MContent = default;
        private static bool _STANDARD_BT470MReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#STANDARD_BT601_525"/>
        /// </summary>
        public static int STANDARD_BT601_525 { get { if (!_STANDARD_BT601_525Ready) { _STANDARD_BT601_525Content = SGetField<int>(LocalBridgeClazz, "STANDARD_BT601_525"); _STANDARD_BT601_525Ready = true; } return _STANDARD_BT601_525Content; } }
        private static int _STANDARD_BT601_525Content = default;
        private static bool _STANDARD_BT601_525Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#STANDARD_BT601_525_UNADJUSTED"/>
        /// </summary>
        public static int STANDARD_BT601_525_UNADJUSTED { get { if (!_STANDARD_BT601_525_UNADJUSTEDReady) { _STANDARD_BT601_525_UNADJUSTEDContent = SGetField<int>(LocalBridgeClazz, "STANDARD_BT601_525_UNADJUSTED"); _STANDARD_BT601_525_UNADJUSTEDReady = true; } return _STANDARD_BT601_525_UNADJUSTEDContent; } }
        private static int _STANDARD_BT601_525_UNADJUSTEDContent = default;
        private static bool _STANDARD_BT601_525_UNADJUSTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#STANDARD_BT601_625"/>
        /// </summary>
        public static int STANDARD_BT601_625 { get { if (!_STANDARD_BT601_625Ready) { _STANDARD_BT601_625Content = SGetField<int>(LocalBridgeClazz, "STANDARD_BT601_625"); _STANDARD_BT601_625Ready = true; } return _STANDARD_BT601_625Content; } }
        private static int _STANDARD_BT601_625Content = default;
        private static bool _STANDARD_BT601_625Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#STANDARD_BT601_625_UNADJUSTED"/>
        /// </summary>
        public static int STANDARD_BT601_625_UNADJUSTED { get { if (!_STANDARD_BT601_625_UNADJUSTEDReady) { _STANDARD_BT601_625_UNADJUSTEDContent = SGetField<int>(LocalBridgeClazz, "STANDARD_BT601_625_UNADJUSTED"); _STANDARD_BT601_625_UNADJUSTEDReady = true; } return _STANDARD_BT601_625_UNADJUSTEDContent; } }
        private static int _STANDARD_BT601_625_UNADJUSTEDContent = default;
        private static bool _STANDARD_BT601_625_UNADJUSTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#STANDARD_BT709"/>
        /// </summary>
        public static int STANDARD_BT709 { get { if (!_STANDARD_BT709Ready) { _STANDARD_BT709Content = SGetField<int>(LocalBridgeClazz, "STANDARD_BT709"); _STANDARD_BT709Ready = true; } return _STANDARD_BT709Content; } }
        private static int _STANDARD_BT709Content = default;
        private static bool _STANDARD_BT709Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#STANDARD_DCI_P3"/>
        /// </summary>
        public static int STANDARD_DCI_P3 { get { if (!_STANDARD_DCI_P3Ready) { _STANDARD_DCI_P3Content = SGetField<int>(LocalBridgeClazz, "STANDARD_DCI_P3"); _STANDARD_DCI_P3Ready = true; } return _STANDARD_DCI_P3Content; } }
        private static int _STANDARD_DCI_P3Content = default;
        private static bool _STANDARD_DCI_P3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#STANDARD_FILM"/>
        /// </summary>
        public static int STANDARD_FILM { get { if (!_STANDARD_FILMReady) { _STANDARD_FILMContent = SGetField<int>(LocalBridgeClazz, "STANDARD_FILM"); _STANDARD_FILMReady = true; } return _STANDARD_FILMContent; } }
        private static int _STANDARD_FILMContent = default;
        private static bool _STANDARD_FILMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#STANDARD_UNSPECIFIED"/>
        /// </summary>
        public static int STANDARD_UNSPECIFIED { get { if (!_STANDARD_UNSPECIFIEDReady) { _STANDARD_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "STANDARD_UNSPECIFIED"); _STANDARD_UNSPECIFIEDReady = true; } return _STANDARD_UNSPECIFIEDContent; } }
        private static int _STANDARD_UNSPECIFIEDContent = default;
        private static bool _STANDARD_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#TRANSFER_GAMMA2_2"/>
        /// </summary>
        public static int TRANSFER_GAMMA2_2 { get { if (!_TRANSFER_GAMMA2_2Ready) { _TRANSFER_GAMMA2_2Content = SGetField<int>(LocalBridgeClazz, "TRANSFER_GAMMA2_2"); _TRANSFER_GAMMA2_2Ready = true; } return _TRANSFER_GAMMA2_2Content; } }
        private static int _TRANSFER_GAMMA2_2Content = default;
        private static bool _TRANSFER_GAMMA2_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#TRANSFER_GAMMA2_6"/>
        /// </summary>
        public static int TRANSFER_GAMMA2_6 { get { if (!_TRANSFER_GAMMA2_6Ready) { _TRANSFER_GAMMA2_6Content = SGetField<int>(LocalBridgeClazz, "TRANSFER_GAMMA2_6"); _TRANSFER_GAMMA2_6Ready = true; } return _TRANSFER_GAMMA2_6Content; } }
        private static int _TRANSFER_GAMMA2_6Content = default;
        private static bool _TRANSFER_GAMMA2_6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#TRANSFER_GAMMA2_8"/>
        /// </summary>
        public static int TRANSFER_GAMMA2_8 { get { if (!_TRANSFER_GAMMA2_8Ready) { _TRANSFER_GAMMA2_8Content = SGetField<int>(LocalBridgeClazz, "TRANSFER_GAMMA2_8"); _TRANSFER_GAMMA2_8Ready = true; } return _TRANSFER_GAMMA2_8Content; } }
        private static int _TRANSFER_GAMMA2_8Content = default;
        private static bool _TRANSFER_GAMMA2_8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#TRANSFER_HLG"/>
        /// </summary>
        public static int TRANSFER_HLG { get { if (!_TRANSFER_HLGReady) { _TRANSFER_HLGContent = SGetField<int>(LocalBridgeClazz, "TRANSFER_HLG"); _TRANSFER_HLGReady = true; } return _TRANSFER_HLGContent; } }
        private static int _TRANSFER_HLGContent = default;
        private static bool _TRANSFER_HLGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#TRANSFER_LINEAR"/>
        /// </summary>
        public static int TRANSFER_LINEAR { get { if (!_TRANSFER_LINEARReady) { _TRANSFER_LINEARContent = SGetField<int>(LocalBridgeClazz, "TRANSFER_LINEAR"); _TRANSFER_LINEARReady = true; } return _TRANSFER_LINEARContent; } }
        private static int _TRANSFER_LINEARContent = default;
        private static bool _TRANSFER_LINEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#TRANSFER_SMPTE_170M"/>
        /// </summary>
        public static int TRANSFER_SMPTE_170M { get { if (!_TRANSFER_SMPTE_170MReady) { _TRANSFER_SMPTE_170MContent = SGetField<int>(LocalBridgeClazz, "TRANSFER_SMPTE_170M"); _TRANSFER_SMPTE_170MReady = true; } return _TRANSFER_SMPTE_170MContent; } }
        private static int _TRANSFER_SMPTE_170MContent = default;
        private static bool _TRANSFER_SMPTE_170MReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#TRANSFER_SRGB"/>
        /// </summary>
        public static int TRANSFER_SRGB { get { if (!_TRANSFER_SRGBReady) { _TRANSFER_SRGBContent = SGetField<int>(LocalBridgeClazz, "TRANSFER_SRGB"); _TRANSFER_SRGBReady = true; } return _TRANSFER_SRGBContent; } }
        private static int _TRANSFER_SRGBContent = default;
        private static bool _TRANSFER_SRGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#TRANSFER_ST2084"/>
        /// </summary>
        public static int TRANSFER_ST2084 { get { if (!_TRANSFER_ST2084Ready) { _TRANSFER_ST2084Content = SGetField<int>(LocalBridgeClazz, "TRANSFER_ST2084"); _TRANSFER_ST2084Ready = true; } return _TRANSFER_ST2084Content; } }
        private static int _TRANSFER_ST2084Content = default;
        private static bool _TRANSFER_ST2084Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#TRANSFER_UNSPECIFIED"/>
        /// </summary>
        public static int TRANSFER_UNSPECIFIED { get { if (!_TRANSFER_UNSPECIFIEDReady) { _TRANSFER_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "TRANSFER_UNSPECIFIED"); _TRANSFER_UNSPECIFIEDReady = true; } return _TRANSFER_UNSPECIFIEDContent; } }
        private static int _TRANSFER_UNSPECIFIEDContent = default;
        private static bool _TRANSFER_UNSPECIFIEDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#getRange(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetRange(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getRange", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#getStandard(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetStandard(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getStandard", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#getTransfer(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetTransfer(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getTransfer", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DataSpace.html#pack(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int Pack(int arg0, int arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "pack", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
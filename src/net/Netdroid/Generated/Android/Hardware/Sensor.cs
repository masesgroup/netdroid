/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Hardware
{
    #region Sensor
    public partial class Sensor
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#REPORTING_MODE_CONTINUOUS"/>
        /// </summary>
        public static int REPORTING_MODE_CONTINUOUS { get { if (!_REPORTING_MODE_CONTINUOUSReady) { _REPORTING_MODE_CONTINUOUSContent = SGetField<int>(LocalBridgeClazz, "REPORTING_MODE_CONTINUOUS"); _REPORTING_MODE_CONTINUOUSReady = true; } return _REPORTING_MODE_CONTINUOUSContent; } }
        private static int _REPORTING_MODE_CONTINUOUSContent = default;
        private static bool _REPORTING_MODE_CONTINUOUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#REPORTING_MODE_ON_CHANGE"/>
        /// </summary>
        public static int REPORTING_MODE_ON_CHANGE { get { if (!_REPORTING_MODE_ON_CHANGEReady) { _REPORTING_MODE_ON_CHANGEContent = SGetField<int>(LocalBridgeClazz, "REPORTING_MODE_ON_CHANGE"); _REPORTING_MODE_ON_CHANGEReady = true; } return _REPORTING_MODE_ON_CHANGEContent; } }
        private static int _REPORTING_MODE_ON_CHANGEContent = default;
        private static bool _REPORTING_MODE_ON_CHANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#REPORTING_MODE_ONE_SHOT"/>
        /// </summary>
        public static int REPORTING_MODE_ONE_SHOT { get { if (!_REPORTING_MODE_ONE_SHOTReady) { _REPORTING_MODE_ONE_SHOTContent = SGetField<int>(LocalBridgeClazz, "REPORTING_MODE_ONE_SHOT"); _REPORTING_MODE_ONE_SHOTReady = true; } return _REPORTING_MODE_ONE_SHOTContent; } }
        private static int _REPORTING_MODE_ONE_SHOTContent = default;
        private static bool _REPORTING_MODE_ONE_SHOTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#REPORTING_MODE_SPECIAL_TRIGGER"/>
        /// </summary>
        public static int REPORTING_MODE_SPECIAL_TRIGGER { get { if (!_REPORTING_MODE_SPECIAL_TRIGGERReady) { _REPORTING_MODE_SPECIAL_TRIGGERContent = SGetField<int>(LocalBridgeClazz, "REPORTING_MODE_SPECIAL_TRIGGER"); _REPORTING_MODE_SPECIAL_TRIGGERReady = true; } return _REPORTING_MODE_SPECIAL_TRIGGERContent; } }
        private static int _REPORTING_MODE_SPECIAL_TRIGGERContent = default;
        private static bool _REPORTING_MODE_SPECIAL_TRIGGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_ACCELEROMETER"/>
        /// </summary>
        public static int TYPE_ACCELEROMETER { get { if (!_TYPE_ACCELEROMETERReady) { _TYPE_ACCELEROMETERContent = SGetField<int>(LocalBridgeClazz, "TYPE_ACCELEROMETER"); _TYPE_ACCELEROMETERReady = true; } return _TYPE_ACCELEROMETERContent; } }
        private static int _TYPE_ACCELEROMETERContent = default;
        private static bool _TYPE_ACCELEROMETERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_ACCELEROMETER_LIMITED_AXES"/>
        /// </summary>
        public static int TYPE_ACCELEROMETER_LIMITED_AXES { get { if (!_TYPE_ACCELEROMETER_LIMITED_AXESReady) { _TYPE_ACCELEROMETER_LIMITED_AXESContent = SGetField<int>(LocalBridgeClazz, "TYPE_ACCELEROMETER_LIMITED_AXES"); _TYPE_ACCELEROMETER_LIMITED_AXESReady = true; } return _TYPE_ACCELEROMETER_LIMITED_AXESContent; } }
        private static int _TYPE_ACCELEROMETER_LIMITED_AXESContent = default;
        private static bool _TYPE_ACCELEROMETER_LIMITED_AXESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED"/>
        /// </summary>
        public static int TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED { get { if (!_TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDReady) { _TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED"); _TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDReady = true; } return _TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDContent; } }
        private static int _TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDContent = default;
        private static bool _TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_ACCELEROMETER_UNCALIBRATED"/>
        /// </summary>
        public static int TYPE_ACCELEROMETER_UNCALIBRATED { get { if (!_TYPE_ACCELEROMETER_UNCALIBRATEDReady) { _TYPE_ACCELEROMETER_UNCALIBRATEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_ACCELEROMETER_UNCALIBRATED"); _TYPE_ACCELEROMETER_UNCALIBRATEDReady = true; } return _TYPE_ACCELEROMETER_UNCALIBRATEDContent; } }
        private static int _TYPE_ACCELEROMETER_UNCALIBRATEDContent = default;
        private static bool _TYPE_ACCELEROMETER_UNCALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_ALL"/>
        /// </summary>
        public static int TYPE_ALL { get { if (!_TYPE_ALLReady) { _TYPE_ALLContent = SGetField<int>(LocalBridgeClazz, "TYPE_ALL"); _TYPE_ALLReady = true; } return _TYPE_ALLContent; } }
        private static int _TYPE_ALLContent = default;
        private static bool _TYPE_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_AMBIENT_TEMPERATURE"/>
        /// </summary>
        public static int TYPE_AMBIENT_TEMPERATURE { get { if (!_TYPE_AMBIENT_TEMPERATUREReady) { _TYPE_AMBIENT_TEMPERATUREContent = SGetField<int>(LocalBridgeClazz, "TYPE_AMBIENT_TEMPERATURE"); _TYPE_AMBIENT_TEMPERATUREReady = true; } return _TYPE_AMBIENT_TEMPERATUREContent; } }
        private static int _TYPE_AMBIENT_TEMPERATUREContent = default;
        private static bool _TYPE_AMBIENT_TEMPERATUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_DEVICE_PRIVATE_BASE"/>
        /// </summary>
        public static int TYPE_DEVICE_PRIVATE_BASE { get { if (!_TYPE_DEVICE_PRIVATE_BASEReady) { _TYPE_DEVICE_PRIVATE_BASEContent = SGetField<int>(LocalBridgeClazz, "TYPE_DEVICE_PRIVATE_BASE"); _TYPE_DEVICE_PRIVATE_BASEReady = true; } return _TYPE_DEVICE_PRIVATE_BASEContent; } }
        private static int _TYPE_DEVICE_PRIVATE_BASEContent = default;
        private static bool _TYPE_DEVICE_PRIVATE_BASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_GAME_ROTATION_VECTOR"/>
        /// </summary>
        public static int TYPE_GAME_ROTATION_VECTOR { get { if (!_TYPE_GAME_ROTATION_VECTORReady) { _TYPE_GAME_ROTATION_VECTORContent = SGetField<int>(LocalBridgeClazz, "TYPE_GAME_ROTATION_VECTOR"); _TYPE_GAME_ROTATION_VECTORReady = true; } return _TYPE_GAME_ROTATION_VECTORContent; } }
        private static int _TYPE_GAME_ROTATION_VECTORContent = default;
        private static bool _TYPE_GAME_ROTATION_VECTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_GEOMAGNETIC_ROTATION_VECTOR"/>
        /// </summary>
        public static int TYPE_GEOMAGNETIC_ROTATION_VECTOR { get { if (!_TYPE_GEOMAGNETIC_ROTATION_VECTORReady) { _TYPE_GEOMAGNETIC_ROTATION_VECTORContent = SGetField<int>(LocalBridgeClazz, "TYPE_GEOMAGNETIC_ROTATION_VECTOR"); _TYPE_GEOMAGNETIC_ROTATION_VECTORReady = true; } return _TYPE_GEOMAGNETIC_ROTATION_VECTORContent; } }
        private static int _TYPE_GEOMAGNETIC_ROTATION_VECTORContent = default;
        private static bool _TYPE_GEOMAGNETIC_ROTATION_VECTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_GRAVITY"/>
        /// </summary>
        public static int TYPE_GRAVITY { get { if (!_TYPE_GRAVITYReady) { _TYPE_GRAVITYContent = SGetField<int>(LocalBridgeClazz, "TYPE_GRAVITY"); _TYPE_GRAVITYReady = true; } return _TYPE_GRAVITYContent; } }
        private static int _TYPE_GRAVITYContent = default;
        private static bool _TYPE_GRAVITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_GYROSCOPE"/>
        /// </summary>
        public static int TYPE_GYROSCOPE { get { if (!_TYPE_GYROSCOPEReady) { _TYPE_GYROSCOPEContent = SGetField<int>(LocalBridgeClazz, "TYPE_GYROSCOPE"); _TYPE_GYROSCOPEReady = true; } return _TYPE_GYROSCOPEContent; } }
        private static int _TYPE_GYROSCOPEContent = default;
        private static bool _TYPE_GYROSCOPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_GYROSCOPE_LIMITED_AXES"/>
        /// </summary>
        public static int TYPE_GYROSCOPE_LIMITED_AXES { get { if (!_TYPE_GYROSCOPE_LIMITED_AXESReady) { _TYPE_GYROSCOPE_LIMITED_AXESContent = SGetField<int>(LocalBridgeClazz, "TYPE_GYROSCOPE_LIMITED_AXES"); _TYPE_GYROSCOPE_LIMITED_AXESReady = true; } return _TYPE_GYROSCOPE_LIMITED_AXESContent; } }
        private static int _TYPE_GYROSCOPE_LIMITED_AXESContent = default;
        private static bool _TYPE_GYROSCOPE_LIMITED_AXESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATED"/>
        /// </summary>
        public static int TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATED { get { if (!_TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDReady) { _TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATED"); _TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDReady = true; } return _TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDContent; } }
        private static int _TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDContent = default;
        private static bool _TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_GYROSCOPE_UNCALIBRATED"/>
        /// </summary>
        public static int TYPE_GYROSCOPE_UNCALIBRATED { get { if (!_TYPE_GYROSCOPE_UNCALIBRATEDReady) { _TYPE_GYROSCOPE_UNCALIBRATEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_GYROSCOPE_UNCALIBRATED"); _TYPE_GYROSCOPE_UNCALIBRATEDReady = true; } return _TYPE_GYROSCOPE_UNCALIBRATEDContent; } }
        private static int _TYPE_GYROSCOPE_UNCALIBRATEDContent = default;
        private static bool _TYPE_GYROSCOPE_UNCALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_HEAD_TRACKER"/>
        /// </summary>
        public static int TYPE_HEAD_TRACKER { get { if (!_TYPE_HEAD_TRACKERReady) { _TYPE_HEAD_TRACKERContent = SGetField<int>(LocalBridgeClazz, "TYPE_HEAD_TRACKER"); _TYPE_HEAD_TRACKERReady = true; } return _TYPE_HEAD_TRACKERContent; } }
        private static int _TYPE_HEAD_TRACKERContent = default;
        private static bool _TYPE_HEAD_TRACKERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_HEADING"/>
        /// </summary>
        public static int TYPE_HEADING { get { if (!_TYPE_HEADINGReady) { _TYPE_HEADINGContent = SGetField<int>(LocalBridgeClazz, "TYPE_HEADING"); _TYPE_HEADINGReady = true; } return _TYPE_HEADINGContent; } }
        private static int _TYPE_HEADINGContent = default;
        private static bool _TYPE_HEADINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_HEART_BEAT"/>
        /// </summary>
        public static int TYPE_HEART_BEAT { get { if (!_TYPE_HEART_BEATReady) { _TYPE_HEART_BEATContent = SGetField<int>(LocalBridgeClazz, "TYPE_HEART_BEAT"); _TYPE_HEART_BEATReady = true; } return _TYPE_HEART_BEATContent; } }
        private static int _TYPE_HEART_BEATContent = default;
        private static bool _TYPE_HEART_BEATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_HEART_RATE"/>
        /// </summary>
        public static int TYPE_HEART_RATE { get { if (!_TYPE_HEART_RATEReady) { _TYPE_HEART_RATEContent = SGetField<int>(LocalBridgeClazz, "TYPE_HEART_RATE"); _TYPE_HEART_RATEReady = true; } return _TYPE_HEART_RATEContent; } }
        private static int _TYPE_HEART_RATEContent = default;
        private static bool _TYPE_HEART_RATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_HINGE_ANGLE"/>
        /// </summary>
        public static int TYPE_HINGE_ANGLE { get { if (!_TYPE_HINGE_ANGLEReady) { _TYPE_HINGE_ANGLEContent = SGetField<int>(LocalBridgeClazz, "TYPE_HINGE_ANGLE"); _TYPE_HINGE_ANGLEReady = true; } return _TYPE_HINGE_ANGLEContent; } }
        private static int _TYPE_HINGE_ANGLEContent = default;
        private static bool _TYPE_HINGE_ANGLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_LIGHT"/>
        /// </summary>
        public static int TYPE_LIGHT { get { if (!_TYPE_LIGHTReady) { _TYPE_LIGHTContent = SGetField<int>(LocalBridgeClazz, "TYPE_LIGHT"); _TYPE_LIGHTReady = true; } return _TYPE_LIGHTContent; } }
        private static int _TYPE_LIGHTContent = default;
        private static bool _TYPE_LIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_LINEAR_ACCELERATION"/>
        /// </summary>
        public static int TYPE_LINEAR_ACCELERATION { get { if (!_TYPE_LINEAR_ACCELERATIONReady) { _TYPE_LINEAR_ACCELERATIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_LINEAR_ACCELERATION"); _TYPE_LINEAR_ACCELERATIONReady = true; } return _TYPE_LINEAR_ACCELERATIONContent; } }
        private static int _TYPE_LINEAR_ACCELERATIONContent = default;
        private static bool _TYPE_LINEAR_ACCELERATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_LOW_LATENCY_OFFBODY_DETECT"/>
        /// </summary>
        public static int TYPE_LOW_LATENCY_OFFBODY_DETECT { get { if (!_TYPE_LOW_LATENCY_OFFBODY_DETECTReady) { _TYPE_LOW_LATENCY_OFFBODY_DETECTContent = SGetField<int>(LocalBridgeClazz, "TYPE_LOW_LATENCY_OFFBODY_DETECT"); _TYPE_LOW_LATENCY_OFFBODY_DETECTReady = true; } return _TYPE_LOW_LATENCY_OFFBODY_DETECTContent; } }
        private static int _TYPE_LOW_LATENCY_OFFBODY_DETECTContent = default;
        private static bool _TYPE_LOW_LATENCY_OFFBODY_DETECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_MAGNETIC_FIELD"/>
        /// </summary>
        public static int TYPE_MAGNETIC_FIELD { get { if (!_TYPE_MAGNETIC_FIELDReady) { _TYPE_MAGNETIC_FIELDContent = SGetField<int>(LocalBridgeClazz, "TYPE_MAGNETIC_FIELD"); _TYPE_MAGNETIC_FIELDReady = true; } return _TYPE_MAGNETIC_FIELDContent; } }
        private static int _TYPE_MAGNETIC_FIELDContent = default;
        private static bool _TYPE_MAGNETIC_FIELDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_MAGNETIC_FIELD_UNCALIBRATED"/>
        /// </summary>
        public static int TYPE_MAGNETIC_FIELD_UNCALIBRATED { get { if (!_TYPE_MAGNETIC_FIELD_UNCALIBRATEDReady) { _TYPE_MAGNETIC_FIELD_UNCALIBRATEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_MAGNETIC_FIELD_UNCALIBRATED"); _TYPE_MAGNETIC_FIELD_UNCALIBRATEDReady = true; } return _TYPE_MAGNETIC_FIELD_UNCALIBRATEDContent; } }
        private static int _TYPE_MAGNETIC_FIELD_UNCALIBRATEDContent = default;
        private static bool _TYPE_MAGNETIC_FIELD_UNCALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_MOTION_DETECT"/>
        /// </summary>
        public static int TYPE_MOTION_DETECT { get { if (!_TYPE_MOTION_DETECTReady) { _TYPE_MOTION_DETECTContent = SGetField<int>(LocalBridgeClazz, "TYPE_MOTION_DETECT"); _TYPE_MOTION_DETECTReady = true; } return _TYPE_MOTION_DETECTContent; } }
        private static int _TYPE_MOTION_DETECTContent = default;
        private static bool _TYPE_MOTION_DETECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_ORIENTATION"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int TYPE_ORIENTATION { get { if (!_TYPE_ORIENTATIONReady) { _TYPE_ORIENTATIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_ORIENTATION"); _TYPE_ORIENTATIONReady = true; } return _TYPE_ORIENTATIONContent; } }
        private static int _TYPE_ORIENTATIONContent = default;
        private static bool _TYPE_ORIENTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_POSE_6DOF"/>
        /// </summary>
        public static int TYPE_POSE_6DOF { get { if (!_TYPE_POSE_6DOFReady) { _TYPE_POSE_6DOFContent = SGetField<int>(LocalBridgeClazz, "TYPE_POSE_6DOF"); _TYPE_POSE_6DOFReady = true; } return _TYPE_POSE_6DOFContent; } }
        private static int _TYPE_POSE_6DOFContent = default;
        private static bool _TYPE_POSE_6DOFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_PRESSURE"/>
        /// </summary>
        public static int TYPE_PRESSURE { get { if (!_TYPE_PRESSUREReady) { _TYPE_PRESSUREContent = SGetField<int>(LocalBridgeClazz, "TYPE_PRESSURE"); _TYPE_PRESSUREReady = true; } return _TYPE_PRESSUREContent; } }
        private static int _TYPE_PRESSUREContent = default;
        private static bool _TYPE_PRESSUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_PROXIMITY"/>
        /// </summary>
        public static int TYPE_PROXIMITY { get { if (!_TYPE_PROXIMITYReady) { _TYPE_PROXIMITYContent = SGetField<int>(LocalBridgeClazz, "TYPE_PROXIMITY"); _TYPE_PROXIMITYReady = true; } return _TYPE_PROXIMITYContent; } }
        private static int _TYPE_PROXIMITYContent = default;
        private static bool _TYPE_PROXIMITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_RELATIVE_HUMIDITY"/>
        /// </summary>
        public static int TYPE_RELATIVE_HUMIDITY { get { if (!_TYPE_RELATIVE_HUMIDITYReady) { _TYPE_RELATIVE_HUMIDITYContent = SGetField<int>(LocalBridgeClazz, "TYPE_RELATIVE_HUMIDITY"); _TYPE_RELATIVE_HUMIDITYReady = true; } return _TYPE_RELATIVE_HUMIDITYContent; } }
        private static int _TYPE_RELATIVE_HUMIDITYContent = default;
        private static bool _TYPE_RELATIVE_HUMIDITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_ROTATION_VECTOR"/>
        /// </summary>
        public static int TYPE_ROTATION_VECTOR { get { if (!_TYPE_ROTATION_VECTORReady) { _TYPE_ROTATION_VECTORContent = SGetField<int>(LocalBridgeClazz, "TYPE_ROTATION_VECTOR"); _TYPE_ROTATION_VECTORReady = true; } return _TYPE_ROTATION_VECTORContent; } }
        private static int _TYPE_ROTATION_VECTORContent = default;
        private static bool _TYPE_ROTATION_VECTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_SIGNIFICANT_MOTION"/>
        /// </summary>
        public static int TYPE_SIGNIFICANT_MOTION { get { if (!_TYPE_SIGNIFICANT_MOTIONReady) { _TYPE_SIGNIFICANT_MOTIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_SIGNIFICANT_MOTION"); _TYPE_SIGNIFICANT_MOTIONReady = true; } return _TYPE_SIGNIFICANT_MOTIONContent; } }
        private static int _TYPE_SIGNIFICANT_MOTIONContent = default;
        private static bool _TYPE_SIGNIFICANT_MOTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_STATIONARY_DETECT"/>
        /// </summary>
        public static int TYPE_STATIONARY_DETECT { get { if (!_TYPE_STATIONARY_DETECTReady) { _TYPE_STATIONARY_DETECTContent = SGetField<int>(LocalBridgeClazz, "TYPE_STATIONARY_DETECT"); _TYPE_STATIONARY_DETECTReady = true; } return _TYPE_STATIONARY_DETECTContent; } }
        private static int _TYPE_STATIONARY_DETECTContent = default;
        private static bool _TYPE_STATIONARY_DETECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_STEP_COUNTER"/>
        /// </summary>
        public static int TYPE_STEP_COUNTER { get { if (!_TYPE_STEP_COUNTERReady) { _TYPE_STEP_COUNTERContent = SGetField<int>(LocalBridgeClazz, "TYPE_STEP_COUNTER"); _TYPE_STEP_COUNTERReady = true; } return _TYPE_STEP_COUNTERContent; } }
        private static int _TYPE_STEP_COUNTERContent = default;
        private static bool _TYPE_STEP_COUNTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_STEP_DETECTOR"/>
        /// </summary>
        public static int TYPE_STEP_DETECTOR { get { if (!_TYPE_STEP_DETECTORReady) { _TYPE_STEP_DETECTORContent = SGetField<int>(LocalBridgeClazz, "TYPE_STEP_DETECTOR"); _TYPE_STEP_DETECTORReady = true; } return _TYPE_STEP_DETECTORContent; } }
        private static int _TYPE_STEP_DETECTORContent = default;
        private static bool _TYPE_STEP_DETECTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_TEMPERATURE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int TYPE_TEMPERATURE { get { if (!_TYPE_TEMPERATUREReady) { _TYPE_TEMPERATUREContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEMPERATURE"); _TYPE_TEMPERATUREReady = true; } return _TYPE_TEMPERATUREContent; } }
        private static int _TYPE_TEMPERATUREContent = default;
        private static bool _TYPE_TEMPERATUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_ACCELEROMETER"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_ACCELEROMETER { get { if (!_STRING_TYPE_ACCELEROMETERReady) { _STRING_TYPE_ACCELEROMETERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_ACCELEROMETER"); _STRING_TYPE_ACCELEROMETERReady = true; } return _STRING_TYPE_ACCELEROMETERContent; } }
        private static Java.Lang.String _STRING_TYPE_ACCELEROMETERContent = default;
        private static bool _STRING_TYPE_ACCELEROMETERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_ACCELEROMETER_LIMITED_AXES"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_ACCELEROMETER_LIMITED_AXES { get { if (!_STRING_TYPE_ACCELEROMETER_LIMITED_AXESReady) { _STRING_TYPE_ACCELEROMETER_LIMITED_AXESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_ACCELEROMETER_LIMITED_AXES"); _STRING_TYPE_ACCELEROMETER_LIMITED_AXESReady = true; } return _STRING_TYPE_ACCELEROMETER_LIMITED_AXESContent; } }
        private static Java.Lang.String _STRING_TYPE_ACCELEROMETER_LIMITED_AXESContent = default;
        private static bool _STRING_TYPE_ACCELEROMETER_LIMITED_AXESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED { get { if (!_STRING_TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDReady) { _STRING_TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED"); _STRING_TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDReady = true; } return _STRING_TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDContent; } }
        private static Java.Lang.String _STRING_TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDContent = default;
        private static bool _STRING_TYPE_ACCELEROMETER_LIMITED_AXES_UNCALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_ACCELEROMETER_UNCALIBRATED"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_ACCELEROMETER_UNCALIBRATED { get { if (!_STRING_TYPE_ACCELEROMETER_UNCALIBRATEDReady) { _STRING_TYPE_ACCELEROMETER_UNCALIBRATEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_ACCELEROMETER_UNCALIBRATED"); _STRING_TYPE_ACCELEROMETER_UNCALIBRATEDReady = true; } return _STRING_TYPE_ACCELEROMETER_UNCALIBRATEDContent; } }
        private static Java.Lang.String _STRING_TYPE_ACCELEROMETER_UNCALIBRATEDContent = default;
        private static bool _STRING_TYPE_ACCELEROMETER_UNCALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_AMBIENT_TEMPERATURE"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_AMBIENT_TEMPERATURE { get { if (!_STRING_TYPE_AMBIENT_TEMPERATUREReady) { _STRING_TYPE_AMBIENT_TEMPERATUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_AMBIENT_TEMPERATURE"); _STRING_TYPE_AMBIENT_TEMPERATUREReady = true; } return _STRING_TYPE_AMBIENT_TEMPERATUREContent; } }
        private static Java.Lang.String _STRING_TYPE_AMBIENT_TEMPERATUREContent = default;
        private static bool _STRING_TYPE_AMBIENT_TEMPERATUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_GAME_ROTATION_VECTOR"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_GAME_ROTATION_VECTOR { get { if (!_STRING_TYPE_GAME_ROTATION_VECTORReady) { _STRING_TYPE_GAME_ROTATION_VECTORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_GAME_ROTATION_VECTOR"); _STRING_TYPE_GAME_ROTATION_VECTORReady = true; } return _STRING_TYPE_GAME_ROTATION_VECTORContent; } }
        private static Java.Lang.String _STRING_TYPE_GAME_ROTATION_VECTORContent = default;
        private static bool _STRING_TYPE_GAME_ROTATION_VECTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR { get { if (!_STRING_TYPE_GEOMAGNETIC_ROTATION_VECTORReady) { _STRING_TYPE_GEOMAGNETIC_ROTATION_VECTORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR"); _STRING_TYPE_GEOMAGNETIC_ROTATION_VECTORReady = true; } return _STRING_TYPE_GEOMAGNETIC_ROTATION_VECTORContent; } }
        private static Java.Lang.String _STRING_TYPE_GEOMAGNETIC_ROTATION_VECTORContent = default;
        private static bool _STRING_TYPE_GEOMAGNETIC_ROTATION_VECTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_GRAVITY"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_GRAVITY { get { if (!_STRING_TYPE_GRAVITYReady) { _STRING_TYPE_GRAVITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_GRAVITY"); _STRING_TYPE_GRAVITYReady = true; } return _STRING_TYPE_GRAVITYContent; } }
        private static Java.Lang.String _STRING_TYPE_GRAVITYContent = default;
        private static bool _STRING_TYPE_GRAVITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_GYROSCOPE"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_GYROSCOPE { get { if (!_STRING_TYPE_GYROSCOPEReady) { _STRING_TYPE_GYROSCOPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_GYROSCOPE"); _STRING_TYPE_GYROSCOPEReady = true; } return _STRING_TYPE_GYROSCOPEContent; } }
        private static Java.Lang.String _STRING_TYPE_GYROSCOPEContent = default;
        private static bool _STRING_TYPE_GYROSCOPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_GYROSCOPE_LIMITED_AXES"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_GYROSCOPE_LIMITED_AXES { get { if (!_STRING_TYPE_GYROSCOPE_LIMITED_AXESReady) { _STRING_TYPE_GYROSCOPE_LIMITED_AXESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_GYROSCOPE_LIMITED_AXES"); _STRING_TYPE_GYROSCOPE_LIMITED_AXESReady = true; } return _STRING_TYPE_GYROSCOPE_LIMITED_AXESContent; } }
        private static Java.Lang.String _STRING_TYPE_GYROSCOPE_LIMITED_AXESContent = default;
        private static bool _STRING_TYPE_GYROSCOPE_LIMITED_AXESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATED"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATED { get { if (!_STRING_TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDReady) { _STRING_TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATED"); _STRING_TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDReady = true; } return _STRING_TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDContent; } }
        private static Java.Lang.String _STRING_TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDContent = default;
        private static bool _STRING_TYPE_GYROSCOPE_LIMITED_AXES_UNCALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_GYROSCOPE_UNCALIBRATED"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_GYROSCOPE_UNCALIBRATED { get { if (!_STRING_TYPE_GYROSCOPE_UNCALIBRATEDReady) { _STRING_TYPE_GYROSCOPE_UNCALIBRATEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_GYROSCOPE_UNCALIBRATED"); _STRING_TYPE_GYROSCOPE_UNCALIBRATEDReady = true; } return _STRING_TYPE_GYROSCOPE_UNCALIBRATEDContent; } }
        private static Java.Lang.String _STRING_TYPE_GYROSCOPE_UNCALIBRATEDContent = default;
        private static bool _STRING_TYPE_GYROSCOPE_UNCALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_HEAD_TRACKER"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_HEAD_TRACKER { get { if (!_STRING_TYPE_HEAD_TRACKERReady) { _STRING_TYPE_HEAD_TRACKERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_HEAD_TRACKER"); _STRING_TYPE_HEAD_TRACKERReady = true; } return _STRING_TYPE_HEAD_TRACKERContent; } }
        private static Java.Lang.String _STRING_TYPE_HEAD_TRACKERContent = default;
        private static bool _STRING_TYPE_HEAD_TRACKERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_HEADING"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_HEADING { get { if (!_STRING_TYPE_HEADINGReady) { _STRING_TYPE_HEADINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_HEADING"); _STRING_TYPE_HEADINGReady = true; } return _STRING_TYPE_HEADINGContent; } }
        private static Java.Lang.String _STRING_TYPE_HEADINGContent = default;
        private static bool _STRING_TYPE_HEADINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_HEART_BEAT"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_HEART_BEAT { get { if (!_STRING_TYPE_HEART_BEATReady) { _STRING_TYPE_HEART_BEATContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_HEART_BEAT"); _STRING_TYPE_HEART_BEATReady = true; } return _STRING_TYPE_HEART_BEATContent; } }
        private static Java.Lang.String _STRING_TYPE_HEART_BEATContent = default;
        private static bool _STRING_TYPE_HEART_BEATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_HEART_RATE"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_HEART_RATE { get { if (!_STRING_TYPE_HEART_RATEReady) { _STRING_TYPE_HEART_RATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_HEART_RATE"); _STRING_TYPE_HEART_RATEReady = true; } return _STRING_TYPE_HEART_RATEContent; } }
        private static Java.Lang.String _STRING_TYPE_HEART_RATEContent = default;
        private static bool _STRING_TYPE_HEART_RATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_HINGE_ANGLE"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_HINGE_ANGLE { get { if (!_STRING_TYPE_HINGE_ANGLEReady) { _STRING_TYPE_HINGE_ANGLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_HINGE_ANGLE"); _STRING_TYPE_HINGE_ANGLEReady = true; } return _STRING_TYPE_HINGE_ANGLEContent; } }
        private static Java.Lang.String _STRING_TYPE_HINGE_ANGLEContent = default;
        private static bool _STRING_TYPE_HINGE_ANGLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_LIGHT"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_LIGHT { get { if (!_STRING_TYPE_LIGHTReady) { _STRING_TYPE_LIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_LIGHT"); _STRING_TYPE_LIGHTReady = true; } return _STRING_TYPE_LIGHTContent; } }
        private static Java.Lang.String _STRING_TYPE_LIGHTContent = default;
        private static bool _STRING_TYPE_LIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_LINEAR_ACCELERATION"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_LINEAR_ACCELERATION { get { if (!_STRING_TYPE_LINEAR_ACCELERATIONReady) { _STRING_TYPE_LINEAR_ACCELERATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_LINEAR_ACCELERATION"); _STRING_TYPE_LINEAR_ACCELERATIONReady = true; } return _STRING_TYPE_LINEAR_ACCELERATIONContent; } }
        private static Java.Lang.String _STRING_TYPE_LINEAR_ACCELERATIONContent = default;
        private static bool _STRING_TYPE_LINEAR_ACCELERATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_LOW_LATENCY_OFFBODY_DETECT"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_LOW_LATENCY_OFFBODY_DETECT { get { if (!_STRING_TYPE_LOW_LATENCY_OFFBODY_DETECTReady) { _STRING_TYPE_LOW_LATENCY_OFFBODY_DETECTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_LOW_LATENCY_OFFBODY_DETECT"); _STRING_TYPE_LOW_LATENCY_OFFBODY_DETECTReady = true; } return _STRING_TYPE_LOW_LATENCY_OFFBODY_DETECTContent; } }
        private static Java.Lang.String _STRING_TYPE_LOW_LATENCY_OFFBODY_DETECTContent = default;
        private static bool _STRING_TYPE_LOW_LATENCY_OFFBODY_DETECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_MAGNETIC_FIELD"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_MAGNETIC_FIELD { get { if (!_STRING_TYPE_MAGNETIC_FIELDReady) { _STRING_TYPE_MAGNETIC_FIELDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_MAGNETIC_FIELD"); _STRING_TYPE_MAGNETIC_FIELDReady = true; } return _STRING_TYPE_MAGNETIC_FIELDContent; } }
        private static Java.Lang.String _STRING_TYPE_MAGNETIC_FIELDContent = default;
        private static bool _STRING_TYPE_MAGNETIC_FIELDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED { get { if (!_STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATEDReady) { _STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED"); _STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATEDReady = true; } return _STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATEDContent; } }
        private static Java.Lang.String _STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATEDContent = default;
        private static bool _STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_MOTION_DETECT"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_MOTION_DETECT { get { if (!_STRING_TYPE_MOTION_DETECTReady) { _STRING_TYPE_MOTION_DETECTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_MOTION_DETECT"); _STRING_TYPE_MOTION_DETECTReady = true; } return _STRING_TYPE_MOTION_DETECTContent; } }
        private static Java.Lang.String _STRING_TYPE_MOTION_DETECTContent = default;
        private static bool _STRING_TYPE_MOTION_DETECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_ORIENTATION"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String STRING_TYPE_ORIENTATION { get { if (!_STRING_TYPE_ORIENTATIONReady) { _STRING_TYPE_ORIENTATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_ORIENTATION"); _STRING_TYPE_ORIENTATIONReady = true; } return _STRING_TYPE_ORIENTATIONContent; } }
        private static Java.Lang.String _STRING_TYPE_ORIENTATIONContent = default;
        private static bool _STRING_TYPE_ORIENTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_POSE_6DOF"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_POSE_6DOF { get { if (!_STRING_TYPE_POSE_6DOFReady) { _STRING_TYPE_POSE_6DOFContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_POSE_6DOF"); _STRING_TYPE_POSE_6DOFReady = true; } return _STRING_TYPE_POSE_6DOFContent; } }
        private static Java.Lang.String _STRING_TYPE_POSE_6DOFContent = default;
        private static bool _STRING_TYPE_POSE_6DOFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_PRESSURE"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_PRESSURE { get { if (!_STRING_TYPE_PRESSUREReady) { _STRING_TYPE_PRESSUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_PRESSURE"); _STRING_TYPE_PRESSUREReady = true; } return _STRING_TYPE_PRESSUREContent; } }
        private static Java.Lang.String _STRING_TYPE_PRESSUREContent = default;
        private static bool _STRING_TYPE_PRESSUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_PROXIMITY"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_PROXIMITY { get { if (!_STRING_TYPE_PROXIMITYReady) { _STRING_TYPE_PROXIMITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_PROXIMITY"); _STRING_TYPE_PROXIMITYReady = true; } return _STRING_TYPE_PROXIMITYContent; } }
        private static Java.Lang.String _STRING_TYPE_PROXIMITYContent = default;
        private static bool _STRING_TYPE_PROXIMITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_RELATIVE_HUMIDITY"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_RELATIVE_HUMIDITY { get { if (!_STRING_TYPE_RELATIVE_HUMIDITYReady) { _STRING_TYPE_RELATIVE_HUMIDITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_RELATIVE_HUMIDITY"); _STRING_TYPE_RELATIVE_HUMIDITYReady = true; } return _STRING_TYPE_RELATIVE_HUMIDITYContent; } }
        private static Java.Lang.String _STRING_TYPE_RELATIVE_HUMIDITYContent = default;
        private static bool _STRING_TYPE_RELATIVE_HUMIDITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_ROTATION_VECTOR"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_ROTATION_VECTOR { get { if (!_STRING_TYPE_ROTATION_VECTORReady) { _STRING_TYPE_ROTATION_VECTORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_ROTATION_VECTOR"); _STRING_TYPE_ROTATION_VECTORReady = true; } return _STRING_TYPE_ROTATION_VECTORContent; } }
        private static Java.Lang.String _STRING_TYPE_ROTATION_VECTORContent = default;
        private static bool _STRING_TYPE_ROTATION_VECTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_SIGNIFICANT_MOTION"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_SIGNIFICANT_MOTION { get { if (!_STRING_TYPE_SIGNIFICANT_MOTIONReady) { _STRING_TYPE_SIGNIFICANT_MOTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_SIGNIFICANT_MOTION"); _STRING_TYPE_SIGNIFICANT_MOTIONReady = true; } return _STRING_TYPE_SIGNIFICANT_MOTIONContent; } }
        private static Java.Lang.String _STRING_TYPE_SIGNIFICANT_MOTIONContent = default;
        private static bool _STRING_TYPE_SIGNIFICANT_MOTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_STATIONARY_DETECT"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_STATIONARY_DETECT { get { if (!_STRING_TYPE_STATIONARY_DETECTReady) { _STRING_TYPE_STATIONARY_DETECTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_STATIONARY_DETECT"); _STRING_TYPE_STATIONARY_DETECTReady = true; } return _STRING_TYPE_STATIONARY_DETECTContent; } }
        private static Java.Lang.String _STRING_TYPE_STATIONARY_DETECTContent = default;
        private static bool _STRING_TYPE_STATIONARY_DETECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_STEP_COUNTER"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_STEP_COUNTER { get { if (!_STRING_TYPE_STEP_COUNTERReady) { _STRING_TYPE_STEP_COUNTERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_STEP_COUNTER"); _STRING_TYPE_STEP_COUNTERReady = true; } return _STRING_TYPE_STEP_COUNTERContent; } }
        private static Java.Lang.String _STRING_TYPE_STEP_COUNTERContent = default;
        private static bool _STRING_TYPE_STEP_COUNTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_STEP_DETECTOR"/>
        /// </summary>
        public static Java.Lang.String STRING_TYPE_STEP_DETECTOR { get { if (!_STRING_TYPE_STEP_DETECTORReady) { _STRING_TYPE_STEP_DETECTORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_STEP_DETECTOR"); _STRING_TYPE_STEP_DETECTORReady = true; } return _STRING_TYPE_STEP_DETECTORContent; } }
        private static Java.Lang.String _STRING_TYPE_STEP_DETECTORContent = default;
        private static bool _STRING_TYPE_STEP_DETECTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_TEMPERATURE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String STRING_TYPE_TEMPERATURE { get { if (!_STRING_TYPE_TEMPERATUREReady) { _STRING_TYPE_TEMPERATUREContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STRING_TYPE_TEMPERATURE"); _STRING_TYPE_TEMPERATUREReady = true; } return _STRING_TYPE_TEMPERATUREContent; } }
        private static Java.Lang.String _STRING_TYPE_TEMPERATUREContent = default;
        private static bool _STRING_TYPE_TEMPERATUREReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#isAdditionalInfoSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAdditionalInfoSupported()
        {
            return IExecuteWithSignature<bool>("isAdditionalInfoSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#isDirectChannelTypeSupported(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsDirectChannelTypeSupported(int arg0)
        {
            return IExecuteWithSignature<bool>("isDirectChannelTypeSupported", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#isDynamicSensor()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDynamicSensor()
        {
            return IExecuteWithSignature<bool>("isDynamicSensor", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWakeUpSensor()
        {
            return IExecuteWithSignature<bool>("isWakeUpSensor", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#getMaximumRange()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetMaximumRange()
        {
            return IExecuteWithSignature<float>("getMaximumRange", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#getPower()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetPower()
        {
            return IExecuteWithSignature<float>("getPower", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#getResolution()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetResolution()
        {
            return IExecuteWithSignature<float>("getResolution", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#getFifoMaxEventCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFifoMaxEventCount()
        {
            return IExecuteWithSignature<int>("getFifoMaxEventCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#getFifoReservedEventCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFifoReservedEventCount()
        {
            return IExecuteWithSignature<int>("getFifoReservedEventCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#getHighestDirectReportRateLevel()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHighestDirectReportRateLevel()
        {
            return IExecuteWithSignature<int>("getHighestDirectReportRateLevel", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#getId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetId()
        {
            return IExecuteWithSignature<int>("getId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#getMaxDelay()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxDelay()
        {
            return IExecuteWithSignature<int>("getMaxDelay", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#getMinDelay()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMinDelay()
        {
            return IExecuteWithSignature<int>("getMinDelay", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#getReportingMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetReportingMode()
        {
            return IExecuteWithSignature<int>("getReportingMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#getType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetType()
        {
            return IExecuteWithSignature<int>("getType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#getVersion()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVersion()
        {
            return IExecuteWithSignature<int>("getVersion", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#getName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#getStringType()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetStringType()
        {
            return IExecuteWithSignature<Java.Lang.String>("getStringType", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/Sensor.html#getVendor()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetVendor()
        {
            return IExecuteWithSignature<Java.Lang.String>("getVendor", "()Ljava/lang/String;");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
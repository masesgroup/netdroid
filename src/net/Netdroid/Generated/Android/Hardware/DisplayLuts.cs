/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Hardware
{
    #region DisplayLuts declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/hardware/DisplayLuts.html"/>
    /// </summary>
    public partial class DisplayLuts : MASES.JCOBridge.C2JBridge.JVMBridgeBase<DisplayLuts>
    {
        const string _bridgeClassName = "android.hardware.DisplayLuts";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public DisplayLuts() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public DisplayLuts(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public DisplayLuts(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region Entry declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DisplayLuts.Entry.html"/>
        /// </summary>
        public partial class Entry : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Entry>
        {
            const string _bridgeClassName = "android.hardware.DisplayLuts$Entry";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Entry() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Entry(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Entry(params object[] args) : base(args) { }
        
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region DisplayLuts implementation
    public partial class DisplayLuts
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DisplayLuts.html#set(android.hardware.DisplayLuts.Entry,android.hardware.DisplayLuts.Entry)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.DisplayLuts.Entry"/></param>
        /// <param name="arg1"><see cref="Android.Hardware.DisplayLuts.Entry"/></param>
        public void Set(Android.Hardware.DisplayLuts.Entry arg0, Android.Hardware.DisplayLuts.Entry arg1)
        {
            IExecuteWithSignature("set", "(Landroid/hardware/DisplayLuts$Entry;Landroid/hardware/DisplayLuts$Entry;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/DisplayLuts.html#set(android.hardware.DisplayLuts.Entry)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.DisplayLuts.Entry"/></param>
        public void Set(Android.Hardware.DisplayLuts.Entry arg0)
        {
            IExecuteWithSignature("set", "(Landroid/hardware/DisplayLuts$Entry;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region Entry implementation
        public partial class Entry
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/DisplayLuts.Entry.html#%3Cinit%3E(float[],int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public Entry(float[] arg0, int arg1, int arg2)
                : base(arg0, arg1, arg2)
            {
            }
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/DisplayLuts.Entry.html#getBuffer()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float[] GetBuffer()
            {
                return IExecuteWithSignatureArray<float>("getBuffer", "()[F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/DisplayLuts.Entry.html#getDimension()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetDimension()
            {
                return IExecuteWithSignature<int>("getDimension", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/DisplayLuts.Entry.html#getSamplingKey()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetSamplingKey()
            {
                return IExecuteWithSignature<int>("getSamplingKey", "()I");
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
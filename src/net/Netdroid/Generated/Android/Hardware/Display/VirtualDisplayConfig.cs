/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Hardware.Display
{
    #region VirtualDisplayConfig declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.html"/>
    /// </summary>
    public partial class VirtualDisplayConfig : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.hardware.display.VirtualDisplayConfig";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public VirtualDisplayConfig() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public VirtualDisplayConfig(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.hardware.display.VirtualDisplayConfig$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region VirtualDisplayConfig implementation
    public partial class VirtualDisplayConfig
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.html#getSurface()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Surface"/></returns>
        public Android.View.Surface GetSurface()
        {
            return IExecuteWithSignature<Android.View.Surface>("getSurface", "()Landroid/view/Surface;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.html#getRequestedRefreshRate()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetRequestedRefreshRate()
        {
            return IExecuteWithSignature<float>("getRequestedRefreshRate", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.html#getDensityDpi()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDensityDpi()
        {
            return IExecuteWithSignature<int>("getDensityDpi", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.html#getFlags()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFlags()
        {
            return IExecuteWithSignature<int>("getFlags", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.html#getHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHeight()
        {
            return IExecuteWithSignature<int>("getHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.html#getWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetWidth()
        {
            return IExecuteWithSignature<int>("getWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.html#getName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.html#getDisplayCategories()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.String> GetDisplayCategories()
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getDisplayCategories", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.Builder.html#%3Cinit%3E(java.lang.String,int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            public Builder(Java.Lang.String arg0, int arg1, int arg2, int arg3)
                : base(arg0, arg1, arg2, arg3)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.Hardware.Display.VirtualDisplayConfig"/></returns>
            public Android.Hardware.Display.VirtualDisplayConfig Build()
            {
                return IExecuteWithSignature<Android.Hardware.Display.VirtualDisplayConfig>("build", "()Landroid/hardware/display/VirtualDisplayConfig;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.Builder.html#addDisplayCategory(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Hardware.Display.VirtualDisplayConfig.Builder"/></returns>
            public Android.Hardware.Display.VirtualDisplayConfig.Builder AddDisplayCategory(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.Hardware.Display.VirtualDisplayConfig.Builder>("addDisplayCategory", "(Ljava/lang/String;)Landroid/hardware/display/VirtualDisplayConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.Builder.html#setDisplayCategories(java.util.Set)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Set"/></param>
            /// <returns><see cref="Android.Hardware.Display.VirtualDisplayConfig.Builder"/></returns>
            public Android.Hardware.Display.VirtualDisplayConfig.Builder SetDisplayCategories(Java.Util.Set<Java.Lang.String> arg0)
            {
                return IExecuteWithSignature<Android.Hardware.Display.VirtualDisplayConfig.Builder>("setDisplayCategories", "(Ljava/util/Set;)Landroid/hardware/display/VirtualDisplayConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.Builder.html#setFlags(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Hardware.Display.VirtualDisplayConfig.Builder"/></returns>
            public Android.Hardware.Display.VirtualDisplayConfig.Builder SetFlags(int arg0)
            {
                return IExecuteWithSignature<Android.Hardware.Display.VirtualDisplayConfig.Builder>("setFlags", "(I)Landroid/hardware/display/VirtualDisplayConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.Builder.html#setRequestedRefreshRate(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <returns><see cref="Android.Hardware.Display.VirtualDisplayConfig.Builder"/></returns>
            public Android.Hardware.Display.VirtualDisplayConfig.Builder SetRequestedRefreshRate(float arg0)
            {
                return IExecuteWithSignature<Android.Hardware.Display.VirtualDisplayConfig.Builder>("setRequestedRefreshRate", "(F)Landroid/hardware/display/VirtualDisplayConfig$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/display/VirtualDisplayConfig.Builder.html#setSurface(android.view.Surface)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.Surface"/></param>
            /// <returns><see cref="Android.Hardware.Display.VirtualDisplayConfig.Builder"/></returns>
            public Android.Hardware.Display.VirtualDisplayConfig.Builder SetSurface(Android.View.Surface arg0)
            {
                return IExecuteWithSignature<Android.Hardware.Display.VirtualDisplayConfig.Builder>("setSurface", "(Landroid/view/Surface;)Landroid/hardware/display/VirtualDisplayConfig$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
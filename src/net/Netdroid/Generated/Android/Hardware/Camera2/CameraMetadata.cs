/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Hardware.Camera2
{
    #region CameraMetadata
    public partial class CameraMetadata
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONT { get { if (!_AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONTReady) { _AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONT"); _AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONTReady = true; } return _AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFT { get { if (!_AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFTReady) { _AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFT"); _AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFTReady = true; } return _AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHER"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHER { get { if (!_AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHERReady) { _AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHERContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHER"); _AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHERReady = true; } return _AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHERContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHERContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_EXTERIOR_REAR"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_EXTERIOR_REAR { get { if (!_AUTOMOTIVE_LENS_FACING_EXTERIOR_REARReady) { _AUTOMOTIVE_LENS_FACING_EXTERIOR_REARContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_EXTERIOR_REAR"); _AUTOMOTIVE_LENS_FACING_EXTERIOR_REARReady = true; } return _AUTOMOTIVE_LENS_FACING_EXTERIOR_REARContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_EXTERIOR_REARContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_EXTERIOR_REARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHT { get { if (!_AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHTReady) { _AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHT"); _AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHTReady = true; } return _AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_OTHER"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_OTHER { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_OTHERReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_OTHERContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_OTHER"); _AUTOMOTIVE_LENS_FACING_INTERIOR_OTHERReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_OTHERContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_OTHERContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTER"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTER { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTERReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTERContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTER"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTERReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTERContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTERContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFT { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFTReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFT"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFTReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHT { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHTReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHT"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHTReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTER"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTER { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTERReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTERContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTER"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTERReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTERContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTERContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFT { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFTReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFT"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFTReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHT { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHTReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHT"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHTReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTER"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTER { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTERReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTERContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTER"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTERReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTERContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTERContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFT { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFTReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFT"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFTReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHT { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHTReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHT"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHTReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTERIOR_FRONT"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTERIOR_FRONT { get { if (!_AUTOMOTIVE_LOCATION_EXTERIOR_FRONTReady) { _AUTOMOTIVE_LOCATION_EXTERIOR_FRONTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTERIOR_FRONT"); _AUTOMOTIVE_LOCATION_EXTERIOR_FRONTReady = true; } return _AUTOMOTIVE_LOCATION_EXTERIOR_FRONTContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTERIOR_FRONTContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTERIOR_FRONTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTERIOR_LEFT"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTERIOR_LEFT { get { if (!_AUTOMOTIVE_LOCATION_EXTERIOR_LEFTReady) { _AUTOMOTIVE_LOCATION_EXTERIOR_LEFTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTERIOR_LEFT"); _AUTOMOTIVE_LOCATION_EXTERIOR_LEFTReady = true; } return _AUTOMOTIVE_LOCATION_EXTERIOR_LEFTContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTERIOR_LEFTContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTERIOR_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTERIOR_OTHER"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTERIOR_OTHER { get { if (!_AUTOMOTIVE_LOCATION_EXTERIOR_OTHERReady) { _AUTOMOTIVE_LOCATION_EXTERIOR_OTHERContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTERIOR_OTHER"); _AUTOMOTIVE_LOCATION_EXTERIOR_OTHERReady = true; } return _AUTOMOTIVE_LOCATION_EXTERIOR_OTHERContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTERIOR_OTHERContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTERIOR_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTERIOR_REAR"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTERIOR_REAR { get { if (!_AUTOMOTIVE_LOCATION_EXTERIOR_REARReady) { _AUTOMOTIVE_LOCATION_EXTERIOR_REARContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTERIOR_REAR"); _AUTOMOTIVE_LOCATION_EXTERIOR_REARReady = true; } return _AUTOMOTIVE_LOCATION_EXTERIOR_REARContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTERIOR_REARContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTERIOR_REARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTERIOR_RIGHT"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTERIOR_RIGHT { get { if (!_AUTOMOTIVE_LOCATION_EXTERIOR_RIGHTReady) { _AUTOMOTIVE_LOCATION_EXTERIOR_RIGHTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTERIOR_RIGHT"); _AUTOMOTIVE_LOCATION_EXTERIOR_RIGHTReady = true; } return _AUTOMOTIVE_LOCATION_EXTERIOR_RIGHTContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTERIOR_RIGHTContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTERIOR_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTRA_FRONT"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTRA_FRONT { get { if (!_AUTOMOTIVE_LOCATION_EXTRA_FRONTReady) { _AUTOMOTIVE_LOCATION_EXTRA_FRONTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTRA_FRONT"); _AUTOMOTIVE_LOCATION_EXTRA_FRONTReady = true; } return _AUTOMOTIVE_LOCATION_EXTRA_FRONTContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTRA_FRONTContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTRA_FRONTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTRA_LEFT"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTRA_LEFT { get { if (!_AUTOMOTIVE_LOCATION_EXTRA_LEFTReady) { _AUTOMOTIVE_LOCATION_EXTRA_LEFTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTRA_LEFT"); _AUTOMOTIVE_LOCATION_EXTRA_LEFTReady = true; } return _AUTOMOTIVE_LOCATION_EXTRA_LEFTContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTRA_LEFTContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTRA_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTRA_OTHER"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTRA_OTHER { get { if (!_AUTOMOTIVE_LOCATION_EXTRA_OTHERReady) { _AUTOMOTIVE_LOCATION_EXTRA_OTHERContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTRA_OTHER"); _AUTOMOTIVE_LOCATION_EXTRA_OTHERReady = true; } return _AUTOMOTIVE_LOCATION_EXTRA_OTHERContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTRA_OTHERContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTRA_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTRA_REAR"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTRA_REAR { get { if (!_AUTOMOTIVE_LOCATION_EXTRA_REARReady) { _AUTOMOTIVE_LOCATION_EXTRA_REARContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTRA_REAR"); _AUTOMOTIVE_LOCATION_EXTRA_REARReady = true; } return _AUTOMOTIVE_LOCATION_EXTRA_REARContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTRA_REARContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTRA_REARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTRA_RIGHT"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTRA_RIGHT { get { if (!_AUTOMOTIVE_LOCATION_EXTRA_RIGHTReady) { _AUTOMOTIVE_LOCATION_EXTRA_RIGHTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTRA_RIGHT"); _AUTOMOTIVE_LOCATION_EXTRA_RIGHTReady = true; } return _AUTOMOTIVE_LOCATION_EXTRA_RIGHTContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTRA_RIGHTContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTRA_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_INTERIOR"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_INTERIOR { get { if (!_AUTOMOTIVE_LOCATION_INTERIORReady) { _AUTOMOTIVE_LOCATION_INTERIORContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_INTERIOR"); _AUTOMOTIVE_LOCATION_INTERIORReady = true; } return _AUTOMOTIVE_LOCATION_INTERIORContent; } }
        private static int _AUTOMOTIVE_LOCATION_INTERIORContent = default;
        private static bool _AUTOMOTIVE_LOCATION_INTERIORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#COLOR_CORRECTION_ABERRATION_MODE_FAST"/>
        /// </summary>
        public static int COLOR_CORRECTION_ABERRATION_MODE_FAST { get { if (!_COLOR_CORRECTION_ABERRATION_MODE_FASTReady) { _COLOR_CORRECTION_ABERRATION_MODE_FASTContent = SGetField<int>(LocalBridgeClazz, "COLOR_CORRECTION_ABERRATION_MODE_FAST"); _COLOR_CORRECTION_ABERRATION_MODE_FASTReady = true; } return _COLOR_CORRECTION_ABERRATION_MODE_FASTContent; } }
        private static int _COLOR_CORRECTION_ABERRATION_MODE_FASTContent = default;
        private static bool _COLOR_CORRECTION_ABERRATION_MODE_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITY"/>
        /// </summary>
        public static int COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITY { get { if (!_COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITYReady) { _COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITY"); _COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITYReady = true; } return _COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITYContent; } }
        private static int _COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITYContent = default;
        private static bool _COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#COLOR_CORRECTION_ABERRATION_MODE_OFF"/>
        /// </summary>
        public static int COLOR_CORRECTION_ABERRATION_MODE_OFF { get { if (!_COLOR_CORRECTION_ABERRATION_MODE_OFFReady) { _COLOR_CORRECTION_ABERRATION_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "COLOR_CORRECTION_ABERRATION_MODE_OFF"); _COLOR_CORRECTION_ABERRATION_MODE_OFFReady = true; } return _COLOR_CORRECTION_ABERRATION_MODE_OFFContent; } }
        private static int _COLOR_CORRECTION_ABERRATION_MODE_OFFContent = default;
        private static bool _COLOR_CORRECTION_ABERRATION_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#COLOR_CORRECTION_MODE_FAST"/>
        /// </summary>
        public static int COLOR_CORRECTION_MODE_FAST { get { if (!_COLOR_CORRECTION_MODE_FASTReady) { _COLOR_CORRECTION_MODE_FASTContent = SGetField<int>(LocalBridgeClazz, "COLOR_CORRECTION_MODE_FAST"); _COLOR_CORRECTION_MODE_FASTReady = true; } return _COLOR_CORRECTION_MODE_FASTContent; } }
        private static int _COLOR_CORRECTION_MODE_FASTContent = default;
        private static bool _COLOR_CORRECTION_MODE_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#COLOR_CORRECTION_MODE_HIGH_QUALITY"/>
        /// </summary>
        public static int COLOR_CORRECTION_MODE_HIGH_QUALITY { get { if (!_COLOR_CORRECTION_MODE_HIGH_QUALITYReady) { _COLOR_CORRECTION_MODE_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "COLOR_CORRECTION_MODE_HIGH_QUALITY"); _COLOR_CORRECTION_MODE_HIGH_QUALITYReady = true; } return _COLOR_CORRECTION_MODE_HIGH_QUALITYContent; } }
        private static int _COLOR_CORRECTION_MODE_HIGH_QUALITYContent = default;
        private static bool _COLOR_CORRECTION_MODE_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#COLOR_CORRECTION_MODE_TRANSFORM_MATRIX"/>
        /// </summary>
        public static int COLOR_CORRECTION_MODE_TRANSFORM_MATRIX { get { if (!_COLOR_CORRECTION_MODE_TRANSFORM_MATRIXReady) { _COLOR_CORRECTION_MODE_TRANSFORM_MATRIXContent = SGetField<int>(LocalBridgeClazz, "COLOR_CORRECTION_MODE_TRANSFORM_MATRIX"); _COLOR_CORRECTION_MODE_TRANSFORM_MATRIXReady = true; } return _COLOR_CORRECTION_MODE_TRANSFORM_MATRIXContent; } }
        private static int _COLOR_CORRECTION_MODE_TRANSFORM_MATRIXContent = default;
        private static bool _COLOR_CORRECTION_MODE_TRANSFORM_MATRIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_ANTIBANDING_MODE_50HZ"/>
        /// </summary>
        public static int CONTROL_AE_ANTIBANDING_MODE_50HZ { get { if (!_CONTROL_AE_ANTIBANDING_MODE_50HZReady) { _CONTROL_AE_ANTIBANDING_MODE_50HZContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_ANTIBANDING_MODE_50HZ"); _CONTROL_AE_ANTIBANDING_MODE_50HZReady = true; } return _CONTROL_AE_ANTIBANDING_MODE_50HZContent; } }
        private static int _CONTROL_AE_ANTIBANDING_MODE_50HZContent = default;
        private static bool _CONTROL_AE_ANTIBANDING_MODE_50HZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_ANTIBANDING_MODE_60HZ"/>
        /// </summary>
        public static int CONTROL_AE_ANTIBANDING_MODE_60HZ { get { if (!_CONTROL_AE_ANTIBANDING_MODE_60HZReady) { _CONTROL_AE_ANTIBANDING_MODE_60HZContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_ANTIBANDING_MODE_60HZ"); _CONTROL_AE_ANTIBANDING_MODE_60HZReady = true; } return _CONTROL_AE_ANTIBANDING_MODE_60HZContent; } }
        private static int _CONTROL_AE_ANTIBANDING_MODE_60HZContent = default;
        private static bool _CONTROL_AE_ANTIBANDING_MODE_60HZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_ANTIBANDING_MODE_AUTO"/>
        /// </summary>
        public static int CONTROL_AE_ANTIBANDING_MODE_AUTO { get { if (!_CONTROL_AE_ANTIBANDING_MODE_AUTOReady) { _CONTROL_AE_ANTIBANDING_MODE_AUTOContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_ANTIBANDING_MODE_AUTO"); _CONTROL_AE_ANTIBANDING_MODE_AUTOReady = true; } return _CONTROL_AE_ANTIBANDING_MODE_AUTOContent; } }
        private static int _CONTROL_AE_ANTIBANDING_MODE_AUTOContent = default;
        private static bool _CONTROL_AE_ANTIBANDING_MODE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_ANTIBANDING_MODE_OFF"/>
        /// </summary>
        public static int CONTROL_AE_ANTIBANDING_MODE_OFF { get { if (!_CONTROL_AE_ANTIBANDING_MODE_OFFReady) { _CONTROL_AE_ANTIBANDING_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_ANTIBANDING_MODE_OFF"); _CONTROL_AE_ANTIBANDING_MODE_OFFReady = true; } return _CONTROL_AE_ANTIBANDING_MODE_OFFContent; } }
        private static int _CONTROL_AE_ANTIBANDING_MODE_OFFContent = default;
        private static bool _CONTROL_AE_ANTIBANDING_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_MODE_OFF"/>
        /// </summary>
        public static int CONTROL_AE_MODE_OFF { get { if (!_CONTROL_AE_MODE_OFFReady) { _CONTROL_AE_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_MODE_OFF"); _CONTROL_AE_MODE_OFFReady = true; } return _CONTROL_AE_MODE_OFFContent; } }
        private static int _CONTROL_AE_MODE_OFFContent = default;
        private static bool _CONTROL_AE_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_MODE_ON"/>
        /// </summary>
        public static int CONTROL_AE_MODE_ON { get { if (!_CONTROL_AE_MODE_ONReady) { _CONTROL_AE_MODE_ONContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_MODE_ON"); _CONTROL_AE_MODE_ONReady = true; } return _CONTROL_AE_MODE_ONContent; } }
        private static int _CONTROL_AE_MODE_ONContent = default;
        private static bool _CONTROL_AE_MODE_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_MODE_ON_ALWAYS_FLASH"/>
        /// </summary>
        public static int CONTROL_AE_MODE_ON_ALWAYS_FLASH { get { if (!_CONTROL_AE_MODE_ON_ALWAYS_FLASHReady) { _CONTROL_AE_MODE_ON_ALWAYS_FLASHContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_MODE_ON_ALWAYS_FLASH"); _CONTROL_AE_MODE_ON_ALWAYS_FLASHReady = true; } return _CONTROL_AE_MODE_ON_ALWAYS_FLASHContent; } }
        private static int _CONTROL_AE_MODE_ON_ALWAYS_FLASHContent = default;
        private static bool _CONTROL_AE_MODE_ON_ALWAYS_FLASHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_MODE_ON_AUTO_FLASH"/>
        /// </summary>
        public static int CONTROL_AE_MODE_ON_AUTO_FLASH { get { if (!_CONTROL_AE_MODE_ON_AUTO_FLASHReady) { _CONTROL_AE_MODE_ON_AUTO_FLASHContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_MODE_ON_AUTO_FLASH"); _CONTROL_AE_MODE_ON_AUTO_FLASHReady = true; } return _CONTROL_AE_MODE_ON_AUTO_FLASHContent; } }
        private static int _CONTROL_AE_MODE_ON_AUTO_FLASHContent = default;
        private static bool _CONTROL_AE_MODE_ON_AUTO_FLASHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE"/>
        /// </summary>
        public static int CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE { get { if (!_CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYEReady) { _CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE"); _CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYEReady = true; } return _CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYEContent; } }
        private static int _CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYEContent = default;
        private static bool _CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_MODE_ON_EXTERNAL_FLASH"/>
        /// </summary>
        public static int CONTROL_AE_MODE_ON_EXTERNAL_FLASH { get { if (!_CONTROL_AE_MODE_ON_EXTERNAL_FLASHReady) { _CONTROL_AE_MODE_ON_EXTERNAL_FLASHContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_MODE_ON_EXTERNAL_FLASH"); _CONTROL_AE_MODE_ON_EXTERNAL_FLASHReady = true; } return _CONTROL_AE_MODE_ON_EXTERNAL_FLASHContent; } }
        private static int _CONTROL_AE_MODE_ON_EXTERNAL_FLASHContent = default;
        private static bool _CONTROL_AE_MODE_ON_EXTERNAL_FLASHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITY"/>
        /// </summary>
        public static int CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITY { get { if (!_CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITYReady) { _CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITYContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITY"); _CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITYReady = true; } return _CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITYContent; } }
        private static int _CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITYContent = default;
        private static bool _CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_PRECAPTURE_TRIGGER_CANCEL"/>
        /// </summary>
        public static int CONTROL_AE_PRECAPTURE_TRIGGER_CANCEL { get { if (!_CONTROL_AE_PRECAPTURE_TRIGGER_CANCELReady) { _CONTROL_AE_PRECAPTURE_TRIGGER_CANCELContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_PRECAPTURE_TRIGGER_CANCEL"); _CONTROL_AE_PRECAPTURE_TRIGGER_CANCELReady = true; } return _CONTROL_AE_PRECAPTURE_TRIGGER_CANCELContent; } }
        private static int _CONTROL_AE_PRECAPTURE_TRIGGER_CANCELContent = default;
        private static bool _CONTROL_AE_PRECAPTURE_TRIGGER_CANCELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_PRECAPTURE_TRIGGER_IDLE"/>
        /// </summary>
        public static int CONTROL_AE_PRECAPTURE_TRIGGER_IDLE { get { if (!_CONTROL_AE_PRECAPTURE_TRIGGER_IDLEReady) { _CONTROL_AE_PRECAPTURE_TRIGGER_IDLEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_PRECAPTURE_TRIGGER_IDLE"); _CONTROL_AE_PRECAPTURE_TRIGGER_IDLEReady = true; } return _CONTROL_AE_PRECAPTURE_TRIGGER_IDLEContent; } }
        private static int _CONTROL_AE_PRECAPTURE_TRIGGER_IDLEContent = default;
        private static bool _CONTROL_AE_PRECAPTURE_TRIGGER_IDLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_PRECAPTURE_TRIGGER_START"/>
        /// </summary>
        public static int CONTROL_AE_PRECAPTURE_TRIGGER_START { get { if (!_CONTROL_AE_PRECAPTURE_TRIGGER_STARTReady) { _CONTROL_AE_PRECAPTURE_TRIGGER_STARTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_PRECAPTURE_TRIGGER_START"); _CONTROL_AE_PRECAPTURE_TRIGGER_STARTReady = true; } return _CONTROL_AE_PRECAPTURE_TRIGGER_STARTContent; } }
        private static int _CONTROL_AE_PRECAPTURE_TRIGGER_STARTContent = default;
        private static bool _CONTROL_AE_PRECAPTURE_TRIGGER_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_STATE_CONVERGED"/>
        /// </summary>
        public static int CONTROL_AE_STATE_CONVERGED { get { if (!_CONTROL_AE_STATE_CONVERGEDReady) { _CONTROL_AE_STATE_CONVERGEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_STATE_CONVERGED"); _CONTROL_AE_STATE_CONVERGEDReady = true; } return _CONTROL_AE_STATE_CONVERGEDContent; } }
        private static int _CONTROL_AE_STATE_CONVERGEDContent = default;
        private static bool _CONTROL_AE_STATE_CONVERGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_STATE_FLASH_REQUIRED"/>
        /// </summary>
        public static int CONTROL_AE_STATE_FLASH_REQUIRED { get { if (!_CONTROL_AE_STATE_FLASH_REQUIREDReady) { _CONTROL_AE_STATE_FLASH_REQUIREDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_STATE_FLASH_REQUIRED"); _CONTROL_AE_STATE_FLASH_REQUIREDReady = true; } return _CONTROL_AE_STATE_FLASH_REQUIREDContent; } }
        private static int _CONTROL_AE_STATE_FLASH_REQUIREDContent = default;
        private static bool _CONTROL_AE_STATE_FLASH_REQUIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_STATE_INACTIVE"/>
        /// </summary>
        public static int CONTROL_AE_STATE_INACTIVE { get { if (!_CONTROL_AE_STATE_INACTIVEReady) { _CONTROL_AE_STATE_INACTIVEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_STATE_INACTIVE"); _CONTROL_AE_STATE_INACTIVEReady = true; } return _CONTROL_AE_STATE_INACTIVEContent; } }
        private static int _CONTROL_AE_STATE_INACTIVEContent = default;
        private static bool _CONTROL_AE_STATE_INACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_STATE_LOCKED"/>
        /// </summary>
        public static int CONTROL_AE_STATE_LOCKED { get { if (!_CONTROL_AE_STATE_LOCKEDReady) { _CONTROL_AE_STATE_LOCKEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_STATE_LOCKED"); _CONTROL_AE_STATE_LOCKEDReady = true; } return _CONTROL_AE_STATE_LOCKEDContent; } }
        private static int _CONTROL_AE_STATE_LOCKEDContent = default;
        private static bool _CONTROL_AE_STATE_LOCKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_STATE_PRECAPTURE"/>
        /// </summary>
        public static int CONTROL_AE_STATE_PRECAPTURE { get { if (!_CONTROL_AE_STATE_PRECAPTUREReady) { _CONTROL_AE_STATE_PRECAPTUREContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_STATE_PRECAPTURE"); _CONTROL_AE_STATE_PRECAPTUREReady = true; } return _CONTROL_AE_STATE_PRECAPTUREContent; } }
        private static int _CONTROL_AE_STATE_PRECAPTUREContent = default;
        private static bool _CONTROL_AE_STATE_PRECAPTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_STATE_SEARCHING"/>
        /// </summary>
        public static int CONTROL_AE_STATE_SEARCHING { get { if (!_CONTROL_AE_STATE_SEARCHINGReady) { _CONTROL_AE_STATE_SEARCHINGContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_STATE_SEARCHING"); _CONTROL_AE_STATE_SEARCHINGReady = true; } return _CONTROL_AE_STATE_SEARCHINGContent; } }
        private static int _CONTROL_AE_STATE_SEARCHINGContent = default;
        private static bool _CONTROL_AE_STATE_SEARCHINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_MODE_AUTO"/>
        /// </summary>
        public static int CONTROL_AF_MODE_AUTO { get { if (!_CONTROL_AF_MODE_AUTOReady) { _CONTROL_AF_MODE_AUTOContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_MODE_AUTO"); _CONTROL_AF_MODE_AUTOReady = true; } return _CONTROL_AF_MODE_AUTOContent; } }
        private static int _CONTROL_AF_MODE_AUTOContent = default;
        private static bool _CONTROL_AF_MODE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_MODE_CONTINUOUS_PICTURE"/>
        /// </summary>
        public static int CONTROL_AF_MODE_CONTINUOUS_PICTURE { get { if (!_CONTROL_AF_MODE_CONTINUOUS_PICTUREReady) { _CONTROL_AF_MODE_CONTINUOUS_PICTUREContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_MODE_CONTINUOUS_PICTURE"); _CONTROL_AF_MODE_CONTINUOUS_PICTUREReady = true; } return _CONTROL_AF_MODE_CONTINUOUS_PICTUREContent; } }
        private static int _CONTROL_AF_MODE_CONTINUOUS_PICTUREContent = default;
        private static bool _CONTROL_AF_MODE_CONTINUOUS_PICTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_MODE_CONTINUOUS_VIDEO"/>
        /// </summary>
        public static int CONTROL_AF_MODE_CONTINUOUS_VIDEO { get { if (!_CONTROL_AF_MODE_CONTINUOUS_VIDEOReady) { _CONTROL_AF_MODE_CONTINUOUS_VIDEOContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_MODE_CONTINUOUS_VIDEO"); _CONTROL_AF_MODE_CONTINUOUS_VIDEOReady = true; } return _CONTROL_AF_MODE_CONTINUOUS_VIDEOContent; } }
        private static int _CONTROL_AF_MODE_CONTINUOUS_VIDEOContent = default;
        private static bool _CONTROL_AF_MODE_CONTINUOUS_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_MODE_EDOF"/>
        /// </summary>
        public static int CONTROL_AF_MODE_EDOF { get { if (!_CONTROL_AF_MODE_EDOFReady) { _CONTROL_AF_MODE_EDOFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_MODE_EDOF"); _CONTROL_AF_MODE_EDOFReady = true; } return _CONTROL_AF_MODE_EDOFContent; } }
        private static int _CONTROL_AF_MODE_EDOFContent = default;
        private static bool _CONTROL_AF_MODE_EDOFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_MODE_MACRO"/>
        /// </summary>
        public static int CONTROL_AF_MODE_MACRO { get { if (!_CONTROL_AF_MODE_MACROReady) { _CONTROL_AF_MODE_MACROContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_MODE_MACRO"); _CONTROL_AF_MODE_MACROReady = true; } return _CONTROL_AF_MODE_MACROContent; } }
        private static int _CONTROL_AF_MODE_MACROContent = default;
        private static bool _CONTROL_AF_MODE_MACROReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_MODE_OFF"/>
        /// </summary>
        public static int CONTROL_AF_MODE_OFF { get { if (!_CONTROL_AF_MODE_OFFReady) { _CONTROL_AF_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_MODE_OFF"); _CONTROL_AF_MODE_OFFReady = true; } return _CONTROL_AF_MODE_OFFContent; } }
        private static int _CONTROL_AF_MODE_OFFContent = default;
        private static bool _CONTROL_AF_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_SCENE_CHANGE_DETECTED"/>
        /// </summary>
        public static int CONTROL_AF_SCENE_CHANGE_DETECTED { get { if (!_CONTROL_AF_SCENE_CHANGE_DETECTEDReady) { _CONTROL_AF_SCENE_CHANGE_DETECTEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_SCENE_CHANGE_DETECTED"); _CONTROL_AF_SCENE_CHANGE_DETECTEDReady = true; } return _CONTROL_AF_SCENE_CHANGE_DETECTEDContent; } }
        private static int _CONTROL_AF_SCENE_CHANGE_DETECTEDContent = default;
        private static bool _CONTROL_AF_SCENE_CHANGE_DETECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_SCENE_CHANGE_NOT_DETECTED"/>
        /// </summary>
        public static int CONTROL_AF_SCENE_CHANGE_NOT_DETECTED { get { if (!_CONTROL_AF_SCENE_CHANGE_NOT_DETECTEDReady) { _CONTROL_AF_SCENE_CHANGE_NOT_DETECTEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_SCENE_CHANGE_NOT_DETECTED"); _CONTROL_AF_SCENE_CHANGE_NOT_DETECTEDReady = true; } return _CONTROL_AF_SCENE_CHANGE_NOT_DETECTEDContent; } }
        private static int _CONTROL_AF_SCENE_CHANGE_NOT_DETECTEDContent = default;
        private static bool _CONTROL_AF_SCENE_CHANGE_NOT_DETECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_STATE_ACTIVE_SCAN"/>
        /// </summary>
        public static int CONTROL_AF_STATE_ACTIVE_SCAN { get { if (!_CONTROL_AF_STATE_ACTIVE_SCANReady) { _CONTROL_AF_STATE_ACTIVE_SCANContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_STATE_ACTIVE_SCAN"); _CONTROL_AF_STATE_ACTIVE_SCANReady = true; } return _CONTROL_AF_STATE_ACTIVE_SCANContent; } }
        private static int _CONTROL_AF_STATE_ACTIVE_SCANContent = default;
        private static bool _CONTROL_AF_STATE_ACTIVE_SCANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_STATE_FOCUSED_LOCKED"/>
        /// </summary>
        public static int CONTROL_AF_STATE_FOCUSED_LOCKED { get { if (!_CONTROL_AF_STATE_FOCUSED_LOCKEDReady) { _CONTROL_AF_STATE_FOCUSED_LOCKEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_STATE_FOCUSED_LOCKED"); _CONTROL_AF_STATE_FOCUSED_LOCKEDReady = true; } return _CONTROL_AF_STATE_FOCUSED_LOCKEDContent; } }
        private static int _CONTROL_AF_STATE_FOCUSED_LOCKEDContent = default;
        private static bool _CONTROL_AF_STATE_FOCUSED_LOCKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_STATE_INACTIVE"/>
        /// </summary>
        public static int CONTROL_AF_STATE_INACTIVE { get { if (!_CONTROL_AF_STATE_INACTIVEReady) { _CONTROL_AF_STATE_INACTIVEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_STATE_INACTIVE"); _CONTROL_AF_STATE_INACTIVEReady = true; } return _CONTROL_AF_STATE_INACTIVEContent; } }
        private static int _CONTROL_AF_STATE_INACTIVEContent = default;
        private static bool _CONTROL_AF_STATE_INACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_STATE_NOT_FOCUSED_LOCKED"/>
        /// </summary>
        public static int CONTROL_AF_STATE_NOT_FOCUSED_LOCKED { get { if (!_CONTROL_AF_STATE_NOT_FOCUSED_LOCKEDReady) { _CONTROL_AF_STATE_NOT_FOCUSED_LOCKEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_STATE_NOT_FOCUSED_LOCKED"); _CONTROL_AF_STATE_NOT_FOCUSED_LOCKEDReady = true; } return _CONTROL_AF_STATE_NOT_FOCUSED_LOCKEDContent; } }
        private static int _CONTROL_AF_STATE_NOT_FOCUSED_LOCKEDContent = default;
        private static bool _CONTROL_AF_STATE_NOT_FOCUSED_LOCKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_STATE_PASSIVE_FOCUSED"/>
        /// </summary>
        public static int CONTROL_AF_STATE_PASSIVE_FOCUSED { get { if (!_CONTROL_AF_STATE_PASSIVE_FOCUSEDReady) { _CONTROL_AF_STATE_PASSIVE_FOCUSEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_STATE_PASSIVE_FOCUSED"); _CONTROL_AF_STATE_PASSIVE_FOCUSEDReady = true; } return _CONTROL_AF_STATE_PASSIVE_FOCUSEDContent; } }
        private static int _CONTROL_AF_STATE_PASSIVE_FOCUSEDContent = default;
        private static bool _CONTROL_AF_STATE_PASSIVE_FOCUSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_STATE_PASSIVE_SCAN"/>
        /// </summary>
        public static int CONTROL_AF_STATE_PASSIVE_SCAN { get { if (!_CONTROL_AF_STATE_PASSIVE_SCANReady) { _CONTROL_AF_STATE_PASSIVE_SCANContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_STATE_PASSIVE_SCAN"); _CONTROL_AF_STATE_PASSIVE_SCANReady = true; } return _CONTROL_AF_STATE_PASSIVE_SCANContent; } }
        private static int _CONTROL_AF_STATE_PASSIVE_SCANContent = default;
        private static bool _CONTROL_AF_STATE_PASSIVE_SCANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_STATE_PASSIVE_UNFOCUSED"/>
        /// </summary>
        public static int CONTROL_AF_STATE_PASSIVE_UNFOCUSED { get { if (!_CONTROL_AF_STATE_PASSIVE_UNFOCUSEDReady) { _CONTROL_AF_STATE_PASSIVE_UNFOCUSEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_STATE_PASSIVE_UNFOCUSED"); _CONTROL_AF_STATE_PASSIVE_UNFOCUSEDReady = true; } return _CONTROL_AF_STATE_PASSIVE_UNFOCUSEDContent; } }
        private static int _CONTROL_AF_STATE_PASSIVE_UNFOCUSEDContent = default;
        private static bool _CONTROL_AF_STATE_PASSIVE_UNFOCUSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_TRIGGER_CANCEL"/>
        /// </summary>
        public static int CONTROL_AF_TRIGGER_CANCEL { get { if (!_CONTROL_AF_TRIGGER_CANCELReady) { _CONTROL_AF_TRIGGER_CANCELContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_TRIGGER_CANCEL"); _CONTROL_AF_TRIGGER_CANCELReady = true; } return _CONTROL_AF_TRIGGER_CANCELContent; } }
        private static int _CONTROL_AF_TRIGGER_CANCELContent = default;
        private static bool _CONTROL_AF_TRIGGER_CANCELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_TRIGGER_IDLE"/>
        /// </summary>
        public static int CONTROL_AF_TRIGGER_IDLE { get { if (!_CONTROL_AF_TRIGGER_IDLEReady) { _CONTROL_AF_TRIGGER_IDLEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_TRIGGER_IDLE"); _CONTROL_AF_TRIGGER_IDLEReady = true; } return _CONTROL_AF_TRIGGER_IDLEContent; } }
        private static int _CONTROL_AF_TRIGGER_IDLEContent = default;
        private static bool _CONTROL_AF_TRIGGER_IDLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_TRIGGER_START"/>
        /// </summary>
        public static int CONTROL_AF_TRIGGER_START { get { if (!_CONTROL_AF_TRIGGER_STARTReady) { _CONTROL_AF_TRIGGER_STARTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_TRIGGER_START"); _CONTROL_AF_TRIGGER_STARTReady = true; } return _CONTROL_AF_TRIGGER_STARTContent; } }
        private static int _CONTROL_AF_TRIGGER_STARTContent = default;
        private static bool _CONTROL_AF_TRIGGER_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AUTOFRAMING_OFF"/>
        /// </summary>
        public static int CONTROL_AUTOFRAMING_OFF { get { if (!_CONTROL_AUTOFRAMING_OFFReady) { _CONTROL_AUTOFRAMING_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AUTOFRAMING_OFF"); _CONTROL_AUTOFRAMING_OFFReady = true; } return _CONTROL_AUTOFRAMING_OFFContent; } }
        private static int _CONTROL_AUTOFRAMING_OFFContent = default;
        private static bool _CONTROL_AUTOFRAMING_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AUTOFRAMING_ON"/>
        /// </summary>
        public static int CONTROL_AUTOFRAMING_ON { get { if (!_CONTROL_AUTOFRAMING_ONReady) { _CONTROL_AUTOFRAMING_ONContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AUTOFRAMING_ON"); _CONTROL_AUTOFRAMING_ONReady = true; } return _CONTROL_AUTOFRAMING_ONContent; } }
        private static int _CONTROL_AUTOFRAMING_ONContent = default;
        private static bool _CONTROL_AUTOFRAMING_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AUTOFRAMING_STATE_CONVERGED"/>
        /// </summary>
        public static int CONTROL_AUTOFRAMING_STATE_CONVERGED { get { if (!_CONTROL_AUTOFRAMING_STATE_CONVERGEDReady) { _CONTROL_AUTOFRAMING_STATE_CONVERGEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AUTOFRAMING_STATE_CONVERGED"); _CONTROL_AUTOFRAMING_STATE_CONVERGEDReady = true; } return _CONTROL_AUTOFRAMING_STATE_CONVERGEDContent; } }
        private static int _CONTROL_AUTOFRAMING_STATE_CONVERGEDContent = default;
        private static bool _CONTROL_AUTOFRAMING_STATE_CONVERGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AUTOFRAMING_STATE_FRAMING"/>
        /// </summary>
        public static int CONTROL_AUTOFRAMING_STATE_FRAMING { get { if (!_CONTROL_AUTOFRAMING_STATE_FRAMINGReady) { _CONTROL_AUTOFRAMING_STATE_FRAMINGContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AUTOFRAMING_STATE_FRAMING"); _CONTROL_AUTOFRAMING_STATE_FRAMINGReady = true; } return _CONTROL_AUTOFRAMING_STATE_FRAMINGContent; } }
        private static int _CONTROL_AUTOFRAMING_STATE_FRAMINGContent = default;
        private static bool _CONTROL_AUTOFRAMING_STATE_FRAMINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AUTOFRAMING_STATE_INACTIVE"/>
        /// </summary>
        public static int CONTROL_AUTOFRAMING_STATE_INACTIVE { get { if (!_CONTROL_AUTOFRAMING_STATE_INACTIVEReady) { _CONTROL_AUTOFRAMING_STATE_INACTIVEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AUTOFRAMING_STATE_INACTIVE"); _CONTROL_AUTOFRAMING_STATE_INACTIVEReady = true; } return _CONTROL_AUTOFRAMING_STATE_INACTIVEContent; } }
        private static int _CONTROL_AUTOFRAMING_STATE_INACTIVEContent = default;
        private static bool _CONTROL_AUTOFRAMING_STATE_INACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_AUTO"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_AUTO { get { if (!_CONTROL_AWB_MODE_AUTOReady) { _CONTROL_AWB_MODE_AUTOContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_AUTO"); _CONTROL_AWB_MODE_AUTOReady = true; } return _CONTROL_AWB_MODE_AUTOContent; } }
        private static int _CONTROL_AWB_MODE_AUTOContent = default;
        private static bool _CONTROL_AWB_MODE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_CLOUDY_DAYLIGHT"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_CLOUDY_DAYLIGHT { get { if (!_CONTROL_AWB_MODE_CLOUDY_DAYLIGHTReady) { _CONTROL_AWB_MODE_CLOUDY_DAYLIGHTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_CLOUDY_DAYLIGHT"); _CONTROL_AWB_MODE_CLOUDY_DAYLIGHTReady = true; } return _CONTROL_AWB_MODE_CLOUDY_DAYLIGHTContent; } }
        private static int _CONTROL_AWB_MODE_CLOUDY_DAYLIGHTContent = default;
        private static bool _CONTROL_AWB_MODE_CLOUDY_DAYLIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_DAYLIGHT"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_DAYLIGHT { get { if (!_CONTROL_AWB_MODE_DAYLIGHTReady) { _CONTROL_AWB_MODE_DAYLIGHTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_DAYLIGHT"); _CONTROL_AWB_MODE_DAYLIGHTReady = true; } return _CONTROL_AWB_MODE_DAYLIGHTContent; } }
        private static int _CONTROL_AWB_MODE_DAYLIGHTContent = default;
        private static bool _CONTROL_AWB_MODE_DAYLIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_FLUORESCENT"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_FLUORESCENT { get { if (!_CONTROL_AWB_MODE_FLUORESCENTReady) { _CONTROL_AWB_MODE_FLUORESCENTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_FLUORESCENT"); _CONTROL_AWB_MODE_FLUORESCENTReady = true; } return _CONTROL_AWB_MODE_FLUORESCENTContent; } }
        private static int _CONTROL_AWB_MODE_FLUORESCENTContent = default;
        private static bool _CONTROL_AWB_MODE_FLUORESCENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_INCANDESCENT"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_INCANDESCENT { get { if (!_CONTROL_AWB_MODE_INCANDESCENTReady) { _CONTROL_AWB_MODE_INCANDESCENTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_INCANDESCENT"); _CONTROL_AWB_MODE_INCANDESCENTReady = true; } return _CONTROL_AWB_MODE_INCANDESCENTContent; } }
        private static int _CONTROL_AWB_MODE_INCANDESCENTContent = default;
        private static bool _CONTROL_AWB_MODE_INCANDESCENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_OFF"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_OFF { get { if (!_CONTROL_AWB_MODE_OFFReady) { _CONTROL_AWB_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_OFF"); _CONTROL_AWB_MODE_OFFReady = true; } return _CONTROL_AWB_MODE_OFFContent; } }
        private static int _CONTROL_AWB_MODE_OFFContent = default;
        private static bool _CONTROL_AWB_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_SHADE"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_SHADE { get { if (!_CONTROL_AWB_MODE_SHADEReady) { _CONTROL_AWB_MODE_SHADEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_SHADE"); _CONTROL_AWB_MODE_SHADEReady = true; } return _CONTROL_AWB_MODE_SHADEContent; } }
        private static int _CONTROL_AWB_MODE_SHADEContent = default;
        private static bool _CONTROL_AWB_MODE_SHADEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_TWILIGHT"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_TWILIGHT { get { if (!_CONTROL_AWB_MODE_TWILIGHTReady) { _CONTROL_AWB_MODE_TWILIGHTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_TWILIGHT"); _CONTROL_AWB_MODE_TWILIGHTReady = true; } return _CONTROL_AWB_MODE_TWILIGHTContent; } }
        private static int _CONTROL_AWB_MODE_TWILIGHTContent = default;
        private static bool _CONTROL_AWB_MODE_TWILIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_WARM_FLUORESCENT"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_WARM_FLUORESCENT { get { if (!_CONTROL_AWB_MODE_WARM_FLUORESCENTReady) { _CONTROL_AWB_MODE_WARM_FLUORESCENTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_WARM_FLUORESCENT"); _CONTROL_AWB_MODE_WARM_FLUORESCENTReady = true; } return _CONTROL_AWB_MODE_WARM_FLUORESCENTContent; } }
        private static int _CONTROL_AWB_MODE_WARM_FLUORESCENTContent = default;
        private static bool _CONTROL_AWB_MODE_WARM_FLUORESCENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_STATE_CONVERGED"/>
        /// </summary>
        public static int CONTROL_AWB_STATE_CONVERGED { get { if (!_CONTROL_AWB_STATE_CONVERGEDReady) { _CONTROL_AWB_STATE_CONVERGEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_STATE_CONVERGED"); _CONTROL_AWB_STATE_CONVERGEDReady = true; } return _CONTROL_AWB_STATE_CONVERGEDContent; } }
        private static int _CONTROL_AWB_STATE_CONVERGEDContent = default;
        private static bool _CONTROL_AWB_STATE_CONVERGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_STATE_INACTIVE"/>
        /// </summary>
        public static int CONTROL_AWB_STATE_INACTIVE { get { if (!_CONTROL_AWB_STATE_INACTIVEReady) { _CONTROL_AWB_STATE_INACTIVEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_STATE_INACTIVE"); _CONTROL_AWB_STATE_INACTIVEReady = true; } return _CONTROL_AWB_STATE_INACTIVEContent; } }
        private static int _CONTROL_AWB_STATE_INACTIVEContent = default;
        private static bool _CONTROL_AWB_STATE_INACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_STATE_LOCKED"/>
        /// </summary>
        public static int CONTROL_AWB_STATE_LOCKED { get { if (!_CONTROL_AWB_STATE_LOCKEDReady) { _CONTROL_AWB_STATE_LOCKEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_STATE_LOCKED"); _CONTROL_AWB_STATE_LOCKEDReady = true; } return _CONTROL_AWB_STATE_LOCKEDContent; } }
        private static int _CONTROL_AWB_STATE_LOCKEDContent = default;
        private static bool _CONTROL_AWB_STATE_LOCKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_STATE_SEARCHING"/>
        /// </summary>
        public static int CONTROL_AWB_STATE_SEARCHING { get { if (!_CONTROL_AWB_STATE_SEARCHINGReady) { _CONTROL_AWB_STATE_SEARCHINGContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_STATE_SEARCHING"); _CONTROL_AWB_STATE_SEARCHINGReady = true; } return _CONTROL_AWB_STATE_SEARCHINGContent; } }
        private static int _CONTROL_AWB_STATE_SEARCHINGContent = default;
        private static bool _CONTROL_AWB_STATE_SEARCHINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_CAPTURE_INTENT_CUSTOM"/>
        /// </summary>
        public static int CONTROL_CAPTURE_INTENT_CUSTOM { get { if (!_CONTROL_CAPTURE_INTENT_CUSTOMReady) { _CONTROL_CAPTURE_INTENT_CUSTOMContent = SGetField<int>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT_CUSTOM"); _CONTROL_CAPTURE_INTENT_CUSTOMReady = true; } return _CONTROL_CAPTURE_INTENT_CUSTOMContent; } }
        private static int _CONTROL_CAPTURE_INTENT_CUSTOMContent = default;
        private static bool _CONTROL_CAPTURE_INTENT_CUSTOMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_CAPTURE_INTENT_MANUAL"/>
        /// </summary>
        public static int CONTROL_CAPTURE_INTENT_MANUAL { get { if (!_CONTROL_CAPTURE_INTENT_MANUALReady) { _CONTROL_CAPTURE_INTENT_MANUALContent = SGetField<int>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT_MANUAL"); _CONTROL_CAPTURE_INTENT_MANUALReady = true; } return _CONTROL_CAPTURE_INTENT_MANUALContent; } }
        private static int _CONTROL_CAPTURE_INTENT_MANUALContent = default;
        private static bool _CONTROL_CAPTURE_INTENT_MANUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_CAPTURE_INTENT_MOTION_TRACKING"/>
        /// </summary>
        public static int CONTROL_CAPTURE_INTENT_MOTION_TRACKING { get { if (!_CONTROL_CAPTURE_INTENT_MOTION_TRACKINGReady) { _CONTROL_CAPTURE_INTENT_MOTION_TRACKINGContent = SGetField<int>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT_MOTION_TRACKING"); _CONTROL_CAPTURE_INTENT_MOTION_TRACKINGReady = true; } return _CONTROL_CAPTURE_INTENT_MOTION_TRACKINGContent; } }
        private static int _CONTROL_CAPTURE_INTENT_MOTION_TRACKINGContent = default;
        private static bool _CONTROL_CAPTURE_INTENT_MOTION_TRACKINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_CAPTURE_INTENT_PREVIEW"/>
        /// </summary>
        public static int CONTROL_CAPTURE_INTENT_PREVIEW { get { if (!_CONTROL_CAPTURE_INTENT_PREVIEWReady) { _CONTROL_CAPTURE_INTENT_PREVIEWContent = SGetField<int>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT_PREVIEW"); _CONTROL_CAPTURE_INTENT_PREVIEWReady = true; } return _CONTROL_CAPTURE_INTENT_PREVIEWContent; } }
        private static int _CONTROL_CAPTURE_INTENT_PREVIEWContent = default;
        private static bool _CONTROL_CAPTURE_INTENT_PREVIEWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_CAPTURE_INTENT_STILL_CAPTURE"/>
        /// </summary>
        public static int CONTROL_CAPTURE_INTENT_STILL_CAPTURE { get { if (!_CONTROL_CAPTURE_INTENT_STILL_CAPTUREReady) { _CONTROL_CAPTURE_INTENT_STILL_CAPTUREContent = SGetField<int>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT_STILL_CAPTURE"); _CONTROL_CAPTURE_INTENT_STILL_CAPTUREReady = true; } return _CONTROL_CAPTURE_INTENT_STILL_CAPTUREContent; } }
        private static int _CONTROL_CAPTURE_INTENT_STILL_CAPTUREContent = default;
        private static bool _CONTROL_CAPTURE_INTENT_STILL_CAPTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_CAPTURE_INTENT_VIDEO_RECORD"/>
        /// </summary>
        public static int CONTROL_CAPTURE_INTENT_VIDEO_RECORD { get { if (!_CONTROL_CAPTURE_INTENT_VIDEO_RECORDReady) { _CONTROL_CAPTURE_INTENT_VIDEO_RECORDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT_VIDEO_RECORD"); _CONTROL_CAPTURE_INTENT_VIDEO_RECORDReady = true; } return _CONTROL_CAPTURE_INTENT_VIDEO_RECORDContent; } }
        private static int _CONTROL_CAPTURE_INTENT_VIDEO_RECORDContent = default;
        private static bool _CONTROL_CAPTURE_INTENT_VIDEO_RECORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOT"/>
        /// </summary>
        public static int CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOT { get { if (!_CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOTReady) { _CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOT"); _CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOTReady = true; } return _CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOTContent; } }
        private static int _CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOTContent = default;
        private static bool _CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG"/>
        /// </summary>
        public static int CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG { get { if (!_CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAGReady) { _CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAGContent = SGetField<int>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG"); _CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAGReady = true; } return _CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAGContent; } }
        private static int _CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAGContent = default;
        private static bool _CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_AQUA"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_AQUA { get { if (!_CONTROL_EFFECT_MODE_AQUAReady) { _CONTROL_EFFECT_MODE_AQUAContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_AQUA"); _CONTROL_EFFECT_MODE_AQUAReady = true; } return _CONTROL_EFFECT_MODE_AQUAContent; } }
        private static int _CONTROL_EFFECT_MODE_AQUAContent = default;
        private static bool _CONTROL_EFFECT_MODE_AQUAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_BLACKBOARD"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_BLACKBOARD { get { if (!_CONTROL_EFFECT_MODE_BLACKBOARDReady) { _CONTROL_EFFECT_MODE_BLACKBOARDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_BLACKBOARD"); _CONTROL_EFFECT_MODE_BLACKBOARDReady = true; } return _CONTROL_EFFECT_MODE_BLACKBOARDContent; } }
        private static int _CONTROL_EFFECT_MODE_BLACKBOARDContent = default;
        private static bool _CONTROL_EFFECT_MODE_BLACKBOARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_MONO"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_MONO { get { if (!_CONTROL_EFFECT_MODE_MONOReady) { _CONTROL_EFFECT_MODE_MONOContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_MONO"); _CONTROL_EFFECT_MODE_MONOReady = true; } return _CONTROL_EFFECT_MODE_MONOContent; } }
        private static int _CONTROL_EFFECT_MODE_MONOContent = default;
        private static bool _CONTROL_EFFECT_MODE_MONOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_NEGATIVE"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_NEGATIVE { get { if (!_CONTROL_EFFECT_MODE_NEGATIVEReady) { _CONTROL_EFFECT_MODE_NEGATIVEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_NEGATIVE"); _CONTROL_EFFECT_MODE_NEGATIVEReady = true; } return _CONTROL_EFFECT_MODE_NEGATIVEContent; } }
        private static int _CONTROL_EFFECT_MODE_NEGATIVEContent = default;
        private static bool _CONTROL_EFFECT_MODE_NEGATIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_OFF"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_OFF { get { if (!_CONTROL_EFFECT_MODE_OFFReady) { _CONTROL_EFFECT_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_OFF"); _CONTROL_EFFECT_MODE_OFFReady = true; } return _CONTROL_EFFECT_MODE_OFFContent; } }
        private static int _CONTROL_EFFECT_MODE_OFFContent = default;
        private static bool _CONTROL_EFFECT_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_POSTERIZE"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_POSTERIZE { get { if (!_CONTROL_EFFECT_MODE_POSTERIZEReady) { _CONTROL_EFFECT_MODE_POSTERIZEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_POSTERIZE"); _CONTROL_EFFECT_MODE_POSTERIZEReady = true; } return _CONTROL_EFFECT_MODE_POSTERIZEContent; } }
        private static int _CONTROL_EFFECT_MODE_POSTERIZEContent = default;
        private static bool _CONTROL_EFFECT_MODE_POSTERIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_SEPIA"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_SEPIA { get { if (!_CONTROL_EFFECT_MODE_SEPIAReady) { _CONTROL_EFFECT_MODE_SEPIAContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_SEPIA"); _CONTROL_EFFECT_MODE_SEPIAReady = true; } return _CONTROL_EFFECT_MODE_SEPIAContent; } }
        private static int _CONTROL_EFFECT_MODE_SEPIAContent = default;
        private static bool _CONTROL_EFFECT_MODE_SEPIAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_SOLARIZE"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_SOLARIZE { get { if (!_CONTROL_EFFECT_MODE_SOLARIZEReady) { _CONTROL_EFFECT_MODE_SOLARIZEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_SOLARIZE"); _CONTROL_EFFECT_MODE_SOLARIZEReady = true; } return _CONTROL_EFFECT_MODE_SOLARIZEContent; } }
        private static int _CONTROL_EFFECT_MODE_SOLARIZEContent = default;
        private static bool _CONTROL_EFFECT_MODE_SOLARIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_WHITEBOARD"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_WHITEBOARD { get { if (!_CONTROL_EFFECT_MODE_WHITEBOARDReady) { _CONTROL_EFFECT_MODE_WHITEBOARDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_WHITEBOARD"); _CONTROL_EFFECT_MODE_WHITEBOARDReady = true; } return _CONTROL_EFFECT_MODE_WHITEBOARDContent; } }
        private static int _CONTROL_EFFECT_MODE_WHITEBOARDContent = default;
        private static bool _CONTROL_EFFECT_MODE_WHITEBOARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUS"/>
        /// </summary>
        public static int CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUS { get { if (!_CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUSReady) { _CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUSContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUS"); _CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUSReady = true; } return _CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUSContent; } }
        private static int _CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUSContent = default;
        private static bool _CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTURE"/>
        /// </summary>
        public static int CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTURE { get { if (!_CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTUREReady) { _CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTUREContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTURE"); _CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTUREReady = true; } return _CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTUREContent; } }
        private static int _CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTUREContent = default;
        private static bool _CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EXTENDED_SCENE_MODE_DISABLED"/>
        /// </summary>
        public static int CONTROL_EXTENDED_SCENE_MODE_DISABLED { get { if (!_CONTROL_EXTENDED_SCENE_MODE_DISABLEDReady) { _CONTROL_EXTENDED_SCENE_MODE_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EXTENDED_SCENE_MODE_DISABLED"); _CONTROL_EXTENDED_SCENE_MODE_DISABLEDReady = true; } return _CONTROL_EXTENDED_SCENE_MODE_DISABLEDContent; } }
        private static int _CONTROL_EXTENDED_SCENE_MODE_DISABLEDContent = default;
        private static bool _CONTROL_EXTENDED_SCENE_MODE_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVE"/>
        /// </summary>
        public static int CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVE { get { if (!_CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVEReady) { _CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVE"); _CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVEReady = true; } return _CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVEContent; } }
        private static int _CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVEContent = default;
        private static bool _CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVE"/>
        /// </summary>
        public static int CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVE { get { if (!_CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVEReady) { _CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVE"); _CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVEReady = true; } return _CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVEContent; } }
        private static int _CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVEContent = default;
        private static bool _CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_MODE_AUTO"/>
        /// </summary>
        public static int CONTROL_MODE_AUTO { get { if (!_CONTROL_MODE_AUTOReady) { _CONTROL_MODE_AUTOContent = SGetField<int>(LocalBridgeClazz, "CONTROL_MODE_AUTO"); _CONTROL_MODE_AUTOReady = true; } return _CONTROL_MODE_AUTOContent; } }
        private static int _CONTROL_MODE_AUTOContent = default;
        private static bool _CONTROL_MODE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_MODE_OFF"/>
        /// </summary>
        public static int CONTROL_MODE_OFF { get { if (!_CONTROL_MODE_OFFReady) { _CONTROL_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_MODE_OFF"); _CONTROL_MODE_OFFReady = true; } return _CONTROL_MODE_OFFContent; } }
        private static int _CONTROL_MODE_OFFContent = default;
        private static bool _CONTROL_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_MODE_OFF_KEEP_STATE"/>
        /// </summary>
        public static int CONTROL_MODE_OFF_KEEP_STATE { get { if (!_CONTROL_MODE_OFF_KEEP_STATEReady) { _CONTROL_MODE_OFF_KEEP_STATEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_MODE_OFF_KEEP_STATE"); _CONTROL_MODE_OFF_KEEP_STATEReady = true; } return _CONTROL_MODE_OFF_KEEP_STATEContent; } }
        private static int _CONTROL_MODE_OFF_KEEP_STATEContent = default;
        private static bool _CONTROL_MODE_OFF_KEEP_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_MODE_USE_EXTENDED_SCENE_MODE"/>
        /// </summary>
        public static int CONTROL_MODE_USE_EXTENDED_SCENE_MODE { get { if (!_CONTROL_MODE_USE_EXTENDED_SCENE_MODEReady) { _CONTROL_MODE_USE_EXTENDED_SCENE_MODEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_MODE_USE_EXTENDED_SCENE_MODE"); _CONTROL_MODE_USE_EXTENDED_SCENE_MODEReady = true; } return _CONTROL_MODE_USE_EXTENDED_SCENE_MODEContent; } }
        private static int _CONTROL_MODE_USE_EXTENDED_SCENE_MODEContent = default;
        private static bool _CONTROL_MODE_USE_EXTENDED_SCENE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_MODE_USE_SCENE_MODE"/>
        /// </summary>
        public static int CONTROL_MODE_USE_SCENE_MODE { get { if (!_CONTROL_MODE_USE_SCENE_MODEReady) { _CONTROL_MODE_USE_SCENE_MODEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_MODE_USE_SCENE_MODE"); _CONTROL_MODE_USE_SCENE_MODEReady = true; } return _CONTROL_MODE_USE_SCENE_MODEContent; } }
        private static int _CONTROL_MODE_USE_SCENE_MODEContent = default;
        private static bool _CONTROL_MODE_USE_SCENE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_ACTION"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_ACTION { get { if (!_CONTROL_SCENE_MODE_ACTIONReady) { _CONTROL_SCENE_MODE_ACTIONContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_ACTION"); _CONTROL_SCENE_MODE_ACTIONReady = true; } return _CONTROL_SCENE_MODE_ACTIONContent; } }
        private static int _CONTROL_SCENE_MODE_ACTIONContent = default;
        private static bool _CONTROL_SCENE_MODE_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_BARCODE"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_BARCODE { get { if (!_CONTROL_SCENE_MODE_BARCODEReady) { _CONTROL_SCENE_MODE_BARCODEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_BARCODE"); _CONTROL_SCENE_MODE_BARCODEReady = true; } return _CONTROL_SCENE_MODE_BARCODEContent; } }
        private static int _CONTROL_SCENE_MODE_BARCODEContent = default;
        private static bool _CONTROL_SCENE_MODE_BARCODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_BEACH"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_BEACH { get { if (!_CONTROL_SCENE_MODE_BEACHReady) { _CONTROL_SCENE_MODE_BEACHContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_BEACH"); _CONTROL_SCENE_MODE_BEACHReady = true; } return _CONTROL_SCENE_MODE_BEACHContent; } }
        private static int _CONTROL_SCENE_MODE_BEACHContent = default;
        private static bool _CONTROL_SCENE_MODE_BEACHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_CANDLELIGHT"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_CANDLELIGHT { get { if (!_CONTROL_SCENE_MODE_CANDLELIGHTReady) { _CONTROL_SCENE_MODE_CANDLELIGHTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_CANDLELIGHT"); _CONTROL_SCENE_MODE_CANDLELIGHTReady = true; } return _CONTROL_SCENE_MODE_CANDLELIGHTContent; } }
        private static int _CONTROL_SCENE_MODE_CANDLELIGHTContent = default;
        private static bool _CONTROL_SCENE_MODE_CANDLELIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_DISABLED"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_DISABLED { get { if (!_CONTROL_SCENE_MODE_DISABLEDReady) { _CONTROL_SCENE_MODE_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_DISABLED"); _CONTROL_SCENE_MODE_DISABLEDReady = true; } return _CONTROL_SCENE_MODE_DISABLEDContent; } }
        private static int _CONTROL_SCENE_MODE_DISABLEDContent = default;
        private static bool _CONTROL_SCENE_MODE_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_FACE_PRIORITY"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_FACE_PRIORITY { get { if (!_CONTROL_SCENE_MODE_FACE_PRIORITYReady) { _CONTROL_SCENE_MODE_FACE_PRIORITYContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_FACE_PRIORITY"); _CONTROL_SCENE_MODE_FACE_PRIORITYReady = true; } return _CONTROL_SCENE_MODE_FACE_PRIORITYContent; } }
        private static int _CONTROL_SCENE_MODE_FACE_PRIORITYContent = default;
        private static bool _CONTROL_SCENE_MODE_FACE_PRIORITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_FIREWORKS"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_FIREWORKS { get { if (!_CONTROL_SCENE_MODE_FIREWORKSReady) { _CONTROL_SCENE_MODE_FIREWORKSContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_FIREWORKS"); _CONTROL_SCENE_MODE_FIREWORKSReady = true; } return _CONTROL_SCENE_MODE_FIREWORKSContent; } }
        private static int _CONTROL_SCENE_MODE_FIREWORKSContent = default;
        private static bool _CONTROL_SCENE_MODE_FIREWORKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_HDR"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_HDR { get { if (!_CONTROL_SCENE_MODE_HDRReady) { _CONTROL_SCENE_MODE_HDRContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_HDR"); _CONTROL_SCENE_MODE_HDRReady = true; } return _CONTROL_SCENE_MODE_HDRContent; } }
        private static int _CONTROL_SCENE_MODE_HDRContent = default;
        private static bool _CONTROL_SCENE_MODE_HDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_HIGH_SPEED_VIDEO"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int CONTROL_SCENE_MODE_HIGH_SPEED_VIDEO { get { if (!_CONTROL_SCENE_MODE_HIGH_SPEED_VIDEOReady) { _CONTROL_SCENE_MODE_HIGH_SPEED_VIDEOContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_HIGH_SPEED_VIDEO"); _CONTROL_SCENE_MODE_HIGH_SPEED_VIDEOReady = true; } return _CONTROL_SCENE_MODE_HIGH_SPEED_VIDEOContent; } }
        private static int _CONTROL_SCENE_MODE_HIGH_SPEED_VIDEOContent = default;
        private static bool _CONTROL_SCENE_MODE_HIGH_SPEED_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_LANDSCAPE"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_LANDSCAPE { get { if (!_CONTROL_SCENE_MODE_LANDSCAPEReady) { _CONTROL_SCENE_MODE_LANDSCAPEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_LANDSCAPE"); _CONTROL_SCENE_MODE_LANDSCAPEReady = true; } return _CONTROL_SCENE_MODE_LANDSCAPEContent; } }
        private static int _CONTROL_SCENE_MODE_LANDSCAPEContent = default;
        private static bool _CONTROL_SCENE_MODE_LANDSCAPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_NIGHT"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_NIGHT { get { if (!_CONTROL_SCENE_MODE_NIGHTReady) { _CONTROL_SCENE_MODE_NIGHTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_NIGHT"); _CONTROL_SCENE_MODE_NIGHTReady = true; } return _CONTROL_SCENE_MODE_NIGHTContent; } }
        private static int _CONTROL_SCENE_MODE_NIGHTContent = default;
        private static bool _CONTROL_SCENE_MODE_NIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_NIGHT_PORTRAIT"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_NIGHT_PORTRAIT { get { if (!_CONTROL_SCENE_MODE_NIGHT_PORTRAITReady) { _CONTROL_SCENE_MODE_NIGHT_PORTRAITContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_NIGHT_PORTRAIT"); _CONTROL_SCENE_MODE_NIGHT_PORTRAITReady = true; } return _CONTROL_SCENE_MODE_NIGHT_PORTRAITContent; } }
        private static int _CONTROL_SCENE_MODE_NIGHT_PORTRAITContent = default;
        private static bool _CONTROL_SCENE_MODE_NIGHT_PORTRAITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_PARTY"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_PARTY { get { if (!_CONTROL_SCENE_MODE_PARTYReady) { _CONTROL_SCENE_MODE_PARTYContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_PARTY"); _CONTROL_SCENE_MODE_PARTYReady = true; } return _CONTROL_SCENE_MODE_PARTYContent; } }
        private static int _CONTROL_SCENE_MODE_PARTYContent = default;
        private static bool _CONTROL_SCENE_MODE_PARTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_PORTRAIT"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_PORTRAIT { get { if (!_CONTROL_SCENE_MODE_PORTRAITReady) { _CONTROL_SCENE_MODE_PORTRAITContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_PORTRAIT"); _CONTROL_SCENE_MODE_PORTRAITReady = true; } return _CONTROL_SCENE_MODE_PORTRAITContent; } }
        private static int _CONTROL_SCENE_MODE_PORTRAITContent = default;
        private static bool _CONTROL_SCENE_MODE_PORTRAITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_SNOW"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_SNOW { get { if (!_CONTROL_SCENE_MODE_SNOWReady) { _CONTROL_SCENE_MODE_SNOWContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_SNOW"); _CONTROL_SCENE_MODE_SNOWReady = true; } return _CONTROL_SCENE_MODE_SNOWContent; } }
        private static int _CONTROL_SCENE_MODE_SNOWContent = default;
        private static bool _CONTROL_SCENE_MODE_SNOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_SPORTS"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_SPORTS { get { if (!_CONTROL_SCENE_MODE_SPORTSReady) { _CONTROL_SCENE_MODE_SPORTSContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_SPORTS"); _CONTROL_SCENE_MODE_SPORTSReady = true; } return _CONTROL_SCENE_MODE_SPORTSContent; } }
        private static int _CONTROL_SCENE_MODE_SPORTSContent = default;
        private static bool _CONTROL_SCENE_MODE_SPORTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_STEADYPHOTO"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_STEADYPHOTO { get { if (!_CONTROL_SCENE_MODE_STEADYPHOTOReady) { _CONTROL_SCENE_MODE_STEADYPHOTOContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_STEADYPHOTO"); _CONTROL_SCENE_MODE_STEADYPHOTOReady = true; } return _CONTROL_SCENE_MODE_STEADYPHOTOContent; } }
        private static int _CONTROL_SCENE_MODE_STEADYPHOTOContent = default;
        private static bool _CONTROL_SCENE_MODE_STEADYPHOTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_SUNSET"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_SUNSET { get { if (!_CONTROL_SCENE_MODE_SUNSETReady) { _CONTROL_SCENE_MODE_SUNSETContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_SUNSET"); _CONTROL_SCENE_MODE_SUNSETReady = true; } return _CONTROL_SCENE_MODE_SUNSETContent; } }
        private static int _CONTROL_SCENE_MODE_SUNSETContent = default;
        private static bool _CONTROL_SCENE_MODE_SUNSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_THEATRE"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_THEATRE { get { if (!_CONTROL_SCENE_MODE_THEATREReady) { _CONTROL_SCENE_MODE_THEATREContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_THEATRE"); _CONTROL_SCENE_MODE_THEATREReady = true; } return _CONTROL_SCENE_MODE_THEATREContent; } }
        private static int _CONTROL_SCENE_MODE_THEATREContent = default;
        private static bool _CONTROL_SCENE_MODE_THEATREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SETTINGS_OVERRIDE_OFF"/>
        /// </summary>
        public static int CONTROL_SETTINGS_OVERRIDE_OFF { get { if (!_CONTROL_SETTINGS_OVERRIDE_OFFReady) { _CONTROL_SETTINGS_OVERRIDE_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SETTINGS_OVERRIDE_OFF"); _CONTROL_SETTINGS_OVERRIDE_OFFReady = true; } return _CONTROL_SETTINGS_OVERRIDE_OFFContent; } }
        private static int _CONTROL_SETTINGS_OVERRIDE_OFFContent = default;
        private static bool _CONTROL_SETTINGS_OVERRIDE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SETTINGS_OVERRIDE_ZOOM"/>
        /// </summary>
        public static int CONTROL_SETTINGS_OVERRIDE_ZOOM { get { if (!_CONTROL_SETTINGS_OVERRIDE_ZOOMReady) { _CONTROL_SETTINGS_OVERRIDE_ZOOMContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SETTINGS_OVERRIDE_ZOOM"); _CONTROL_SETTINGS_OVERRIDE_ZOOMReady = true; } return _CONTROL_SETTINGS_OVERRIDE_ZOOMContent; } }
        private static int _CONTROL_SETTINGS_OVERRIDE_ZOOMContent = default;
        private static bool _CONTROL_SETTINGS_OVERRIDE_ZOOMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_VIDEO_STABILIZATION_MODE_OFF"/>
        /// </summary>
        public static int CONTROL_VIDEO_STABILIZATION_MODE_OFF { get { if (!_CONTROL_VIDEO_STABILIZATION_MODE_OFFReady) { _CONTROL_VIDEO_STABILIZATION_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_VIDEO_STABILIZATION_MODE_OFF"); _CONTROL_VIDEO_STABILIZATION_MODE_OFFReady = true; } return _CONTROL_VIDEO_STABILIZATION_MODE_OFFContent; } }
        private static int _CONTROL_VIDEO_STABILIZATION_MODE_OFFContent = default;
        private static bool _CONTROL_VIDEO_STABILIZATION_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_VIDEO_STABILIZATION_MODE_ON"/>
        /// </summary>
        public static int CONTROL_VIDEO_STABILIZATION_MODE_ON { get { if (!_CONTROL_VIDEO_STABILIZATION_MODE_ONReady) { _CONTROL_VIDEO_STABILIZATION_MODE_ONContent = SGetField<int>(LocalBridgeClazz, "CONTROL_VIDEO_STABILIZATION_MODE_ON"); _CONTROL_VIDEO_STABILIZATION_MODE_ONReady = true; } return _CONTROL_VIDEO_STABILIZATION_MODE_ONContent; } }
        private static int _CONTROL_VIDEO_STABILIZATION_MODE_ONContent = default;
        private static bool _CONTROL_VIDEO_STABILIZATION_MODE_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATION"/>
        /// </summary>
        public static int CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATION { get { if (!_CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATIONReady) { _CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATIONContent = SGetField<int>(LocalBridgeClazz, "CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATION"); _CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATIONReady = true; } return _CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATIONContent; } }
        private static int _CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATIONContent = default;
        private static bool _CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#DISTORTION_CORRECTION_MODE_FAST"/>
        /// </summary>
        public static int DISTORTION_CORRECTION_MODE_FAST { get { if (!_DISTORTION_CORRECTION_MODE_FASTReady) { _DISTORTION_CORRECTION_MODE_FASTContent = SGetField<int>(LocalBridgeClazz, "DISTORTION_CORRECTION_MODE_FAST"); _DISTORTION_CORRECTION_MODE_FASTReady = true; } return _DISTORTION_CORRECTION_MODE_FASTContent; } }
        private static int _DISTORTION_CORRECTION_MODE_FASTContent = default;
        private static bool _DISTORTION_CORRECTION_MODE_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#DISTORTION_CORRECTION_MODE_HIGH_QUALITY"/>
        /// </summary>
        public static int DISTORTION_CORRECTION_MODE_HIGH_QUALITY { get { if (!_DISTORTION_CORRECTION_MODE_HIGH_QUALITYReady) { _DISTORTION_CORRECTION_MODE_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "DISTORTION_CORRECTION_MODE_HIGH_QUALITY"); _DISTORTION_CORRECTION_MODE_HIGH_QUALITYReady = true; } return _DISTORTION_CORRECTION_MODE_HIGH_QUALITYContent; } }
        private static int _DISTORTION_CORRECTION_MODE_HIGH_QUALITYContent = default;
        private static bool _DISTORTION_CORRECTION_MODE_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#DISTORTION_CORRECTION_MODE_OFF"/>
        /// </summary>
        public static int DISTORTION_CORRECTION_MODE_OFF { get { if (!_DISTORTION_CORRECTION_MODE_OFFReady) { _DISTORTION_CORRECTION_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "DISTORTION_CORRECTION_MODE_OFF"); _DISTORTION_CORRECTION_MODE_OFFReady = true; } return _DISTORTION_CORRECTION_MODE_OFFContent; } }
        private static int _DISTORTION_CORRECTION_MODE_OFFContent = default;
        private static bool _DISTORTION_CORRECTION_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#EDGE_MODE_FAST"/>
        /// </summary>
        public static int EDGE_MODE_FAST { get { if (!_EDGE_MODE_FASTReady) { _EDGE_MODE_FASTContent = SGetField<int>(LocalBridgeClazz, "EDGE_MODE_FAST"); _EDGE_MODE_FASTReady = true; } return _EDGE_MODE_FASTContent; } }
        private static int _EDGE_MODE_FASTContent = default;
        private static bool _EDGE_MODE_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#EDGE_MODE_HIGH_QUALITY"/>
        /// </summary>
        public static int EDGE_MODE_HIGH_QUALITY { get { if (!_EDGE_MODE_HIGH_QUALITYReady) { _EDGE_MODE_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "EDGE_MODE_HIGH_QUALITY"); _EDGE_MODE_HIGH_QUALITYReady = true; } return _EDGE_MODE_HIGH_QUALITYContent; } }
        private static int _EDGE_MODE_HIGH_QUALITYContent = default;
        private static bool _EDGE_MODE_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#EDGE_MODE_OFF"/>
        /// </summary>
        public static int EDGE_MODE_OFF { get { if (!_EDGE_MODE_OFFReady) { _EDGE_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "EDGE_MODE_OFF"); _EDGE_MODE_OFFReady = true; } return _EDGE_MODE_OFFContent; } }
        private static int _EDGE_MODE_OFFContent = default;
        private static bool _EDGE_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#EDGE_MODE_ZERO_SHUTTER_LAG"/>
        /// </summary>
        public static int EDGE_MODE_ZERO_SHUTTER_LAG { get { if (!_EDGE_MODE_ZERO_SHUTTER_LAGReady) { _EDGE_MODE_ZERO_SHUTTER_LAGContent = SGetField<int>(LocalBridgeClazz, "EDGE_MODE_ZERO_SHUTTER_LAG"); _EDGE_MODE_ZERO_SHUTTER_LAGReady = true; } return _EDGE_MODE_ZERO_SHUTTER_LAGContent; } }
        private static int _EDGE_MODE_ZERO_SHUTTER_LAGContent = default;
        private static bool _EDGE_MODE_ZERO_SHUTTER_LAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#FLASH_MODE_OFF"/>
        /// </summary>
        public static int FLASH_MODE_OFF { get { if (!_FLASH_MODE_OFFReady) { _FLASH_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "FLASH_MODE_OFF"); _FLASH_MODE_OFFReady = true; } return _FLASH_MODE_OFFContent; } }
        private static int _FLASH_MODE_OFFContent = default;
        private static bool _FLASH_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#FLASH_MODE_SINGLE"/>
        /// </summary>
        public static int FLASH_MODE_SINGLE { get { if (!_FLASH_MODE_SINGLEReady) { _FLASH_MODE_SINGLEContent = SGetField<int>(LocalBridgeClazz, "FLASH_MODE_SINGLE"); _FLASH_MODE_SINGLEReady = true; } return _FLASH_MODE_SINGLEContent; } }
        private static int _FLASH_MODE_SINGLEContent = default;
        private static bool _FLASH_MODE_SINGLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#FLASH_MODE_TORCH"/>
        /// </summary>
        public static int FLASH_MODE_TORCH { get { if (!_FLASH_MODE_TORCHReady) { _FLASH_MODE_TORCHContent = SGetField<int>(LocalBridgeClazz, "FLASH_MODE_TORCH"); _FLASH_MODE_TORCHReady = true; } return _FLASH_MODE_TORCHContent; } }
        private static int _FLASH_MODE_TORCHContent = default;
        private static bool _FLASH_MODE_TORCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#FLASH_STATE_CHARGING"/>
        /// </summary>
        public static int FLASH_STATE_CHARGING { get { if (!_FLASH_STATE_CHARGINGReady) { _FLASH_STATE_CHARGINGContent = SGetField<int>(LocalBridgeClazz, "FLASH_STATE_CHARGING"); _FLASH_STATE_CHARGINGReady = true; } return _FLASH_STATE_CHARGINGContent; } }
        private static int _FLASH_STATE_CHARGINGContent = default;
        private static bool _FLASH_STATE_CHARGINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#FLASH_STATE_FIRED"/>
        /// </summary>
        public static int FLASH_STATE_FIRED { get { if (!_FLASH_STATE_FIREDReady) { _FLASH_STATE_FIREDContent = SGetField<int>(LocalBridgeClazz, "FLASH_STATE_FIRED"); _FLASH_STATE_FIREDReady = true; } return _FLASH_STATE_FIREDContent; } }
        private static int _FLASH_STATE_FIREDContent = default;
        private static bool _FLASH_STATE_FIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#FLASH_STATE_PARTIAL"/>
        /// </summary>
        public static int FLASH_STATE_PARTIAL { get { if (!_FLASH_STATE_PARTIALReady) { _FLASH_STATE_PARTIALContent = SGetField<int>(LocalBridgeClazz, "FLASH_STATE_PARTIAL"); _FLASH_STATE_PARTIALReady = true; } return _FLASH_STATE_PARTIALContent; } }
        private static int _FLASH_STATE_PARTIALContent = default;
        private static bool _FLASH_STATE_PARTIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#FLASH_STATE_READY"/>
        /// </summary>
        public static int FLASH_STATE_READY { get { if (!_FLASH_STATE_READYReady) { _FLASH_STATE_READYContent = SGetField<int>(LocalBridgeClazz, "FLASH_STATE_READY"); _FLASH_STATE_READYReady = true; } return _FLASH_STATE_READYContent; } }
        private static int _FLASH_STATE_READYContent = default;
        private static bool _FLASH_STATE_READYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#FLASH_STATE_UNAVAILABLE"/>
        /// </summary>
        public static int FLASH_STATE_UNAVAILABLE { get { if (!_FLASH_STATE_UNAVAILABLEReady) { _FLASH_STATE_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "FLASH_STATE_UNAVAILABLE"); _FLASH_STATE_UNAVAILABLEReady = true; } return _FLASH_STATE_UNAVAILABLEContent; } }
        private static int _FLASH_STATE_UNAVAILABLEContent = default;
        private static bool _FLASH_STATE_UNAVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#HOT_PIXEL_MODE_FAST"/>
        /// </summary>
        public static int HOT_PIXEL_MODE_FAST { get { if (!_HOT_PIXEL_MODE_FASTReady) { _HOT_PIXEL_MODE_FASTContent = SGetField<int>(LocalBridgeClazz, "HOT_PIXEL_MODE_FAST"); _HOT_PIXEL_MODE_FASTReady = true; } return _HOT_PIXEL_MODE_FASTContent; } }
        private static int _HOT_PIXEL_MODE_FASTContent = default;
        private static bool _HOT_PIXEL_MODE_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#HOT_PIXEL_MODE_HIGH_QUALITY"/>
        /// </summary>
        public static int HOT_PIXEL_MODE_HIGH_QUALITY { get { if (!_HOT_PIXEL_MODE_HIGH_QUALITYReady) { _HOT_PIXEL_MODE_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "HOT_PIXEL_MODE_HIGH_QUALITY"); _HOT_PIXEL_MODE_HIGH_QUALITYReady = true; } return _HOT_PIXEL_MODE_HIGH_QUALITYContent; } }
        private static int _HOT_PIXEL_MODE_HIGH_QUALITYContent = default;
        private static bool _HOT_PIXEL_MODE_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#HOT_PIXEL_MODE_OFF"/>
        /// </summary>
        public static int HOT_PIXEL_MODE_OFF { get { if (!_HOT_PIXEL_MODE_OFFReady) { _HOT_PIXEL_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "HOT_PIXEL_MODE_OFF"); _HOT_PIXEL_MODE_OFFReady = true; } return _HOT_PIXEL_MODE_OFFContent; } }
        private static int _HOT_PIXEL_MODE_OFFContent = default;
        private static bool _HOT_PIXEL_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#INFO_SUPPORTED_HARDWARE_LEVEL_3"/>
        /// </summary>
        public static int INFO_SUPPORTED_HARDWARE_LEVEL_3 { get { if (!_INFO_SUPPORTED_HARDWARE_LEVEL_3Ready) { _INFO_SUPPORTED_HARDWARE_LEVEL_3Content = SGetField<int>(LocalBridgeClazz, "INFO_SUPPORTED_HARDWARE_LEVEL_3"); _INFO_SUPPORTED_HARDWARE_LEVEL_3Ready = true; } return _INFO_SUPPORTED_HARDWARE_LEVEL_3Content; } }
        private static int _INFO_SUPPORTED_HARDWARE_LEVEL_3Content = default;
        private static bool _INFO_SUPPORTED_HARDWARE_LEVEL_3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNAL"/>
        /// </summary>
        public static int INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNAL { get { if (!_INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNALReady) { _INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNALContent = SGetField<int>(LocalBridgeClazz, "INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNAL"); _INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNALReady = true; } return _INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNALContent; } }
        private static int _INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNALContent = default;
        private static bool _INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#INFO_SUPPORTED_HARDWARE_LEVEL_FULL"/>
        /// </summary>
        public static int INFO_SUPPORTED_HARDWARE_LEVEL_FULL { get { if (!_INFO_SUPPORTED_HARDWARE_LEVEL_FULLReady) { _INFO_SUPPORTED_HARDWARE_LEVEL_FULLContent = SGetField<int>(LocalBridgeClazz, "INFO_SUPPORTED_HARDWARE_LEVEL_FULL"); _INFO_SUPPORTED_HARDWARE_LEVEL_FULLReady = true; } return _INFO_SUPPORTED_HARDWARE_LEVEL_FULLContent; } }
        private static int _INFO_SUPPORTED_HARDWARE_LEVEL_FULLContent = default;
        private static bool _INFO_SUPPORTED_HARDWARE_LEVEL_FULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY"/>
        /// </summary>
        public static int INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY { get { if (!_INFO_SUPPORTED_HARDWARE_LEVEL_LEGACYReady) { _INFO_SUPPORTED_HARDWARE_LEVEL_LEGACYContent = SGetField<int>(LocalBridgeClazz, "INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY"); _INFO_SUPPORTED_HARDWARE_LEVEL_LEGACYReady = true; } return _INFO_SUPPORTED_HARDWARE_LEVEL_LEGACYContent; } }
        private static int _INFO_SUPPORTED_HARDWARE_LEVEL_LEGACYContent = default;
        private static bool _INFO_SUPPORTED_HARDWARE_LEVEL_LEGACYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED"/>
        /// </summary>
        public static int INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED { get { if (!_INFO_SUPPORTED_HARDWARE_LEVEL_LIMITEDReady) { _INFO_SUPPORTED_HARDWARE_LEVEL_LIMITEDContent = SGetField<int>(LocalBridgeClazz, "INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED"); _INFO_SUPPORTED_HARDWARE_LEVEL_LIMITEDReady = true; } return _INFO_SUPPORTED_HARDWARE_LEVEL_LIMITEDContent; } }
        private static int _INFO_SUPPORTED_HARDWARE_LEVEL_LIMITEDContent = default;
        private static bool _INFO_SUPPORTED_HARDWARE_LEVEL_LIMITEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_FACING_BACK"/>
        /// </summary>
        public static int LENS_FACING_BACK { get { if (!_LENS_FACING_BACKReady) { _LENS_FACING_BACKContent = SGetField<int>(LocalBridgeClazz, "LENS_FACING_BACK"); _LENS_FACING_BACKReady = true; } return _LENS_FACING_BACKContent; } }
        private static int _LENS_FACING_BACKContent = default;
        private static bool _LENS_FACING_BACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_FACING_EXTERNAL"/>
        /// </summary>
        public static int LENS_FACING_EXTERNAL { get { if (!_LENS_FACING_EXTERNALReady) { _LENS_FACING_EXTERNALContent = SGetField<int>(LocalBridgeClazz, "LENS_FACING_EXTERNAL"); _LENS_FACING_EXTERNALReady = true; } return _LENS_FACING_EXTERNALContent; } }
        private static int _LENS_FACING_EXTERNALContent = default;
        private static bool _LENS_FACING_EXTERNALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_FACING_FRONT"/>
        /// </summary>
        public static int LENS_FACING_FRONT { get { if (!_LENS_FACING_FRONTReady) { _LENS_FACING_FRONTContent = SGetField<int>(LocalBridgeClazz, "LENS_FACING_FRONT"); _LENS_FACING_FRONTReady = true; } return _LENS_FACING_FRONTContent; } }
        private static int _LENS_FACING_FRONTContent = default;
        private static bool _LENS_FACING_FRONTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATE"/>
        /// </summary>
        public static int LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATE { get { if (!_LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATEReady) { _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATEContent = SGetField<int>(LocalBridgeClazz, "LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATE"); _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATEReady = true; } return _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATEContent; } }
        private static int _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATEContent = default;
        private static bool _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATED"/>
        /// </summary>
        public static int LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATED { get { if (!_LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATEDReady) { _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATEDContent = SGetField<int>(LocalBridgeClazz, "LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATED"); _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATEDReady = true; } return _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATEDContent; } }
        private static int _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATEDContent = default;
        private static bool _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATED"/>
        /// </summary>
        public static int LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATED { get { if (!_LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATEDReady) { _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATEDContent = SGetField<int>(LocalBridgeClazz, "LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATED"); _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATEDReady = true; } return _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATEDContent; } }
        private static int _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATEDContent = default;
        private static bool _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_OPTICAL_STABILIZATION_MODE_OFF"/>
        /// </summary>
        public static int LENS_OPTICAL_STABILIZATION_MODE_OFF { get { if (!_LENS_OPTICAL_STABILIZATION_MODE_OFFReady) { _LENS_OPTICAL_STABILIZATION_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "LENS_OPTICAL_STABILIZATION_MODE_OFF"); _LENS_OPTICAL_STABILIZATION_MODE_OFFReady = true; } return _LENS_OPTICAL_STABILIZATION_MODE_OFFContent; } }
        private static int _LENS_OPTICAL_STABILIZATION_MODE_OFFContent = default;
        private static bool _LENS_OPTICAL_STABILIZATION_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_OPTICAL_STABILIZATION_MODE_ON"/>
        /// </summary>
        public static int LENS_OPTICAL_STABILIZATION_MODE_ON { get { if (!_LENS_OPTICAL_STABILIZATION_MODE_ONReady) { _LENS_OPTICAL_STABILIZATION_MODE_ONContent = SGetField<int>(LocalBridgeClazz, "LENS_OPTICAL_STABILIZATION_MODE_ON"); _LENS_OPTICAL_STABILIZATION_MODE_ONReady = true; } return _LENS_OPTICAL_STABILIZATION_MODE_ONContent; } }
        private static int _LENS_OPTICAL_STABILIZATION_MODE_ONContent = default;
        private static bool _LENS_OPTICAL_STABILIZATION_MODE_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_POSE_REFERENCE_AUTOMOTIVE"/>
        /// </summary>
        public static int LENS_POSE_REFERENCE_AUTOMOTIVE { get { if (!_LENS_POSE_REFERENCE_AUTOMOTIVEReady) { _LENS_POSE_REFERENCE_AUTOMOTIVEContent = SGetField<int>(LocalBridgeClazz, "LENS_POSE_REFERENCE_AUTOMOTIVE"); _LENS_POSE_REFERENCE_AUTOMOTIVEReady = true; } return _LENS_POSE_REFERENCE_AUTOMOTIVEContent; } }
        private static int _LENS_POSE_REFERENCE_AUTOMOTIVEContent = default;
        private static bool _LENS_POSE_REFERENCE_AUTOMOTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_POSE_REFERENCE_GYROSCOPE"/>
        /// </summary>
        public static int LENS_POSE_REFERENCE_GYROSCOPE { get { if (!_LENS_POSE_REFERENCE_GYROSCOPEReady) { _LENS_POSE_REFERENCE_GYROSCOPEContent = SGetField<int>(LocalBridgeClazz, "LENS_POSE_REFERENCE_GYROSCOPE"); _LENS_POSE_REFERENCE_GYROSCOPEReady = true; } return _LENS_POSE_REFERENCE_GYROSCOPEContent; } }
        private static int _LENS_POSE_REFERENCE_GYROSCOPEContent = default;
        private static bool _LENS_POSE_REFERENCE_GYROSCOPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_POSE_REFERENCE_PRIMARY_CAMERA"/>
        /// </summary>
        public static int LENS_POSE_REFERENCE_PRIMARY_CAMERA { get { if (!_LENS_POSE_REFERENCE_PRIMARY_CAMERAReady) { _LENS_POSE_REFERENCE_PRIMARY_CAMERAContent = SGetField<int>(LocalBridgeClazz, "LENS_POSE_REFERENCE_PRIMARY_CAMERA"); _LENS_POSE_REFERENCE_PRIMARY_CAMERAReady = true; } return _LENS_POSE_REFERENCE_PRIMARY_CAMERAContent; } }
        private static int _LENS_POSE_REFERENCE_PRIMARY_CAMERAContent = default;
        private static bool _LENS_POSE_REFERENCE_PRIMARY_CAMERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_POSE_REFERENCE_UNDEFINED"/>
        /// </summary>
        public static int LENS_POSE_REFERENCE_UNDEFINED { get { if (!_LENS_POSE_REFERENCE_UNDEFINEDReady) { _LENS_POSE_REFERENCE_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "LENS_POSE_REFERENCE_UNDEFINED"); _LENS_POSE_REFERENCE_UNDEFINEDReady = true; } return _LENS_POSE_REFERENCE_UNDEFINEDContent; } }
        private static int _LENS_POSE_REFERENCE_UNDEFINEDContent = default;
        private static bool _LENS_POSE_REFERENCE_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_STATE_MOVING"/>
        /// </summary>
        public static int LENS_STATE_MOVING { get { if (!_LENS_STATE_MOVINGReady) { _LENS_STATE_MOVINGContent = SGetField<int>(LocalBridgeClazz, "LENS_STATE_MOVING"); _LENS_STATE_MOVINGReady = true; } return _LENS_STATE_MOVINGContent; } }
        private static int _LENS_STATE_MOVINGContent = default;
        private static bool _LENS_STATE_MOVINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_STATE_STATIONARY"/>
        /// </summary>
        public static int LENS_STATE_STATIONARY { get { if (!_LENS_STATE_STATIONARYReady) { _LENS_STATE_STATIONARYContent = SGetField<int>(LocalBridgeClazz, "LENS_STATE_STATIONARY"); _LENS_STATE_STATIONARYReady = true; } return _LENS_STATE_STATIONARYContent; } }
        private static int _LENS_STATE_STATIONARYContent = default;
        private static bool _LENS_STATE_STATIONARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATE"/>
        /// </summary>
        public static int LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATE { get { if (!_LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATEReady) { _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATEContent = SGetField<int>(LocalBridgeClazz, "LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATE"); _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATEReady = true; } return _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATEContent; } }
        private static int _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATEContent = default;
        private static bool _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATED"/>
        /// </summary>
        public static int LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATED { get { if (!_LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATEDReady) { _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATEDContent = SGetField<int>(LocalBridgeClazz, "LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATED"); _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATEDReady = true; } return _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATEDContent; } }
        private static int _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATEDContent = default;
        private static bool _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#NOISE_REDUCTION_MODE_FAST"/>
        /// </summary>
        public static int NOISE_REDUCTION_MODE_FAST { get { if (!_NOISE_REDUCTION_MODE_FASTReady) { _NOISE_REDUCTION_MODE_FASTContent = SGetField<int>(LocalBridgeClazz, "NOISE_REDUCTION_MODE_FAST"); _NOISE_REDUCTION_MODE_FASTReady = true; } return _NOISE_REDUCTION_MODE_FASTContent; } }
        private static int _NOISE_REDUCTION_MODE_FASTContent = default;
        private static bool _NOISE_REDUCTION_MODE_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#NOISE_REDUCTION_MODE_HIGH_QUALITY"/>
        /// </summary>
        public static int NOISE_REDUCTION_MODE_HIGH_QUALITY { get { if (!_NOISE_REDUCTION_MODE_HIGH_QUALITYReady) { _NOISE_REDUCTION_MODE_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "NOISE_REDUCTION_MODE_HIGH_QUALITY"); _NOISE_REDUCTION_MODE_HIGH_QUALITYReady = true; } return _NOISE_REDUCTION_MODE_HIGH_QUALITYContent; } }
        private static int _NOISE_REDUCTION_MODE_HIGH_QUALITYContent = default;
        private static bool _NOISE_REDUCTION_MODE_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#NOISE_REDUCTION_MODE_MINIMAL"/>
        /// </summary>
        public static int NOISE_REDUCTION_MODE_MINIMAL { get { if (!_NOISE_REDUCTION_MODE_MINIMALReady) { _NOISE_REDUCTION_MODE_MINIMALContent = SGetField<int>(LocalBridgeClazz, "NOISE_REDUCTION_MODE_MINIMAL"); _NOISE_REDUCTION_MODE_MINIMALReady = true; } return _NOISE_REDUCTION_MODE_MINIMALContent; } }
        private static int _NOISE_REDUCTION_MODE_MINIMALContent = default;
        private static bool _NOISE_REDUCTION_MODE_MINIMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#NOISE_REDUCTION_MODE_OFF"/>
        /// </summary>
        public static int NOISE_REDUCTION_MODE_OFF { get { if (!_NOISE_REDUCTION_MODE_OFFReady) { _NOISE_REDUCTION_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "NOISE_REDUCTION_MODE_OFF"); _NOISE_REDUCTION_MODE_OFFReady = true; } return _NOISE_REDUCTION_MODE_OFFContent; } }
        private static int _NOISE_REDUCTION_MODE_OFFContent = default;
        private static bool _NOISE_REDUCTION_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAG"/>
        /// </summary>
        public static int NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAG { get { if (!_NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAGReady) { _NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAGContent = SGetField<int>(LocalBridgeClazz, "NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAG"); _NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAGReady = true; } return _NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAGContent; } }
        private static int _NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAGContent = default;
        private static bool _NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLEReady) { _REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLEContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE"); _REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLEReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLEContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLEContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTUREReady) { _REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTUREContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE"); _REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTUREReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTUREContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTUREContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILES"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILES { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILESReady) { _REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILESContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILES"); _REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILESReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILESContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILESContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEOReady) { _REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEOContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO"); _REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEOReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEOContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEOContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUTReady) { _REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUTContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT"); _REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUTReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUTContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUTContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BIT"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BIT { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BITReady) { _REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BITContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BIT"); _REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BITReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BITContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BITContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERAReady) { _REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERAContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA"); _REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERAReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERAContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERAContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSING"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSING { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSINGReady) { _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSINGContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSING"); _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSINGReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSINGContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSINGContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSORReady) { _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSORContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR"); _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSORReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSORContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSORContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_MONOCHROMEReady) { _REQUEST_AVAILABLE_CAPABILITIES_MONOCHROMEContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME"); _REQUEST_AVAILABLE_CAPABILITIES_MONOCHROMEReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_MONOCHROMEContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_MONOCHROMEContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_MONOCHROMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKING"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKING { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKINGReady) { _REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKINGContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKING"); _REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKINGReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKINGContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKINGContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSING"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSING { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSINGReady) { _REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSINGContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSING"); _REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSINGReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSINGContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSINGContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSINGReady) { _REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSINGContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING"); _REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSINGReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSINGContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSINGContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_RAW"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_RAW { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_RAWReady) { _REQUEST_AVAILABLE_CAPABILITIES_RAWContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_RAW"); _REQUEST_AVAILABLE_CAPABILITIES_RAWReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_RAWContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_RAWContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_RAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGS"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGS { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGSReady) { _REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGSContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGS"); _REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGSReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGSContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGSContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSING"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSING { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSINGReady) { _REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSINGContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSING"); _REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSINGReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSINGContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSINGContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATA"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATA { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATAReady) { _REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATAContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATA"); _REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATAReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATAContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATAContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASE"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASE { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASEReady) { _REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASEContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASE"); _REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASEReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASEContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASEContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERA"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERA { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERAReady) { _REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERAContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERA"); _REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERAReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERAContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERAContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSOR"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSOR { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSORReady) { _REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSORContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSOR"); _REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSORReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSORContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSORContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSINGReady) { _REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSINGContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING"); _REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSINGReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSINGContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSINGContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAW"/>
        /// </summary>
        public static int SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAW { get { if (!_SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAWReady) { _SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAWContent = SGetField<int>(LocalBridgeClazz, "SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAW"); _SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAWReady = true; } return _SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAWContent; } }
        private static int _SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAWContent = default;
        private static bool _SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULT"/>
        /// </summary>
        public static int SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULT { get { if (!_SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULTReady) { _SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULT"); _SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULTReady = true; } return _SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULTContent; } }
        private static int _SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULTContent = default;
        private static bool _SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW"/>
        /// </summary>
        public static int SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW { get { if (!_SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEWReady) { _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEWContent = SGetField<int>(LocalBridgeClazz, "SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW"); _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEWReady = true; } return _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEWContent; } }
        private static int _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEWContent = default;
        private static bool _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILL"/>
        /// </summary>
        public static int SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILL { get { if (!_SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILLReady) { _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILLContent = SGetField<int>(LocalBridgeClazz, "SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILL"); _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILLReady = true; } return _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILLContent; } }
        private static int _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILLContent = default;
        private static bool _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTURE"/>
        /// </summary>
        public static int SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTURE { get { if (!_SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTUREReady) { _SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTUREContent = SGetField<int>(LocalBridgeClazz, "SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTURE"); _SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTUREReady = true; } return _SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTUREContent; } }
        private static int _SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTUREContent = default;
        private static bool _SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALL"/>
        /// </summary>
        public static int SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALL { get { if (!_SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALLReady) { _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALLContent = SGetField<int>(LocalBridgeClazz, "SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALL"); _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALLReady = true; } return _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALLContent; } }
        private static int _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALLContent = default;
        private static bool _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORD"/>
        /// </summary>
        public static int SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORD { get { if (!_SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORDReady) { _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORDContent = SGetField<int>(LocalBridgeClazz, "SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORD"); _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORDReady = true; } return _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORDContent; } }
        private static int _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORDContent = default;
        private static bool _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_CROPPING_TYPE_CENTER_ONLY"/>
        /// </summary>
        public static int SCALER_CROPPING_TYPE_CENTER_ONLY { get { if (!_SCALER_CROPPING_TYPE_CENTER_ONLYReady) { _SCALER_CROPPING_TYPE_CENTER_ONLYContent = SGetField<int>(LocalBridgeClazz, "SCALER_CROPPING_TYPE_CENTER_ONLY"); _SCALER_CROPPING_TYPE_CENTER_ONLYReady = true; } return _SCALER_CROPPING_TYPE_CENTER_ONLYContent; } }
        private static int _SCALER_CROPPING_TYPE_CENTER_ONLYContent = default;
        private static bool _SCALER_CROPPING_TYPE_CENTER_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_CROPPING_TYPE_FREEFORM"/>
        /// </summary>
        public static int SCALER_CROPPING_TYPE_FREEFORM { get { if (!_SCALER_CROPPING_TYPE_FREEFORMReady) { _SCALER_CROPPING_TYPE_FREEFORMContent = SGetField<int>(LocalBridgeClazz, "SCALER_CROPPING_TYPE_FREEFORM"); _SCALER_CROPPING_TYPE_FREEFORMReady = true; } return _SCALER_CROPPING_TYPE_FREEFORMContent; } }
        private static int _SCALER_CROPPING_TYPE_FREEFORMContent = default;
        private static bool _SCALER_CROPPING_TYPE_FREEFORMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_ROTATE_AND_CROP_180"/>
        /// </summary>
        public static int SCALER_ROTATE_AND_CROP_180 { get { if (!_SCALER_ROTATE_AND_CROP_180Ready) { _SCALER_ROTATE_AND_CROP_180Content = SGetField<int>(LocalBridgeClazz, "SCALER_ROTATE_AND_CROP_180"); _SCALER_ROTATE_AND_CROP_180Ready = true; } return _SCALER_ROTATE_AND_CROP_180Content; } }
        private static int _SCALER_ROTATE_AND_CROP_180Content = default;
        private static bool _SCALER_ROTATE_AND_CROP_180Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_ROTATE_AND_CROP_270"/>
        /// </summary>
        public static int SCALER_ROTATE_AND_CROP_270 { get { if (!_SCALER_ROTATE_AND_CROP_270Ready) { _SCALER_ROTATE_AND_CROP_270Content = SGetField<int>(LocalBridgeClazz, "SCALER_ROTATE_AND_CROP_270"); _SCALER_ROTATE_AND_CROP_270Ready = true; } return _SCALER_ROTATE_AND_CROP_270Content; } }
        private static int _SCALER_ROTATE_AND_CROP_270Content = default;
        private static bool _SCALER_ROTATE_AND_CROP_270Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_ROTATE_AND_CROP_90"/>
        /// </summary>
        public static int SCALER_ROTATE_AND_CROP_90 { get { if (!_SCALER_ROTATE_AND_CROP_90Ready) { _SCALER_ROTATE_AND_CROP_90Content = SGetField<int>(LocalBridgeClazz, "SCALER_ROTATE_AND_CROP_90"); _SCALER_ROTATE_AND_CROP_90Ready = true; } return _SCALER_ROTATE_AND_CROP_90Content; } }
        private static int _SCALER_ROTATE_AND_CROP_90Content = default;
        private static bool _SCALER_ROTATE_AND_CROP_90Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_ROTATE_AND_CROP_AUTO"/>
        /// </summary>
        public static int SCALER_ROTATE_AND_CROP_AUTO { get { if (!_SCALER_ROTATE_AND_CROP_AUTOReady) { _SCALER_ROTATE_AND_CROP_AUTOContent = SGetField<int>(LocalBridgeClazz, "SCALER_ROTATE_AND_CROP_AUTO"); _SCALER_ROTATE_AND_CROP_AUTOReady = true; } return _SCALER_ROTATE_AND_CROP_AUTOContent; } }
        private static int _SCALER_ROTATE_AND_CROP_AUTOContent = default;
        private static bool _SCALER_ROTATE_AND_CROP_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_ROTATE_AND_CROP_NONE"/>
        /// </summary>
        public static int SCALER_ROTATE_AND_CROP_NONE { get { if (!_SCALER_ROTATE_AND_CROP_NONEReady) { _SCALER_ROTATE_AND_CROP_NONEContent = SGetField<int>(LocalBridgeClazz, "SCALER_ROTATE_AND_CROP_NONE"); _SCALER_ROTATE_AND_CROP_NONEReady = true; } return _SCALER_ROTATE_AND_CROP_NONEContent; } }
        private static int _SCALER_ROTATE_AND_CROP_NONEContent = default;
        private static bool _SCALER_ROTATE_AND_CROP_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGR"/>
        /// </summary>
        public static int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGR { get { if (!_SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGRReady) { _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGRContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGR"); _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGRReady = true; } return _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGRContent; } }
        private static int _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGRContent = default;
        private static bool _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRG"/>
        /// </summary>
        public static int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRG { get { if (!_SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRGReady) { _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRGContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRG"); _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRGReady = true; } return _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRGContent; } }
        private static int _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRGContent = default;
        private static bool _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBG"/>
        /// </summary>
        public static int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBG { get { if (!_SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBGReady) { _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBGContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBG"); _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBGReady = true; } return _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBGContent; } }
        private static int _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBGContent = default;
        private static bool _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONO"/>
        /// </summary>
        public static int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONO { get { if (!_SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONOReady) { _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONOContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONO"); _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONOReady = true; } return _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONOContent; } }
        private static int _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONOContent = default;
        private static bool _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIR"/>
        /// </summary>
        public static int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIR { get { if (!_SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIRReady) { _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIRContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIR"); _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIRReady = true; } return _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIRContent; } }
        private static int _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIRContent = default;
        private static bool _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGB"/>
        /// </summary>
        public static int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGB { get { if (!_SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGBReady) { _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGBContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGB"); _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGBReady = true; } return _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGBContent; } }
        private static int _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGBContent = default;
        private static bool _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGB"/>
        /// </summary>
        public static int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGB { get { if (!_SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGBReady) { _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGBContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGB"); _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGBReady = true; } return _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGBContent; } }
        private static int _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGBContent = default;
        private static bool _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME"/>
        /// </summary>
        public static int SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME { get { if (!_SENSOR_INFO_TIMESTAMP_SOURCE_REALTIMEReady) { _SENSOR_INFO_TIMESTAMP_SOURCE_REALTIMEContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME"); _SENSOR_INFO_TIMESTAMP_SOURCE_REALTIMEReady = true; } return _SENSOR_INFO_TIMESTAMP_SOURCE_REALTIMEContent; } }
        private static int _SENSOR_INFO_TIMESTAMP_SOURCE_REALTIMEContent = default;
        private static bool _SENSOR_INFO_TIMESTAMP_SOURCE_REALTIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWN"/>
        /// </summary>
        public static int SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWN { get { if (!_SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWNReady) { _SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWN"); _SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWNReady = true; } return _SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWNContent; } }
        private static int _SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWNContent = default;
        private static bool _SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_PIXEL_MODE_DEFAULT"/>
        /// </summary>
        public static int SENSOR_PIXEL_MODE_DEFAULT { get { if (!_SENSOR_PIXEL_MODE_DEFAULTReady) { _SENSOR_PIXEL_MODE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_PIXEL_MODE_DEFAULT"); _SENSOR_PIXEL_MODE_DEFAULTReady = true; } return _SENSOR_PIXEL_MODE_DEFAULTContent; } }
        private static int _SENSOR_PIXEL_MODE_DEFAULTContent = default;
        private static bool _SENSOR_PIXEL_MODE_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTION"/>
        /// </summary>
        public static int SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTION { get { if (!_SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTIONReady) { _SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTIONContent = SGetField<int>(LocalBridgeClazz, "SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTION"); _SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTIONReady = true; } return _SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTIONContent; } }
        private static int _SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTIONContent = default;
        private static bool _SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_READOUT_TIMESTAMP_HARDWARE"/>
        /// </summary>
        public static int SENSOR_READOUT_TIMESTAMP_HARDWARE { get { if (!_SENSOR_READOUT_TIMESTAMP_HARDWAREReady) { _SENSOR_READOUT_TIMESTAMP_HARDWAREContent = SGetField<int>(LocalBridgeClazz, "SENSOR_READOUT_TIMESTAMP_HARDWARE"); _SENSOR_READOUT_TIMESTAMP_HARDWAREReady = true; } return _SENSOR_READOUT_TIMESTAMP_HARDWAREContent; } }
        private static int _SENSOR_READOUT_TIMESTAMP_HARDWAREContent = default;
        private static bool _SENSOR_READOUT_TIMESTAMP_HARDWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTED"/>
        /// </summary>
        public static int SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTED { get { if (!_SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTEDReady) { _SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTED"); _SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTEDReady = true; } return _SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTEDContent; } }
        private static int _SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTEDContent = default;
        private static bool _SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHER"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHER { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHERReady) { _SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHERContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHER"); _SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHERReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHERContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHERContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENT"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENT { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENTReady) { _SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENT"); _SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENTReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENTContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENTContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_D50"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_D50 { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_D50Ready) { _SENSOR_REFERENCE_ILLUMINANT1_D50Content = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_D50"); _SENSOR_REFERENCE_ILLUMINANT1_D50Ready = true; } return _SENSOR_REFERENCE_ILLUMINANT1_D50Content; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_D50Content = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_D50Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_D55"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_D55 { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_D55Ready) { _SENSOR_REFERENCE_ILLUMINANT1_D55Content = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_D55"); _SENSOR_REFERENCE_ILLUMINANT1_D55Ready = true; } return _SENSOR_REFERENCE_ILLUMINANT1_D55Content; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_D55Content = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_D55Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_D65"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_D65 { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_D65Ready) { _SENSOR_REFERENCE_ILLUMINANT1_D65Content = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_D65"); _SENSOR_REFERENCE_ILLUMINANT1_D65Ready = true; } return _SENSOR_REFERENCE_ILLUMINANT1_D65Content; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_D65Content = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_D65Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_D75"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_D75 { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_D75Ready) { _SENSOR_REFERENCE_ILLUMINANT1_D75Content = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_D75"); _SENSOR_REFERENCE_ILLUMINANT1_D75Ready = true; } return _SENSOR_REFERENCE_ILLUMINANT1_D75Content; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_D75Content = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_D75Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENT"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENT { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENTReady) { _SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENT"); _SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENTReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENTContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENTContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHTReady) { _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT"); _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHTReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHTContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHTContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENT"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENT { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENTReady) { _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENT"); _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENTReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENTContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENTContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHER"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHER { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHERReady) { _SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHERContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHER"); _SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHERReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHERContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHERContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_FLASH"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_FLASH { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_FLASHReady) { _SENSOR_REFERENCE_ILLUMINANT1_FLASHContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_FLASH"); _SENSOR_REFERENCE_ILLUMINANT1_FLASHReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_FLASHContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_FLASHContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_FLASHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENT"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENT { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENTReady) { _SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENT"); _SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENTReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENTContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENTContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTEN"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTEN { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTENReady) { _SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTENContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTEN"); _SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTENReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTENContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTENContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_SHADE"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_SHADE { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_SHADEReady) { _SENSOR_REFERENCE_ILLUMINANT1_SHADEContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_SHADE"); _SENSOR_REFERENCE_ILLUMINANT1_SHADEReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_SHADEContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_SHADEContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_SHADEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_STANDARD_A"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_STANDARD_A { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_STANDARD_AReady) { _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_AContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_STANDARD_A"); _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_AReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_AContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_AContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_AReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_STANDARD_B"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_STANDARD_B { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_STANDARD_BReady) { _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_BContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_STANDARD_B"); _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_BReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_BContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_BContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_BReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_STANDARD_C"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_STANDARD_C { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_STANDARD_CReady) { _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_CContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_STANDARD_C"); _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_CReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_CContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_CContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_CReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_TUNGSTEN"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_TUNGSTEN { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_TUNGSTENReady) { _SENSOR_REFERENCE_ILLUMINANT1_TUNGSTENContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_TUNGSTEN"); _SENSOR_REFERENCE_ILLUMINANT1_TUNGSTENReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_TUNGSTENContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_TUNGSTENContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_TUNGSTENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENT"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENT { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENTReady) { _SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENT"); _SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENTReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENTContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENTContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_TEST_PATTERN_MODE_COLOR_BARS"/>
        /// </summary>
        public static int SENSOR_TEST_PATTERN_MODE_COLOR_BARS { get { if (!_SENSOR_TEST_PATTERN_MODE_COLOR_BARSReady) { _SENSOR_TEST_PATTERN_MODE_COLOR_BARSContent = SGetField<int>(LocalBridgeClazz, "SENSOR_TEST_PATTERN_MODE_COLOR_BARS"); _SENSOR_TEST_PATTERN_MODE_COLOR_BARSReady = true; } return _SENSOR_TEST_PATTERN_MODE_COLOR_BARSContent; } }
        private static int _SENSOR_TEST_PATTERN_MODE_COLOR_BARSContent = default;
        private static bool _SENSOR_TEST_PATTERN_MODE_COLOR_BARSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAY"/>
        /// </summary>
        public static int SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAY { get { if (!_SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAYReady) { _SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAYContent = SGetField<int>(LocalBridgeClazz, "SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAY"); _SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAYReady = true; } return _SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAYContent; } }
        private static int _SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAYContent = default;
        private static bool _SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_TEST_PATTERN_MODE_CUSTOM1"/>
        /// </summary>
        public static int SENSOR_TEST_PATTERN_MODE_CUSTOM1 { get { if (!_SENSOR_TEST_PATTERN_MODE_CUSTOM1Ready) { _SENSOR_TEST_PATTERN_MODE_CUSTOM1Content = SGetField<int>(LocalBridgeClazz, "SENSOR_TEST_PATTERN_MODE_CUSTOM1"); _SENSOR_TEST_PATTERN_MODE_CUSTOM1Ready = true; } return _SENSOR_TEST_PATTERN_MODE_CUSTOM1Content; } }
        private static int _SENSOR_TEST_PATTERN_MODE_CUSTOM1Content = default;
        private static bool _SENSOR_TEST_PATTERN_MODE_CUSTOM1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_TEST_PATTERN_MODE_OFF"/>
        /// </summary>
        public static int SENSOR_TEST_PATTERN_MODE_OFF { get { if (!_SENSOR_TEST_PATTERN_MODE_OFFReady) { _SENSOR_TEST_PATTERN_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "SENSOR_TEST_PATTERN_MODE_OFF"); _SENSOR_TEST_PATTERN_MODE_OFFReady = true; } return _SENSOR_TEST_PATTERN_MODE_OFFContent; } }
        private static int _SENSOR_TEST_PATTERN_MODE_OFFContent = default;
        private static bool _SENSOR_TEST_PATTERN_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_TEST_PATTERN_MODE_PN9"/>
        /// </summary>
        public static int SENSOR_TEST_PATTERN_MODE_PN9 { get { if (!_SENSOR_TEST_PATTERN_MODE_PN9Ready) { _SENSOR_TEST_PATTERN_MODE_PN9Content = SGetField<int>(LocalBridgeClazz, "SENSOR_TEST_PATTERN_MODE_PN9"); _SENSOR_TEST_PATTERN_MODE_PN9Ready = true; } return _SENSOR_TEST_PATTERN_MODE_PN9Content; } }
        private static int _SENSOR_TEST_PATTERN_MODE_PN9Content = default;
        private static bool _SENSOR_TEST_PATTERN_MODE_PN9Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_TEST_PATTERN_MODE_SOLID_COLOR"/>
        /// </summary>
        public static int SENSOR_TEST_PATTERN_MODE_SOLID_COLOR { get { if (!_SENSOR_TEST_PATTERN_MODE_SOLID_COLORReady) { _SENSOR_TEST_PATTERN_MODE_SOLID_COLORContent = SGetField<int>(LocalBridgeClazz, "SENSOR_TEST_PATTERN_MODE_SOLID_COLOR"); _SENSOR_TEST_PATTERN_MODE_SOLID_COLORReady = true; } return _SENSOR_TEST_PATTERN_MODE_SOLID_COLORContent; } }
        private static int _SENSOR_TEST_PATTERN_MODE_SOLID_COLORContent = default;
        private static bool _SENSOR_TEST_PATTERN_MODE_SOLID_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SHADING_MODE_FAST"/>
        /// </summary>
        public static int SHADING_MODE_FAST { get { if (!_SHADING_MODE_FASTReady) { _SHADING_MODE_FASTContent = SGetField<int>(LocalBridgeClazz, "SHADING_MODE_FAST"); _SHADING_MODE_FASTReady = true; } return _SHADING_MODE_FASTContent; } }
        private static int _SHADING_MODE_FASTContent = default;
        private static bool _SHADING_MODE_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SHADING_MODE_HIGH_QUALITY"/>
        /// </summary>
        public static int SHADING_MODE_HIGH_QUALITY { get { if (!_SHADING_MODE_HIGH_QUALITYReady) { _SHADING_MODE_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "SHADING_MODE_HIGH_QUALITY"); _SHADING_MODE_HIGH_QUALITYReady = true; } return _SHADING_MODE_HIGH_QUALITYContent; } }
        private static int _SHADING_MODE_HIGH_QUALITYContent = default;
        private static bool _SHADING_MODE_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SHADING_MODE_OFF"/>
        /// </summary>
        public static int SHADING_MODE_OFF { get { if (!_SHADING_MODE_OFFReady) { _SHADING_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "SHADING_MODE_OFF"); _SHADING_MODE_OFFReady = true; } return _SHADING_MODE_OFFContent; } }
        private static int _SHADING_MODE_OFFContent = default;
        private static bool _SHADING_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_FACE_DETECT_MODE_FULL"/>
        /// </summary>
        public static int STATISTICS_FACE_DETECT_MODE_FULL { get { if (!_STATISTICS_FACE_DETECT_MODE_FULLReady) { _STATISTICS_FACE_DETECT_MODE_FULLContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_FACE_DETECT_MODE_FULL"); _STATISTICS_FACE_DETECT_MODE_FULLReady = true; } return _STATISTICS_FACE_DETECT_MODE_FULLContent; } }
        private static int _STATISTICS_FACE_DETECT_MODE_FULLContent = default;
        private static bool _STATISTICS_FACE_DETECT_MODE_FULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_FACE_DETECT_MODE_OFF"/>
        /// </summary>
        public static int STATISTICS_FACE_DETECT_MODE_OFF { get { if (!_STATISTICS_FACE_DETECT_MODE_OFFReady) { _STATISTICS_FACE_DETECT_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_FACE_DETECT_MODE_OFF"); _STATISTICS_FACE_DETECT_MODE_OFFReady = true; } return _STATISTICS_FACE_DETECT_MODE_OFFContent; } }
        private static int _STATISTICS_FACE_DETECT_MODE_OFFContent = default;
        private static bool _STATISTICS_FACE_DETECT_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_FACE_DETECT_MODE_SIMPLE"/>
        /// </summary>
        public static int STATISTICS_FACE_DETECT_MODE_SIMPLE { get { if (!_STATISTICS_FACE_DETECT_MODE_SIMPLEReady) { _STATISTICS_FACE_DETECT_MODE_SIMPLEContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_FACE_DETECT_MODE_SIMPLE"); _STATISTICS_FACE_DETECT_MODE_SIMPLEReady = true; } return _STATISTICS_FACE_DETECT_MODE_SIMPLEContent; } }
        private static int _STATISTICS_FACE_DETECT_MODE_SIMPLEContent = default;
        private static bool _STATISTICS_FACE_DETECT_MODE_SIMPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_LENS_SHADING_MAP_MODE_OFF"/>
        /// </summary>
        public static int STATISTICS_LENS_SHADING_MAP_MODE_OFF { get { if (!_STATISTICS_LENS_SHADING_MAP_MODE_OFFReady) { _STATISTICS_LENS_SHADING_MAP_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_LENS_SHADING_MAP_MODE_OFF"); _STATISTICS_LENS_SHADING_MAP_MODE_OFFReady = true; } return _STATISTICS_LENS_SHADING_MAP_MODE_OFFContent; } }
        private static int _STATISTICS_LENS_SHADING_MAP_MODE_OFFContent = default;
        private static bool _STATISTICS_LENS_SHADING_MAP_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_LENS_SHADING_MAP_MODE_ON"/>
        /// </summary>
        public static int STATISTICS_LENS_SHADING_MAP_MODE_ON { get { if (!_STATISTICS_LENS_SHADING_MAP_MODE_ONReady) { _STATISTICS_LENS_SHADING_MAP_MODE_ONContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_LENS_SHADING_MAP_MODE_ON"); _STATISTICS_LENS_SHADING_MAP_MODE_ONReady = true; } return _STATISTICS_LENS_SHADING_MAP_MODE_ONContent; } }
        private static int _STATISTICS_LENS_SHADING_MAP_MODE_ONContent = default;
        private static bool _STATISTICS_LENS_SHADING_MAP_MODE_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_OIS_DATA_MODE_OFF"/>
        /// </summary>
        public static int STATISTICS_OIS_DATA_MODE_OFF { get { if (!_STATISTICS_OIS_DATA_MODE_OFFReady) { _STATISTICS_OIS_DATA_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_OIS_DATA_MODE_OFF"); _STATISTICS_OIS_DATA_MODE_OFFReady = true; } return _STATISTICS_OIS_DATA_MODE_OFFContent; } }
        private static int _STATISTICS_OIS_DATA_MODE_OFFContent = default;
        private static bool _STATISTICS_OIS_DATA_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_OIS_DATA_MODE_ON"/>
        /// </summary>
        public static int STATISTICS_OIS_DATA_MODE_ON { get { if (!_STATISTICS_OIS_DATA_MODE_ONReady) { _STATISTICS_OIS_DATA_MODE_ONContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_OIS_DATA_MODE_ON"); _STATISTICS_OIS_DATA_MODE_ONReady = true; } return _STATISTICS_OIS_DATA_MODE_ONContent; } }
        private static int _STATISTICS_OIS_DATA_MODE_ONContent = default;
        private static bool _STATISTICS_OIS_DATA_MODE_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_SCENE_FLICKER_50HZ"/>
        /// </summary>
        public static int STATISTICS_SCENE_FLICKER_50HZ { get { if (!_STATISTICS_SCENE_FLICKER_50HZReady) { _STATISTICS_SCENE_FLICKER_50HZContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_SCENE_FLICKER_50HZ"); _STATISTICS_SCENE_FLICKER_50HZReady = true; } return _STATISTICS_SCENE_FLICKER_50HZContent; } }
        private static int _STATISTICS_SCENE_FLICKER_50HZContent = default;
        private static bool _STATISTICS_SCENE_FLICKER_50HZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_SCENE_FLICKER_60HZ"/>
        /// </summary>
        public static int STATISTICS_SCENE_FLICKER_60HZ { get { if (!_STATISTICS_SCENE_FLICKER_60HZReady) { _STATISTICS_SCENE_FLICKER_60HZContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_SCENE_FLICKER_60HZ"); _STATISTICS_SCENE_FLICKER_60HZReady = true; } return _STATISTICS_SCENE_FLICKER_60HZContent; } }
        private static int _STATISTICS_SCENE_FLICKER_60HZContent = default;
        private static bool _STATISTICS_SCENE_FLICKER_60HZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_SCENE_FLICKER_NONE"/>
        /// </summary>
        public static int STATISTICS_SCENE_FLICKER_NONE { get { if (!_STATISTICS_SCENE_FLICKER_NONEReady) { _STATISTICS_SCENE_FLICKER_NONEContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_SCENE_FLICKER_NONE"); _STATISTICS_SCENE_FLICKER_NONEReady = true; } return _STATISTICS_SCENE_FLICKER_NONEContent; } }
        private static int _STATISTICS_SCENE_FLICKER_NONEContent = default;
        private static bool _STATISTICS_SCENE_FLICKER_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SYNC_MAX_LATENCY_PER_FRAME_CONTROL"/>
        /// </summary>
        public static int SYNC_MAX_LATENCY_PER_FRAME_CONTROL { get { if (!_SYNC_MAX_LATENCY_PER_FRAME_CONTROLReady) { _SYNC_MAX_LATENCY_PER_FRAME_CONTROLContent = SGetField<int>(LocalBridgeClazz, "SYNC_MAX_LATENCY_PER_FRAME_CONTROL"); _SYNC_MAX_LATENCY_PER_FRAME_CONTROLReady = true; } return _SYNC_MAX_LATENCY_PER_FRAME_CONTROLContent; } }
        private static int _SYNC_MAX_LATENCY_PER_FRAME_CONTROLContent = default;
        private static bool _SYNC_MAX_LATENCY_PER_FRAME_CONTROLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SYNC_MAX_LATENCY_UNKNOWN"/>
        /// </summary>
        public static int SYNC_MAX_LATENCY_UNKNOWN { get { if (!_SYNC_MAX_LATENCY_UNKNOWNReady) { _SYNC_MAX_LATENCY_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "SYNC_MAX_LATENCY_UNKNOWN"); _SYNC_MAX_LATENCY_UNKNOWNReady = true; } return _SYNC_MAX_LATENCY_UNKNOWNContent; } }
        private static int _SYNC_MAX_LATENCY_UNKNOWNContent = default;
        private static bool _SYNC_MAX_LATENCY_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#TONEMAP_MODE_CONTRAST_CURVE"/>
        /// </summary>
        public static int TONEMAP_MODE_CONTRAST_CURVE { get { if (!_TONEMAP_MODE_CONTRAST_CURVEReady) { _TONEMAP_MODE_CONTRAST_CURVEContent = SGetField<int>(LocalBridgeClazz, "TONEMAP_MODE_CONTRAST_CURVE"); _TONEMAP_MODE_CONTRAST_CURVEReady = true; } return _TONEMAP_MODE_CONTRAST_CURVEContent; } }
        private static int _TONEMAP_MODE_CONTRAST_CURVEContent = default;
        private static bool _TONEMAP_MODE_CONTRAST_CURVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#TONEMAP_MODE_FAST"/>
        /// </summary>
        public static int TONEMAP_MODE_FAST { get { if (!_TONEMAP_MODE_FASTReady) { _TONEMAP_MODE_FASTContent = SGetField<int>(LocalBridgeClazz, "TONEMAP_MODE_FAST"); _TONEMAP_MODE_FASTReady = true; } return _TONEMAP_MODE_FASTContent; } }
        private static int _TONEMAP_MODE_FASTContent = default;
        private static bool _TONEMAP_MODE_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#TONEMAP_MODE_GAMMA_VALUE"/>
        /// </summary>
        public static int TONEMAP_MODE_GAMMA_VALUE { get { if (!_TONEMAP_MODE_GAMMA_VALUEReady) { _TONEMAP_MODE_GAMMA_VALUEContent = SGetField<int>(LocalBridgeClazz, "TONEMAP_MODE_GAMMA_VALUE"); _TONEMAP_MODE_GAMMA_VALUEReady = true; } return _TONEMAP_MODE_GAMMA_VALUEContent; } }
        private static int _TONEMAP_MODE_GAMMA_VALUEContent = default;
        private static bool _TONEMAP_MODE_GAMMA_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#TONEMAP_MODE_HIGH_QUALITY"/>
        /// </summary>
        public static int TONEMAP_MODE_HIGH_QUALITY { get { if (!_TONEMAP_MODE_HIGH_QUALITYReady) { _TONEMAP_MODE_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "TONEMAP_MODE_HIGH_QUALITY"); _TONEMAP_MODE_HIGH_QUALITYReady = true; } return _TONEMAP_MODE_HIGH_QUALITYContent; } }
        private static int _TONEMAP_MODE_HIGH_QUALITYContent = default;
        private static bool _TONEMAP_MODE_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#TONEMAP_MODE_PRESET_CURVE"/>
        /// </summary>
        public static int TONEMAP_MODE_PRESET_CURVE { get { if (!_TONEMAP_MODE_PRESET_CURVEReady) { _TONEMAP_MODE_PRESET_CURVEContent = SGetField<int>(LocalBridgeClazz, "TONEMAP_MODE_PRESET_CURVE"); _TONEMAP_MODE_PRESET_CURVEReady = true; } return _TONEMAP_MODE_PRESET_CURVEContent; } }
        private static int _TONEMAP_MODE_PRESET_CURVEContent = default;
        private static bool _TONEMAP_MODE_PRESET_CURVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#TONEMAP_PRESET_CURVE_REC709"/>
        /// </summary>
        public static int TONEMAP_PRESET_CURVE_REC709 { get { if (!_TONEMAP_PRESET_CURVE_REC709Ready) { _TONEMAP_PRESET_CURVE_REC709Content = SGetField<int>(LocalBridgeClazz, "TONEMAP_PRESET_CURVE_REC709"); _TONEMAP_PRESET_CURVE_REC709Ready = true; } return _TONEMAP_PRESET_CURVE_REC709Content; } }
        private static int _TONEMAP_PRESET_CURVE_REC709Content = default;
        private static bool _TONEMAP_PRESET_CURVE_REC709Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#TONEMAP_PRESET_CURVE_SRGB"/>
        /// </summary>
        public static int TONEMAP_PRESET_CURVE_SRGB { get { if (!_TONEMAP_PRESET_CURVE_SRGBReady) { _TONEMAP_PRESET_CURVE_SRGBContent = SGetField<int>(LocalBridgeClazz, "TONEMAP_PRESET_CURVE_SRGB"); _TONEMAP_PRESET_CURVE_SRGBReady = true; } return _TONEMAP_PRESET_CURVE_SRGBContent; } }
        private static int _TONEMAP_PRESET_CURVE_SRGBContent = default;
        private static bool _TONEMAP_PRESET_CURVE_SRGBReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#getKeys()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List GetKeys()
        {
            return IExecuteWithSignature<Java.Util.List>("getKeys", "()Ljava/util/List;");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region CameraMetadata<TKey>
    public partial class CameraMetadata<TKey>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Hardware.Camera2.CameraMetadata{TKey}"/> to <see cref="Android.Hardware.Camera2.CameraMetadata"/>
        /// </summary>
        public static implicit operator Android.Hardware.Camera2.CameraMetadata(Android.Hardware.Camera2.CameraMetadata<TKey> t) => t.Cast<Android.Hardware.Camera2.CameraMetadata>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONT { get { if (!_AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONTReady) { _AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONT"); _AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONTReady = true; } return _AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_EXTERIOR_FRONTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFT { get { if (!_AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFTReady) { _AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFT"); _AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFTReady = true; } return _AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_EXTERIOR_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHER"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHER { get { if (!_AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHERReady) { _AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHERContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHER"); _AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHERReady = true; } return _AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHERContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHERContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_EXTERIOR_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_EXTERIOR_REAR"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_EXTERIOR_REAR { get { if (!_AUTOMOTIVE_LENS_FACING_EXTERIOR_REARReady) { _AUTOMOTIVE_LENS_FACING_EXTERIOR_REARContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_EXTERIOR_REAR"); _AUTOMOTIVE_LENS_FACING_EXTERIOR_REARReady = true; } return _AUTOMOTIVE_LENS_FACING_EXTERIOR_REARContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_EXTERIOR_REARContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_EXTERIOR_REARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHT { get { if (!_AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHTReady) { _AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHT"); _AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHTReady = true; } return _AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_EXTERIOR_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_OTHER"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_OTHER { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_OTHERReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_OTHERContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_OTHER"); _AUTOMOTIVE_LENS_FACING_INTERIOR_OTHERReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_OTHERContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_OTHERContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTER"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTER { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTERReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTERContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTER"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTERReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTERContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTERContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFT { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFTReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFT"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFTReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHT { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHTReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHT"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHTReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_1_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTER"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTER { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTERReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTERContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTER"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTERReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTERContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTERContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFT { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFTReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFT"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFTReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHT { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHTReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHT"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHTReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_2_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTER"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTER { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTERReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTERContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTER"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTERReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTERContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTERContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFT { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFTReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFT"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFTReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHT"/>
        /// </summary>
        public static int AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHT { get { if (!_AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHTReady) { _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHT"); _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHTReady = true; } return _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHTContent; } }
        private static int _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHTContent = default;
        private static bool _AUTOMOTIVE_LENS_FACING_INTERIOR_SEAT_ROW_3_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTERIOR_FRONT"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTERIOR_FRONT { get { if (!_AUTOMOTIVE_LOCATION_EXTERIOR_FRONTReady) { _AUTOMOTIVE_LOCATION_EXTERIOR_FRONTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTERIOR_FRONT"); _AUTOMOTIVE_LOCATION_EXTERIOR_FRONTReady = true; } return _AUTOMOTIVE_LOCATION_EXTERIOR_FRONTContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTERIOR_FRONTContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTERIOR_FRONTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTERIOR_LEFT"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTERIOR_LEFT { get { if (!_AUTOMOTIVE_LOCATION_EXTERIOR_LEFTReady) { _AUTOMOTIVE_LOCATION_EXTERIOR_LEFTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTERIOR_LEFT"); _AUTOMOTIVE_LOCATION_EXTERIOR_LEFTReady = true; } return _AUTOMOTIVE_LOCATION_EXTERIOR_LEFTContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTERIOR_LEFTContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTERIOR_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTERIOR_OTHER"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTERIOR_OTHER { get { if (!_AUTOMOTIVE_LOCATION_EXTERIOR_OTHERReady) { _AUTOMOTIVE_LOCATION_EXTERIOR_OTHERContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTERIOR_OTHER"); _AUTOMOTIVE_LOCATION_EXTERIOR_OTHERReady = true; } return _AUTOMOTIVE_LOCATION_EXTERIOR_OTHERContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTERIOR_OTHERContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTERIOR_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTERIOR_REAR"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTERIOR_REAR { get { if (!_AUTOMOTIVE_LOCATION_EXTERIOR_REARReady) { _AUTOMOTIVE_LOCATION_EXTERIOR_REARContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTERIOR_REAR"); _AUTOMOTIVE_LOCATION_EXTERIOR_REARReady = true; } return _AUTOMOTIVE_LOCATION_EXTERIOR_REARContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTERIOR_REARContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTERIOR_REARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTERIOR_RIGHT"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTERIOR_RIGHT { get { if (!_AUTOMOTIVE_LOCATION_EXTERIOR_RIGHTReady) { _AUTOMOTIVE_LOCATION_EXTERIOR_RIGHTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTERIOR_RIGHT"); _AUTOMOTIVE_LOCATION_EXTERIOR_RIGHTReady = true; } return _AUTOMOTIVE_LOCATION_EXTERIOR_RIGHTContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTERIOR_RIGHTContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTERIOR_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTRA_FRONT"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTRA_FRONT { get { if (!_AUTOMOTIVE_LOCATION_EXTRA_FRONTReady) { _AUTOMOTIVE_LOCATION_EXTRA_FRONTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTRA_FRONT"); _AUTOMOTIVE_LOCATION_EXTRA_FRONTReady = true; } return _AUTOMOTIVE_LOCATION_EXTRA_FRONTContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTRA_FRONTContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTRA_FRONTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTRA_LEFT"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTRA_LEFT { get { if (!_AUTOMOTIVE_LOCATION_EXTRA_LEFTReady) { _AUTOMOTIVE_LOCATION_EXTRA_LEFTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTRA_LEFT"); _AUTOMOTIVE_LOCATION_EXTRA_LEFTReady = true; } return _AUTOMOTIVE_LOCATION_EXTRA_LEFTContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTRA_LEFTContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTRA_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTRA_OTHER"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTRA_OTHER { get { if (!_AUTOMOTIVE_LOCATION_EXTRA_OTHERReady) { _AUTOMOTIVE_LOCATION_EXTRA_OTHERContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTRA_OTHER"); _AUTOMOTIVE_LOCATION_EXTRA_OTHERReady = true; } return _AUTOMOTIVE_LOCATION_EXTRA_OTHERContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTRA_OTHERContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTRA_OTHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTRA_REAR"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTRA_REAR { get { if (!_AUTOMOTIVE_LOCATION_EXTRA_REARReady) { _AUTOMOTIVE_LOCATION_EXTRA_REARContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTRA_REAR"); _AUTOMOTIVE_LOCATION_EXTRA_REARReady = true; } return _AUTOMOTIVE_LOCATION_EXTRA_REARContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTRA_REARContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTRA_REARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_EXTRA_RIGHT"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_EXTRA_RIGHT { get { if (!_AUTOMOTIVE_LOCATION_EXTRA_RIGHTReady) { _AUTOMOTIVE_LOCATION_EXTRA_RIGHTContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_EXTRA_RIGHT"); _AUTOMOTIVE_LOCATION_EXTRA_RIGHTReady = true; } return _AUTOMOTIVE_LOCATION_EXTRA_RIGHTContent; } }
        private static int _AUTOMOTIVE_LOCATION_EXTRA_RIGHTContent = default;
        private static bool _AUTOMOTIVE_LOCATION_EXTRA_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#AUTOMOTIVE_LOCATION_INTERIOR"/>
        /// </summary>
        public static int AUTOMOTIVE_LOCATION_INTERIOR { get { if (!_AUTOMOTIVE_LOCATION_INTERIORReady) { _AUTOMOTIVE_LOCATION_INTERIORContent = SGetField<int>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION_INTERIOR"); _AUTOMOTIVE_LOCATION_INTERIORReady = true; } return _AUTOMOTIVE_LOCATION_INTERIORContent; } }
        private static int _AUTOMOTIVE_LOCATION_INTERIORContent = default;
        private static bool _AUTOMOTIVE_LOCATION_INTERIORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#COLOR_CORRECTION_ABERRATION_MODE_FAST"/>
        /// </summary>
        public static int COLOR_CORRECTION_ABERRATION_MODE_FAST { get { if (!_COLOR_CORRECTION_ABERRATION_MODE_FASTReady) { _COLOR_CORRECTION_ABERRATION_MODE_FASTContent = SGetField<int>(LocalBridgeClazz, "COLOR_CORRECTION_ABERRATION_MODE_FAST"); _COLOR_CORRECTION_ABERRATION_MODE_FASTReady = true; } return _COLOR_CORRECTION_ABERRATION_MODE_FASTContent; } }
        private static int _COLOR_CORRECTION_ABERRATION_MODE_FASTContent = default;
        private static bool _COLOR_CORRECTION_ABERRATION_MODE_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITY"/>
        /// </summary>
        public static int COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITY { get { if (!_COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITYReady) { _COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITY"); _COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITYReady = true; } return _COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITYContent; } }
        private static int _COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITYContent = default;
        private static bool _COLOR_CORRECTION_ABERRATION_MODE_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#COLOR_CORRECTION_ABERRATION_MODE_OFF"/>
        /// </summary>
        public static int COLOR_CORRECTION_ABERRATION_MODE_OFF { get { if (!_COLOR_CORRECTION_ABERRATION_MODE_OFFReady) { _COLOR_CORRECTION_ABERRATION_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "COLOR_CORRECTION_ABERRATION_MODE_OFF"); _COLOR_CORRECTION_ABERRATION_MODE_OFFReady = true; } return _COLOR_CORRECTION_ABERRATION_MODE_OFFContent; } }
        private static int _COLOR_CORRECTION_ABERRATION_MODE_OFFContent = default;
        private static bool _COLOR_CORRECTION_ABERRATION_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#COLOR_CORRECTION_MODE_FAST"/>
        /// </summary>
        public static int COLOR_CORRECTION_MODE_FAST { get { if (!_COLOR_CORRECTION_MODE_FASTReady) { _COLOR_CORRECTION_MODE_FASTContent = SGetField<int>(LocalBridgeClazz, "COLOR_CORRECTION_MODE_FAST"); _COLOR_CORRECTION_MODE_FASTReady = true; } return _COLOR_CORRECTION_MODE_FASTContent; } }
        private static int _COLOR_CORRECTION_MODE_FASTContent = default;
        private static bool _COLOR_CORRECTION_MODE_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#COLOR_CORRECTION_MODE_HIGH_QUALITY"/>
        /// </summary>
        public static int COLOR_CORRECTION_MODE_HIGH_QUALITY { get { if (!_COLOR_CORRECTION_MODE_HIGH_QUALITYReady) { _COLOR_CORRECTION_MODE_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "COLOR_CORRECTION_MODE_HIGH_QUALITY"); _COLOR_CORRECTION_MODE_HIGH_QUALITYReady = true; } return _COLOR_CORRECTION_MODE_HIGH_QUALITYContent; } }
        private static int _COLOR_CORRECTION_MODE_HIGH_QUALITYContent = default;
        private static bool _COLOR_CORRECTION_MODE_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#COLOR_CORRECTION_MODE_TRANSFORM_MATRIX"/>
        /// </summary>
        public static int COLOR_CORRECTION_MODE_TRANSFORM_MATRIX { get { if (!_COLOR_CORRECTION_MODE_TRANSFORM_MATRIXReady) { _COLOR_CORRECTION_MODE_TRANSFORM_MATRIXContent = SGetField<int>(LocalBridgeClazz, "COLOR_CORRECTION_MODE_TRANSFORM_MATRIX"); _COLOR_CORRECTION_MODE_TRANSFORM_MATRIXReady = true; } return _COLOR_CORRECTION_MODE_TRANSFORM_MATRIXContent; } }
        private static int _COLOR_CORRECTION_MODE_TRANSFORM_MATRIXContent = default;
        private static bool _COLOR_CORRECTION_MODE_TRANSFORM_MATRIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_ANTIBANDING_MODE_50HZ"/>
        /// </summary>
        public static int CONTROL_AE_ANTIBANDING_MODE_50HZ { get { if (!_CONTROL_AE_ANTIBANDING_MODE_50HZReady) { _CONTROL_AE_ANTIBANDING_MODE_50HZContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_ANTIBANDING_MODE_50HZ"); _CONTROL_AE_ANTIBANDING_MODE_50HZReady = true; } return _CONTROL_AE_ANTIBANDING_MODE_50HZContent; } }
        private static int _CONTROL_AE_ANTIBANDING_MODE_50HZContent = default;
        private static bool _CONTROL_AE_ANTIBANDING_MODE_50HZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_ANTIBANDING_MODE_60HZ"/>
        /// </summary>
        public static int CONTROL_AE_ANTIBANDING_MODE_60HZ { get { if (!_CONTROL_AE_ANTIBANDING_MODE_60HZReady) { _CONTROL_AE_ANTIBANDING_MODE_60HZContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_ANTIBANDING_MODE_60HZ"); _CONTROL_AE_ANTIBANDING_MODE_60HZReady = true; } return _CONTROL_AE_ANTIBANDING_MODE_60HZContent; } }
        private static int _CONTROL_AE_ANTIBANDING_MODE_60HZContent = default;
        private static bool _CONTROL_AE_ANTIBANDING_MODE_60HZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_ANTIBANDING_MODE_AUTO"/>
        /// </summary>
        public static int CONTROL_AE_ANTIBANDING_MODE_AUTO { get { if (!_CONTROL_AE_ANTIBANDING_MODE_AUTOReady) { _CONTROL_AE_ANTIBANDING_MODE_AUTOContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_ANTIBANDING_MODE_AUTO"); _CONTROL_AE_ANTIBANDING_MODE_AUTOReady = true; } return _CONTROL_AE_ANTIBANDING_MODE_AUTOContent; } }
        private static int _CONTROL_AE_ANTIBANDING_MODE_AUTOContent = default;
        private static bool _CONTROL_AE_ANTIBANDING_MODE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_ANTIBANDING_MODE_OFF"/>
        /// </summary>
        public static int CONTROL_AE_ANTIBANDING_MODE_OFF { get { if (!_CONTROL_AE_ANTIBANDING_MODE_OFFReady) { _CONTROL_AE_ANTIBANDING_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_ANTIBANDING_MODE_OFF"); _CONTROL_AE_ANTIBANDING_MODE_OFFReady = true; } return _CONTROL_AE_ANTIBANDING_MODE_OFFContent; } }
        private static int _CONTROL_AE_ANTIBANDING_MODE_OFFContent = default;
        private static bool _CONTROL_AE_ANTIBANDING_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_MODE_OFF"/>
        /// </summary>
        public static int CONTROL_AE_MODE_OFF { get { if (!_CONTROL_AE_MODE_OFFReady) { _CONTROL_AE_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_MODE_OFF"); _CONTROL_AE_MODE_OFFReady = true; } return _CONTROL_AE_MODE_OFFContent; } }
        private static int _CONTROL_AE_MODE_OFFContent = default;
        private static bool _CONTROL_AE_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_MODE_ON"/>
        /// </summary>
        public static int CONTROL_AE_MODE_ON { get { if (!_CONTROL_AE_MODE_ONReady) { _CONTROL_AE_MODE_ONContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_MODE_ON"); _CONTROL_AE_MODE_ONReady = true; } return _CONTROL_AE_MODE_ONContent; } }
        private static int _CONTROL_AE_MODE_ONContent = default;
        private static bool _CONTROL_AE_MODE_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_MODE_ON_ALWAYS_FLASH"/>
        /// </summary>
        public static int CONTROL_AE_MODE_ON_ALWAYS_FLASH { get { if (!_CONTROL_AE_MODE_ON_ALWAYS_FLASHReady) { _CONTROL_AE_MODE_ON_ALWAYS_FLASHContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_MODE_ON_ALWAYS_FLASH"); _CONTROL_AE_MODE_ON_ALWAYS_FLASHReady = true; } return _CONTROL_AE_MODE_ON_ALWAYS_FLASHContent; } }
        private static int _CONTROL_AE_MODE_ON_ALWAYS_FLASHContent = default;
        private static bool _CONTROL_AE_MODE_ON_ALWAYS_FLASHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_MODE_ON_AUTO_FLASH"/>
        /// </summary>
        public static int CONTROL_AE_MODE_ON_AUTO_FLASH { get { if (!_CONTROL_AE_MODE_ON_AUTO_FLASHReady) { _CONTROL_AE_MODE_ON_AUTO_FLASHContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_MODE_ON_AUTO_FLASH"); _CONTROL_AE_MODE_ON_AUTO_FLASHReady = true; } return _CONTROL_AE_MODE_ON_AUTO_FLASHContent; } }
        private static int _CONTROL_AE_MODE_ON_AUTO_FLASHContent = default;
        private static bool _CONTROL_AE_MODE_ON_AUTO_FLASHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE"/>
        /// </summary>
        public static int CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE { get { if (!_CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYEReady) { _CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYE"); _CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYEReady = true; } return _CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYEContent; } }
        private static int _CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYEContent = default;
        private static bool _CONTROL_AE_MODE_ON_AUTO_FLASH_REDEYEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_MODE_ON_EXTERNAL_FLASH"/>
        /// </summary>
        public static int CONTROL_AE_MODE_ON_EXTERNAL_FLASH { get { if (!_CONTROL_AE_MODE_ON_EXTERNAL_FLASHReady) { _CONTROL_AE_MODE_ON_EXTERNAL_FLASHContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_MODE_ON_EXTERNAL_FLASH"); _CONTROL_AE_MODE_ON_EXTERNAL_FLASHReady = true; } return _CONTROL_AE_MODE_ON_EXTERNAL_FLASHContent; } }
        private static int _CONTROL_AE_MODE_ON_EXTERNAL_FLASHContent = default;
        private static bool _CONTROL_AE_MODE_ON_EXTERNAL_FLASHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITY"/>
        /// </summary>
        public static int CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITY { get { if (!_CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITYReady) { _CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITYContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITY"); _CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITYReady = true; } return _CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITYContent; } }
        private static int _CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITYContent = default;
        private static bool _CONTROL_AE_MODE_ON_LOW_LIGHT_BOOST_BRIGHTNESS_PRIORITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_PRECAPTURE_TRIGGER_CANCEL"/>
        /// </summary>
        public static int CONTROL_AE_PRECAPTURE_TRIGGER_CANCEL { get { if (!_CONTROL_AE_PRECAPTURE_TRIGGER_CANCELReady) { _CONTROL_AE_PRECAPTURE_TRIGGER_CANCELContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_PRECAPTURE_TRIGGER_CANCEL"); _CONTROL_AE_PRECAPTURE_TRIGGER_CANCELReady = true; } return _CONTROL_AE_PRECAPTURE_TRIGGER_CANCELContent; } }
        private static int _CONTROL_AE_PRECAPTURE_TRIGGER_CANCELContent = default;
        private static bool _CONTROL_AE_PRECAPTURE_TRIGGER_CANCELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_PRECAPTURE_TRIGGER_IDLE"/>
        /// </summary>
        public static int CONTROL_AE_PRECAPTURE_TRIGGER_IDLE { get { if (!_CONTROL_AE_PRECAPTURE_TRIGGER_IDLEReady) { _CONTROL_AE_PRECAPTURE_TRIGGER_IDLEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_PRECAPTURE_TRIGGER_IDLE"); _CONTROL_AE_PRECAPTURE_TRIGGER_IDLEReady = true; } return _CONTROL_AE_PRECAPTURE_TRIGGER_IDLEContent; } }
        private static int _CONTROL_AE_PRECAPTURE_TRIGGER_IDLEContent = default;
        private static bool _CONTROL_AE_PRECAPTURE_TRIGGER_IDLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_PRECAPTURE_TRIGGER_START"/>
        /// </summary>
        public static int CONTROL_AE_PRECAPTURE_TRIGGER_START { get { if (!_CONTROL_AE_PRECAPTURE_TRIGGER_STARTReady) { _CONTROL_AE_PRECAPTURE_TRIGGER_STARTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_PRECAPTURE_TRIGGER_START"); _CONTROL_AE_PRECAPTURE_TRIGGER_STARTReady = true; } return _CONTROL_AE_PRECAPTURE_TRIGGER_STARTContent; } }
        private static int _CONTROL_AE_PRECAPTURE_TRIGGER_STARTContent = default;
        private static bool _CONTROL_AE_PRECAPTURE_TRIGGER_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_STATE_CONVERGED"/>
        /// </summary>
        public static int CONTROL_AE_STATE_CONVERGED { get { if (!_CONTROL_AE_STATE_CONVERGEDReady) { _CONTROL_AE_STATE_CONVERGEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_STATE_CONVERGED"); _CONTROL_AE_STATE_CONVERGEDReady = true; } return _CONTROL_AE_STATE_CONVERGEDContent; } }
        private static int _CONTROL_AE_STATE_CONVERGEDContent = default;
        private static bool _CONTROL_AE_STATE_CONVERGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_STATE_FLASH_REQUIRED"/>
        /// </summary>
        public static int CONTROL_AE_STATE_FLASH_REQUIRED { get { if (!_CONTROL_AE_STATE_FLASH_REQUIREDReady) { _CONTROL_AE_STATE_FLASH_REQUIREDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_STATE_FLASH_REQUIRED"); _CONTROL_AE_STATE_FLASH_REQUIREDReady = true; } return _CONTROL_AE_STATE_FLASH_REQUIREDContent; } }
        private static int _CONTROL_AE_STATE_FLASH_REQUIREDContent = default;
        private static bool _CONTROL_AE_STATE_FLASH_REQUIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_STATE_INACTIVE"/>
        /// </summary>
        public static int CONTROL_AE_STATE_INACTIVE { get { if (!_CONTROL_AE_STATE_INACTIVEReady) { _CONTROL_AE_STATE_INACTIVEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_STATE_INACTIVE"); _CONTROL_AE_STATE_INACTIVEReady = true; } return _CONTROL_AE_STATE_INACTIVEContent; } }
        private static int _CONTROL_AE_STATE_INACTIVEContent = default;
        private static bool _CONTROL_AE_STATE_INACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_STATE_LOCKED"/>
        /// </summary>
        public static int CONTROL_AE_STATE_LOCKED { get { if (!_CONTROL_AE_STATE_LOCKEDReady) { _CONTROL_AE_STATE_LOCKEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_STATE_LOCKED"); _CONTROL_AE_STATE_LOCKEDReady = true; } return _CONTROL_AE_STATE_LOCKEDContent; } }
        private static int _CONTROL_AE_STATE_LOCKEDContent = default;
        private static bool _CONTROL_AE_STATE_LOCKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_STATE_PRECAPTURE"/>
        /// </summary>
        public static int CONTROL_AE_STATE_PRECAPTURE { get { if (!_CONTROL_AE_STATE_PRECAPTUREReady) { _CONTROL_AE_STATE_PRECAPTUREContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_STATE_PRECAPTURE"); _CONTROL_AE_STATE_PRECAPTUREReady = true; } return _CONTROL_AE_STATE_PRECAPTUREContent; } }
        private static int _CONTROL_AE_STATE_PRECAPTUREContent = default;
        private static bool _CONTROL_AE_STATE_PRECAPTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AE_STATE_SEARCHING"/>
        /// </summary>
        public static int CONTROL_AE_STATE_SEARCHING { get { if (!_CONTROL_AE_STATE_SEARCHINGReady) { _CONTROL_AE_STATE_SEARCHINGContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AE_STATE_SEARCHING"); _CONTROL_AE_STATE_SEARCHINGReady = true; } return _CONTROL_AE_STATE_SEARCHINGContent; } }
        private static int _CONTROL_AE_STATE_SEARCHINGContent = default;
        private static bool _CONTROL_AE_STATE_SEARCHINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_MODE_AUTO"/>
        /// </summary>
        public static int CONTROL_AF_MODE_AUTO { get { if (!_CONTROL_AF_MODE_AUTOReady) { _CONTROL_AF_MODE_AUTOContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_MODE_AUTO"); _CONTROL_AF_MODE_AUTOReady = true; } return _CONTROL_AF_MODE_AUTOContent; } }
        private static int _CONTROL_AF_MODE_AUTOContent = default;
        private static bool _CONTROL_AF_MODE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_MODE_CONTINUOUS_PICTURE"/>
        /// </summary>
        public static int CONTROL_AF_MODE_CONTINUOUS_PICTURE { get { if (!_CONTROL_AF_MODE_CONTINUOUS_PICTUREReady) { _CONTROL_AF_MODE_CONTINUOUS_PICTUREContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_MODE_CONTINUOUS_PICTURE"); _CONTROL_AF_MODE_CONTINUOUS_PICTUREReady = true; } return _CONTROL_AF_MODE_CONTINUOUS_PICTUREContent; } }
        private static int _CONTROL_AF_MODE_CONTINUOUS_PICTUREContent = default;
        private static bool _CONTROL_AF_MODE_CONTINUOUS_PICTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_MODE_CONTINUOUS_VIDEO"/>
        /// </summary>
        public static int CONTROL_AF_MODE_CONTINUOUS_VIDEO { get { if (!_CONTROL_AF_MODE_CONTINUOUS_VIDEOReady) { _CONTROL_AF_MODE_CONTINUOUS_VIDEOContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_MODE_CONTINUOUS_VIDEO"); _CONTROL_AF_MODE_CONTINUOUS_VIDEOReady = true; } return _CONTROL_AF_MODE_CONTINUOUS_VIDEOContent; } }
        private static int _CONTROL_AF_MODE_CONTINUOUS_VIDEOContent = default;
        private static bool _CONTROL_AF_MODE_CONTINUOUS_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_MODE_EDOF"/>
        /// </summary>
        public static int CONTROL_AF_MODE_EDOF { get { if (!_CONTROL_AF_MODE_EDOFReady) { _CONTROL_AF_MODE_EDOFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_MODE_EDOF"); _CONTROL_AF_MODE_EDOFReady = true; } return _CONTROL_AF_MODE_EDOFContent; } }
        private static int _CONTROL_AF_MODE_EDOFContent = default;
        private static bool _CONTROL_AF_MODE_EDOFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_MODE_MACRO"/>
        /// </summary>
        public static int CONTROL_AF_MODE_MACRO { get { if (!_CONTROL_AF_MODE_MACROReady) { _CONTROL_AF_MODE_MACROContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_MODE_MACRO"); _CONTROL_AF_MODE_MACROReady = true; } return _CONTROL_AF_MODE_MACROContent; } }
        private static int _CONTROL_AF_MODE_MACROContent = default;
        private static bool _CONTROL_AF_MODE_MACROReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_MODE_OFF"/>
        /// </summary>
        public static int CONTROL_AF_MODE_OFF { get { if (!_CONTROL_AF_MODE_OFFReady) { _CONTROL_AF_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_MODE_OFF"); _CONTROL_AF_MODE_OFFReady = true; } return _CONTROL_AF_MODE_OFFContent; } }
        private static int _CONTROL_AF_MODE_OFFContent = default;
        private static bool _CONTROL_AF_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_SCENE_CHANGE_DETECTED"/>
        /// </summary>
        public static int CONTROL_AF_SCENE_CHANGE_DETECTED { get { if (!_CONTROL_AF_SCENE_CHANGE_DETECTEDReady) { _CONTROL_AF_SCENE_CHANGE_DETECTEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_SCENE_CHANGE_DETECTED"); _CONTROL_AF_SCENE_CHANGE_DETECTEDReady = true; } return _CONTROL_AF_SCENE_CHANGE_DETECTEDContent; } }
        private static int _CONTROL_AF_SCENE_CHANGE_DETECTEDContent = default;
        private static bool _CONTROL_AF_SCENE_CHANGE_DETECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_SCENE_CHANGE_NOT_DETECTED"/>
        /// </summary>
        public static int CONTROL_AF_SCENE_CHANGE_NOT_DETECTED { get { if (!_CONTROL_AF_SCENE_CHANGE_NOT_DETECTEDReady) { _CONTROL_AF_SCENE_CHANGE_NOT_DETECTEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_SCENE_CHANGE_NOT_DETECTED"); _CONTROL_AF_SCENE_CHANGE_NOT_DETECTEDReady = true; } return _CONTROL_AF_SCENE_CHANGE_NOT_DETECTEDContent; } }
        private static int _CONTROL_AF_SCENE_CHANGE_NOT_DETECTEDContent = default;
        private static bool _CONTROL_AF_SCENE_CHANGE_NOT_DETECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_STATE_ACTIVE_SCAN"/>
        /// </summary>
        public static int CONTROL_AF_STATE_ACTIVE_SCAN { get { if (!_CONTROL_AF_STATE_ACTIVE_SCANReady) { _CONTROL_AF_STATE_ACTIVE_SCANContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_STATE_ACTIVE_SCAN"); _CONTROL_AF_STATE_ACTIVE_SCANReady = true; } return _CONTROL_AF_STATE_ACTIVE_SCANContent; } }
        private static int _CONTROL_AF_STATE_ACTIVE_SCANContent = default;
        private static bool _CONTROL_AF_STATE_ACTIVE_SCANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_STATE_FOCUSED_LOCKED"/>
        /// </summary>
        public static int CONTROL_AF_STATE_FOCUSED_LOCKED { get { if (!_CONTROL_AF_STATE_FOCUSED_LOCKEDReady) { _CONTROL_AF_STATE_FOCUSED_LOCKEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_STATE_FOCUSED_LOCKED"); _CONTROL_AF_STATE_FOCUSED_LOCKEDReady = true; } return _CONTROL_AF_STATE_FOCUSED_LOCKEDContent; } }
        private static int _CONTROL_AF_STATE_FOCUSED_LOCKEDContent = default;
        private static bool _CONTROL_AF_STATE_FOCUSED_LOCKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_STATE_INACTIVE"/>
        /// </summary>
        public static int CONTROL_AF_STATE_INACTIVE { get { if (!_CONTROL_AF_STATE_INACTIVEReady) { _CONTROL_AF_STATE_INACTIVEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_STATE_INACTIVE"); _CONTROL_AF_STATE_INACTIVEReady = true; } return _CONTROL_AF_STATE_INACTIVEContent; } }
        private static int _CONTROL_AF_STATE_INACTIVEContent = default;
        private static bool _CONTROL_AF_STATE_INACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_STATE_NOT_FOCUSED_LOCKED"/>
        /// </summary>
        public static int CONTROL_AF_STATE_NOT_FOCUSED_LOCKED { get { if (!_CONTROL_AF_STATE_NOT_FOCUSED_LOCKEDReady) { _CONTROL_AF_STATE_NOT_FOCUSED_LOCKEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_STATE_NOT_FOCUSED_LOCKED"); _CONTROL_AF_STATE_NOT_FOCUSED_LOCKEDReady = true; } return _CONTROL_AF_STATE_NOT_FOCUSED_LOCKEDContent; } }
        private static int _CONTROL_AF_STATE_NOT_FOCUSED_LOCKEDContent = default;
        private static bool _CONTROL_AF_STATE_NOT_FOCUSED_LOCKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_STATE_PASSIVE_FOCUSED"/>
        /// </summary>
        public static int CONTROL_AF_STATE_PASSIVE_FOCUSED { get { if (!_CONTROL_AF_STATE_PASSIVE_FOCUSEDReady) { _CONTROL_AF_STATE_PASSIVE_FOCUSEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_STATE_PASSIVE_FOCUSED"); _CONTROL_AF_STATE_PASSIVE_FOCUSEDReady = true; } return _CONTROL_AF_STATE_PASSIVE_FOCUSEDContent; } }
        private static int _CONTROL_AF_STATE_PASSIVE_FOCUSEDContent = default;
        private static bool _CONTROL_AF_STATE_PASSIVE_FOCUSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_STATE_PASSIVE_SCAN"/>
        /// </summary>
        public static int CONTROL_AF_STATE_PASSIVE_SCAN { get { if (!_CONTROL_AF_STATE_PASSIVE_SCANReady) { _CONTROL_AF_STATE_PASSIVE_SCANContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_STATE_PASSIVE_SCAN"); _CONTROL_AF_STATE_PASSIVE_SCANReady = true; } return _CONTROL_AF_STATE_PASSIVE_SCANContent; } }
        private static int _CONTROL_AF_STATE_PASSIVE_SCANContent = default;
        private static bool _CONTROL_AF_STATE_PASSIVE_SCANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_STATE_PASSIVE_UNFOCUSED"/>
        /// </summary>
        public static int CONTROL_AF_STATE_PASSIVE_UNFOCUSED { get { if (!_CONTROL_AF_STATE_PASSIVE_UNFOCUSEDReady) { _CONTROL_AF_STATE_PASSIVE_UNFOCUSEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_STATE_PASSIVE_UNFOCUSED"); _CONTROL_AF_STATE_PASSIVE_UNFOCUSEDReady = true; } return _CONTROL_AF_STATE_PASSIVE_UNFOCUSEDContent; } }
        private static int _CONTROL_AF_STATE_PASSIVE_UNFOCUSEDContent = default;
        private static bool _CONTROL_AF_STATE_PASSIVE_UNFOCUSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_TRIGGER_CANCEL"/>
        /// </summary>
        public static int CONTROL_AF_TRIGGER_CANCEL { get { if (!_CONTROL_AF_TRIGGER_CANCELReady) { _CONTROL_AF_TRIGGER_CANCELContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_TRIGGER_CANCEL"); _CONTROL_AF_TRIGGER_CANCELReady = true; } return _CONTROL_AF_TRIGGER_CANCELContent; } }
        private static int _CONTROL_AF_TRIGGER_CANCELContent = default;
        private static bool _CONTROL_AF_TRIGGER_CANCELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_TRIGGER_IDLE"/>
        /// </summary>
        public static int CONTROL_AF_TRIGGER_IDLE { get { if (!_CONTROL_AF_TRIGGER_IDLEReady) { _CONTROL_AF_TRIGGER_IDLEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_TRIGGER_IDLE"); _CONTROL_AF_TRIGGER_IDLEReady = true; } return _CONTROL_AF_TRIGGER_IDLEContent; } }
        private static int _CONTROL_AF_TRIGGER_IDLEContent = default;
        private static bool _CONTROL_AF_TRIGGER_IDLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AF_TRIGGER_START"/>
        /// </summary>
        public static int CONTROL_AF_TRIGGER_START { get { if (!_CONTROL_AF_TRIGGER_STARTReady) { _CONTROL_AF_TRIGGER_STARTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AF_TRIGGER_START"); _CONTROL_AF_TRIGGER_STARTReady = true; } return _CONTROL_AF_TRIGGER_STARTContent; } }
        private static int _CONTROL_AF_TRIGGER_STARTContent = default;
        private static bool _CONTROL_AF_TRIGGER_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AUTOFRAMING_OFF"/>
        /// </summary>
        public static int CONTROL_AUTOFRAMING_OFF { get { if (!_CONTROL_AUTOFRAMING_OFFReady) { _CONTROL_AUTOFRAMING_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AUTOFRAMING_OFF"); _CONTROL_AUTOFRAMING_OFFReady = true; } return _CONTROL_AUTOFRAMING_OFFContent; } }
        private static int _CONTROL_AUTOFRAMING_OFFContent = default;
        private static bool _CONTROL_AUTOFRAMING_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AUTOFRAMING_ON"/>
        /// </summary>
        public static int CONTROL_AUTOFRAMING_ON { get { if (!_CONTROL_AUTOFRAMING_ONReady) { _CONTROL_AUTOFRAMING_ONContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AUTOFRAMING_ON"); _CONTROL_AUTOFRAMING_ONReady = true; } return _CONTROL_AUTOFRAMING_ONContent; } }
        private static int _CONTROL_AUTOFRAMING_ONContent = default;
        private static bool _CONTROL_AUTOFRAMING_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AUTOFRAMING_STATE_CONVERGED"/>
        /// </summary>
        public static int CONTROL_AUTOFRAMING_STATE_CONVERGED { get { if (!_CONTROL_AUTOFRAMING_STATE_CONVERGEDReady) { _CONTROL_AUTOFRAMING_STATE_CONVERGEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AUTOFRAMING_STATE_CONVERGED"); _CONTROL_AUTOFRAMING_STATE_CONVERGEDReady = true; } return _CONTROL_AUTOFRAMING_STATE_CONVERGEDContent; } }
        private static int _CONTROL_AUTOFRAMING_STATE_CONVERGEDContent = default;
        private static bool _CONTROL_AUTOFRAMING_STATE_CONVERGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AUTOFRAMING_STATE_FRAMING"/>
        /// </summary>
        public static int CONTROL_AUTOFRAMING_STATE_FRAMING { get { if (!_CONTROL_AUTOFRAMING_STATE_FRAMINGReady) { _CONTROL_AUTOFRAMING_STATE_FRAMINGContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AUTOFRAMING_STATE_FRAMING"); _CONTROL_AUTOFRAMING_STATE_FRAMINGReady = true; } return _CONTROL_AUTOFRAMING_STATE_FRAMINGContent; } }
        private static int _CONTROL_AUTOFRAMING_STATE_FRAMINGContent = default;
        private static bool _CONTROL_AUTOFRAMING_STATE_FRAMINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AUTOFRAMING_STATE_INACTIVE"/>
        /// </summary>
        public static int CONTROL_AUTOFRAMING_STATE_INACTIVE { get { if (!_CONTROL_AUTOFRAMING_STATE_INACTIVEReady) { _CONTROL_AUTOFRAMING_STATE_INACTIVEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AUTOFRAMING_STATE_INACTIVE"); _CONTROL_AUTOFRAMING_STATE_INACTIVEReady = true; } return _CONTROL_AUTOFRAMING_STATE_INACTIVEContent; } }
        private static int _CONTROL_AUTOFRAMING_STATE_INACTIVEContent = default;
        private static bool _CONTROL_AUTOFRAMING_STATE_INACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_AUTO"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_AUTO { get { if (!_CONTROL_AWB_MODE_AUTOReady) { _CONTROL_AWB_MODE_AUTOContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_AUTO"); _CONTROL_AWB_MODE_AUTOReady = true; } return _CONTROL_AWB_MODE_AUTOContent; } }
        private static int _CONTROL_AWB_MODE_AUTOContent = default;
        private static bool _CONTROL_AWB_MODE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_CLOUDY_DAYLIGHT"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_CLOUDY_DAYLIGHT { get { if (!_CONTROL_AWB_MODE_CLOUDY_DAYLIGHTReady) { _CONTROL_AWB_MODE_CLOUDY_DAYLIGHTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_CLOUDY_DAYLIGHT"); _CONTROL_AWB_MODE_CLOUDY_DAYLIGHTReady = true; } return _CONTROL_AWB_MODE_CLOUDY_DAYLIGHTContent; } }
        private static int _CONTROL_AWB_MODE_CLOUDY_DAYLIGHTContent = default;
        private static bool _CONTROL_AWB_MODE_CLOUDY_DAYLIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_DAYLIGHT"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_DAYLIGHT { get { if (!_CONTROL_AWB_MODE_DAYLIGHTReady) { _CONTROL_AWB_MODE_DAYLIGHTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_DAYLIGHT"); _CONTROL_AWB_MODE_DAYLIGHTReady = true; } return _CONTROL_AWB_MODE_DAYLIGHTContent; } }
        private static int _CONTROL_AWB_MODE_DAYLIGHTContent = default;
        private static bool _CONTROL_AWB_MODE_DAYLIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_FLUORESCENT"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_FLUORESCENT { get { if (!_CONTROL_AWB_MODE_FLUORESCENTReady) { _CONTROL_AWB_MODE_FLUORESCENTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_FLUORESCENT"); _CONTROL_AWB_MODE_FLUORESCENTReady = true; } return _CONTROL_AWB_MODE_FLUORESCENTContent; } }
        private static int _CONTROL_AWB_MODE_FLUORESCENTContent = default;
        private static bool _CONTROL_AWB_MODE_FLUORESCENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_INCANDESCENT"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_INCANDESCENT { get { if (!_CONTROL_AWB_MODE_INCANDESCENTReady) { _CONTROL_AWB_MODE_INCANDESCENTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_INCANDESCENT"); _CONTROL_AWB_MODE_INCANDESCENTReady = true; } return _CONTROL_AWB_MODE_INCANDESCENTContent; } }
        private static int _CONTROL_AWB_MODE_INCANDESCENTContent = default;
        private static bool _CONTROL_AWB_MODE_INCANDESCENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_OFF"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_OFF { get { if (!_CONTROL_AWB_MODE_OFFReady) { _CONTROL_AWB_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_OFF"); _CONTROL_AWB_MODE_OFFReady = true; } return _CONTROL_AWB_MODE_OFFContent; } }
        private static int _CONTROL_AWB_MODE_OFFContent = default;
        private static bool _CONTROL_AWB_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_SHADE"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_SHADE { get { if (!_CONTROL_AWB_MODE_SHADEReady) { _CONTROL_AWB_MODE_SHADEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_SHADE"); _CONTROL_AWB_MODE_SHADEReady = true; } return _CONTROL_AWB_MODE_SHADEContent; } }
        private static int _CONTROL_AWB_MODE_SHADEContent = default;
        private static bool _CONTROL_AWB_MODE_SHADEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_TWILIGHT"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_TWILIGHT { get { if (!_CONTROL_AWB_MODE_TWILIGHTReady) { _CONTROL_AWB_MODE_TWILIGHTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_TWILIGHT"); _CONTROL_AWB_MODE_TWILIGHTReady = true; } return _CONTROL_AWB_MODE_TWILIGHTContent; } }
        private static int _CONTROL_AWB_MODE_TWILIGHTContent = default;
        private static bool _CONTROL_AWB_MODE_TWILIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_MODE_WARM_FLUORESCENT"/>
        /// </summary>
        public static int CONTROL_AWB_MODE_WARM_FLUORESCENT { get { if (!_CONTROL_AWB_MODE_WARM_FLUORESCENTReady) { _CONTROL_AWB_MODE_WARM_FLUORESCENTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_MODE_WARM_FLUORESCENT"); _CONTROL_AWB_MODE_WARM_FLUORESCENTReady = true; } return _CONTROL_AWB_MODE_WARM_FLUORESCENTContent; } }
        private static int _CONTROL_AWB_MODE_WARM_FLUORESCENTContent = default;
        private static bool _CONTROL_AWB_MODE_WARM_FLUORESCENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_STATE_CONVERGED"/>
        /// </summary>
        public static int CONTROL_AWB_STATE_CONVERGED { get { if (!_CONTROL_AWB_STATE_CONVERGEDReady) { _CONTROL_AWB_STATE_CONVERGEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_STATE_CONVERGED"); _CONTROL_AWB_STATE_CONVERGEDReady = true; } return _CONTROL_AWB_STATE_CONVERGEDContent; } }
        private static int _CONTROL_AWB_STATE_CONVERGEDContent = default;
        private static bool _CONTROL_AWB_STATE_CONVERGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_STATE_INACTIVE"/>
        /// </summary>
        public static int CONTROL_AWB_STATE_INACTIVE { get { if (!_CONTROL_AWB_STATE_INACTIVEReady) { _CONTROL_AWB_STATE_INACTIVEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_STATE_INACTIVE"); _CONTROL_AWB_STATE_INACTIVEReady = true; } return _CONTROL_AWB_STATE_INACTIVEContent; } }
        private static int _CONTROL_AWB_STATE_INACTIVEContent = default;
        private static bool _CONTROL_AWB_STATE_INACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_STATE_LOCKED"/>
        /// </summary>
        public static int CONTROL_AWB_STATE_LOCKED { get { if (!_CONTROL_AWB_STATE_LOCKEDReady) { _CONTROL_AWB_STATE_LOCKEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_STATE_LOCKED"); _CONTROL_AWB_STATE_LOCKEDReady = true; } return _CONTROL_AWB_STATE_LOCKEDContent; } }
        private static int _CONTROL_AWB_STATE_LOCKEDContent = default;
        private static bool _CONTROL_AWB_STATE_LOCKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_AWB_STATE_SEARCHING"/>
        /// </summary>
        public static int CONTROL_AWB_STATE_SEARCHING { get { if (!_CONTROL_AWB_STATE_SEARCHINGReady) { _CONTROL_AWB_STATE_SEARCHINGContent = SGetField<int>(LocalBridgeClazz, "CONTROL_AWB_STATE_SEARCHING"); _CONTROL_AWB_STATE_SEARCHINGReady = true; } return _CONTROL_AWB_STATE_SEARCHINGContent; } }
        private static int _CONTROL_AWB_STATE_SEARCHINGContent = default;
        private static bool _CONTROL_AWB_STATE_SEARCHINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_CAPTURE_INTENT_CUSTOM"/>
        /// </summary>
        public static int CONTROL_CAPTURE_INTENT_CUSTOM { get { if (!_CONTROL_CAPTURE_INTENT_CUSTOMReady) { _CONTROL_CAPTURE_INTENT_CUSTOMContent = SGetField<int>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT_CUSTOM"); _CONTROL_CAPTURE_INTENT_CUSTOMReady = true; } return _CONTROL_CAPTURE_INTENT_CUSTOMContent; } }
        private static int _CONTROL_CAPTURE_INTENT_CUSTOMContent = default;
        private static bool _CONTROL_CAPTURE_INTENT_CUSTOMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_CAPTURE_INTENT_MANUAL"/>
        /// </summary>
        public static int CONTROL_CAPTURE_INTENT_MANUAL { get { if (!_CONTROL_CAPTURE_INTENT_MANUALReady) { _CONTROL_CAPTURE_INTENT_MANUALContent = SGetField<int>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT_MANUAL"); _CONTROL_CAPTURE_INTENT_MANUALReady = true; } return _CONTROL_CAPTURE_INTENT_MANUALContent; } }
        private static int _CONTROL_CAPTURE_INTENT_MANUALContent = default;
        private static bool _CONTROL_CAPTURE_INTENT_MANUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_CAPTURE_INTENT_MOTION_TRACKING"/>
        /// </summary>
        public static int CONTROL_CAPTURE_INTENT_MOTION_TRACKING { get { if (!_CONTROL_CAPTURE_INTENT_MOTION_TRACKINGReady) { _CONTROL_CAPTURE_INTENT_MOTION_TRACKINGContent = SGetField<int>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT_MOTION_TRACKING"); _CONTROL_CAPTURE_INTENT_MOTION_TRACKINGReady = true; } return _CONTROL_CAPTURE_INTENT_MOTION_TRACKINGContent; } }
        private static int _CONTROL_CAPTURE_INTENT_MOTION_TRACKINGContent = default;
        private static bool _CONTROL_CAPTURE_INTENT_MOTION_TRACKINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_CAPTURE_INTENT_PREVIEW"/>
        /// </summary>
        public static int CONTROL_CAPTURE_INTENT_PREVIEW { get { if (!_CONTROL_CAPTURE_INTENT_PREVIEWReady) { _CONTROL_CAPTURE_INTENT_PREVIEWContent = SGetField<int>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT_PREVIEW"); _CONTROL_CAPTURE_INTENT_PREVIEWReady = true; } return _CONTROL_CAPTURE_INTENT_PREVIEWContent; } }
        private static int _CONTROL_CAPTURE_INTENT_PREVIEWContent = default;
        private static bool _CONTROL_CAPTURE_INTENT_PREVIEWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_CAPTURE_INTENT_STILL_CAPTURE"/>
        /// </summary>
        public static int CONTROL_CAPTURE_INTENT_STILL_CAPTURE { get { if (!_CONTROL_CAPTURE_INTENT_STILL_CAPTUREReady) { _CONTROL_CAPTURE_INTENT_STILL_CAPTUREContent = SGetField<int>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT_STILL_CAPTURE"); _CONTROL_CAPTURE_INTENT_STILL_CAPTUREReady = true; } return _CONTROL_CAPTURE_INTENT_STILL_CAPTUREContent; } }
        private static int _CONTROL_CAPTURE_INTENT_STILL_CAPTUREContent = default;
        private static bool _CONTROL_CAPTURE_INTENT_STILL_CAPTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_CAPTURE_INTENT_VIDEO_RECORD"/>
        /// </summary>
        public static int CONTROL_CAPTURE_INTENT_VIDEO_RECORD { get { if (!_CONTROL_CAPTURE_INTENT_VIDEO_RECORDReady) { _CONTROL_CAPTURE_INTENT_VIDEO_RECORDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT_VIDEO_RECORD"); _CONTROL_CAPTURE_INTENT_VIDEO_RECORDReady = true; } return _CONTROL_CAPTURE_INTENT_VIDEO_RECORDContent; } }
        private static int _CONTROL_CAPTURE_INTENT_VIDEO_RECORDContent = default;
        private static bool _CONTROL_CAPTURE_INTENT_VIDEO_RECORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOT"/>
        /// </summary>
        public static int CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOT { get { if (!_CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOTReady) { _CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOT"); _CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOTReady = true; } return _CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOTContent; } }
        private static int _CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOTContent = default;
        private static bool _CONTROL_CAPTURE_INTENT_VIDEO_SNAPSHOTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG"/>
        /// </summary>
        public static int CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG { get { if (!_CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAGReady) { _CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAGContent = SGetField<int>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAG"); _CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAGReady = true; } return _CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAGContent; } }
        private static int _CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAGContent = default;
        private static bool _CONTROL_CAPTURE_INTENT_ZERO_SHUTTER_LAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_AQUA"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_AQUA { get { if (!_CONTROL_EFFECT_MODE_AQUAReady) { _CONTROL_EFFECT_MODE_AQUAContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_AQUA"); _CONTROL_EFFECT_MODE_AQUAReady = true; } return _CONTROL_EFFECT_MODE_AQUAContent; } }
        private static int _CONTROL_EFFECT_MODE_AQUAContent = default;
        private static bool _CONTROL_EFFECT_MODE_AQUAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_BLACKBOARD"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_BLACKBOARD { get { if (!_CONTROL_EFFECT_MODE_BLACKBOARDReady) { _CONTROL_EFFECT_MODE_BLACKBOARDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_BLACKBOARD"); _CONTROL_EFFECT_MODE_BLACKBOARDReady = true; } return _CONTROL_EFFECT_MODE_BLACKBOARDContent; } }
        private static int _CONTROL_EFFECT_MODE_BLACKBOARDContent = default;
        private static bool _CONTROL_EFFECT_MODE_BLACKBOARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_MONO"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_MONO { get { if (!_CONTROL_EFFECT_MODE_MONOReady) { _CONTROL_EFFECT_MODE_MONOContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_MONO"); _CONTROL_EFFECT_MODE_MONOReady = true; } return _CONTROL_EFFECT_MODE_MONOContent; } }
        private static int _CONTROL_EFFECT_MODE_MONOContent = default;
        private static bool _CONTROL_EFFECT_MODE_MONOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_NEGATIVE"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_NEGATIVE { get { if (!_CONTROL_EFFECT_MODE_NEGATIVEReady) { _CONTROL_EFFECT_MODE_NEGATIVEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_NEGATIVE"); _CONTROL_EFFECT_MODE_NEGATIVEReady = true; } return _CONTROL_EFFECT_MODE_NEGATIVEContent; } }
        private static int _CONTROL_EFFECT_MODE_NEGATIVEContent = default;
        private static bool _CONTROL_EFFECT_MODE_NEGATIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_OFF"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_OFF { get { if (!_CONTROL_EFFECT_MODE_OFFReady) { _CONTROL_EFFECT_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_OFF"); _CONTROL_EFFECT_MODE_OFFReady = true; } return _CONTROL_EFFECT_MODE_OFFContent; } }
        private static int _CONTROL_EFFECT_MODE_OFFContent = default;
        private static bool _CONTROL_EFFECT_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_POSTERIZE"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_POSTERIZE { get { if (!_CONTROL_EFFECT_MODE_POSTERIZEReady) { _CONTROL_EFFECT_MODE_POSTERIZEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_POSTERIZE"); _CONTROL_EFFECT_MODE_POSTERIZEReady = true; } return _CONTROL_EFFECT_MODE_POSTERIZEContent; } }
        private static int _CONTROL_EFFECT_MODE_POSTERIZEContent = default;
        private static bool _CONTROL_EFFECT_MODE_POSTERIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_SEPIA"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_SEPIA { get { if (!_CONTROL_EFFECT_MODE_SEPIAReady) { _CONTROL_EFFECT_MODE_SEPIAContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_SEPIA"); _CONTROL_EFFECT_MODE_SEPIAReady = true; } return _CONTROL_EFFECT_MODE_SEPIAContent; } }
        private static int _CONTROL_EFFECT_MODE_SEPIAContent = default;
        private static bool _CONTROL_EFFECT_MODE_SEPIAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_SOLARIZE"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_SOLARIZE { get { if (!_CONTROL_EFFECT_MODE_SOLARIZEReady) { _CONTROL_EFFECT_MODE_SOLARIZEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_SOLARIZE"); _CONTROL_EFFECT_MODE_SOLARIZEReady = true; } return _CONTROL_EFFECT_MODE_SOLARIZEContent; } }
        private static int _CONTROL_EFFECT_MODE_SOLARIZEContent = default;
        private static bool _CONTROL_EFFECT_MODE_SOLARIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EFFECT_MODE_WHITEBOARD"/>
        /// </summary>
        public static int CONTROL_EFFECT_MODE_WHITEBOARD { get { if (!_CONTROL_EFFECT_MODE_WHITEBOARDReady) { _CONTROL_EFFECT_MODE_WHITEBOARDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EFFECT_MODE_WHITEBOARD"); _CONTROL_EFFECT_MODE_WHITEBOARDReady = true; } return _CONTROL_EFFECT_MODE_WHITEBOARDContent; } }
        private static int _CONTROL_EFFECT_MODE_WHITEBOARDContent = default;
        private static bool _CONTROL_EFFECT_MODE_WHITEBOARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUS"/>
        /// </summary>
        public static int CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUS { get { if (!_CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUSReady) { _CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUSContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUS"); _CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUSReady = true; } return _CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUSContent; } }
        private static int _CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUSContent = default;
        private static bool _CONTROL_EXTENDED_SCENE_MODE_BOKEH_CONTINUOUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTURE"/>
        /// </summary>
        public static int CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTURE { get { if (!_CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTUREReady) { _CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTUREContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTURE"); _CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTUREReady = true; } return _CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTUREContent; } }
        private static int _CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTUREContent = default;
        private static bool _CONTROL_EXTENDED_SCENE_MODE_BOKEH_STILL_CAPTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_EXTENDED_SCENE_MODE_DISABLED"/>
        /// </summary>
        public static int CONTROL_EXTENDED_SCENE_MODE_DISABLED { get { if (!_CONTROL_EXTENDED_SCENE_MODE_DISABLEDReady) { _CONTROL_EXTENDED_SCENE_MODE_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_EXTENDED_SCENE_MODE_DISABLED"); _CONTROL_EXTENDED_SCENE_MODE_DISABLEDReady = true; } return _CONTROL_EXTENDED_SCENE_MODE_DISABLEDContent; } }
        private static int _CONTROL_EXTENDED_SCENE_MODE_DISABLEDContent = default;
        private static bool _CONTROL_EXTENDED_SCENE_MODE_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVE"/>
        /// </summary>
        public static int CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVE { get { if (!_CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVEReady) { _CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVE"); _CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVEReady = true; } return _CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVEContent; } }
        private static int _CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVEContent = default;
        private static bool _CONTROL_LOW_LIGHT_BOOST_STATE_ACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVE"/>
        /// </summary>
        public static int CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVE { get { if (!_CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVEReady) { _CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVE"); _CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVEReady = true; } return _CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVEContent; } }
        private static int _CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVEContent = default;
        private static bool _CONTROL_LOW_LIGHT_BOOST_STATE_INACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_MODE_AUTO"/>
        /// </summary>
        public static int CONTROL_MODE_AUTO { get { if (!_CONTROL_MODE_AUTOReady) { _CONTROL_MODE_AUTOContent = SGetField<int>(LocalBridgeClazz, "CONTROL_MODE_AUTO"); _CONTROL_MODE_AUTOReady = true; } return _CONTROL_MODE_AUTOContent; } }
        private static int _CONTROL_MODE_AUTOContent = default;
        private static bool _CONTROL_MODE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_MODE_OFF"/>
        /// </summary>
        public static int CONTROL_MODE_OFF { get { if (!_CONTROL_MODE_OFFReady) { _CONTROL_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_MODE_OFF"); _CONTROL_MODE_OFFReady = true; } return _CONTROL_MODE_OFFContent; } }
        private static int _CONTROL_MODE_OFFContent = default;
        private static bool _CONTROL_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_MODE_OFF_KEEP_STATE"/>
        /// </summary>
        public static int CONTROL_MODE_OFF_KEEP_STATE { get { if (!_CONTROL_MODE_OFF_KEEP_STATEReady) { _CONTROL_MODE_OFF_KEEP_STATEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_MODE_OFF_KEEP_STATE"); _CONTROL_MODE_OFF_KEEP_STATEReady = true; } return _CONTROL_MODE_OFF_KEEP_STATEContent; } }
        private static int _CONTROL_MODE_OFF_KEEP_STATEContent = default;
        private static bool _CONTROL_MODE_OFF_KEEP_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_MODE_USE_EXTENDED_SCENE_MODE"/>
        /// </summary>
        public static int CONTROL_MODE_USE_EXTENDED_SCENE_MODE { get { if (!_CONTROL_MODE_USE_EXTENDED_SCENE_MODEReady) { _CONTROL_MODE_USE_EXTENDED_SCENE_MODEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_MODE_USE_EXTENDED_SCENE_MODE"); _CONTROL_MODE_USE_EXTENDED_SCENE_MODEReady = true; } return _CONTROL_MODE_USE_EXTENDED_SCENE_MODEContent; } }
        private static int _CONTROL_MODE_USE_EXTENDED_SCENE_MODEContent = default;
        private static bool _CONTROL_MODE_USE_EXTENDED_SCENE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_MODE_USE_SCENE_MODE"/>
        /// </summary>
        public static int CONTROL_MODE_USE_SCENE_MODE { get { if (!_CONTROL_MODE_USE_SCENE_MODEReady) { _CONTROL_MODE_USE_SCENE_MODEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_MODE_USE_SCENE_MODE"); _CONTROL_MODE_USE_SCENE_MODEReady = true; } return _CONTROL_MODE_USE_SCENE_MODEContent; } }
        private static int _CONTROL_MODE_USE_SCENE_MODEContent = default;
        private static bool _CONTROL_MODE_USE_SCENE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_ACTION"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_ACTION { get { if (!_CONTROL_SCENE_MODE_ACTIONReady) { _CONTROL_SCENE_MODE_ACTIONContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_ACTION"); _CONTROL_SCENE_MODE_ACTIONReady = true; } return _CONTROL_SCENE_MODE_ACTIONContent; } }
        private static int _CONTROL_SCENE_MODE_ACTIONContent = default;
        private static bool _CONTROL_SCENE_MODE_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_BARCODE"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_BARCODE { get { if (!_CONTROL_SCENE_MODE_BARCODEReady) { _CONTROL_SCENE_MODE_BARCODEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_BARCODE"); _CONTROL_SCENE_MODE_BARCODEReady = true; } return _CONTROL_SCENE_MODE_BARCODEContent; } }
        private static int _CONTROL_SCENE_MODE_BARCODEContent = default;
        private static bool _CONTROL_SCENE_MODE_BARCODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_BEACH"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_BEACH { get { if (!_CONTROL_SCENE_MODE_BEACHReady) { _CONTROL_SCENE_MODE_BEACHContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_BEACH"); _CONTROL_SCENE_MODE_BEACHReady = true; } return _CONTROL_SCENE_MODE_BEACHContent; } }
        private static int _CONTROL_SCENE_MODE_BEACHContent = default;
        private static bool _CONTROL_SCENE_MODE_BEACHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_CANDLELIGHT"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_CANDLELIGHT { get { if (!_CONTROL_SCENE_MODE_CANDLELIGHTReady) { _CONTROL_SCENE_MODE_CANDLELIGHTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_CANDLELIGHT"); _CONTROL_SCENE_MODE_CANDLELIGHTReady = true; } return _CONTROL_SCENE_MODE_CANDLELIGHTContent; } }
        private static int _CONTROL_SCENE_MODE_CANDLELIGHTContent = default;
        private static bool _CONTROL_SCENE_MODE_CANDLELIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_DISABLED"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_DISABLED { get { if (!_CONTROL_SCENE_MODE_DISABLEDReady) { _CONTROL_SCENE_MODE_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_DISABLED"); _CONTROL_SCENE_MODE_DISABLEDReady = true; } return _CONTROL_SCENE_MODE_DISABLEDContent; } }
        private static int _CONTROL_SCENE_MODE_DISABLEDContent = default;
        private static bool _CONTROL_SCENE_MODE_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_FACE_PRIORITY"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_FACE_PRIORITY { get { if (!_CONTROL_SCENE_MODE_FACE_PRIORITYReady) { _CONTROL_SCENE_MODE_FACE_PRIORITYContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_FACE_PRIORITY"); _CONTROL_SCENE_MODE_FACE_PRIORITYReady = true; } return _CONTROL_SCENE_MODE_FACE_PRIORITYContent; } }
        private static int _CONTROL_SCENE_MODE_FACE_PRIORITYContent = default;
        private static bool _CONTROL_SCENE_MODE_FACE_PRIORITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_FIREWORKS"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_FIREWORKS { get { if (!_CONTROL_SCENE_MODE_FIREWORKSReady) { _CONTROL_SCENE_MODE_FIREWORKSContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_FIREWORKS"); _CONTROL_SCENE_MODE_FIREWORKSReady = true; } return _CONTROL_SCENE_MODE_FIREWORKSContent; } }
        private static int _CONTROL_SCENE_MODE_FIREWORKSContent = default;
        private static bool _CONTROL_SCENE_MODE_FIREWORKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_HDR"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_HDR { get { if (!_CONTROL_SCENE_MODE_HDRReady) { _CONTROL_SCENE_MODE_HDRContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_HDR"); _CONTROL_SCENE_MODE_HDRReady = true; } return _CONTROL_SCENE_MODE_HDRContent; } }
        private static int _CONTROL_SCENE_MODE_HDRContent = default;
        private static bool _CONTROL_SCENE_MODE_HDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_HIGH_SPEED_VIDEO"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int CONTROL_SCENE_MODE_HIGH_SPEED_VIDEO { get { if (!_CONTROL_SCENE_MODE_HIGH_SPEED_VIDEOReady) { _CONTROL_SCENE_MODE_HIGH_SPEED_VIDEOContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_HIGH_SPEED_VIDEO"); _CONTROL_SCENE_MODE_HIGH_SPEED_VIDEOReady = true; } return _CONTROL_SCENE_MODE_HIGH_SPEED_VIDEOContent; } }
        private static int _CONTROL_SCENE_MODE_HIGH_SPEED_VIDEOContent = default;
        private static bool _CONTROL_SCENE_MODE_HIGH_SPEED_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_LANDSCAPE"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_LANDSCAPE { get { if (!_CONTROL_SCENE_MODE_LANDSCAPEReady) { _CONTROL_SCENE_MODE_LANDSCAPEContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_LANDSCAPE"); _CONTROL_SCENE_MODE_LANDSCAPEReady = true; } return _CONTROL_SCENE_MODE_LANDSCAPEContent; } }
        private static int _CONTROL_SCENE_MODE_LANDSCAPEContent = default;
        private static bool _CONTROL_SCENE_MODE_LANDSCAPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_NIGHT"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_NIGHT { get { if (!_CONTROL_SCENE_MODE_NIGHTReady) { _CONTROL_SCENE_MODE_NIGHTContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_NIGHT"); _CONTROL_SCENE_MODE_NIGHTReady = true; } return _CONTROL_SCENE_MODE_NIGHTContent; } }
        private static int _CONTROL_SCENE_MODE_NIGHTContent = default;
        private static bool _CONTROL_SCENE_MODE_NIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_NIGHT_PORTRAIT"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_NIGHT_PORTRAIT { get { if (!_CONTROL_SCENE_MODE_NIGHT_PORTRAITReady) { _CONTROL_SCENE_MODE_NIGHT_PORTRAITContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_NIGHT_PORTRAIT"); _CONTROL_SCENE_MODE_NIGHT_PORTRAITReady = true; } return _CONTROL_SCENE_MODE_NIGHT_PORTRAITContent; } }
        private static int _CONTROL_SCENE_MODE_NIGHT_PORTRAITContent = default;
        private static bool _CONTROL_SCENE_MODE_NIGHT_PORTRAITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_PARTY"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_PARTY { get { if (!_CONTROL_SCENE_MODE_PARTYReady) { _CONTROL_SCENE_MODE_PARTYContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_PARTY"); _CONTROL_SCENE_MODE_PARTYReady = true; } return _CONTROL_SCENE_MODE_PARTYContent; } }
        private static int _CONTROL_SCENE_MODE_PARTYContent = default;
        private static bool _CONTROL_SCENE_MODE_PARTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_PORTRAIT"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_PORTRAIT { get { if (!_CONTROL_SCENE_MODE_PORTRAITReady) { _CONTROL_SCENE_MODE_PORTRAITContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_PORTRAIT"); _CONTROL_SCENE_MODE_PORTRAITReady = true; } return _CONTROL_SCENE_MODE_PORTRAITContent; } }
        private static int _CONTROL_SCENE_MODE_PORTRAITContent = default;
        private static bool _CONTROL_SCENE_MODE_PORTRAITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_SNOW"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_SNOW { get { if (!_CONTROL_SCENE_MODE_SNOWReady) { _CONTROL_SCENE_MODE_SNOWContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_SNOW"); _CONTROL_SCENE_MODE_SNOWReady = true; } return _CONTROL_SCENE_MODE_SNOWContent; } }
        private static int _CONTROL_SCENE_MODE_SNOWContent = default;
        private static bool _CONTROL_SCENE_MODE_SNOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_SPORTS"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_SPORTS { get { if (!_CONTROL_SCENE_MODE_SPORTSReady) { _CONTROL_SCENE_MODE_SPORTSContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_SPORTS"); _CONTROL_SCENE_MODE_SPORTSReady = true; } return _CONTROL_SCENE_MODE_SPORTSContent; } }
        private static int _CONTROL_SCENE_MODE_SPORTSContent = default;
        private static bool _CONTROL_SCENE_MODE_SPORTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_STEADYPHOTO"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_STEADYPHOTO { get { if (!_CONTROL_SCENE_MODE_STEADYPHOTOReady) { _CONTROL_SCENE_MODE_STEADYPHOTOContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_STEADYPHOTO"); _CONTROL_SCENE_MODE_STEADYPHOTOReady = true; } return _CONTROL_SCENE_MODE_STEADYPHOTOContent; } }
        private static int _CONTROL_SCENE_MODE_STEADYPHOTOContent = default;
        private static bool _CONTROL_SCENE_MODE_STEADYPHOTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_SUNSET"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_SUNSET { get { if (!_CONTROL_SCENE_MODE_SUNSETReady) { _CONTROL_SCENE_MODE_SUNSETContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_SUNSET"); _CONTROL_SCENE_MODE_SUNSETReady = true; } return _CONTROL_SCENE_MODE_SUNSETContent; } }
        private static int _CONTROL_SCENE_MODE_SUNSETContent = default;
        private static bool _CONTROL_SCENE_MODE_SUNSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SCENE_MODE_THEATRE"/>
        /// </summary>
        public static int CONTROL_SCENE_MODE_THEATRE { get { if (!_CONTROL_SCENE_MODE_THEATREReady) { _CONTROL_SCENE_MODE_THEATREContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SCENE_MODE_THEATRE"); _CONTROL_SCENE_MODE_THEATREReady = true; } return _CONTROL_SCENE_MODE_THEATREContent; } }
        private static int _CONTROL_SCENE_MODE_THEATREContent = default;
        private static bool _CONTROL_SCENE_MODE_THEATREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SETTINGS_OVERRIDE_OFF"/>
        /// </summary>
        public static int CONTROL_SETTINGS_OVERRIDE_OFF { get { if (!_CONTROL_SETTINGS_OVERRIDE_OFFReady) { _CONTROL_SETTINGS_OVERRIDE_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SETTINGS_OVERRIDE_OFF"); _CONTROL_SETTINGS_OVERRIDE_OFFReady = true; } return _CONTROL_SETTINGS_OVERRIDE_OFFContent; } }
        private static int _CONTROL_SETTINGS_OVERRIDE_OFFContent = default;
        private static bool _CONTROL_SETTINGS_OVERRIDE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_SETTINGS_OVERRIDE_ZOOM"/>
        /// </summary>
        public static int CONTROL_SETTINGS_OVERRIDE_ZOOM { get { if (!_CONTROL_SETTINGS_OVERRIDE_ZOOMReady) { _CONTROL_SETTINGS_OVERRIDE_ZOOMContent = SGetField<int>(LocalBridgeClazz, "CONTROL_SETTINGS_OVERRIDE_ZOOM"); _CONTROL_SETTINGS_OVERRIDE_ZOOMReady = true; } return _CONTROL_SETTINGS_OVERRIDE_ZOOMContent; } }
        private static int _CONTROL_SETTINGS_OVERRIDE_ZOOMContent = default;
        private static bool _CONTROL_SETTINGS_OVERRIDE_ZOOMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_VIDEO_STABILIZATION_MODE_OFF"/>
        /// </summary>
        public static int CONTROL_VIDEO_STABILIZATION_MODE_OFF { get { if (!_CONTROL_VIDEO_STABILIZATION_MODE_OFFReady) { _CONTROL_VIDEO_STABILIZATION_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "CONTROL_VIDEO_STABILIZATION_MODE_OFF"); _CONTROL_VIDEO_STABILIZATION_MODE_OFFReady = true; } return _CONTROL_VIDEO_STABILIZATION_MODE_OFFContent; } }
        private static int _CONTROL_VIDEO_STABILIZATION_MODE_OFFContent = default;
        private static bool _CONTROL_VIDEO_STABILIZATION_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_VIDEO_STABILIZATION_MODE_ON"/>
        /// </summary>
        public static int CONTROL_VIDEO_STABILIZATION_MODE_ON { get { if (!_CONTROL_VIDEO_STABILIZATION_MODE_ONReady) { _CONTROL_VIDEO_STABILIZATION_MODE_ONContent = SGetField<int>(LocalBridgeClazz, "CONTROL_VIDEO_STABILIZATION_MODE_ON"); _CONTROL_VIDEO_STABILIZATION_MODE_ONReady = true; } return _CONTROL_VIDEO_STABILIZATION_MODE_ONContent; } }
        private static int _CONTROL_VIDEO_STABILIZATION_MODE_ONContent = default;
        private static bool _CONTROL_VIDEO_STABILIZATION_MODE_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATION"/>
        /// </summary>
        public static int CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATION { get { if (!_CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATIONReady) { _CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATIONContent = SGetField<int>(LocalBridgeClazz, "CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATION"); _CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATIONReady = true; } return _CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATIONContent; } }
        private static int _CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATIONContent = default;
        private static bool _CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#DISTORTION_CORRECTION_MODE_FAST"/>
        /// </summary>
        public static int DISTORTION_CORRECTION_MODE_FAST { get { if (!_DISTORTION_CORRECTION_MODE_FASTReady) { _DISTORTION_CORRECTION_MODE_FASTContent = SGetField<int>(LocalBridgeClazz, "DISTORTION_CORRECTION_MODE_FAST"); _DISTORTION_CORRECTION_MODE_FASTReady = true; } return _DISTORTION_CORRECTION_MODE_FASTContent; } }
        private static int _DISTORTION_CORRECTION_MODE_FASTContent = default;
        private static bool _DISTORTION_CORRECTION_MODE_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#DISTORTION_CORRECTION_MODE_HIGH_QUALITY"/>
        /// </summary>
        public static int DISTORTION_CORRECTION_MODE_HIGH_QUALITY { get { if (!_DISTORTION_CORRECTION_MODE_HIGH_QUALITYReady) { _DISTORTION_CORRECTION_MODE_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "DISTORTION_CORRECTION_MODE_HIGH_QUALITY"); _DISTORTION_CORRECTION_MODE_HIGH_QUALITYReady = true; } return _DISTORTION_CORRECTION_MODE_HIGH_QUALITYContent; } }
        private static int _DISTORTION_CORRECTION_MODE_HIGH_QUALITYContent = default;
        private static bool _DISTORTION_CORRECTION_MODE_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#DISTORTION_CORRECTION_MODE_OFF"/>
        /// </summary>
        public static int DISTORTION_CORRECTION_MODE_OFF { get { if (!_DISTORTION_CORRECTION_MODE_OFFReady) { _DISTORTION_CORRECTION_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "DISTORTION_CORRECTION_MODE_OFF"); _DISTORTION_CORRECTION_MODE_OFFReady = true; } return _DISTORTION_CORRECTION_MODE_OFFContent; } }
        private static int _DISTORTION_CORRECTION_MODE_OFFContent = default;
        private static bool _DISTORTION_CORRECTION_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#EDGE_MODE_FAST"/>
        /// </summary>
        public static int EDGE_MODE_FAST { get { if (!_EDGE_MODE_FASTReady) { _EDGE_MODE_FASTContent = SGetField<int>(LocalBridgeClazz, "EDGE_MODE_FAST"); _EDGE_MODE_FASTReady = true; } return _EDGE_MODE_FASTContent; } }
        private static int _EDGE_MODE_FASTContent = default;
        private static bool _EDGE_MODE_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#EDGE_MODE_HIGH_QUALITY"/>
        /// </summary>
        public static int EDGE_MODE_HIGH_QUALITY { get { if (!_EDGE_MODE_HIGH_QUALITYReady) { _EDGE_MODE_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "EDGE_MODE_HIGH_QUALITY"); _EDGE_MODE_HIGH_QUALITYReady = true; } return _EDGE_MODE_HIGH_QUALITYContent; } }
        private static int _EDGE_MODE_HIGH_QUALITYContent = default;
        private static bool _EDGE_MODE_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#EDGE_MODE_OFF"/>
        /// </summary>
        public static int EDGE_MODE_OFF { get { if (!_EDGE_MODE_OFFReady) { _EDGE_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "EDGE_MODE_OFF"); _EDGE_MODE_OFFReady = true; } return _EDGE_MODE_OFFContent; } }
        private static int _EDGE_MODE_OFFContent = default;
        private static bool _EDGE_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#EDGE_MODE_ZERO_SHUTTER_LAG"/>
        /// </summary>
        public static int EDGE_MODE_ZERO_SHUTTER_LAG { get { if (!_EDGE_MODE_ZERO_SHUTTER_LAGReady) { _EDGE_MODE_ZERO_SHUTTER_LAGContent = SGetField<int>(LocalBridgeClazz, "EDGE_MODE_ZERO_SHUTTER_LAG"); _EDGE_MODE_ZERO_SHUTTER_LAGReady = true; } return _EDGE_MODE_ZERO_SHUTTER_LAGContent; } }
        private static int _EDGE_MODE_ZERO_SHUTTER_LAGContent = default;
        private static bool _EDGE_MODE_ZERO_SHUTTER_LAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#FLASH_MODE_OFF"/>
        /// </summary>
        public static int FLASH_MODE_OFF { get { if (!_FLASH_MODE_OFFReady) { _FLASH_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "FLASH_MODE_OFF"); _FLASH_MODE_OFFReady = true; } return _FLASH_MODE_OFFContent; } }
        private static int _FLASH_MODE_OFFContent = default;
        private static bool _FLASH_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#FLASH_MODE_SINGLE"/>
        /// </summary>
        public static int FLASH_MODE_SINGLE { get { if (!_FLASH_MODE_SINGLEReady) { _FLASH_MODE_SINGLEContent = SGetField<int>(LocalBridgeClazz, "FLASH_MODE_SINGLE"); _FLASH_MODE_SINGLEReady = true; } return _FLASH_MODE_SINGLEContent; } }
        private static int _FLASH_MODE_SINGLEContent = default;
        private static bool _FLASH_MODE_SINGLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#FLASH_MODE_TORCH"/>
        /// </summary>
        public static int FLASH_MODE_TORCH { get { if (!_FLASH_MODE_TORCHReady) { _FLASH_MODE_TORCHContent = SGetField<int>(LocalBridgeClazz, "FLASH_MODE_TORCH"); _FLASH_MODE_TORCHReady = true; } return _FLASH_MODE_TORCHContent; } }
        private static int _FLASH_MODE_TORCHContent = default;
        private static bool _FLASH_MODE_TORCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#FLASH_STATE_CHARGING"/>
        /// </summary>
        public static int FLASH_STATE_CHARGING { get { if (!_FLASH_STATE_CHARGINGReady) { _FLASH_STATE_CHARGINGContent = SGetField<int>(LocalBridgeClazz, "FLASH_STATE_CHARGING"); _FLASH_STATE_CHARGINGReady = true; } return _FLASH_STATE_CHARGINGContent; } }
        private static int _FLASH_STATE_CHARGINGContent = default;
        private static bool _FLASH_STATE_CHARGINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#FLASH_STATE_FIRED"/>
        /// </summary>
        public static int FLASH_STATE_FIRED { get { if (!_FLASH_STATE_FIREDReady) { _FLASH_STATE_FIREDContent = SGetField<int>(LocalBridgeClazz, "FLASH_STATE_FIRED"); _FLASH_STATE_FIREDReady = true; } return _FLASH_STATE_FIREDContent; } }
        private static int _FLASH_STATE_FIREDContent = default;
        private static bool _FLASH_STATE_FIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#FLASH_STATE_PARTIAL"/>
        /// </summary>
        public static int FLASH_STATE_PARTIAL { get { if (!_FLASH_STATE_PARTIALReady) { _FLASH_STATE_PARTIALContent = SGetField<int>(LocalBridgeClazz, "FLASH_STATE_PARTIAL"); _FLASH_STATE_PARTIALReady = true; } return _FLASH_STATE_PARTIALContent; } }
        private static int _FLASH_STATE_PARTIALContent = default;
        private static bool _FLASH_STATE_PARTIALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#FLASH_STATE_READY"/>
        /// </summary>
        public static int FLASH_STATE_READY { get { if (!_FLASH_STATE_READYReady) { _FLASH_STATE_READYContent = SGetField<int>(LocalBridgeClazz, "FLASH_STATE_READY"); _FLASH_STATE_READYReady = true; } return _FLASH_STATE_READYContent; } }
        private static int _FLASH_STATE_READYContent = default;
        private static bool _FLASH_STATE_READYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#FLASH_STATE_UNAVAILABLE"/>
        /// </summary>
        public static int FLASH_STATE_UNAVAILABLE { get { if (!_FLASH_STATE_UNAVAILABLEReady) { _FLASH_STATE_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "FLASH_STATE_UNAVAILABLE"); _FLASH_STATE_UNAVAILABLEReady = true; } return _FLASH_STATE_UNAVAILABLEContent; } }
        private static int _FLASH_STATE_UNAVAILABLEContent = default;
        private static bool _FLASH_STATE_UNAVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#HOT_PIXEL_MODE_FAST"/>
        /// </summary>
        public static int HOT_PIXEL_MODE_FAST { get { if (!_HOT_PIXEL_MODE_FASTReady) { _HOT_PIXEL_MODE_FASTContent = SGetField<int>(LocalBridgeClazz, "HOT_PIXEL_MODE_FAST"); _HOT_PIXEL_MODE_FASTReady = true; } return _HOT_PIXEL_MODE_FASTContent; } }
        private static int _HOT_PIXEL_MODE_FASTContent = default;
        private static bool _HOT_PIXEL_MODE_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#HOT_PIXEL_MODE_HIGH_QUALITY"/>
        /// </summary>
        public static int HOT_PIXEL_MODE_HIGH_QUALITY { get { if (!_HOT_PIXEL_MODE_HIGH_QUALITYReady) { _HOT_PIXEL_MODE_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "HOT_PIXEL_MODE_HIGH_QUALITY"); _HOT_PIXEL_MODE_HIGH_QUALITYReady = true; } return _HOT_PIXEL_MODE_HIGH_QUALITYContent; } }
        private static int _HOT_PIXEL_MODE_HIGH_QUALITYContent = default;
        private static bool _HOT_PIXEL_MODE_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#HOT_PIXEL_MODE_OFF"/>
        /// </summary>
        public static int HOT_PIXEL_MODE_OFF { get { if (!_HOT_PIXEL_MODE_OFFReady) { _HOT_PIXEL_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "HOT_PIXEL_MODE_OFF"); _HOT_PIXEL_MODE_OFFReady = true; } return _HOT_PIXEL_MODE_OFFContent; } }
        private static int _HOT_PIXEL_MODE_OFFContent = default;
        private static bool _HOT_PIXEL_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#INFO_SUPPORTED_HARDWARE_LEVEL_3"/>
        /// </summary>
        public static int INFO_SUPPORTED_HARDWARE_LEVEL_3 { get { if (!_INFO_SUPPORTED_HARDWARE_LEVEL_3Ready) { _INFO_SUPPORTED_HARDWARE_LEVEL_3Content = SGetField<int>(LocalBridgeClazz, "INFO_SUPPORTED_HARDWARE_LEVEL_3"); _INFO_SUPPORTED_HARDWARE_LEVEL_3Ready = true; } return _INFO_SUPPORTED_HARDWARE_LEVEL_3Content; } }
        private static int _INFO_SUPPORTED_HARDWARE_LEVEL_3Content = default;
        private static bool _INFO_SUPPORTED_HARDWARE_LEVEL_3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNAL"/>
        /// </summary>
        public static int INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNAL { get { if (!_INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNALReady) { _INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNALContent = SGetField<int>(LocalBridgeClazz, "INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNAL"); _INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNALReady = true; } return _INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNALContent; } }
        private static int _INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNALContent = default;
        private static bool _INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#INFO_SUPPORTED_HARDWARE_LEVEL_FULL"/>
        /// </summary>
        public static int INFO_SUPPORTED_HARDWARE_LEVEL_FULL { get { if (!_INFO_SUPPORTED_HARDWARE_LEVEL_FULLReady) { _INFO_SUPPORTED_HARDWARE_LEVEL_FULLContent = SGetField<int>(LocalBridgeClazz, "INFO_SUPPORTED_HARDWARE_LEVEL_FULL"); _INFO_SUPPORTED_HARDWARE_LEVEL_FULLReady = true; } return _INFO_SUPPORTED_HARDWARE_LEVEL_FULLContent; } }
        private static int _INFO_SUPPORTED_HARDWARE_LEVEL_FULLContent = default;
        private static bool _INFO_SUPPORTED_HARDWARE_LEVEL_FULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY"/>
        /// </summary>
        public static int INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY { get { if (!_INFO_SUPPORTED_HARDWARE_LEVEL_LEGACYReady) { _INFO_SUPPORTED_HARDWARE_LEVEL_LEGACYContent = SGetField<int>(LocalBridgeClazz, "INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY"); _INFO_SUPPORTED_HARDWARE_LEVEL_LEGACYReady = true; } return _INFO_SUPPORTED_HARDWARE_LEVEL_LEGACYContent; } }
        private static int _INFO_SUPPORTED_HARDWARE_LEVEL_LEGACYContent = default;
        private static bool _INFO_SUPPORTED_HARDWARE_LEVEL_LEGACYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED"/>
        /// </summary>
        public static int INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED { get { if (!_INFO_SUPPORTED_HARDWARE_LEVEL_LIMITEDReady) { _INFO_SUPPORTED_HARDWARE_LEVEL_LIMITEDContent = SGetField<int>(LocalBridgeClazz, "INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED"); _INFO_SUPPORTED_HARDWARE_LEVEL_LIMITEDReady = true; } return _INFO_SUPPORTED_HARDWARE_LEVEL_LIMITEDContent; } }
        private static int _INFO_SUPPORTED_HARDWARE_LEVEL_LIMITEDContent = default;
        private static bool _INFO_SUPPORTED_HARDWARE_LEVEL_LIMITEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_FACING_BACK"/>
        /// </summary>
        public static int LENS_FACING_BACK { get { if (!_LENS_FACING_BACKReady) { _LENS_FACING_BACKContent = SGetField<int>(LocalBridgeClazz, "LENS_FACING_BACK"); _LENS_FACING_BACKReady = true; } return _LENS_FACING_BACKContent; } }
        private static int _LENS_FACING_BACKContent = default;
        private static bool _LENS_FACING_BACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_FACING_EXTERNAL"/>
        /// </summary>
        public static int LENS_FACING_EXTERNAL { get { if (!_LENS_FACING_EXTERNALReady) { _LENS_FACING_EXTERNALContent = SGetField<int>(LocalBridgeClazz, "LENS_FACING_EXTERNAL"); _LENS_FACING_EXTERNALReady = true; } return _LENS_FACING_EXTERNALContent; } }
        private static int _LENS_FACING_EXTERNALContent = default;
        private static bool _LENS_FACING_EXTERNALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_FACING_FRONT"/>
        /// </summary>
        public static int LENS_FACING_FRONT { get { if (!_LENS_FACING_FRONTReady) { _LENS_FACING_FRONTContent = SGetField<int>(LocalBridgeClazz, "LENS_FACING_FRONT"); _LENS_FACING_FRONTReady = true; } return _LENS_FACING_FRONTContent; } }
        private static int _LENS_FACING_FRONTContent = default;
        private static bool _LENS_FACING_FRONTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATE"/>
        /// </summary>
        public static int LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATE { get { if (!_LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATEReady) { _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATEContent = SGetField<int>(LocalBridgeClazz, "LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATE"); _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATEReady = true; } return _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATEContent; } }
        private static int _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATEContent = default;
        private static bool _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_APPROXIMATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATED"/>
        /// </summary>
        public static int LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATED { get { if (!_LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATEDReady) { _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATEDContent = SGetField<int>(LocalBridgeClazz, "LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATED"); _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATEDReady = true; } return _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATEDContent; } }
        private static int _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATEDContent = default;
        private static bool _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_CALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATED"/>
        /// </summary>
        public static int LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATED { get { if (!_LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATEDReady) { _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATEDContent = SGetField<int>(LocalBridgeClazz, "LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATED"); _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATEDReady = true; } return _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATEDContent; } }
        private static int _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATEDContent = default;
        private static bool _LENS_INFO_FOCUS_DISTANCE_CALIBRATION_UNCALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_OPTICAL_STABILIZATION_MODE_OFF"/>
        /// </summary>
        public static int LENS_OPTICAL_STABILIZATION_MODE_OFF { get { if (!_LENS_OPTICAL_STABILIZATION_MODE_OFFReady) { _LENS_OPTICAL_STABILIZATION_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "LENS_OPTICAL_STABILIZATION_MODE_OFF"); _LENS_OPTICAL_STABILIZATION_MODE_OFFReady = true; } return _LENS_OPTICAL_STABILIZATION_MODE_OFFContent; } }
        private static int _LENS_OPTICAL_STABILIZATION_MODE_OFFContent = default;
        private static bool _LENS_OPTICAL_STABILIZATION_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_OPTICAL_STABILIZATION_MODE_ON"/>
        /// </summary>
        public static int LENS_OPTICAL_STABILIZATION_MODE_ON { get { if (!_LENS_OPTICAL_STABILIZATION_MODE_ONReady) { _LENS_OPTICAL_STABILIZATION_MODE_ONContent = SGetField<int>(LocalBridgeClazz, "LENS_OPTICAL_STABILIZATION_MODE_ON"); _LENS_OPTICAL_STABILIZATION_MODE_ONReady = true; } return _LENS_OPTICAL_STABILIZATION_MODE_ONContent; } }
        private static int _LENS_OPTICAL_STABILIZATION_MODE_ONContent = default;
        private static bool _LENS_OPTICAL_STABILIZATION_MODE_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_POSE_REFERENCE_AUTOMOTIVE"/>
        /// </summary>
        public static int LENS_POSE_REFERENCE_AUTOMOTIVE { get { if (!_LENS_POSE_REFERENCE_AUTOMOTIVEReady) { _LENS_POSE_REFERENCE_AUTOMOTIVEContent = SGetField<int>(LocalBridgeClazz, "LENS_POSE_REFERENCE_AUTOMOTIVE"); _LENS_POSE_REFERENCE_AUTOMOTIVEReady = true; } return _LENS_POSE_REFERENCE_AUTOMOTIVEContent; } }
        private static int _LENS_POSE_REFERENCE_AUTOMOTIVEContent = default;
        private static bool _LENS_POSE_REFERENCE_AUTOMOTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_POSE_REFERENCE_GYROSCOPE"/>
        /// </summary>
        public static int LENS_POSE_REFERENCE_GYROSCOPE { get { if (!_LENS_POSE_REFERENCE_GYROSCOPEReady) { _LENS_POSE_REFERENCE_GYROSCOPEContent = SGetField<int>(LocalBridgeClazz, "LENS_POSE_REFERENCE_GYROSCOPE"); _LENS_POSE_REFERENCE_GYROSCOPEReady = true; } return _LENS_POSE_REFERENCE_GYROSCOPEContent; } }
        private static int _LENS_POSE_REFERENCE_GYROSCOPEContent = default;
        private static bool _LENS_POSE_REFERENCE_GYROSCOPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_POSE_REFERENCE_PRIMARY_CAMERA"/>
        /// </summary>
        public static int LENS_POSE_REFERENCE_PRIMARY_CAMERA { get { if (!_LENS_POSE_REFERENCE_PRIMARY_CAMERAReady) { _LENS_POSE_REFERENCE_PRIMARY_CAMERAContent = SGetField<int>(LocalBridgeClazz, "LENS_POSE_REFERENCE_PRIMARY_CAMERA"); _LENS_POSE_REFERENCE_PRIMARY_CAMERAReady = true; } return _LENS_POSE_REFERENCE_PRIMARY_CAMERAContent; } }
        private static int _LENS_POSE_REFERENCE_PRIMARY_CAMERAContent = default;
        private static bool _LENS_POSE_REFERENCE_PRIMARY_CAMERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_POSE_REFERENCE_UNDEFINED"/>
        /// </summary>
        public static int LENS_POSE_REFERENCE_UNDEFINED { get { if (!_LENS_POSE_REFERENCE_UNDEFINEDReady) { _LENS_POSE_REFERENCE_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "LENS_POSE_REFERENCE_UNDEFINED"); _LENS_POSE_REFERENCE_UNDEFINEDReady = true; } return _LENS_POSE_REFERENCE_UNDEFINEDContent; } }
        private static int _LENS_POSE_REFERENCE_UNDEFINEDContent = default;
        private static bool _LENS_POSE_REFERENCE_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_STATE_MOVING"/>
        /// </summary>
        public static int LENS_STATE_MOVING { get { if (!_LENS_STATE_MOVINGReady) { _LENS_STATE_MOVINGContent = SGetField<int>(LocalBridgeClazz, "LENS_STATE_MOVING"); _LENS_STATE_MOVINGReady = true; } return _LENS_STATE_MOVINGContent; } }
        private static int _LENS_STATE_MOVINGContent = default;
        private static bool _LENS_STATE_MOVINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LENS_STATE_STATIONARY"/>
        /// </summary>
        public static int LENS_STATE_STATIONARY { get { if (!_LENS_STATE_STATIONARYReady) { _LENS_STATE_STATIONARYContent = SGetField<int>(LocalBridgeClazz, "LENS_STATE_STATIONARY"); _LENS_STATE_STATIONARYReady = true; } return _LENS_STATE_STATIONARYContent; } }
        private static int _LENS_STATE_STATIONARYContent = default;
        private static bool _LENS_STATE_STATIONARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATE"/>
        /// </summary>
        public static int LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATE { get { if (!_LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATEReady) { _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATEContent = SGetField<int>(LocalBridgeClazz, "LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATE"); _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATEReady = true; } return _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATEContent; } }
        private static int _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATEContent = default;
        private static bool _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_APPROXIMATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATED"/>
        /// </summary>
        public static int LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATED { get { if (!_LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATEDReady) { _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATEDContent = SGetField<int>(LocalBridgeClazz, "LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATED"); _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATEDReady = true; } return _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATEDContent; } }
        private static int _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATEDContent = default;
        private static bool _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE_CALIBRATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#NOISE_REDUCTION_MODE_FAST"/>
        /// </summary>
        public static int NOISE_REDUCTION_MODE_FAST { get { if (!_NOISE_REDUCTION_MODE_FASTReady) { _NOISE_REDUCTION_MODE_FASTContent = SGetField<int>(LocalBridgeClazz, "NOISE_REDUCTION_MODE_FAST"); _NOISE_REDUCTION_MODE_FASTReady = true; } return _NOISE_REDUCTION_MODE_FASTContent; } }
        private static int _NOISE_REDUCTION_MODE_FASTContent = default;
        private static bool _NOISE_REDUCTION_MODE_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#NOISE_REDUCTION_MODE_HIGH_QUALITY"/>
        /// </summary>
        public static int NOISE_REDUCTION_MODE_HIGH_QUALITY { get { if (!_NOISE_REDUCTION_MODE_HIGH_QUALITYReady) { _NOISE_REDUCTION_MODE_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "NOISE_REDUCTION_MODE_HIGH_QUALITY"); _NOISE_REDUCTION_MODE_HIGH_QUALITYReady = true; } return _NOISE_REDUCTION_MODE_HIGH_QUALITYContent; } }
        private static int _NOISE_REDUCTION_MODE_HIGH_QUALITYContent = default;
        private static bool _NOISE_REDUCTION_MODE_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#NOISE_REDUCTION_MODE_MINIMAL"/>
        /// </summary>
        public static int NOISE_REDUCTION_MODE_MINIMAL { get { if (!_NOISE_REDUCTION_MODE_MINIMALReady) { _NOISE_REDUCTION_MODE_MINIMALContent = SGetField<int>(LocalBridgeClazz, "NOISE_REDUCTION_MODE_MINIMAL"); _NOISE_REDUCTION_MODE_MINIMALReady = true; } return _NOISE_REDUCTION_MODE_MINIMALContent; } }
        private static int _NOISE_REDUCTION_MODE_MINIMALContent = default;
        private static bool _NOISE_REDUCTION_MODE_MINIMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#NOISE_REDUCTION_MODE_OFF"/>
        /// </summary>
        public static int NOISE_REDUCTION_MODE_OFF { get { if (!_NOISE_REDUCTION_MODE_OFFReady) { _NOISE_REDUCTION_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "NOISE_REDUCTION_MODE_OFF"); _NOISE_REDUCTION_MODE_OFFReady = true; } return _NOISE_REDUCTION_MODE_OFFContent; } }
        private static int _NOISE_REDUCTION_MODE_OFFContent = default;
        private static bool _NOISE_REDUCTION_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAG"/>
        /// </summary>
        public static int NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAG { get { if (!_NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAGReady) { _NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAGContent = SGetField<int>(LocalBridgeClazz, "NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAG"); _NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAGReady = true; } return _NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAGContent; } }
        private static int _NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAGContent = default;
        private static bool _NOISE_REDUCTION_MODE_ZERO_SHUTTER_LAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLEReady) { _REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLEContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE"); _REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLEReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLEContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLEContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTUREReady) { _REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTUREContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE"); _REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTUREReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTUREContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTUREContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILES"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILES { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILESReady) { _REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILESContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILES"); _REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILESReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILESContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILESContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_COLOR_SPACE_PROFILESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEOReady) { _REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEOContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO"); _REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEOReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEOContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEOContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUTReady) { _REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUTContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT"); _REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUTReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUTContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUTContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BIT"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BIT { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BITReady) { _REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BITContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BIT"); _REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BITReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BITContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BITContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERAReady) { _REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERAContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA"); _REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERAReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERAContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERAContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSING"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSING { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSINGReady) { _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSINGContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSING"); _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSINGReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSINGContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSINGContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSORReady) { _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSORContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR"); _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSORReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSORContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSORContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_MONOCHROMEReady) { _REQUEST_AVAILABLE_CAPABILITIES_MONOCHROMEContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME"); _REQUEST_AVAILABLE_CAPABILITIES_MONOCHROMEReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_MONOCHROMEContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_MONOCHROMEContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_MONOCHROMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKING"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKING { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKINGReady) { _REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKINGContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKING"); _REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKINGReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKINGContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKINGContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSING"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSING { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSINGReady) { _REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSINGContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSING"); _REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSINGReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSINGContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSINGContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_OFFLINE_PROCESSINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSINGReady) { _REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSINGContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING"); _REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSINGReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSINGContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSINGContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_RAW"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_RAW { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_RAWReady) { _REQUEST_AVAILABLE_CAPABILITIES_RAWContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_RAW"); _REQUEST_AVAILABLE_CAPABILITIES_RAWReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_RAWContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_RAWContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_RAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGS"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGS { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGSReady) { _REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGSContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGS"); _REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGSReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGSContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGSContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_READ_SENSOR_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSING"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSING { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSINGReady) { _REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSINGContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSING"); _REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSINGReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSINGContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSINGContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_REMOSAIC_REPROCESSINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATA"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATA { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATAReady) { _REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATAContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATA"); _REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATAReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATAContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATAContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_SECURE_IMAGE_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASE"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASE { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASEReady) { _REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASEContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASE"); _REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASEReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASEContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASEContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERA"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERA { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERAReady) { _REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERAContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERA"); _REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERAReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERAContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERAContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_SYSTEM_CAMERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSOR"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSOR { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSORReady) { _REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSORContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSOR"); _REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSORReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSORContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSORContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_ULTRA_HIGH_RESOLUTION_SENSORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING"/>
        /// </summary>
        public static int REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING { get { if (!_REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSINGReady) { _REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSINGContent = SGetField<int>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING"); _REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSINGReady = true; } return _REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSINGContent; } }
        private static int _REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSINGContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAW"/>
        /// </summary>
        public static int SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAW { get { if (!_SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAWReady) { _SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAWContent = SGetField<int>(LocalBridgeClazz, "SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAW"); _SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAWReady = true; } return _SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAWContent; } }
        private static int _SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAWContent = default;
        private static bool _SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULT"/>
        /// </summary>
        public static int SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULT { get { if (!_SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULTReady) { _SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULT"); _SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULTReady = true; } return _SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULTContent; } }
        private static int _SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULTContent = default;
        private static bool _SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW"/>
        /// </summary>
        public static int SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW { get { if (!_SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEWReady) { _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEWContent = SGetField<int>(LocalBridgeClazz, "SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW"); _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEWReady = true; } return _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEWContent; } }
        private static int _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEWContent = default;
        private static bool _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILL"/>
        /// </summary>
        public static int SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILL { get { if (!_SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILLReady) { _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILLContent = SGetField<int>(LocalBridgeClazz, "SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILL"); _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILLReady = true; } return _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILLContent; } }
        private static int _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILLContent = default;
        private static bool _SCALER_AVAILABLE_STREAM_USE_CASES_PREVIEW_VIDEO_STILLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTURE"/>
        /// </summary>
        public static int SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTURE { get { if (!_SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTUREReady) { _SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTUREContent = SGetField<int>(LocalBridgeClazz, "SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTURE"); _SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTUREReady = true; } return _SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTUREContent; } }
        private static int _SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTUREContent = default;
        private static bool _SCALER_AVAILABLE_STREAM_USE_CASES_STILL_CAPTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALL"/>
        /// </summary>
        public static int SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALL { get { if (!_SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALLReady) { _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALLContent = SGetField<int>(LocalBridgeClazz, "SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALL"); _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALLReady = true; } return _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALLContent; } }
        private static int _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALLContent = default;
        private static bool _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORD"/>
        /// </summary>
        public static int SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORD { get { if (!_SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORDReady) { _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORDContent = SGetField<int>(LocalBridgeClazz, "SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORD"); _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORDReady = true; } return _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORDContent; } }
        private static int _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORDContent = default;
        private static bool _SCALER_AVAILABLE_STREAM_USE_CASES_VIDEO_RECORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_CROPPING_TYPE_CENTER_ONLY"/>
        /// </summary>
        public static int SCALER_CROPPING_TYPE_CENTER_ONLY { get { if (!_SCALER_CROPPING_TYPE_CENTER_ONLYReady) { _SCALER_CROPPING_TYPE_CENTER_ONLYContent = SGetField<int>(LocalBridgeClazz, "SCALER_CROPPING_TYPE_CENTER_ONLY"); _SCALER_CROPPING_TYPE_CENTER_ONLYReady = true; } return _SCALER_CROPPING_TYPE_CENTER_ONLYContent; } }
        private static int _SCALER_CROPPING_TYPE_CENTER_ONLYContent = default;
        private static bool _SCALER_CROPPING_TYPE_CENTER_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_CROPPING_TYPE_FREEFORM"/>
        /// </summary>
        public static int SCALER_CROPPING_TYPE_FREEFORM { get { if (!_SCALER_CROPPING_TYPE_FREEFORMReady) { _SCALER_CROPPING_TYPE_FREEFORMContent = SGetField<int>(LocalBridgeClazz, "SCALER_CROPPING_TYPE_FREEFORM"); _SCALER_CROPPING_TYPE_FREEFORMReady = true; } return _SCALER_CROPPING_TYPE_FREEFORMContent; } }
        private static int _SCALER_CROPPING_TYPE_FREEFORMContent = default;
        private static bool _SCALER_CROPPING_TYPE_FREEFORMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_ROTATE_AND_CROP_180"/>
        /// </summary>
        public static int SCALER_ROTATE_AND_CROP_180 { get { if (!_SCALER_ROTATE_AND_CROP_180Ready) { _SCALER_ROTATE_AND_CROP_180Content = SGetField<int>(LocalBridgeClazz, "SCALER_ROTATE_AND_CROP_180"); _SCALER_ROTATE_AND_CROP_180Ready = true; } return _SCALER_ROTATE_AND_CROP_180Content; } }
        private static int _SCALER_ROTATE_AND_CROP_180Content = default;
        private static bool _SCALER_ROTATE_AND_CROP_180Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_ROTATE_AND_CROP_270"/>
        /// </summary>
        public static int SCALER_ROTATE_AND_CROP_270 { get { if (!_SCALER_ROTATE_AND_CROP_270Ready) { _SCALER_ROTATE_AND_CROP_270Content = SGetField<int>(LocalBridgeClazz, "SCALER_ROTATE_AND_CROP_270"); _SCALER_ROTATE_AND_CROP_270Ready = true; } return _SCALER_ROTATE_AND_CROP_270Content; } }
        private static int _SCALER_ROTATE_AND_CROP_270Content = default;
        private static bool _SCALER_ROTATE_AND_CROP_270Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_ROTATE_AND_CROP_90"/>
        /// </summary>
        public static int SCALER_ROTATE_AND_CROP_90 { get { if (!_SCALER_ROTATE_AND_CROP_90Ready) { _SCALER_ROTATE_AND_CROP_90Content = SGetField<int>(LocalBridgeClazz, "SCALER_ROTATE_AND_CROP_90"); _SCALER_ROTATE_AND_CROP_90Ready = true; } return _SCALER_ROTATE_AND_CROP_90Content; } }
        private static int _SCALER_ROTATE_AND_CROP_90Content = default;
        private static bool _SCALER_ROTATE_AND_CROP_90Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_ROTATE_AND_CROP_AUTO"/>
        /// </summary>
        public static int SCALER_ROTATE_AND_CROP_AUTO { get { if (!_SCALER_ROTATE_AND_CROP_AUTOReady) { _SCALER_ROTATE_AND_CROP_AUTOContent = SGetField<int>(LocalBridgeClazz, "SCALER_ROTATE_AND_CROP_AUTO"); _SCALER_ROTATE_AND_CROP_AUTOReady = true; } return _SCALER_ROTATE_AND_CROP_AUTOContent; } }
        private static int _SCALER_ROTATE_AND_CROP_AUTOContent = default;
        private static bool _SCALER_ROTATE_AND_CROP_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SCALER_ROTATE_AND_CROP_NONE"/>
        /// </summary>
        public static int SCALER_ROTATE_AND_CROP_NONE { get { if (!_SCALER_ROTATE_AND_CROP_NONEReady) { _SCALER_ROTATE_AND_CROP_NONEContent = SGetField<int>(LocalBridgeClazz, "SCALER_ROTATE_AND_CROP_NONE"); _SCALER_ROTATE_AND_CROP_NONEReady = true; } return _SCALER_ROTATE_AND_CROP_NONEContent; } }
        private static int _SCALER_ROTATE_AND_CROP_NONEContent = default;
        private static bool _SCALER_ROTATE_AND_CROP_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGR"/>
        /// </summary>
        public static int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGR { get { if (!_SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGRReady) { _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGRContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGR"); _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGRReady = true; } return _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGRContent; } }
        private static int _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGRContent = default;
        private static bool _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_BGGRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRG"/>
        /// </summary>
        public static int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRG { get { if (!_SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRGReady) { _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRGContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRG"); _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRGReady = true; } return _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRGContent; } }
        private static int _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRGContent = default;
        private static bool _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GBRGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBG"/>
        /// </summary>
        public static int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBG { get { if (!_SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBGReady) { _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBGContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBG"); _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBGReady = true; } return _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBGContent; } }
        private static int _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBGContent = default;
        private static bool _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_GRBGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONO"/>
        /// </summary>
        public static int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONO { get { if (!_SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONOReady) { _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONOContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONO"); _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONOReady = true; } return _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONOContent; } }
        private static int _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONOContent = default;
        private static bool _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_MONOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIR"/>
        /// </summary>
        public static int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIR { get { if (!_SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIRReady) { _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIRContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIR"); _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIRReady = true; } return _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIRContent; } }
        private static int _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIRContent = default;
        private static bool _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_NIRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGB"/>
        /// </summary>
        public static int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGB { get { if (!_SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGBReady) { _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGBContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGB"); _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGBReady = true; } return _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGBContent; } }
        private static int _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGBContent = default;
        private static bool _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGB"/>
        /// </summary>
        public static int SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGB { get { if (!_SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGBReady) { _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGBContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGB"); _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGBReady = true; } return _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGBContent; } }
        private static int _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGBContent = default;
        private static bool _SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_RGGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME"/>
        /// </summary>
        public static int SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME { get { if (!_SENSOR_INFO_TIMESTAMP_SOURCE_REALTIMEReady) { _SENSOR_INFO_TIMESTAMP_SOURCE_REALTIMEContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_TIMESTAMP_SOURCE_REALTIME"); _SENSOR_INFO_TIMESTAMP_SOURCE_REALTIMEReady = true; } return _SENSOR_INFO_TIMESTAMP_SOURCE_REALTIMEContent; } }
        private static int _SENSOR_INFO_TIMESTAMP_SOURCE_REALTIMEContent = default;
        private static bool _SENSOR_INFO_TIMESTAMP_SOURCE_REALTIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWN"/>
        /// </summary>
        public static int SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWN { get { if (!_SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWNReady) { _SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWN"); _SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWNReady = true; } return _SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWNContent; } }
        private static int _SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWNContent = default;
        private static bool _SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_PIXEL_MODE_DEFAULT"/>
        /// </summary>
        public static int SENSOR_PIXEL_MODE_DEFAULT { get { if (!_SENSOR_PIXEL_MODE_DEFAULTReady) { _SENSOR_PIXEL_MODE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_PIXEL_MODE_DEFAULT"); _SENSOR_PIXEL_MODE_DEFAULTReady = true; } return _SENSOR_PIXEL_MODE_DEFAULTContent; } }
        private static int _SENSOR_PIXEL_MODE_DEFAULTContent = default;
        private static bool _SENSOR_PIXEL_MODE_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTION"/>
        /// </summary>
        public static int SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTION { get { if (!_SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTIONReady) { _SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTIONContent = SGetField<int>(LocalBridgeClazz, "SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTION"); _SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTIONReady = true; } return _SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTIONContent; } }
        private static int _SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTIONContent = default;
        private static bool _SENSOR_PIXEL_MODE_MAXIMUM_RESOLUTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_READOUT_TIMESTAMP_HARDWARE"/>
        /// </summary>
        public static int SENSOR_READOUT_TIMESTAMP_HARDWARE { get { if (!_SENSOR_READOUT_TIMESTAMP_HARDWAREReady) { _SENSOR_READOUT_TIMESTAMP_HARDWAREContent = SGetField<int>(LocalBridgeClazz, "SENSOR_READOUT_TIMESTAMP_HARDWARE"); _SENSOR_READOUT_TIMESTAMP_HARDWAREReady = true; } return _SENSOR_READOUT_TIMESTAMP_HARDWAREContent; } }
        private static int _SENSOR_READOUT_TIMESTAMP_HARDWAREContent = default;
        private static bool _SENSOR_READOUT_TIMESTAMP_HARDWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTED"/>
        /// </summary>
        public static int SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTED { get { if (!_SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTEDReady) { _SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTED"); _SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTEDReady = true; } return _SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTEDContent; } }
        private static int _SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTEDContent = default;
        private static bool _SENSOR_READOUT_TIMESTAMP_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHER"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHER { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHERReady) { _SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHERContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHER"); _SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHERReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHERContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHERContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_CLOUDY_WEATHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENT"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENT { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENTReady) { _SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENT"); _SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENTReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENTContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENTContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_COOL_WHITE_FLUORESCENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_D50"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_D50 { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_D50Ready) { _SENSOR_REFERENCE_ILLUMINANT1_D50Content = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_D50"); _SENSOR_REFERENCE_ILLUMINANT1_D50Ready = true; } return _SENSOR_REFERENCE_ILLUMINANT1_D50Content; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_D50Content = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_D50Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_D55"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_D55 { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_D55Ready) { _SENSOR_REFERENCE_ILLUMINANT1_D55Content = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_D55"); _SENSOR_REFERENCE_ILLUMINANT1_D55Ready = true; } return _SENSOR_REFERENCE_ILLUMINANT1_D55Content; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_D55Content = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_D55Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_D65"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_D65 { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_D65Ready) { _SENSOR_REFERENCE_ILLUMINANT1_D65Content = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_D65"); _SENSOR_REFERENCE_ILLUMINANT1_D65Ready = true; } return _SENSOR_REFERENCE_ILLUMINANT1_D65Content; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_D65Content = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_D65Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_D75"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_D75 { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_D75Ready) { _SENSOR_REFERENCE_ILLUMINANT1_D75Content = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_D75"); _SENSOR_REFERENCE_ILLUMINANT1_D75Ready = true; } return _SENSOR_REFERENCE_ILLUMINANT1_D75Content; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_D75Content = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_D75Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENT"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENT { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENTReady) { _SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENT"); _SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENTReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENTContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENTContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_DAY_WHITE_FLUORESCENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHTReady) { _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT"); _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHTReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHTContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHTContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENT"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENT { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENTReady) { _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENT"); _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENTReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENTContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENTContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_DAYLIGHT_FLUORESCENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHER"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHER { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHERReady) { _SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHERContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHER"); _SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHERReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHERContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHERContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_FINE_WEATHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_FLASH"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_FLASH { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_FLASHReady) { _SENSOR_REFERENCE_ILLUMINANT1_FLASHContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_FLASH"); _SENSOR_REFERENCE_ILLUMINANT1_FLASHReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_FLASHContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_FLASHContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_FLASHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENT"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENT { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENTReady) { _SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENT"); _SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENTReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENTContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENTContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_FLUORESCENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTEN"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTEN { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTENReady) { _SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTENContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTEN"); _SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTENReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTENContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTENContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_ISO_STUDIO_TUNGSTENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_SHADE"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_SHADE { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_SHADEReady) { _SENSOR_REFERENCE_ILLUMINANT1_SHADEContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_SHADE"); _SENSOR_REFERENCE_ILLUMINANT1_SHADEReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_SHADEContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_SHADEContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_SHADEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_STANDARD_A"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_STANDARD_A { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_STANDARD_AReady) { _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_AContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_STANDARD_A"); _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_AReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_AContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_AContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_AReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_STANDARD_B"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_STANDARD_B { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_STANDARD_BReady) { _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_BContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_STANDARD_B"); _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_BReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_BContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_BContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_BReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_STANDARD_C"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_STANDARD_C { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_STANDARD_CReady) { _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_CContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_STANDARD_C"); _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_CReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_CContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_CContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_STANDARD_CReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_TUNGSTEN"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_TUNGSTEN { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_TUNGSTENReady) { _SENSOR_REFERENCE_ILLUMINANT1_TUNGSTENContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_TUNGSTEN"); _SENSOR_REFERENCE_ILLUMINANT1_TUNGSTENReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_TUNGSTENContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_TUNGSTENContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_TUNGSTENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENT"/>
        /// </summary>
        public static int SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENT { get { if (!_SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENTReady) { _SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENT"); _SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENTReady = true; } return _SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENTContent; } }
        private static int _SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENTContent = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1_WHITE_FLUORESCENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_TEST_PATTERN_MODE_COLOR_BARS"/>
        /// </summary>
        public static int SENSOR_TEST_PATTERN_MODE_COLOR_BARS { get { if (!_SENSOR_TEST_PATTERN_MODE_COLOR_BARSReady) { _SENSOR_TEST_PATTERN_MODE_COLOR_BARSContent = SGetField<int>(LocalBridgeClazz, "SENSOR_TEST_PATTERN_MODE_COLOR_BARS"); _SENSOR_TEST_PATTERN_MODE_COLOR_BARSReady = true; } return _SENSOR_TEST_PATTERN_MODE_COLOR_BARSContent; } }
        private static int _SENSOR_TEST_PATTERN_MODE_COLOR_BARSContent = default;
        private static bool _SENSOR_TEST_PATTERN_MODE_COLOR_BARSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAY"/>
        /// </summary>
        public static int SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAY { get { if (!_SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAYReady) { _SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAYContent = SGetField<int>(LocalBridgeClazz, "SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAY"); _SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAYReady = true; } return _SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAYContent; } }
        private static int _SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAYContent = default;
        private static bool _SENSOR_TEST_PATTERN_MODE_COLOR_BARS_FADE_TO_GRAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_TEST_PATTERN_MODE_CUSTOM1"/>
        /// </summary>
        public static int SENSOR_TEST_PATTERN_MODE_CUSTOM1 { get { if (!_SENSOR_TEST_PATTERN_MODE_CUSTOM1Ready) { _SENSOR_TEST_PATTERN_MODE_CUSTOM1Content = SGetField<int>(LocalBridgeClazz, "SENSOR_TEST_PATTERN_MODE_CUSTOM1"); _SENSOR_TEST_PATTERN_MODE_CUSTOM1Ready = true; } return _SENSOR_TEST_PATTERN_MODE_CUSTOM1Content; } }
        private static int _SENSOR_TEST_PATTERN_MODE_CUSTOM1Content = default;
        private static bool _SENSOR_TEST_PATTERN_MODE_CUSTOM1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_TEST_PATTERN_MODE_OFF"/>
        /// </summary>
        public static int SENSOR_TEST_PATTERN_MODE_OFF { get { if (!_SENSOR_TEST_PATTERN_MODE_OFFReady) { _SENSOR_TEST_PATTERN_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "SENSOR_TEST_PATTERN_MODE_OFF"); _SENSOR_TEST_PATTERN_MODE_OFFReady = true; } return _SENSOR_TEST_PATTERN_MODE_OFFContent; } }
        private static int _SENSOR_TEST_PATTERN_MODE_OFFContent = default;
        private static bool _SENSOR_TEST_PATTERN_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_TEST_PATTERN_MODE_PN9"/>
        /// </summary>
        public static int SENSOR_TEST_PATTERN_MODE_PN9 { get { if (!_SENSOR_TEST_PATTERN_MODE_PN9Ready) { _SENSOR_TEST_PATTERN_MODE_PN9Content = SGetField<int>(LocalBridgeClazz, "SENSOR_TEST_PATTERN_MODE_PN9"); _SENSOR_TEST_PATTERN_MODE_PN9Ready = true; } return _SENSOR_TEST_PATTERN_MODE_PN9Content; } }
        private static int _SENSOR_TEST_PATTERN_MODE_PN9Content = default;
        private static bool _SENSOR_TEST_PATTERN_MODE_PN9Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SENSOR_TEST_PATTERN_MODE_SOLID_COLOR"/>
        /// </summary>
        public static int SENSOR_TEST_PATTERN_MODE_SOLID_COLOR { get { if (!_SENSOR_TEST_PATTERN_MODE_SOLID_COLORReady) { _SENSOR_TEST_PATTERN_MODE_SOLID_COLORContent = SGetField<int>(LocalBridgeClazz, "SENSOR_TEST_PATTERN_MODE_SOLID_COLOR"); _SENSOR_TEST_PATTERN_MODE_SOLID_COLORReady = true; } return _SENSOR_TEST_PATTERN_MODE_SOLID_COLORContent; } }
        private static int _SENSOR_TEST_PATTERN_MODE_SOLID_COLORContent = default;
        private static bool _SENSOR_TEST_PATTERN_MODE_SOLID_COLORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SHADING_MODE_FAST"/>
        /// </summary>
        public static int SHADING_MODE_FAST { get { if (!_SHADING_MODE_FASTReady) { _SHADING_MODE_FASTContent = SGetField<int>(LocalBridgeClazz, "SHADING_MODE_FAST"); _SHADING_MODE_FASTReady = true; } return _SHADING_MODE_FASTContent; } }
        private static int _SHADING_MODE_FASTContent = default;
        private static bool _SHADING_MODE_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SHADING_MODE_HIGH_QUALITY"/>
        /// </summary>
        public static int SHADING_MODE_HIGH_QUALITY { get { if (!_SHADING_MODE_HIGH_QUALITYReady) { _SHADING_MODE_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "SHADING_MODE_HIGH_QUALITY"); _SHADING_MODE_HIGH_QUALITYReady = true; } return _SHADING_MODE_HIGH_QUALITYContent; } }
        private static int _SHADING_MODE_HIGH_QUALITYContent = default;
        private static bool _SHADING_MODE_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SHADING_MODE_OFF"/>
        /// </summary>
        public static int SHADING_MODE_OFF { get { if (!_SHADING_MODE_OFFReady) { _SHADING_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "SHADING_MODE_OFF"); _SHADING_MODE_OFFReady = true; } return _SHADING_MODE_OFFContent; } }
        private static int _SHADING_MODE_OFFContent = default;
        private static bool _SHADING_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_FACE_DETECT_MODE_FULL"/>
        /// </summary>
        public static int STATISTICS_FACE_DETECT_MODE_FULL { get { if (!_STATISTICS_FACE_DETECT_MODE_FULLReady) { _STATISTICS_FACE_DETECT_MODE_FULLContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_FACE_DETECT_MODE_FULL"); _STATISTICS_FACE_DETECT_MODE_FULLReady = true; } return _STATISTICS_FACE_DETECT_MODE_FULLContent; } }
        private static int _STATISTICS_FACE_DETECT_MODE_FULLContent = default;
        private static bool _STATISTICS_FACE_DETECT_MODE_FULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_FACE_DETECT_MODE_OFF"/>
        /// </summary>
        public static int STATISTICS_FACE_DETECT_MODE_OFF { get { if (!_STATISTICS_FACE_DETECT_MODE_OFFReady) { _STATISTICS_FACE_DETECT_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_FACE_DETECT_MODE_OFF"); _STATISTICS_FACE_DETECT_MODE_OFFReady = true; } return _STATISTICS_FACE_DETECT_MODE_OFFContent; } }
        private static int _STATISTICS_FACE_DETECT_MODE_OFFContent = default;
        private static bool _STATISTICS_FACE_DETECT_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_FACE_DETECT_MODE_SIMPLE"/>
        /// </summary>
        public static int STATISTICS_FACE_DETECT_MODE_SIMPLE { get { if (!_STATISTICS_FACE_DETECT_MODE_SIMPLEReady) { _STATISTICS_FACE_DETECT_MODE_SIMPLEContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_FACE_DETECT_MODE_SIMPLE"); _STATISTICS_FACE_DETECT_MODE_SIMPLEReady = true; } return _STATISTICS_FACE_DETECT_MODE_SIMPLEContent; } }
        private static int _STATISTICS_FACE_DETECT_MODE_SIMPLEContent = default;
        private static bool _STATISTICS_FACE_DETECT_MODE_SIMPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_LENS_SHADING_MAP_MODE_OFF"/>
        /// </summary>
        public static int STATISTICS_LENS_SHADING_MAP_MODE_OFF { get { if (!_STATISTICS_LENS_SHADING_MAP_MODE_OFFReady) { _STATISTICS_LENS_SHADING_MAP_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_LENS_SHADING_MAP_MODE_OFF"); _STATISTICS_LENS_SHADING_MAP_MODE_OFFReady = true; } return _STATISTICS_LENS_SHADING_MAP_MODE_OFFContent; } }
        private static int _STATISTICS_LENS_SHADING_MAP_MODE_OFFContent = default;
        private static bool _STATISTICS_LENS_SHADING_MAP_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_LENS_SHADING_MAP_MODE_ON"/>
        /// </summary>
        public static int STATISTICS_LENS_SHADING_MAP_MODE_ON { get { if (!_STATISTICS_LENS_SHADING_MAP_MODE_ONReady) { _STATISTICS_LENS_SHADING_MAP_MODE_ONContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_LENS_SHADING_MAP_MODE_ON"); _STATISTICS_LENS_SHADING_MAP_MODE_ONReady = true; } return _STATISTICS_LENS_SHADING_MAP_MODE_ONContent; } }
        private static int _STATISTICS_LENS_SHADING_MAP_MODE_ONContent = default;
        private static bool _STATISTICS_LENS_SHADING_MAP_MODE_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_OIS_DATA_MODE_OFF"/>
        /// </summary>
        public static int STATISTICS_OIS_DATA_MODE_OFF { get { if (!_STATISTICS_OIS_DATA_MODE_OFFReady) { _STATISTICS_OIS_DATA_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_OIS_DATA_MODE_OFF"); _STATISTICS_OIS_DATA_MODE_OFFReady = true; } return _STATISTICS_OIS_DATA_MODE_OFFContent; } }
        private static int _STATISTICS_OIS_DATA_MODE_OFFContent = default;
        private static bool _STATISTICS_OIS_DATA_MODE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_OIS_DATA_MODE_ON"/>
        /// </summary>
        public static int STATISTICS_OIS_DATA_MODE_ON { get { if (!_STATISTICS_OIS_DATA_MODE_ONReady) { _STATISTICS_OIS_DATA_MODE_ONContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_OIS_DATA_MODE_ON"); _STATISTICS_OIS_DATA_MODE_ONReady = true; } return _STATISTICS_OIS_DATA_MODE_ONContent; } }
        private static int _STATISTICS_OIS_DATA_MODE_ONContent = default;
        private static bool _STATISTICS_OIS_DATA_MODE_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_SCENE_FLICKER_50HZ"/>
        /// </summary>
        public static int STATISTICS_SCENE_FLICKER_50HZ { get { if (!_STATISTICS_SCENE_FLICKER_50HZReady) { _STATISTICS_SCENE_FLICKER_50HZContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_SCENE_FLICKER_50HZ"); _STATISTICS_SCENE_FLICKER_50HZReady = true; } return _STATISTICS_SCENE_FLICKER_50HZContent; } }
        private static int _STATISTICS_SCENE_FLICKER_50HZContent = default;
        private static bool _STATISTICS_SCENE_FLICKER_50HZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_SCENE_FLICKER_60HZ"/>
        /// </summary>
        public static int STATISTICS_SCENE_FLICKER_60HZ { get { if (!_STATISTICS_SCENE_FLICKER_60HZReady) { _STATISTICS_SCENE_FLICKER_60HZContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_SCENE_FLICKER_60HZ"); _STATISTICS_SCENE_FLICKER_60HZReady = true; } return _STATISTICS_SCENE_FLICKER_60HZContent; } }
        private static int _STATISTICS_SCENE_FLICKER_60HZContent = default;
        private static bool _STATISTICS_SCENE_FLICKER_60HZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#STATISTICS_SCENE_FLICKER_NONE"/>
        /// </summary>
        public static int STATISTICS_SCENE_FLICKER_NONE { get { if (!_STATISTICS_SCENE_FLICKER_NONEReady) { _STATISTICS_SCENE_FLICKER_NONEContent = SGetField<int>(LocalBridgeClazz, "STATISTICS_SCENE_FLICKER_NONE"); _STATISTICS_SCENE_FLICKER_NONEReady = true; } return _STATISTICS_SCENE_FLICKER_NONEContent; } }
        private static int _STATISTICS_SCENE_FLICKER_NONEContent = default;
        private static bool _STATISTICS_SCENE_FLICKER_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SYNC_MAX_LATENCY_PER_FRAME_CONTROL"/>
        /// </summary>
        public static int SYNC_MAX_LATENCY_PER_FRAME_CONTROL { get { if (!_SYNC_MAX_LATENCY_PER_FRAME_CONTROLReady) { _SYNC_MAX_LATENCY_PER_FRAME_CONTROLContent = SGetField<int>(LocalBridgeClazz, "SYNC_MAX_LATENCY_PER_FRAME_CONTROL"); _SYNC_MAX_LATENCY_PER_FRAME_CONTROLReady = true; } return _SYNC_MAX_LATENCY_PER_FRAME_CONTROLContent; } }
        private static int _SYNC_MAX_LATENCY_PER_FRAME_CONTROLContent = default;
        private static bool _SYNC_MAX_LATENCY_PER_FRAME_CONTROLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#SYNC_MAX_LATENCY_UNKNOWN"/>
        /// </summary>
        public static int SYNC_MAX_LATENCY_UNKNOWN { get { if (!_SYNC_MAX_LATENCY_UNKNOWNReady) { _SYNC_MAX_LATENCY_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "SYNC_MAX_LATENCY_UNKNOWN"); _SYNC_MAX_LATENCY_UNKNOWNReady = true; } return _SYNC_MAX_LATENCY_UNKNOWNContent; } }
        private static int _SYNC_MAX_LATENCY_UNKNOWNContent = default;
        private static bool _SYNC_MAX_LATENCY_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#TONEMAP_MODE_CONTRAST_CURVE"/>
        /// </summary>
        public static int TONEMAP_MODE_CONTRAST_CURVE { get { if (!_TONEMAP_MODE_CONTRAST_CURVEReady) { _TONEMAP_MODE_CONTRAST_CURVEContent = SGetField<int>(LocalBridgeClazz, "TONEMAP_MODE_CONTRAST_CURVE"); _TONEMAP_MODE_CONTRAST_CURVEReady = true; } return _TONEMAP_MODE_CONTRAST_CURVEContent; } }
        private static int _TONEMAP_MODE_CONTRAST_CURVEContent = default;
        private static bool _TONEMAP_MODE_CONTRAST_CURVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#TONEMAP_MODE_FAST"/>
        /// </summary>
        public static int TONEMAP_MODE_FAST { get { if (!_TONEMAP_MODE_FASTReady) { _TONEMAP_MODE_FASTContent = SGetField<int>(LocalBridgeClazz, "TONEMAP_MODE_FAST"); _TONEMAP_MODE_FASTReady = true; } return _TONEMAP_MODE_FASTContent; } }
        private static int _TONEMAP_MODE_FASTContent = default;
        private static bool _TONEMAP_MODE_FASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#TONEMAP_MODE_GAMMA_VALUE"/>
        /// </summary>
        public static int TONEMAP_MODE_GAMMA_VALUE { get { if (!_TONEMAP_MODE_GAMMA_VALUEReady) { _TONEMAP_MODE_GAMMA_VALUEContent = SGetField<int>(LocalBridgeClazz, "TONEMAP_MODE_GAMMA_VALUE"); _TONEMAP_MODE_GAMMA_VALUEReady = true; } return _TONEMAP_MODE_GAMMA_VALUEContent; } }
        private static int _TONEMAP_MODE_GAMMA_VALUEContent = default;
        private static bool _TONEMAP_MODE_GAMMA_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#TONEMAP_MODE_HIGH_QUALITY"/>
        /// </summary>
        public static int TONEMAP_MODE_HIGH_QUALITY { get { if (!_TONEMAP_MODE_HIGH_QUALITYReady) { _TONEMAP_MODE_HIGH_QUALITYContent = SGetField<int>(LocalBridgeClazz, "TONEMAP_MODE_HIGH_QUALITY"); _TONEMAP_MODE_HIGH_QUALITYReady = true; } return _TONEMAP_MODE_HIGH_QUALITYContent; } }
        private static int _TONEMAP_MODE_HIGH_QUALITYContent = default;
        private static bool _TONEMAP_MODE_HIGH_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#TONEMAP_MODE_PRESET_CURVE"/>
        /// </summary>
        public static int TONEMAP_MODE_PRESET_CURVE { get { if (!_TONEMAP_MODE_PRESET_CURVEReady) { _TONEMAP_MODE_PRESET_CURVEContent = SGetField<int>(LocalBridgeClazz, "TONEMAP_MODE_PRESET_CURVE"); _TONEMAP_MODE_PRESET_CURVEReady = true; } return _TONEMAP_MODE_PRESET_CURVEContent; } }
        private static int _TONEMAP_MODE_PRESET_CURVEContent = default;
        private static bool _TONEMAP_MODE_PRESET_CURVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#TONEMAP_PRESET_CURVE_REC709"/>
        /// </summary>
        public static int TONEMAP_PRESET_CURVE_REC709 { get { if (!_TONEMAP_PRESET_CURVE_REC709Ready) { _TONEMAP_PRESET_CURVE_REC709Content = SGetField<int>(LocalBridgeClazz, "TONEMAP_PRESET_CURVE_REC709"); _TONEMAP_PRESET_CURVE_REC709Ready = true; } return _TONEMAP_PRESET_CURVE_REC709Content; } }
        private static int _TONEMAP_PRESET_CURVE_REC709Content = default;
        private static bool _TONEMAP_PRESET_CURVE_REC709Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#TONEMAP_PRESET_CURVE_SRGB"/>
        /// </summary>
        public static int TONEMAP_PRESET_CURVE_SRGB { get { if (!_TONEMAP_PRESET_CURVE_SRGBReady) { _TONEMAP_PRESET_CURVE_SRGBContent = SGetField<int>(LocalBridgeClazz, "TONEMAP_PRESET_CURVE_SRGB"); _TONEMAP_PRESET_CURVE_SRGBReady = true; } return _TONEMAP_PRESET_CURVE_SRGBContent; } }
        private static int _TONEMAP_PRESET_CURVE_SRGBContent = default;
        private static bool _TONEMAP_PRESET_CURVE_SRGBReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#getKeys()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<TKey> GetKeys()
        {
            return IExecuteWithSignature<Java.Util.List<TKey>>("getKeys", "()Ljava/util/List;");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
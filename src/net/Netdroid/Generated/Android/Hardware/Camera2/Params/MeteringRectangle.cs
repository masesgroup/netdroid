/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Hardware.Camera2.Params
{
    #region MeteringRectangle
    public partial class MeteringRectangle
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/MeteringRectangle.html#%3Cinit%3E(android.graphics.Point,android.util.Size,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Point"/></param>
        /// <param name="arg1"><see cref="Android.Util.Size"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public MeteringRectangle(Android.Graphics.Point arg0, Android.Util.Size arg1, int arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/MeteringRectangle.html#%3Cinit%3E(android.graphics.Rect,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public MeteringRectangle(Android.Graphics.Rect arg0, int arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/MeteringRectangle.html#%3Cinit%3E(int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public MeteringRectangle(int arg0, int arg1, int arg2, int arg3, int arg4)
            : base(arg0, arg1, arg2, arg3, arg4)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/MeteringRectangle.html#METERING_WEIGHT_DONT_CARE"/>
        /// </summary>
        public static int METERING_WEIGHT_DONT_CARE { get { if (!_METERING_WEIGHT_DONT_CAREReady) { _METERING_WEIGHT_DONT_CAREContent = SGetField<int>(LocalBridgeClazz, "METERING_WEIGHT_DONT_CARE"); _METERING_WEIGHT_DONT_CAREReady = true; } return _METERING_WEIGHT_DONT_CAREContent; } }
        private static int _METERING_WEIGHT_DONT_CAREContent = default;
        private static bool _METERING_WEIGHT_DONT_CAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/MeteringRectangle.html#METERING_WEIGHT_MAX"/>
        /// </summary>
        public static int METERING_WEIGHT_MAX { get { if (!_METERING_WEIGHT_MAXReady) { _METERING_WEIGHT_MAXContent = SGetField<int>(LocalBridgeClazz, "METERING_WEIGHT_MAX"); _METERING_WEIGHT_MAXReady = true; } return _METERING_WEIGHT_MAXContent; } }
        private static int _METERING_WEIGHT_MAXContent = default;
        private static bool _METERING_WEIGHT_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/MeteringRectangle.html#METERING_WEIGHT_MIN"/>
        /// </summary>
        public static int METERING_WEIGHT_MIN { get { if (!_METERING_WEIGHT_MINReady) { _METERING_WEIGHT_MINContent = SGetField<int>(LocalBridgeClazz, "METERING_WEIGHT_MIN"); _METERING_WEIGHT_MINReady = true; } return _METERING_WEIGHT_MINContent; } }
        private static int _METERING_WEIGHT_MINContent = default;
        private static bool _METERING_WEIGHT_MINReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/MeteringRectangle.html#getUpperLeftPoint()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Point"/></returns>
        public Android.Graphics.Point GetUpperLeftPoint()
        {
            return IExecuteWithSignature<Android.Graphics.Point>("getUpperLeftPoint", "()Landroid/graphics/Point;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/MeteringRectangle.html#getRect()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Rect"/></returns>
        public Android.Graphics.Rect GetRect()
        {
            return IExecuteWithSignature<Android.Graphics.Rect>("getRect", "()Landroid/graphics/Rect;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/MeteringRectangle.html#getSize()"/>
        /// </summary>
        /// <returns><see cref="Android.Util.Size"/></returns>
        public Android.Util.Size GetSize()
        {
            return IExecuteWithSignature<Android.Util.Size>("getSize", "()Landroid/util/Size;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/MeteringRectangle.html#getHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHeight()
        {
            return IExecuteWithSignature<int>("getHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/MeteringRectangle.html#getMeteringWeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMeteringWeight()
        {
            return IExecuteWithSignature<int>("getMeteringWeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/MeteringRectangle.html#getWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetWidth()
        {
            return IExecuteWithSignature<int>("getWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/MeteringRectangle.html#getX()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetX()
        {
            return IExecuteWithSignature<int>("getX", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/MeteringRectangle.html#getY()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetY()
        {
            return IExecuteWithSignature<int>("getY", "()I");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
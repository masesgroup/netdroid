/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Hardware.Camera2.Params
{
    #region RggbChannelVector declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/RggbChannelVector.html"/>
    /// </summary>
    public partial class RggbChannelVector : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RggbChannelVector>
    {
        const string _bridgeClassName = "android.hardware.camera2.params.RggbChannelVector";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public RggbChannelVector() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public RggbChannelVector(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region RggbChannelVector implementation
    public partial class RggbChannelVector
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/RggbChannelVector.html#%3Cinit%3E(float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        public RggbChannelVector(float arg0, float arg1, float arg2, float arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/RggbChannelVector.html#BLUE"/>
        /// </summary>
        public static int BLUE { get { if (!_BLUEReady) { _BLUEContent = SGetField<int>(LocalBridgeClazz, "BLUE"); _BLUEReady = true; } return _BLUEContent; } }
        private static int _BLUEContent = default;
        private static bool _BLUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/RggbChannelVector.html#COUNT"/>
        /// </summary>
        public static int COUNT { get { if (!_COUNTReady) { _COUNTContent = SGetField<int>(LocalBridgeClazz, "COUNT"); _COUNTReady = true; } return _COUNTContent; } }
        private static int _COUNTContent = default;
        private static bool _COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/RggbChannelVector.html#GREEN_EVEN"/>
        /// </summary>
        public static int GREEN_EVEN { get { if (!_GREEN_EVENReady) { _GREEN_EVENContent = SGetField<int>(LocalBridgeClazz, "GREEN_EVEN"); _GREEN_EVENReady = true; } return _GREEN_EVENContent; } }
        private static int _GREEN_EVENContent = default;
        private static bool _GREEN_EVENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/RggbChannelVector.html#GREEN_ODD"/>
        /// </summary>
        public static int GREEN_ODD { get { if (!_GREEN_ODDReady) { _GREEN_ODDContent = SGetField<int>(LocalBridgeClazz, "GREEN_ODD"); _GREEN_ODDReady = true; } return _GREEN_ODDContent; } }
        private static int _GREEN_ODDContent = default;
        private static bool _GREEN_ODDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/RggbChannelVector.html#RED"/>
        /// </summary>
        public static int RED { get { if (!_REDReady) { _REDContent = SGetField<int>(LocalBridgeClazz, "RED"); _REDReady = true; } return _REDContent; } }
        private static int _REDContent = default;
        private static bool _REDReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/RggbChannelVector.html#getBlue()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetBlue()
        {
            return IExecuteWithSignature<float>("getBlue", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/RggbChannelVector.html#getComponent(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetComponent(int arg0)
        {
            return IExecuteWithSignature<float>("getComponent", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/RggbChannelVector.html#getGreenEven()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetGreenEven()
        {
            return IExecuteWithSignature<float>("getGreenEven", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/RggbChannelVector.html#getGreenOdd()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetGreenOdd()
        {
            return IExecuteWithSignature<float>("getGreenOdd", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/RggbChannelVector.html#getRed()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetRed()
        {
            return IExecuteWithSignature<float>("getRed", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/params/RggbChannelVector.html#copyTo(float[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void CopyTo(float[] arg0, int arg1)
        {
            IExecuteWithSignature("copyTo", "([FI)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
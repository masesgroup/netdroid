/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Hardware.Camera2
{
    #region CameraCharacteristics
    public partial class CameraCharacteristics
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_OPTICAL_BLACK_REGIONS"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_OPTICAL_BLACK_REGIONS { get { if (!_SENSOR_OPTICAL_BLACK_REGIONSReady) { _SENSOR_OPTICAL_BLACK_REGIONSContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_OPTICAL_BLACK_REGIONS"); _SENSOR_OPTICAL_BLACK_REGIONSReady = true; } return _SENSOR_OPTICAL_BLACK_REGIONSContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_OPTICAL_BLACK_REGIONSContent = default;
        private static bool _SENSOR_OPTICAL_BLACK_REGIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_INFO_ACTIVE_ARRAY_SIZE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_INFO_ACTIVE_ARRAY_SIZE { get { if (!_SENSOR_INFO_ACTIVE_ARRAY_SIZEReady) { _SENSOR_INFO_ACTIVE_ARRAY_SIZEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_INFO_ACTIVE_ARRAY_SIZE"); _SENSOR_INFO_ACTIVE_ARRAY_SIZEReady = true; } return _SENSOR_INFO_ACTIVE_ARRAY_SIZEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_INFO_ACTIVE_ARRAY_SIZEContent = default;
        private static bool _SENSOR_INFO_ACTIVE_ARRAY_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_INFO_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_INFO_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTION { get { if (!_SENSOR_INFO_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTIONReady) { _SENSOR_INFO_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_INFO_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTION"); _SENSOR_INFO_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTIONReady = true; } return _SENSOR_INFO_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_INFO_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTIONContent = default;
        private static bool _SENSOR_INFO_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE { get { if (!_SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZEReady) { _SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE"); _SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZEReady = true; } return _SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZEContent = default;
        private static bool _SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTION { get { if (!_SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTIONReady) { _SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTION"); _SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTIONReady = true; } return _SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTIONContent = default;
        private static bool _SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE_MAXIMUM_RESOLUTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_BLACK_LEVEL_PATTERN"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_BLACK_LEVEL_PATTERN { get { if (!_SENSOR_BLACK_LEVEL_PATTERNReady) { _SENSOR_BLACK_LEVEL_PATTERNContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_BLACK_LEVEL_PATTERN"); _SENSOR_BLACK_LEVEL_PATTERNReady = true; } return _SENSOR_BLACK_LEVEL_PATTERNContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_BLACK_LEVEL_PATTERNContent = default;
        private static bool _SENSOR_BLACK_LEVEL_PATTERNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_CAPABILITIES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_CAPABILITIES { get { if (!_CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_CAPABILITIESReady) { _CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_CAPABILITIESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_CAPABILITIES"); _CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_CAPABILITIESReady = true; } return _CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_CAPABILITIESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_CAPABILITIESContent = default;
        private static bool _CONTROL_AVAILABLE_EXTENDED_SCENE_MODE_CAPABILITIESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#REQUEST_AVAILABLE_COLOR_SPACE_PROFILES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key REQUEST_AVAILABLE_COLOR_SPACE_PROFILES { get { if (!_REQUEST_AVAILABLE_COLOR_SPACE_PROFILESReady) { _REQUEST_AVAILABLE_COLOR_SPACE_PROFILESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "REQUEST_AVAILABLE_COLOR_SPACE_PROFILES"); _REQUEST_AVAILABLE_COLOR_SPACE_PROFILESReady = true; } return _REQUEST_AVAILABLE_COLOR_SPACE_PROFILESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _REQUEST_AVAILABLE_COLOR_SPACE_PROFILESContent = default;
        private static bool _REQUEST_AVAILABLE_COLOR_SPACE_PROFILESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_CALIBRATION_TRANSFORM1"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_CALIBRATION_TRANSFORM1 { get { if (!_SENSOR_CALIBRATION_TRANSFORM1Ready) { _SENSOR_CALIBRATION_TRANSFORM1Content = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_CALIBRATION_TRANSFORM1"); _SENSOR_CALIBRATION_TRANSFORM1Ready = true; } return _SENSOR_CALIBRATION_TRANSFORM1Content; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_CALIBRATION_TRANSFORM1Content = default;
        private static bool _SENSOR_CALIBRATION_TRANSFORM1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_CALIBRATION_TRANSFORM2"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_CALIBRATION_TRANSFORM2 { get { if (!_SENSOR_CALIBRATION_TRANSFORM2Ready) { _SENSOR_CALIBRATION_TRANSFORM2Content = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_CALIBRATION_TRANSFORM2"); _SENSOR_CALIBRATION_TRANSFORM2Ready = true; } return _SENSOR_CALIBRATION_TRANSFORM2Content; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_CALIBRATION_TRANSFORM2Content = default;
        private static bool _SENSOR_CALIBRATION_TRANSFORM2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_COLOR_TRANSFORM1"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_COLOR_TRANSFORM1 { get { if (!_SENSOR_COLOR_TRANSFORM1Ready) { _SENSOR_COLOR_TRANSFORM1Content = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_COLOR_TRANSFORM1"); _SENSOR_COLOR_TRANSFORM1Ready = true; } return _SENSOR_COLOR_TRANSFORM1Content; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_COLOR_TRANSFORM1Content = default;
        private static bool _SENSOR_COLOR_TRANSFORM1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_COLOR_TRANSFORM2"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_COLOR_TRANSFORM2 { get { if (!_SENSOR_COLOR_TRANSFORM2Ready) { _SENSOR_COLOR_TRANSFORM2Content = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_COLOR_TRANSFORM2"); _SENSOR_COLOR_TRANSFORM2Ready = true; } return _SENSOR_COLOR_TRANSFORM2Content; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_COLOR_TRANSFORM2Content = default;
        private static bool _SENSOR_COLOR_TRANSFORM2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_FORWARD_MATRIX1"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_FORWARD_MATRIX1 { get { if (!_SENSOR_FORWARD_MATRIX1Ready) { _SENSOR_FORWARD_MATRIX1Content = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_FORWARD_MATRIX1"); _SENSOR_FORWARD_MATRIX1Ready = true; } return _SENSOR_FORWARD_MATRIX1Content; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_FORWARD_MATRIX1Content = default;
        private static bool _SENSOR_FORWARD_MATRIX1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_FORWARD_MATRIX2"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_FORWARD_MATRIX2 { get { if (!_SENSOR_FORWARD_MATRIX2Ready) { _SENSOR_FORWARD_MATRIX2Content = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_FORWARD_MATRIX2"); _SENSOR_FORWARD_MATRIX2Ready = true; } return _SENSOR_FORWARD_MATRIX2Content; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_FORWARD_MATRIX2Content = default;
        private static bool _SENSOR_FORWARD_MATRIX2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#INFO_DEVICE_STATE_SENSOR_ORIENTATION_MAP"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key INFO_DEVICE_STATE_SENSOR_ORIENTATION_MAP { get { if (!_INFO_DEVICE_STATE_SENSOR_ORIENTATION_MAPReady) { _INFO_DEVICE_STATE_SENSOR_ORIENTATION_MAPContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "INFO_DEVICE_STATE_SENSOR_ORIENTATION_MAP"); _INFO_DEVICE_STATE_SENSOR_ORIENTATION_MAPReady = true; } return _INFO_DEVICE_STATE_SENSOR_ORIENTATION_MAPContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _INFO_DEVICE_STATE_SENSOR_ORIENTATION_MAPContent = default;
        private static bool _INFO_DEVICE_STATE_SENSOR_ORIENTATION_MAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#REQUEST_AVAILABLE_DYNAMIC_RANGE_PROFILES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key REQUEST_AVAILABLE_DYNAMIC_RANGE_PROFILES { get { if (!_REQUEST_AVAILABLE_DYNAMIC_RANGE_PROFILESReady) { _REQUEST_AVAILABLE_DYNAMIC_RANGE_PROFILESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "REQUEST_AVAILABLE_DYNAMIC_RANGE_PROFILES"); _REQUEST_AVAILABLE_DYNAMIC_RANGE_PROFILESReady = true; } return _REQUEST_AVAILABLE_DYNAMIC_RANGE_PROFILESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _REQUEST_AVAILABLE_DYNAMIC_RANGE_PROFILESContent = default;
        private static bool _REQUEST_AVAILABLE_DYNAMIC_RANGE_PROFILESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SCALER_MANDATORY_CONCURRENT_STREAM_COMBINATIONS"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SCALER_MANDATORY_CONCURRENT_STREAM_COMBINATIONS { get { if (!_SCALER_MANDATORY_CONCURRENT_STREAM_COMBINATIONSReady) { _SCALER_MANDATORY_CONCURRENT_STREAM_COMBINATIONSContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SCALER_MANDATORY_CONCURRENT_STREAM_COMBINATIONS"); _SCALER_MANDATORY_CONCURRENT_STREAM_COMBINATIONSReady = true; } return _SCALER_MANDATORY_CONCURRENT_STREAM_COMBINATIONSContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SCALER_MANDATORY_CONCURRENT_STREAM_COMBINATIONSContent = default;
        private static bool _SCALER_MANDATORY_CONCURRENT_STREAM_COMBINATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SCALER_MANDATORY_MAXIMUM_RESOLUTION_STREAM_COMBINATIONS"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SCALER_MANDATORY_MAXIMUM_RESOLUTION_STREAM_COMBINATIONS { get { if (!_SCALER_MANDATORY_MAXIMUM_RESOLUTION_STREAM_COMBINATIONSReady) { _SCALER_MANDATORY_MAXIMUM_RESOLUTION_STREAM_COMBINATIONSContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SCALER_MANDATORY_MAXIMUM_RESOLUTION_STREAM_COMBINATIONS"); _SCALER_MANDATORY_MAXIMUM_RESOLUTION_STREAM_COMBINATIONSReady = true; } return _SCALER_MANDATORY_MAXIMUM_RESOLUTION_STREAM_COMBINATIONSContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SCALER_MANDATORY_MAXIMUM_RESOLUTION_STREAM_COMBINATIONSContent = default;
        private static bool _SCALER_MANDATORY_MAXIMUM_RESOLUTION_STREAM_COMBINATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SCALER_MANDATORY_PREVIEW_STABILIZATION_OUTPUT_STREAM_COMBINATIONS"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SCALER_MANDATORY_PREVIEW_STABILIZATION_OUTPUT_STREAM_COMBINATIONS { get { if (!_SCALER_MANDATORY_PREVIEW_STABILIZATION_OUTPUT_STREAM_COMBINATIONSReady) { _SCALER_MANDATORY_PREVIEW_STABILIZATION_OUTPUT_STREAM_COMBINATIONSContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SCALER_MANDATORY_PREVIEW_STABILIZATION_OUTPUT_STREAM_COMBINATIONS"); _SCALER_MANDATORY_PREVIEW_STABILIZATION_OUTPUT_STREAM_COMBINATIONSReady = true; } return _SCALER_MANDATORY_PREVIEW_STABILIZATION_OUTPUT_STREAM_COMBINATIONSContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SCALER_MANDATORY_PREVIEW_STABILIZATION_OUTPUT_STREAM_COMBINATIONSContent = default;
        private static bool _SCALER_MANDATORY_PREVIEW_STABILIZATION_OUTPUT_STREAM_COMBINATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SCALER_MANDATORY_STREAM_COMBINATIONS"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SCALER_MANDATORY_STREAM_COMBINATIONS { get { if (!_SCALER_MANDATORY_STREAM_COMBINATIONSReady) { _SCALER_MANDATORY_STREAM_COMBINATIONSContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SCALER_MANDATORY_STREAM_COMBINATIONS"); _SCALER_MANDATORY_STREAM_COMBINATIONSReady = true; } return _SCALER_MANDATORY_STREAM_COMBINATIONSContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SCALER_MANDATORY_STREAM_COMBINATIONSContent = default;
        private static bool _SCALER_MANDATORY_STREAM_COMBINATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SCALER_MANDATORY_TEN_BIT_OUTPUT_STREAM_COMBINATIONS"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SCALER_MANDATORY_TEN_BIT_OUTPUT_STREAM_COMBINATIONS { get { if (!_SCALER_MANDATORY_TEN_BIT_OUTPUT_STREAM_COMBINATIONSReady) { _SCALER_MANDATORY_TEN_BIT_OUTPUT_STREAM_COMBINATIONSContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SCALER_MANDATORY_TEN_BIT_OUTPUT_STREAM_COMBINATIONS"); _SCALER_MANDATORY_TEN_BIT_OUTPUT_STREAM_COMBINATIONSReady = true; } return _SCALER_MANDATORY_TEN_BIT_OUTPUT_STREAM_COMBINATIONSContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SCALER_MANDATORY_TEN_BIT_OUTPUT_STREAM_COMBINATIONSContent = default;
        private static bool _SCALER_MANDATORY_TEN_BIT_OUTPUT_STREAM_COMBINATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SCALER_MANDATORY_USE_CASE_STREAM_COMBINATIONS"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SCALER_MANDATORY_USE_CASE_STREAM_COMBINATIONS { get { if (!_SCALER_MANDATORY_USE_CASE_STREAM_COMBINATIONSReady) { _SCALER_MANDATORY_USE_CASE_STREAM_COMBINATIONSContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SCALER_MANDATORY_USE_CASE_STREAM_COMBINATIONS"); _SCALER_MANDATORY_USE_CASE_STREAM_COMBINATIONSReady = true; } return _SCALER_MANDATORY_USE_CASE_STREAM_COMBINATIONSContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SCALER_MANDATORY_USE_CASE_STREAM_COMBINATIONSContent = default;
        private static bool _SCALER_MANDATORY_USE_CASE_STREAM_COMBINATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SCALER_MULTI_RESOLUTION_STREAM_CONFIGURATION_MAP"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SCALER_MULTI_RESOLUTION_STREAM_CONFIGURATION_MAP { get { if (!_SCALER_MULTI_RESOLUTION_STREAM_CONFIGURATION_MAPReady) { _SCALER_MULTI_RESOLUTION_STREAM_CONFIGURATION_MAPContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SCALER_MULTI_RESOLUTION_STREAM_CONFIGURATION_MAP"); _SCALER_MULTI_RESOLUTION_STREAM_CONFIGURATION_MAPReady = true; } return _SCALER_MULTI_RESOLUTION_STREAM_CONFIGURATION_MAPContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SCALER_MULTI_RESOLUTION_STREAM_CONFIGURATION_MAPContent = default;
        private static bool _SCALER_MULTI_RESOLUTION_STREAM_CONFIGURATION_MAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SCALER_STREAM_CONFIGURATION_MAP"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SCALER_STREAM_CONFIGURATION_MAP { get { if (!_SCALER_STREAM_CONFIGURATION_MAPReady) { _SCALER_STREAM_CONFIGURATION_MAPContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SCALER_STREAM_CONFIGURATION_MAP"); _SCALER_STREAM_CONFIGURATION_MAPReady = true; } return _SCALER_STREAM_CONFIGURATION_MAPContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SCALER_STREAM_CONFIGURATION_MAPContent = default;
        private static bool _SCALER_STREAM_CONFIGURATION_MAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SCALER_STREAM_CONFIGURATION_MAP_MAXIMUM_RESOLUTION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SCALER_STREAM_CONFIGURATION_MAP_MAXIMUM_RESOLUTION { get { if (!_SCALER_STREAM_CONFIGURATION_MAP_MAXIMUM_RESOLUTIONReady) { _SCALER_STREAM_CONFIGURATION_MAP_MAXIMUM_RESOLUTIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SCALER_STREAM_CONFIGURATION_MAP_MAXIMUM_RESOLUTION"); _SCALER_STREAM_CONFIGURATION_MAP_MAXIMUM_RESOLUTIONReady = true; } return _SCALER_STREAM_CONFIGURATION_MAP_MAXIMUM_RESOLUTIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SCALER_STREAM_CONFIGURATION_MAP_MAXIMUM_RESOLUTIONContent = default;
        private static bool _SCALER_STREAM_CONFIGURATION_MAP_MAXIMUM_RESOLUTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_LOW_LIGHT_BOOST_INFO_LUMINANCE_RANGE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_LOW_LIGHT_BOOST_INFO_LUMINANCE_RANGE { get { if (!_CONTROL_LOW_LIGHT_BOOST_INFO_LUMINANCE_RANGEReady) { _CONTROL_LOW_LIGHT_BOOST_INFO_LUMINANCE_RANGEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_LOW_LIGHT_BOOST_INFO_LUMINANCE_RANGE"); _CONTROL_LOW_LIGHT_BOOST_INFO_LUMINANCE_RANGEReady = true; } return _CONTROL_LOW_LIGHT_BOOST_INFO_LUMINANCE_RANGEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_LOW_LIGHT_BOOST_INFO_LUMINANCE_RANGEContent = default;
        private static bool _CONTROL_LOW_LIGHT_BOOST_INFO_LUMINANCE_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_ZOOM_RATIO_RANGE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_ZOOM_RATIO_RANGE { get { if (!_CONTROL_ZOOM_RATIO_RANGEReady) { _CONTROL_ZOOM_RATIO_RANGEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_ZOOM_RATIO_RANGE"); _CONTROL_ZOOM_RATIO_RANGEReady = true; } return _CONTROL_ZOOM_RATIO_RANGEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_ZOOM_RATIO_RANGEContent = default;
        private static bool _CONTROL_ZOOM_RATIO_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES { get { if (!_CONTROL_AE_AVAILABLE_TARGET_FPS_RANGESReady) { _CONTROL_AE_AVAILABLE_TARGET_FPS_RANGESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES"); _CONTROL_AE_AVAILABLE_TARGET_FPS_RANGESReady = true; } return _CONTROL_AE_AVAILABLE_TARGET_FPS_RANGESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_AE_AVAILABLE_TARGET_FPS_RANGESContent = default;
        private static bool _CONTROL_AE_AVAILABLE_TARGET_FPS_RANGESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AE_COMPENSATION_RANGE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_AE_COMPENSATION_RANGE { get { if (!_CONTROL_AE_COMPENSATION_RANGEReady) { _CONTROL_AE_COMPENSATION_RANGEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_AE_COMPENSATION_RANGE"); _CONTROL_AE_COMPENSATION_RANGEReady = true; } return _CONTROL_AE_COMPENSATION_RANGEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_AE_COMPENSATION_RANGEContent = default;
        private static bool _CONTROL_AE_COMPENSATION_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_POST_RAW_SENSITIVITY_BOOST_RANGE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_POST_RAW_SENSITIVITY_BOOST_RANGE { get { if (!_CONTROL_POST_RAW_SENSITIVITY_BOOST_RANGEReady) { _CONTROL_POST_RAW_SENSITIVITY_BOOST_RANGEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_POST_RAW_SENSITIVITY_BOOST_RANGE"); _CONTROL_POST_RAW_SENSITIVITY_BOOST_RANGEReady = true; } return _CONTROL_POST_RAW_SENSITIVITY_BOOST_RANGEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_POST_RAW_SENSITIVITY_BOOST_RANGEContent = default;
        private static bool _CONTROL_POST_RAW_SENSITIVITY_BOOST_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_INFO_SENSITIVITY_RANGE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_INFO_SENSITIVITY_RANGE { get { if (!_SENSOR_INFO_SENSITIVITY_RANGEReady) { _SENSOR_INFO_SENSITIVITY_RANGEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_INFO_SENSITIVITY_RANGE"); _SENSOR_INFO_SENSITIVITY_RANGEReady = true; } return _SENSOR_INFO_SENSITIVITY_RANGEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_INFO_SENSITIVITY_RANGEContent = default;
        private static bool _SENSOR_INFO_SENSITIVITY_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_INFO_EXPOSURE_TIME_RANGE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_INFO_EXPOSURE_TIME_RANGE { get { if (!_SENSOR_INFO_EXPOSURE_TIME_RANGEReady) { _SENSOR_INFO_EXPOSURE_TIME_RANGEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_INFO_EXPOSURE_TIME_RANGE"); _SENSOR_INFO_EXPOSURE_TIME_RANGEReady = true; } return _SENSOR_INFO_EXPOSURE_TIME_RANGEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_INFO_EXPOSURE_TIME_RANGEContent = default;
        private static bool _SENSOR_INFO_EXPOSURE_TIME_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AE_COMPENSATION_STEP"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_AE_COMPENSATION_STEP { get { if (!_CONTROL_AE_COMPENSATION_STEPReady) { _CONTROL_AE_COMPENSATION_STEPContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_AE_COMPENSATION_STEP"); _CONTROL_AE_COMPENSATION_STEPReady = true; } return _CONTROL_AE_COMPENSATION_STEPContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_AE_COMPENSATION_STEPContent = default;
        private static bool _CONTROL_AE_COMPENSATION_STEPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#JPEG_AVAILABLE_THUMBNAIL_SIZES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key JPEG_AVAILABLE_THUMBNAIL_SIZES { get { if (!_JPEG_AVAILABLE_THUMBNAIL_SIZESReady) { _JPEG_AVAILABLE_THUMBNAIL_SIZESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "JPEG_AVAILABLE_THUMBNAIL_SIZES"); _JPEG_AVAILABLE_THUMBNAIL_SIZESReady = true; } return _JPEG_AVAILABLE_THUMBNAIL_SIZESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _JPEG_AVAILABLE_THUMBNAIL_SIZESContent = default;
        private static bool _JPEG_AVAILABLE_THUMBNAIL_SIZESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SCALER_DEFAULT_SECURE_IMAGE_SIZE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SCALER_DEFAULT_SECURE_IMAGE_SIZE { get { if (!_SCALER_DEFAULT_SECURE_IMAGE_SIZEReady) { _SCALER_DEFAULT_SECURE_IMAGE_SIZEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SCALER_DEFAULT_SECURE_IMAGE_SIZE"); _SCALER_DEFAULT_SECURE_IMAGE_SIZEReady = true; } return _SCALER_DEFAULT_SECURE_IMAGE_SIZEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SCALER_DEFAULT_SECURE_IMAGE_SIZEContent = default;
        private static bool _SCALER_DEFAULT_SECURE_IMAGE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_INFO_BINNING_FACTOR"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_INFO_BINNING_FACTOR { get { if (!_SENSOR_INFO_BINNING_FACTORReady) { _SENSOR_INFO_BINNING_FACTORContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_INFO_BINNING_FACTOR"); _SENSOR_INFO_BINNING_FACTORReady = true; } return _SENSOR_INFO_BINNING_FACTORContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_INFO_BINNING_FACTORContent = default;
        private static bool _SENSOR_INFO_BINNING_FACTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_INFO_PIXEL_ARRAY_SIZE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_INFO_PIXEL_ARRAY_SIZE { get { if (!_SENSOR_INFO_PIXEL_ARRAY_SIZEReady) { _SENSOR_INFO_PIXEL_ARRAY_SIZEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_INFO_PIXEL_ARRAY_SIZE"); _SENSOR_INFO_PIXEL_ARRAY_SIZEReady = true; } return _SENSOR_INFO_PIXEL_ARRAY_SIZEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_INFO_PIXEL_ARRAY_SIZEContent = default;
        private static bool _SENSOR_INFO_PIXEL_ARRAY_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_INFO_PIXEL_ARRAY_SIZE_MAXIMUM_RESOLUTION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_INFO_PIXEL_ARRAY_SIZE_MAXIMUM_RESOLUTION { get { if (!_SENSOR_INFO_PIXEL_ARRAY_SIZE_MAXIMUM_RESOLUTIONReady) { _SENSOR_INFO_PIXEL_ARRAY_SIZE_MAXIMUM_RESOLUTIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_INFO_PIXEL_ARRAY_SIZE_MAXIMUM_RESOLUTION"); _SENSOR_INFO_PIXEL_ARRAY_SIZE_MAXIMUM_RESOLUTIONReady = true; } return _SENSOR_INFO_PIXEL_ARRAY_SIZE_MAXIMUM_RESOLUTIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_INFO_PIXEL_ARRAY_SIZE_MAXIMUM_RESOLUTIONContent = default;
        private static bool _SENSOR_INFO_PIXEL_ARRAY_SIZE_MAXIMUM_RESOLUTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_INFO_PHYSICAL_SIZE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_INFO_PHYSICAL_SIZE { get { if (!_SENSOR_INFO_PHYSICAL_SIZEReady) { _SENSOR_INFO_PHYSICAL_SIZEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_INFO_PHYSICAL_SIZE"); _SENSOR_INFO_PHYSICAL_SIZEReady = true; } return _SENSOR_INFO_PHYSICAL_SIZEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_INFO_PHYSICAL_SIZEContent = default;
        private static bool _SENSOR_INFO_PHYSICAL_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#STATISTICS_INFO_AVAILABLE_HOT_PIXEL_MAP_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key STATISTICS_INFO_AVAILABLE_HOT_PIXEL_MAP_MODES { get { if (!_STATISTICS_INFO_AVAILABLE_HOT_PIXEL_MAP_MODESReady) { _STATISTICS_INFO_AVAILABLE_HOT_PIXEL_MAP_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "STATISTICS_INFO_AVAILABLE_HOT_PIXEL_MAP_MODES"); _STATISTICS_INFO_AVAILABLE_HOT_PIXEL_MAP_MODESReady = true; } return _STATISTICS_INFO_AVAILABLE_HOT_PIXEL_MAP_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _STATISTICS_INFO_AVAILABLE_HOT_PIXEL_MAP_MODESContent = default;
        private static bool _STATISTICS_INFO_AVAILABLE_HOT_PIXEL_MAP_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LENS_DISTORTION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LENS_DISTORTION { get { if (!_LENS_DISTORTIONReady) { _LENS_DISTORTIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LENS_DISTORTION"); _LENS_DISTORTIONReady = true; } return _LENS_DISTORTIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LENS_DISTORTIONContent = default;
        private static bool _LENS_DISTORTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LENS_DISTORTION_MAXIMUM_RESOLUTION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LENS_DISTORTION_MAXIMUM_RESOLUTION { get { if (!_LENS_DISTORTION_MAXIMUM_RESOLUTIONReady) { _LENS_DISTORTION_MAXIMUM_RESOLUTIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LENS_DISTORTION_MAXIMUM_RESOLUTION"); _LENS_DISTORTION_MAXIMUM_RESOLUTIONReady = true; } return _LENS_DISTORTION_MAXIMUM_RESOLUTIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LENS_DISTORTION_MAXIMUM_RESOLUTIONContent = default;
        private static bool _LENS_DISTORTION_MAXIMUM_RESOLUTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LENS_INFO_AVAILABLE_APERTURES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LENS_INFO_AVAILABLE_APERTURES { get { if (!_LENS_INFO_AVAILABLE_APERTURESReady) { _LENS_INFO_AVAILABLE_APERTURESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LENS_INFO_AVAILABLE_APERTURES"); _LENS_INFO_AVAILABLE_APERTURESReady = true; } return _LENS_INFO_AVAILABLE_APERTURESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LENS_INFO_AVAILABLE_APERTURESContent = default;
        private static bool _LENS_INFO_AVAILABLE_APERTURESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LENS_INFO_AVAILABLE_FILTER_DENSITIES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LENS_INFO_AVAILABLE_FILTER_DENSITIES { get { if (!_LENS_INFO_AVAILABLE_FILTER_DENSITIESReady) { _LENS_INFO_AVAILABLE_FILTER_DENSITIESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LENS_INFO_AVAILABLE_FILTER_DENSITIES"); _LENS_INFO_AVAILABLE_FILTER_DENSITIESReady = true; } return _LENS_INFO_AVAILABLE_FILTER_DENSITIESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LENS_INFO_AVAILABLE_FILTER_DENSITIESContent = default;
        private static bool _LENS_INFO_AVAILABLE_FILTER_DENSITIESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LENS_INFO_AVAILABLE_FOCAL_LENGTHS"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LENS_INFO_AVAILABLE_FOCAL_LENGTHS { get { if (!_LENS_INFO_AVAILABLE_FOCAL_LENGTHSReady) { _LENS_INFO_AVAILABLE_FOCAL_LENGTHSContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LENS_INFO_AVAILABLE_FOCAL_LENGTHS"); _LENS_INFO_AVAILABLE_FOCAL_LENGTHSReady = true; } return _LENS_INFO_AVAILABLE_FOCAL_LENGTHSContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LENS_INFO_AVAILABLE_FOCAL_LENGTHSContent = default;
        private static bool _LENS_INFO_AVAILABLE_FOCAL_LENGTHSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LENS_INTRINSIC_CALIBRATION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LENS_INTRINSIC_CALIBRATION { get { if (!_LENS_INTRINSIC_CALIBRATIONReady) { _LENS_INTRINSIC_CALIBRATIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LENS_INTRINSIC_CALIBRATION"); _LENS_INTRINSIC_CALIBRATIONReady = true; } return _LENS_INTRINSIC_CALIBRATIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LENS_INTRINSIC_CALIBRATIONContent = default;
        private static bool _LENS_INTRINSIC_CALIBRATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LENS_INTRINSIC_CALIBRATION_MAXIMUM_RESOLUTION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LENS_INTRINSIC_CALIBRATION_MAXIMUM_RESOLUTION { get { if (!_LENS_INTRINSIC_CALIBRATION_MAXIMUM_RESOLUTIONReady) { _LENS_INTRINSIC_CALIBRATION_MAXIMUM_RESOLUTIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LENS_INTRINSIC_CALIBRATION_MAXIMUM_RESOLUTION"); _LENS_INTRINSIC_CALIBRATION_MAXIMUM_RESOLUTIONReady = true; } return _LENS_INTRINSIC_CALIBRATION_MAXIMUM_RESOLUTIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LENS_INTRINSIC_CALIBRATION_MAXIMUM_RESOLUTIONContent = default;
        private static bool _LENS_INTRINSIC_CALIBRATION_MAXIMUM_RESOLUTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LENS_POSE_ROTATION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LENS_POSE_ROTATION { get { if (!_LENS_POSE_ROTATIONReady) { _LENS_POSE_ROTATIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LENS_POSE_ROTATION"); _LENS_POSE_ROTATIONReady = true; } return _LENS_POSE_ROTATIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LENS_POSE_ROTATIONContent = default;
        private static bool _LENS_POSE_ROTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LENS_POSE_TRANSLATION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LENS_POSE_TRANSLATION { get { if (!_LENS_POSE_TRANSLATIONReady) { _LENS_POSE_TRANSLATIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LENS_POSE_TRANSLATION"); _LENS_POSE_TRANSLATIONReady = true; } return _LENS_POSE_TRANSLATIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LENS_POSE_TRANSLATIONContent = default;
        private static bool _LENS_POSE_TRANSLATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LENS_RADIAL_DISTORTION"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LENS_RADIAL_DISTORTION { get { if (!_LENS_RADIAL_DISTORTIONReady) { _LENS_RADIAL_DISTORTIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LENS_RADIAL_DISTORTION"); _LENS_RADIAL_DISTORTIONReady = true; } return _LENS_RADIAL_DISTORTIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LENS_RADIAL_DISTORTIONContent = default;
        private static bool _LENS_RADIAL_DISTORTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#AUTOMOTIVE_LENS_FACING"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key AUTOMOTIVE_LENS_FACING { get { if (!_AUTOMOTIVE_LENS_FACINGReady) { _AUTOMOTIVE_LENS_FACINGContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "AUTOMOTIVE_LENS_FACING"); _AUTOMOTIVE_LENS_FACINGReady = true; } return _AUTOMOTIVE_LENS_FACINGContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _AUTOMOTIVE_LENS_FACINGContent = default;
        private static bool _AUTOMOTIVE_LENS_FACINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#COLOR_CORRECTION_AVAILABLE_ABERRATION_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key COLOR_CORRECTION_AVAILABLE_ABERRATION_MODES { get { if (!_COLOR_CORRECTION_AVAILABLE_ABERRATION_MODESReady) { _COLOR_CORRECTION_AVAILABLE_ABERRATION_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "COLOR_CORRECTION_AVAILABLE_ABERRATION_MODES"); _COLOR_CORRECTION_AVAILABLE_ABERRATION_MODESReady = true; } return _COLOR_CORRECTION_AVAILABLE_ABERRATION_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _COLOR_CORRECTION_AVAILABLE_ABERRATION_MODESContent = default;
        private static bool _COLOR_CORRECTION_AVAILABLE_ABERRATION_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AE_AVAILABLE_ANTIBANDING_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_AE_AVAILABLE_ANTIBANDING_MODES { get { if (!_CONTROL_AE_AVAILABLE_ANTIBANDING_MODESReady) { _CONTROL_AE_AVAILABLE_ANTIBANDING_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_AE_AVAILABLE_ANTIBANDING_MODES"); _CONTROL_AE_AVAILABLE_ANTIBANDING_MODESReady = true; } return _CONTROL_AE_AVAILABLE_ANTIBANDING_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_AE_AVAILABLE_ANTIBANDING_MODESContent = default;
        private static bool _CONTROL_AE_AVAILABLE_ANTIBANDING_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AE_AVAILABLE_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_AE_AVAILABLE_MODES { get { if (!_CONTROL_AE_AVAILABLE_MODESReady) { _CONTROL_AE_AVAILABLE_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_AE_AVAILABLE_MODES"); _CONTROL_AE_AVAILABLE_MODESReady = true; } return _CONTROL_AE_AVAILABLE_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_AE_AVAILABLE_MODESContent = default;
        private static bool _CONTROL_AE_AVAILABLE_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AF_AVAILABLE_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_AF_AVAILABLE_MODES { get { if (!_CONTROL_AF_AVAILABLE_MODESReady) { _CONTROL_AF_AVAILABLE_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_AF_AVAILABLE_MODES"); _CONTROL_AF_AVAILABLE_MODESReady = true; } return _CONTROL_AF_AVAILABLE_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_AF_AVAILABLE_MODESContent = default;
        private static bool _CONTROL_AF_AVAILABLE_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AVAILABLE_EFFECTS"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_AVAILABLE_EFFECTS { get { if (!_CONTROL_AVAILABLE_EFFECTSReady) { _CONTROL_AVAILABLE_EFFECTSContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_AVAILABLE_EFFECTS"); _CONTROL_AVAILABLE_EFFECTSReady = true; } return _CONTROL_AVAILABLE_EFFECTSContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_AVAILABLE_EFFECTSContent = default;
        private static bool _CONTROL_AVAILABLE_EFFECTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AVAILABLE_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_AVAILABLE_MODES { get { if (!_CONTROL_AVAILABLE_MODESReady) { _CONTROL_AVAILABLE_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_AVAILABLE_MODES"); _CONTROL_AVAILABLE_MODESReady = true; } return _CONTROL_AVAILABLE_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_AVAILABLE_MODESContent = default;
        private static bool _CONTROL_AVAILABLE_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AVAILABLE_SCENE_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_AVAILABLE_SCENE_MODES { get { if (!_CONTROL_AVAILABLE_SCENE_MODESReady) { _CONTROL_AVAILABLE_SCENE_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_AVAILABLE_SCENE_MODES"); _CONTROL_AVAILABLE_SCENE_MODESReady = true; } return _CONTROL_AVAILABLE_SCENE_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_AVAILABLE_SCENE_MODESContent = default;
        private static bool _CONTROL_AVAILABLE_SCENE_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AVAILABLE_SETTINGS_OVERRIDES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_AVAILABLE_SETTINGS_OVERRIDES { get { if (!_CONTROL_AVAILABLE_SETTINGS_OVERRIDESReady) { _CONTROL_AVAILABLE_SETTINGS_OVERRIDESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_AVAILABLE_SETTINGS_OVERRIDES"); _CONTROL_AVAILABLE_SETTINGS_OVERRIDESReady = true; } return _CONTROL_AVAILABLE_SETTINGS_OVERRIDESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_AVAILABLE_SETTINGS_OVERRIDESContent = default;
        private static bool _CONTROL_AVAILABLE_SETTINGS_OVERRIDESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES { get { if (!_CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODESReady) { _CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES"); _CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODESReady = true; } return _CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODESContent = default;
        private static bool _CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AWB_AVAILABLE_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_AWB_AVAILABLE_MODES { get { if (!_CONTROL_AWB_AVAILABLE_MODESReady) { _CONTROL_AWB_AVAILABLE_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_AWB_AVAILABLE_MODES"); _CONTROL_AWB_AVAILABLE_MODESReady = true; } return _CONTROL_AWB_AVAILABLE_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_AWB_AVAILABLE_MODESContent = default;
        private static bool _CONTROL_AWB_AVAILABLE_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#DISTORTION_CORRECTION_AVAILABLE_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key DISTORTION_CORRECTION_AVAILABLE_MODES { get { if (!_DISTORTION_CORRECTION_AVAILABLE_MODESReady) { _DISTORTION_CORRECTION_AVAILABLE_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "DISTORTION_CORRECTION_AVAILABLE_MODES"); _DISTORTION_CORRECTION_AVAILABLE_MODESReady = true; } return _DISTORTION_CORRECTION_AVAILABLE_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _DISTORTION_CORRECTION_AVAILABLE_MODESContent = default;
        private static bool _DISTORTION_CORRECTION_AVAILABLE_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#EDGE_AVAILABLE_EDGE_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key EDGE_AVAILABLE_EDGE_MODES { get { if (!_EDGE_AVAILABLE_EDGE_MODESReady) { _EDGE_AVAILABLE_EDGE_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "EDGE_AVAILABLE_EDGE_MODES"); _EDGE_AVAILABLE_EDGE_MODESReady = true; } return _EDGE_AVAILABLE_EDGE_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _EDGE_AVAILABLE_EDGE_MODESContent = default;
        private static bool _EDGE_AVAILABLE_EDGE_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#HOT_PIXEL_AVAILABLE_HOT_PIXEL_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key HOT_PIXEL_AVAILABLE_HOT_PIXEL_MODES { get { if (!_HOT_PIXEL_AVAILABLE_HOT_PIXEL_MODESReady) { _HOT_PIXEL_AVAILABLE_HOT_PIXEL_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "HOT_PIXEL_AVAILABLE_HOT_PIXEL_MODES"); _HOT_PIXEL_AVAILABLE_HOT_PIXEL_MODESReady = true; } return _HOT_PIXEL_AVAILABLE_HOT_PIXEL_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _HOT_PIXEL_AVAILABLE_HOT_PIXEL_MODESContent = default;
        private static bool _HOT_PIXEL_AVAILABLE_HOT_PIXEL_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LENS_INFO_AVAILABLE_OPTICAL_STABILIZATION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LENS_INFO_AVAILABLE_OPTICAL_STABILIZATION { get { if (!_LENS_INFO_AVAILABLE_OPTICAL_STABILIZATIONReady) { _LENS_INFO_AVAILABLE_OPTICAL_STABILIZATIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LENS_INFO_AVAILABLE_OPTICAL_STABILIZATION"); _LENS_INFO_AVAILABLE_OPTICAL_STABILIZATIONReady = true; } return _LENS_INFO_AVAILABLE_OPTICAL_STABILIZATIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LENS_INFO_AVAILABLE_OPTICAL_STABILIZATIONContent = default;
        private static bool _LENS_INFO_AVAILABLE_OPTICAL_STABILIZATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODES { get { if (!_NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODESReady) { _NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODES"); _NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODESReady = true; } return _NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODESContent = default;
        private static bool _NOISE_REDUCTION_AVAILABLE_NOISE_REDUCTION_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#REQUEST_AVAILABLE_CAPABILITIES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key REQUEST_AVAILABLE_CAPABILITIES { get { if (!_REQUEST_AVAILABLE_CAPABILITIESReady) { _REQUEST_AVAILABLE_CAPABILITIESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "REQUEST_AVAILABLE_CAPABILITIES"); _REQUEST_AVAILABLE_CAPABILITIESReady = true; } return _REQUEST_AVAILABLE_CAPABILITIESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _REQUEST_AVAILABLE_CAPABILITIESContent = default;
        private static bool _REQUEST_AVAILABLE_CAPABILITIESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SCALER_AVAILABLE_ROTATE_AND_CROP_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SCALER_AVAILABLE_ROTATE_AND_CROP_MODES { get { if (!_SCALER_AVAILABLE_ROTATE_AND_CROP_MODESReady) { _SCALER_AVAILABLE_ROTATE_AND_CROP_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SCALER_AVAILABLE_ROTATE_AND_CROP_MODES"); _SCALER_AVAILABLE_ROTATE_AND_CROP_MODESReady = true; } return _SCALER_AVAILABLE_ROTATE_AND_CROP_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SCALER_AVAILABLE_ROTATE_AND_CROP_MODESContent = default;
        private static bool _SCALER_AVAILABLE_ROTATE_AND_CROP_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_AVAILABLE_TEST_PATTERN_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_AVAILABLE_TEST_PATTERN_MODES { get { if (!_SENSOR_AVAILABLE_TEST_PATTERN_MODESReady) { _SENSOR_AVAILABLE_TEST_PATTERN_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_AVAILABLE_TEST_PATTERN_MODES"); _SENSOR_AVAILABLE_TEST_PATTERN_MODESReady = true; } return _SENSOR_AVAILABLE_TEST_PATTERN_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_AVAILABLE_TEST_PATTERN_MODESContent = default;
        private static bool _SENSOR_AVAILABLE_TEST_PATTERN_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SHADING_AVAILABLE_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SHADING_AVAILABLE_MODES { get { if (!_SHADING_AVAILABLE_MODESReady) { _SHADING_AVAILABLE_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SHADING_AVAILABLE_MODES"); _SHADING_AVAILABLE_MODESReady = true; } return _SHADING_AVAILABLE_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SHADING_AVAILABLE_MODESContent = default;
        private static bool _SHADING_AVAILABLE_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES { get { if (!_STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODESReady) { _STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES"); _STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODESReady = true; } return _STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODESContent = default;
        private static bool _STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#STATISTICS_INFO_AVAILABLE_LENS_SHADING_MAP_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key STATISTICS_INFO_AVAILABLE_LENS_SHADING_MAP_MODES { get { if (!_STATISTICS_INFO_AVAILABLE_LENS_SHADING_MAP_MODESReady) { _STATISTICS_INFO_AVAILABLE_LENS_SHADING_MAP_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "STATISTICS_INFO_AVAILABLE_LENS_SHADING_MAP_MODES"); _STATISTICS_INFO_AVAILABLE_LENS_SHADING_MAP_MODESReady = true; } return _STATISTICS_INFO_AVAILABLE_LENS_SHADING_MAP_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _STATISTICS_INFO_AVAILABLE_LENS_SHADING_MAP_MODESContent = default;
        private static bool _STATISTICS_INFO_AVAILABLE_LENS_SHADING_MAP_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#STATISTICS_INFO_AVAILABLE_OIS_DATA_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key STATISTICS_INFO_AVAILABLE_OIS_DATA_MODES { get { if (!_STATISTICS_INFO_AVAILABLE_OIS_DATA_MODESReady) { _STATISTICS_INFO_AVAILABLE_OIS_DATA_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "STATISTICS_INFO_AVAILABLE_OIS_DATA_MODES"); _STATISTICS_INFO_AVAILABLE_OIS_DATA_MODESReady = true; } return _STATISTICS_INFO_AVAILABLE_OIS_DATA_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _STATISTICS_INFO_AVAILABLE_OIS_DATA_MODESContent = default;
        private static bool _STATISTICS_INFO_AVAILABLE_OIS_DATA_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#TONEMAP_AVAILABLE_TONE_MAP_MODES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key TONEMAP_AVAILABLE_TONE_MAP_MODES { get { if (!_TONEMAP_AVAILABLE_TONE_MAP_MODESReady) { _TONEMAP_AVAILABLE_TONE_MAP_MODESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "TONEMAP_AVAILABLE_TONE_MAP_MODES"); _TONEMAP_AVAILABLE_TONE_MAP_MODESReady = true; } return _TONEMAP_AVAILABLE_TONE_MAP_MODESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _TONEMAP_AVAILABLE_TONE_MAP_MODESContent = default;
        private static bool _TONEMAP_AVAILABLE_TONE_MAP_MODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AE_LOCK_AVAILABLE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_AE_LOCK_AVAILABLE { get { if (!_CONTROL_AE_LOCK_AVAILABLEReady) { _CONTROL_AE_LOCK_AVAILABLEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_AE_LOCK_AVAILABLE"); _CONTROL_AE_LOCK_AVAILABLEReady = true; } return _CONTROL_AE_LOCK_AVAILABLEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_AE_LOCK_AVAILABLEContent = default;
        private static bool _CONTROL_AE_LOCK_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AUTOFRAMING_AVAILABLE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_AUTOFRAMING_AVAILABLE { get { if (!_CONTROL_AUTOFRAMING_AVAILABLEReady) { _CONTROL_AUTOFRAMING_AVAILABLEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_AUTOFRAMING_AVAILABLE"); _CONTROL_AUTOFRAMING_AVAILABLEReady = true; } return _CONTROL_AUTOFRAMING_AVAILABLEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_AUTOFRAMING_AVAILABLEContent = default;
        private static bool _CONTROL_AUTOFRAMING_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_AWB_LOCK_AVAILABLE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_AWB_LOCK_AVAILABLE { get { if (!_CONTROL_AWB_LOCK_AVAILABLEReady) { _CONTROL_AWB_LOCK_AVAILABLEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_AWB_LOCK_AVAILABLE"); _CONTROL_AWB_LOCK_AVAILABLEReady = true; } return _CONTROL_AWB_LOCK_AVAILABLEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_AWB_LOCK_AVAILABLEContent = default;
        private static bool _CONTROL_AWB_LOCK_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#DEPTH_DEPTH_IS_EXCLUSIVE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key DEPTH_DEPTH_IS_EXCLUSIVE { get { if (!_DEPTH_DEPTH_IS_EXCLUSIVEReady) { _DEPTH_DEPTH_IS_EXCLUSIVEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "DEPTH_DEPTH_IS_EXCLUSIVE"); _DEPTH_DEPTH_IS_EXCLUSIVEReady = true; } return _DEPTH_DEPTH_IS_EXCLUSIVEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _DEPTH_DEPTH_IS_EXCLUSIVEContent = default;
        private static bool _DEPTH_DEPTH_IS_EXCLUSIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#FLASH_INFO_AVAILABLE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key FLASH_INFO_AVAILABLE { get { if (!_FLASH_INFO_AVAILABLEReady) { _FLASH_INFO_AVAILABLEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "FLASH_INFO_AVAILABLE"); _FLASH_INFO_AVAILABLEReady = true; } return _FLASH_INFO_AVAILABLEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _FLASH_INFO_AVAILABLEContent = default;
        private static bool _FLASH_INFO_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_INFO_LENS_SHADING_APPLIED"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_INFO_LENS_SHADING_APPLIED { get { if (!_SENSOR_INFO_LENS_SHADING_APPLIEDReady) { _SENSOR_INFO_LENS_SHADING_APPLIEDContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_INFO_LENS_SHADING_APPLIED"); _SENSOR_INFO_LENS_SHADING_APPLIEDReady = true; } return _SENSOR_INFO_LENS_SHADING_APPLIEDContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_INFO_LENS_SHADING_APPLIEDContent = default;
        private static bool _SENSOR_INFO_LENS_SHADING_APPLIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#REQUEST_PIPELINE_MAX_DEPTH"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key REQUEST_PIPELINE_MAX_DEPTH { get { if (!_REQUEST_PIPELINE_MAX_DEPTHReady) { _REQUEST_PIPELINE_MAX_DEPTHContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "REQUEST_PIPELINE_MAX_DEPTH"); _REQUEST_PIPELINE_MAX_DEPTHReady = true; } return _REQUEST_PIPELINE_MAX_DEPTHContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _REQUEST_PIPELINE_MAX_DEPTHContent = default;
        private static bool _REQUEST_PIPELINE_MAX_DEPTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_REFERENCE_ILLUMINANT2"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_REFERENCE_ILLUMINANT2 { get { if (!_SENSOR_REFERENCE_ILLUMINANT2Ready) { _SENSOR_REFERENCE_ILLUMINANT2Content = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT2"); _SENSOR_REFERENCE_ILLUMINANT2Ready = true; } return _SENSOR_REFERENCE_ILLUMINANT2Content; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_REFERENCE_ILLUMINANT2Content = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LENS_INFO_HYPERFOCAL_DISTANCE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LENS_INFO_HYPERFOCAL_DISTANCE { get { if (!_LENS_INFO_HYPERFOCAL_DISTANCEReady) { _LENS_INFO_HYPERFOCAL_DISTANCEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LENS_INFO_HYPERFOCAL_DISTANCE"); _LENS_INFO_HYPERFOCAL_DISTANCEReady = true; } return _LENS_INFO_HYPERFOCAL_DISTANCEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LENS_INFO_HYPERFOCAL_DISTANCEContent = default;
        private static bool _LENS_INFO_HYPERFOCAL_DISTANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LENS_INFO_MINIMUM_FOCUS_DISTANCE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LENS_INFO_MINIMUM_FOCUS_DISTANCE { get { if (!_LENS_INFO_MINIMUM_FOCUS_DISTANCEReady) { _LENS_INFO_MINIMUM_FOCUS_DISTANCEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LENS_INFO_MINIMUM_FOCUS_DISTANCE"); _LENS_INFO_MINIMUM_FOCUS_DISTANCEReady = true; } return _LENS_INFO_MINIMUM_FOCUS_DISTANCEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LENS_INFO_MINIMUM_FOCUS_DISTANCEContent = default;
        private static bool _LENS_INFO_MINIMUM_FOCUS_DISTANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SCALER_AVAILABLE_MAX_DIGITAL_ZOOM"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SCALER_AVAILABLE_MAX_DIGITAL_ZOOM { get { if (!_SCALER_AVAILABLE_MAX_DIGITAL_ZOOMReady) { _SCALER_AVAILABLE_MAX_DIGITAL_ZOOMContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SCALER_AVAILABLE_MAX_DIGITAL_ZOOM"); _SCALER_AVAILABLE_MAX_DIGITAL_ZOOMReady = true; } return _SCALER_AVAILABLE_MAX_DIGITAL_ZOOMContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SCALER_AVAILABLE_MAX_DIGITAL_ZOOMContent = default;
        private static bool _SCALER_AVAILABLE_MAX_DIGITAL_ZOOMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#AUTOMOTIVE_LOCATION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key AUTOMOTIVE_LOCATION { get { if (!_AUTOMOTIVE_LOCATIONReady) { _AUTOMOTIVE_LOCATIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "AUTOMOTIVE_LOCATION"); _AUTOMOTIVE_LOCATIONReady = true; } return _AUTOMOTIVE_LOCATIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _AUTOMOTIVE_LOCATIONContent = default;
        private static bool _AUTOMOTIVE_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_MAX_REGIONS_AE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_MAX_REGIONS_AE { get { if (!_CONTROL_MAX_REGIONS_AEReady) { _CONTROL_MAX_REGIONS_AEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_MAX_REGIONS_AE"); _CONTROL_MAX_REGIONS_AEReady = true; } return _CONTROL_MAX_REGIONS_AEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_MAX_REGIONS_AEContent = default;
        private static bool _CONTROL_MAX_REGIONS_AEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_MAX_REGIONS_AF"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_MAX_REGIONS_AF { get { if (!_CONTROL_MAX_REGIONS_AFReady) { _CONTROL_MAX_REGIONS_AFContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_MAX_REGIONS_AF"); _CONTROL_MAX_REGIONS_AFReady = true; } return _CONTROL_MAX_REGIONS_AFContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_MAX_REGIONS_AFContent = default;
        private static bool _CONTROL_MAX_REGIONS_AFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#CONTROL_MAX_REGIONS_AWB"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key CONTROL_MAX_REGIONS_AWB { get { if (!_CONTROL_MAX_REGIONS_AWBReady) { _CONTROL_MAX_REGIONS_AWBContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "CONTROL_MAX_REGIONS_AWB"); _CONTROL_MAX_REGIONS_AWBReady = true; } return _CONTROL_MAX_REGIONS_AWBContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _CONTROL_MAX_REGIONS_AWBContent = default;
        private static bool _CONTROL_MAX_REGIONS_AWBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#FLASH_INFO_STRENGTH_DEFAULT_LEVEL"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key FLASH_INFO_STRENGTH_DEFAULT_LEVEL { get { if (!_FLASH_INFO_STRENGTH_DEFAULT_LEVELReady) { _FLASH_INFO_STRENGTH_DEFAULT_LEVELContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "FLASH_INFO_STRENGTH_DEFAULT_LEVEL"); _FLASH_INFO_STRENGTH_DEFAULT_LEVELReady = true; } return _FLASH_INFO_STRENGTH_DEFAULT_LEVELContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _FLASH_INFO_STRENGTH_DEFAULT_LEVELContent = default;
        private static bool _FLASH_INFO_STRENGTH_DEFAULT_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#FLASH_INFO_STRENGTH_MAXIMUM_LEVEL"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key FLASH_INFO_STRENGTH_MAXIMUM_LEVEL { get { if (!_FLASH_INFO_STRENGTH_MAXIMUM_LEVELReady) { _FLASH_INFO_STRENGTH_MAXIMUM_LEVELContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "FLASH_INFO_STRENGTH_MAXIMUM_LEVEL"); _FLASH_INFO_STRENGTH_MAXIMUM_LEVELReady = true; } return _FLASH_INFO_STRENGTH_MAXIMUM_LEVELContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _FLASH_INFO_STRENGTH_MAXIMUM_LEVELContent = default;
        private static bool _FLASH_INFO_STRENGTH_MAXIMUM_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#FLASH_SINGLE_STRENGTH_DEFAULT_LEVEL"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key FLASH_SINGLE_STRENGTH_DEFAULT_LEVEL { get { if (!_FLASH_SINGLE_STRENGTH_DEFAULT_LEVELReady) { _FLASH_SINGLE_STRENGTH_DEFAULT_LEVELContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "FLASH_SINGLE_STRENGTH_DEFAULT_LEVEL"); _FLASH_SINGLE_STRENGTH_DEFAULT_LEVELReady = true; } return _FLASH_SINGLE_STRENGTH_DEFAULT_LEVELContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _FLASH_SINGLE_STRENGTH_DEFAULT_LEVELContent = default;
        private static bool _FLASH_SINGLE_STRENGTH_DEFAULT_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#FLASH_SINGLE_STRENGTH_MAX_LEVEL"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key FLASH_SINGLE_STRENGTH_MAX_LEVEL { get { if (!_FLASH_SINGLE_STRENGTH_MAX_LEVELReady) { _FLASH_SINGLE_STRENGTH_MAX_LEVELContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "FLASH_SINGLE_STRENGTH_MAX_LEVEL"); _FLASH_SINGLE_STRENGTH_MAX_LEVELReady = true; } return _FLASH_SINGLE_STRENGTH_MAX_LEVELContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _FLASH_SINGLE_STRENGTH_MAX_LEVELContent = default;
        private static bool _FLASH_SINGLE_STRENGTH_MAX_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#FLASH_TORCH_STRENGTH_DEFAULT_LEVEL"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key FLASH_TORCH_STRENGTH_DEFAULT_LEVEL { get { if (!_FLASH_TORCH_STRENGTH_DEFAULT_LEVELReady) { _FLASH_TORCH_STRENGTH_DEFAULT_LEVELContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "FLASH_TORCH_STRENGTH_DEFAULT_LEVEL"); _FLASH_TORCH_STRENGTH_DEFAULT_LEVELReady = true; } return _FLASH_TORCH_STRENGTH_DEFAULT_LEVELContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _FLASH_TORCH_STRENGTH_DEFAULT_LEVELContent = default;
        private static bool _FLASH_TORCH_STRENGTH_DEFAULT_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#FLASH_TORCH_STRENGTH_MAX_LEVEL"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key FLASH_TORCH_STRENGTH_MAX_LEVEL { get { if (!_FLASH_TORCH_STRENGTH_MAX_LEVELReady) { _FLASH_TORCH_STRENGTH_MAX_LEVELContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "FLASH_TORCH_STRENGTH_MAX_LEVEL"); _FLASH_TORCH_STRENGTH_MAX_LEVELReady = true; } return _FLASH_TORCH_STRENGTH_MAX_LEVELContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _FLASH_TORCH_STRENGTH_MAX_LEVELContent = default;
        private static bool _FLASH_TORCH_STRENGTH_MAX_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#INFO_SESSION_CONFIGURATION_QUERY_VERSION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key INFO_SESSION_CONFIGURATION_QUERY_VERSION { get { if (!_INFO_SESSION_CONFIGURATION_QUERY_VERSIONReady) { _INFO_SESSION_CONFIGURATION_QUERY_VERSIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "INFO_SESSION_CONFIGURATION_QUERY_VERSION"); _INFO_SESSION_CONFIGURATION_QUERY_VERSIONReady = true; } return _INFO_SESSION_CONFIGURATION_QUERY_VERSIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _INFO_SESSION_CONFIGURATION_QUERY_VERSIONContent = default;
        private static bool _INFO_SESSION_CONFIGURATION_QUERY_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#INFO_SUPPORTED_HARDWARE_LEVEL"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key INFO_SUPPORTED_HARDWARE_LEVEL { get { if (!_INFO_SUPPORTED_HARDWARE_LEVELReady) { _INFO_SUPPORTED_HARDWARE_LEVELContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "INFO_SUPPORTED_HARDWARE_LEVEL"); _INFO_SUPPORTED_HARDWARE_LEVELReady = true; } return _INFO_SUPPORTED_HARDWARE_LEVELContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _INFO_SUPPORTED_HARDWARE_LEVELContent = default;
        private static bool _INFO_SUPPORTED_HARDWARE_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LENS_FACING"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LENS_FACING { get { if (!_LENS_FACINGReady) { _LENS_FACINGContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LENS_FACING"); _LENS_FACINGReady = true; } return _LENS_FACINGContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LENS_FACINGContent = default;
        private static bool _LENS_FACINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LENS_INFO_FOCUS_DISTANCE_CALIBRATION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LENS_INFO_FOCUS_DISTANCE_CALIBRATION { get { if (!_LENS_INFO_FOCUS_DISTANCE_CALIBRATIONReady) { _LENS_INFO_FOCUS_DISTANCE_CALIBRATIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LENS_INFO_FOCUS_DISTANCE_CALIBRATION"); _LENS_INFO_FOCUS_DISTANCE_CALIBRATIONReady = true; } return _LENS_INFO_FOCUS_DISTANCE_CALIBRATIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LENS_INFO_FOCUS_DISTANCE_CALIBRATIONContent = default;
        private static bool _LENS_INFO_FOCUS_DISTANCE_CALIBRATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LENS_POSE_REFERENCE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LENS_POSE_REFERENCE { get { if (!_LENS_POSE_REFERENCEReady) { _LENS_POSE_REFERENCEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LENS_POSE_REFERENCE"); _LENS_POSE_REFERENCEReady = true; } return _LENS_POSE_REFERENCEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LENS_POSE_REFERENCEContent = default;
        private static bool _LENS_POSE_REFERENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE { get { if (!_LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPEReady) { _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPE"); _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPEReady = true; } return _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPEContent = default;
        private static bool _LOGICAL_MULTI_CAMERA_SENSOR_SYNC_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#REPROCESS_MAX_CAPTURE_STALL"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key REPROCESS_MAX_CAPTURE_STALL { get { if (!_REPROCESS_MAX_CAPTURE_STALLReady) { _REPROCESS_MAX_CAPTURE_STALLContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "REPROCESS_MAX_CAPTURE_STALL"); _REPROCESS_MAX_CAPTURE_STALLReady = true; } return _REPROCESS_MAX_CAPTURE_STALLContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _REPROCESS_MAX_CAPTURE_STALLContent = default;
        private static bool _REPROCESS_MAX_CAPTURE_STALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#REQUEST_MAX_NUM_INPUT_STREAMS"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key REQUEST_MAX_NUM_INPUT_STREAMS { get { if (!_REQUEST_MAX_NUM_INPUT_STREAMSReady) { _REQUEST_MAX_NUM_INPUT_STREAMSContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "REQUEST_MAX_NUM_INPUT_STREAMS"); _REQUEST_MAX_NUM_INPUT_STREAMSReady = true; } return _REQUEST_MAX_NUM_INPUT_STREAMSContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _REQUEST_MAX_NUM_INPUT_STREAMSContent = default;
        private static bool _REQUEST_MAX_NUM_INPUT_STREAMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#REQUEST_MAX_NUM_OUTPUT_PROC"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key REQUEST_MAX_NUM_OUTPUT_PROC { get { if (!_REQUEST_MAX_NUM_OUTPUT_PROCReady) { _REQUEST_MAX_NUM_OUTPUT_PROCContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "REQUEST_MAX_NUM_OUTPUT_PROC"); _REQUEST_MAX_NUM_OUTPUT_PROCReady = true; } return _REQUEST_MAX_NUM_OUTPUT_PROCContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _REQUEST_MAX_NUM_OUTPUT_PROCContent = default;
        private static bool _REQUEST_MAX_NUM_OUTPUT_PROCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#REQUEST_MAX_NUM_OUTPUT_PROC_STALLING"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key REQUEST_MAX_NUM_OUTPUT_PROC_STALLING { get { if (!_REQUEST_MAX_NUM_OUTPUT_PROC_STALLINGReady) { _REQUEST_MAX_NUM_OUTPUT_PROC_STALLINGContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "REQUEST_MAX_NUM_OUTPUT_PROC_STALLING"); _REQUEST_MAX_NUM_OUTPUT_PROC_STALLINGReady = true; } return _REQUEST_MAX_NUM_OUTPUT_PROC_STALLINGContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _REQUEST_MAX_NUM_OUTPUT_PROC_STALLINGContent = default;
        private static bool _REQUEST_MAX_NUM_OUTPUT_PROC_STALLINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#REQUEST_MAX_NUM_OUTPUT_RAW"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key REQUEST_MAX_NUM_OUTPUT_RAW { get { if (!_REQUEST_MAX_NUM_OUTPUT_RAWReady) { _REQUEST_MAX_NUM_OUTPUT_RAWContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "REQUEST_MAX_NUM_OUTPUT_RAW"); _REQUEST_MAX_NUM_OUTPUT_RAWReady = true; } return _REQUEST_MAX_NUM_OUTPUT_RAWContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _REQUEST_MAX_NUM_OUTPUT_RAWContent = default;
        private static bool _REQUEST_MAX_NUM_OUTPUT_RAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#REQUEST_PARTIAL_RESULT_COUNT"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key REQUEST_PARTIAL_RESULT_COUNT { get { if (!_REQUEST_PARTIAL_RESULT_COUNTReady) { _REQUEST_PARTIAL_RESULT_COUNTContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "REQUEST_PARTIAL_RESULT_COUNT"); _REQUEST_PARTIAL_RESULT_COUNTReady = true; } return _REQUEST_PARTIAL_RESULT_COUNTContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _REQUEST_PARTIAL_RESULT_COUNTContent = default;
        private static bool _REQUEST_PARTIAL_RESULT_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SCALER_CROPPING_TYPE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SCALER_CROPPING_TYPE { get { if (!_SCALER_CROPPING_TYPEReady) { _SCALER_CROPPING_TYPEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SCALER_CROPPING_TYPE"); _SCALER_CROPPING_TYPEReady = true; } return _SCALER_CROPPING_TYPEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SCALER_CROPPING_TYPEContent = default;
        private static bool _SCALER_CROPPING_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_INFO_COLOR_FILTER_ARRANGEMENT { get { if (!_SENSOR_INFO_COLOR_FILTER_ARRANGEMENTReady) { _SENSOR_INFO_COLOR_FILTER_ARRANGEMENTContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_INFO_COLOR_FILTER_ARRANGEMENT"); _SENSOR_INFO_COLOR_FILTER_ARRANGEMENTReady = true; } return _SENSOR_INFO_COLOR_FILTER_ARRANGEMENTContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_INFO_COLOR_FILTER_ARRANGEMENTContent = default;
        private static bool _SENSOR_INFO_COLOR_FILTER_ARRANGEMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_INFO_TIMESTAMP_SOURCE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_INFO_TIMESTAMP_SOURCE { get { if (!_SENSOR_INFO_TIMESTAMP_SOURCEReady) { _SENSOR_INFO_TIMESTAMP_SOURCEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_INFO_TIMESTAMP_SOURCE"); _SENSOR_INFO_TIMESTAMP_SOURCEReady = true; } return _SENSOR_INFO_TIMESTAMP_SOURCEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_INFO_TIMESTAMP_SOURCEContent = default;
        private static bool _SENSOR_INFO_TIMESTAMP_SOURCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_INFO_WHITE_LEVEL"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_INFO_WHITE_LEVEL { get { if (!_SENSOR_INFO_WHITE_LEVELReady) { _SENSOR_INFO_WHITE_LEVELContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_INFO_WHITE_LEVEL"); _SENSOR_INFO_WHITE_LEVELReady = true; } return _SENSOR_INFO_WHITE_LEVELContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_INFO_WHITE_LEVELContent = default;
        private static bool _SENSOR_INFO_WHITE_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_MAX_ANALOG_SENSITIVITY"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_MAX_ANALOG_SENSITIVITY { get { if (!_SENSOR_MAX_ANALOG_SENSITIVITYReady) { _SENSOR_MAX_ANALOG_SENSITIVITYContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_MAX_ANALOG_SENSITIVITY"); _SENSOR_MAX_ANALOG_SENSITIVITYReady = true; } return _SENSOR_MAX_ANALOG_SENSITIVITYContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_MAX_ANALOG_SENSITIVITYContent = default;
        private static bool _SENSOR_MAX_ANALOG_SENSITIVITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_ORIENTATION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_ORIENTATION { get { if (!_SENSOR_ORIENTATIONReady) { _SENSOR_ORIENTATIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_ORIENTATION"); _SENSOR_ORIENTATIONReady = true; } return _SENSOR_ORIENTATIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_ORIENTATIONContent = default;
        private static bool _SENSOR_ORIENTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_READOUT_TIMESTAMP"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_READOUT_TIMESTAMP { get { if (!_SENSOR_READOUT_TIMESTAMPReady) { _SENSOR_READOUT_TIMESTAMPContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_READOUT_TIMESTAMP"); _SENSOR_READOUT_TIMESTAMPReady = true; } return _SENSOR_READOUT_TIMESTAMPContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_READOUT_TIMESTAMPContent = default;
        private static bool _SENSOR_READOUT_TIMESTAMPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_REFERENCE_ILLUMINANT1"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_REFERENCE_ILLUMINANT1 { get { if (!_SENSOR_REFERENCE_ILLUMINANT1Ready) { _SENSOR_REFERENCE_ILLUMINANT1Content = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_REFERENCE_ILLUMINANT1"); _SENSOR_REFERENCE_ILLUMINANT1Ready = true; } return _SENSOR_REFERENCE_ILLUMINANT1Content; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_REFERENCE_ILLUMINANT1Content = default;
        private static bool _SENSOR_REFERENCE_ILLUMINANT1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#STATISTICS_INFO_MAX_FACE_COUNT"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key STATISTICS_INFO_MAX_FACE_COUNT { get { if (!_STATISTICS_INFO_MAX_FACE_COUNTReady) { _STATISTICS_INFO_MAX_FACE_COUNTContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "STATISTICS_INFO_MAX_FACE_COUNT"); _STATISTICS_INFO_MAX_FACE_COUNTReady = true; } return _STATISTICS_INFO_MAX_FACE_COUNTContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _STATISTICS_INFO_MAX_FACE_COUNTContent = default;
        private static bool _STATISTICS_INFO_MAX_FACE_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SYNC_MAX_LATENCY"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SYNC_MAX_LATENCY { get { if (!_SYNC_MAX_LATENCYReady) { _SYNC_MAX_LATENCYContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SYNC_MAX_LATENCY"); _SYNC_MAX_LATENCYReady = true; } return _SYNC_MAX_LATENCYContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SYNC_MAX_LATENCYContent = default;
        private static bool _SYNC_MAX_LATENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#TONEMAP_MAX_CURVE_POINTS"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key TONEMAP_MAX_CURVE_POINTS { get { if (!_TONEMAP_MAX_CURVE_POINTSReady) { _TONEMAP_MAX_CURVE_POINTSContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "TONEMAP_MAX_CURVE_POINTS"); _TONEMAP_MAX_CURVE_POINTSReady = true; } return _TONEMAP_MAX_CURVE_POINTSContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _TONEMAP_MAX_CURVE_POINTSContent = default;
        private static bool _TONEMAP_MAX_CURVE_POINTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#REQUEST_RECOMMENDED_TEN_BIT_DYNAMIC_RANGE_PROFILE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key REQUEST_RECOMMENDED_TEN_BIT_DYNAMIC_RANGE_PROFILE { get { if (!_REQUEST_RECOMMENDED_TEN_BIT_DYNAMIC_RANGE_PROFILEReady) { _REQUEST_RECOMMENDED_TEN_BIT_DYNAMIC_RANGE_PROFILEContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "REQUEST_RECOMMENDED_TEN_BIT_DYNAMIC_RANGE_PROFILE"); _REQUEST_RECOMMENDED_TEN_BIT_DYNAMIC_RANGE_PROFILEReady = true; } return _REQUEST_RECOMMENDED_TEN_BIT_DYNAMIC_RANGE_PROFILEContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _REQUEST_RECOMMENDED_TEN_BIT_DYNAMIC_RANGE_PROFILEContent = default;
        private static bool _REQUEST_RECOMMENDED_TEN_BIT_DYNAMIC_RANGE_PROFILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SENSOR_INFO_MAX_FRAME_DURATION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SENSOR_INFO_MAX_FRAME_DURATION { get { if (!_SENSOR_INFO_MAX_FRAME_DURATIONReady) { _SENSOR_INFO_MAX_FRAME_DURATIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SENSOR_INFO_MAX_FRAME_DURATION"); _SENSOR_INFO_MAX_FRAME_DURATIONReady = true; } return _SENSOR_INFO_MAX_FRAME_DURATIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SENSOR_INFO_MAX_FRAME_DURATIONContent = default;
        private static bool _SENSOR_INFO_MAX_FRAME_DURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#INFO_VERSION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key INFO_VERSION { get { if (!_INFO_VERSIONReady) { _INFO_VERSIONContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "INFO_VERSION"); _INFO_VERSIONReady = true; } return _INFO_VERSIONContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _INFO_VERSIONContent = default;
        private static bool _INFO_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#SCALER_AVAILABLE_STREAM_USE_CASES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CameraCharacteristics.Key SCALER_AVAILABLE_STREAM_USE_CASES { get { if (!_SCALER_AVAILABLE_STREAM_USE_CASESReady) { _SCALER_AVAILABLE_STREAM_USE_CASESContent = SGetField<Android.Hardware.Camera2.CameraCharacteristics.Key>(LocalBridgeClazz, "SCALER_AVAILABLE_STREAM_USE_CASES"); _SCALER_AVAILABLE_STREAM_USE_CASESReady = true; } return _SCALER_AVAILABLE_STREAM_USE_CASESContent; } }
        private static Android.Hardware.Camera2.CameraCharacteristics.Key _SCALER_AVAILABLE_STREAM_USE_CASESContent = default;
        private static bool _SCALER_AVAILABLE_STREAM_USE_CASESReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#get(android.hardware.camera2.CameraCharacteristics.Key)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.Camera2.CameraCharacteristics.Key"/></param>
        /// <typeparam name="T"></typeparam>
        /// <returns><typeparamref name="T"/></returns>
        public T Get<T>(Android.Hardware.Camera2.CameraCharacteristics.Key<T> arg0)
        {
            return IExecuteWithSignature<T>("get", "(Landroid/hardware/camera2/CameraCharacteristics$Key;)Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#getRecommendedStreamConfigurationMap(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Hardware.Camera2.Params.RecommendedStreamConfigurationMap"/></returns>
        public Android.Hardware.Camera2.Params.RecommendedStreamConfigurationMap GetRecommendedStreamConfigurationMap(int arg0)
        {
            return IExecuteWithSignature<Android.Hardware.Camera2.Params.RecommendedStreamConfigurationMap>("getRecommendedStreamConfigurationMap", "(I)Landroid/hardware/camera2/params/RecommendedStreamConfigurationMap;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#getAvailableSessionCharacteristicsKeys()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Hardware.Camera2.CameraCharacteristics.Key<object>> GetAvailableSessionCharacteristicsKeys()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Hardware.Camera2.CameraCharacteristics.Key<object>>>("getAvailableSessionCharacteristicsKeys", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#getKeysNeedingPermission()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Hardware.Camera2.CameraCharacteristics.Key<object>> GetKeysNeedingPermission()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Hardware.Camera2.CameraCharacteristics.Key<object>>>("getKeysNeedingPermission", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#getAvailableCaptureRequestKeys()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Hardware.Camera2.CaptureRequest.Key<object>> GetAvailableCaptureRequestKeys()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Hardware.Camera2.CaptureRequest.Key<object>>>("getAvailableCaptureRequestKeys", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#getAvailablePhysicalCameraRequestKeys()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Hardware.Camera2.CaptureRequest.Key<object>> GetAvailablePhysicalCameraRequestKeys()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Hardware.Camera2.CaptureRequest.Key<object>>>("getAvailablePhysicalCameraRequestKeys", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#getAvailableSessionKeys()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Hardware.Camera2.CaptureRequest.Key<object>> GetAvailableSessionKeys()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Hardware.Camera2.CaptureRequest.Key<object>>>("getAvailableSessionKeys", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#getAvailableCaptureResultKeys()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Hardware.Camera2.CaptureResult.Key<object>> GetAvailableCaptureResultKeys()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Hardware.Camera2.CaptureResult.Key<object>>>("getAvailableCaptureResultKeys", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html#getPhysicalCameraIds()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.String> GetPhysicalCameraIds()
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.String>>("getPhysicalCameraIds", "()Ljava/util/Set;");
        }

        #endregion

        #region Nested classes
        #region Key
        public partial class Key
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.Key.html#%3Cinit%3E(java.lang.String,java.lang.Class)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.Class"/></param>
            public Key(Java.Lang.String arg0, Java.Lang.Class arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.Key.html#getName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Key<T>
        public partial class Key<T>
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.Key.html#%3Cinit%3E(java.lang.String,java.lang.Class)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.Class"/></param>
            public Key(Java.Lang.String arg0, Java.Lang.Class arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Hardware.Camera2.CameraCharacteristics.Key{T}"/> to <see cref="Android.Hardware.Camera2.CameraCharacteristics.Key"/>
            /// </summary>
            public static implicit operator Android.Hardware.Camera2.CameraCharacteristics.Key(Android.Hardware.Camera2.CameraCharacteristics.Key<T> t) => t.Cast<Android.Hardware.Camera2.CameraCharacteristics.Key>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.Key.html#getName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
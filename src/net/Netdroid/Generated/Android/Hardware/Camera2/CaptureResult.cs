/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Hardware.Camera2
{
    #region CaptureResult
    public partial class CaptureResult
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#STATISTICS_HOT_PIXEL_MAP"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key STATISTICS_HOT_PIXEL_MAP { get { if (!_STATISTICS_HOT_PIXEL_MAPReady) { _STATISTICS_HOT_PIXEL_MAPContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "STATISTICS_HOT_PIXEL_MAP"); _STATISTICS_HOT_PIXEL_MAPReady = true; } return _STATISTICS_HOT_PIXEL_MAPContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _STATISTICS_HOT_PIXEL_MAPContent = default;
        private static bool _STATISTICS_HOT_PIXEL_MAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_SENSOR_CROP_REGION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_SENSOR_CROP_REGION { get { if (!_LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_SENSOR_CROP_REGIONReady) { _LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_SENSOR_CROP_REGIONContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_SENSOR_CROP_REGION"); _LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_SENSOR_CROP_REGIONReady = true; } return _LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_SENSOR_CROP_REGIONContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_SENSOR_CROP_REGIONContent = default;
        private static bool _LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_SENSOR_CROP_REGIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SCALER_CROP_REGION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SCALER_CROP_REGION { get { if (!_SCALER_CROP_REGIONReady) { _SCALER_CROP_REGIONContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SCALER_CROP_REGION"); _SCALER_CROP_REGIONReady = true; } return _SCALER_CROP_REGIONContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SCALER_CROP_REGIONContent = default;
        private static bool _SCALER_CROP_REGIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SCALER_RAW_CROP_REGION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SCALER_RAW_CROP_REGION { get { if (!_SCALER_RAW_CROP_REGIONReady) { _SCALER_RAW_CROP_REGIONContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SCALER_RAW_CROP_REGION"); _SCALER_RAW_CROP_REGIONReady = true; } return _SCALER_RAW_CROP_REGIONContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SCALER_RAW_CROP_REGIONContent = default;
        private static bool _SCALER_RAW_CROP_REGIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#COLOR_CORRECTION_TRANSFORM"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key COLOR_CORRECTION_TRANSFORM { get { if (!_COLOR_CORRECTION_TRANSFORMReady) { _COLOR_CORRECTION_TRANSFORMContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "COLOR_CORRECTION_TRANSFORM"); _COLOR_CORRECTION_TRANSFORMReady = true; } return _COLOR_CORRECTION_TRANSFORMContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _COLOR_CORRECTION_TRANSFORMContent = default;
        private static bool _COLOR_CORRECTION_TRANSFORMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#STATISTICS_FACES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key STATISTICS_FACES { get { if (!_STATISTICS_FACESReady) { _STATISTICS_FACESContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "STATISTICS_FACES"); _STATISTICS_FACESReady = true; } return _STATISTICS_FACESContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _STATISTICS_FACESContent = default;
        private static bool _STATISTICS_FACESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#STATISTICS_LENS_INTRINSICS_SAMPLES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key STATISTICS_LENS_INTRINSICS_SAMPLES { get { if (!_STATISTICS_LENS_INTRINSICS_SAMPLESReady) { _STATISTICS_LENS_INTRINSICS_SAMPLESContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "STATISTICS_LENS_INTRINSICS_SAMPLES"); _STATISTICS_LENS_INTRINSICS_SAMPLESReady = true; } return _STATISTICS_LENS_INTRINSICS_SAMPLESContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _STATISTICS_LENS_INTRINSICS_SAMPLESContent = default;
        private static bool _STATISTICS_LENS_INTRINSICS_SAMPLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#STATISTICS_LENS_SHADING_CORRECTION_MAP"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key STATISTICS_LENS_SHADING_CORRECTION_MAP { get { if (!_STATISTICS_LENS_SHADING_CORRECTION_MAPReady) { _STATISTICS_LENS_SHADING_CORRECTION_MAPContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "STATISTICS_LENS_SHADING_CORRECTION_MAP"); _STATISTICS_LENS_SHADING_CORRECTION_MAPReady = true; } return _STATISTICS_LENS_SHADING_CORRECTION_MAPContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _STATISTICS_LENS_SHADING_CORRECTION_MAPContent = default;
        private static bool _STATISTICS_LENS_SHADING_CORRECTION_MAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AE_REGIONS"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AE_REGIONS { get { if (!_CONTROL_AE_REGIONSReady) { _CONTROL_AE_REGIONSContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AE_REGIONS"); _CONTROL_AE_REGIONSReady = true; } return _CONTROL_AE_REGIONSContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AE_REGIONSContent = default;
        private static bool _CONTROL_AE_REGIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AF_REGIONS"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AF_REGIONS { get { if (!_CONTROL_AF_REGIONSReady) { _CONTROL_AF_REGIONSContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AF_REGIONS"); _CONTROL_AF_REGIONSReady = true; } return _CONTROL_AF_REGIONSContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AF_REGIONSContent = default;
        private static bool _CONTROL_AF_REGIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AWB_REGIONS"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AWB_REGIONS { get { if (!_CONTROL_AWB_REGIONSReady) { _CONTROL_AWB_REGIONSContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AWB_REGIONS"); _CONTROL_AWB_REGIONSReady = true; } return _CONTROL_AWB_REGIONSContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AWB_REGIONSContent = default;
        private static bool _CONTROL_AWB_REGIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#STATISTICS_OIS_SAMPLES"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key STATISTICS_OIS_SAMPLES { get { if (!_STATISTICS_OIS_SAMPLESReady) { _STATISTICS_OIS_SAMPLESContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "STATISTICS_OIS_SAMPLES"); _STATISTICS_OIS_SAMPLESReady = true; } return _STATISTICS_OIS_SAMPLESContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _STATISTICS_OIS_SAMPLESContent = default;
        private static bool _STATISTICS_OIS_SAMPLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#COLOR_CORRECTION_GAINS"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key COLOR_CORRECTION_GAINS { get { if (!_COLOR_CORRECTION_GAINSReady) { _COLOR_CORRECTION_GAINSContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "COLOR_CORRECTION_GAINS"); _COLOR_CORRECTION_GAINSReady = true; } return _COLOR_CORRECTION_GAINSContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _COLOR_CORRECTION_GAINSContent = default;
        private static bool _COLOR_CORRECTION_GAINSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#TONEMAP_CURVE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key TONEMAP_CURVE { get { if (!_TONEMAP_CURVEReady) { _TONEMAP_CURVEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "TONEMAP_CURVE"); _TONEMAP_CURVEReady = true; } return _TONEMAP_CURVEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _TONEMAP_CURVEContent = default;
        private static bool _TONEMAP_CURVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#JPEG_GPS_LOCATION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key JPEG_GPS_LOCATION { get { if (!_JPEG_GPS_LOCATIONReady) { _JPEG_GPS_LOCATIONContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "JPEG_GPS_LOCATION"); _JPEG_GPS_LOCATIONReady = true; } return _JPEG_GPS_LOCATIONContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _JPEG_GPS_LOCATIONContent = default;
        private static bool _JPEG_GPS_LOCATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SENSOR_NOISE_PROFILE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SENSOR_NOISE_PROFILE { get { if (!_SENSOR_NOISE_PROFILEReady) { _SENSOR_NOISE_PROFILEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SENSOR_NOISE_PROFILE"); _SENSOR_NOISE_PROFILEReady = true; } return _SENSOR_NOISE_PROFILEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SENSOR_NOISE_PROFILEContent = default;
        private static bool _SENSOR_NOISE_PROFILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#LENS_FOCUS_RANGE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key LENS_FOCUS_RANGE { get { if (!_LENS_FOCUS_RANGEReady) { _LENS_FOCUS_RANGEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "LENS_FOCUS_RANGE"); _LENS_FOCUS_RANGEReady = true; } return _LENS_FOCUS_RANGEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _LENS_FOCUS_RANGEContent = default;
        private static bool _LENS_FOCUS_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AE_TARGET_FPS_RANGE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AE_TARGET_FPS_RANGE { get { if (!_CONTROL_AE_TARGET_FPS_RANGEReady) { _CONTROL_AE_TARGET_FPS_RANGEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AE_TARGET_FPS_RANGE"); _CONTROL_AE_TARGET_FPS_RANGEReady = true; } return _CONTROL_AE_TARGET_FPS_RANGEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AE_TARGET_FPS_RANGEContent = default;
        private static bool _CONTROL_AE_TARGET_FPS_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SENSOR_NEUTRAL_COLOR_POINT"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SENSOR_NEUTRAL_COLOR_POINT { get { if (!_SENSOR_NEUTRAL_COLOR_POINTReady) { _SENSOR_NEUTRAL_COLOR_POINTContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SENSOR_NEUTRAL_COLOR_POINT"); _SENSOR_NEUTRAL_COLOR_POINTReady = true; } return _SENSOR_NEUTRAL_COLOR_POINTContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SENSOR_NEUTRAL_COLOR_POINTContent = default;
        private static bool _SENSOR_NEUTRAL_COLOR_POINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#JPEG_THUMBNAIL_SIZE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key JPEG_THUMBNAIL_SIZE { get { if (!_JPEG_THUMBNAIL_SIZEReady) { _JPEG_THUMBNAIL_SIZEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "JPEG_THUMBNAIL_SIZE"); _JPEG_THUMBNAIL_SIZEReady = true; } return _JPEG_THUMBNAIL_SIZEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _JPEG_THUMBNAIL_SIZEContent = default;
        private static bool _JPEG_THUMBNAIL_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#LENS_DISTORTION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key LENS_DISTORTION { get { if (!_LENS_DISTORTIONReady) { _LENS_DISTORTIONContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "LENS_DISTORTION"); _LENS_DISTORTIONReady = true; } return _LENS_DISTORTIONContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _LENS_DISTORTIONContent = default;
        private static bool _LENS_DISTORTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#LENS_INTRINSIC_CALIBRATION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key LENS_INTRINSIC_CALIBRATION { get { if (!_LENS_INTRINSIC_CALIBRATIONReady) { _LENS_INTRINSIC_CALIBRATIONContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "LENS_INTRINSIC_CALIBRATION"); _LENS_INTRINSIC_CALIBRATIONReady = true; } return _LENS_INTRINSIC_CALIBRATIONContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _LENS_INTRINSIC_CALIBRATIONContent = default;
        private static bool _LENS_INTRINSIC_CALIBRATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#LENS_POSE_ROTATION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key LENS_POSE_ROTATION { get { if (!_LENS_POSE_ROTATIONReady) { _LENS_POSE_ROTATIONContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "LENS_POSE_ROTATION"); _LENS_POSE_ROTATIONReady = true; } return _LENS_POSE_ROTATIONContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _LENS_POSE_ROTATIONContent = default;
        private static bool _LENS_POSE_ROTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#LENS_POSE_TRANSLATION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key LENS_POSE_TRANSLATION { get { if (!_LENS_POSE_TRANSLATIONReady) { _LENS_POSE_TRANSLATIONContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "LENS_POSE_TRANSLATION"); _LENS_POSE_TRANSLATIONReady = true; } return _LENS_POSE_TRANSLATIONContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _LENS_POSE_TRANSLATIONContent = default;
        private static bool _LENS_POSE_TRANSLATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#LENS_RADIAL_DISTORTION"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Android.Hardware.Camera2.CaptureResult.Key LENS_RADIAL_DISTORTION { get { if (!_LENS_RADIAL_DISTORTIONReady) { _LENS_RADIAL_DISTORTIONContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "LENS_RADIAL_DISTORTION"); _LENS_RADIAL_DISTORTIONReady = true; } return _LENS_RADIAL_DISTORTIONContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _LENS_RADIAL_DISTORTIONContent = default;
        private static bool _LENS_RADIAL_DISTORTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SENSOR_DYNAMIC_BLACK_LEVEL"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SENSOR_DYNAMIC_BLACK_LEVEL { get { if (!_SENSOR_DYNAMIC_BLACK_LEVELReady) { _SENSOR_DYNAMIC_BLACK_LEVELContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SENSOR_DYNAMIC_BLACK_LEVEL"); _SENSOR_DYNAMIC_BLACK_LEVELReady = true; } return _SENSOR_DYNAMIC_BLACK_LEVELContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SENSOR_DYNAMIC_BLACK_LEVELContent = default;
        private static bool _SENSOR_DYNAMIC_BLACK_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SENSOR_TEST_PATTERN_DATA"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SENSOR_TEST_PATTERN_DATA { get { if (!_SENSOR_TEST_PATTERN_DATAReady) { _SENSOR_TEST_PATTERN_DATAContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SENSOR_TEST_PATTERN_DATA"); _SENSOR_TEST_PATTERN_DATAReady = true; } return _SENSOR_TEST_PATTERN_DATAContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SENSOR_TEST_PATTERN_DATAContent = default;
        private static bool _SENSOR_TEST_PATTERN_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#BLACK_LEVEL_LOCK"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key BLACK_LEVEL_LOCK { get { if (!_BLACK_LEVEL_LOCKReady) { _BLACK_LEVEL_LOCKContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "BLACK_LEVEL_LOCK"); _BLACK_LEVEL_LOCKReady = true; } return _BLACK_LEVEL_LOCKContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _BLACK_LEVEL_LOCKContent = default;
        private static bool _BLACK_LEVEL_LOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AE_LOCK"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AE_LOCK { get { if (!_CONTROL_AE_LOCKReady) { _CONTROL_AE_LOCKContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AE_LOCK"); _CONTROL_AE_LOCKReady = true; } return _CONTROL_AE_LOCKContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AE_LOCKContent = default;
        private static bool _CONTROL_AE_LOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AWB_LOCK"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AWB_LOCK { get { if (!_CONTROL_AWB_LOCKReady) { _CONTROL_AWB_LOCKContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AWB_LOCK"); _CONTROL_AWB_LOCKReady = true; } return _CONTROL_AWB_LOCKContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AWB_LOCKContent = default;
        private static bool _CONTROL_AWB_LOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_ENABLE_ZSL"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_ENABLE_ZSL { get { if (!_CONTROL_ENABLE_ZSLReady) { _CONTROL_ENABLE_ZSLContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_ENABLE_ZSL"); _CONTROL_ENABLE_ZSLReady = true; } return _CONTROL_ENABLE_ZSLContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_ENABLE_ZSLContent = default;
        private static bool _CONTROL_ENABLE_ZSLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SENSOR_RAW_BINNING_FACTOR_USED"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SENSOR_RAW_BINNING_FACTOR_USED { get { if (!_SENSOR_RAW_BINNING_FACTOR_USEDReady) { _SENSOR_RAW_BINNING_FACTOR_USEDContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SENSOR_RAW_BINNING_FACTOR_USED"); _SENSOR_RAW_BINNING_FACTOR_USEDReady = true; } return _SENSOR_RAW_BINNING_FACTOR_USEDContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SENSOR_RAW_BINNING_FACTOR_USEDContent = default;
        private static bool _SENSOR_RAW_BINNING_FACTOR_USEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#STATISTICS_HOT_PIXEL_MAP_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key STATISTICS_HOT_PIXEL_MAP_MODE { get { if (!_STATISTICS_HOT_PIXEL_MAP_MODEReady) { _STATISTICS_HOT_PIXEL_MAP_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "STATISTICS_HOT_PIXEL_MAP_MODE"); _STATISTICS_HOT_PIXEL_MAP_MODEReady = true; } return _STATISTICS_HOT_PIXEL_MAP_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _STATISTICS_HOT_PIXEL_MAP_MODEContent = default;
        private static bool _STATISTICS_HOT_PIXEL_MAP_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#JPEG_QUALITY"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key JPEG_QUALITY { get { if (!_JPEG_QUALITYReady) { _JPEG_QUALITYContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "JPEG_QUALITY"); _JPEG_QUALITYReady = true; } return _JPEG_QUALITYContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _JPEG_QUALITYContent = default;
        private static bool _JPEG_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#JPEG_THUMBNAIL_QUALITY"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key JPEG_THUMBNAIL_QUALITY { get { if (!_JPEG_THUMBNAIL_QUALITYReady) { _JPEG_THUMBNAIL_QUALITYContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "JPEG_THUMBNAIL_QUALITY"); _JPEG_THUMBNAIL_QUALITYReady = true; } return _JPEG_THUMBNAIL_QUALITYContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _JPEG_THUMBNAIL_QUALITYContent = default;
        private static bool _JPEG_THUMBNAIL_QUALITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#REQUEST_PIPELINE_DEPTH"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key REQUEST_PIPELINE_DEPTH { get { if (!_REQUEST_PIPELINE_DEPTHReady) { _REQUEST_PIPELINE_DEPTHContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "REQUEST_PIPELINE_DEPTH"); _REQUEST_PIPELINE_DEPTHReady = true; } return _REQUEST_PIPELINE_DEPTHContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _REQUEST_PIPELINE_DEPTHContent = default;
        private static bool _REQUEST_PIPELINE_DEPTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_ZOOM_RATIO"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_ZOOM_RATIO { get { if (!_CONTROL_ZOOM_RATIOReady) { _CONTROL_ZOOM_RATIOContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_ZOOM_RATIO"); _CONTROL_ZOOM_RATIOReady = true; } return _CONTROL_ZOOM_RATIOContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_ZOOM_RATIOContent = default;
        private static bool _CONTROL_ZOOM_RATIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#LENS_APERTURE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key LENS_APERTURE { get { if (!_LENS_APERTUREReady) { _LENS_APERTUREContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "LENS_APERTURE"); _LENS_APERTUREReady = true; } return _LENS_APERTUREContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _LENS_APERTUREContent = default;
        private static bool _LENS_APERTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#LENS_FILTER_DENSITY"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key LENS_FILTER_DENSITY { get { if (!_LENS_FILTER_DENSITYReady) { _LENS_FILTER_DENSITYContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "LENS_FILTER_DENSITY"); _LENS_FILTER_DENSITYReady = true; } return _LENS_FILTER_DENSITYContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _LENS_FILTER_DENSITYContent = default;
        private static bool _LENS_FILTER_DENSITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#LENS_FOCAL_LENGTH"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key LENS_FOCAL_LENGTH { get { if (!_LENS_FOCAL_LENGTHReady) { _LENS_FOCAL_LENGTHContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "LENS_FOCAL_LENGTH"); _LENS_FOCAL_LENGTHReady = true; } return _LENS_FOCAL_LENGTHContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _LENS_FOCAL_LENGTHContent = default;
        private static bool _LENS_FOCAL_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#LENS_FOCUS_DISTANCE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key LENS_FOCUS_DISTANCE { get { if (!_LENS_FOCUS_DISTANCEReady) { _LENS_FOCUS_DISTANCEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "LENS_FOCUS_DISTANCE"); _LENS_FOCUS_DISTANCEReady = true; } return _LENS_FOCUS_DISTANCEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _LENS_FOCUS_DISTANCEContent = default;
        private static bool _LENS_FOCUS_DISTANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#REPROCESS_EFFECTIVE_EXPOSURE_FACTOR"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key REPROCESS_EFFECTIVE_EXPOSURE_FACTOR { get { if (!_REPROCESS_EFFECTIVE_EXPOSURE_FACTORReady) { _REPROCESS_EFFECTIVE_EXPOSURE_FACTORContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "REPROCESS_EFFECTIVE_EXPOSURE_FACTOR"); _REPROCESS_EFFECTIVE_EXPOSURE_FACTORReady = true; } return _REPROCESS_EFFECTIVE_EXPOSURE_FACTORContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _REPROCESS_EFFECTIVE_EXPOSURE_FACTORContent = default;
        private static bool _REPROCESS_EFFECTIVE_EXPOSURE_FACTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SENSOR_GREEN_SPLIT"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SENSOR_GREEN_SPLIT { get { if (!_SENSOR_GREEN_SPLITReady) { _SENSOR_GREEN_SPLITContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SENSOR_GREEN_SPLIT"); _SENSOR_GREEN_SPLITReady = true; } return _SENSOR_GREEN_SPLITContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SENSOR_GREEN_SPLITContent = default;
        private static bool _SENSOR_GREEN_SPLITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#TONEMAP_GAMMA"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key TONEMAP_GAMMA { get { if (!_TONEMAP_GAMMAReady) { _TONEMAP_GAMMAContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "TONEMAP_GAMMA"); _TONEMAP_GAMMAReady = true; } return _TONEMAP_GAMMAContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _TONEMAP_GAMMAContent = default;
        private static bool _TONEMAP_GAMMAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#COLOR_CORRECTION_ABERRATION_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key COLOR_CORRECTION_ABERRATION_MODE { get { if (!_COLOR_CORRECTION_ABERRATION_MODEReady) { _COLOR_CORRECTION_ABERRATION_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "COLOR_CORRECTION_ABERRATION_MODE"); _COLOR_CORRECTION_ABERRATION_MODEReady = true; } return _COLOR_CORRECTION_ABERRATION_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _COLOR_CORRECTION_ABERRATION_MODEContent = default;
        private static bool _COLOR_CORRECTION_ABERRATION_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#COLOR_CORRECTION_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key COLOR_CORRECTION_MODE { get { if (!_COLOR_CORRECTION_MODEReady) { _COLOR_CORRECTION_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "COLOR_CORRECTION_MODE"); _COLOR_CORRECTION_MODEReady = true; } return _COLOR_CORRECTION_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _COLOR_CORRECTION_MODEContent = default;
        private static bool _COLOR_CORRECTION_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AE_ANTIBANDING_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AE_ANTIBANDING_MODE { get { if (!_CONTROL_AE_ANTIBANDING_MODEReady) { _CONTROL_AE_ANTIBANDING_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AE_ANTIBANDING_MODE"); _CONTROL_AE_ANTIBANDING_MODEReady = true; } return _CONTROL_AE_ANTIBANDING_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AE_ANTIBANDING_MODEContent = default;
        private static bool _CONTROL_AE_ANTIBANDING_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AE_EXPOSURE_COMPENSATION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AE_EXPOSURE_COMPENSATION { get { if (!_CONTROL_AE_EXPOSURE_COMPENSATIONReady) { _CONTROL_AE_EXPOSURE_COMPENSATIONContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AE_EXPOSURE_COMPENSATION"); _CONTROL_AE_EXPOSURE_COMPENSATIONReady = true; } return _CONTROL_AE_EXPOSURE_COMPENSATIONContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AE_EXPOSURE_COMPENSATIONContent = default;
        private static bool _CONTROL_AE_EXPOSURE_COMPENSATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AE_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AE_MODE { get { if (!_CONTROL_AE_MODEReady) { _CONTROL_AE_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AE_MODE"); _CONTROL_AE_MODEReady = true; } return _CONTROL_AE_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AE_MODEContent = default;
        private static bool _CONTROL_AE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AE_PRECAPTURE_TRIGGER"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AE_PRECAPTURE_TRIGGER { get { if (!_CONTROL_AE_PRECAPTURE_TRIGGERReady) { _CONTROL_AE_PRECAPTURE_TRIGGERContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AE_PRECAPTURE_TRIGGER"); _CONTROL_AE_PRECAPTURE_TRIGGERReady = true; } return _CONTROL_AE_PRECAPTURE_TRIGGERContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AE_PRECAPTURE_TRIGGERContent = default;
        private static bool _CONTROL_AE_PRECAPTURE_TRIGGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AE_STATE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AE_STATE { get { if (!_CONTROL_AE_STATEReady) { _CONTROL_AE_STATEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AE_STATE"); _CONTROL_AE_STATEReady = true; } return _CONTROL_AE_STATEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AE_STATEContent = default;
        private static bool _CONTROL_AE_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AF_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AF_MODE { get { if (!_CONTROL_AF_MODEReady) { _CONTROL_AF_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AF_MODE"); _CONTROL_AF_MODEReady = true; } return _CONTROL_AF_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AF_MODEContent = default;
        private static bool _CONTROL_AF_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AF_SCENE_CHANGE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AF_SCENE_CHANGE { get { if (!_CONTROL_AF_SCENE_CHANGEReady) { _CONTROL_AF_SCENE_CHANGEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AF_SCENE_CHANGE"); _CONTROL_AF_SCENE_CHANGEReady = true; } return _CONTROL_AF_SCENE_CHANGEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AF_SCENE_CHANGEContent = default;
        private static bool _CONTROL_AF_SCENE_CHANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AF_STATE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AF_STATE { get { if (!_CONTROL_AF_STATEReady) { _CONTROL_AF_STATEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AF_STATE"); _CONTROL_AF_STATEReady = true; } return _CONTROL_AF_STATEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AF_STATEContent = default;
        private static bool _CONTROL_AF_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AF_TRIGGER"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AF_TRIGGER { get { if (!_CONTROL_AF_TRIGGERReady) { _CONTROL_AF_TRIGGERContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AF_TRIGGER"); _CONTROL_AF_TRIGGERReady = true; } return _CONTROL_AF_TRIGGERContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AF_TRIGGERContent = default;
        private static bool _CONTROL_AF_TRIGGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AUTOFRAMING"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AUTOFRAMING { get { if (!_CONTROL_AUTOFRAMINGReady) { _CONTROL_AUTOFRAMINGContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AUTOFRAMING"); _CONTROL_AUTOFRAMINGReady = true; } return _CONTROL_AUTOFRAMINGContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AUTOFRAMINGContent = default;
        private static bool _CONTROL_AUTOFRAMINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AUTOFRAMING_STATE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AUTOFRAMING_STATE { get { if (!_CONTROL_AUTOFRAMING_STATEReady) { _CONTROL_AUTOFRAMING_STATEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AUTOFRAMING_STATE"); _CONTROL_AUTOFRAMING_STATEReady = true; } return _CONTROL_AUTOFRAMING_STATEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AUTOFRAMING_STATEContent = default;
        private static bool _CONTROL_AUTOFRAMING_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AWB_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AWB_MODE { get { if (!_CONTROL_AWB_MODEReady) { _CONTROL_AWB_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AWB_MODE"); _CONTROL_AWB_MODEReady = true; } return _CONTROL_AWB_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AWB_MODEContent = default;
        private static bool _CONTROL_AWB_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_AWB_STATE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_AWB_STATE { get { if (!_CONTROL_AWB_STATEReady) { _CONTROL_AWB_STATEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_AWB_STATE"); _CONTROL_AWB_STATEReady = true; } return _CONTROL_AWB_STATEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_AWB_STATEContent = default;
        private static bool _CONTROL_AWB_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_CAPTURE_INTENT"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_CAPTURE_INTENT { get { if (!_CONTROL_CAPTURE_INTENTReady) { _CONTROL_CAPTURE_INTENTContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_CAPTURE_INTENT"); _CONTROL_CAPTURE_INTENTReady = true; } return _CONTROL_CAPTURE_INTENTContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_CAPTURE_INTENTContent = default;
        private static bool _CONTROL_CAPTURE_INTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_EFFECT_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_EFFECT_MODE { get { if (!_CONTROL_EFFECT_MODEReady) { _CONTROL_EFFECT_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_EFFECT_MODE"); _CONTROL_EFFECT_MODEReady = true; } return _CONTROL_EFFECT_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_EFFECT_MODEContent = default;
        private static bool _CONTROL_EFFECT_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_EXTENDED_SCENE_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_EXTENDED_SCENE_MODE { get { if (!_CONTROL_EXTENDED_SCENE_MODEReady) { _CONTROL_EXTENDED_SCENE_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_EXTENDED_SCENE_MODE"); _CONTROL_EXTENDED_SCENE_MODEReady = true; } return _CONTROL_EXTENDED_SCENE_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_EXTENDED_SCENE_MODEContent = default;
        private static bool _CONTROL_EXTENDED_SCENE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_LOW_LIGHT_BOOST_STATE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_LOW_LIGHT_BOOST_STATE { get { if (!_CONTROL_LOW_LIGHT_BOOST_STATEReady) { _CONTROL_LOW_LIGHT_BOOST_STATEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_LOW_LIGHT_BOOST_STATE"); _CONTROL_LOW_LIGHT_BOOST_STATEReady = true; } return _CONTROL_LOW_LIGHT_BOOST_STATEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_LOW_LIGHT_BOOST_STATEContent = default;
        private static bool _CONTROL_LOW_LIGHT_BOOST_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_MODE { get { if (!_CONTROL_MODEReady) { _CONTROL_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_MODE"); _CONTROL_MODEReady = true; } return _CONTROL_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_MODEContent = default;
        private static bool _CONTROL_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_POST_RAW_SENSITIVITY_BOOST"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_POST_RAW_SENSITIVITY_BOOST { get { if (!_CONTROL_POST_RAW_SENSITIVITY_BOOSTReady) { _CONTROL_POST_RAW_SENSITIVITY_BOOSTContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_POST_RAW_SENSITIVITY_BOOST"); _CONTROL_POST_RAW_SENSITIVITY_BOOSTReady = true; } return _CONTROL_POST_RAW_SENSITIVITY_BOOSTContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_POST_RAW_SENSITIVITY_BOOSTContent = default;
        private static bool _CONTROL_POST_RAW_SENSITIVITY_BOOSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_SCENE_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_SCENE_MODE { get { if (!_CONTROL_SCENE_MODEReady) { _CONTROL_SCENE_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_SCENE_MODE"); _CONTROL_SCENE_MODEReady = true; } return _CONTROL_SCENE_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_SCENE_MODEContent = default;
        private static bool _CONTROL_SCENE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_SETTINGS_OVERRIDE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_SETTINGS_OVERRIDE { get { if (!_CONTROL_SETTINGS_OVERRIDEReady) { _CONTROL_SETTINGS_OVERRIDEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_SETTINGS_OVERRIDE"); _CONTROL_SETTINGS_OVERRIDEReady = true; } return _CONTROL_SETTINGS_OVERRIDEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_SETTINGS_OVERRIDEContent = default;
        private static bool _CONTROL_SETTINGS_OVERRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#CONTROL_VIDEO_STABILIZATION_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key CONTROL_VIDEO_STABILIZATION_MODE { get { if (!_CONTROL_VIDEO_STABILIZATION_MODEReady) { _CONTROL_VIDEO_STABILIZATION_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "CONTROL_VIDEO_STABILIZATION_MODE"); _CONTROL_VIDEO_STABILIZATION_MODEReady = true; } return _CONTROL_VIDEO_STABILIZATION_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _CONTROL_VIDEO_STABILIZATION_MODEContent = default;
        private static bool _CONTROL_VIDEO_STABILIZATION_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#DISTORTION_CORRECTION_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key DISTORTION_CORRECTION_MODE { get { if (!_DISTORTION_CORRECTION_MODEReady) { _DISTORTION_CORRECTION_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "DISTORTION_CORRECTION_MODE"); _DISTORTION_CORRECTION_MODEReady = true; } return _DISTORTION_CORRECTION_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _DISTORTION_CORRECTION_MODEContent = default;
        private static bool _DISTORTION_CORRECTION_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#EDGE_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key EDGE_MODE { get { if (!_EDGE_MODEReady) { _EDGE_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "EDGE_MODE"); _EDGE_MODEReady = true; } return _EDGE_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _EDGE_MODEContent = default;
        private static bool _EDGE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#EXTENSION_CURRENT_TYPE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key EXTENSION_CURRENT_TYPE { get { if (!_EXTENSION_CURRENT_TYPEReady) { _EXTENSION_CURRENT_TYPEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "EXTENSION_CURRENT_TYPE"); _EXTENSION_CURRENT_TYPEReady = true; } return _EXTENSION_CURRENT_TYPEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _EXTENSION_CURRENT_TYPEContent = default;
        private static bool _EXTENSION_CURRENT_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#EXTENSION_STRENGTH"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key EXTENSION_STRENGTH { get { if (!_EXTENSION_STRENGTHReady) { _EXTENSION_STRENGTHContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "EXTENSION_STRENGTH"); _EXTENSION_STRENGTHReady = true; } return _EXTENSION_STRENGTHContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _EXTENSION_STRENGTHContent = default;
        private static bool _EXTENSION_STRENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#FLASH_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key FLASH_MODE { get { if (!_FLASH_MODEReady) { _FLASH_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "FLASH_MODE"); _FLASH_MODEReady = true; } return _FLASH_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _FLASH_MODEContent = default;
        private static bool _FLASH_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#FLASH_STATE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key FLASH_STATE { get { if (!_FLASH_STATEReady) { _FLASH_STATEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "FLASH_STATE"); _FLASH_STATEReady = true; } return _FLASH_STATEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _FLASH_STATEContent = default;
        private static bool _FLASH_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#FLASH_STRENGTH_LEVEL"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key FLASH_STRENGTH_LEVEL { get { if (!_FLASH_STRENGTH_LEVELReady) { _FLASH_STRENGTH_LEVELContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "FLASH_STRENGTH_LEVEL"); _FLASH_STRENGTH_LEVELReady = true; } return _FLASH_STRENGTH_LEVELContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _FLASH_STRENGTH_LEVELContent = default;
        private static bool _FLASH_STRENGTH_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#HOT_PIXEL_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key HOT_PIXEL_MODE { get { if (!_HOT_PIXEL_MODEReady) { _HOT_PIXEL_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "HOT_PIXEL_MODE"); _HOT_PIXEL_MODEReady = true; } return _HOT_PIXEL_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _HOT_PIXEL_MODEContent = default;
        private static bool _HOT_PIXEL_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#JPEG_ORIENTATION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key JPEG_ORIENTATION { get { if (!_JPEG_ORIENTATIONReady) { _JPEG_ORIENTATIONContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "JPEG_ORIENTATION"); _JPEG_ORIENTATIONReady = true; } return _JPEG_ORIENTATIONContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _JPEG_ORIENTATIONContent = default;
        private static bool _JPEG_ORIENTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#LENS_OPTICAL_STABILIZATION_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key LENS_OPTICAL_STABILIZATION_MODE { get { if (!_LENS_OPTICAL_STABILIZATION_MODEReady) { _LENS_OPTICAL_STABILIZATION_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "LENS_OPTICAL_STABILIZATION_MODE"); _LENS_OPTICAL_STABILIZATION_MODEReady = true; } return _LENS_OPTICAL_STABILIZATION_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _LENS_OPTICAL_STABILIZATION_MODEContent = default;
        private static bool _LENS_OPTICAL_STABILIZATION_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#LENS_STATE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key LENS_STATE { get { if (!_LENS_STATEReady) { _LENS_STATEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "LENS_STATE"); _LENS_STATEReady = true; } return _LENS_STATEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _LENS_STATEContent = default;
        private static bool _LENS_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#NOISE_REDUCTION_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key NOISE_REDUCTION_MODE { get { if (!_NOISE_REDUCTION_MODEReady) { _NOISE_REDUCTION_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "NOISE_REDUCTION_MODE"); _NOISE_REDUCTION_MODEReady = true; } return _NOISE_REDUCTION_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _NOISE_REDUCTION_MODEContent = default;
        private static bool _NOISE_REDUCTION_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SCALER_ROTATE_AND_CROP"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SCALER_ROTATE_AND_CROP { get { if (!_SCALER_ROTATE_AND_CROPReady) { _SCALER_ROTATE_AND_CROPContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SCALER_ROTATE_AND_CROP"); _SCALER_ROTATE_AND_CROPReady = true; } return _SCALER_ROTATE_AND_CROPContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SCALER_ROTATE_AND_CROPContent = default;
        private static bool _SCALER_ROTATE_AND_CROPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SENSOR_DYNAMIC_WHITE_LEVEL"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SENSOR_DYNAMIC_WHITE_LEVEL { get { if (!_SENSOR_DYNAMIC_WHITE_LEVELReady) { _SENSOR_DYNAMIC_WHITE_LEVELContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SENSOR_DYNAMIC_WHITE_LEVEL"); _SENSOR_DYNAMIC_WHITE_LEVELReady = true; } return _SENSOR_DYNAMIC_WHITE_LEVELContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SENSOR_DYNAMIC_WHITE_LEVELContent = default;
        private static bool _SENSOR_DYNAMIC_WHITE_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SENSOR_PIXEL_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SENSOR_PIXEL_MODE { get { if (!_SENSOR_PIXEL_MODEReady) { _SENSOR_PIXEL_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SENSOR_PIXEL_MODE"); _SENSOR_PIXEL_MODEReady = true; } return _SENSOR_PIXEL_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SENSOR_PIXEL_MODEContent = default;
        private static bool _SENSOR_PIXEL_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SENSOR_SENSITIVITY"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SENSOR_SENSITIVITY { get { if (!_SENSOR_SENSITIVITYReady) { _SENSOR_SENSITIVITYContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SENSOR_SENSITIVITY"); _SENSOR_SENSITIVITYReady = true; } return _SENSOR_SENSITIVITYContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SENSOR_SENSITIVITYContent = default;
        private static bool _SENSOR_SENSITIVITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SENSOR_TEST_PATTERN_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SENSOR_TEST_PATTERN_MODE { get { if (!_SENSOR_TEST_PATTERN_MODEReady) { _SENSOR_TEST_PATTERN_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SENSOR_TEST_PATTERN_MODE"); _SENSOR_TEST_PATTERN_MODEReady = true; } return _SENSOR_TEST_PATTERN_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SENSOR_TEST_PATTERN_MODEContent = default;
        private static bool _SENSOR_TEST_PATTERN_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SHADING_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SHADING_MODE { get { if (!_SHADING_MODEReady) { _SHADING_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SHADING_MODE"); _SHADING_MODEReady = true; } return _SHADING_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SHADING_MODEContent = default;
        private static bool _SHADING_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#STATISTICS_FACE_DETECT_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key STATISTICS_FACE_DETECT_MODE { get { if (!_STATISTICS_FACE_DETECT_MODEReady) { _STATISTICS_FACE_DETECT_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "STATISTICS_FACE_DETECT_MODE"); _STATISTICS_FACE_DETECT_MODEReady = true; } return _STATISTICS_FACE_DETECT_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _STATISTICS_FACE_DETECT_MODEContent = default;
        private static bool _STATISTICS_FACE_DETECT_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#STATISTICS_LENS_SHADING_MAP_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key STATISTICS_LENS_SHADING_MAP_MODE { get { if (!_STATISTICS_LENS_SHADING_MAP_MODEReady) { _STATISTICS_LENS_SHADING_MAP_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "STATISTICS_LENS_SHADING_MAP_MODE"); _STATISTICS_LENS_SHADING_MAP_MODEReady = true; } return _STATISTICS_LENS_SHADING_MAP_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _STATISTICS_LENS_SHADING_MAP_MODEContent = default;
        private static bool _STATISTICS_LENS_SHADING_MAP_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#STATISTICS_OIS_DATA_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key STATISTICS_OIS_DATA_MODE { get { if (!_STATISTICS_OIS_DATA_MODEReady) { _STATISTICS_OIS_DATA_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "STATISTICS_OIS_DATA_MODE"); _STATISTICS_OIS_DATA_MODEReady = true; } return _STATISTICS_OIS_DATA_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _STATISTICS_OIS_DATA_MODEContent = default;
        private static bool _STATISTICS_OIS_DATA_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#STATISTICS_SCENE_FLICKER"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key STATISTICS_SCENE_FLICKER { get { if (!_STATISTICS_SCENE_FLICKERReady) { _STATISTICS_SCENE_FLICKERContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "STATISTICS_SCENE_FLICKER"); _STATISTICS_SCENE_FLICKERReady = true; } return _STATISTICS_SCENE_FLICKERContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _STATISTICS_SCENE_FLICKERContent = default;
        private static bool _STATISTICS_SCENE_FLICKERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#TONEMAP_MODE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key TONEMAP_MODE { get { if (!_TONEMAP_MODEReady) { _TONEMAP_MODEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "TONEMAP_MODE"); _TONEMAP_MODEReady = true; } return _TONEMAP_MODEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _TONEMAP_MODEContent = default;
        private static bool _TONEMAP_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#TONEMAP_PRESET_CURVE"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key TONEMAP_PRESET_CURVE { get { if (!_TONEMAP_PRESET_CURVEReady) { _TONEMAP_PRESET_CURVEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "TONEMAP_PRESET_CURVE"); _TONEMAP_PRESET_CURVEReady = true; } return _TONEMAP_PRESET_CURVEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _TONEMAP_PRESET_CURVEContent = default;
        private static bool _TONEMAP_PRESET_CURVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SENSOR_EXPOSURE_TIME"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SENSOR_EXPOSURE_TIME { get { if (!_SENSOR_EXPOSURE_TIMEReady) { _SENSOR_EXPOSURE_TIMEContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SENSOR_EXPOSURE_TIME"); _SENSOR_EXPOSURE_TIMEReady = true; } return _SENSOR_EXPOSURE_TIMEContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SENSOR_EXPOSURE_TIMEContent = default;
        private static bool _SENSOR_EXPOSURE_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SENSOR_FRAME_DURATION"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SENSOR_FRAME_DURATION { get { if (!_SENSOR_FRAME_DURATIONReady) { _SENSOR_FRAME_DURATIONContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SENSOR_FRAME_DURATION"); _SENSOR_FRAME_DURATIONReady = true; } return _SENSOR_FRAME_DURATIONContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SENSOR_FRAME_DURATIONContent = default;
        private static bool _SENSOR_FRAME_DURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SENSOR_ROLLING_SHUTTER_SKEW"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SENSOR_ROLLING_SHUTTER_SKEW { get { if (!_SENSOR_ROLLING_SHUTTER_SKEWReady) { _SENSOR_ROLLING_SHUTTER_SKEWContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SENSOR_ROLLING_SHUTTER_SKEW"); _SENSOR_ROLLING_SHUTTER_SKEWReady = true; } return _SENSOR_ROLLING_SHUTTER_SKEWContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SENSOR_ROLLING_SHUTTER_SKEWContent = default;
        private static bool _SENSOR_ROLLING_SHUTTER_SKEWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#SENSOR_TIMESTAMP"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key SENSOR_TIMESTAMP { get { if (!_SENSOR_TIMESTAMPReady) { _SENSOR_TIMESTAMPContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "SENSOR_TIMESTAMP"); _SENSOR_TIMESTAMPReady = true; } return _SENSOR_TIMESTAMPContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _SENSOR_TIMESTAMPContent = default;
        private static bool _SENSOR_TIMESTAMPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_ID"/>
        /// </summary>
        public static Android.Hardware.Camera2.CaptureResult.Key LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_ID { get { if (!_LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_IDReady) { _LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_IDContent = SGetField<Android.Hardware.Camera2.CaptureResult.Key>(LocalBridgeClazz, "LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_ID"); _LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_IDReady = true; } return _LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_IDContent; } }
        private static Android.Hardware.Camera2.CaptureResult.Key _LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_IDContent = default;
        private static bool _LOGICAL_MULTI_CAMERA_ACTIVE_PHYSICAL_IDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#get(android.hardware.camera2.CaptureResult.Key)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.Camera2.CaptureResult.Key"/></param>
        /// <typeparam name="T"></typeparam>
        /// <returns><typeparamref name="T"/></returns>
        public T Get<T>(Android.Hardware.Camera2.CaptureResult.Key<T> arg0)
        {
            return IExecuteWithSignature<T>("get", "(Landroid/hardware/camera2/CaptureResult$Key;)Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#getRequest()"/>
        /// </summary>
        /// <returns><see cref="Android.Hardware.Camera2.CaptureRequest"/></returns>
        public Android.Hardware.Camera2.CaptureRequest GetRequest()
        {
            return IExecuteWithSignature<Android.Hardware.Camera2.CaptureRequest>("getRequest", "()Landroid/hardware/camera2/CaptureRequest;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#getSequenceId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSequenceId()
        {
            return IExecuteWithSignature<int>("getSequenceId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#getCameraId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetCameraId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getCameraId", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html#getFrameNumber()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetFrameNumber()
        {
            return IExecuteWithSignature<long>("getFrameNumber", "()J");
        }

        #endregion

        #region Nested classes
        #region Key
        public partial class Key
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.Key.html#%3Cinit%3E(java.lang.String,java.lang.Class)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.Class"/></param>
            public Key(Java.Lang.String arg0, Java.Lang.Class arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.Key.html#getName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Key<T>
        public partial class Key<T>
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.Key.html#%3Cinit%3E(java.lang.String,java.lang.Class)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="Java.Lang.Class"/></param>
            public Key(Java.Lang.String arg0, Java.Lang.Class arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Hardware.Camera2.CaptureResult.Key{T}"/> to <see cref="Android.Hardware.Camera2.CaptureResult.Key"/>
            /// </summary>
            public static implicit operator Android.Hardware.Camera2.CaptureResult.Key(Android.Hardware.Camera2.CaptureResult.Key<T> t) => t.Cast<Android.Hardware.Camera2.CaptureResult.Key>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/camera2/CaptureResult.Key.html#getName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Hardware
{
    #region LutProperties declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/hardware/LutProperties.html"/>
    /// </summary>
    public partial class LutProperties : MASES.JCOBridge.C2JBridge.JVMBridgeBase<LutProperties>
    {
        const string _bridgeClassName = "android.hardware.LutProperties";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public LutProperties() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public LutProperties(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public LutProperties(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region LutProperties implementation
    public partial class LutProperties
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/LutProperties.html#ONE_DIMENSION"/>
        /// </summary>
        public static int ONE_DIMENSION { get { if (!_ONE_DIMENSIONReady) { _ONE_DIMENSIONContent = SGetField<int>(LocalBridgeClazz, "ONE_DIMENSION"); _ONE_DIMENSIONReady = true; } return _ONE_DIMENSIONContent; } }
        private static int _ONE_DIMENSIONContent = default;
        private static bool _ONE_DIMENSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/LutProperties.html#SAMPLING_KEY_CIE_Y"/>
        /// </summary>
        public static int SAMPLING_KEY_CIE_Y { get { if (!_SAMPLING_KEY_CIE_YReady) { _SAMPLING_KEY_CIE_YContent = SGetField<int>(LocalBridgeClazz, "SAMPLING_KEY_CIE_Y"); _SAMPLING_KEY_CIE_YReady = true; } return _SAMPLING_KEY_CIE_YContent; } }
        private static int _SAMPLING_KEY_CIE_YContent = default;
        private static bool _SAMPLING_KEY_CIE_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/LutProperties.html#SAMPLING_KEY_MAX_RGB"/>
        /// </summary>
        public static int SAMPLING_KEY_MAX_RGB { get { if (!_SAMPLING_KEY_MAX_RGBReady) { _SAMPLING_KEY_MAX_RGBContent = SGetField<int>(LocalBridgeClazz, "SAMPLING_KEY_MAX_RGB"); _SAMPLING_KEY_MAX_RGBReady = true; } return _SAMPLING_KEY_MAX_RGBContent; } }
        private static int _SAMPLING_KEY_MAX_RGBContent = default;
        private static bool _SAMPLING_KEY_MAX_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/LutProperties.html#SAMPLING_KEY_RGB"/>
        /// </summary>
        public static int SAMPLING_KEY_RGB { get { if (!_SAMPLING_KEY_RGBReady) { _SAMPLING_KEY_RGBContent = SGetField<int>(LocalBridgeClazz, "SAMPLING_KEY_RGB"); _SAMPLING_KEY_RGBReady = true; } return _SAMPLING_KEY_RGBContent; } }
        private static int _SAMPLING_KEY_RGBContent = default;
        private static bool _SAMPLING_KEY_RGBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/LutProperties.html#THREE_DIMENSION"/>
        /// </summary>
        public static int THREE_DIMENSION { get { if (!_THREE_DIMENSIONReady) { _THREE_DIMENSIONContent = SGetField<int>(LocalBridgeClazz, "THREE_DIMENSION"); _THREE_DIMENSIONReady = true; } return _THREE_DIMENSIONContent; } }
        private static int _THREE_DIMENSIONContent = default;
        private static bool _THREE_DIMENSIONReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/LutProperties.html#getDimension()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDimension()
        {
            return IExecuteWithSignature<int>("getDimension", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/LutProperties.html#getSize()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSize()
        {
            return IExecuteWithSignature<int>("getSize", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/LutProperties.html#getSamplingKeys()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int[] GetSamplingKeys()
        {
            return IExecuteWithSignatureArray<int>("getSamplingKeys", "()[I");
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Hardware
{
    #region SensorManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html"/>
    /// </summary>
    public partial class SensorManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SensorManager>
    {
        const string _bridgeClassName = "android.hardware.SensorManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("SensorManager class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public SensorManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("SensorManager class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public SensorManager(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region DynamicSensorCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.DynamicSensorCallback.html"/>
        /// </summary>
        public partial class DynamicSensorCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<DynamicSensorCallback>
        {
            const string _bridgeClassName = "android.hardware.SensorManager$DynamicSensorCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("DynamicSensorCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public DynamicSensorCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("DynamicSensorCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public DynamicSensorCallback(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region SensorManager implementation
    public partial class SensorManager
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_DEATH_STAR_I"/>
        /// </summary>
        public static float GRAVITY_DEATH_STAR_I { get { if (!_GRAVITY_DEATH_STAR_IReady) { _GRAVITY_DEATH_STAR_IContent = SGetField<float>(LocalBridgeClazz, "GRAVITY_DEATH_STAR_I"); _GRAVITY_DEATH_STAR_IReady = true; } return _GRAVITY_DEATH_STAR_IContent; } }
        private static float _GRAVITY_DEATH_STAR_IContent = default;
        private static bool _GRAVITY_DEATH_STAR_IReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_EARTH"/>
        /// </summary>
        public static float GRAVITY_EARTH { get { if (!_GRAVITY_EARTHReady) { _GRAVITY_EARTHContent = SGetField<float>(LocalBridgeClazz, "GRAVITY_EARTH"); _GRAVITY_EARTHReady = true; } return _GRAVITY_EARTHContent; } }
        private static float _GRAVITY_EARTHContent = default;
        private static bool _GRAVITY_EARTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_JUPITER"/>
        /// </summary>
        public static float GRAVITY_JUPITER { get { if (!_GRAVITY_JUPITERReady) { _GRAVITY_JUPITERContent = SGetField<float>(LocalBridgeClazz, "GRAVITY_JUPITER"); _GRAVITY_JUPITERReady = true; } return _GRAVITY_JUPITERContent; } }
        private static float _GRAVITY_JUPITERContent = default;
        private static bool _GRAVITY_JUPITERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_MARS"/>
        /// </summary>
        public static float GRAVITY_MARS { get { if (!_GRAVITY_MARSReady) { _GRAVITY_MARSContent = SGetField<float>(LocalBridgeClazz, "GRAVITY_MARS"); _GRAVITY_MARSReady = true; } return _GRAVITY_MARSContent; } }
        private static float _GRAVITY_MARSContent = default;
        private static bool _GRAVITY_MARSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_MERCURY"/>
        /// </summary>
        public static float GRAVITY_MERCURY { get { if (!_GRAVITY_MERCURYReady) { _GRAVITY_MERCURYContent = SGetField<float>(LocalBridgeClazz, "GRAVITY_MERCURY"); _GRAVITY_MERCURYReady = true; } return _GRAVITY_MERCURYContent; } }
        private static float _GRAVITY_MERCURYContent = default;
        private static bool _GRAVITY_MERCURYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_MOON"/>
        /// </summary>
        public static float GRAVITY_MOON { get { if (!_GRAVITY_MOONReady) { _GRAVITY_MOONContent = SGetField<float>(LocalBridgeClazz, "GRAVITY_MOON"); _GRAVITY_MOONReady = true; } return _GRAVITY_MOONContent; } }
        private static float _GRAVITY_MOONContent = default;
        private static bool _GRAVITY_MOONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_NEPTUNE"/>
        /// </summary>
        public static float GRAVITY_NEPTUNE { get { if (!_GRAVITY_NEPTUNEReady) { _GRAVITY_NEPTUNEContent = SGetField<float>(LocalBridgeClazz, "GRAVITY_NEPTUNE"); _GRAVITY_NEPTUNEReady = true; } return _GRAVITY_NEPTUNEContent; } }
        private static float _GRAVITY_NEPTUNEContent = default;
        private static bool _GRAVITY_NEPTUNEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_PLUTO"/>
        /// </summary>
        public static float GRAVITY_PLUTO { get { if (!_GRAVITY_PLUTOReady) { _GRAVITY_PLUTOContent = SGetField<float>(LocalBridgeClazz, "GRAVITY_PLUTO"); _GRAVITY_PLUTOReady = true; } return _GRAVITY_PLUTOContent; } }
        private static float _GRAVITY_PLUTOContent = default;
        private static bool _GRAVITY_PLUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_SATURN"/>
        /// </summary>
        public static float GRAVITY_SATURN { get { if (!_GRAVITY_SATURNReady) { _GRAVITY_SATURNContent = SGetField<float>(LocalBridgeClazz, "GRAVITY_SATURN"); _GRAVITY_SATURNReady = true; } return _GRAVITY_SATURNContent; } }
        private static float _GRAVITY_SATURNContent = default;
        private static bool _GRAVITY_SATURNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_SUN"/>
        /// </summary>
        public static float GRAVITY_SUN { get { if (!_GRAVITY_SUNReady) { _GRAVITY_SUNContent = SGetField<float>(LocalBridgeClazz, "GRAVITY_SUN"); _GRAVITY_SUNReady = true; } return _GRAVITY_SUNContent; } }
        private static float _GRAVITY_SUNContent = default;
        private static bool _GRAVITY_SUNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_THE_ISLAND"/>
        /// </summary>
        public static float GRAVITY_THE_ISLAND { get { if (!_GRAVITY_THE_ISLANDReady) { _GRAVITY_THE_ISLANDContent = SGetField<float>(LocalBridgeClazz, "GRAVITY_THE_ISLAND"); _GRAVITY_THE_ISLANDReady = true; } return _GRAVITY_THE_ISLANDContent; } }
        private static float _GRAVITY_THE_ISLANDContent = default;
        private static bool _GRAVITY_THE_ISLANDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_URANUS"/>
        /// </summary>
        public static float GRAVITY_URANUS { get { if (!_GRAVITY_URANUSReady) { _GRAVITY_URANUSContent = SGetField<float>(LocalBridgeClazz, "GRAVITY_URANUS"); _GRAVITY_URANUSReady = true; } return _GRAVITY_URANUSContent; } }
        private static float _GRAVITY_URANUSContent = default;
        private static bool _GRAVITY_URANUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#GRAVITY_VENUS"/>
        /// </summary>
        public static float GRAVITY_VENUS { get { if (!_GRAVITY_VENUSReady) { _GRAVITY_VENUSContent = SGetField<float>(LocalBridgeClazz, "GRAVITY_VENUS"); _GRAVITY_VENUSReady = true; } return _GRAVITY_VENUSContent; } }
        private static float _GRAVITY_VENUSContent = default;
        private static bool _GRAVITY_VENUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#LIGHT_CLOUDY"/>
        /// </summary>
        public static float LIGHT_CLOUDY { get { if (!_LIGHT_CLOUDYReady) { _LIGHT_CLOUDYContent = SGetField<float>(LocalBridgeClazz, "LIGHT_CLOUDY"); _LIGHT_CLOUDYReady = true; } return _LIGHT_CLOUDYContent; } }
        private static float _LIGHT_CLOUDYContent = default;
        private static bool _LIGHT_CLOUDYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#LIGHT_FULLMOON"/>
        /// </summary>
        public static float LIGHT_FULLMOON { get { if (!_LIGHT_FULLMOONReady) { _LIGHT_FULLMOONContent = SGetField<float>(LocalBridgeClazz, "LIGHT_FULLMOON"); _LIGHT_FULLMOONReady = true; } return _LIGHT_FULLMOONContent; } }
        private static float _LIGHT_FULLMOONContent = default;
        private static bool _LIGHT_FULLMOONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#LIGHT_NO_MOON"/>
        /// </summary>
        public static float LIGHT_NO_MOON { get { if (!_LIGHT_NO_MOONReady) { _LIGHT_NO_MOONContent = SGetField<float>(LocalBridgeClazz, "LIGHT_NO_MOON"); _LIGHT_NO_MOONReady = true; } return _LIGHT_NO_MOONContent; } }
        private static float _LIGHT_NO_MOONContent = default;
        private static bool _LIGHT_NO_MOONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#LIGHT_OVERCAST"/>
        /// </summary>
        public static float LIGHT_OVERCAST { get { if (!_LIGHT_OVERCASTReady) { _LIGHT_OVERCASTContent = SGetField<float>(LocalBridgeClazz, "LIGHT_OVERCAST"); _LIGHT_OVERCASTReady = true; } return _LIGHT_OVERCASTContent; } }
        private static float _LIGHT_OVERCASTContent = default;
        private static bool _LIGHT_OVERCASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#LIGHT_SHADE"/>
        /// </summary>
        public static float LIGHT_SHADE { get { if (!_LIGHT_SHADEReady) { _LIGHT_SHADEContent = SGetField<float>(LocalBridgeClazz, "LIGHT_SHADE"); _LIGHT_SHADEReady = true; } return _LIGHT_SHADEContent; } }
        private static float _LIGHT_SHADEContent = default;
        private static bool _LIGHT_SHADEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#LIGHT_SUNLIGHT"/>
        /// </summary>
        public static float LIGHT_SUNLIGHT { get { if (!_LIGHT_SUNLIGHTReady) { _LIGHT_SUNLIGHTContent = SGetField<float>(LocalBridgeClazz, "LIGHT_SUNLIGHT"); _LIGHT_SUNLIGHTReady = true; } return _LIGHT_SUNLIGHTContent; } }
        private static float _LIGHT_SUNLIGHTContent = default;
        private static bool _LIGHT_SUNLIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#LIGHT_SUNLIGHT_MAX"/>
        /// </summary>
        public static float LIGHT_SUNLIGHT_MAX { get { if (!_LIGHT_SUNLIGHT_MAXReady) { _LIGHT_SUNLIGHT_MAXContent = SGetField<float>(LocalBridgeClazz, "LIGHT_SUNLIGHT_MAX"); _LIGHT_SUNLIGHT_MAXReady = true; } return _LIGHT_SUNLIGHT_MAXContent; } }
        private static float _LIGHT_SUNLIGHT_MAXContent = default;
        private static bool _LIGHT_SUNLIGHT_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#LIGHT_SUNRISE"/>
        /// </summary>
        public static float LIGHT_SUNRISE { get { if (!_LIGHT_SUNRISEReady) { _LIGHT_SUNRISEContent = SGetField<float>(LocalBridgeClazz, "LIGHT_SUNRISE"); _LIGHT_SUNRISEReady = true; } return _LIGHT_SUNRISEContent; } }
        private static float _LIGHT_SUNRISEContent = default;
        private static bool _LIGHT_SUNRISEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#MAGNETIC_FIELD_EARTH_MAX"/>
        /// </summary>
        public static float MAGNETIC_FIELD_EARTH_MAX { get { if (!_MAGNETIC_FIELD_EARTH_MAXReady) { _MAGNETIC_FIELD_EARTH_MAXContent = SGetField<float>(LocalBridgeClazz, "MAGNETIC_FIELD_EARTH_MAX"); _MAGNETIC_FIELD_EARTH_MAXReady = true; } return _MAGNETIC_FIELD_EARTH_MAXContent; } }
        private static float _MAGNETIC_FIELD_EARTH_MAXContent = default;
        private static bool _MAGNETIC_FIELD_EARTH_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#MAGNETIC_FIELD_EARTH_MIN"/>
        /// </summary>
        public static float MAGNETIC_FIELD_EARTH_MIN { get { if (!_MAGNETIC_FIELD_EARTH_MINReady) { _MAGNETIC_FIELD_EARTH_MINContent = SGetField<float>(LocalBridgeClazz, "MAGNETIC_FIELD_EARTH_MIN"); _MAGNETIC_FIELD_EARTH_MINReady = true; } return _MAGNETIC_FIELD_EARTH_MINContent; } }
        private static float _MAGNETIC_FIELD_EARTH_MINContent = default;
        private static bool _MAGNETIC_FIELD_EARTH_MINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#PRESSURE_STANDARD_ATMOSPHERE"/>
        /// </summary>
        public static float PRESSURE_STANDARD_ATMOSPHERE { get { if (!_PRESSURE_STANDARD_ATMOSPHEREReady) { _PRESSURE_STANDARD_ATMOSPHEREContent = SGetField<float>(LocalBridgeClazz, "PRESSURE_STANDARD_ATMOSPHERE"); _PRESSURE_STANDARD_ATMOSPHEREReady = true; } return _PRESSURE_STANDARD_ATMOSPHEREContent; } }
        private static float _PRESSURE_STANDARD_ATMOSPHEREContent = default;
        private static bool _PRESSURE_STANDARD_ATMOSPHEREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#STANDARD_GRAVITY"/>
        /// </summary>
        public static float STANDARD_GRAVITY { get { if (!_STANDARD_GRAVITYReady) { _STANDARD_GRAVITYContent = SGetField<float>(LocalBridgeClazz, "STANDARD_GRAVITY"); _STANDARD_GRAVITYReady = true; } return _STANDARD_GRAVITYContent; } }
        private static float _STANDARD_GRAVITYContent = default;
        private static bool _STANDARD_GRAVITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#AXIS_MINUS_X"/>
        /// </summary>
        public static int AXIS_MINUS_X { get { if (!_AXIS_MINUS_XReady) { _AXIS_MINUS_XContent = SGetField<int>(LocalBridgeClazz, "AXIS_MINUS_X"); _AXIS_MINUS_XReady = true; } return _AXIS_MINUS_XContent; } }
        private static int _AXIS_MINUS_XContent = default;
        private static bool _AXIS_MINUS_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#AXIS_MINUS_Y"/>
        /// </summary>
        public static int AXIS_MINUS_Y { get { if (!_AXIS_MINUS_YReady) { _AXIS_MINUS_YContent = SGetField<int>(LocalBridgeClazz, "AXIS_MINUS_Y"); _AXIS_MINUS_YReady = true; } return _AXIS_MINUS_YContent; } }
        private static int _AXIS_MINUS_YContent = default;
        private static bool _AXIS_MINUS_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#AXIS_MINUS_Z"/>
        /// </summary>
        public static int AXIS_MINUS_Z { get { if (!_AXIS_MINUS_ZReady) { _AXIS_MINUS_ZContent = SGetField<int>(LocalBridgeClazz, "AXIS_MINUS_Z"); _AXIS_MINUS_ZReady = true; } return _AXIS_MINUS_ZContent; } }
        private static int _AXIS_MINUS_ZContent = default;
        private static bool _AXIS_MINUS_ZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#AXIS_X"/>
        /// </summary>
        public static int AXIS_X { get { if (!_AXIS_XReady) { _AXIS_XContent = SGetField<int>(LocalBridgeClazz, "AXIS_X"); _AXIS_XReady = true; } return _AXIS_XContent; } }
        private static int _AXIS_XContent = default;
        private static bool _AXIS_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#AXIS_Y"/>
        /// </summary>
        public static int AXIS_Y { get { if (!_AXIS_YReady) { _AXIS_YContent = SGetField<int>(LocalBridgeClazz, "AXIS_Y"); _AXIS_YReady = true; } return _AXIS_YContent; } }
        private static int _AXIS_YContent = default;
        private static bool _AXIS_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#AXIS_Z"/>
        /// </summary>
        public static int AXIS_Z { get { if (!_AXIS_ZReady) { _AXIS_ZContent = SGetField<int>(LocalBridgeClazz, "AXIS_Z"); _AXIS_ZReady = true; } return _AXIS_ZContent; } }
        private static int _AXIS_ZContent = default;
        private static bool _AXIS_ZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#DATA_X"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int DATA_X { get { if (!_DATA_XReady) { _DATA_XContent = SGetField<int>(LocalBridgeClazz, "DATA_X"); _DATA_XReady = true; } return _DATA_XContent; } }
        private static int _DATA_XContent = default;
        private static bool _DATA_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#DATA_Y"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int DATA_Y { get { if (!_DATA_YReady) { _DATA_YContent = SGetField<int>(LocalBridgeClazz, "DATA_Y"); _DATA_YReady = true; } return _DATA_YContent; } }
        private static int _DATA_YContent = default;
        private static bool _DATA_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#DATA_Z"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int DATA_Z { get { if (!_DATA_ZReady) { _DATA_ZContent = SGetField<int>(LocalBridgeClazz, "DATA_Z"); _DATA_ZReady = true; } return _DATA_ZContent; } }
        private static int _DATA_ZContent = default;
        private static bool _DATA_ZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#RAW_DATA_INDEX"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int RAW_DATA_INDEX { get { if (!_RAW_DATA_INDEXReady) { _RAW_DATA_INDEXContent = SGetField<int>(LocalBridgeClazz, "RAW_DATA_INDEX"); _RAW_DATA_INDEXReady = true; } return _RAW_DATA_INDEXContent; } }
        private static int _RAW_DATA_INDEXContent = default;
        private static bool _RAW_DATA_INDEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#RAW_DATA_X"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int RAW_DATA_X { get { if (!_RAW_DATA_XReady) { _RAW_DATA_XContent = SGetField<int>(LocalBridgeClazz, "RAW_DATA_X"); _RAW_DATA_XReady = true; } return _RAW_DATA_XContent; } }
        private static int _RAW_DATA_XContent = default;
        private static bool _RAW_DATA_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#RAW_DATA_Y"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int RAW_DATA_Y { get { if (!_RAW_DATA_YReady) { _RAW_DATA_YContent = SGetField<int>(LocalBridgeClazz, "RAW_DATA_Y"); _RAW_DATA_YReady = true; } return _RAW_DATA_YContent; } }
        private static int _RAW_DATA_YContent = default;
        private static bool _RAW_DATA_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#RAW_DATA_Z"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int RAW_DATA_Z { get { if (!_RAW_DATA_ZReady) { _RAW_DATA_ZContent = SGetField<int>(LocalBridgeClazz, "RAW_DATA_Z"); _RAW_DATA_ZReady = true; } return _RAW_DATA_ZContent; } }
        private static int _RAW_DATA_ZContent = default;
        private static bool _RAW_DATA_ZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_ACCELEROMETER"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SENSOR_ACCELEROMETER { get { if (!_SENSOR_ACCELEROMETERReady) { _SENSOR_ACCELEROMETERContent = SGetField<int>(LocalBridgeClazz, "SENSOR_ACCELEROMETER"); _SENSOR_ACCELEROMETERReady = true; } return _SENSOR_ACCELEROMETERContent; } }
        private static int _SENSOR_ACCELEROMETERContent = default;
        private static bool _SENSOR_ACCELEROMETERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_ALL"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SENSOR_ALL { get { if (!_SENSOR_ALLReady) { _SENSOR_ALLContent = SGetField<int>(LocalBridgeClazz, "SENSOR_ALL"); _SENSOR_ALLReady = true; } return _SENSOR_ALLContent; } }
        private static int _SENSOR_ALLContent = default;
        private static bool _SENSOR_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_DELAY_FASTEST"/>
        /// </summary>
        public static int SENSOR_DELAY_FASTEST { get { if (!_SENSOR_DELAY_FASTESTReady) { _SENSOR_DELAY_FASTESTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_DELAY_FASTEST"); _SENSOR_DELAY_FASTESTReady = true; } return _SENSOR_DELAY_FASTESTContent; } }
        private static int _SENSOR_DELAY_FASTESTContent = default;
        private static bool _SENSOR_DELAY_FASTESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_DELAY_GAME"/>
        /// </summary>
        public static int SENSOR_DELAY_GAME { get { if (!_SENSOR_DELAY_GAMEReady) { _SENSOR_DELAY_GAMEContent = SGetField<int>(LocalBridgeClazz, "SENSOR_DELAY_GAME"); _SENSOR_DELAY_GAMEReady = true; } return _SENSOR_DELAY_GAMEContent; } }
        private static int _SENSOR_DELAY_GAMEContent = default;
        private static bool _SENSOR_DELAY_GAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_DELAY_NORMAL"/>
        /// </summary>
        public static int SENSOR_DELAY_NORMAL { get { if (!_SENSOR_DELAY_NORMALReady) { _SENSOR_DELAY_NORMALContent = SGetField<int>(LocalBridgeClazz, "SENSOR_DELAY_NORMAL"); _SENSOR_DELAY_NORMALReady = true; } return _SENSOR_DELAY_NORMALContent; } }
        private static int _SENSOR_DELAY_NORMALContent = default;
        private static bool _SENSOR_DELAY_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_DELAY_UI"/>
        /// </summary>
        public static int SENSOR_DELAY_UI { get { if (!_SENSOR_DELAY_UIReady) { _SENSOR_DELAY_UIContent = SGetField<int>(LocalBridgeClazz, "SENSOR_DELAY_UI"); _SENSOR_DELAY_UIReady = true; } return _SENSOR_DELAY_UIContent; } }
        private static int _SENSOR_DELAY_UIContent = default;
        private static bool _SENSOR_DELAY_UIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_LIGHT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SENSOR_LIGHT { get { if (!_SENSOR_LIGHTReady) { _SENSOR_LIGHTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_LIGHT"); _SENSOR_LIGHTReady = true; } return _SENSOR_LIGHTContent; } }
        private static int _SENSOR_LIGHTContent = default;
        private static bool _SENSOR_LIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_MAGNETIC_FIELD"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SENSOR_MAGNETIC_FIELD { get { if (!_SENSOR_MAGNETIC_FIELDReady) { _SENSOR_MAGNETIC_FIELDContent = SGetField<int>(LocalBridgeClazz, "SENSOR_MAGNETIC_FIELD"); _SENSOR_MAGNETIC_FIELDReady = true; } return _SENSOR_MAGNETIC_FIELDContent; } }
        private static int _SENSOR_MAGNETIC_FIELDContent = default;
        private static bool _SENSOR_MAGNETIC_FIELDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_MAX"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SENSOR_MAX { get { if (!_SENSOR_MAXReady) { _SENSOR_MAXContent = SGetField<int>(LocalBridgeClazz, "SENSOR_MAX"); _SENSOR_MAXReady = true; } return _SENSOR_MAXContent; } }
        private static int _SENSOR_MAXContent = default;
        private static bool _SENSOR_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_MIN"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SENSOR_MIN { get { if (!_SENSOR_MINReady) { _SENSOR_MINContent = SGetField<int>(LocalBridgeClazz, "SENSOR_MIN"); _SENSOR_MINReady = true; } return _SENSOR_MINContent; } }
        private static int _SENSOR_MINContent = default;
        private static bool _SENSOR_MINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_ORIENTATION"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SENSOR_ORIENTATION { get { if (!_SENSOR_ORIENTATIONReady) { _SENSOR_ORIENTATIONContent = SGetField<int>(LocalBridgeClazz, "SENSOR_ORIENTATION"); _SENSOR_ORIENTATIONReady = true; } return _SENSOR_ORIENTATIONContent; } }
        private static int _SENSOR_ORIENTATIONContent = default;
        private static bool _SENSOR_ORIENTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_ORIENTATION_RAW"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SENSOR_ORIENTATION_RAW { get { if (!_SENSOR_ORIENTATION_RAWReady) { _SENSOR_ORIENTATION_RAWContent = SGetField<int>(LocalBridgeClazz, "SENSOR_ORIENTATION_RAW"); _SENSOR_ORIENTATION_RAWReady = true; } return _SENSOR_ORIENTATION_RAWContent; } }
        private static int _SENSOR_ORIENTATION_RAWContent = default;
        private static bool _SENSOR_ORIENTATION_RAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_PROXIMITY"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SENSOR_PROXIMITY { get { if (!_SENSOR_PROXIMITYReady) { _SENSOR_PROXIMITYContent = SGetField<int>(LocalBridgeClazz, "SENSOR_PROXIMITY"); _SENSOR_PROXIMITYReady = true; } return _SENSOR_PROXIMITYContent; } }
        private static int _SENSOR_PROXIMITYContent = default;
        private static bool _SENSOR_PROXIMITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_STATUS_ACCURACY_HIGH"/>
        /// </summary>
        public static int SENSOR_STATUS_ACCURACY_HIGH { get { if (!_SENSOR_STATUS_ACCURACY_HIGHReady) { _SENSOR_STATUS_ACCURACY_HIGHContent = SGetField<int>(LocalBridgeClazz, "SENSOR_STATUS_ACCURACY_HIGH"); _SENSOR_STATUS_ACCURACY_HIGHReady = true; } return _SENSOR_STATUS_ACCURACY_HIGHContent; } }
        private static int _SENSOR_STATUS_ACCURACY_HIGHContent = default;
        private static bool _SENSOR_STATUS_ACCURACY_HIGHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_STATUS_ACCURACY_LOW"/>
        /// </summary>
        public static int SENSOR_STATUS_ACCURACY_LOW { get { if (!_SENSOR_STATUS_ACCURACY_LOWReady) { _SENSOR_STATUS_ACCURACY_LOWContent = SGetField<int>(LocalBridgeClazz, "SENSOR_STATUS_ACCURACY_LOW"); _SENSOR_STATUS_ACCURACY_LOWReady = true; } return _SENSOR_STATUS_ACCURACY_LOWContent; } }
        private static int _SENSOR_STATUS_ACCURACY_LOWContent = default;
        private static bool _SENSOR_STATUS_ACCURACY_LOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_STATUS_ACCURACY_MEDIUM"/>
        /// </summary>
        public static int SENSOR_STATUS_ACCURACY_MEDIUM { get { if (!_SENSOR_STATUS_ACCURACY_MEDIUMReady) { _SENSOR_STATUS_ACCURACY_MEDIUMContent = SGetField<int>(LocalBridgeClazz, "SENSOR_STATUS_ACCURACY_MEDIUM"); _SENSOR_STATUS_ACCURACY_MEDIUMReady = true; } return _SENSOR_STATUS_ACCURACY_MEDIUMContent; } }
        private static int _SENSOR_STATUS_ACCURACY_MEDIUMContent = default;
        private static bool _SENSOR_STATUS_ACCURACY_MEDIUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_STATUS_NO_CONTACT"/>
        /// </summary>
        public static int SENSOR_STATUS_NO_CONTACT { get { if (!_SENSOR_STATUS_NO_CONTACTReady) { _SENSOR_STATUS_NO_CONTACTContent = SGetField<int>(LocalBridgeClazz, "SENSOR_STATUS_NO_CONTACT"); _SENSOR_STATUS_NO_CONTACTReady = true; } return _SENSOR_STATUS_NO_CONTACTContent; } }
        private static int _SENSOR_STATUS_NO_CONTACTContent = default;
        private static bool _SENSOR_STATUS_NO_CONTACTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_STATUS_UNRELIABLE"/>
        /// </summary>
        public static int SENSOR_STATUS_UNRELIABLE { get { if (!_SENSOR_STATUS_UNRELIABLEReady) { _SENSOR_STATUS_UNRELIABLEContent = SGetField<int>(LocalBridgeClazz, "SENSOR_STATUS_UNRELIABLE"); _SENSOR_STATUS_UNRELIABLEReady = true; } return _SENSOR_STATUS_UNRELIABLEContent; } }
        private static int _SENSOR_STATUS_UNRELIABLEContent = default;
        private static bool _SENSOR_STATUS_UNRELIABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_TEMPERATURE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SENSOR_TEMPERATURE { get { if (!_SENSOR_TEMPERATUREReady) { _SENSOR_TEMPERATUREContent = SGetField<int>(LocalBridgeClazz, "SENSOR_TEMPERATURE"); _SENSOR_TEMPERATUREReady = true; } return _SENSOR_TEMPERATUREContent; } }
        private static int _SENSOR_TEMPERATUREContent = default;
        private static bool _SENSOR_TEMPERATUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#SENSOR_TRICORDER"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SENSOR_TRICORDER { get { if (!_SENSOR_TRICORDERReady) { _SENSOR_TRICORDERContent = SGetField<int>(LocalBridgeClazz, "SENSOR_TRICORDER"); _SENSOR_TRICORDERReady = true; } return _SENSOR_TRICORDERContent; } }
        private static int _SENSOR_TRICORDERContent = default;
        private static bool _SENSOR_TRICORDERReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#getRotationMatrix(float[],float[],float[],float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool GetRotationMatrix(float[] arg0, float[] arg1, float[] arg2, float[] arg3)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "getRotationMatrix", "([F[F[F[F)Z", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#remapCoordinateSystem(float[],int,int,float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool RemapCoordinateSystem(float[] arg0, int arg1, int arg2, float[] arg3)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "remapCoordinateSystem", "([FII[F)Z", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#getAltitude(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="float"/></returns>
        public static float GetAltitude(float arg0, float arg1)
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "getAltitude", "(FF)F", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#getInclination(float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <returns><see cref="float"/></returns>
        public static float GetInclination(float[] arg0)
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "getInclination", "([F)F", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#getOrientation(float[],float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="float"/></returns>
        public static float[] GetOrientation(float[] arg0, float[] arg1)
        {
            return SExecuteWithSignatureArray<float>(LocalBridgeClazz, "getOrientation", "([F[F)[F", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#getAngleChange(float[],float[],float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        public static void GetAngleChange(float[] arg0, float[] arg1, float[] arg2)
        {
            SExecuteWithSignature(LocalBridgeClazz, "getAngleChange", "([F[F[F)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#getQuaternionFromVector(float[],float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void GetQuaternionFromVector(float[] arg0, float[] arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "getQuaternionFromVector", "([F[F)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#getRotationMatrixFromVector(float[],float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public static void GetRotationMatrixFromVector(float[] arg0, float[] arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "getRotationMatrixFromVector", "([F[F)V", arg0, arg1);
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#getDefaultSensor(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="Android.Hardware.Sensor"/></returns>
        public Android.Hardware.Sensor GetDefaultSensor(int arg0, bool arg1)
        {
            return IExecuteWithSignature<Android.Hardware.Sensor>("getDefaultSensor", "(IZ)Landroid/hardware/Sensor;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#getDefaultSensor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Hardware.Sensor"/></returns>
        public Android.Hardware.Sensor GetDefaultSensor(int arg0)
        {
            return IExecuteWithSignature<Android.Hardware.Sensor>("getDefaultSensor", "(I)Landroid/hardware/Sensor;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#createDirectChannel(android.hardware.HardwareBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.HardwareBuffer"/></param>
        /// <returns><see cref="Android.Hardware.SensorDirectChannel"/></returns>
        public Android.Hardware.SensorDirectChannel CreateDirectChannel(Android.Hardware.HardwareBuffer arg0)
        {
            return IExecuteWithSignature<Android.Hardware.SensorDirectChannel>("createDirectChannel", "(Landroid/hardware/HardwareBuffer;)Landroid/hardware/SensorDirectChannel;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#createDirectChannel(android.os.MemoryFile)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.MemoryFile"/></param>
        /// <returns><see cref="Android.Hardware.SensorDirectChannel"/></returns>
        public Android.Hardware.SensorDirectChannel CreateDirectChannel(Android.Os.MemoryFile arg0)
        {
            return IExecuteWithSignature<Android.Hardware.SensorDirectChannel>("createDirectChannel", "(Landroid/os/MemoryFile;)Landroid/hardware/SensorDirectChannel;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#cancelTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.TriggerEventListener"/></param>
        /// <param name="arg1"><see cref="Android.Hardware.Sensor"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CancelTriggerSensor(Android.Hardware.TriggerEventListener arg0, Android.Hardware.Sensor arg1)
        {
            return IExecuteWithSignature<bool>("cancelTriggerSensor", "(Landroid/hardware/TriggerEventListener;Landroid/hardware/Sensor;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#flush(android.hardware.SensorEventListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.SensorEventListener"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Flush(Android.Hardware.SensorEventListener arg0)
        {
            return IExecuteWithSignature<bool>("flush", "(Landroid/hardware/SensorEventListener;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#isDynamicSensorDiscoverySupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDynamicSensorDiscoverySupported()
        {
            return IExecuteWithSignature<bool>("isDynamicSensorDiscoverySupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.SensorEventListener"/></param>
        /// <param name="arg1"><see cref="Android.Hardware.Sensor"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Android.Os.Handler"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RegisterListener(Android.Hardware.SensorEventListener arg0, Android.Hardware.Sensor arg1, int arg2, Android.Os.Handler arg3)
        {
            return IExecuteWithSignature<bool>("registerListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;ILandroid/os/Handler;)Z", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,int,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.SensorEventListener"/></param>
        /// <param name="arg1"><see cref="Android.Hardware.Sensor"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.Os.Handler"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RegisterListener(Android.Hardware.SensorEventListener arg0, Android.Hardware.Sensor arg1, int arg2, int arg3, Android.Os.Handler arg4)
        {
            return IExecuteWithSignature<bool>("registerListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;IILandroid/os/Handler;)Z", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.SensorEventListener"/></param>
        /// <param name="arg1"><see cref="Android.Hardware.Sensor"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RegisterListener(Android.Hardware.SensorEventListener arg0, Android.Hardware.Sensor arg1, int arg2, int arg3)
        {
            return IExecuteWithSignature<bool>("registerListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;II)Z", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.SensorEventListener"/></param>
        /// <param name="arg1"><see cref="Android.Hardware.Sensor"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RegisterListener(Android.Hardware.SensorEventListener arg0, Android.Hardware.Sensor arg1, int arg2)
        {
            return IExecuteWithSignature<bool>("registerListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;I)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorListener,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.SensorListener"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool RegisterListener(Android.Hardware.SensorListener arg0, int arg1, int arg2)
        {
            return IExecuteWithSignature<bool>("registerListener", "(Landroid/hardware/SensorListener;II)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#registerListener(android.hardware.SensorListener,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.SensorListener"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool RegisterListener(Android.Hardware.SensorListener arg0, int arg1)
        {
            return IExecuteWithSignature<bool>("registerListener", "(Landroid/hardware/SensorListener;I)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#requestTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.TriggerEventListener"/></param>
        /// <param name="arg1"><see cref="Android.Hardware.Sensor"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestTriggerSensor(Android.Hardware.TriggerEventListener arg0, Android.Hardware.Sensor arg1)
        {
            return IExecuteWithSignature<bool>("requestTriggerSensor", "(Landroid/hardware/TriggerEventListener;Landroid/hardware/Sensor;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#getSensors()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetSensors()
        {
            return IExecuteWithSignature<int>("getSensors", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#getDynamicSensorList(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Hardware.Sensor> GetDynamicSensorList(int arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Hardware.Sensor>>("getDynamicSensorList", "(I)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#getSensorList(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Hardware.Sensor> GetSensorList(int arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Hardware.Sensor>>("getSensorList", "(I)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#registerDynamicSensorCallback(android.hardware.SensorManager.DynamicSensorCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.SensorManager.DynamicSensorCallback"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void RegisterDynamicSensorCallback(Android.Hardware.SensorManager.DynamicSensorCallback arg0, Android.Os.Handler arg1)
        {
            IExecuteWithSignature("registerDynamicSensorCallback", "(Landroid/hardware/SensorManager$DynamicSensorCallback;Landroid/os/Handler;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#registerDynamicSensorCallback(android.hardware.SensorManager.DynamicSensorCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.SensorManager.DynamicSensorCallback"/></param>
        public void RegisterDynamicSensorCallback(Android.Hardware.SensorManager.DynamicSensorCallback arg0)
        {
            IExecuteWithSignature("registerDynamicSensorCallback", "(Landroid/hardware/SensorManager$DynamicSensorCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#unregisterDynamicSensorCallback(android.hardware.SensorManager.DynamicSensorCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.SensorManager.DynamicSensorCallback"/></param>
        public void UnregisterDynamicSensorCallback(Android.Hardware.SensorManager.DynamicSensorCallback arg0)
        {
            IExecuteWithSignature("unregisterDynamicSensorCallback", "(Landroid/hardware/SensorManager$DynamicSensorCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.SensorEventListener"/></param>
        /// <param name="arg1"><see cref="Android.Hardware.Sensor"/></param>
        public void UnregisterListener(Android.Hardware.SensorEventListener arg0, Android.Hardware.Sensor arg1)
        {
            IExecuteWithSignature("unregisterListener", "(Landroid/hardware/SensorEventListener;Landroid/hardware/Sensor;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#unregisterListener(android.hardware.SensorEventListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.SensorEventListener"/></param>
        public void UnregisterListener(Android.Hardware.SensorEventListener arg0)
        {
            IExecuteWithSignature("unregisterListener", "(Landroid/hardware/SensorEventListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#unregisterListener(android.hardware.SensorListener,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.SensorListener"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void UnregisterListener(Android.Hardware.SensorListener arg0, int arg1)
        {
            IExecuteWithSignature("unregisterListener", "(Landroid/hardware/SensorListener;I)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.html#unregisterListener(android.hardware.SensorListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Hardware.SensorListener"/></param>
        [global::System.Obsolete()]
        public void UnregisterListener(Android.Hardware.SensorListener arg0)
        {
            IExecuteWithSignature("unregisterListener", "(Landroid/hardware/SensorListener;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region DynamicSensorCallback implementation
        public partial class DynamicSensorCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.DynamicSensorCallback.html#onDynamicSensorConnected(android.hardware.Sensor)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Hardware.Sensor"/></param>
            public void OnDynamicSensorConnected(Android.Hardware.Sensor arg0)
            {
                IExecuteWithSignature("onDynamicSensorConnected", "(Landroid/hardware/Sensor;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/hardware/SensorManager.DynamicSensorCallback.html#onDynamicSensorDisconnected(android.hardware.Sensor)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Hardware.Sensor"/></param>
            public void OnDynamicSensorDisconnected(Android.Hardware.Sensor arg0)
            {
                IExecuteWithSignature("onDynamicSensorDisconnected", "(Landroid/hardware/Sensor;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
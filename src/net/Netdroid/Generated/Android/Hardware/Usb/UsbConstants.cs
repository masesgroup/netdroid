/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Hardware.Usb
{
    #region UsbConstants
    public partial class UsbConstants
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_APP_SPEC"/>
        /// </summary>
        public static int USB_CLASS_APP_SPEC { get { if (!_USB_CLASS_APP_SPECReady) { _USB_CLASS_APP_SPECContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_APP_SPEC"); _USB_CLASS_APP_SPECReady = true; } return _USB_CLASS_APP_SPECContent; } }
        private static int _USB_CLASS_APP_SPECContent = default;
        private static bool _USB_CLASS_APP_SPECReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_AUDIO"/>
        /// </summary>
        public static int USB_CLASS_AUDIO { get { if (!_USB_CLASS_AUDIOReady) { _USB_CLASS_AUDIOContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_AUDIO"); _USB_CLASS_AUDIOReady = true; } return _USB_CLASS_AUDIOContent; } }
        private static int _USB_CLASS_AUDIOContent = default;
        private static bool _USB_CLASS_AUDIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_CDC_DATA"/>
        /// </summary>
        public static int USB_CLASS_CDC_DATA { get { if (!_USB_CLASS_CDC_DATAReady) { _USB_CLASS_CDC_DATAContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_CDC_DATA"); _USB_CLASS_CDC_DATAReady = true; } return _USB_CLASS_CDC_DATAContent; } }
        private static int _USB_CLASS_CDC_DATAContent = default;
        private static bool _USB_CLASS_CDC_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_COMM"/>
        /// </summary>
        public static int USB_CLASS_COMM { get { if (!_USB_CLASS_COMMReady) { _USB_CLASS_COMMContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_COMM"); _USB_CLASS_COMMReady = true; } return _USB_CLASS_COMMContent; } }
        private static int _USB_CLASS_COMMContent = default;
        private static bool _USB_CLASS_COMMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_CONTENT_SEC"/>
        /// </summary>
        public static int USB_CLASS_CONTENT_SEC { get { if (!_USB_CLASS_CONTENT_SECReady) { _USB_CLASS_CONTENT_SECContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_CONTENT_SEC"); _USB_CLASS_CONTENT_SECReady = true; } return _USB_CLASS_CONTENT_SECContent; } }
        private static int _USB_CLASS_CONTENT_SECContent = default;
        private static bool _USB_CLASS_CONTENT_SECReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_CSCID"/>
        /// </summary>
        public static int USB_CLASS_CSCID { get { if (!_USB_CLASS_CSCIDReady) { _USB_CLASS_CSCIDContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_CSCID"); _USB_CLASS_CSCIDReady = true; } return _USB_CLASS_CSCIDContent; } }
        private static int _USB_CLASS_CSCIDContent = default;
        private static bool _USB_CLASS_CSCIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_HID"/>
        /// </summary>
        public static int USB_CLASS_HID { get { if (!_USB_CLASS_HIDReady) { _USB_CLASS_HIDContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_HID"); _USB_CLASS_HIDReady = true; } return _USB_CLASS_HIDContent; } }
        private static int _USB_CLASS_HIDContent = default;
        private static bool _USB_CLASS_HIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_HUB"/>
        /// </summary>
        public static int USB_CLASS_HUB { get { if (!_USB_CLASS_HUBReady) { _USB_CLASS_HUBContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_HUB"); _USB_CLASS_HUBReady = true; } return _USB_CLASS_HUBContent; } }
        private static int _USB_CLASS_HUBContent = default;
        private static bool _USB_CLASS_HUBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_MASS_STORAGE"/>
        /// </summary>
        public static int USB_CLASS_MASS_STORAGE { get { if (!_USB_CLASS_MASS_STORAGEReady) { _USB_CLASS_MASS_STORAGEContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_MASS_STORAGE"); _USB_CLASS_MASS_STORAGEReady = true; } return _USB_CLASS_MASS_STORAGEContent; } }
        private static int _USB_CLASS_MASS_STORAGEContent = default;
        private static bool _USB_CLASS_MASS_STORAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_MISC"/>
        /// </summary>
        public static int USB_CLASS_MISC { get { if (!_USB_CLASS_MISCReady) { _USB_CLASS_MISCContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_MISC"); _USB_CLASS_MISCReady = true; } return _USB_CLASS_MISCContent; } }
        private static int _USB_CLASS_MISCContent = default;
        private static bool _USB_CLASS_MISCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_PER_INTERFACE"/>
        /// </summary>
        public static int USB_CLASS_PER_INTERFACE { get { if (!_USB_CLASS_PER_INTERFACEReady) { _USB_CLASS_PER_INTERFACEContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_PER_INTERFACE"); _USB_CLASS_PER_INTERFACEReady = true; } return _USB_CLASS_PER_INTERFACEContent; } }
        private static int _USB_CLASS_PER_INTERFACEContent = default;
        private static bool _USB_CLASS_PER_INTERFACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_PHYSICA"/>
        /// </summary>
        public static int USB_CLASS_PHYSICA { get { if (!_USB_CLASS_PHYSICAReady) { _USB_CLASS_PHYSICAContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_PHYSICA"); _USB_CLASS_PHYSICAReady = true; } return _USB_CLASS_PHYSICAContent; } }
        private static int _USB_CLASS_PHYSICAContent = default;
        private static bool _USB_CLASS_PHYSICAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_PRINTER"/>
        /// </summary>
        public static int USB_CLASS_PRINTER { get { if (!_USB_CLASS_PRINTERReady) { _USB_CLASS_PRINTERContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_PRINTER"); _USB_CLASS_PRINTERReady = true; } return _USB_CLASS_PRINTERContent; } }
        private static int _USB_CLASS_PRINTERContent = default;
        private static bool _USB_CLASS_PRINTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_STILL_IMAGE"/>
        /// </summary>
        public static int USB_CLASS_STILL_IMAGE { get { if (!_USB_CLASS_STILL_IMAGEReady) { _USB_CLASS_STILL_IMAGEContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_STILL_IMAGE"); _USB_CLASS_STILL_IMAGEReady = true; } return _USB_CLASS_STILL_IMAGEContent; } }
        private static int _USB_CLASS_STILL_IMAGEContent = default;
        private static bool _USB_CLASS_STILL_IMAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_VENDOR_SPEC"/>
        /// </summary>
        public static int USB_CLASS_VENDOR_SPEC { get { if (!_USB_CLASS_VENDOR_SPECReady) { _USB_CLASS_VENDOR_SPECContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_VENDOR_SPEC"); _USB_CLASS_VENDOR_SPECReady = true; } return _USB_CLASS_VENDOR_SPECContent; } }
        private static int _USB_CLASS_VENDOR_SPECContent = default;
        private static bool _USB_CLASS_VENDOR_SPECReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_VIDEO"/>
        /// </summary>
        public static int USB_CLASS_VIDEO { get { if (!_USB_CLASS_VIDEOReady) { _USB_CLASS_VIDEOContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_VIDEO"); _USB_CLASS_VIDEOReady = true; } return _USB_CLASS_VIDEOContent; } }
        private static int _USB_CLASS_VIDEOContent = default;
        private static bool _USB_CLASS_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_CLASS_WIRELESS_CONTROLLER"/>
        /// </summary>
        public static int USB_CLASS_WIRELESS_CONTROLLER { get { if (!_USB_CLASS_WIRELESS_CONTROLLERReady) { _USB_CLASS_WIRELESS_CONTROLLERContent = SGetField<int>(LocalBridgeClazz, "USB_CLASS_WIRELESS_CONTROLLER"); _USB_CLASS_WIRELESS_CONTROLLERReady = true; } return _USB_CLASS_WIRELESS_CONTROLLERContent; } }
        private static int _USB_CLASS_WIRELESS_CONTROLLERContent = default;
        private static bool _USB_CLASS_WIRELESS_CONTROLLERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_DIR_IN"/>
        /// </summary>
        public static int USB_DIR_IN { get { if (!_USB_DIR_INReady) { _USB_DIR_INContent = SGetField<int>(LocalBridgeClazz, "USB_DIR_IN"); _USB_DIR_INReady = true; } return _USB_DIR_INContent; } }
        private static int _USB_DIR_INContent = default;
        private static bool _USB_DIR_INReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_DIR_OUT"/>
        /// </summary>
        public static int USB_DIR_OUT { get { if (!_USB_DIR_OUTReady) { _USB_DIR_OUTContent = SGetField<int>(LocalBridgeClazz, "USB_DIR_OUT"); _USB_DIR_OUTReady = true; } return _USB_DIR_OUTContent; } }
        private static int _USB_DIR_OUTContent = default;
        private static bool _USB_DIR_OUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_ENDPOINT_DIR_MASK"/>
        /// </summary>
        public static int USB_ENDPOINT_DIR_MASK { get { if (!_USB_ENDPOINT_DIR_MASKReady) { _USB_ENDPOINT_DIR_MASKContent = SGetField<int>(LocalBridgeClazz, "USB_ENDPOINT_DIR_MASK"); _USB_ENDPOINT_DIR_MASKReady = true; } return _USB_ENDPOINT_DIR_MASKContent; } }
        private static int _USB_ENDPOINT_DIR_MASKContent = default;
        private static bool _USB_ENDPOINT_DIR_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_ENDPOINT_NUMBER_MASK"/>
        /// </summary>
        public static int USB_ENDPOINT_NUMBER_MASK { get { if (!_USB_ENDPOINT_NUMBER_MASKReady) { _USB_ENDPOINT_NUMBER_MASKContent = SGetField<int>(LocalBridgeClazz, "USB_ENDPOINT_NUMBER_MASK"); _USB_ENDPOINT_NUMBER_MASKReady = true; } return _USB_ENDPOINT_NUMBER_MASKContent; } }
        private static int _USB_ENDPOINT_NUMBER_MASKContent = default;
        private static bool _USB_ENDPOINT_NUMBER_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_ENDPOINT_XFER_BULK"/>
        /// </summary>
        public static int USB_ENDPOINT_XFER_BULK { get { if (!_USB_ENDPOINT_XFER_BULKReady) { _USB_ENDPOINT_XFER_BULKContent = SGetField<int>(LocalBridgeClazz, "USB_ENDPOINT_XFER_BULK"); _USB_ENDPOINT_XFER_BULKReady = true; } return _USB_ENDPOINT_XFER_BULKContent; } }
        private static int _USB_ENDPOINT_XFER_BULKContent = default;
        private static bool _USB_ENDPOINT_XFER_BULKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_ENDPOINT_XFER_CONTROL"/>
        /// </summary>
        public static int USB_ENDPOINT_XFER_CONTROL { get { if (!_USB_ENDPOINT_XFER_CONTROLReady) { _USB_ENDPOINT_XFER_CONTROLContent = SGetField<int>(LocalBridgeClazz, "USB_ENDPOINT_XFER_CONTROL"); _USB_ENDPOINT_XFER_CONTROLReady = true; } return _USB_ENDPOINT_XFER_CONTROLContent; } }
        private static int _USB_ENDPOINT_XFER_CONTROLContent = default;
        private static bool _USB_ENDPOINT_XFER_CONTROLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_ENDPOINT_XFER_INT"/>
        /// </summary>
        public static int USB_ENDPOINT_XFER_INT { get { if (!_USB_ENDPOINT_XFER_INTReady) { _USB_ENDPOINT_XFER_INTContent = SGetField<int>(LocalBridgeClazz, "USB_ENDPOINT_XFER_INT"); _USB_ENDPOINT_XFER_INTReady = true; } return _USB_ENDPOINT_XFER_INTContent; } }
        private static int _USB_ENDPOINT_XFER_INTContent = default;
        private static bool _USB_ENDPOINT_XFER_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_ENDPOINT_XFER_ISOC"/>
        /// </summary>
        public static int USB_ENDPOINT_XFER_ISOC { get { if (!_USB_ENDPOINT_XFER_ISOCReady) { _USB_ENDPOINT_XFER_ISOCContent = SGetField<int>(LocalBridgeClazz, "USB_ENDPOINT_XFER_ISOC"); _USB_ENDPOINT_XFER_ISOCReady = true; } return _USB_ENDPOINT_XFER_ISOCContent; } }
        private static int _USB_ENDPOINT_XFER_ISOCContent = default;
        private static bool _USB_ENDPOINT_XFER_ISOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_ENDPOINT_XFERTYPE_MASK"/>
        /// </summary>
        public static int USB_ENDPOINT_XFERTYPE_MASK { get { if (!_USB_ENDPOINT_XFERTYPE_MASKReady) { _USB_ENDPOINT_XFERTYPE_MASKContent = SGetField<int>(LocalBridgeClazz, "USB_ENDPOINT_XFERTYPE_MASK"); _USB_ENDPOINT_XFERTYPE_MASKReady = true; } return _USB_ENDPOINT_XFERTYPE_MASKContent; } }
        private static int _USB_ENDPOINT_XFERTYPE_MASKContent = default;
        private static bool _USB_ENDPOINT_XFERTYPE_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_INTERFACE_SUBCLASS_BOOT"/>
        /// </summary>
        public static int USB_INTERFACE_SUBCLASS_BOOT { get { if (!_USB_INTERFACE_SUBCLASS_BOOTReady) { _USB_INTERFACE_SUBCLASS_BOOTContent = SGetField<int>(LocalBridgeClazz, "USB_INTERFACE_SUBCLASS_BOOT"); _USB_INTERFACE_SUBCLASS_BOOTReady = true; } return _USB_INTERFACE_SUBCLASS_BOOTContent; } }
        private static int _USB_INTERFACE_SUBCLASS_BOOTContent = default;
        private static bool _USB_INTERFACE_SUBCLASS_BOOTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_SUBCLASS_VENDOR_SPEC"/>
        /// </summary>
        public static int USB_SUBCLASS_VENDOR_SPEC { get { if (!_USB_SUBCLASS_VENDOR_SPECReady) { _USB_SUBCLASS_VENDOR_SPECContent = SGetField<int>(LocalBridgeClazz, "USB_SUBCLASS_VENDOR_SPEC"); _USB_SUBCLASS_VENDOR_SPECReady = true; } return _USB_SUBCLASS_VENDOR_SPECContent; } }
        private static int _USB_SUBCLASS_VENDOR_SPECContent = default;
        private static bool _USB_SUBCLASS_VENDOR_SPECReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_TYPE_CLASS"/>
        /// </summary>
        public static int USB_TYPE_CLASS { get { if (!_USB_TYPE_CLASSReady) { _USB_TYPE_CLASSContent = SGetField<int>(LocalBridgeClazz, "USB_TYPE_CLASS"); _USB_TYPE_CLASSReady = true; } return _USB_TYPE_CLASSContent; } }
        private static int _USB_TYPE_CLASSContent = default;
        private static bool _USB_TYPE_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_TYPE_MASK"/>
        /// </summary>
        public static int USB_TYPE_MASK { get { if (!_USB_TYPE_MASKReady) { _USB_TYPE_MASKContent = SGetField<int>(LocalBridgeClazz, "USB_TYPE_MASK"); _USB_TYPE_MASKReady = true; } return _USB_TYPE_MASKContent; } }
        private static int _USB_TYPE_MASKContent = default;
        private static bool _USB_TYPE_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_TYPE_RESERVED"/>
        /// </summary>
        public static int USB_TYPE_RESERVED { get { if (!_USB_TYPE_RESERVEDReady) { _USB_TYPE_RESERVEDContent = SGetField<int>(LocalBridgeClazz, "USB_TYPE_RESERVED"); _USB_TYPE_RESERVEDReady = true; } return _USB_TYPE_RESERVEDContent; } }
        private static int _USB_TYPE_RESERVEDContent = default;
        private static bool _USB_TYPE_RESERVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_TYPE_STANDARD"/>
        /// </summary>
        public static int USB_TYPE_STANDARD { get { if (!_USB_TYPE_STANDARDReady) { _USB_TYPE_STANDARDContent = SGetField<int>(LocalBridgeClazz, "USB_TYPE_STANDARD"); _USB_TYPE_STANDARDReady = true; } return _USB_TYPE_STANDARDContent; } }
        private static int _USB_TYPE_STANDARDContent = default;
        private static bool _USB_TYPE_STANDARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/hardware/usb/UsbConstants.html#USB_TYPE_VENDOR"/>
        /// </summary>
        public static int USB_TYPE_VENDOR { get { if (!_USB_TYPE_VENDORReady) { _USB_TYPE_VENDORContent = SGetField<int>(LocalBridgeClazz, "USB_TYPE_VENDOR"); _USB_TYPE_VENDORReady = true; } return _USB_TYPE_VENDORContent; } }
        private static int _USB_TYPE_VENDORContent = default;
        private static bool _USB_TYPE_VENDORReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
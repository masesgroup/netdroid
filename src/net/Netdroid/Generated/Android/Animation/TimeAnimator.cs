/*
*  Copyright (c) 2024-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Animation
{
    #region TimeAnimator declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/animation/TimeAnimator.html"/>
    /// </summary>
    public partial class TimeAnimator : Android.Animation.ValueAnimator
    {
        const string _bridgeClassName = "android.animation.TimeAnimator";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public TimeAnimator() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public TimeAnimator(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public TimeAnimator(params object[] args) : base(args) { }
    
        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region TimeListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/TimeAnimator.TimeListener.html"/>
        /// </summary>
        public partial class TimeListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TimeListener() { InitializeHandlers(); }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public TimeListener(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TimeListener(params object[] args) : base(args) { InitializeHandlers(); }
            const string _bridgeClassName = "org.mases.netdroid.generated.android.animation.TimeAnimator_TimeListener";
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <inheritdoc />
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region TimeListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="TimeListener"/> or its generic type if there is one
        /// </summary>
        public partial class TimeListenerDirect : TimeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TimeListenerDirect() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public TimeListenerDirect(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        
            /// <inheritdoc/>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.animation.TimeAnimator$TimeListener";
            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => true;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => true;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;
        }
        #endregion

    
    }
    #endregion

    #region TimeAnimator implementation
    public partial class TimeAnimator
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/TimeAnimator.html#setTimeListener(android.animation.TimeAnimator.TimeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Animation.TimeAnimator.TimeListener"/></param>
        public void SetTimeListener(Android.Animation.TimeAnimator.TimeListener arg0)
        {
            IExecuteWithSignature("setTimeListener", "(Landroid/animation/TimeAnimator$TimeListener;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region TimeListener implementation
        public partial class TimeListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="TimeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onTimeUpdate", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnTimeUpdateEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/animation/TimeAnimator.TimeListener.html#onTimeUpdate(android.animation.TimeAnimator,long,long)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnTimeUpdate"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Animation.TimeAnimator, long, long> OnOnTimeUpdate { get; set; } = null;
            
            bool hasOverrideOnTimeUpdate = true;
            void OnTimeUpdateEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnTimeUpdate = true;
                var methodToExecute = (OnOnTimeUpdate != null) ? OnOnTimeUpdate : OnTimeUpdate;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Animation.TimeAnimator>(0), data.EventData.GetAt<long>(1), data.EventData.GetAt<long>(2));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnTimeUpdate;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/animation/TimeAnimator.TimeListener.html#onTimeUpdate(android.animation.TimeAnimator,long,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Animation.TimeAnimator"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            public virtual void OnTimeUpdate(Android.Animation.TimeAnimator arg0, long arg1, long arg2)
            {
                hasOverrideOnTimeUpdate = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region TimeListenerDirect implementation
        public partial class TimeListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/animation/TimeAnimator.TimeListener.html#onTimeUpdate(android.animation.TimeAnimator,long,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Animation.TimeAnimator"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            public override void OnTimeUpdate(Android.Animation.TimeAnimator arg0, long arg1, long arg2)
            {
                IExecuteWithSignature("onTimeUpdate", "(Landroid/animation/TimeAnimator;JJ)V", arg0, arg1, arg2);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
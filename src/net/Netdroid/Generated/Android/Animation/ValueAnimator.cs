/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Animation
{
    #region ValueAnimator
    public partial class ValueAnimator
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#INFINITE"/>
        /// </summary>
        public static int INFINITE { get { if (!_INFINITEReady) { _INFINITEContent = SGetField<int>(LocalBridgeClazz, "INFINITE"); _INFINITEReady = true; } return _INFINITEContent; } }
        private static int _INFINITEContent = default;
        private static bool _INFINITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#RESTART"/>
        /// </summary>
        public static int RESTART { get { if (!_RESTARTReady) { _RESTARTContent = SGetField<int>(LocalBridgeClazz, "RESTART"); _RESTARTReady = true; } return _RESTARTContent; } }
        private static int _RESTARTContent = default;
        private static bool _RESTARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#REVERSE"/>
        /// </summary>
        public static int REVERSE { get { if (!_REVERSEReady) { _REVERSEContent = SGetField<int>(LocalBridgeClazz, "REVERSE"); _REVERSEReady = true; } return _REVERSEContent; } }
        private static int _REVERSEContent = default;
        private static bool _REVERSEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#ofArgb(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Animation.ValueAnimator"/></returns>
        public static Android.Animation.ValueAnimator OfArgb(params int[] arg0)
        {
            if (arg0.Length == 0) return SExecuteWithSignature<Android.Animation.ValueAnimator>(LocalBridgeClazz, "ofArgb", "([I)Landroid/animation/ValueAnimator;"); else return SExecuteWithSignature<Android.Animation.ValueAnimator>(LocalBridgeClazz, "ofArgb", "([I)Landroid/animation/ValueAnimator;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#ofFloat(float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <returns><see cref="Android.Animation.ValueAnimator"/></returns>
        public static Android.Animation.ValueAnimator OfFloat(params float[] arg0)
        {
            if (arg0.Length == 0) return SExecuteWithSignature<Android.Animation.ValueAnimator>(LocalBridgeClazz, "ofFloat", "([F)Landroid/animation/ValueAnimator;"); else return SExecuteWithSignature<Android.Animation.ValueAnimator>(LocalBridgeClazz, "ofFloat", "([F)Landroid/animation/ValueAnimator;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#ofInt(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Animation.ValueAnimator"/></returns>
        public static Android.Animation.ValueAnimator OfInt(params int[] arg0)
        {
            if (arg0.Length == 0) return SExecuteWithSignature<Android.Animation.ValueAnimator>(LocalBridgeClazz, "ofInt", "([I)Landroid/animation/ValueAnimator;"); else return SExecuteWithSignature<Android.Animation.ValueAnimator>(LocalBridgeClazz, "ofInt", "([I)Landroid/animation/ValueAnimator;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#ofObject(android.animation.TypeEvaluator,java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Animation.TypeEvaluator"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <returns><see cref="Android.Animation.ValueAnimator"/></returns>
        public static Android.Animation.ValueAnimator OfObject(Android.Animation.TypeEvaluator arg0, params object[] arg1)
        {
            if (arg1.Length == 0) return SExecute<Android.Animation.ValueAnimator>(LocalBridgeClazz, "ofObject", arg0); else return SExecute<Android.Animation.ValueAnimator>(LocalBridgeClazz, "ofObject", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#ofPropertyValuesHolder(android.animation.PropertyValuesHolder[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Animation.PropertyValuesHolder"/></param>
        /// <returns><see cref="Android.Animation.ValueAnimator"/></returns>
        public static Android.Animation.ValueAnimator OfPropertyValuesHolder(params Android.Animation.PropertyValuesHolder[] arg0)
        {
            if (arg0.Length == 0) return SExecuteWithSignature<Android.Animation.ValueAnimator>(LocalBridgeClazz, "ofPropertyValuesHolder", "([Landroid/animation/PropertyValuesHolder;)Landroid/animation/ValueAnimator;"); else return SExecuteWithSignature<Android.Animation.ValueAnimator>(LocalBridgeClazz, "ofPropertyValuesHolder", "([Landroid/animation/PropertyValuesHolder;)Landroid/animation/ValueAnimator;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#areAnimatorsEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public static bool AreAnimatorsEnabled()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "areAnimatorsEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#registerDurationScaleChangeListener(android.animation.ValueAnimator.DurationScaleChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Animation.ValueAnimator.DurationScaleChangeListener"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool RegisterDurationScaleChangeListener(Android.Animation.ValueAnimator.DurationScaleChangeListener arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "registerDurationScaleChangeListener", "(Landroid/animation/ValueAnimator$DurationScaleChangeListener;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#unregisterDurationScaleChangeListener(android.animation.ValueAnimator.DurationScaleChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Animation.ValueAnimator.DurationScaleChangeListener"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool UnregisterDurationScaleChangeListener(Android.Animation.ValueAnimator.DurationScaleChangeListener arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "unregisterDurationScaleChangeListener", "(Landroid/animation/ValueAnimator$DurationScaleChangeListener;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#getDurationScale()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public static float GetDurationScale()
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "getDurationScale", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#getFrameDelay()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public static long GetFrameDelay()
        {
            return SExecuteWithSignature<long>(LocalBridgeClazz, "getFrameDelay", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#setFrameDelay(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public static void SetFrameDelay(long arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "setFrameDelay", "(J)V", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#getValues()"/>
        /// </summary>
        /// <returns><see cref="Android.Animation.PropertyValuesHolder"/></returns>
        public Android.Animation.PropertyValuesHolder[] GetValues()
        {
            return IExecuteWithSignatureArray<Android.Animation.PropertyValuesHolder>("getValues", "()[Landroid/animation/PropertyValuesHolder;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#getAnimatedFraction()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetAnimatedFraction()
        {
            return IExecuteWithSignature<float>("getAnimatedFraction", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#getRepeatCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRepeatCount()
        {
            return IExecuteWithSignature<int>("getRepeatCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#getRepeatMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRepeatMode()
        {
            return IExecuteWithSignature<int>("getRepeatMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#getAnimatedValue()"/>
        /// </summary>
        /// <returns><see cref="object"/></returns>
        public object GetAnimatedValue()
        {
            return IExecuteWithSignature("getAnimatedValue", "()Ljava/lang/Object;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#getAnimatedValue(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAnimatedValue(Java.Lang.String arg0)
        {
            return IExecuteWithSignature("getAnimatedValue", "(Ljava/lang/String;)Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#getCurrentPlayTime()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetCurrentPlayTime()
        {
            return IExecuteWithSignature<long>("getCurrentPlayTime", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#addUpdateListener(android.animation.ValueAnimator.AnimatorUpdateListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Animation.ValueAnimator.AnimatorUpdateListener"/></param>
        public void AddUpdateListener(Android.Animation.ValueAnimator.AnimatorUpdateListener arg0)
        {
            IExecuteWithSignature("addUpdateListener", "(Landroid/animation/ValueAnimator$AnimatorUpdateListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#removeAllUpdateListeners()"/>
        /// </summary>
        public void RemoveAllUpdateListeners()
        {
            IExecuteWithSignature("removeAllUpdateListeners", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#removeUpdateListener(android.animation.ValueAnimator.AnimatorUpdateListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Animation.ValueAnimator.AnimatorUpdateListener"/></param>
        public void RemoveUpdateListener(Android.Animation.ValueAnimator.AnimatorUpdateListener arg0)
        {
            IExecuteWithSignature("removeUpdateListener", "(Landroid/animation/ValueAnimator$AnimatorUpdateListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#reverse()"/>
        /// </summary>
        public void Reverse()
        {
            IExecuteWithSignature("reverse", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#setCurrentFraction(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetCurrentFraction(float arg0)
        {
            IExecuteWithSignature("setCurrentFraction", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#setCurrentPlayTime(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void SetCurrentPlayTime(long arg0)
        {
            IExecuteWithSignature("setCurrentPlayTime", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#setEvaluator(android.animation.TypeEvaluator)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Animation.TypeEvaluator"/></param>
        public void SetEvaluator(Android.Animation.TypeEvaluator arg0)
        {
            IExecuteWithSignature("setEvaluator", "(Landroid/animation/TypeEvaluator;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#setFloatValues(float[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetFloatValues(params float[] arg0)
        {
            if (arg0.Length == 0) IExecuteWithSignature("setFloatValues", "([F)V"); else IExecuteWithSignature("setFloatValues", "([F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#setIntValues(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetIntValues(params int[] arg0)
        {
            if (arg0.Length == 0) IExecuteWithSignature("setIntValues", "([I)V"); else IExecuteWithSignature("setIntValues", "([I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#setObjectValues(java.lang.Object[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        public void SetObjectValues(params object[] arg0)
        {
            if (arg0.Length == 0) IExecuteWithSignature("setObjectValues", "([Ljava/lang/Object;)V"); else IExecuteWithSignature("setObjectValues", "([Ljava/lang/Object;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#setRepeatCount(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetRepeatCount(int arg0)
        {
            IExecuteWithSignature("setRepeatCount", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#setRepeatMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetRepeatMode(int arg0)
        {
            IExecuteWithSignature("setRepeatMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.html#setValues(android.animation.PropertyValuesHolder[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Animation.PropertyValuesHolder"/></param>
        public void SetValues(params Android.Animation.PropertyValuesHolder[] arg0)
        {
            if (arg0.Length == 0) IExecuteWithSignature("setValues", "([Landroid/animation/PropertyValuesHolder;)V"); else IExecuteWithSignature("setValues", "([Landroid/animation/PropertyValuesHolder;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region AnimatorUpdateListener
        public partial class AnimatorUpdateListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="AnimatorUpdateListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onAnimationUpdate", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Animation.ValueAnimator>>>(OnAnimationUpdateEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/animation/ValueAnimator.AnimatorUpdateListener.html#onAnimationUpdate(android.animation.ValueAnimator)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnAnimationUpdate"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Animation.ValueAnimator> OnOnAnimationUpdate { get; set; } = null;

            void OnAnimationUpdateEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Animation.ValueAnimator>> data)
            {
                var methodToExecute = (OnOnAnimationUpdate != null) ? OnOnAnimationUpdate : OnAnimationUpdate;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.AnimatorUpdateListener.html#onAnimationUpdate(android.animation.ValueAnimator)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Animation.ValueAnimator"/></param>
            public virtual void OnAnimationUpdate(Android.Animation.ValueAnimator arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region AnimatorUpdateListenerDirect
        public partial class AnimatorUpdateListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.AnimatorUpdateListener.html#onAnimationUpdate(android.animation.ValueAnimator)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Animation.ValueAnimator"/></param>
            public override void OnAnimationUpdate(Android.Animation.ValueAnimator arg0)
            {
                IExecuteWithSignature("onAnimationUpdate", "(Landroid/animation/ValueAnimator;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DurationScaleChangeListener
        public partial class DurationScaleChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="DurationScaleChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<float>>>(OnChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/animation/ValueAnimator.DurationScaleChangeListener.html#onChanged(float)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<float> OnOnChanged { get; set; } = null;

            void OnChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<float>> data)
            {
                var methodToExecute = (OnOnChanged != null) ? OnOnChanged : OnChanged;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.DurationScaleChangeListener.html#onChanged(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public virtual void OnChanged(float arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DurationScaleChangeListenerDirect
        public partial class DurationScaleChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/animation/ValueAnimator.DurationScaleChangeListener.html#onChanged(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public override void OnChanged(float arg0)
            {
                IExecuteWithSignature("onChanged", "(F)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
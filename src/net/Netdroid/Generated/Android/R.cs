/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android
{
    #region R
    public partial class R
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region anim
        public partial class anim
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.anim.html#accelerate_decelerate_interpolator"/>
            /// </summary>
            public static int accelerate_decelerate_interpolator { get { if (!_accelerate_decelerate_interpolatorReady) { _accelerate_decelerate_interpolatorContent = SGetField<int>(LocalBridgeClazz, "accelerate_decelerate_interpolator"); _accelerate_decelerate_interpolatorReady = true; } return _accelerate_decelerate_interpolatorContent; } }
            private static int _accelerate_decelerate_interpolatorContent = default;
            private static bool _accelerate_decelerate_interpolatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.anim.html#accelerate_interpolator"/>
            /// </summary>
            public static int accelerate_interpolator { get { if (!_accelerate_interpolatorReady) { _accelerate_interpolatorContent = SGetField<int>(LocalBridgeClazz, "accelerate_interpolator"); _accelerate_interpolatorReady = true; } return _accelerate_interpolatorContent; } }
            private static int _accelerate_interpolatorContent = default;
            private static bool _accelerate_interpolatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.anim.html#anticipate_interpolator"/>
            /// </summary>
            public static int anticipate_interpolator { get { if (!_anticipate_interpolatorReady) { _anticipate_interpolatorContent = SGetField<int>(LocalBridgeClazz, "anticipate_interpolator"); _anticipate_interpolatorReady = true; } return _anticipate_interpolatorContent; } }
            private static int _anticipate_interpolatorContent = default;
            private static bool _anticipate_interpolatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.anim.html#anticipate_overshoot_interpolator"/>
            /// </summary>
            public static int anticipate_overshoot_interpolator { get { if (!_anticipate_overshoot_interpolatorReady) { _anticipate_overshoot_interpolatorContent = SGetField<int>(LocalBridgeClazz, "anticipate_overshoot_interpolator"); _anticipate_overshoot_interpolatorReady = true; } return _anticipate_overshoot_interpolatorContent; } }
            private static int _anticipate_overshoot_interpolatorContent = default;
            private static bool _anticipate_overshoot_interpolatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.anim.html#bounce_interpolator"/>
            /// </summary>
            public static int bounce_interpolator { get { if (!_bounce_interpolatorReady) { _bounce_interpolatorContent = SGetField<int>(LocalBridgeClazz, "bounce_interpolator"); _bounce_interpolatorReady = true; } return _bounce_interpolatorContent; } }
            private static int _bounce_interpolatorContent = default;
            private static bool _bounce_interpolatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.anim.html#cycle_interpolator"/>
            /// </summary>
            public static int cycle_interpolator { get { if (!_cycle_interpolatorReady) { _cycle_interpolatorContent = SGetField<int>(LocalBridgeClazz, "cycle_interpolator"); _cycle_interpolatorReady = true; } return _cycle_interpolatorContent; } }
            private static int _cycle_interpolatorContent = default;
            private static bool _cycle_interpolatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.anim.html#decelerate_interpolator"/>
            /// </summary>
            public static int decelerate_interpolator { get { if (!_decelerate_interpolatorReady) { _decelerate_interpolatorContent = SGetField<int>(LocalBridgeClazz, "decelerate_interpolator"); _decelerate_interpolatorReady = true; } return _decelerate_interpolatorContent; } }
            private static int _decelerate_interpolatorContent = default;
            private static bool _decelerate_interpolatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.anim.html#fade_in"/>
            /// </summary>
            public static int fade_in { get { if (!_fade_inReady) { _fade_inContent = SGetField<int>(LocalBridgeClazz, "fade_in"); _fade_inReady = true; } return _fade_inContent; } }
            private static int _fade_inContent = default;
            private static bool _fade_inReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.anim.html#fade_out"/>
            /// </summary>
            public static int fade_out { get { if (!_fade_outReady) { _fade_outContent = SGetField<int>(LocalBridgeClazz, "fade_out"); _fade_outReady = true; } return _fade_outContent; } }
            private static int _fade_outContent = default;
            private static bool _fade_outReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.anim.html#linear_interpolator"/>
            /// </summary>
            public static int linear_interpolator { get { if (!_linear_interpolatorReady) { _linear_interpolatorContent = SGetField<int>(LocalBridgeClazz, "linear_interpolator"); _linear_interpolatorReady = true; } return _linear_interpolatorContent; } }
            private static int _linear_interpolatorContent = default;
            private static bool _linear_interpolatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.anim.html#overshoot_interpolator"/>
            /// </summary>
            public static int overshoot_interpolator { get { if (!_overshoot_interpolatorReady) { _overshoot_interpolatorContent = SGetField<int>(LocalBridgeClazz, "overshoot_interpolator"); _overshoot_interpolatorReady = true; } return _overshoot_interpolatorContent; } }
            private static int _overshoot_interpolatorContent = default;
            private static bool _overshoot_interpolatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.anim.html#slide_in_left"/>
            /// </summary>
            public static int slide_in_left { get { if (!_slide_in_leftReady) { _slide_in_leftContent = SGetField<int>(LocalBridgeClazz, "slide_in_left"); _slide_in_leftReady = true; } return _slide_in_leftContent; } }
            private static int _slide_in_leftContent = default;
            private static bool _slide_in_leftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.anim.html#slide_out_right"/>
            /// </summary>
            public static int slide_out_right { get { if (!_slide_out_rightReady) { _slide_out_rightContent = SGetField<int>(LocalBridgeClazz, "slide_out_right"); _slide_out_rightReady = true; } return _slide_out_rightContent; } }
            private static int _slide_out_rightContent = default;
            private static bool _slide_out_rightReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region animator
        public partial class animator
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.animator.html#fade_in"/>
            /// </summary>
            public static int fade_in { get { if (!_fade_inReady) { _fade_inContent = SGetField<int>(LocalBridgeClazz, "fade_in"); _fade_inReady = true; } return _fade_inContent; } }
            private static int _fade_inContent = default;
            private static bool _fade_inReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.animator.html#fade_out"/>
            /// </summary>
            public static int fade_out { get { if (!_fade_outReady) { _fade_outContent = SGetField<int>(LocalBridgeClazz, "fade_out"); _fade_outReady = true; } return _fade_outContent; } }
            private static int _fade_outContent = default;
            private static bool _fade_outReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region array
        public partial class array
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.array.html#emailAddressTypes"/>
            /// </summary>
            public static int emailAddressTypes { get { if (!_emailAddressTypesReady) { _emailAddressTypesContent = SGetField<int>(LocalBridgeClazz, "emailAddressTypes"); _emailAddressTypesReady = true; } return _emailAddressTypesContent; } }
            private static int _emailAddressTypesContent = default;
            private static bool _emailAddressTypesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.array.html#imProtocols"/>
            /// </summary>
            public static int imProtocols { get { if (!_imProtocolsReady) { _imProtocolsContent = SGetField<int>(LocalBridgeClazz, "imProtocols"); _imProtocolsReady = true; } return _imProtocolsContent; } }
            private static int _imProtocolsContent = default;
            private static bool _imProtocolsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.array.html#organizationTypes"/>
            /// </summary>
            public static int organizationTypes { get { if (!_organizationTypesReady) { _organizationTypesContent = SGetField<int>(LocalBridgeClazz, "organizationTypes"); _organizationTypesReady = true; } return _organizationTypesContent; } }
            private static int _organizationTypesContent = default;
            private static bool _organizationTypesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.array.html#phoneTypes"/>
            /// </summary>
            public static int phoneTypes { get { if (!_phoneTypesReady) { _phoneTypesContent = SGetField<int>(LocalBridgeClazz, "phoneTypes"); _phoneTypesReady = true; } return _phoneTypesContent; } }
            private static int _phoneTypesContent = default;
            private static bool _phoneTypesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.array.html#postalAddressTypes"/>
            /// </summary>
            public static int postalAddressTypes { get { if (!_postalAddressTypesReady) { _postalAddressTypesContent = SGetField<int>(LocalBridgeClazz, "postalAddressTypes"); _postalAddressTypesReady = true; } return _postalAddressTypesContent; } }
            private static int _postalAddressTypesContent = default;
            private static bool _postalAddressTypesReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region attr
        public partial class attr
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#absListViewStyle"/>
            /// </summary>
            public static int absListViewStyle { get { if (!_absListViewStyleReady) { _absListViewStyleContent = SGetField<int>(LocalBridgeClazz, "absListViewStyle"); _absListViewStyleReady = true; } return _absListViewStyleContent; } }
            private static int _absListViewStyleContent = default;
            private static bool _absListViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#accessibilityDataSensitive"/>
            /// </summary>
            public static int accessibilityDataSensitive { get { if (!_accessibilityDataSensitiveReady) { _accessibilityDataSensitiveContent = SGetField<int>(LocalBridgeClazz, "accessibilityDataSensitive"); _accessibilityDataSensitiveReady = true; } return _accessibilityDataSensitiveContent; } }
            private static int _accessibilityDataSensitiveContent = default;
            private static bool _accessibilityDataSensitiveReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#accessibilityEventTypes"/>
            /// </summary>
            public static int accessibilityEventTypes { get { if (!_accessibilityEventTypesReady) { _accessibilityEventTypesContent = SGetField<int>(LocalBridgeClazz, "accessibilityEventTypes"); _accessibilityEventTypesReady = true; } return _accessibilityEventTypesContent; } }
            private static int _accessibilityEventTypesContent = default;
            private static bool _accessibilityEventTypesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#accessibilityFeedbackType"/>
            /// </summary>
            public static int accessibilityFeedbackType { get { if (!_accessibilityFeedbackTypeReady) { _accessibilityFeedbackTypeContent = SGetField<int>(LocalBridgeClazz, "accessibilityFeedbackType"); _accessibilityFeedbackTypeReady = true; } return _accessibilityFeedbackTypeContent; } }
            private static int _accessibilityFeedbackTypeContent = default;
            private static bool _accessibilityFeedbackTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#accessibilityFlags"/>
            /// </summary>
            public static int accessibilityFlags { get { if (!_accessibilityFlagsReady) { _accessibilityFlagsContent = SGetField<int>(LocalBridgeClazz, "accessibilityFlags"); _accessibilityFlagsReady = true; } return _accessibilityFlagsContent; } }
            private static int _accessibilityFlagsContent = default;
            private static bool _accessibilityFlagsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#accessibilityHeading"/>
            /// </summary>
            public static int accessibilityHeading { get { if (!_accessibilityHeadingReady) { _accessibilityHeadingContent = SGetField<int>(LocalBridgeClazz, "accessibilityHeading"); _accessibilityHeadingReady = true; } return _accessibilityHeadingContent; } }
            private static int _accessibilityHeadingContent = default;
            private static bool _accessibilityHeadingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#accessibilityLiveRegion"/>
            /// </summary>
            public static int accessibilityLiveRegion { get { if (!_accessibilityLiveRegionReady) { _accessibilityLiveRegionContent = SGetField<int>(LocalBridgeClazz, "accessibilityLiveRegion"); _accessibilityLiveRegionReady = true; } return _accessibilityLiveRegionContent; } }
            private static int _accessibilityLiveRegionContent = default;
            private static bool _accessibilityLiveRegionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#accessibilityPaneTitle"/>
            /// </summary>
            public static int accessibilityPaneTitle { get { if (!_accessibilityPaneTitleReady) { _accessibilityPaneTitleContent = SGetField<int>(LocalBridgeClazz, "accessibilityPaneTitle"); _accessibilityPaneTitleReady = true; } return _accessibilityPaneTitleContent; } }
            private static int _accessibilityPaneTitleContent = default;
            private static bool _accessibilityPaneTitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#accessibilityTraversalAfter"/>
            /// </summary>
            public static int accessibilityTraversalAfter { get { if (!_accessibilityTraversalAfterReady) { _accessibilityTraversalAfterContent = SGetField<int>(LocalBridgeClazz, "accessibilityTraversalAfter"); _accessibilityTraversalAfterReady = true; } return _accessibilityTraversalAfterContent; } }
            private static int _accessibilityTraversalAfterContent = default;
            private static bool _accessibilityTraversalAfterReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#accessibilityTraversalBefore"/>
            /// </summary>
            public static int accessibilityTraversalBefore { get { if (!_accessibilityTraversalBeforeReady) { _accessibilityTraversalBeforeContent = SGetField<int>(LocalBridgeClazz, "accessibilityTraversalBefore"); _accessibilityTraversalBeforeReady = true; } return _accessibilityTraversalBeforeContent; } }
            private static int _accessibilityTraversalBeforeContent = default;
            private static bool _accessibilityTraversalBeforeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#accountPreferences"/>
            /// </summary>
            public static int accountPreferences { get { if (!_accountPreferencesReady) { _accountPreferencesContent = SGetField<int>(LocalBridgeClazz, "accountPreferences"); _accountPreferencesReady = true; } return _accountPreferencesContent; } }
            private static int _accountPreferencesContent = default;
            private static bool _accountPreferencesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#accountType"/>
            /// </summary>
            public static int accountType { get { if (!_accountTypeReady) { _accountTypeContent = SGetField<int>(LocalBridgeClazz, "accountType"); _accountTypeReady = true; } return _accountTypeContent; } }
            private static int _accountTypeContent = default;
            private static bool _accountTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#action"/>
            /// </summary>
            public static int action { get { if (!_actionReady) { _actionContent = SGetField<int>(LocalBridgeClazz, "action"); _actionReady = true; } return _actionContent; } }
            private static int _actionContent = default;
            private static bool _actionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionBarDivider"/>
            /// </summary>
            public static int actionBarDivider { get { if (!_actionBarDividerReady) { _actionBarDividerContent = SGetField<int>(LocalBridgeClazz, "actionBarDivider"); _actionBarDividerReady = true; } return _actionBarDividerContent; } }
            private static int _actionBarDividerContent = default;
            private static bool _actionBarDividerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionBarItemBackground"/>
            /// </summary>
            public static int actionBarItemBackground { get { if (!_actionBarItemBackgroundReady) { _actionBarItemBackgroundContent = SGetField<int>(LocalBridgeClazz, "actionBarItemBackground"); _actionBarItemBackgroundReady = true; } return _actionBarItemBackgroundContent; } }
            private static int _actionBarItemBackgroundContent = default;
            private static bool _actionBarItemBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionBarPopupTheme"/>
            /// </summary>
            public static int actionBarPopupTheme { get { if (!_actionBarPopupThemeReady) { _actionBarPopupThemeContent = SGetField<int>(LocalBridgeClazz, "actionBarPopupTheme"); _actionBarPopupThemeReady = true; } return _actionBarPopupThemeContent; } }
            private static int _actionBarPopupThemeContent = default;
            private static bool _actionBarPopupThemeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionBarSize"/>
            /// </summary>
            public static int actionBarSize { get { if (!_actionBarSizeReady) { _actionBarSizeContent = SGetField<int>(LocalBridgeClazz, "actionBarSize"); _actionBarSizeReady = true; } return _actionBarSizeContent; } }
            private static int _actionBarSizeContent = default;
            private static bool _actionBarSizeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionBarSplitStyle"/>
            /// </summary>
            public static int actionBarSplitStyle { get { if (!_actionBarSplitStyleReady) { _actionBarSplitStyleContent = SGetField<int>(LocalBridgeClazz, "actionBarSplitStyle"); _actionBarSplitStyleReady = true; } return _actionBarSplitStyleContent; } }
            private static int _actionBarSplitStyleContent = default;
            private static bool _actionBarSplitStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionBarStyle"/>
            /// </summary>
            public static int actionBarStyle { get { if (!_actionBarStyleReady) { _actionBarStyleContent = SGetField<int>(LocalBridgeClazz, "actionBarStyle"); _actionBarStyleReady = true; } return _actionBarStyleContent; } }
            private static int _actionBarStyleContent = default;
            private static bool _actionBarStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionBarTabBarStyle"/>
            /// </summary>
            public static int actionBarTabBarStyle { get { if (!_actionBarTabBarStyleReady) { _actionBarTabBarStyleContent = SGetField<int>(LocalBridgeClazz, "actionBarTabBarStyle"); _actionBarTabBarStyleReady = true; } return _actionBarTabBarStyleContent; } }
            private static int _actionBarTabBarStyleContent = default;
            private static bool _actionBarTabBarStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionBarTabStyle"/>
            /// </summary>
            public static int actionBarTabStyle { get { if (!_actionBarTabStyleReady) { _actionBarTabStyleContent = SGetField<int>(LocalBridgeClazz, "actionBarTabStyle"); _actionBarTabStyleReady = true; } return _actionBarTabStyleContent; } }
            private static int _actionBarTabStyleContent = default;
            private static bool _actionBarTabStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionBarTabTextStyle"/>
            /// </summary>
            public static int actionBarTabTextStyle { get { if (!_actionBarTabTextStyleReady) { _actionBarTabTextStyleContent = SGetField<int>(LocalBridgeClazz, "actionBarTabTextStyle"); _actionBarTabTextStyleReady = true; } return _actionBarTabTextStyleContent; } }
            private static int _actionBarTabTextStyleContent = default;
            private static bool _actionBarTabTextStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionBarTheme"/>
            /// </summary>
            public static int actionBarTheme { get { if (!_actionBarThemeReady) { _actionBarThemeContent = SGetField<int>(LocalBridgeClazz, "actionBarTheme"); _actionBarThemeReady = true; } return _actionBarThemeContent; } }
            private static int _actionBarThemeContent = default;
            private static bool _actionBarThemeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionBarWidgetTheme"/>
            /// </summary>
            public static int actionBarWidgetTheme { get { if (!_actionBarWidgetThemeReady) { _actionBarWidgetThemeContent = SGetField<int>(LocalBridgeClazz, "actionBarWidgetTheme"); _actionBarWidgetThemeReady = true; } return _actionBarWidgetThemeContent; } }
            private static int _actionBarWidgetThemeContent = default;
            private static bool _actionBarWidgetThemeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionButtonStyle"/>
            /// </summary>
            public static int actionButtonStyle { get { if (!_actionButtonStyleReady) { _actionButtonStyleContent = SGetField<int>(LocalBridgeClazz, "actionButtonStyle"); _actionButtonStyleReady = true; } return _actionButtonStyleContent; } }
            private static int _actionButtonStyleContent = default;
            private static bool _actionButtonStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionDropDownStyle"/>
            /// </summary>
            public static int actionDropDownStyle { get { if (!_actionDropDownStyleReady) { _actionDropDownStyleContent = SGetField<int>(LocalBridgeClazz, "actionDropDownStyle"); _actionDropDownStyleReady = true; } return _actionDropDownStyleContent; } }
            private static int _actionDropDownStyleContent = default;
            private static bool _actionDropDownStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionLayout"/>
            /// </summary>
            public static int actionLayout { get { if (!_actionLayoutReady) { _actionLayoutContent = SGetField<int>(LocalBridgeClazz, "actionLayout"); _actionLayoutReady = true; } return _actionLayoutContent; } }
            private static int _actionLayoutContent = default;
            private static bool _actionLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionMenuTextAppearance"/>
            /// </summary>
            public static int actionMenuTextAppearance { get { if (!_actionMenuTextAppearanceReady) { _actionMenuTextAppearanceContent = SGetField<int>(LocalBridgeClazz, "actionMenuTextAppearance"); _actionMenuTextAppearanceReady = true; } return _actionMenuTextAppearanceContent; } }
            private static int _actionMenuTextAppearanceContent = default;
            private static bool _actionMenuTextAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionMenuTextColor"/>
            /// </summary>
            public static int actionMenuTextColor { get { if (!_actionMenuTextColorReady) { _actionMenuTextColorContent = SGetField<int>(LocalBridgeClazz, "actionMenuTextColor"); _actionMenuTextColorReady = true; } return _actionMenuTextColorContent; } }
            private static int _actionMenuTextColorContent = default;
            private static bool _actionMenuTextColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionModeBackground"/>
            /// </summary>
            public static int actionModeBackground { get { if (!_actionModeBackgroundReady) { _actionModeBackgroundContent = SGetField<int>(LocalBridgeClazz, "actionModeBackground"); _actionModeBackgroundReady = true; } return _actionModeBackgroundContent; } }
            private static int _actionModeBackgroundContent = default;
            private static bool _actionModeBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionModeCloseButtonStyle"/>
            /// </summary>
            public static int actionModeCloseButtonStyle { get { if (!_actionModeCloseButtonStyleReady) { _actionModeCloseButtonStyleContent = SGetField<int>(LocalBridgeClazz, "actionModeCloseButtonStyle"); _actionModeCloseButtonStyleReady = true; } return _actionModeCloseButtonStyleContent; } }
            private static int _actionModeCloseButtonStyleContent = default;
            private static bool _actionModeCloseButtonStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionModeCloseDrawable"/>
            /// </summary>
            public static int actionModeCloseDrawable { get { if (!_actionModeCloseDrawableReady) { _actionModeCloseDrawableContent = SGetField<int>(LocalBridgeClazz, "actionModeCloseDrawable"); _actionModeCloseDrawableReady = true; } return _actionModeCloseDrawableContent; } }
            private static int _actionModeCloseDrawableContent = default;
            private static bool _actionModeCloseDrawableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionModeCopyDrawable"/>
            /// </summary>
            public static int actionModeCopyDrawable { get { if (!_actionModeCopyDrawableReady) { _actionModeCopyDrawableContent = SGetField<int>(LocalBridgeClazz, "actionModeCopyDrawable"); _actionModeCopyDrawableReady = true; } return _actionModeCopyDrawableContent; } }
            private static int _actionModeCopyDrawableContent = default;
            private static bool _actionModeCopyDrawableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionModeCutDrawable"/>
            /// </summary>
            public static int actionModeCutDrawable { get { if (!_actionModeCutDrawableReady) { _actionModeCutDrawableContent = SGetField<int>(LocalBridgeClazz, "actionModeCutDrawable"); _actionModeCutDrawableReady = true; } return _actionModeCutDrawableContent; } }
            private static int _actionModeCutDrawableContent = default;
            private static bool _actionModeCutDrawableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionModeFindDrawable"/>
            /// </summary>
            public static int actionModeFindDrawable { get { if (!_actionModeFindDrawableReady) { _actionModeFindDrawableContent = SGetField<int>(LocalBridgeClazz, "actionModeFindDrawable"); _actionModeFindDrawableReady = true; } return _actionModeFindDrawableContent; } }
            private static int _actionModeFindDrawableContent = default;
            private static bool _actionModeFindDrawableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionModePasteDrawable"/>
            /// </summary>
            public static int actionModePasteDrawable { get { if (!_actionModePasteDrawableReady) { _actionModePasteDrawableContent = SGetField<int>(LocalBridgeClazz, "actionModePasteDrawable"); _actionModePasteDrawableReady = true; } return _actionModePasteDrawableContent; } }
            private static int _actionModePasteDrawableContent = default;
            private static bool _actionModePasteDrawableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionModeSelectAllDrawable"/>
            /// </summary>
            public static int actionModeSelectAllDrawable { get { if (!_actionModeSelectAllDrawableReady) { _actionModeSelectAllDrawableContent = SGetField<int>(LocalBridgeClazz, "actionModeSelectAllDrawable"); _actionModeSelectAllDrawableReady = true; } return _actionModeSelectAllDrawableContent; } }
            private static int _actionModeSelectAllDrawableContent = default;
            private static bool _actionModeSelectAllDrawableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionModeShareDrawable"/>
            /// </summary>
            public static int actionModeShareDrawable { get { if (!_actionModeShareDrawableReady) { _actionModeShareDrawableContent = SGetField<int>(LocalBridgeClazz, "actionModeShareDrawable"); _actionModeShareDrawableReady = true; } return _actionModeShareDrawableContent; } }
            private static int _actionModeShareDrawableContent = default;
            private static bool _actionModeShareDrawableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionModeSplitBackground"/>
            /// </summary>
            public static int actionModeSplitBackground { get { if (!_actionModeSplitBackgroundReady) { _actionModeSplitBackgroundContent = SGetField<int>(LocalBridgeClazz, "actionModeSplitBackground"); _actionModeSplitBackgroundReady = true; } return _actionModeSplitBackgroundContent; } }
            private static int _actionModeSplitBackgroundContent = default;
            private static bool _actionModeSplitBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionModeStyle"/>
            /// </summary>
            public static int actionModeStyle { get { if (!_actionModeStyleReady) { _actionModeStyleContent = SGetField<int>(LocalBridgeClazz, "actionModeStyle"); _actionModeStyleReady = true; } return _actionModeStyleContent; } }
            private static int _actionModeStyleContent = default;
            private static bool _actionModeStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionModeWebSearchDrawable"/>
            /// </summary>
            public static int actionModeWebSearchDrawable { get { if (!_actionModeWebSearchDrawableReady) { _actionModeWebSearchDrawableContent = SGetField<int>(LocalBridgeClazz, "actionModeWebSearchDrawable"); _actionModeWebSearchDrawableReady = true; } return _actionModeWebSearchDrawableContent; } }
            private static int _actionModeWebSearchDrawableContent = default;
            private static bool _actionModeWebSearchDrawableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionOverflowButtonStyle"/>
            /// </summary>
            public static int actionOverflowButtonStyle { get { if (!_actionOverflowButtonStyleReady) { _actionOverflowButtonStyleContent = SGetField<int>(LocalBridgeClazz, "actionOverflowButtonStyle"); _actionOverflowButtonStyleReady = true; } return _actionOverflowButtonStyleContent; } }
            private static int _actionOverflowButtonStyleContent = default;
            private static bool _actionOverflowButtonStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionOverflowMenuStyle"/>
            /// </summary>
            public static int actionOverflowMenuStyle { get { if (!_actionOverflowMenuStyleReady) { _actionOverflowMenuStyleContent = SGetField<int>(LocalBridgeClazz, "actionOverflowMenuStyle"); _actionOverflowMenuStyleReady = true; } return _actionOverflowMenuStyleContent; } }
            private static int _actionOverflowMenuStyleContent = default;
            private static bool _actionOverflowMenuStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionProviderClass"/>
            /// </summary>
            public static int actionProviderClass { get { if (!_actionProviderClassReady) { _actionProviderClassContent = SGetField<int>(LocalBridgeClazz, "actionProviderClass"); _actionProviderClassReady = true; } return _actionProviderClassContent; } }
            private static int _actionProviderClassContent = default;
            private static bool _actionProviderClassReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#actionViewClass"/>
            /// </summary>
            public static int actionViewClass { get { if (!_actionViewClassReady) { _actionViewClassContent = SGetField<int>(LocalBridgeClazz, "actionViewClass"); _actionViewClassReady = true; } return _actionViewClassContent; } }
            private static int _actionViewClassContent = default;
            private static bool _actionViewClassReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#activatedBackgroundIndicator"/>
            /// </summary>
            public static int activatedBackgroundIndicator { get { if (!_activatedBackgroundIndicatorReady) { _activatedBackgroundIndicatorContent = SGetField<int>(LocalBridgeClazz, "activatedBackgroundIndicator"); _activatedBackgroundIndicatorReady = true; } return _activatedBackgroundIndicatorContent; } }
            private static int _activatedBackgroundIndicatorContent = default;
            private static bool _activatedBackgroundIndicatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#activityCloseEnterAnimation"/>
            /// </summary>
            public static int activityCloseEnterAnimation { get { if (!_activityCloseEnterAnimationReady) { _activityCloseEnterAnimationContent = SGetField<int>(LocalBridgeClazz, "activityCloseEnterAnimation"); _activityCloseEnterAnimationReady = true; } return _activityCloseEnterAnimationContent; } }
            private static int _activityCloseEnterAnimationContent = default;
            private static bool _activityCloseEnterAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#activityCloseExitAnimation"/>
            /// </summary>
            public static int activityCloseExitAnimation { get { if (!_activityCloseExitAnimationReady) { _activityCloseExitAnimationContent = SGetField<int>(LocalBridgeClazz, "activityCloseExitAnimation"); _activityCloseExitAnimationReady = true; } return _activityCloseExitAnimationContent; } }
            private static int _activityCloseExitAnimationContent = default;
            private static bool _activityCloseExitAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#activityOpenEnterAnimation"/>
            /// </summary>
            public static int activityOpenEnterAnimation { get { if (!_activityOpenEnterAnimationReady) { _activityOpenEnterAnimationContent = SGetField<int>(LocalBridgeClazz, "activityOpenEnterAnimation"); _activityOpenEnterAnimationReady = true; } return _activityOpenEnterAnimationContent; } }
            private static int _activityOpenEnterAnimationContent = default;
            private static bool _activityOpenEnterAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#activityOpenExitAnimation"/>
            /// </summary>
            public static int activityOpenExitAnimation { get { if (!_activityOpenExitAnimationReady) { _activityOpenExitAnimationContent = SGetField<int>(LocalBridgeClazz, "activityOpenExitAnimation"); _activityOpenExitAnimationReady = true; } return _activityOpenExitAnimationContent; } }
            private static int _activityOpenExitAnimationContent = default;
            private static bool _activityOpenExitAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#addPrintersActivity"/>
            /// </summary>
            public static int addPrintersActivity { get { if (!_addPrintersActivityReady) { _addPrintersActivityContent = SGetField<int>(LocalBridgeClazz, "addPrintersActivity"); _addPrintersActivityReady = true; } return _addPrintersActivityContent; } }
            private static int _addPrintersActivityContent = default;
            private static bool _addPrintersActivityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#addStatesFromChildren"/>
            /// </summary>
            public static int addStatesFromChildren { get { if (!_addStatesFromChildrenReady) { _addStatesFromChildrenContent = SGetField<int>(LocalBridgeClazz, "addStatesFromChildren"); _addStatesFromChildrenReady = true; } return _addStatesFromChildrenContent; } }
            private static int _addStatesFromChildrenContent = default;
            private static bool _addStatesFromChildrenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#adjustViewBounds"/>
            /// </summary>
            public static int adjustViewBounds { get { if (!_adjustViewBoundsReady) { _adjustViewBoundsContent = SGetField<int>(LocalBridgeClazz, "adjustViewBounds"); _adjustViewBoundsReady = true; } return _adjustViewBoundsContent; } }
            private static int _adjustViewBoundsContent = default;
            private static bool _adjustViewBoundsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#advancedPrintOptionsActivity"/>
            /// </summary>
            public static int advancedPrintOptionsActivity { get { if (!_advancedPrintOptionsActivityReady) { _advancedPrintOptionsActivityContent = SGetField<int>(LocalBridgeClazz, "advancedPrintOptionsActivity"); _advancedPrintOptionsActivityReady = true; } return _advancedPrintOptionsActivityContent; } }
            private static int _advancedPrintOptionsActivityContent = default;
            private static bool _advancedPrintOptionsActivityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#alertDialogIcon"/>
            /// </summary>
            public static int alertDialogIcon { get { if (!_alertDialogIconReady) { _alertDialogIconContent = SGetField<int>(LocalBridgeClazz, "alertDialogIcon"); _alertDialogIconReady = true; } return _alertDialogIconContent; } }
            private static int _alertDialogIconContent = default;
            private static bool _alertDialogIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#alertDialogStyle"/>
            /// </summary>
            public static int alertDialogStyle { get { if (!_alertDialogStyleReady) { _alertDialogStyleContent = SGetField<int>(LocalBridgeClazz, "alertDialogStyle"); _alertDialogStyleReady = true; } return _alertDialogStyleContent; } }
            private static int _alertDialogStyleContent = default;
            private static bool _alertDialogStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#alertDialogTheme"/>
            /// </summary>
            public static int alertDialogTheme { get { if (!_alertDialogThemeReady) { _alertDialogThemeContent = SGetField<int>(LocalBridgeClazz, "alertDialogTheme"); _alertDialogThemeReady = true; } return _alertDialogThemeContent; } }
            private static int _alertDialogThemeContent = default;
            private static bool _alertDialogThemeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#alignmentMode"/>
            /// </summary>
            public static int alignmentMode { get { if (!_alignmentModeReady) { _alignmentModeContent = SGetField<int>(LocalBridgeClazz, "alignmentMode"); _alignmentModeReady = true; } return _alignmentModeContent; } }
            private static int _alignmentModeContent = default;
            private static bool _alignmentModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allContactsName"/>
            /// </summary>
            public static int allContactsName { get { if (!_allContactsNameReady) { _allContactsNameContent = SGetField<int>(LocalBridgeClazz, "allContactsName"); _allContactsNameReady = true; } return _allContactsNameContent; } }
            private static int _allContactsNameContent = default;
            private static bool _allContactsNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allow"/>
            /// </summary>
            public static int allow { get { if (!_allowReady) { _allowContent = SGetField<int>(LocalBridgeClazz, "allow"); _allowReady = true; } return _allowContent; } }
            private static int _allowContent = default;
            private static bool _allowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowAudioPlaybackCapture"/>
            /// </summary>
            public static int allowAudioPlaybackCapture { get { if (!_allowAudioPlaybackCaptureReady) { _allowAudioPlaybackCaptureContent = SGetField<int>(LocalBridgeClazz, "allowAudioPlaybackCapture"); _allowAudioPlaybackCaptureReady = true; } return _allowAudioPlaybackCaptureContent; } }
            private static int _allowAudioPlaybackCaptureContent = default;
            private static bool _allowAudioPlaybackCaptureReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowBackup"/>
            /// </summary>
            public static int allowBackup { get { if (!_allowBackupReady) { _allowBackupContent = SGetField<int>(LocalBridgeClazz, "allowBackup"); _allowBackupReady = true; } return _allowBackupContent; } }
            private static int _allowBackupContent = default;
            private static bool _allowBackupReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowClearUserData"/>
            /// </summary>
            public static int allowClearUserData { get { if (!_allowClearUserDataReady) { _allowClearUserDataContent = SGetField<int>(LocalBridgeClazz, "allowClearUserData"); _allowClearUserDataReady = true; } return _allowClearUserDataContent; } }
            private static int _allowClearUserDataContent = default;
            private static bool _allowClearUserDataReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowClickWhenDisabled"/>
            /// </summary>
            public static int allowClickWhenDisabled { get { if (!_allowClickWhenDisabledReady) { _allowClickWhenDisabledContent = SGetField<int>(LocalBridgeClazz, "allowClickWhenDisabled"); _allowClickWhenDisabledReady = true; } return _allowClickWhenDisabledContent; } }
            private static int _allowClickWhenDisabledContent = default;
            private static bool _allowClickWhenDisabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowCrossUidActivitySwitchFromBelow"/>
            /// </summary>
            public static int allowCrossUidActivitySwitchFromBelow { get { if (!_allowCrossUidActivitySwitchFromBelowReady) { _allowCrossUidActivitySwitchFromBelowContent = SGetField<int>(LocalBridgeClazz, "allowCrossUidActivitySwitchFromBelow"); _allowCrossUidActivitySwitchFromBelowReady = true; } return _allowCrossUidActivitySwitchFromBelowContent; } }
            private static int _allowCrossUidActivitySwitchFromBelowContent = default;
            private static bool _allowCrossUidActivitySwitchFromBelowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowEmbedded"/>
            /// </summary>
            public static int allowEmbedded { get { if (!_allowEmbeddedReady) { _allowEmbeddedContent = SGetField<int>(LocalBridgeClazz, "allowEmbedded"); _allowEmbeddedReady = true; } return _allowEmbeddedContent; } }
            private static int _allowEmbeddedContent = default;
            private static bool _allowEmbeddedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowGameAngleDriver"/>
            /// </summary>
            public static int allowGameAngleDriver { get { if (!_allowGameAngleDriverReady) { _allowGameAngleDriverContent = SGetField<int>(LocalBridgeClazz, "allowGameAngleDriver"); _allowGameAngleDriverReady = true; } return _allowGameAngleDriverContent; } }
            private static int _allowGameAngleDriverContent = default;
            private static bool _allowGameAngleDriverReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowGameDownscaling"/>
            /// </summary>
            public static int allowGameDownscaling { get { if (!_allowGameDownscalingReady) { _allowGameDownscalingContent = SGetField<int>(LocalBridgeClazz, "allowGameDownscaling"); _allowGameDownscalingReady = true; } return _allowGameDownscalingContent; } }
            private static int _allowGameDownscalingContent = default;
            private static bool _allowGameDownscalingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowGameFpsOverride"/>
            /// </summary>
            public static int allowGameFpsOverride { get { if (!_allowGameFpsOverrideReady) { _allowGameFpsOverrideContent = SGetField<int>(LocalBridgeClazz, "allowGameFpsOverride"); _allowGameFpsOverrideReady = true; } return _allowGameFpsOverrideContent; } }
            private static int _allowGameFpsOverrideContent = default;
            private static bool _allowGameFpsOverrideReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowNativeHeapPointerTagging"/>
            /// </summary>
            public static int allowNativeHeapPointerTagging { get { if (!_allowNativeHeapPointerTaggingReady) { _allowNativeHeapPointerTaggingContent = SGetField<int>(LocalBridgeClazz, "allowNativeHeapPointerTagging"); _allowNativeHeapPointerTaggingReady = true; } return _allowNativeHeapPointerTaggingContent; } }
            private static int _allowNativeHeapPointerTaggingContent = default;
            private static bool _allowNativeHeapPointerTaggingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowParallelSyncs"/>
            /// </summary>
            public static int allowParallelSyncs { get { if (!_allowParallelSyncsReady) { _allowParallelSyncsContent = SGetField<int>(LocalBridgeClazz, "allowParallelSyncs"); _allowParallelSyncsReady = true; } return _allowParallelSyncsContent; } }
            private static int _allowParallelSyncsContent = default;
            private static bool _allowParallelSyncsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowSharedIsolatedProcess"/>
            /// </summary>
            public static int allowSharedIsolatedProcess { get { if (!_allowSharedIsolatedProcessReady) { _allowSharedIsolatedProcessContent = SGetField<int>(LocalBridgeClazz, "allowSharedIsolatedProcess"); _allowSharedIsolatedProcessReady = true; } return _allowSharedIsolatedProcessContent; } }
            private static int _allowSharedIsolatedProcessContent = default;
            private static bool _allowSharedIsolatedProcessReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowSingleTap"/>
            /// </summary>
            public static int allowSingleTap { get { if (!_allowSingleTapReady) { _allowSingleTapContent = SGetField<int>(LocalBridgeClazz, "allowSingleTap"); _allowSingleTapReady = true; } return _allowSingleTapContent; } }
            private static int _allowSingleTapContent = default;
            private static bool _allowSingleTapReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowTaskReparenting"/>
            /// </summary>
            public static int allowTaskReparenting { get { if (!_allowTaskReparentingReady) { _allowTaskReparentingContent = SGetField<int>(LocalBridgeClazz, "allowTaskReparenting"); _allowTaskReparentingReady = true; } return _allowTaskReparentingContent; } }
            private static int _allowTaskReparentingContent = default;
            private static bool _allowTaskReparentingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowUndo"/>
            /// </summary>
            public static int allowUndo { get { if (!_allowUndoReady) { _allowUndoContent = SGetField<int>(LocalBridgeClazz, "allowUndo"); _allowUndoReady = true; } return _allowUndoContent; } }
            private static int _allowUndoContent = default;
            private static bool _allowUndoReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowUntrustedActivityEmbedding"/>
            /// </summary>
            public static int allowUntrustedActivityEmbedding { get { if (!_allowUntrustedActivityEmbeddingReady) { _allowUntrustedActivityEmbeddingContent = SGetField<int>(LocalBridgeClazz, "allowUntrustedActivityEmbedding"); _allowUntrustedActivityEmbeddingReady = true; } return _allowUntrustedActivityEmbeddingContent; } }
            private static int _allowUntrustedActivityEmbeddingContent = default;
            private static bool _allowUntrustedActivityEmbeddingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#allowUpdateOwnership"/>
            /// </summary>
            public static int allowUpdateOwnership { get { if (!_allowUpdateOwnershipReady) { _allowUpdateOwnershipContent = SGetField<int>(LocalBridgeClazz, "allowUpdateOwnership"); _allowUpdateOwnershipReady = true; } return _allowUpdateOwnershipContent; } }
            private static int _allowUpdateOwnershipContent = default;
            private static bool _allowUpdateOwnershipReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#alpha"/>
            /// </summary>
            public static int alpha { get { if (!_alphaReady) { _alphaContent = SGetField<int>(LocalBridgeClazz, "alpha"); _alphaReady = true; } return _alphaContent; } }
            private static int _alphaContent = default;
            private static bool _alphaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#alphabeticModifiers"/>
            /// </summary>
            public static int alphabeticModifiers { get { if (!_alphabeticModifiersReady) { _alphabeticModifiersContent = SGetField<int>(LocalBridgeClazz, "alphabeticModifiers"); _alphabeticModifiersReady = true; } return _alphabeticModifiersContent; } }
            private static int _alphabeticModifiersContent = default;
            private static bool _alphabeticModifiersReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#alphabeticShortcut"/>
            /// </summary>
            public static int alphabeticShortcut { get { if (!_alphabeticShortcutReady) { _alphabeticShortcutContent = SGetField<int>(LocalBridgeClazz, "alphabeticShortcut"); _alphabeticShortcutReady = true; } return _alphabeticShortcutContent; } }
            private static int _alphabeticShortcutContent = default;
            private static bool _alphabeticShortcutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#alwaysDrawnWithCache"/>
            /// </summary>
            public static int alwaysDrawnWithCache { get { if (!_alwaysDrawnWithCacheReady) { _alwaysDrawnWithCacheContent = SGetField<int>(LocalBridgeClazz, "alwaysDrawnWithCache"); _alwaysDrawnWithCacheReady = true; } return _alwaysDrawnWithCacheContent; } }
            private static int _alwaysDrawnWithCacheContent = default;
            private static bool _alwaysDrawnWithCacheReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#alwaysRetainTaskState"/>
            /// </summary>
            public static int alwaysRetainTaskState { get { if (!_alwaysRetainTaskStateReady) { _alwaysRetainTaskStateContent = SGetField<int>(LocalBridgeClazz, "alwaysRetainTaskState"); _alwaysRetainTaskStateReady = true; } return _alwaysRetainTaskStateContent; } }
            private static int _alwaysRetainTaskStateContent = default;
            private static bool _alwaysRetainTaskStateReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#ambientShadowAlpha"/>
            /// </summary>
            public static int ambientShadowAlpha { get { if (!_ambientShadowAlphaReady) { _ambientShadowAlphaContent = SGetField<int>(LocalBridgeClazz, "ambientShadowAlpha"); _ambientShadowAlphaReady = true; } return _ambientShadowAlphaContent; } }
            private static int _ambientShadowAlphaContent = default;
            private static bool _ambientShadowAlphaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#amPmBackgroundColor"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int amPmBackgroundColor { get { if (!_amPmBackgroundColorReady) { _amPmBackgroundColorContent = SGetField<int>(LocalBridgeClazz, "amPmBackgroundColor"); _amPmBackgroundColorReady = true; } return _amPmBackgroundColorContent; } }
            private static int _amPmBackgroundColorContent = default;
            private static bool _amPmBackgroundColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#amPmTextColor"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int amPmTextColor { get { if (!_amPmTextColorReady) { _amPmTextColorContent = SGetField<int>(LocalBridgeClazz, "amPmTextColor"); _amPmTextColorReady = true; } return _amPmTextColorContent; } }
            private static int _amPmTextColorContent = default;
            private static bool _amPmTextColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#angle"/>
            /// </summary>
            public static int angle { get { if (!_angleReady) { _angleContent = SGetField<int>(LocalBridgeClazz, "angle"); _angleReady = true; } return _angleContent; } }
            private static int _angleContent = default;
            private static bool _angleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#animatedImageDrawable"/>
            /// </summary>
            public static int animatedImageDrawable { get { if (!_animatedImageDrawableReady) { _animatedImageDrawableContent = SGetField<int>(LocalBridgeClazz, "animatedImageDrawable"); _animatedImageDrawableReady = true; } return _animatedImageDrawableContent; } }
            private static int _animatedImageDrawableContent = default;
            private static bool _animatedImageDrawableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#animateFirstView"/>
            /// </summary>
            public static int animateFirstView { get { if (!_animateFirstViewReady) { _animateFirstViewContent = SGetField<int>(LocalBridgeClazz, "animateFirstView"); _animateFirstViewReady = true; } return _animateFirstViewContent; } }
            private static int _animateFirstViewContent = default;
            private static bool _animateFirstViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#animateLayoutChanges"/>
            /// </summary>
            public static int animateLayoutChanges { get { if (!_animateLayoutChangesReady) { _animateLayoutChangesContent = SGetField<int>(LocalBridgeClazz, "animateLayoutChanges"); _animateLayoutChangesReady = true; } return _animateLayoutChangesContent; } }
            private static int _animateLayoutChangesContent = default;
            private static bool _animateLayoutChangesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#animateOnClick"/>
            /// </summary>
            public static int animateOnClick { get { if (!_animateOnClickReady) { _animateOnClickContent = SGetField<int>(LocalBridgeClazz, "animateOnClick"); _animateOnClickReady = true; } return _animateOnClickContent; } }
            private static int _animateOnClickContent = default;
            private static bool _animateOnClickReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#animation"/>
            /// </summary>
            public static int animation { get { if (!_animationReady) { _animationContent = SGetField<int>(LocalBridgeClazz, "animation"); _animationReady = true; } return _animationContent; } }
            private static int _animationContent = default;
            private static bool _animationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#animationCache"/>
            /// </summary>
            public static int animationCache { get { if (!_animationCacheReady) { _animationCacheContent = SGetField<int>(LocalBridgeClazz, "animationCache"); _animationCacheReady = true; } return _animationCacheContent; } }
            private static int _animationCacheContent = default;
            private static bool _animationCacheReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#animationDuration"/>
            /// </summary>
            public static int animationDuration { get { if (!_animationDurationReady) { _animationDurationContent = SGetField<int>(LocalBridgeClazz, "animationDuration"); _animationDurationReady = true; } return _animationDurationContent; } }
            private static int _animationDurationContent = default;
            private static bool _animationDurationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#animationOrder"/>
            /// </summary>
            public static int animationOrder { get { if (!_animationOrderReady) { _animationOrderContent = SGetField<int>(LocalBridgeClazz, "animationOrder"); _animationOrderReady = true; } return _animationOrderContent; } }
            private static int _animationOrderContent = default;
            private static bool _animationOrderReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#animationResolution"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int animationResolution { get { if (!_animationResolutionReady) { _animationResolutionContent = SGetField<int>(LocalBridgeClazz, "animationResolution"); _animationResolutionReady = true; } return _animationResolutionContent; } }
            private static int _animationResolutionContent = default;
            private static bool _animationResolutionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#antialias"/>
            /// </summary>
            public static int antialias { get { if (!_antialiasReady) { _antialiasContent = SGetField<int>(LocalBridgeClazz, "antialias"); _antialiasReady = true; } return _antialiasContent; } }
            private static int _antialiasContent = default;
            private static bool _antialiasReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#anyDensity"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int anyDensity { get { if (!_anyDensityReady) { _anyDensityContent = SGetField<int>(LocalBridgeClazz, "anyDensity"); _anyDensityReady = true; } return _anyDensityContent; } }
            private static int _anyDensityContent = default;
            private static bool _anyDensityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#apduServiceBanner"/>
            /// </summary>
            public static int apduServiceBanner { get { if (!_apduServiceBannerReady) { _apduServiceBannerContent = SGetField<int>(LocalBridgeClazz, "apduServiceBanner"); _apduServiceBannerReady = true; } return _apduServiceBannerContent; } }
            private static int _apduServiceBannerContent = default;
            private static bool _apduServiceBannerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#apiKey"/>
            /// </summary>
            public static int apiKey { get { if (!_apiKeyReady) { _apiKeyContent = SGetField<int>(LocalBridgeClazz, "apiKey"); _apiKeyReady = true; } return _apiKeyContent; } }
            private static int _apiKeyContent = default;
            private static bool _apiKeyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#appCategory"/>
            /// </summary>
            public static int appCategory { get { if (!_appCategoryReady) { _appCategoryContent = SGetField<int>(LocalBridgeClazz, "appCategory"); _appCategoryReady = true; } return _appCategoryContent; } }
            private static int _appCategoryContent = default;
            private static bool _appCategoryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#appComponentFactory"/>
            /// </summary>
            public static int appComponentFactory { get { if (!_appComponentFactoryReady) { _appComponentFactoryContent = SGetField<int>(LocalBridgeClazz, "appComponentFactory"); _appComponentFactoryReady = true; } return _appComponentFactoryContent; } }
            private static int _appComponentFactoryContent = default;
            private static bool _appComponentFactoryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#attributionsAreUserVisible"/>
            /// </summary>
            public static int attributionsAreUserVisible { get { if (!_attributionsAreUserVisibleReady) { _attributionsAreUserVisibleContent = SGetField<int>(LocalBridgeClazz, "attributionsAreUserVisible"); _attributionsAreUserVisibleReady = true; } return _attributionsAreUserVisibleContent; } }
            private static int _attributionsAreUserVisibleContent = default;
            private static bool _attributionsAreUserVisibleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#attributionTags"/>
            /// </summary>
            public static int attributionTags { get { if (!_attributionTagsReady) { _attributionTagsContent = SGetField<int>(LocalBridgeClazz, "attributionTags"); _attributionTagsReady = true; } return _attributionTagsContent; } }
            private static int _attributionTagsContent = default;
            private static bool _attributionTagsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#author"/>
            /// </summary>
            public static int author { get { if (!_authorReady) { _authorContent = SGetField<int>(LocalBridgeClazz, "author"); _authorReady = true; } return _authorContent; } }
            private static int _authorContent = default;
            private static bool _authorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#authorities"/>
            /// </summary>
            public static int authorities { get { if (!_authoritiesReady) { _authoritiesContent = SGetField<int>(LocalBridgeClazz, "authorities"); _authoritiesReady = true; } return _authoritiesContent; } }
            private static int _authoritiesContent = default;
            private static bool _authoritiesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoAdvanceViewId"/>
            /// </summary>
            public static int autoAdvanceViewId { get { if (!_autoAdvanceViewIdReady) { _autoAdvanceViewIdContent = SGetField<int>(LocalBridgeClazz, "autoAdvanceViewId"); _autoAdvanceViewIdReady = true; } return _autoAdvanceViewIdContent; } }
            private static int _autoAdvanceViewIdContent = default;
            private static bool _autoAdvanceViewIdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoCompleteTextViewStyle"/>
            /// </summary>
            public static int autoCompleteTextViewStyle { get { if (!_autoCompleteTextViewStyleReady) { _autoCompleteTextViewStyleContent = SGetField<int>(LocalBridgeClazz, "autoCompleteTextViewStyle"); _autoCompleteTextViewStyleReady = true; } return _autoCompleteTextViewStyleContent; } }
            private static int _autoCompleteTextViewStyleContent = default;
            private static bool _autoCompleteTextViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autofilledHighlight"/>
            /// </summary>
            public static int autofilledHighlight { get { if (!_autofilledHighlightReady) { _autofilledHighlightContent = SGetField<int>(LocalBridgeClazz, "autofilledHighlight"); _autofilledHighlightReady = true; } return _autofilledHighlightContent; } }
            private static int _autofilledHighlightContent = default;
            private static bool _autofilledHighlightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autofillHints"/>
            /// </summary>
            public static int autofillHints { get { if (!_autofillHintsReady) { _autofillHintsContent = SGetField<int>(LocalBridgeClazz, "autofillHints"); _autofillHintsReady = true; } return _autofillHintsContent; } }
            private static int _autofillHintsContent = default;
            private static bool _autofillHintsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoHandwritingEnabled"/>
            /// </summary>
            public static int autoHandwritingEnabled { get { if (!_autoHandwritingEnabledReady) { _autoHandwritingEnabledContent = SGetField<int>(LocalBridgeClazz, "autoHandwritingEnabled"); _autoHandwritingEnabledReady = true; } return _autoHandwritingEnabledContent; } }
            private static int _autoHandwritingEnabledContent = default;
            private static bool _autoHandwritingEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoLink"/>
            /// </summary>
            public static int autoLink { get { if (!_autoLinkReady) { _autoLinkContent = SGetField<int>(LocalBridgeClazz, "autoLink"); _autoLinkReady = true; } return _autoLinkContent; } }
            private static int _autoLinkContent = default;
            private static bool _autoLinkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoMirrored"/>
            /// </summary>
            public static int autoMirrored { get { if (!_autoMirroredReady) { _autoMirroredContent = SGetField<int>(LocalBridgeClazz, "autoMirrored"); _autoMirroredReady = true; } return _autoMirroredContent; } }
            private static int _autoMirroredContent = default;
            private static bool _autoMirroredReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoRemoveFromRecents"/>
            /// </summary>
            public static int autoRemoveFromRecents { get { if (!_autoRemoveFromRecentsReady) { _autoRemoveFromRecentsContent = SGetField<int>(LocalBridgeClazz, "autoRemoveFromRecents"); _autoRemoveFromRecentsReady = true; } return _autoRemoveFromRecentsContent; } }
            private static int _autoRemoveFromRecentsContent = default;
            private static bool _autoRemoveFromRecentsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoRevokePermissions"/>
            /// </summary>
            public static int autoRevokePermissions { get { if (!_autoRevokePermissionsReady) { _autoRevokePermissionsContent = SGetField<int>(LocalBridgeClazz, "autoRevokePermissions"); _autoRevokePermissionsReady = true; } return _autoRevokePermissionsContent; } }
            private static int _autoRevokePermissionsContent = default;
            private static bool _autoRevokePermissionsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoSizeMaxTextSize"/>
            /// </summary>
            public static int autoSizeMaxTextSize { get { if (!_autoSizeMaxTextSizeReady) { _autoSizeMaxTextSizeContent = SGetField<int>(LocalBridgeClazz, "autoSizeMaxTextSize"); _autoSizeMaxTextSizeReady = true; } return _autoSizeMaxTextSizeContent; } }
            private static int _autoSizeMaxTextSizeContent = default;
            private static bool _autoSizeMaxTextSizeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoSizeMinTextSize"/>
            /// </summary>
            public static int autoSizeMinTextSize { get { if (!_autoSizeMinTextSizeReady) { _autoSizeMinTextSizeContent = SGetField<int>(LocalBridgeClazz, "autoSizeMinTextSize"); _autoSizeMinTextSizeReady = true; } return _autoSizeMinTextSizeContent; } }
            private static int _autoSizeMinTextSizeContent = default;
            private static bool _autoSizeMinTextSizeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoSizePresetSizes"/>
            /// </summary>
            public static int autoSizePresetSizes { get { if (!_autoSizePresetSizesReady) { _autoSizePresetSizesContent = SGetField<int>(LocalBridgeClazz, "autoSizePresetSizes"); _autoSizePresetSizesReady = true; } return _autoSizePresetSizesContent; } }
            private static int _autoSizePresetSizesContent = default;
            private static bool _autoSizePresetSizesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoSizeStepGranularity"/>
            /// </summary>
            public static int autoSizeStepGranularity { get { if (!_autoSizeStepGranularityReady) { _autoSizeStepGranularityContent = SGetField<int>(LocalBridgeClazz, "autoSizeStepGranularity"); _autoSizeStepGranularityReady = true; } return _autoSizeStepGranularityContent; } }
            private static int _autoSizeStepGranularityContent = default;
            private static bool _autoSizeStepGranularityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoSizeTextType"/>
            /// </summary>
            public static int autoSizeTextType { get { if (!_autoSizeTextTypeReady) { _autoSizeTextTypeContent = SGetField<int>(LocalBridgeClazz, "autoSizeTextType"); _autoSizeTextTypeReady = true; } return _autoSizeTextTypeContent; } }
            private static int _autoSizeTextTypeContent = default;
            private static bool _autoSizeTextTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoStart"/>
            /// </summary>
            public static int autoStart { get { if (!_autoStartReady) { _autoStartContent = SGetField<int>(LocalBridgeClazz, "autoStart"); _autoStartReady = true; } return _autoStartContent; } }
            private static int _autoStartContent = default;
            private static bool _autoStartReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoText"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int autoText { get { if (!_autoTextReady) { _autoTextContent = SGetField<int>(LocalBridgeClazz, "autoText"); _autoTextReady = true; } return _autoTextContent; } }
            private static int _autoTextContent = default;
            private static bool _autoTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoTransact"/>
            /// </summary>
            public static int autoTransact { get { if (!_autoTransactReady) { _autoTransactContent = SGetField<int>(LocalBridgeClazz, "autoTransact"); _autoTransactReady = true; } return _autoTransactContent; } }
            private static int _autoTransactContent = default;
            private static bool _autoTransactReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoUrlDetect"/>
            /// </summary>
            public static int autoUrlDetect { get { if (!_autoUrlDetectReady) { _autoUrlDetectContent = SGetField<int>(LocalBridgeClazz, "autoUrlDetect"); _autoUrlDetectReady = true; } return _autoUrlDetectContent; } }
            private static int _autoUrlDetectContent = default;
            private static bool _autoUrlDetectReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#autoVerify"/>
            /// </summary>
            public static int autoVerify { get { if (!_autoVerifyReady) { _autoVerifyContent = SGetField<int>(LocalBridgeClazz, "autoVerify"); _autoVerifyReady = true; } return _autoVerifyContent; } }
            private static int _autoVerifyContent = default;
            private static bool _autoVerifyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#backdropColor"/>
            /// </summary>
            public static int backdropColor { get { if (!_backdropColorReady) { _backdropColorContent = SGetField<int>(LocalBridgeClazz, "backdropColor"); _backdropColorReady = true; } return _backdropColorContent; } }
            private static int _backdropColorContent = default;
            private static bool _backdropColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#background"/>
            /// </summary>
            public static int background { get { if (!_backgroundReady) { _backgroundContent = SGetField<int>(LocalBridgeClazz, "background"); _backgroundReady = true; } return _backgroundContent; } }
            private static int _backgroundContent = default;
            private static bool _backgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#backgroundDimAmount"/>
            /// </summary>
            public static int backgroundDimAmount { get { if (!_backgroundDimAmountReady) { _backgroundDimAmountContent = SGetField<int>(LocalBridgeClazz, "backgroundDimAmount"); _backgroundDimAmountReady = true; } return _backgroundDimAmountContent; } }
            private static int _backgroundDimAmountContent = default;
            private static bool _backgroundDimAmountReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#backgroundDimEnabled"/>
            /// </summary>
            public static int backgroundDimEnabled { get { if (!_backgroundDimEnabledReady) { _backgroundDimEnabledContent = SGetField<int>(LocalBridgeClazz, "backgroundDimEnabled"); _backgroundDimEnabledReady = true; } return _backgroundDimEnabledContent; } }
            private static int _backgroundDimEnabledContent = default;
            private static bool _backgroundDimEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#backgroundSplit"/>
            /// </summary>
            public static int backgroundSplit { get { if (!_backgroundSplitReady) { _backgroundSplitContent = SGetField<int>(LocalBridgeClazz, "backgroundSplit"); _backgroundSplitReady = true; } return _backgroundSplitContent; } }
            private static int _backgroundSplitContent = default;
            private static bool _backgroundSplitReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#backgroundStacked"/>
            /// </summary>
            public static int backgroundStacked { get { if (!_backgroundStackedReady) { _backgroundStackedContent = SGetField<int>(LocalBridgeClazz, "backgroundStacked"); _backgroundStackedReady = true; } return _backgroundStackedContent; } }
            private static int _backgroundStackedContent = default;
            private static bool _backgroundStackedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#backgroundTint"/>
            /// </summary>
            public static int backgroundTint { get { if (!_backgroundTintReady) { _backgroundTintContent = SGetField<int>(LocalBridgeClazz, "backgroundTint"); _backgroundTintReady = true; } return _backgroundTintContent; } }
            private static int _backgroundTintContent = default;
            private static bool _backgroundTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#backgroundTintMode"/>
            /// </summary>
            public static int backgroundTintMode { get { if (!_backgroundTintModeReady) { _backgroundTintModeContent = SGetField<int>(LocalBridgeClazz, "backgroundTintMode"); _backgroundTintModeReady = true; } return _backgroundTintModeContent; } }
            private static int _backgroundTintModeContent = default;
            private static bool _backgroundTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#backupAgent"/>
            /// </summary>
            public static int backupAgent { get { if (!_backupAgentReady) { _backupAgentContent = SGetField<int>(LocalBridgeClazz, "backupAgent"); _backupAgentReady = true; } return _backupAgentContent; } }
            private static int _backupAgentContent = default;
            private static bool _backupAgentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#backupInForeground"/>
            /// </summary>
            public static int backupInForeground { get { if (!_backupInForegroundReady) { _backupInForegroundContent = SGetField<int>(LocalBridgeClazz, "backupInForeground"); _backupInForegroundReady = true; } return _backupInForegroundContent; } }
            private static int _backupInForegroundContent = default;
            private static bool _backupInForegroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#banner"/>
            /// </summary>
            public static int banner { get { if (!_bannerReady) { _bannerContent = SGetField<int>(LocalBridgeClazz, "banner"); _bannerReady = true; } return _bannerContent; } }
            private static int _bannerContent = default;
            private static bool _bannerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#baseline"/>
            /// </summary>
            public static int baseline { get { if (!_baselineReady) { _baselineContent = SGetField<int>(LocalBridgeClazz, "baseline"); _baselineReady = true; } return _baselineContent; } }
            private static int _baselineContent = default;
            private static bool _baselineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#baselineAlignBottom"/>
            /// </summary>
            public static int baselineAlignBottom { get { if (!_baselineAlignBottomReady) { _baselineAlignBottomContent = SGetField<int>(LocalBridgeClazz, "baselineAlignBottom"); _baselineAlignBottomReady = true; } return _baselineAlignBottomContent; } }
            private static int _baselineAlignBottomContent = default;
            private static bool _baselineAlignBottomReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#baselineAligned"/>
            /// </summary>
            public static int baselineAligned { get { if (!_baselineAlignedReady) { _baselineAlignedContent = SGetField<int>(LocalBridgeClazz, "baselineAligned"); _baselineAlignedReady = true; } return _baselineAlignedContent; } }
            private static int _baselineAlignedContent = default;
            private static bool _baselineAlignedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#baselineAlignedChildIndex"/>
            /// </summary>
            public static int baselineAlignedChildIndex { get { if (!_baselineAlignedChildIndexReady) { _baselineAlignedChildIndexContent = SGetField<int>(LocalBridgeClazz, "baselineAlignedChildIndex"); _baselineAlignedChildIndexReady = true; } return _baselineAlignedChildIndexContent; } }
            private static int _baselineAlignedChildIndexContent = default;
            private static bool _baselineAlignedChildIndexReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#bitmap"/>
            /// </summary>
            public static int bitmap { get { if (!_bitmapReady) { _bitmapContent = SGetField<int>(LocalBridgeClazz, "bitmap"); _bitmapReady = true; } return _bitmapContent; } }
            private static int _bitmapContent = default;
            private static bool _bitmapReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#borderlessButtonStyle"/>
            /// </summary>
            public static int borderlessButtonStyle { get { if (!_borderlessButtonStyleReady) { _borderlessButtonStyleContent = SGetField<int>(LocalBridgeClazz, "borderlessButtonStyle"); _borderlessButtonStyleReady = true; } return _borderlessButtonStyleContent; } }
            private static int _borderlessButtonStyleContent = default;
            private static bool _borderlessButtonStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#bottom"/>
            /// </summary>
            public static int bottom { get { if (!_bottomReady) { _bottomContent = SGetField<int>(LocalBridgeClazz, "bottom"); _bottomReady = true; } return _bottomContent; } }
            private static int _bottomContent = default;
            private static bool _bottomReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#bottomBright"/>
            /// </summary>
            public static int bottomBright { get { if (!_bottomBrightReady) { _bottomBrightContent = SGetField<int>(LocalBridgeClazz, "bottomBright"); _bottomBrightReady = true; } return _bottomBrightContent; } }
            private static int _bottomBrightContent = default;
            private static bool _bottomBrightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#bottomDark"/>
            /// </summary>
            public static int bottomDark { get { if (!_bottomDarkReady) { _bottomDarkContent = SGetField<int>(LocalBridgeClazz, "bottomDark"); _bottomDarkReady = true; } return _bottomDarkContent; } }
            private static int _bottomDarkContent = default;
            private static bool _bottomDarkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#bottomLeftRadius"/>
            /// </summary>
            public static int bottomLeftRadius { get { if (!_bottomLeftRadiusReady) { _bottomLeftRadiusContent = SGetField<int>(LocalBridgeClazz, "bottomLeftRadius"); _bottomLeftRadiusReady = true; } return _bottomLeftRadiusContent; } }
            private static int _bottomLeftRadiusContent = default;
            private static bool _bottomLeftRadiusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#bottomMedium"/>
            /// </summary>
            public static int bottomMedium { get { if (!_bottomMediumReady) { _bottomMediumContent = SGetField<int>(LocalBridgeClazz, "bottomMedium"); _bottomMediumReady = true; } return _bottomMediumContent; } }
            private static int _bottomMediumContent = default;
            private static bool _bottomMediumReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#bottomOffset"/>
            /// </summary>
            public static int bottomOffset { get { if (!_bottomOffsetReady) { _bottomOffsetContent = SGetField<int>(LocalBridgeClazz, "bottomOffset"); _bottomOffsetReady = true; } return _bottomOffsetContent; } }
            private static int _bottomOffsetContent = default;
            private static bool _bottomOffsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#bottomRightRadius"/>
            /// </summary>
            public static int bottomRightRadius { get { if (!_bottomRightRadiusReady) { _bottomRightRadiusContent = SGetField<int>(LocalBridgeClazz, "bottomRightRadius"); _bottomRightRadiusReady = true; } return _bottomRightRadiusContent; } }
            private static int _bottomRightRadiusContent = default;
            private static bool _bottomRightRadiusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#breadCrumbShortTitle"/>
            /// </summary>
            public static int breadCrumbShortTitle { get { if (!_breadCrumbShortTitleReady) { _breadCrumbShortTitleContent = SGetField<int>(LocalBridgeClazz, "breadCrumbShortTitle"); _breadCrumbShortTitleReady = true; } return _breadCrumbShortTitleContent; } }
            private static int _breadCrumbShortTitleContent = default;
            private static bool _breadCrumbShortTitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#breadCrumbTitle"/>
            /// </summary>
            public static int breadCrumbTitle { get { if (!_breadCrumbTitleReady) { _breadCrumbTitleContent = SGetField<int>(LocalBridgeClazz, "breadCrumbTitle"); _breadCrumbTitleReady = true; } return _breadCrumbTitleContent; } }
            private static int _breadCrumbTitleContent = default;
            private static bool _breadCrumbTitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#breakStrategy"/>
            /// </summary>
            public static int breakStrategy { get { if (!_breakStrategyReady) { _breakStrategyContent = SGetField<int>(LocalBridgeClazz, "breakStrategy"); _breakStrategyReady = true; } return _breakStrategyContent; } }
            private static int _breakStrategyContent = default;
            private static bool _breakStrategyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#bufferType"/>
            /// </summary>
            public static int bufferType { get { if (!_bufferTypeReady) { _bufferTypeContent = SGetField<int>(LocalBridgeClazz, "bufferType"); _bufferTypeReady = true; } return _bufferTypeContent; } }
            private static int _bufferTypeContent = default;
            private static bool _bufferTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#button"/>
            /// </summary>
            public static int button { get { if (!_buttonReady) { _buttonContent = SGetField<int>(LocalBridgeClazz, "button"); _buttonReady = true; } return _buttonContent; } }
            private static int _buttonContent = default;
            private static bool _buttonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#buttonBarButtonStyle"/>
            /// </summary>
            public static int buttonBarButtonStyle { get { if (!_buttonBarButtonStyleReady) { _buttonBarButtonStyleContent = SGetField<int>(LocalBridgeClazz, "buttonBarButtonStyle"); _buttonBarButtonStyleReady = true; } return _buttonBarButtonStyleContent; } }
            private static int _buttonBarButtonStyleContent = default;
            private static bool _buttonBarButtonStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#buttonBarNegativeButtonStyle"/>
            /// </summary>
            public static int buttonBarNegativeButtonStyle { get { if (!_buttonBarNegativeButtonStyleReady) { _buttonBarNegativeButtonStyleContent = SGetField<int>(LocalBridgeClazz, "buttonBarNegativeButtonStyle"); _buttonBarNegativeButtonStyleReady = true; } return _buttonBarNegativeButtonStyleContent; } }
            private static int _buttonBarNegativeButtonStyleContent = default;
            private static bool _buttonBarNegativeButtonStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#buttonBarNeutralButtonStyle"/>
            /// </summary>
            public static int buttonBarNeutralButtonStyle { get { if (!_buttonBarNeutralButtonStyleReady) { _buttonBarNeutralButtonStyleContent = SGetField<int>(LocalBridgeClazz, "buttonBarNeutralButtonStyle"); _buttonBarNeutralButtonStyleReady = true; } return _buttonBarNeutralButtonStyleContent; } }
            private static int _buttonBarNeutralButtonStyleContent = default;
            private static bool _buttonBarNeutralButtonStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#buttonBarPositiveButtonStyle"/>
            /// </summary>
            public static int buttonBarPositiveButtonStyle { get { if (!_buttonBarPositiveButtonStyleReady) { _buttonBarPositiveButtonStyleContent = SGetField<int>(LocalBridgeClazz, "buttonBarPositiveButtonStyle"); _buttonBarPositiveButtonStyleReady = true; } return _buttonBarPositiveButtonStyleContent; } }
            private static int _buttonBarPositiveButtonStyleContent = default;
            private static bool _buttonBarPositiveButtonStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#buttonBarStyle"/>
            /// </summary>
            public static int buttonBarStyle { get { if (!_buttonBarStyleReady) { _buttonBarStyleContent = SGetField<int>(LocalBridgeClazz, "buttonBarStyle"); _buttonBarStyleReady = true; } return _buttonBarStyleContent; } }
            private static int _buttonBarStyleContent = default;
            private static bool _buttonBarStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#buttonCornerRadius"/>
            /// </summary>
            public static int buttonCornerRadius { get { if (!_buttonCornerRadiusReady) { _buttonCornerRadiusContent = SGetField<int>(LocalBridgeClazz, "buttonCornerRadius"); _buttonCornerRadiusReady = true; } return _buttonCornerRadiusContent; } }
            private static int _buttonCornerRadiusContent = default;
            private static bool _buttonCornerRadiusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#buttonGravity"/>
            /// </summary>
            public static int buttonGravity { get { if (!_buttonGravityReady) { _buttonGravityContent = SGetField<int>(LocalBridgeClazz, "buttonGravity"); _buttonGravityReady = true; } return _buttonGravityContent; } }
            private static int _buttonGravityContent = default;
            private static bool _buttonGravityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#buttonStyle"/>
            /// </summary>
            public static int buttonStyle { get { if (!_buttonStyleReady) { _buttonStyleContent = SGetField<int>(LocalBridgeClazz, "buttonStyle"); _buttonStyleReady = true; } return _buttonStyleContent; } }
            private static int _buttonStyleContent = default;
            private static bool _buttonStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#buttonStyleInset"/>
            /// </summary>
            public static int buttonStyleInset { get { if (!_buttonStyleInsetReady) { _buttonStyleInsetContent = SGetField<int>(LocalBridgeClazz, "buttonStyleInset"); _buttonStyleInsetReady = true; } return _buttonStyleInsetContent; } }
            private static int _buttonStyleInsetContent = default;
            private static bool _buttonStyleInsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#buttonStyleSmall"/>
            /// </summary>
            public static int buttonStyleSmall { get { if (!_buttonStyleSmallReady) { _buttonStyleSmallContent = SGetField<int>(LocalBridgeClazz, "buttonStyleSmall"); _buttonStyleSmallReady = true; } return _buttonStyleSmallContent; } }
            private static int _buttonStyleSmallContent = default;
            private static bool _buttonStyleSmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#buttonStyleToggle"/>
            /// </summary>
            public static int buttonStyleToggle { get { if (!_buttonStyleToggleReady) { _buttonStyleToggleContent = SGetField<int>(LocalBridgeClazz, "buttonStyleToggle"); _buttonStyleToggleReady = true; } return _buttonStyleToggleContent; } }
            private static int _buttonStyleToggleContent = default;
            private static bool _buttonStyleToggleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#buttonTint"/>
            /// </summary>
            public static int buttonTint { get { if (!_buttonTintReady) { _buttonTintContent = SGetField<int>(LocalBridgeClazz, "buttonTint"); _buttonTintReady = true; } return _buttonTintContent; } }
            private static int _buttonTintContent = default;
            private static bool _buttonTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#buttonTintMode"/>
            /// </summary>
            public static int buttonTintMode { get { if (!_buttonTintModeReady) { _buttonTintModeContent = SGetField<int>(LocalBridgeClazz, "buttonTintMode"); _buttonTintModeReady = true; } return _buttonTintModeContent; } }
            private static int _buttonTintModeContent = default;
            private static bool _buttonTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#cacheColorHint"/>
            /// </summary>
            public static int cacheColorHint { get { if (!_cacheColorHintReady) { _cacheColorHintContent = SGetField<int>(LocalBridgeClazz, "cacheColorHint"); _cacheColorHintReady = true; } return _cacheColorHintContent; } }
            private static int _cacheColorHintContent = default;
            private static bool _cacheColorHintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#calendarTextColor"/>
            /// </summary>
            public static int calendarTextColor { get { if (!_calendarTextColorReady) { _calendarTextColorContent = SGetField<int>(LocalBridgeClazz, "calendarTextColor"); _calendarTextColorReady = true; } return _calendarTextColorContent; } }
            private static int _calendarTextColorContent = default;
            private static bool _calendarTextColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#calendarViewShown"/>
            /// </summary>
            public static int calendarViewShown { get { if (!_calendarViewShownReady) { _calendarViewShownContent = SGetField<int>(LocalBridgeClazz, "calendarViewShown"); _calendarViewShownReady = true; } return _calendarViewShownContent; } }
            private static int _calendarViewShownContent = default;
            private static bool _calendarViewShownReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#calendarViewStyle"/>
            /// </summary>
            public static int calendarViewStyle { get { if (!_calendarViewStyleReady) { _calendarViewStyleContent = SGetField<int>(LocalBridgeClazz, "calendarViewStyle"); _calendarViewStyleReady = true; } return _calendarViewStyleContent; } }
            private static int _calendarViewStyleContent = default;
            private static bool _calendarViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#canControlMagnification"/>
            /// </summary>
            public static int canControlMagnification { get { if (!_canControlMagnificationReady) { _canControlMagnificationContent = SGetField<int>(LocalBridgeClazz, "canControlMagnification"); _canControlMagnificationReady = true; } return _canControlMagnificationContent; } }
            private static int _canControlMagnificationContent = default;
            private static bool _canControlMagnificationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#candidatesTextStyleSpans"/>
            /// </summary>
            public static int candidatesTextStyleSpans { get { if (!_candidatesTextStyleSpansReady) { _candidatesTextStyleSpansContent = SGetField<int>(LocalBridgeClazz, "candidatesTextStyleSpans"); _candidatesTextStyleSpansReady = true; } return _candidatesTextStyleSpansContent; } }
            private static int _candidatesTextStyleSpansContent = default;
            private static bool _candidatesTextStyleSpansReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#canDisplayOnRemoteDevices"/>
            /// </summary>
            public static int canDisplayOnRemoteDevices { get { if (!_canDisplayOnRemoteDevicesReady) { _canDisplayOnRemoteDevicesContent = SGetField<int>(LocalBridgeClazz, "canDisplayOnRemoteDevices"); _canDisplayOnRemoteDevicesReady = true; } return _canDisplayOnRemoteDevicesContent; } }
            private static int _canDisplayOnRemoteDevicesContent = default;
            private static bool _canDisplayOnRemoteDevicesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#canPauseRecording"/>
            /// </summary>
            public static int canPauseRecording { get { if (!_canPauseRecordingReady) { _canPauseRecordingContent = SGetField<int>(LocalBridgeClazz, "canPauseRecording"); _canPauseRecordingReady = true; } return _canPauseRecordingContent; } }
            private static int _canPauseRecordingContent = default;
            private static bool _canPauseRecordingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#canPerformGestures"/>
            /// </summary>
            public static int canPerformGestures { get { if (!_canPerformGesturesReady) { _canPerformGesturesContent = SGetField<int>(LocalBridgeClazz, "canPerformGestures"); _canPerformGesturesReady = true; } return _canPerformGesturesContent; } }
            private static int _canPerformGesturesContent = default;
            private static bool _canPerformGesturesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#canRecord"/>
            /// </summary>
            public static int canRecord { get { if (!_canRecordReady) { _canRecordContent = SGetField<int>(LocalBridgeClazz, "canRecord"); _canRecordReady = true; } return _canRecordContent; } }
            private static int _canRecordContent = default;
            private static bool _canRecordReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#canRequestEnhancedWebAccessibility"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int canRequestEnhancedWebAccessibility { get { if (!_canRequestEnhancedWebAccessibilityReady) { _canRequestEnhancedWebAccessibilityContent = SGetField<int>(LocalBridgeClazz, "canRequestEnhancedWebAccessibility"); _canRequestEnhancedWebAccessibilityReady = true; } return _canRequestEnhancedWebAccessibilityContent; } }
            private static int _canRequestEnhancedWebAccessibilityContent = default;
            private static bool _canRequestEnhancedWebAccessibilityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#canRequestFilterKeyEvents"/>
            /// </summary>
            public static int canRequestFilterKeyEvents { get { if (!_canRequestFilterKeyEventsReady) { _canRequestFilterKeyEventsContent = SGetField<int>(LocalBridgeClazz, "canRequestFilterKeyEvents"); _canRequestFilterKeyEventsReady = true; } return _canRequestFilterKeyEventsContent; } }
            private static int _canRequestFilterKeyEventsContent = default;
            private static bool _canRequestFilterKeyEventsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#canRequestFingerprintGestures"/>
            /// </summary>
            public static int canRequestFingerprintGestures { get { if (!_canRequestFingerprintGesturesReady) { _canRequestFingerprintGesturesContent = SGetField<int>(LocalBridgeClazz, "canRequestFingerprintGestures"); _canRequestFingerprintGesturesReady = true; } return _canRequestFingerprintGesturesContent; } }
            private static int _canRequestFingerprintGesturesContent = default;
            private static bool _canRequestFingerprintGesturesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#canRequestTouchExplorationMode"/>
            /// </summary>
            public static int canRequestTouchExplorationMode { get { if (!_canRequestTouchExplorationModeReady) { _canRequestTouchExplorationModeContent = SGetField<int>(LocalBridgeClazz, "canRequestTouchExplorationMode"); _canRequestTouchExplorationModeReady = true; } return _canRequestTouchExplorationModeContent; } }
            private static int _canRequestTouchExplorationModeContent = default;
            private static bool _canRequestTouchExplorationModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#canRetrieveWindowContent"/>
            /// </summary>
            public static int canRetrieveWindowContent { get { if (!_canRetrieveWindowContentReady) { _canRetrieveWindowContentContent = SGetField<int>(LocalBridgeClazz, "canRetrieveWindowContent"); _canRetrieveWindowContentReady = true; } return _canRetrieveWindowContentContent; } }
            private static int _canRetrieveWindowContentContent = default;
            private static bool _canRetrieveWindowContentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#canTakeScreenshot"/>
            /// </summary>
            public static int canTakeScreenshot { get { if (!_canTakeScreenshotReady) { _canTakeScreenshotContent = SGetField<int>(LocalBridgeClazz, "canTakeScreenshot"); _canTakeScreenshotReady = true; } return _canTakeScreenshotContent; } }
            private static int _canTakeScreenshotContent = default;
            private static bool _canTakeScreenshotReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#cantSaveState"/>
            /// </summary>
            public static int cantSaveState { get { if (!_cantSaveStateReady) { _cantSaveStateContent = SGetField<int>(LocalBridgeClazz, "cantSaveState"); _cantSaveStateReady = true; } return _cantSaveStateContent; } }
            private static int _cantSaveStateContent = default;
            private static bool _cantSaveStateReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#capability"/>
            /// </summary>
            public static int capability { get { if (!_capabilityReady) { _capabilityContent = SGetField<int>(LocalBridgeClazz, "capability"); _capabilityReady = true; } return _capabilityContent; } }
            private static int _capabilityContent = default;
            private static bool _capabilityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#capitalize"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int capitalize { get { if (!_capitalizeReady) { _capitalizeContent = SGetField<int>(LocalBridgeClazz, "capitalize"); _capitalizeReady = true; } return _capitalizeContent; } }
            private static int _capitalizeContent = default;
            private static bool _capitalizeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#category"/>
            /// </summary>
            public static int category { get { if (!_categoryReady) { _categoryContent = SGetField<int>(LocalBridgeClazz, "category"); _categoryReady = true; } return _categoryContent; } }
            private static int _categoryContent = default;
            private static bool _categoryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#centerBright"/>
            /// </summary>
            public static int centerBright { get { if (!_centerBrightReady) { _centerBrightContent = SGetField<int>(LocalBridgeClazz, "centerBright"); _centerBrightReady = true; } return _centerBrightContent; } }
            private static int _centerBrightContent = default;
            private static bool _centerBrightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#centerColor"/>
            /// </summary>
            public static int centerColor { get { if (!_centerColorReady) { _centerColorContent = SGetField<int>(LocalBridgeClazz, "centerColor"); _centerColorReady = true; } return _centerColorContent; } }
            private static int _centerColorContent = default;
            private static bool _centerColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#centerDark"/>
            /// </summary>
            public static int centerDark { get { if (!_centerDarkReady) { _centerDarkContent = SGetField<int>(LocalBridgeClazz, "centerDark"); _centerDarkReady = true; } return _centerDarkContent; } }
            private static int _centerDarkContent = default;
            private static bool _centerDarkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#centerMedium"/>
            /// </summary>
            public static int centerMedium { get { if (!_centerMediumReady) { _centerMediumContent = SGetField<int>(LocalBridgeClazz, "centerMedium"); _centerMediumReady = true; } return _centerMediumContent; } }
            private static int _centerMediumContent = default;
            private static bool _centerMediumReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#centerX"/>
            /// </summary>
            public static int centerX { get { if (!_centerXReady) { _centerXContent = SGetField<int>(LocalBridgeClazz, "centerX"); _centerXReady = true; } return _centerXContent; } }
            private static int _centerXContent = default;
            private static bool _centerXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#centerY"/>
            /// </summary>
            public static int centerY { get { if (!_centerYReady) { _centerYContent = SGetField<int>(LocalBridgeClazz, "centerY"); _centerYReady = true; } return _centerYContent; } }
            private static int _centerYContent = default;
            private static bool _centerYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#certDigest"/>
            /// </summary>
            public static int certDigest { get { if (!_certDigestReady) { _certDigestContent = SGetField<int>(LocalBridgeClazz, "certDigest"); _certDigestReady = true; } return _certDigestContent; } }
            private static int _certDigestContent = default;
            private static bool _certDigestReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#checkable"/>
            /// </summary>
            public static int checkable { get { if (!_checkableReady) { _checkableContent = SGetField<int>(LocalBridgeClazz, "checkable"); _checkableReady = true; } return _checkableContent; } }
            private static int _checkableContent = default;
            private static bool _checkableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#checkableBehavior"/>
            /// </summary>
            public static int checkableBehavior { get { if (!_checkableBehaviorReady) { _checkableBehaviorContent = SGetField<int>(LocalBridgeClazz, "checkableBehavior"); _checkableBehaviorReady = true; } return _checkableBehaviorContent; } }
            private static int _checkableBehaviorContent = default;
            private static bool _checkableBehaviorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#checkBoxPreferenceStyle"/>
            /// </summary>
            public static int checkBoxPreferenceStyle { get { if (!_checkBoxPreferenceStyleReady) { _checkBoxPreferenceStyleContent = SGetField<int>(LocalBridgeClazz, "checkBoxPreferenceStyle"); _checkBoxPreferenceStyleReady = true; } return _checkBoxPreferenceStyleContent; } }
            private static int _checkBoxPreferenceStyleContent = default;
            private static bool _checkBoxPreferenceStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#checkboxStyle"/>
            /// </summary>
            public static int checkboxStyle { get { if (!_checkboxStyleReady) { _checkboxStyleContent = SGetField<int>(LocalBridgeClazz, "checkboxStyle"); _checkboxStyleReady = true; } return _checkboxStyleContent; } }
            private static int _checkboxStyleContent = default;
            private static bool _checkboxStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#checked"/>
            /// </summary>
            public static int checkedField { get { if (!_checkedFieldReady) { _checkedFieldContent = SGetField<int>(LocalBridgeClazz, "checked"); _checkedFieldReady = true; } return _checkedFieldContent; } }
            private static int _checkedFieldContent = default;
            private static bool _checkedFieldReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#checkedButton"/>
            /// </summary>
            public static int checkedButton { get { if (!_checkedButtonReady) { _checkedButtonContent = SGetField<int>(LocalBridgeClazz, "checkedButton"); _checkedButtonReady = true; } return _checkedButtonContent; } }
            private static int _checkedButtonContent = default;
            private static bool _checkedButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#checkedTextViewStyle"/>
            /// </summary>
            public static int checkedTextViewStyle { get { if (!_checkedTextViewStyleReady) { _checkedTextViewStyleContent = SGetField<int>(LocalBridgeClazz, "checkedTextViewStyle"); _checkedTextViewStyleReady = true; } return _checkedTextViewStyleContent; } }
            private static int _checkedTextViewStyleContent = default;
            private static bool _checkedTextViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#checkMark"/>
            /// </summary>
            public static int checkMark { get { if (!_checkMarkReady) { _checkMarkContent = SGetField<int>(LocalBridgeClazz, "checkMark"); _checkMarkReady = true; } return _checkMarkContent; } }
            private static int _checkMarkContent = default;
            private static bool _checkMarkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#checkMarkTint"/>
            /// </summary>
            public static int checkMarkTint { get { if (!_checkMarkTintReady) { _checkMarkTintContent = SGetField<int>(LocalBridgeClazz, "checkMarkTint"); _checkMarkTintReady = true; } return _checkMarkTintContent; } }
            private static int _checkMarkTintContent = default;
            private static bool _checkMarkTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#checkMarkTintMode"/>
            /// </summary>
            public static int checkMarkTintMode { get { if (!_checkMarkTintModeReady) { _checkMarkTintModeContent = SGetField<int>(LocalBridgeClazz, "checkMarkTintMode"); _checkMarkTintModeReady = true; } return _checkMarkTintModeContent; } }
            private static int _checkMarkTintModeContent = default;
            private static bool _checkMarkTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#childDivider"/>
            /// </summary>
            public static int childDivider { get { if (!_childDividerReady) { _childDividerContent = SGetField<int>(LocalBridgeClazz, "childDivider"); _childDividerReady = true; } return _childDividerContent; } }
            private static int _childDividerContent = default;
            private static bool _childDividerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#childIndicator"/>
            /// </summary>
            public static int childIndicator { get { if (!_childIndicatorReady) { _childIndicatorContent = SGetField<int>(LocalBridgeClazz, "childIndicator"); _childIndicatorReady = true; } return _childIndicatorContent; } }
            private static int _childIndicatorContent = default;
            private static bool _childIndicatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#childIndicatorEnd"/>
            /// </summary>
            public static int childIndicatorEnd { get { if (!_childIndicatorEndReady) { _childIndicatorEndContent = SGetField<int>(LocalBridgeClazz, "childIndicatorEnd"); _childIndicatorEndReady = true; } return _childIndicatorEndContent; } }
            private static int _childIndicatorEndContent = default;
            private static bool _childIndicatorEndReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#childIndicatorLeft"/>
            /// </summary>
            public static int childIndicatorLeft { get { if (!_childIndicatorLeftReady) { _childIndicatorLeftContent = SGetField<int>(LocalBridgeClazz, "childIndicatorLeft"); _childIndicatorLeftReady = true; } return _childIndicatorLeftContent; } }
            private static int _childIndicatorLeftContent = default;
            private static bool _childIndicatorLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#childIndicatorRight"/>
            /// </summary>
            public static int childIndicatorRight { get { if (!_childIndicatorRightReady) { _childIndicatorRightContent = SGetField<int>(LocalBridgeClazz, "childIndicatorRight"); _childIndicatorRightReady = true; } return _childIndicatorRightContent; } }
            private static int _childIndicatorRightContent = default;
            private static bool _childIndicatorRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#childIndicatorStart"/>
            /// </summary>
            public static int childIndicatorStart { get { if (!_childIndicatorStartReady) { _childIndicatorStartContent = SGetField<int>(LocalBridgeClazz, "childIndicatorStart"); _childIndicatorStartReady = true; } return _childIndicatorStartContent; } }
            private static int _childIndicatorStartContent = default;
            private static bool _childIndicatorStartReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#choiceMode"/>
            /// </summary>
            public static int choiceMode { get { if (!_choiceModeReady) { _choiceModeContent = SGetField<int>(LocalBridgeClazz, "choiceMode"); _choiceModeReady = true; } return _choiceModeContent; } }
            private static int _choiceModeContent = default;
            private static bool _choiceModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#classLoader"/>
            /// </summary>
            public static int classLoader { get { if (!_classLoaderReady) { _classLoaderContent = SGetField<int>(LocalBridgeClazz, "classLoader"); _classLoaderReady = true; } return _classLoaderContent; } }
            private static int _classLoaderContent = default;
            private static bool _classLoaderReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#clearTaskOnLaunch"/>
            /// </summary>
            public static int clearTaskOnLaunch { get { if (!_clearTaskOnLaunchReady) { _clearTaskOnLaunchContent = SGetField<int>(LocalBridgeClazz, "clearTaskOnLaunch"); _clearTaskOnLaunchReady = true; } return _clearTaskOnLaunchContent; } }
            private static int _clearTaskOnLaunchContent = default;
            private static bool _clearTaskOnLaunchReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#clickable"/>
            /// </summary>
            public static int clickable { get { if (!_clickableReady) { _clickableContent = SGetField<int>(LocalBridgeClazz, "clickable"); _clickableReady = true; } return _clickableContent; } }
            private static int _clickableContent = default;
            private static bool _clickableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#clipChildren"/>
            /// </summary>
            public static int clipChildren { get { if (!_clipChildrenReady) { _clipChildrenContent = SGetField<int>(LocalBridgeClazz, "clipChildren"); _clipChildrenReady = true; } return _clipChildrenContent; } }
            private static int _clipChildrenContent = default;
            private static bool _clipChildrenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#clipOrientation"/>
            /// </summary>
            public static int clipOrientation { get { if (!_clipOrientationReady) { _clipOrientationContent = SGetField<int>(LocalBridgeClazz, "clipOrientation"); _clipOrientationReady = true; } return _clipOrientationContent; } }
            private static int _clipOrientationContent = default;
            private static bool _clipOrientationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#clipToOutline"/>
            /// </summary>
            public static int clipToOutline { get { if (!_clipToOutlineReady) { _clipToOutlineContent = SGetField<int>(LocalBridgeClazz, "clipToOutline"); _clipToOutlineReady = true; } return _clipToOutlineContent; } }
            private static int _clipToOutlineContent = default;
            private static bool _clipToOutlineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#clipToPadding"/>
            /// </summary>
            public static int clipToPadding { get { if (!_clipToPaddingReady) { _clipToPaddingContent = SGetField<int>(LocalBridgeClazz, "clipToPadding"); _clipToPaddingReady = true; } return _clipToPaddingContent; } }
            private static int _clipToPaddingContent = default;
            private static bool _clipToPaddingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#closeIcon"/>
            /// </summary>
            public static int closeIcon { get { if (!_closeIconReady) { _closeIconContent = SGetField<int>(LocalBridgeClazz, "closeIcon"); _closeIconReady = true; } return _closeIconContent; } }
            private static int _closeIconContent = default;
            private static bool _closeIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#codes"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int codes { get { if (!_codesReady) { _codesContent = SGetField<int>(LocalBridgeClazz, "codes"); _codesReady = true; } return _codesContent; } }
            private static int _codesContent = default;
            private static bool _codesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#collapseColumns"/>
            /// </summary>
            public static int collapseColumns { get { if (!_collapseColumnsReady) { _collapseColumnsContent = SGetField<int>(LocalBridgeClazz, "collapseColumns"); _collapseColumnsReady = true; } return _collapseColumnsContent; } }
            private static int _collapseColumnsContent = default;
            private static bool _collapseColumnsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#collapseContentDescription"/>
            /// </summary>
            public static int collapseContentDescription { get { if (!_collapseContentDescriptionReady) { _collapseContentDescriptionContent = SGetField<int>(LocalBridgeClazz, "collapseContentDescription"); _collapseContentDescriptionReady = true; } return _collapseContentDescriptionContent; } }
            private static int _collapseContentDescriptionContent = default;
            private static bool _collapseContentDescriptionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#collapseIcon"/>
            /// </summary>
            public static int collapseIcon { get { if (!_collapseIconReady) { _collapseIconContent = SGetField<int>(LocalBridgeClazz, "collapseIcon"); _collapseIconReady = true; } return _collapseIconContent; } }
            private static int _collapseIconContent = default;
            private static bool _collapseIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#color"/>
            /// </summary>
            public static int colorField { get { if (!_colorFieldReady) { _colorFieldContent = SGetField<int>(LocalBridgeClazz, "color"); _colorFieldReady = true; } return _colorFieldContent; } }
            private static int _colorFieldContent = default;
            private static bool _colorFieldReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorAccent"/>
            /// </summary>
            public static int colorAccent { get { if (!_colorAccentReady) { _colorAccentContent = SGetField<int>(LocalBridgeClazz, "colorAccent"); _colorAccentReady = true; } return _colorAccentContent; } }
            private static int _colorAccentContent = default;
            private static bool _colorAccentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorActivatedHighlight"/>
            /// </summary>
            public static int colorActivatedHighlight { get { if (!_colorActivatedHighlightReady) { _colorActivatedHighlightContent = SGetField<int>(LocalBridgeClazz, "colorActivatedHighlight"); _colorActivatedHighlightReady = true; } return _colorActivatedHighlightContent; } }
            private static int _colorActivatedHighlightContent = default;
            private static bool _colorActivatedHighlightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorBackground"/>
            /// </summary>
            public static int colorBackground { get { if (!_colorBackgroundReady) { _colorBackgroundContent = SGetField<int>(LocalBridgeClazz, "colorBackground"); _colorBackgroundReady = true; } return _colorBackgroundContent; } }
            private static int _colorBackgroundContent = default;
            private static bool _colorBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorBackgroundCacheHint"/>
            /// </summary>
            public static int colorBackgroundCacheHint { get { if (!_colorBackgroundCacheHintReady) { _colorBackgroundCacheHintContent = SGetField<int>(LocalBridgeClazz, "colorBackgroundCacheHint"); _colorBackgroundCacheHintReady = true; } return _colorBackgroundCacheHintContent; } }
            private static int _colorBackgroundCacheHintContent = default;
            private static bool _colorBackgroundCacheHintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorBackgroundFloating"/>
            /// </summary>
            public static int colorBackgroundFloating { get { if (!_colorBackgroundFloatingReady) { _colorBackgroundFloatingContent = SGetField<int>(LocalBridgeClazz, "colorBackgroundFloating"); _colorBackgroundFloatingReady = true; } return _colorBackgroundFloatingContent; } }
            private static int _colorBackgroundFloatingContent = default;
            private static bool _colorBackgroundFloatingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorButtonNormal"/>
            /// </summary>
            public static int colorButtonNormal { get { if (!_colorButtonNormalReady) { _colorButtonNormalContent = SGetField<int>(LocalBridgeClazz, "colorButtonNormal"); _colorButtonNormalReady = true; } return _colorButtonNormalContent; } }
            private static int _colorButtonNormalContent = default;
            private static bool _colorButtonNormalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorControlActivated"/>
            /// </summary>
            public static int colorControlActivated { get { if (!_colorControlActivatedReady) { _colorControlActivatedContent = SGetField<int>(LocalBridgeClazz, "colorControlActivated"); _colorControlActivatedReady = true; } return _colorControlActivatedContent; } }
            private static int _colorControlActivatedContent = default;
            private static bool _colorControlActivatedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorControlHighlight"/>
            /// </summary>
            public static int colorControlHighlight { get { if (!_colorControlHighlightReady) { _colorControlHighlightContent = SGetField<int>(LocalBridgeClazz, "colorControlHighlight"); _colorControlHighlightReady = true; } return _colorControlHighlightContent; } }
            private static int _colorControlHighlightContent = default;
            private static bool _colorControlHighlightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorControlNormal"/>
            /// </summary>
            public static int colorControlNormal { get { if (!_colorControlNormalReady) { _colorControlNormalContent = SGetField<int>(LocalBridgeClazz, "colorControlNormal"); _colorControlNormalReady = true; } return _colorControlNormalContent; } }
            private static int _colorControlNormalContent = default;
            private static bool _colorControlNormalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorEdgeEffect"/>
            /// </summary>
            public static int colorEdgeEffect { get { if (!_colorEdgeEffectReady) { _colorEdgeEffectContent = SGetField<int>(LocalBridgeClazz, "colorEdgeEffect"); _colorEdgeEffectReady = true; } return _colorEdgeEffectContent; } }
            private static int _colorEdgeEffectContent = default;
            private static bool _colorEdgeEffectReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorError"/>
            /// </summary>
            public static int colorError { get { if (!_colorErrorReady) { _colorErrorContent = SGetField<int>(LocalBridgeClazz, "colorError"); _colorErrorReady = true; } return _colorErrorContent; } }
            private static int _colorErrorContent = default;
            private static bool _colorErrorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorFocusedHighlight"/>
            /// </summary>
            public static int colorFocusedHighlight { get { if (!_colorFocusedHighlightReady) { _colorFocusedHighlightContent = SGetField<int>(LocalBridgeClazz, "colorFocusedHighlight"); _colorFocusedHighlightReady = true; } return _colorFocusedHighlightContent; } }
            private static int _colorFocusedHighlightContent = default;
            private static bool _colorFocusedHighlightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorForeground"/>
            /// </summary>
            public static int colorForeground { get { if (!_colorForegroundReady) { _colorForegroundContent = SGetField<int>(LocalBridgeClazz, "colorForeground"); _colorForegroundReady = true; } return _colorForegroundContent; } }
            private static int _colorForegroundContent = default;
            private static bool _colorForegroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorForegroundInverse"/>
            /// </summary>
            public static int colorForegroundInverse { get { if (!_colorForegroundInverseReady) { _colorForegroundInverseContent = SGetField<int>(LocalBridgeClazz, "colorForegroundInverse"); _colorForegroundInverseReady = true; } return _colorForegroundInverseContent; } }
            private static int _colorForegroundInverseContent = default;
            private static bool _colorForegroundInverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorLongPressedHighlight"/>
            /// </summary>
            public static int colorLongPressedHighlight { get { if (!_colorLongPressedHighlightReady) { _colorLongPressedHighlightContent = SGetField<int>(LocalBridgeClazz, "colorLongPressedHighlight"); _colorLongPressedHighlightReady = true; } return _colorLongPressedHighlightContent; } }
            private static int _colorLongPressedHighlightContent = default;
            private static bool _colorLongPressedHighlightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorMode"/>
            /// </summary>
            public static int colorMode { get { if (!_colorModeReady) { _colorModeContent = SGetField<int>(LocalBridgeClazz, "colorMode"); _colorModeReady = true; } return _colorModeContent; } }
            private static int _colorModeContent = default;
            private static bool _colorModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorMultiSelectHighlight"/>
            /// </summary>
            public static int colorMultiSelectHighlight { get { if (!_colorMultiSelectHighlightReady) { _colorMultiSelectHighlightContent = SGetField<int>(LocalBridgeClazz, "colorMultiSelectHighlight"); _colorMultiSelectHighlightReady = true; } return _colorMultiSelectHighlightContent; } }
            private static int _colorMultiSelectHighlightContent = default;
            private static bool _colorMultiSelectHighlightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorPressedHighlight"/>
            /// </summary>
            public static int colorPressedHighlight { get { if (!_colorPressedHighlightReady) { _colorPressedHighlightContent = SGetField<int>(LocalBridgeClazz, "colorPressedHighlight"); _colorPressedHighlightReady = true; } return _colorPressedHighlightContent; } }
            private static int _colorPressedHighlightContent = default;
            private static bool _colorPressedHighlightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorPrimary"/>
            /// </summary>
            public static int colorPrimary { get { if (!_colorPrimaryReady) { _colorPrimaryContent = SGetField<int>(LocalBridgeClazz, "colorPrimary"); _colorPrimaryReady = true; } return _colorPrimaryContent; } }
            private static int _colorPrimaryContent = default;
            private static bool _colorPrimaryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorPrimaryDark"/>
            /// </summary>
            public static int colorPrimaryDark { get { if (!_colorPrimaryDarkReady) { _colorPrimaryDarkContent = SGetField<int>(LocalBridgeClazz, "colorPrimaryDark"); _colorPrimaryDarkReady = true; } return _colorPrimaryDarkContent; } }
            private static int _colorPrimaryDarkContent = default;
            private static bool _colorPrimaryDarkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#colorSecondary"/>
            /// </summary>
            public static int colorSecondary { get { if (!_colorSecondaryReady) { _colorSecondaryContent = SGetField<int>(LocalBridgeClazz, "colorSecondary"); _colorSecondaryReady = true; } return _colorSecondaryContent; } }
            private static int _colorSecondaryContent = default;
            private static bool _colorSecondaryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#columnCount"/>
            /// </summary>
            public static int columnCount { get { if (!_columnCountReady) { _columnCountContent = SGetField<int>(LocalBridgeClazz, "columnCount"); _columnCountReady = true; } return _columnCountContent; } }
            private static int _columnCountContent = default;
            private static bool _columnCountReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#columnDelay"/>
            /// </summary>
            public static int columnDelay { get { if (!_columnDelayReady) { _columnDelayContent = SGetField<int>(LocalBridgeClazz, "columnDelay"); _columnDelayReady = true; } return _columnDelayContent; } }
            private static int _columnDelayContent = default;
            private static bool _columnDelayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#columnOrderPreserved"/>
            /// </summary>
            public static int columnOrderPreserved { get { if (!_columnOrderPreservedReady) { _columnOrderPreservedContent = SGetField<int>(LocalBridgeClazz, "columnOrderPreserved"); _columnOrderPreservedReady = true; } return _columnOrderPreservedContent; } }
            private static int _columnOrderPreservedContent = default;
            private static bool _columnOrderPreservedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#columnWidth"/>
            /// </summary>
            public static int columnWidth { get { if (!_columnWidthReady) { _columnWidthContent = SGetField<int>(LocalBridgeClazz, "columnWidth"); _columnWidthReady = true; } return _columnWidthContent; } }
            private static int _columnWidthContent = default;
            private static bool _columnWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#commitIcon"/>
            /// </summary>
            public static int commitIcon { get { if (!_commitIconReady) { _commitIconContent = SGetField<int>(LocalBridgeClazz, "commitIcon"); _commitIconReady = true; } return _commitIconContent; } }
            private static int _commitIconContent = default;
            private static bool _commitIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#compatibleWidthLimitDp"/>
            /// </summary>
            public static int compatibleWidthLimitDp { get { if (!_compatibleWidthLimitDpReady) { _compatibleWidthLimitDpContent = SGetField<int>(LocalBridgeClazz, "compatibleWidthLimitDp"); _compatibleWidthLimitDpReady = true; } return _compatibleWidthLimitDpContent; } }
            private static int _compatibleWidthLimitDpContent = default;
            private static bool _compatibleWidthLimitDpReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#completionHint"/>
            /// </summary>
            public static int completionHint { get { if (!_completionHintReady) { _completionHintContent = SGetField<int>(LocalBridgeClazz, "completionHint"); _completionHintReady = true; } return _completionHintContent; } }
            private static int _completionHintContent = default;
            private static bool _completionHintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#completionHintView"/>
            /// </summary>
            public static int completionHintView { get { if (!_completionHintViewReady) { _completionHintViewContent = SGetField<int>(LocalBridgeClazz, "completionHintView"); _completionHintViewReady = true; } return _completionHintViewContent; } }
            private static int _completionHintViewContent = default;
            private static bool _completionHintViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#completionThreshold"/>
            /// </summary>
            public static int completionThreshold { get { if (!_completionThresholdReady) { _completionThresholdContent = SGetField<int>(LocalBridgeClazz, "completionThreshold"); _completionThresholdReady = true; } return _completionThresholdContent; } }
            private static int _completionThresholdContent = default;
            private static bool _completionThresholdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#configChanges"/>
            /// </summary>
            public static int configChanges { get { if (!_configChangesReady) { _configChangesContent = SGetField<int>(LocalBridgeClazz, "configChanges"); _configChangesReady = true; } return _configChangesContent; } }
            private static int _configChangesContent = default;
            private static bool _configChangesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#configure"/>
            /// </summary>
            public static int configure { get { if (!_configureReady) { _configureContent = SGetField<int>(LocalBridgeClazz, "configure"); _configureReady = true; } return _configureContent; } }
            private static int _configureContent = default;
            private static bool _configureReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#constantSize"/>
            /// </summary>
            public static int constantSize { get { if (!_constantSizeReady) { _constantSizeContent = SGetField<int>(LocalBridgeClazz, "constantSize"); _constantSizeReady = true; } return _constantSizeContent; } }
            private static int _constantSizeContent = default;
            private static bool _constantSizeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#content"/>
            /// </summary>
            public static int content { get { if (!_contentReady) { _contentContent = SGetField<int>(LocalBridgeClazz, "content"); _contentReady = true; } return _contentContent; } }
            private static int _contentContent = default;
            private static bool _contentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#contentAgeHint"/>
            /// </summary>
            public static int contentAgeHint { get { if (!_contentAgeHintReady) { _contentAgeHintContent = SGetField<int>(LocalBridgeClazz, "contentAgeHint"); _contentAgeHintReady = true; } return _contentAgeHintContent; } }
            private static int _contentAgeHintContent = default;
            private static bool _contentAgeHintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#contentAuthority"/>
            /// </summary>
            public static int contentAuthority { get { if (!_contentAuthorityReady) { _contentAuthorityContent = SGetField<int>(LocalBridgeClazz, "contentAuthority"); _contentAuthorityReady = true; } return _contentAuthorityContent; } }
            private static int _contentAuthorityContent = default;
            private static bool _contentAuthorityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#contentDescription"/>
            /// </summary>
            public static int contentDescription { get { if (!_contentDescriptionReady) { _contentDescriptionContent = SGetField<int>(LocalBridgeClazz, "contentDescription"); _contentDescriptionReady = true; } return _contentDescriptionContent; } }
            private static int _contentDescriptionContent = default;
            private static bool _contentDescriptionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#contentInsetEnd"/>
            /// </summary>
            public static int contentInsetEnd { get { if (!_contentInsetEndReady) { _contentInsetEndContent = SGetField<int>(LocalBridgeClazz, "contentInsetEnd"); _contentInsetEndReady = true; } return _contentInsetEndContent; } }
            private static int _contentInsetEndContent = default;
            private static bool _contentInsetEndReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#contentInsetEndWithActions"/>
            /// </summary>
            public static int contentInsetEndWithActions { get { if (!_contentInsetEndWithActionsReady) { _contentInsetEndWithActionsContent = SGetField<int>(LocalBridgeClazz, "contentInsetEndWithActions"); _contentInsetEndWithActionsReady = true; } return _contentInsetEndWithActionsContent; } }
            private static int _contentInsetEndWithActionsContent = default;
            private static bool _contentInsetEndWithActionsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#contentInsetLeft"/>
            /// </summary>
            public static int contentInsetLeft { get { if (!_contentInsetLeftReady) { _contentInsetLeftContent = SGetField<int>(LocalBridgeClazz, "contentInsetLeft"); _contentInsetLeftReady = true; } return _contentInsetLeftContent; } }
            private static int _contentInsetLeftContent = default;
            private static bool _contentInsetLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#contentInsetRight"/>
            /// </summary>
            public static int contentInsetRight { get { if (!_contentInsetRightReady) { _contentInsetRightContent = SGetField<int>(LocalBridgeClazz, "contentInsetRight"); _contentInsetRightReady = true; } return _contentInsetRightContent; } }
            private static int _contentInsetRightContent = default;
            private static bool _contentInsetRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#contentInsetStart"/>
            /// </summary>
            public static int contentInsetStart { get { if (!_contentInsetStartReady) { _contentInsetStartContent = SGetField<int>(LocalBridgeClazz, "contentInsetStart"); _contentInsetStartReady = true; } return _contentInsetStartContent; } }
            private static int _contentInsetStartContent = default;
            private static bool _contentInsetStartReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#contentInsetStartWithNavigation"/>
            /// </summary>
            public static int contentInsetStartWithNavigation { get { if (!_contentInsetStartWithNavigationReady) { _contentInsetStartWithNavigationContent = SGetField<int>(LocalBridgeClazz, "contentInsetStartWithNavigation"); _contentInsetStartWithNavigationReady = true; } return _contentInsetStartWithNavigationContent; } }
            private static int _contentInsetStartWithNavigationContent = default;
            private static bool _contentInsetStartWithNavigationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#contentSensitivity"/>
            /// </summary>
            public static int contentSensitivity { get { if (!_contentSensitivityReady) { _contentSensitivityContent = SGetField<int>(LocalBridgeClazz, "contentSensitivity"); _contentSensitivityReady = true; } return _contentSensitivityContent; } }
            private static int _contentSensitivityContent = default;
            private static bool _contentSensitivityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#contextClickable"/>
            /// </summary>
            public static int contextClickable { get { if (!_contextClickableReady) { _contextClickableContent = SGetField<int>(LocalBridgeClazz, "contextClickable"); _contextClickableReady = true; } return _contextClickableContent; } }
            private static int _contextClickableContent = default;
            private static bool _contextClickableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#contextDescription"/>
            /// </summary>
            public static int contextDescription { get { if (!_contextDescriptionReady) { _contextDescriptionContent = SGetField<int>(LocalBridgeClazz, "contextDescription"); _contextDescriptionReady = true; } return _contextDescriptionContent; } }
            private static int _contextDescriptionContent = default;
            private static bool _contextDescriptionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#contextPopupMenuStyle"/>
            /// </summary>
            public static int contextPopupMenuStyle { get { if (!_contextPopupMenuStyleReady) { _contextPopupMenuStyleContent = SGetField<int>(LocalBridgeClazz, "contextPopupMenuStyle"); _contextPopupMenuStyleReady = true; } return _contextPopupMenuStyleContent; } }
            private static int _contextPopupMenuStyleContent = default;
            private static bool _contextPopupMenuStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#contextUri"/>
            /// </summary>
            public static int contextUri { get { if (!_contextUriReady) { _contextUriContent = SGetField<int>(LocalBridgeClazz, "contextUri"); _contextUriReady = true; } return _contextUriContent; } }
            private static int _contextUriContent = default;
            private static bool _contextUriReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#controlX1"/>
            /// </summary>
            public static int controlX1 { get { if (!_controlX1Ready) { _controlX1Content = SGetField<int>(LocalBridgeClazz, "controlX1"); _controlX1Ready = true; } return _controlX1Content; } }
            private static int _controlX1Content = default;
            private static bool _controlX1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#controlX2"/>
            /// </summary>
            public static int controlX2 { get { if (!_controlX2Ready) { _controlX2Content = SGetField<int>(LocalBridgeClazz, "controlX2"); _controlX2Ready = true; } return _controlX2Content; } }
            private static int _controlX2Content = default;
            private static bool _controlX2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#controlY1"/>
            /// </summary>
            public static int controlY1 { get { if (!_controlY1Ready) { _controlY1Content = SGetField<int>(LocalBridgeClazz, "controlY1"); _controlY1Ready = true; } return _controlY1Content; } }
            private static int _controlY1Content = default;
            private static bool _controlY1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#controlY2"/>
            /// </summary>
            public static int controlY2 { get { if (!_controlY2Ready) { _controlY2Content = SGetField<int>(LocalBridgeClazz, "controlY2"); _controlY2Ready = true; } return _controlY2Content; } }
            private static int _controlY2Content = default;
            private static bool _controlY2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#countDown"/>
            /// </summary>
            public static int countDown { get { if (!_countDownReady) { _countDownContent = SGetField<int>(LocalBridgeClazz, "countDown"); _countDownReady = true; } return _countDownContent; } }
            private static int _countDownContent = default;
            private static bool _countDownReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#country"/>
            /// </summary>
            public static int country { get { if (!_countryReady) { _countryContent = SGetField<int>(LocalBridgeClazz, "country"); _countryReady = true; } return _countryContent; } }
            private static int _countryContent = default;
            private static bool _countryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#cropToPadding"/>
            /// </summary>
            public static int cropToPadding { get { if (!_cropToPaddingReady) { _cropToPaddingContent = SGetField<int>(LocalBridgeClazz, "cropToPadding"); _cropToPaddingReady = true; } return _cropToPaddingContent; } }
            private static int _cropToPaddingContent = default;
            private static bool _cropToPaddingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#crossProfile"/>
            /// </summary>
            public static int crossProfile { get { if (!_crossProfileReady) { _crossProfileContent = SGetField<int>(LocalBridgeClazz, "crossProfile"); _crossProfileReady = true; } return _crossProfileContent; } }
            private static int _crossProfileContent = default;
            private static bool _crossProfileReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#cursorVisible"/>
            /// </summary>
            public static int cursorVisible { get { if (!_cursorVisibleReady) { _cursorVisibleContent = SGetField<int>(LocalBridgeClazz, "cursorVisible"); _cursorVisibleReady = true; } return _cursorVisibleContent; } }
            private static int _cursorVisibleContent = default;
            private static bool _cursorVisibleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#customNavigationLayout"/>
            /// </summary>
            public static int customNavigationLayout { get { if (!_customNavigationLayoutReady) { _customNavigationLayoutContent = SGetField<int>(LocalBridgeClazz, "customNavigationLayout"); _customNavigationLayoutReady = true; } return _customNavigationLayoutContent; } }
            private static int _customNavigationLayoutContent = default;
            private static bool _customNavigationLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#customTokens"/>
            /// </summary>
            public static int customTokens { get { if (!_customTokensReady) { _customTokensContent = SGetField<int>(LocalBridgeClazz, "customTokens"); _customTokensReady = true; } return _customTokensContent; } }
            private static int _customTokensContent = default;
            private static bool _customTokensReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#cycles"/>
            /// </summary>
            public static int cycles { get { if (!_cyclesReady) { _cyclesContent = SGetField<int>(LocalBridgeClazz, "cycles"); _cyclesReady = true; } return _cyclesContent; } }
            private static int _cyclesContent = default;
            private static bool _cyclesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dashGap"/>
            /// </summary>
            public static int dashGap { get { if (!_dashGapReady) { _dashGapContent = SGetField<int>(LocalBridgeClazz, "dashGap"); _dashGapReady = true; } return _dashGapContent; } }
            private static int _dashGapContent = default;
            private static bool _dashGapReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dashWidth"/>
            /// </summary>
            public static int dashWidth { get { if (!_dashWidthReady) { _dashWidthContent = SGetField<int>(LocalBridgeClazz, "dashWidth"); _dashWidthReady = true; } return _dashWidthContent; } }
            private static int _dashWidthContent = default;
            private static bool _dashWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#data"/>
            /// </summary>
            public static int data { get { if (!_dataReady) { _dataContent = SGetField<int>(LocalBridgeClazz, "data"); _dataReady = true; } return _dataContent; } }
            private static int _dataContent = default;
            private static bool _dataReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dataExtractionRules"/>
            /// </summary>
            public static int dataExtractionRules { get { if (!_dataExtractionRulesReady) { _dataExtractionRulesContent = SGetField<int>(LocalBridgeClazz, "dataExtractionRules"); _dataExtractionRulesReady = true; } return _dataExtractionRulesContent; } }
            private static int _dataExtractionRulesContent = default;
            private static bool _dataExtractionRulesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#datePickerDialogTheme"/>
            /// </summary>
            public static int datePickerDialogTheme { get { if (!_datePickerDialogThemeReady) { _datePickerDialogThemeContent = SGetField<int>(LocalBridgeClazz, "datePickerDialogTheme"); _datePickerDialogThemeReady = true; } return _datePickerDialogThemeContent; } }
            private static int _datePickerDialogThemeContent = default;
            private static bool _datePickerDialogThemeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#datePickerMode"/>
            /// </summary>
            public static int datePickerMode { get { if (!_datePickerModeReady) { _datePickerModeContent = SGetField<int>(LocalBridgeClazz, "datePickerMode"); _datePickerModeReady = true; } return _datePickerModeContent; } }
            private static int _datePickerModeContent = default;
            private static bool _datePickerModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#datePickerStyle"/>
            /// </summary>
            public static int datePickerStyle { get { if (!_datePickerStyleReady) { _datePickerStyleContent = SGetField<int>(LocalBridgeClazz, "datePickerStyle"); _datePickerStyleReady = true; } return _datePickerStyleContent; } }
            private static int _datePickerStyleContent = default;
            private static bool _datePickerStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dateTextAppearance"/>
            /// </summary>
            public static int dateTextAppearance { get { if (!_dateTextAppearanceReady) { _dateTextAppearanceContent = SGetField<int>(LocalBridgeClazz, "dateTextAppearance"); _dateTextAppearanceReady = true; } return _dateTextAppearanceContent; } }
            private static int _dateTextAppearanceContent = default;
            private static bool _dateTextAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dayOfWeekBackground"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int dayOfWeekBackground { get { if (!_dayOfWeekBackgroundReady) { _dayOfWeekBackgroundContent = SGetField<int>(LocalBridgeClazz, "dayOfWeekBackground"); _dayOfWeekBackgroundReady = true; } return _dayOfWeekBackgroundContent; } }
            private static int _dayOfWeekBackgroundContent = default;
            private static bool _dayOfWeekBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dayOfWeekTextAppearance"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int dayOfWeekTextAppearance { get { if (!_dayOfWeekTextAppearanceReady) { _dayOfWeekTextAppearanceContent = SGetField<int>(LocalBridgeClazz, "dayOfWeekTextAppearance"); _dayOfWeekTextAppearanceReady = true; } return _dayOfWeekTextAppearanceContent; } }
            private static int _dayOfWeekTextAppearanceContent = default;
            private static bool _dayOfWeekTextAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#debuggable"/>
            /// </summary>
            public static int debuggable { get { if (!_debuggableReady) { _debuggableContent = SGetField<int>(LocalBridgeClazz, "debuggable"); _debuggableReady = true; } return _debuggableContent; } }
            private static int _debuggableContent = default;
            private static bool _debuggableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#defaultFocusHighlightEnabled"/>
            /// </summary>
            public static int defaultFocusHighlightEnabled { get { if (!_defaultFocusHighlightEnabledReady) { _defaultFocusHighlightEnabledContent = SGetField<int>(LocalBridgeClazz, "defaultFocusHighlightEnabled"); _defaultFocusHighlightEnabledReady = true; } return _defaultFocusHighlightEnabledContent; } }
            private static int _defaultFocusHighlightEnabledContent = default;
            private static bool _defaultFocusHighlightEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#defaultHeight"/>
            /// </summary>
            public static int defaultHeight { get { if (!_defaultHeightReady) { _defaultHeightContent = SGetField<int>(LocalBridgeClazz, "defaultHeight"); _defaultHeightReady = true; } return _defaultHeightContent; } }
            private static int _defaultHeightContent = default;
            private static bool _defaultHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#defaultLocale"/>
            /// </summary>
            public static int defaultLocale { get { if (!_defaultLocaleReady) { _defaultLocaleContent = SGetField<int>(LocalBridgeClazz, "defaultLocale"); _defaultLocaleReady = true; } return _defaultLocaleContent; } }
            private static int _defaultLocaleContent = default;
            private static bool _defaultLocaleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#defaultToDeviceProtectedStorage"/>
            /// </summary>
            public static int defaultToDeviceProtectedStorage { get { if (!_defaultToDeviceProtectedStorageReady) { _defaultToDeviceProtectedStorageContent = SGetField<int>(LocalBridgeClazz, "defaultToDeviceProtectedStorage"); _defaultToDeviceProtectedStorageReady = true; } return _defaultToDeviceProtectedStorageContent; } }
            private static int _defaultToDeviceProtectedStorageContent = default;
            private static bool _defaultToDeviceProtectedStorageReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#defaultValue"/>
            /// </summary>
            public static int defaultValue { get { if (!_defaultValueReady) { _defaultValueContent = SGetField<int>(LocalBridgeClazz, "defaultValue"); _defaultValueReady = true; } return _defaultValueContent; } }
            private static int _defaultValueContent = default;
            private static bool _defaultValueReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#defaultWidth"/>
            /// </summary>
            public static int defaultWidth { get { if (!_defaultWidthReady) { _defaultWidthContent = SGetField<int>(LocalBridgeClazz, "defaultWidth"); _defaultWidthReady = true; } return _defaultWidthContent; } }
            private static int _defaultWidthContent = default;
            private static bool _defaultWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#delay"/>
            /// </summary>
            public static int delay { get { if (!_delayReady) { _delayContent = SGetField<int>(LocalBridgeClazz, "delay"); _delayReady = true; } return _delayContent; } }
            private static int _delayContent = default;
            private static bool _delayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dependency"/>
            /// </summary>
            public static int dependency { get { if (!_dependencyReady) { _dependencyContent = SGetField<int>(LocalBridgeClazz, "dependency"); _dependencyReady = true; } return _dependencyContent; } }
            private static int _dependencyContent = default;
            private static bool _dependencyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#descendantFocusability"/>
            /// </summary>
            public static int descendantFocusability { get { if (!_descendantFocusabilityReady) { _descendantFocusabilityContent = SGetField<int>(LocalBridgeClazz, "descendantFocusability"); _descendantFocusabilityReady = true; } return _descendantFocusabilityContent; } }
            private static int _descendantFocusabilityContent = default;
            private static bool _descendantFocusabilityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#description"/>
            /// </summary>
            public static int description { get { if (!_descriptionReady) { _descriptionContent = SGetField<int>(LocalBridgeClazz, "description"); _descriptionReady = true; } return _descriptionContent; } }
            private static int _descriptionContent = default;
            private static bool _descriptionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#detachWallpaper"/>
            /// </summary>
            public static int detachWallpaper { get { if (!_detachWallpaperReady) { _detachWallpaperContent = SGetField<int>(LocalBridgeClazz, "detachWallpaper"); _detachWallpaperReady = true; } return _detachWallpaperContent; } }
            private static int _detachWallpaperContent = default;
            private static bool _detachWallpaperReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#detailColumn"/>
            /// </summary>
            public static int detailColumn { get { if (!_detailColumnReady) { _detailColumnContent = SGetField<int>(LocalBridgeClazz, "detailColumn"); _detailColumnReady = true; } return _detailColumnContent; } }
            private static int _detailColumnContent = default;
            private static bool _detailColumnReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#detailsElementBackground"/>
            /// </summary>
            public static int detailsElementBackground { get { if (!_detailsElementBackgroundReady) { _detailsElementBackgroundContent = SGetField<int>(LocalBridgeClazz, "detailsElementBackground"); _detailsElementBackgroundReady = true; } return _detailsElementBackgroundContent; } }
            private static int _detailsElementBackgroundContent = default;
            private static bool _detailsElementBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#detailSocialSummary"/>
            /// </summary>
            public static int detailSocialSummary { get { if (!_detailSocialSummaryReady) { _detailSocialSummaryContent = SGetField<int>(LocalBridgeClazz, "detailSocialSummary"); _detailSocialSummaryReady = true; } return _detailSocialSummaryContent; } }
            private static int _detailSocialSummaryContent = default;
            private static bool _detailSocialSummaryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dial"/>
            /// </summary>
            public static int dial { get { if (!_dialReady) { _dialContent = SGetField<int>(LocalBridgeClazz, "dial"); _dialReady = true; } return _dialContent; } }
            private static int _dialContent = default;
            private static bool _dialReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dialogCornerRadius"/>
            /// </summary>
            public static int dialogCornerRadius { get { if (!_dialogCornerRadiusReady) { _dialogCornerRadiusContent = SGetField<int>(LocalBridgeClazz, "dialogCornerRadius"); _dialogCornerRadiusReady = true; } return _dialogCornerRadiusContent; } }
            private static int _dialogCornerRadiusContent = default;
            private static bool _dialogCornerRadiusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dialogIcon"/>
            /// </summary>
            public static int dialogIcon { get { if (!_dialogIconReady) { _dialogIconContent = SGetField<int>(LocalBridgeClazz, "dialogIcon"); _dialogIconReady = true; } return _dialogIconContent; } }
            private static int _dialogIconContent = default;
            private static bool _dialogIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dialogLayout"/>
            /// </summary>
            public static int dialogLayout { get { if (!_dialogLayoutReady) { _dialogLayoutContent = SGetField<int>(LocalBridgeClazz, "dialogLayout"); _dialogLayoutReady = true; } return _dialogLayoutContent; } }
            private static int _dialogLayoutContent = default;
            private static bool _dialogLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dialogMessage"/>
            /// </summary>
            public static int dialogMessage { get { if (!_dialogMessageReady) { _dialogMessageContent = SGetField<int>(LocalBridgeClazz, "dialogMessage"); _dialogMessageReady = true; } return _dialogMessageContent; } }
            private static int _dialogMessageContent = default;
            private static bool _dialogMessageReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dialogPreferenceStyle"/>
            /// </summary>
            public static int dialogPreferenceStyle { get { if (!_dialogPreferenceStyleReady) { _dialogPreferenceStyleContent = SGetField<int>(LocalBridgeClazz, "dialogPreferenceStyle"); _dialogPreferenceStyleReady = true; } return _dialogPreferenceStyleContent; } }
            private static int _dialogPreferenceStyleContent = default;
            private static bool _dialogPreferenceStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dialogPreferredPadding"/>
            /// </summary>
            public static int dialogPreferredPadding { get { if (!_dialogPreferredPaddingReady) { _dialogPreferredPaddingContent = SGetField<int>(LocalBridgeClazz, "dialogPreferredPadding"); _dialogPreferredPaddingReady = true; } return _dialogPreferredPaddingContent; } }
            private static int _dialogPreferredPaddingContent = default;
            private static bool _dialogPreferredPaddingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dialogTheme"/>
            /// </summary>
            public static int dialogTheme { get { if (!_dialogThemeReady) { _dialogThemeContent = SGetField<int>(LocalBridgeClazz, "dialogTheme"); _dialogThemeReady = true; } return _dialogThemeContent; } }
            private static int _dialogThemeContent = default;
            private static bool _dialogThemeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dialogTitle"/>
            /// </summary>
            public static int dialogTitle { get { if (!_dialogTitleReady) { _dialogTitleContent = SGetField<int>(LocalBridgeClazz, "dialogTitle"); _dialogTitleReady = true; } return _dialogTitleContent; } }
            private static int _dialogTitleContent = default;
            private static bool _dialogTitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dialTint"/>
            /// </summary>
            public static int dialTint { get { if (!_dialTintReady) { _dialTintContent = SGetField<int>(LocalBridgeClazz, "dialTint"); _dialTintReady = true; } return _dialTintContent; } }
            private static int _dialTintContent = default;
            private static bool _dialTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dialTintMode"/>
            /// </summary>
            public static int dialTintMode { get { if (!_dialTintModeReady) { _dialTintModeContent = SGetField<int>(LocalBridgeClazz, "dialTintMode"); _dialTintModeReady = true; } return _dialTintModeContent; } }
            private static int _dialTintModeContent = default;
            private static bool _dialTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#digits"/>
            /// </summary>
            public static int digits { get { if (!_digitsReady) { _digitsContent = SGetField<int>(LocalBridgeClazz, "digits"); _digitsReady = true; } return _digitsContent; } }
            private static int _digitsContent = default;
            private static bool _digitsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#directBootAware"/>
            /// </summary>
            public static int directBootAware { get { if (!_directBootAwareReady) { _directBootAwareContent = SGetField<int>(LocalBridgeClazz, "directBootAware"); _directBootAwareReady = true; } return _directBootAwareContent; } }
            private static int _directBootAwareContent = default;
            private static bool _directBootAwareReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#direction"/>
            /// </summary>
            public static int direction { get { if (!_directionReady) { _directionContent = SGetField<int>(LocalBridgeClazz, "direction"); _directionReady = true; } return _directionContent; } }
            private static int _directionContent = default;
            private static bool _directionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#directionDescriptions"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int directionDescriptions { get { if (!_directionDescriptionsReady) { _directionDescriptionsContent = SGetField<int>(LocalBridgeClazz, "directionDescriptions"); _directionDescriptionsReady = true; } return _directionDescriptionsContent; } }
            private static int _directionDescriptionsContent = default;
            private static bool _directionDescriptionsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#directionPriority"/>
            /// </summary>
            public static int directionPriority { get { if (!_directionPriorityReady) { _directionPriorityContent = SGetField<int>(LocalBridgeClazz, "directionPriority"); _directionPriorityReady = true; } return _directionPriorityContent; } }
            private static int _directionPriorityContent = default;
            private static bool _directionPriorityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#disabledAlpha"/>
            /// </summary>
            public static int disabledAlpha { get { if (!_disabledAlphaReady) { _disabledAlphaContent = SGetField<int>(LocalBridgeClazz, "disabledAlpha"); _disabledAlphaReady = true; } return _disabledAlphaContent; } }
            private static int _disabledAlphaContent = default;
            private static bool _disabledAlphaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#disableDependentsState"/>
            /// </summary>
            public static int disableDependentsState { get { if (!_disableDependentsStateReady) { _disableDependentsStateContent = SGetField<int>(LocalBridgeClazz, "disableDependentsState"); _disableDependentsStateReady = true; } return _disableDependentsStateContent; } }
            private static int _disableDependentsStateContent = default;
            private static bool _disableDependentsStateReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#displayOptions"/>
            /// </summary>
            public static int displayOptions { get { if (!_displayOptionsReady) { _displayOptionsContent = SGetField<int>(LocalBridgeClazz, "displayOptions"); _displayOptionsReady = true; } return _displayOptionsContent; } }
            private static int _displayOptionsContent = default;
            private static bool _displayOptionsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dither"/>
            /// </summary>
            public static int dither { get { if (!_ditherReady) { _ditherContent = SGetField<int>(LocalBridgeClazz, "dither"); _ditherReady = true; } return _ditherContent; } }
            private static int _ditherContent = default;
            private static bool _ditherReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#divider"/>
            /// </summary>
            public static int divider { get { if (!_dividerReady) { _dividerContent = SGetField<int>(LocalBridgeClazz, "divider"); _dividerReady = true; } return _dividerContent; } }
            private static int _dividerContent = default;
            private static bool _dividerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dividerHeight"/>
            /// </summary>
            public static int dividerHeight { get { if (!_dividerHeightReady) { _dividerHeightContent = SGetField<int>(LocalBridgeClazz, "dividerHeight"); _dividerHeightReady = true; } return _dividerHeightContent; } }
            private static int _dividerHeightContent = default;
            private static bool _dividerHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dividerHorizontal"/>
            /// </summary>
            public static int dividerHorizontal { get { if (!_dividerHorizontalReady) { _dividerHorizontalContent = SGetField<int>(LocalBridgeClazz, "dividerHorizontal"); _dividerHorizontalReady = true; } return _dividerHorizontalContent; } }
            private static int _dividerHorizontalContent = default;
            private static bool _dividerHorizontalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dividerPadding"/>
            /// </summary>
            public static int dividerPadding { get { if (!_dividerPaddingReady) { _dividerPaddingContent = SGetField<int>(LocalBridgeClazz, "dividerPadding"); _dividerPaddingReady = true; } return _dividerPaddingContent; } }
            private static int _dividerPaddingContent = default;
            private static bool _dividerPaddingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dividerVertical"/>
            /// </summary>
            public static int dividerVertical { get { if (!_dividerVerticalReady) { _dividerVerticalContent = SGetField<int>(LocalBridgeClazz, "dividerVertical"); _dividerVerticalReady = true; } return _dividerVerticalContent; } }
            private static int _dividerVerticalContent = default;
            private static bool _dividerVerticalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#documentLaunchMode"/>
            /// </summary>
            public static int documentLaunchMode { get { if (!_documentLaunchModeReady) { _documentLaunchModeContent = SGetField<int>(LocalBridgeClazz, "documentLaunchMode"); _documentLaunchModeReady = true; } return _documentLaunchModeContent; } }
            private static int _documentLaunchModeContent = default;
            private static bool _documentLaunchModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#drawable"/>
            /// </summary>
            public static int drawableField { get { if (!_drawableFieldReady) { _drawableFieldContent = SGetField<int>(LocalBridgeClazz, "drawable"); _drawableFieldReady = true; } return _drawableFieldContent; } }
            private static int _drawableFieldContent = default;
            private static bool _drawableFieldReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#drawableBottom"/>
            /// </summary>
            public static int drawableBottom { get { if (!_drawableBottomReady) { _drawableBottomContent = SGetField<int>(LocalBridgeClazz, "drawableBottom"); _drawableBottomReady = true; } return _drawableBottomContent; } }
            private static int _drawableBottomContent = default;
            private static bool _drawableBottomReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#drawableEnd"/>
            /// </summary>
            public static int drawableEnd { get { if (!_drawableEndReady) { _drawableEndContent = SGetField<int>(LocalBridgeClazz, "drawableEnd"); _drawableEndReady = true; } return _drawableEndContent; } }
            private static int _drawableEndContent = default;
            private static bool _drawableEndReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#drawableLeft"/>
            /// </summary>
            public static int drawableLeft { get { if (!_drawableLeftReady) { _drawableLeftContent = SGetField<int>(LocalBridgeClazz, "drawableLeft"); _drawableLeftReady = true; } return _drawableLeftContent; } }
            private static int _drawableLeftContent = default;
            private static bool _drawableLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#drawablePadding"/>
            /// </summary>
            public static int drawablePadding { get { if (!_drawablePaddingReady) { _drawablePaddingContent = SGetField<int>(LocalBridgeClazz, "drawablePadding"); _drawablePaddingReady = true; } return _drawablePaddingContent; } }
            private static int _drawablePaddingContent = default;
            private static bool _drawablePaddingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#drawableRight"/>
            /// </summary>
            public static int drawableRight { get { if (!_drawableRightReady) { _drawableRightContent = SGetField<int>(LocalBridgeClazz, "drawableRight"); _drawableRightReady = true; } return _drawableRightContent; } }
            private static int _drawableRightContent = default;
            private static bool _drawableRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#drawableStart"/>
            /// </summary>
            public static int drawableStart { get { if (!_drawableStartReady) { _drawableStartContent = SGetField<int>(LocalBridgeClazz, "drawableStart"); _drawableStartReady = true; } return _drawableStartContent; } }
            private static int _drawableStartContent = default;
            private static bool _drawableStartReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#drawableTint"/>
            /// </summary>
            public static int drawableTint { get { if (!_drawableTintReady) { _drawableTintContent = SGetField<int>(LocalBridgeClazz, "drawableTint"); _drawableTintReady = true; } return _drawableTintContent; } }
            private static int _drawableTintContent = default;
            private static bool _drawableTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#drawableTintMode"/>
            /// </summary>
            public static int drawableTintMode { get { if (!_drawableTintModeReady) { _drawableTintModeContent = SGetField<int>(LocalBridgeClazz, "drawableTintMode"); _drawableTintModeReady = true; } return _drawableTintModeContent; } }
            private static int _drawableTintModeContent = default;
            private static bool _drawableTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#drawableTop"/>
            /// </summary>
            public static int drawableTop { get { if (!_drawableTopReady) { _drawableTopContent = SGetField<int>(LocalBridgeClazz, "drawableTop"); _drawableTopReady = true; } return _drawableTopContent; } }
            private static int _drawableTopContent = default;
            private static bool _drawableTopReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#drawingCacheQuality"/>
            /// </summary>
            public static int drawingCacheQuality { get { if (!_drawingCacheQualityReady) { _drawingCacheQualityContent = SGetField<int>(LocalBridgeClazz, "drawingCacheQuality"); _drawingCacheQualityReady = true; } return _drawingCacheQualityContent; } }
            private static int _drawingCacheQualityContent = default;
            private static bool _drawingCacheQualityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#drawSelectorOnTop"/>
            /// </summary>
            public static int drawSelectorOnTop { get { if (!_drawSelectorOnTopReady) { _drawSelectorOnTopContent = SGetField<int>(LocalBridgeClazz, "drawSelectorOnTop"); _drawSelectorOnTopReady = true; } return _drawSelectorOnTopContent; } }
            private static int _drawSelectorOnTopContent = default;
            private static bool _drawSelectorOnTopReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dropDownAnchor"/>
            /// </summary>
            public static int dropDownAnchor { get { if (!_dropDownAnchorReady) { _dropDownAnchorContent = SGetField<int>(LocalBridgeClazz, "dropDownAnchor"); _dropDownAnchorReady = true; } return _dropDownAnchorContent; } }
            private static int _dropDownAnchorContent = default;
            private static bool _dropDownAnchorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dropDownHeight"/>
            /// </summary>
            public static int dropDownHeight { get { if (!_dropDownHeightReady) { _dropDownHeightContent = SGetField<int>(LocalBridgeClazz, "dropDownHeight"); _dropDownHeightReady = true; } return _dropDownHeightContent; } }
            private static int _dropDownHeightContent = default;
            private static bool _dropDownHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dropDownHintAppearance"/>
            /// </summary>
            public static int dropDownHintAppearance { get { if (!_dropDownHintAppearanceReady) { _dropDownHintAppearanceContent = SGetField<int>(LocalBridgeClazz, "dropDownHintAppearance"); _dropDownHintAppearanceReady = true; } return _dropDownHintAppearanceContent; } }
            private static int _dropDownHintAppearanceContent = default;
            private static bool _dropDownHintAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dropDownHorizontalOffset"/>
            /// </summary>
            public static int dropDownHorizontalOffset { get { if (!_dropDownHorizontalOffsetReady) { _dropDownHorizontalOffsetContent = SGetField<int>(LocalBridgeClazz, "dropDownHorizontalOffset"); _dropDownHorizontalOffsetReady = true; } return _dropDownHorizontalOffsetContent; } }
            private static int _dropDownHorizontalOffsetContent = default;
            private static bool _dropDownHorizontalOffsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dropDownItemStyle"/>
            /// </summary>
            public static int dropDownItemStyle { get { if (!_dropDownItemStyleReady) { _dropDownItemStyleContent = SGetField<int>(LocalBridgeClazz, "dropDownItemStyle"); _dropDownItemStyleReady = true; } return _dropDownItemStyleContent; } }
            private static int _dropDownItemStyleContent = default;
            private static bool _dropDownItemStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dropDownListViewStyle"/>
            /// </summary>
            public static int dropDownListViewStyle { get { if (!_dropDownListViewStyleReady) { _dropDownListViewStyleContent = SGetField<int>(LocalBridgeClazz, "dropDownListViewStyle"); _dropDownListViewStyleReady = true; } return _dropDownListViewStyleContent; } }
            private static int _dropDownListViewStyleContent = default;
            private static bool _dropDownListViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dropDownSelector"/>
            /// </summary>
            public static int dropDownSelector { get { if (!_dropDownSelectorReady) { _dropDownSelectorContent = SGetField<int>(LocalBridgeClazz, "dropDownSelector"); _dropDownSelectorReady = true; } return _dropDownSelectorContent; } }
            private static int _dropDownSelectorContent = default;
            private static bool _dropDownSelectorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dropDownSpinnerStyle"/>
            /// </summary>
            public static int dropDownSpinnerStyle { get { if (!_dropDownSpinnerStyleReady) { _dropDownSpinnerStyleContent = SGetField<int>(LocalBridgeClazz, "dropDownSpinnerStyle"); _dropDownSpinnerStyleReady = true; } return _dropDownSpinnerStyleContent; } }
            private static int _dropDownSpinnerStyleContent = default;
            private static bool _dropDownSpinnerStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dropDownVerticalOffset"/>
            /// </summary>
            public static int dropDownVerticalOffset { get { if (!_dropDownVerticalOffsetReady) { _dropDownVerticalOffsetContent = SGetField<int>(LocalBridgeClazz, "dropDownVerticalOffset"); _dropDownVerticalOffsetReady = true; } return _dropDownVerticalOffsetContent; } }
            private static int _dropDownVerticalOffsetContent = default;
            private static bool _dropDownVerticalOffsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#dropDownWidth"/>
            /// </summary>
            public static int dropDownWidth { get { if (!_dropDownWidthReady) { _dropDownWidthContent = SGetField<int>(LocalBridgeClazz, "dropDownWidth"); _dropDownWidthReady = true; } return _dropDownWidthContent; } }
            private static int _dropDownWidthContent = default;
            private static bool _dropDownWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#duplicateParentState"/>
            /// </summary>
            public static int duplicateParentState { get { if (!_duplicateParentStateReady) { _duplicateParentStateContent = SGetField<int>(LocalBridgeClazz, "duplicateParentState"); _duplicateParentStateReady = true; } return _duplicateParentStateContent; } }
            private static int _duplicateParentStateContent = default;
            private static bool _duplicateParentStateReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#duration"/>
            /// </summary>
            public static int duration { get { if (!_durationReady) { _durationContent = SGetField<int>(LocalBridgeClazz, "duration"); _durationReady = true; } return _durationContent; } }
            private static int _durationContent = default;
            private static bool _durationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#editable"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int editable { get { if (!_editableReady) { _editableContent = SGetField<int>(LocalBridgeClazz, "editable"); _editableReady = true; } return _editableContent; } }
            private static int _editableContent = default;
            private static bool _editableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#editorExtras"/>
            /// </summary>
            public static int editorExtras { get { if (!_editorExtrasReady) { _editorExtrasContent = SGetField<int>(LocalBridgeClazz, "editorExtras"); _editorExtrasReady = true; } return _editorExtrasContent; } }
            private static int _editorExtrasContent = default;
            private static bool _editorExtrasReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#editTextBackground"/>
            /// </summary>
            public static int editTextBackground { get { if (!_editTextBackgroundReady) { _editTextBackgroundContent = SGetField<int>(LocalBridgeClazz, "editTextBackground"); _editTextBackgroundReady = true; } return _editTextBackgroundContent; } }
            private static int _editTextBackgroundContent = default;
            private static bool _editTextBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#editTextColor"/>
            /// </summary>
            public static int editTextColor { get { if (!_editTextColorReady) { _editTextColorContent = SGetField<int>(LocalBridgeClazz, "editTextColor"); _editTextColorReady = true; } return _editTextColorContent; } }
            private static int _editTextColorContent = default;
            private static bool _editTextColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#editTextPreferenceStyle"/>
            /// </summary>
            public static int editTextPreferenceStyle { get { if (!_editTextPreferenceStyleReady) { _editTextPreferenceStyleContent = SGetField<int>(LocalBridgeClazz, "editTextPreferenceStyle"); _editTextPreferenceStyleReady = true; } return _editTextPreferenceStyleContent; } }
            private static int _editTextPreferenceStyleContent = default;
            private static bool _editTextPreferenceStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#editTextStyle"/>
            /// </summary>
            public static int editTextStyle { get { if (!_editTextStyleReady) { _editTextStyleContent = SGetField<int>(LocalBridgeClazz, "editTextStyle"); _editTextStyleReady = true; } return _editTextStyleContent; } }
            private static int _editTextStyleContent = default;
            private static bool _editTextStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#effectColor"/>
            /// </summary>
            public static int effectColor { get { if (!_effectColorReady) { _effectColorContent = SGetField<int>(LocalBridgeClazz, "effectColor"); _effectColorReady = true; } return _effectColorContent; } }
            private static int _effectColorContent = default;
            private static bool _effectColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#elegantTextHeight"/>
            /// </summary>
            public static int elegantTextHeight { get { if (!_elegantTextHeightReady) { _elegantTextHeightContent = SGetField<int>(LocalBridgeClazz, "elegantTextHeight"); _elegantTextHeightReady = true; } return _elegantTextHeightContent; } }
            private static int _elegantTextHeightContent = default;
            private static bool _elegantTextHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#elevation"/>
            /// </summary>
            public static int elevation { get { if (!_elevationReady) { _elevationContent = SGetField<int>(LocalBridgeClazz, "elevation"); _elevationReady = true; } return _elevationContent; } }
            private static int _elevationContent = default;
            private static bool _elevationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#ellipsize"/>
            /// </summary>
            public static int ellipsize { get { if (!_ellipsizeReady) { _ellipsizeContent = SGetField<int>(LocalBridgeClazz, "ellipsize"); _ellipsizeReady = true; } return _ellipsizeContent; } }
            private static int _ellipsizeContent = default;
            private static bool _ellipsizeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#ems"/>
            /// </summary>
            public static int ems { get { if (!_emsReady) { _emsContent = SGetField<int>(LocalBridgeClazz, "ems"); _emsReady = true; } return _emsContent; } }
            private static int _emsContent = default;
            private static bool _emsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#enabled"/>
            /// </summary>
            public static int enabled { get { if (!_enabledReady) { _enabledContent = SGetField<int>(LocalBridgeClazz, "enabled"); _enabledReady = true; } return _enabledContent; } }
            private static int _enabledContent = default;
            private static bool _enabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#enableOnBackInvokedCallback"/>
            /// </summary>
            public static int enableOnBackInvokedCallback { get { if (!_enableOnBackInvokedCallbackReady) { _enableOnBackInvokedCallbackContent = SGetField<int>(LocalBridgeClazz, "enableOnBackInvokedCallback"); _enableOnBackInvokedCallbackReady = true; } return _enableOnBackInvokedCallbackContent; } }
            private static int _enableOnBackInvokedCallbackContent = default;
            private static bool _enableOnBackInvokedCallbackReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#enableTextStylingShortcuts"/>
            /// </summary>
            public static int enableTextStylingShortcuts { get { if (!_enableTextStylingShortcutsReady) { _enableTextStylingShortcutsContent = SGetField<int>(LocalBridgeClazz, "enableTextStylingShortcuts"); _enableTextStylingShortcutsReady = true; } return _enableTextStylingShortcutsContent; } }
            private static int _enableTextStylingShortcutsContent = default;
            private static bool _enableTextStylingShortcutsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#enableVrMode"/>
            /// </summary>
            public static int enableVrMode { get { if (!_enableVrModeReady) { _enableVrModeContent = SGetField<int>(LocalBridgeClazz, "enableVrMode"); _enableVrModeReady = true; } return _enableVrModeContent; } }
            private static int _enableVrModeContent = default;
            private static bool _enableVrModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#end"/>
            /// </summary>
            public static int end { get { if (!_endReady) { _endContent = SGetField<int>(LocalBridgeClazz, "end"); _endReady = true; } return _endContent; } }
            private static int _endContent = default;
            private static bool _endReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#endColor"/>
            /// </summary>
            public static int endColor { get { if (!_endColorReady) { _endColorContent = SGetField<int>(LocalBridgeClazz, "endColor"); _endColorReady = true; } return _endColorContent; } }
            private static int _endColorContent = default;
            private static bool _endColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#endX"/>
            /// </summary>
            public static int endX { get { if (!_endXReady) { _endXContent = SGetField<int>(LocalBridgeClazz, "endX"); _endXReady = true; } return _endXContent; } }
            private static int _endXContent = default;
            private static bool _endXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#endY"/>
            /// </summary>
            public static int endY { get { if (!_endYReady) { _endYContent = SGetField<int>(LocalBridgeClazz, "endY"); _endYReady = true; } return _endYContent; } }
            private static int _endYContent = default;
            private static bool _endYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#endYear"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int endYear { get { if (!_endYearReady) { _endYearContent = SGetField<int>(LocalBridgeClazz, "endYear"); _endYearReady = true; } return _endYearContent; } }
            private static int _endYearContent = default;
            private static bool _endYearReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#enforceNavigationBarContrast"/>
            /// </summary>
            public static int enforceNavigationBarContrast { get { if (!_enforceNavigationBarContrastReady) { _enforceNavigationBarContrastContent = SGetField<int>(LocalBridgeClazz, "enforceNavigationBarContrast"); _enforceNavigationBarContrastReady = true; } return _enforceNavigationBarContrastContent; } }
            private static int _enforceNavigationBarContrastContent = default;
            private static bool _enforceNavigationBarContrastReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#enforceStatusBarContrast"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int enforceStatusBarContrast { get { if (!_enforceStatusBarContrastReady) { _enforceStatusBarContrastContent = SGetField<int>(LocalBridgeClazz, "enforceStatusBarContrast"); _enforceStatusBarContrastReady = true; } return _enforceStatusBarContrastContent; } }
            private static int _enforceStatusBarContrastContent = default;
            private static bool _enforceStatusBarContrastReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#enterFadeDuration"/>
            /// </summary>
            public static int enterFadeDuration { get { if (!_enterFadeDurationReady) { _enterFadeDurationContent = SGetField<int>(LocalBridgeClazz, "enterFadeDuration"); _enterFadeDurationReady = true; } return _enterFadeDurationContent; } }
            private static int _enterFadeDurationContent = default;
            private static bool _enterFadeDurationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#entries"/>
            /// </summary>
            public static int entries { get { if (!_entriesReady) { _entriesContent = SGetField<int>(LocalBridgeClazz, "entries"); _entriesReady = true; } return _entriesContent; } }
            private static int _entriesContent = default;
            private static bool _entriesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#entryValues"/>
            /// </summary>
            public static int entryValues { get { if (!_entryValuesReady) { _entryValuesContent = SGetField<int>(LocalBridgeClazz, "entryValues"); _entryValuesReady = true; } return _entryValuesContent; } }
            private static int _entryValuesContent = default;
            private static bool _entryValuesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#eventsInterceptionEnabled"/>
            /// </summary>
            public static int eventsInterceptionEnabled { get { if (!_eventsInterceptionEnabledReady) { _eventsInterceptionEnabledContent = SGetField<int>(LocalBridgeClazz, "eventsInterceptionEnabled"); _eventsInterceptionEnabledReady = true; } return _eventsInterceptionEnabledContent; } }
            private static int _eventsInterceptionEnabledContent = default;
            private static bool _eventsInterceptionEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#excludeClass"/>
            /// </summary>
            public static int excludeClass { get { if (!_excludeClassReady) { _excludeClassContent = SGetField<int>(LocalBridgeClazz, "excludeClass"); _excludeClassReady = true; } return _excludeClassContent; } }
            private static int _excludeClassContent = default;
            private static bool _excludeClassReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#excludeFromRecents"/>
            /// </summary>
            public static int excludeFromRecents { get { if (!_excludeFromRecentsReady) { _excludeFromRecentsContent = SGetField<int>(LocalBridgeClazz, "excludeFromRecents"); _excludeFromRecentsReady = true; } return _excludeFromRecentsContent; } }
            private static int _excludeFromRecentsContent = default;
            private static bool _excludeFromRecentsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#excludeId"/>
            /// </summary>
            public static int excludeId { get { if (!_excludeIdReady) { _excludeIdContent = SGetField<int>(LocalBridgeClazz, "excludeId"); _excludeIdReady = true; } return _excludeIdContent; } }
            private static int _excludeIdContent = default;
            private static bool _excludeIdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#excludeName"/>
            /// </summary>
            public static int excludeName { get { if (!_excludeNameReady) { _excludeNameContent = SGetField<int>(LocalBridgeClazz, "excludeName"); _excludeNameReady = true; } return _excludeNameContent; } }
            private static int _excludeNameContent = default;
            private static bool _excludeNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#exitFadeDuration"/>
            /// </summary>
            public static int exitFadeDuration { get { if (!_exitFadeDurationReady) { _exitFadeDurationContent = SGetField<int>(LocalBridgeClazz, "exitFadeDuration"); _exitFadeDurationReady = true; } return _exitFadeDurationContent; } }
            private static int _exitFadeDurationContent = default;
            private static bool _exitFadeDurationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#expandableListPreferredChildIndicatorLeft"/>
            /// </summary>
            public static int expandableListPreferredChildIndicatorLeft { get { if (!_expandableListPreferredChildIndicatorLeftReady) { _expandableListPreferredChildIndicatorLeftContent = SGetField<int>(LocalBridgeClazz, "expandableListPreferredChildIndicatorLeft"); _expandableListPreferredChildIndicatorLeftReady = true; } return _expandableListPreferredChildIndicatorLeftContent; } }
            private static int _expandableListPreferredChildIndicatorLeftContent = default;
            private static bool _expandableListPreferredChildIndicatorLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#expandableListPreferredChildIndicatorRight"/>
            /// </summary>
            public static int expandableListPreferredChildIndicatorRight { get { if (!_expandableListPreferredChildIndicatorRightReady) { _expandableListPreferredChildIndicatorRightContent = SGetField<int>(LocalBridgeClazz, "expandableListPreferredChildIndicatorRight"); _expandableListPreferredChildIndicatorRightReady = true; } return _expandableListPreferredChildIndicatorRightContent; } }
            private static int _expandableListPreferredChildIndicatorRightContent = default;
            private static bool _expandableListPreferredChildIndicatorRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#expandableListPreferredChildPaddingLeft"/>
            /// </summary>
            public static int expandableListPreferredChildPaddingLeft { get { if (!_expandableListPreferredChildPaddingLeftReady) { _expandableListPreferredChildPaddingLeftContent = SGetField<int>(LocalBridgeClazz, "expandableListPreferredChildPaddingLeft"); _expandableListPreferredChildPaddingLeftReady = true; } return _expandableListPreferredChildPaddingLeftContent; } }
            private static int _expandableListPreferredChildPaddingLeftContent = default;
            private static bool _expandableListPreferredChildPaddingLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#expandableListPreferredItemIndicatorLeft"/>
            /// </summary>
            public static int expandableListPreferredItemIndicatorLeft { get { if (!_expandableListPreferredItemIndicatorLeftReady) { _expandableListPreferredItemIndicatorLeftContent = SGetField<int>(LocalBridgeClazz, "expandableListPreferredItemIndicatorLeft"); _expandableListPreferredItemIndicatorLeftReady = true; } return _expandableListPreferredItemIndicatorLeftContent; } }
            private static int _expandableListPreferredItemIndicatorLeftContent = default;
            private static bool _expandableListPreferredItemIndicatorLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#expandableListPreferredItemIndicatorRight"/>
            /// </summary>
            public static int expandableListPreferredItemIndicatorRight { get { if (!_expandableListPreferredItemIndicatorRightReady) { _expandableListPreferredItemIndicatorRightContent = SGetField<int>(LocalBridgeClazz, "expandableListPreferredItemIndicatorRight"); _expandableListPreferredItemIndicatorRightReady = true; } return _expandableListPreferredItemIndicatorRightContent; } }
            private static int _expandableListPreferredItemIndicatorRightContent = default;
            private static bool _expandableListPreferredItemIndicatorRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#expandableListPreferredItemPaddingLeft"/>
            /// </summary>
            public static int expandableListPreferredItemPaddingLeft { get { if (!_expandableListPreferredItemPaddingLeftReady) { _expandableListPreferredItemPaddingLeftContent = SGetField<int>(LocalBridgeClazz, "expandableListPreferredItemPaddingLeft"); _expandableListPreferredItemPaddingLeftReady = true; } return _expandableListPreferredItemPaddingLeftContent; } }
            private static int _expandableListPreferredItemPaddingLeftContent = default;
            private static bool _expandableListPreferredItemPaddingLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#expandableListViewStyle"/>
            /// </summary>
            public static int expandableListViewStyle { get { if (!_expandableListViewStyleReady) { _expandableListViewStyleContent = SGetField<int>(LocalBridgeClazz, "expandableListViewStyle"); _expandableListViewStyleReady = true; } return _expandableListViewStyleContent; } }
            private static int _expandableListViewStyleContent = default;
            private static bool _expandableListViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#expandableListViewWhiteStyle"/>
            /// </summary>
            public static int expandableListViewWhiteStyle { get { if (!_expandableListViewWhiteStyleReady) { _expandableListViewWhiteStyleContent = SGetField<int>(LocalBridgeClazz, "expandableListViewWhiteStyle"); _expandableListViewWhiteStyleReady = true; } return _expandableListViewWhiteStyleContent; } }
            private static int _expandableListViewWhiteStyleContent = default;
            private static bool _expandableListViewWhiteStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#exported"/>
            /// </summary>
            public static int exported { get { if (!_exportedReady) { _exportedContent = SGetField<int>(LocalBridgeClazz, "exported"); _exportedReady = true; } return _exportedContent; } }
            private static int _exportedContent = default;
            private static bool _exportedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#externalService"/>
            /// </summary>
            public static int externalService { get { if (!_externalServiceReady) { _externalServiceContent = SGetField<int>(LocalBridgeClazz, "externalService"); _externalServiceReady = true; } return _externalServiceContent; } }
            private static int _externalServiceContent = default;
            private static bool _externalServiceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#extractNativeLibs"/>
            /// </summary>
            public static int extractNativeLibs { get { if (!_extractNativeLibsReady) { _extractNativeLibsContent = SGetField<int>(LocalBridgeClazz, "extractNativeLibs"); _extractNativeLibsReady = true; } return _extractNativeLibsContent; } }
            private static int _extractNativeLibsContent = default;
            private static bool _extractNativeLibsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#extraTension"/>
            /// </summary>
            public static int extraTension { get { if (!_extraTensionReady) { _extraTensionContent = SGetField<int>(LocalBridgeClazz, "extraTension"); _extraTensionReady = true; } return _extraTensionContent; } }
            private static int _extraTensionContent = default;
            private static bool _extraTensionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#factor"/>
            /// </summary>
            public static int factor { get { if (!_factorReady) { _factorContent = SGetField<int>(LocalBridgeClazz, "factor"); _factorReady = true; } return _factorContent; } }
            private static int _factorContent = default;
            private static bool _factorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fadeDuration"/>
            /// </summary>
            public static int fadeDuration { get { if (!_fadeDurationReady) { _fadeDurationContent = SGetField<int>(LocalBridgeClazz, "fadeDuration"); _fadeDurationReady = true; } return _fadeDurationContent; } }
            private static int _fadeDurationContent = default;
            private static bool _fadeDurationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fadeEnabled"/>
            /// </summary>
            public static int fadeEnabled { get { if (!_fadeEnabledReady) { _fadeEnabledContent = SGetField<int>(LocalBridgeClazz, "fadeEnabled"); _fadeEnabledReady = true; } return _fadeEnabledContent; } }
            private static int _fadeEnabledContent = default;
            private static bool _fadeEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fadeOffset"/>
            /// </summary>
            public static int fadeOffset { get { if (!_fadeOffsetReady) { _fadeOffsetContent = SGetField<int>(LocalBridgeClazz, "fadeOffset"); _fadeOffsetReady = true; } return _fadeOffsetContent; } }
            private static int _fadeOffsetContent = default;
            private static bool _fadeOffsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fadeScrollbars"/>
            /// </summary>
            public static int fadeScrollbars { get { if (!_fadeScrollbarsReady) { _fadeScrollbarsContent = SGetField<int>(LocalBridgeClazz, "fadeScrollbars"); _fadeScrollbarsReady = true; } return _fadeScrollbarsContent; } }
            private static int _fadeScrollbarsContent = default;
            private static bool _fadeScrollbarsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fadingEdge"/>
            /// </summary>
            public static int fadingEdge { get { if (!_fadingEdgeReady) { _fadingEdgeContent = SGetField<int>(LocalBridgeClazz, "fadingEdge"); _fadingEdgeReady = true; } return _fadingEdgeContent; } }
            private static int _fadingEdgeContent = default;
            private static bool _fadingEdgeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fadingEdgeLength"/>
            /// </summary>
            public static int fadingEdgeLength { get { if (!_fadingEdgeLengthReady) { _fadingEdgeLengthContent = SGetField<int>(LocalBridgeClazz, "fadingEdgeLength"); _fadingEdgeLengthReady = true; } return _fadingEdgeLengthContent; } }
            private static int _fadingEdgeLengthContent = default;
            private static bool _fadingEdgeLengthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fadingMode"/>
            /// </summary>
            public static int fadingMode { get { if (!_fadingModeReady) { _fadingModeContent = SGetField<int>(LocalBridgeClazz, "fadingMode"); _fadingModeReady = true; } return _fadingModeContent; } }
            private static int _fadingModeContent = default;
            private static bool _fadingModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fallbackLineSpacing"/>
            /// </summary>
            public static int fallbackLineSpacing { get { if (!_fallbackLineSpacingReady) { _fallbackLineSpacingContent = SGetField<int>(LocalBridgeClazz, "fallbackLineSpacing"); _fallbackLineSpacingReady = true; } return _fallbackLineSpacingContent; } }
            private static int _fallbackLineSpacingContent = default;
            private static bool _fallbackLineSpacingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fastScrollAlwaysVisible"/>
            /// </summary>
            public static int fastScrollAlwaysVisible { get { if (!_fastScrollAlwaysVisibleReady) { _fastScrollAlwaysVisibleContent = SGetField<int>(LocalBridgeClazz, "fastScrollAlwaysVisible"); _fastScrollAlwaysVisibleReady = true; } return _fastScrollAlwaysVisibleContent; } }
            private static int _fastScrollAlwaysVisibleContent = default;
            private static bool _fastScrollAlwaysVisibleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fastScrollEnabled"/>
            /// </summary>
            public static int fastScrollEnabled { get { if (!_fastScrollEnabledReady) { _fastScrollEnabledContent = SGetField<int>(LocalBridgeClazz, "fastScrollEnabled"); _fastScrollEnabledReady = true; } return _fastScrollEnabledContent; } }
            private static int _fastScrollEnabledContent = default;
            private static bool _fastScrollEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fastScrollOverlayPosition"/>
            /// </summary>
            public static int fastScrollOverlayPosition { get { if (!_fastScrollOverlayPositionReady) { _fastScrollOverlayPositionContent = SGetField<int>(LocalBridgeClazz, "fastScrollOverlayPosition"); _fastScrollOverlayPositionReady = true; } return _fastScrollOverlayPositionContent; } }
            private static int _fastScrollOverlayPositionContent = default;
            private static bool _fastScrollOverlayPositionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fastScrollPreviewBackgroundLeft"/>
            /// </summary>
            public static int fastScrollPreviewBackgroundLeft { get { if (!_fastScrollPreviewBackgroundLeftReady) { _fastScrollPreviewBackgroundLeftContent = SGetField<int>(LocalBridgeClazz, "fastScrollPreviewBackgroundLeft"); _fastScrollPreviewBackgroundLeftReady = true; } return _fastScrollPreviewBackgroundLeftContent; } }
            private static int _fastScrollPreviewBackgroundLeftContent = default;
            private static bool _fastScrollPreviewBackgroundLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fastScrollPreviewBackgroundRight"/>
            /// </summary>
            public static int fastScrollPreviewBackgroundRight { get { if (!_fastScrollPreviewBackgroundRightReady) { _fastScrollPreviewBackgroundRightContent = SGetField<int>(LocalBridgeClazz, "fastScrollPreviewBackgroundRight"); _fastScrollPreviewBackgroundRightReady = true; } return _fastScrollPreviewBackgroundRightContent; } }
            private static int _fastScrollPreviewBackgroundRightContent = default;
            private static bool _fastScrollPreviewBackgroundRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fastScrollStyle"/>
            /// </summary>
            public static int fastScrollStyle { get { if (!_fastScrollStyleReady) { _fastScrollStyleContent = SGetField<int>(LocalBridgeClazz, "fastScrollStyle"); _fastScrollStyleReady = true; } return _fastScrollStyleContent; } }
            private static int _fastScrollStyleContent = default;
            private static bool _fastScrollStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fastScrollTextColor"/>
            /// </summary>
            public static int fastScrollTextColor { get { if (!_fastScrollTextColorReady) { _fastScrollTextColorContent = SGetField<int>(LocalBridgeClazz, "fastScrollTextColor"); _fastScrollTextColorReady = true; } return _fastScrollTextColorContent; } }
            private static int _fastScrollTextColorContent = default;
            private static bool _fastScrollTextColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fastScrollThumbDrawable"/>
            /// </summary>
            public static int fastScrollThumbDrawable { get { if (!_fastScrollThumbDrawableReady) { _fastScrollThumbDrawableContent = SGetField<int>(LocalBridgeClazz, "fastScrollThumbDrawable"); _fastScrollThumbDrawableReady = true; } return _fastScrollThumbDrawableContent; } }
            private static int _fastScrollThumbDrawableContent = default;
            private static bool _fastScrollThumbDrawableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fastScrollTrackDrawable"/>
            /// </summary>
            public static int fastScrollTrackDrawable { get { if (!_fastScrollTrackDrawableReady) { _fastScrollTrackDrawableContent = SGetField<int>(LocalBridgeClazz, "fastScrollTrackDrawable"); _fastScrollTrackDrawableReady = true; } return _fastScrollTrackDrawableContent; } }
            private static int _fastScrollTrackDrawableContent = default;
            private static bool _fastScrollTrackDrawableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fillAfter"/>
            /// </summary>
            public static int fillAfter { get { if (!_fillAfterReady) { _fillAfterContent = SGetField<int>(LocalBridgeClazz, "fillAfter"); _fillAfterReady = true; } return _fillAfterContent; } }
            private static int _fillAfterContent = default;
            private static bool _fillAfterReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fillAlpha"/>
            /// </summary>
            public static int fillAlpha { get { if (!_fillAlphaReady) { _fillAlphaContent = SGetField<int>(LocalBridgeClazz, "fillAlpha"); _fillAlphaReady = true; } return _fillAlphaContent; } }
            private static int _fillAlphaContent = default;
            private static bool _fillAlphaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fillBefore"/>
            /// </summary>
            public static int fillBefore { get { if (!_fillBeforeReady) { _fillBeforeContent = SGetField<int>(LocalBridgeClazz, "fillBefore"); _fillBeforeReady = true; } return _fillBeforeContent; } }
            private static int _fillBeforeContent = default;
            private static bool _fillBeforeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fillColor"/>
            /// </summary>
            public static int fillColor { get { if (!_fillColorReady) { _fillColorContent = SGetField<int>(LocalBridgeClazz, "fillColor"); _fillColorReady = true; } return _fillColorContent; } }
            private static int _fillColorContent = default;
            private static bool _fillColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fillEnabled"/>
            /// </summary>
            public static int fillEnabled { get { if (!_fillEnabledReady) { _fillEnabledContent = SGetField<int>(LocalBridgeClazz, "fillEnabled"); _fillEnabledReady = true; } return _fillEnabledContent; } }
            private static int _fillEnabledContent = default;
            private static bool _fillEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fillType"/>
            /// </summary>
            public static int fillType { get { if (!_fillTypeReady) { _fillTypeContent = SGetField<int>(LocalBridgeClazz, "fillType"); _fillTypeReady = true; } return _fillTypeContent; } }
            private static int _fillTypeContent = default;
            private static bool _fillTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fillViewport"/>
            /// </summary>
            public static int fillViewport { get { if (!_fillViewportReady) { _fillViewportContent = SGetField<int>(LocalBridgeClazz, "fillViewport"); _fillViewportReady = true; } return _fillViewportContent; } }
            private static int _fillViewportContent = default;
            private static bool _fillViewportReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#filter"/>
            /// </summary>
            public static int filter { get { if (!_filterReady) { _filterContent = SGetField<int>(LocalBridgeClazz, "filter"); _filterReady = true; } return _filterContent; } }
            private static int _filterContent = default;
            private static bool _filterReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#filterTouchesWhenObscured"/>
            /// </summary>
            public static int filterTouchesWhenObscured { get { if (!_filterTouchesWhenObscuredReady) { _filterTouchesWhenObscuredContent = SGetField<int>(LocalBridgeClazz, "filterTouchesWhenObscured"); _filterTouchesWhenObscuredReady = true; } return _filterTouchesWhenObscuredContent; } }
            private static int _filterTouchesWhenObscuredContent = default;
            private static bool _filterTouchesWhenObscuredReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fingerprintAuthDrawable"/>
            /// </summary>
            public static int fingerprintAuthDrawable { get { if (!_fingerprintAuthDrawableReady) { _fingerprintAuthDrawableContent = SGetField<int>(LocalBridgeClazz, "fingerprintAuthDrawable"); _fingerprintAuthDrawableReady = true; } return _fingerprintAuthDrawableContent; } }
            private static int _fingerprintAuthDrawableContent = default;
            private static bool _fingerprintAuthDrawableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#finishOnCloseSystemDialogs"/>
            /// </summary>
            public static int finishOnCloseSystemDialogs { get { if (!_finishOnCloseSystemDialogsReady) { _finishOnCloseSystemDialogsContent = SGetField<int>(LocalBridgeClazz, "finishOnCloseSystemDialogs"); _finishOnCloseSystemDialogsReady = true; } return _finishOnCloseSystemDialogsContent; } }
            private static int _finishOnCloseSystemDialogsContent = default;
            private static bool _finishOnCloseSystemDialogsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#finishOnTaskLaunch"/>
            /// </summary>
            public static int finishOnTaskLaunch { get { if (!_finishOnTaskLaunchReady) { _finishOnTaskLaunchContent = SGetField<int>(LocalBridgeClazz, "finishOnTaskLaunch"); _finishOnTaskLaunchReady = true; } return _finishOnTaskLaunchContent; } }
            private static int _finishOnTaskLaunchContent = default;
            private static bool _finishOnTaskLaunchReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#firstBaselineToTopHeight"/>
            /// </summary>
            public static int firstBaselineToTopHeight { get { if (!_firstBaselineToTopHeightReady) { _firstBaselineToTopHeightContent = SGetField<int>(LocalBridgeClazz, "firstBaselineToTopHeight"); _firstBaselineToTopHeightReady = true; } return _firstBaselineToTopHeightContent; } }
            private static int _firstBaselineToTopHeightContent = default;
            private static bool _firstBaselineToTopHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#firstDayOfWeek"/>
            /// </summary>
            public static int firstDayOfWeek { get { if (!_firstDayOfWeekReady) { _firstDayOfWeekContent = SGetField<int>(LocalBridgeClazz, "firstDayOfWeek"); _firstDayOfWeekReady = true; } return _firstDayOfWeekContent; } }
            private static int _firstDayOfWeekContent = default;
            private static bool _firstDayOfWeekReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fitsSystemWindows"/>
            /// </summary>
            public static int fitsSystemWindows { get { if (!_fitsSystemWindowsReady) { _fitsSystemWindowsContent = SGetField<int>(LocalBridgeClazz, "fitsSystemWindows"); _fitsSystemWindowsReady = true; } return _fitsSystemWindowsContent; } }
            private static int _fitsSystemWindowsContent = default;
            private static bool _fitsSystemWindowsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#flipInterval"/>
            /// </summary>
            public static int flipInterval { get { if (!_flipIntervalReady) { _flipIntervalContent = SGetField<int>(LocalBridgeClazz, "flipInterval"); _flipIntervalReady = true; } return _flipIntervalContent; } }
            private static int _flipIntervalContent = default;
            private static bool _flipIntervalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#focusable"/>
            /// </summary>
            public static int focusable { get { if (!_focusableReady) { _focusableContent = SGetField<int>(LocalBridgeClazz, "focusable"); _focusableReady = true; } return _focusableContent; } }
            private static int _focusableContent = default;
            private static bool _focusableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#focusableInTouchMode"/>
            /// </summary>
            public static int focusableInTouchMode { get { if (!_focusableInTouchModeReady) { _focusableInTouchModeContent = SGetField<int>(LocalBridgeClazz, "focusableInTouchMode"); _focusableInTouchModeReady = true; } return _focusableInTouchModeContent; } }
            private static int _focusableInTouchModeContent = default;
            private static bool _focusableInTouchModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#focusedByDefault"/>
            /// </summary>
            public static int focusedByDefault { get { if (!_focusedByDefaultReady) { _focusedByDefaultContent = SGetField<int>(LocalBridgeClazz, "focusedByDefault"); _focusedByDefaultReady = true; } return _focusedByDefaultContent; } }
            private static int _focusedByDefaultContent = default;
            private static bool _focusedByDefaultReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#focusedMonthDateColor"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int focusedMonthDateColor { get { if (!_focusedMonthDateColorReady) { _focusedMonthDateColorContent = SGetField<int>(LocalBridgeClazz, "focusedMonthDateColor"); _focusedMonthDateColorReady = true; } return _focusedMonthDateColorContent; } }
            private static int _focusedMonthDateColorContent = default;
            private static bool _focusedMonthDateColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#focusedSearchResultHighlightColor"/>
            /// </summary>
            public static int focusedSearchResultHighlightColor { get { if (!_focusedSearchResultHighlightColorReady) { _focusedSearchResultHighlightColorContent = SGetField<int>(LocalBridgeClazz, "focusedSearchResultHighlightColor"); _focusedSearchResultHighlightColorReady = true; } return _focusedSearchResultHighlightColorContent; } }
            private static int _focusedSearchResultHighlightColorContent = default;
            private static bool _focusedSearchResultHighlightColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#font"/>
            /// </summary>
            public static int font { get { if (!_fontReady) { _fontContent = SGetField<int>(LocalBridgeClazz, "font"); _fontReady = true; } return _fontContent; } }
            private static int _fontContent = default;
            private static bool _fontReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fontFamily"/>
            /// </summary>
            public static int fontFamily { get { if (!_fontFamilyReady) { _fontFamilyContent = SGetField<int>(LocalBridgeClazz, "fontFamily"); _fontFamilyReady = true; } return _fontFamilyContent; } }
            private static int _fontFamilyContent = default;
            private static bool _fontFamilyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fontFeatureSettings"/>
            /// </summary>
            public static int fontFeatureSettings { get { if (!_fontFeatureSettingsReady) { _fontFeatureSettingsContent = SGetField<int>(LocalBridgeClazz, "fontFeatureSettings"); _fontFeatureSettingsReady = true; } return _fontFeatureSettingsContent; } }
            private static int _fontFeatureSettingsContent = default;
            private static bool _fontFeatureSettingsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fontProviderAuthority"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int fontProviderAuthority { get { if (!_fontProviderAuthorityReady) { _fontProviderAuthorityContent = SGetField<int>(LocalBridgeClazz, "fontProviderAuthority"); _fontProviderAuthorityReady = true; } return _fontProviderAuthorityContent; } }
            private static int _fontProviderAuthorityContent = default;
            private static bool _fontProviderAuthorityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fontProviderCerts"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int fontProviderCerts { get { if (!_fontProviderCertsReady) { _fontProviderCertsContent = SGetField<int>(LocalBridgeClazz, "fontProviderCerts"); _fontProviderCertsReady = true; } return _fontProviderCertsContent; } }
            private static int _fontProviderCertsContent = default;
            private static bool _fontProviderCertsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fontProviderPackage"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int fontProviderPackage { get { if (!_fontProviderPackageReady) { _fontProviderPackageContent = SGetField<int>(LocalBridgeClazz, "fontProviderPackage"); _fontProviderPackageReady = true; } return _fontProviderPackageContent; } }
            private static int _fontProviderPackageContent = default;
            private static bool _fontProviderPackageReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fontProviderQuery"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int fontProviderQuery { get { if (!_fontProviderQueryReady) { _fontProviderQueryContent = SGetField<int>(LocalBridgeClazz, "fontProviderQuery"); _fontProviderQueryReady = true; } return _fontProviderQueryContent; } }
            private static int _fontProviderQueryContent = default;
            private static bool _fontProviderQueryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fontProviderSystemFontFamily"/>
            /// </summary>
            public static int fontProviderSystemFontFamily { get { if (!_fontProviderSystemFontFamilyReady) { _fontProviderSystemFontFamilyContent = SGetField<int>(LocalBridgeClazz, "fontProviderSystemFontFamily"); _fontProviderSystemFontFamilyReady = true; } return _fontProviderSystemFontFamilyContent; } }
            private static int _fontProviderSystemFontFamilyContent = default;
            private static bool _fontProviderSystemFontFamilyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fontStyle"/>
            /// </summary>
            public static int fontStyle { get { if (!_fontStyleReady) { _fontStyleContent = SGetField<int>(LocalBridgeClazz, "fontStyle"); _fontStyleReady = true; } return _fontStyleContent; } }
            private static int _fontStyleContent = default;
            private static bool _fontStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fontVariationSettings"/>
            /// </summary>
            public static int fontVariationSettings { get { if (!_fontVariationSettingsReady) { _fontVariationSettingsContent = SGetField<int>(LocalBridgeClazz, "fontVariationSettings"); _fontVariationSettingsReady = true; } return _fontVariationSettingsContent; } }
            private static int _fontVariationSettingsContent = default;
            private static bool _fontVariationSettingsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fontWeight"/>
            /// </summary>
            public static int fontWeight { get { if (!_fontWeightReady) { _fontWeightContent = SGetField<int>(LocalBridgeClazz, "fontWeight"); _fontWeightReady = true; } return _fontWeightContent; } }
            private static int _fontWeightContent = default;
            private static bool _fontWeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#footerDividersEnabled"/>
            /// </summary>
            public static int footerDividersEnabled { get { if (!_footerDividersEnabledReady) { _footerDividersEnabledContent = SGetField<int>(LocalBridgeClazz, "footerDividersEnabled"); _footerDividersEnabledReady = true; } return _footerDividersEnabledContent; } }
            private static int _footerDividersEnabledContent = default;
            private static bool _footerDividersEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#forceDarkAllowed"/>
            /// </summary>
            public static int forceDarkAllowed { get { if (!_forceDarkAllowedReady) { _forceDarkAllowedContent = SGetField<int>(LocalBridgeClazz, "forceDarkAllowed"); _forceDarkAllowedReady = true; } return _forceDarkAllowedContent; } }
            private static int _forceDarkAllowedContent = default;
            private static bool _forceDarkAllowedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#forceHasOverlappingRendering"/>
            /// </summary>
            public static int forceHasOverlappingRendering { get { if (!_forceHasOverlappingRenderingReady) { _forceHasOverlappingRenderingContent = SGetField<int>(LocalBridgeClazz, "forceHasOverlappingRendering"); _forceHasOverlappingRenderingReady = true; } return _forceHasOverlappingRenderingContent; } }
            private static int _forceHasOverlappingRenderingContent = default;
            private static bool _forceHasOverlappingRenderingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#forceQueryable"/>
            /// </summary>
            public static int forceQueryable { get { if (!_forceQueryableReady) { _forceQueryableContent = SGetField<int>(LocalBridgeClazz, "forceQueryable"); _forceQueryableReady = true; } return _forceQueryableContent; } }
            private static int _forceQueryableContent = default;
            private static bool _forceQueryableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#forceUriPermissions"/>
            /// </summary>
            public static int forceUriPermissions { get { if (!_forceUriPermissionsReady) { _forceUriPermissionsContent = SGetField<int>(LocalBridgeClazz, "forceUriPermissions"); _forceUriPermissionsReady = true; } return _forceUriPermissionsContent; } }
            private static int _forceUriPermissionsContent = default;
            private static bool _forceUriPermissionsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#foreground"/>
            /// </summary>
            public static int foreground { get { if (!_foregroundReady) { _foregroundContent = SGetField<int>(LocalBridgeClazz, "foreground"); _foregroundReady = true; } return _foregroundContent; } }
            private static int _foregroundContent = default;
            private static bool _foregroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#foregroundGravity"/>
            /// </summary>
            public static int foregroundGravity { get { if (!_foregroundGravityReady) { _foregroundGravityContent = SGetField<int>(LocalBridgeClazz, "foregroundGravity"); _foregroundGravityReady = true; } return _foregroundGravityContent; } }
            private static int _foregroundGravityContent = default;
            private static bool _foregroundGravityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#foregroundServiceType"/>
            /// </summary>
            public static int foregroundServiceType { get { if (!_foregroundServiceTypeReady) { _foregroundServiceTypeContent = SGetField<int>(LocalBridgeClazz, "foregroundServiceType"); _foregroundServiceTypeReady = true; } return _foregroundServiceTypeContent; } }
            private static int _foregroundServiceTypeContent = default;
            private static bool _foregroundServiceTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#foregroundTint"/>
            /// </summary>
            public static int foregroundTint { get { if (!_foregroundTintReady) { _foregroundTintContent = SGetField<int>(LocalBridgeClazz, "foregroundTint"); _foregroundTintReady = true; } return _foregroundTintContent; } }
            private static int _foregroundTintContent = default;
            private static bool _foregroundTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#foregroundTintMode"/>
            /// </summary>
            public static int foregroundTintMode { get { if (!_foregroundTintModeReady) { _foregroundTintModeContent = SGetField<int>(LocalBridgeClazz, "foregroundTintMode"); _foregroundTintModeReady = true; } return _foregroundTintModeContent; } }
            private static int _foregroundTintModeContent = default;
            private static bool _foregroundTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#format"/>
            /// </summary>
            public static int format { get { if (!_formatReady) { _formatContent = SGetField<int>(LocalBridgeClazz, "format"); _formatReady = true; } return _formatContent; } }
            private static int _formatContent = default;
            private static bool _formatReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#format12Hour"/>
            /// </summary>
            public static int format12Hour { get { if (!_format12HourReady) { _format12HourContent = SGetField<int>(LocalBridgeClazz, "format12Hour"); _format12HourReady = true; } return _format12HourContent; } }
            private static int _format12HourContent = default;
            private static bool _format12HourReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#format24Hour"/>
            /// </summary>
            public static int format24Hour { get { if (!_format24HourReady) { _format24HourContent = SGetField<int>(LocalBridgeClazz, "format24Hour"); _format24HourReady = true; } return _format24HourContent; } }
            private static int _format24HourContent = default;
            private static bool _format24HourReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fraction"/>
            /// </summary>
            public static int fractionField { get { if (!_fractionFieldReady) { _fractionFieldContent = SGetField<int>(LocalBridgeClazz, "fraction"); _fractionFieldReady = true; } return _fractionFieldContent; } }
            private static int _fractionFieldContent = default;
            private static bool _fractionFieldReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragment"/>
            /// </summary>
            public static int fragment { get { if (!_fragmentReady) { _fragmentContent = SGetField<int>(LocalBridgeClazz, "fragment"); _fragmentReady = true; } return _fragmentContent; } }
            private static int _fragmentContent = default;
            private static bool _fragmentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentAdvancedPattern"/>
            /// </summary>
            public static int fragmentAdvancedPattern { get { if (!_fragmentAdvancedPatternReady) { _fragmentAdvancedPatternContent = SGetField<int>(LocalBridgeClazz, "fragmentAdvancedPattern"); _fragmentAdvancedPatternReady = true; } return _fragmentAdvancedPatternContent; } }
            private static int _fragmentAdvancedPatternContent = default;
            private static bool _fragmentAdvancedPatternReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentAllowEnterTransitionOverlap"/>
            /// </summary>
            public static int fragmentAllowEnterTransitionOverlap { get { if (!_fragmentAllowEnterTransitionOverlapReady) { _fragmentAllowEnterTransitionOverlapContent = SGetField<int>(LocalBridgeClazz, "fragmentAllowEnterTransitionOverlap"); _fragmentAllowEnterTransitionOverlapReady = true; } return _fragmentAllowEnterTransitionOverlapContent; } }
            private static int _fragmentAllowEnterTransitionOverlapContent = default;
            private static bool _fragmentAllowEnterTransitionOverlapReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentAllowReturnTransitionOverlap"/>
            /// </summary>
            public static int fragmentAllowReturnTransitionOverlap { get { if (!_fragmentAllowReturnTransitionOverlapReady) { _fragmentAllowReturnTransitionOverlapContent = SGetField<int>(LocalBridgeClazz, "fragmentAllowReturnTransitionOverlap"); _fragmentAllowReturnTransitionOverlapReady = true; } return _fragmentAllowReturnTransitionOverlapContent; } }
            private static int _fragmentAllowReturnTransitionOverlapContent = default;
            private static bool _fragmentAllowReturnTransitionOverlapReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentCloseEnterAnimation"/>
            /// </summary>
            public static int fragmentCloseEnterAnimation { get { if (!_fragmentCloseEnterAnimationReady) { _fragmentCloseEnterAnimationContent = SGetField<int>(LocalBridgeClazz, "fragmentCloseEnterAnimation"); _fragmentCloseEnterAnimationReady = true; } return _fragmentCloseEnterAnimationContent; } }
            private static int _fragmentCloseEnterAnimationContent = default;
            private static bool _fragmentCloseEnterAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentCloseExitAnimation"/>
            /// </summary>
            public static int fragmentCloseExitAnimation { get { if (!_fragmentCloseExitAnimationReady) { _fragmentCloseExitAnimationContent = SGetField<int>(LocalBridgeClazz, "fragmentCloseExitAnimation"); _fragmentCloseExitAnimationReady = true; } return _fragmentCloseExitAnimationContent; } }
            private static int _fragmentCloseExitAnimationContent = default;
            private static bool _fragmentCloseExitAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentEnterTransition"/>
            /// </summary>
            public static int fragmentEnterTransition { get { if (!_fragmentEnterTransitionReady) { _fragmentEnterTransitionContent = SGetField<int>(LocalBridgeClazz, "fragmentEnterTransition"); _fragmentEnterTransitionReady = true; } return _fragmentEnterTransitionContent; } }
            private static int _fragmentEnterTransitionContent = default;
            private static bool _fragmentEnterTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentExitTransition"/>
            /// </summary>
            public static int fragmentExitTransition { get { if (!_fragmentExitTransitionReady) { _fragmentExitTransitionContent = SGetField<int>(LocalBridgeClazz, "fragmentExitTransition"); _fragmentExitTransitionReady = true; } return _fragmentExitTransitionContent; } }
            private static int _fragmentExitTransitionContent = default;
            private static bool _fragmentExitTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentFadeEnterAnimation"/>
            /// </summary>
            public static int fragmentFadeEnterAnimation { get { if (!_fragmentFadeEnterAnimationReady) { _fragmentFadeEnterAnimationContent = SGetField<int>(LocalBridgeClazz, "fragmentFadeEnterAnimation"); _fragmentFadeEnterAnimationReady = true; } return _fragmentFadeEnterAnimationContent; } }
            private static int _fragmentFadeEnterAnimationContent = default;
            private static bool _fragmentFadeEnterAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentFadeExitAnimation"/>
            /// </summary>
            public static int fragmentFadeExitAnimation { get { if (!_fragmentFadeExitAnimationReady) { _fragmentFadeExitAnimationContent = SGetField<int>(LocalBridgeClazz, "fragmentFadeExitAnimation"); _fragmentFadeExitAnimationReady = true; } return _fragmentFadeExitAnimationContent; } }
            private static int _fragmentFadeExitAnimationContent = default;
            private static bool _fragmentFadeExitAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentOpenEnterAnimation"/>
            /// </summary>
            public static int fragmentOpenEnterAnimation { get { if (!_fragmentOpenEnterAnimationReady) { _fragmentOpenEnterAnimationContent = SGetField<int>(LocalBridgeClazz, "fragmentOpenEnterAnimation"); _fragmentOpenEnterAnimationReady = true; } return _fragmentOpenEnterAnimationContent; } }
            private static int _fragmentOpenEnterAnimationContent = default;
            private static bool _fragmentOpenEnterAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentOpenExitAnimation"/>
            /// </summary>
            public static int fragmentOpenExitAnimation { get { if (!_fragmentOpenExitAnimationReady) { _fragmentOpenExitAnimationContent = SGetField<int>(LocalBridgeClazz, "fragmentOpenExitAnimation"); _fragmentOpenExitAnimationReady = true; } return _fragmentOpenExitAnimationContent; } }
            private static int _fragmentOpenExitAnimationContent = default;
            private static bool _fragmentOpenExitAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentPattern"/>
            /// </summary>
            public static int fragmentPattern { get { if (!_fragmentPatternReady) { _fragmentPatternContent = SGetField<int>(LocalBridgeClazz, "fragmentPattern"); _fragmentPatternReady = true; } return _fragmentPatternContent; } }
            private static int _fragmentPatternContent = default;
            private static bool _fragmentPatternReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentPrefix"/>
            /// </summary>
            public static int fragmentPrefix { get { if (!_fragmentPrefixReady) { _fragmentPrefixContent = SGetField<int>(LocalBridgeClazz, "fragmentPrefix"); _fragmentPrefixReady = true; } return _fragmentPrefixContent; } }
            private static int _fragmentPrefixContent = default;
            private static bool _fragmentPrefixReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentReenterTransition"/>
            /// </summary>
            public static int fragmentReenterTransition { get { if (!_fragmentReenterTransitionReady) { _fragmentReenterTransitionContent = SGetField<int>(LocalBridgeClazz, "fragmentReenterTransition"); _fragmentReenterTransitionReady = true; } return _fragmentReenterTransitionContent; } }
            private static int _fragmentReenterTransitionContent = default;
            private static bool _fragmentReenterTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentReturnTransition"/>
            /// </summary>
            public static int fragmentReturnTransition { get { if (!_fragmentReturnTransitionReady) { _fragmentReturnTransitionContent = SGetField<int>(LocalBridgeClazz, "fragmentReturnTransition"); _fragmentReturnTransitionReady = true; } return _fragmentReturnTransitionContent; } }
            private static int _fragmentReturnTransitionContent = default;
            private static bool _fragmentReturnTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentSharedElementEnterTransition"/>
            /// </summary>
            public static int fragmentSharedElementEnterTransition { get { if (!_fragmentSharedElementEnterTransitionReady) { _fragmentSharedElementEnterTransitionContent = SGetField<int>(LocalBridgeClazz, "fragmentSharedElementEnterTransition"); _fragmentSharedElementEnterTransitionReady = true; } return _fragmentSharedElementEnterTransitionContent; } }
            private static int _fragmentSharedElementEnterTransitionContent = default;
            private static bool _fragmentSharedElementEnterTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentSharedElementReturnTransition"/>
            /// </summary>
            public static int fragmentSharedElementReturnTransition { get { if (!_fragmentSharedElementReturnTransitionReady) { _fragmentSharedElementReturnTransitionContent = SGetField<int>(LocalBridgeClazz, "fragmentSharedElementReturnTransition"); _fragmentSharedElementReturnTransitionReady = true; } return _fragmentSharedElementReturnTransitionContent; } }
            private static int _fragmentSharedElementReturnTransitionContent = default;
            private static bool _fragmentSharedElementReturnTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fragmentSuffix"/>
            /// </summary>
            public static int fragmentSuffix { get { if (!_fragmentSuffixReady) { _fragmentSuffixContent = SGetField<int>(LocalBridgeClazz, "fragmentSuffix"); _fragmentSuffixReady = true; } return _fragmentSuffixContent; } }
            private static int _fragmentSuffixContent = default;
            private static bool _fragmentSuffixReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#freezesText"/>
            /// </summary>
            public static int freezesText { get { if (!_freezesTextReady) { _freezesTextContent = SGetField<int>(LocalBridgeClazz, "freezesText"); _freezesTextReady = true; } return _freezesTextContent; } }
            private static int _freezesTextContent = default;
            private static bool _freezesTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fromAlpha"/>
            /// </summary>
            public static int fromAlpha { get { if (!_fromAlphaReady) { _fromAlphaContent = SGetField<int>(LocalBridgeClazz, "fromAlpha"); _fromAlphaReady = true; } return _fromAlphaContent; } }
            private static int _fromAlphaContent = default;
            private static bool _fromAlphaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fromDegrees"/>
            /// </summary>
            public static int fromDegrees { get { if (!_fromDegreesReady) { _fromDegreesContent = SGetField<int>(LocalBridgeClazz, "fromDegrees"); _fromDegreesReady = true; } return _fromDegreesContent; } }
            private static int _fromDegreesContent = default;
            private static bool _fromDegreesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fromExtendBottom"/>
            /// </summary>
            public static int fromExtendBottom { get { if (!_fromExtendBottomReady) { _fromExtendBottomContent = SGetField<int>(LocalBridgeClazz, "fromExtendBottom"); _fromExtendBottomReady = true; } return _fromExtendBottomContent; } }
            private static int _fromExtendBottomContent = default;
            private static bool _fromExtendBottomReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fromExtendLeft"/>
            /// </summary>
            public static int fromExtendLeft { get { if (!_fromExtendLeftReady) { _fromExtendLeftContent = SGetField<int>(LocalBridgeClazz, "fromExtendLeft"); _fromExtendLeftReady = true; } return _fromExtendLeftContent; } }
            private static int _fromExtendLeftContent = default;
            private static bool _fromExtendLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fromExtendRight"/>
            /// </summary>
            public static int fromExtendRight { get { if (!_fromExtendRightReady) { _fromExtendRightContent = SGetField<int>(LocalBridgeClazz, "fromExtendRight"); _fromExtendRightReady = true; } return _fromExtendRightContent; } }
            private static int _fromExtendRightContent = default;
            private static bool _fromExtendRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fromExtendTop"/>
            /// </summary>
            public static int fromExtendTop { get { if (!_fromExtendTopReady) { _fromExtendTopContent = SGetField<int>(LocalBridgeClazz, "fromExtendTop"); _fromExtendTopReady = true; } return _fromExtendTopContent; } }
            private static int _fromExtendTopContent = default;
            private static bool _fromExtendTopReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fromId"/>
            /// </summary>
            public static int fromId { get { if (!_fromIdReady) { _fromIdContent = SGetField<int>(LocalBridgeClazz, "fromId"); _fromIdReady = true; } return _fromIdContent; } }
            private static int _fromIdContent = default;
            private static bool _fromIdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fromScene"/>
            /// </summary>
            public static int fromScene { get { if (!_fromSceneReady) { _fromSceneContent = SGetField<int>(LocalBridgeClazz, "fromScene"); _fromSceneReady = true; } return _fromSceneContent; } }
            private static int _fromSceneContent = default;
            private static bool _fromSceneReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fromXDelta"/>
            /// </summary>
            public static int fromXDelta { get { if (!_fromXDeltaReady) { _fromXDeltaContent = SGetField<int>(LocalBridgeClazz, "fromXDelta"); _fromXDeltaReady = true; } return _fromXDeltaContent; } }
            private static int _fromXDeltaContent = default;
            private static bool _fromXDeltaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fromXScale"/>
            /// </summary>
            public static int fromXScale { get { if (!_fromXScaleReady) { _fromXScaleContent = SGetField<int>(LocalBridgeClazz, "fromXScale"); _fromXScaleReady = true; } return _fromXScaleContent; } }
            private static int _fromXScaleContent = default;
            private static bool _fromXScaleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fromYDelta"/>
            /// </summary>
            public static int fromYDelta { get { if (!_fromYDeltaReady) { _fromYDeltaContent = SGetField<int>(LocalBridgeClazz, "fromYDelta"); _fromYDeltaReady = true; } return _fromYDeltaContent; } }
            private static int _fromYDeltaContent = default;
            private static bool _fromYDeltaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fromYScale"/>
            /// </summary>
            public static int fromYScale { get { if (!_fromYScaleReady) { _fromYScaleContent = SGetField<int>(LocalBridgeClazz, "fromYScale"); _fromYScaleReady = true; } return _fromYScaleContent; } }
            private static int _fromYScaleContent = default;
            private static bool _fromYScaleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fullBackupContent"/>
            /// </summary>
            public static int fullBackupContent { get { if (!_fullBackupContentReady) { _fullBackupContentContent = SGetField<int>(LocalBridgeClazz, "fullBackupContent"); _fullBackupContentReady = true; } return _fullBackupContentContent; } }
            private static int _fullBackupContentContent = default;
            private static bool _fullBackupContentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fullBackupOnly"/>
            /// </summary>
            public static int fullBackupOnly { get { if (!_fullBackupOnlyReady) { _fullBackupOnlyContent = SGetField<int>(LocalBridgeClazz, "fullBackupOnly"); _fullBackupOnlyReady = true; } return _fullBackupOnlyContent; } }
            private static int _fullBackupOnlyContent = default;
            private static bool _fullBackupOnlyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fullBright"/>
            /// </summary>
            public static int fullBright { get { if (!_fullBrightReady) { _fullBrightContent = SGetField<int>(LocalBridgeClazz, "fullBright"); _fullBrightReady = true; } return _fullBrightContent; } }
            private static int _fullBrightContent = default;
            private static bool _fullBrightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#fullDark"/>
            /// </summary>
            public static int fullDark { get { if (!_fullDarkReady) { _fullDarkContent = SGetField<int>(LocalBridgeClazz, "fullDark"); _fullDarkReady = true; } return _fullDarkContent; } }
            private static int _fullDarkContent = default;
            private static bool _fullDarkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#functionalTest"/>
            /// </summary>
            public static int functionalTest { get { if (!_functionalTestReady) { _functionalTestContent = SGetField<int>(LocalBridgeClazz, "functionalTest"); _functionalTestReady = true; } return _functionalTestContent; } }
            private static int _functionalTestContent = default;
            private static bool _functionalTestReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#galleryItemBackground"/>
            /// </summary>
            public static int galleryItemBackground { get { if (!_galleryItemBackgroundReady) { _galleryItemBackgroundContent = SGetField<int>(LocalBridgeClazz, "galleryItemBackground"); _galleryItemBackgroundReady = true; } return _galleryItemBackgroundContent; } }
            private static int _galleryItemBackgroundContent = default;
            private static bool _galleryItemBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#galleryStyle"/>
            /// </summary>
            public static int galleryStyle { get { if (!_galleryStyleReady) { _galleryStyleContent = SGetField<int>(LocalBridgeClazz, "galleryStyle"); _galleryStyleReady = true; } return _galleryStyleContent; } }
            private static int _galleryStyleContent = default;
            private static bool _galleryStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#gestureColor"/>
            /// </summary>
            public static int gestureColor { get { if (!_gestureColorReady) { _gestureColorContent = SGetField<int>(LocalBridgeClazz, "gestureColor"); _gestureColorReady = true; } return _gestureColorContent; } }
            private static int _gestureColorContent = default;
            private static bool _gestureColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#gestureStrokeAngleThreshold"/>
            /// </summary>
            public static int gestureStrokeAngleThreshold { get { if (!_gestureStrokeAngleThresholdReady) { _gestureStrokeAngleThresholdContent = SGetField<int>(LocalBridgeClazz, "gestureStrokeAngleThreshold"); _gestureStrokeAngleThresholdReady = true; } return _gestureStrokeAngleThresholdContent; } }
            private static int _gestureStrokeAngleThresholdContent = default;
            private static bool _gestureStrokeAngleThresholdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#gestureStrokeLengthThreshold"/>
            /// </summary>
            public static int gestureStrokeLengthThreshold { get { if (!_gestureStrokeLengthThresholdReady) { _gestureStrokeLengthThresholdContent = SGetField<int>(LocalBridgeClazz, "gestureStrokeLengthThreshold"); _gestureStrokeLengthThresholdReady = true; } return _gestureStrokeLengthThresholdContent; } }
            private static int _gestureStrokeLengthThresholdContent = default;
            private static bool _gestureStrokeLengthThresholdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#gestureStrokeSquarenessThreshold"/>
            /// </summary>
            public static int gestureStrokeSquarenessThreshold { get { if (!_gestureStrokeSquarenessThresholdReady) { _gestureStrokeSquarenessThresholdContent = SGetField<int>(LocalBridgeClazz, "gestureStrokeSquarenessThreshold"); _gestureStrokeSquarenessThresholdReady = true; } return _gestureStrokeSquarenessThresholdContent; } }
            private static int _gestureStrokeSquarenessThresholdContent = default;
            private static bool _gestureStrokeSquarenessThresholdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#gestureStrokeType"/>
            /// </summary>
            public static int gestureStrokeType { get { if (!_gestureStrokeTypeReady) { _gestureStrokeTypeContent = SGetField<int>(LocalBridgeClazz, "gestureStrokeType"); _gestureStrokeTypeReady = true; } return _gestureStrokeTypeContent; } }
            private static int _gestureStrokeTypeContent = default;
            private static bool _gestureStrokeTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#gestureStrokeWidth"/>
            /// </summary>
            public static int gestureStrokeWidth { get { if (!_gestureStrokeWidthReady) { _gestureStrokeWidthContent = SGetField<int>(LocalBridgeClazz, "gestureStrokeWidth"); _gestureStrokeWidthReady = true; } return _gestureStrokeWidthContent; } }
            private static int _gestureStrokeWidthContent = default;
            private static bool _gestureStrokeWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#glEsVersion"/>
            /// </summary>
            public static int glEsVersion { get { if (!_glEsVersionReady) { _glEsVersionContent = SGetField<int>(LocalBridgeClazz, "glEsVersion"); _glEsVersionReady = true; } return _glEsVersionContent; } }
            private static int _glEsVersionContent = default;
            private static bool _glEsVersionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#goIcon"/>
            /// </summary>
            public static int goIcon { get { if (!_goIconReady) { _goIconContent = SGetField<int>(LocalBridgeClazz, "goIcon"); _goIconReady = true; } return _goIconContent; } }
            private static int _goIconContent = default;
            private static bool _goIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#gradientRadius"/>
            /// </summary>
            public static int gradientRadius { get { if (!_gradientRadiusReady) { _gradientRadiusContent = SGetField<int>(LocalBridgeClazz, "gradientRadius"); _gradientRadiusReady = true; } return _gradientRadiusContent; } }
            private static int _gradientRadiusContent = default;
            private static bool _gradientRadiusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#grantUriPermissions"/>
            /// </summary>
            public static int grantUriPermissions { get { if (!_grantUriPermissionsReady) { _grantUriPermissionsContent = SGetField<int>(LocalBridgeClazz, "grantUriPermissions"); _grantUriPermissionsReady = true; } return _grantUriPermissionsContent; } }
            private static int _grantUriPermissionsContent = default;
            private static bool _grantUriPermissionsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#gravity"/>
            /// </summary>
            public static int gravity { get { if (!_gravityReady) { _gravityContent = SGetField<int>(LocalBridgeClazz, "gravity"); _gravityReady = true; } return _gravityContent; } }
            private static int _gravityContent = default;
            private static bool _gravityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#gridViewStyle"/>
            /// </summary>
            public static int gridViewStyle { get { if (!_gridViewStyleReady) { _gridViewStyleContent = SGetField<int>(LocalBridgeClazz, "gridViewStyle"); _gridViewStyleReady = true; } return _gridViewStyleContent; } }
            private static int _gridViewStyleContent = default;
            private static bool _gridViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#groupIndicator"/>
            /// </summary>
            public static int groupIndicator { get { if (!_groupIndicatorReady) { _groupIndicatorContent = SGetField<int>(LocalBridgeClazz, "groupIndicator"); _groupIndicatorReady = true; } return _groupIndicatorContent; } }
            private static int _groupIndicatorContent = default;
            private static bool _groupIndicatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#gwpAsanMode"/>
            /// </summary>
            public static int gwpAsanMode { get { if (!_gwpAsanModeReady) { _gwpAsanModeContent = SGetField<int>(LocalBridgeClazz, "gwpAsanMode"); _gwpAsanModeReady = true; } return _gwpAsanModeContent; } }
            private static int _gwpAsanModeContent = default;
            private static bool _gwpAsanModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hand_hour"/>
            /// </summary>
            public static int hand_hour { get { if (!_hand_hourReady) { _hand_hourContent = SGetField<int>(LocalBridgeClazz, "hand_hour"); _hand_hourReady = true; } return _hand_hourContent; } }
            private static int _hand_hourContent = default;
            private static bool _hand_hourReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hand_hourTint"/>
            /// </summary>
            public static int hand_hourTint { get { if (!_hand_hourTintReady) { _hand_hourTintContent = SGetField<int>(LocalBridgeClazz, "hand_hourTint"); _hand_hourTintReady = true; } return _hand_hourTintContent; } }
            private static int _hand_hourTintContent = default;
            private static bool _hand_hourTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hand_hourTintMode"/>
            /// </summary>
            public static int hand_hourTintMode { get { if (!_hand_hourTintModeReady) { _hand_hourTintModeContent = SGetField<int>(LocalBridgeClazz, "hand_hourTintMode"); _hand_hourTintModeReady = true; } return _hand_hourTintModeContent; } }
            private static int _hand_hourTintModeContent = default;
            private static bool _hand_hourTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hand_minute"/>
            /// </summary>
            public static int hand_minute { get { if (!_hand_minuteReady) { _hand_minuteContent = SGetField<int>(LocalBridgeClazz, "hand_minute"); _hand_minuteReady = true; } return _hand_minuteContent; } }
            private static int _hand_minuteContent = default;
            private static bool _hand_minuteReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hand_minuteTint"/>
            /// </summary>
            public static int hand_minuteTint { get { if (!_hand_minuteTintReady) { _hand_minuteTintContent = SGetField<int>(LocalBridgeClazz, "hand_minuteTint"); _hand_minuteTintReady = true; } return _hand_minuteTintContent; } }
            private static int _hand_minuteTintContent = default;
            private static bool _hand_minuteTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hand_minuteTintMode"/>
            /// </summary>
            public static int hand_minuteTintMode { get { if (!_hand_minuteTintModeReady) { _hand_minuteTintModeContent = SGetField<int>(LocalBridgeClazz, "hand_minuteTintMode"); _hand_minuteTintModeReady = true; } return _hand_minuteTintModeContent; } }
            private static int _hand_minuteTintModeContent = default;
            private static bool _hand_minuteTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hand_second"/>
            /// </summary>
            public static int hand_second { get { if (!_hand_secondReady) { _hand_secondContent = SGetField<int>(LocalBridgeClazz, "hand_second"); _hand_secondReady = true; } return _hand_secondContent; } }
            private static int _hand_secondContent = default;
            private static bool _hand_secondReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hand_secondTint"/>
            /// </summary>
            public static int hand_secondTint { get { if (!_hand_secondTintReady) { _hand_secondTintContent = SGetField<int>(LocalBridgeClazz, "hand_secondTint"); _hand_secondTintReady = true; } return _hand_secondTintContent; } }
            private static int _hand_secondTintContent = default;
            private static bool _hand_secondTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hand_secondTintMode"/>
            /// </summary>
            public static int hand_secondTintMode { get { if (!_hand_secondTintModeReady) { _hand_secondTintModeContent = SGetField<int>(LocalBridgeClazz, "hand_secondTintMode"); _hand_secondTintModeReady = true; } return _hand_secondTintModeContent; } }
            private static int _hand_secondTintModeContent = default;
            private static bool _hand_secondTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#handle"/>
            /// </summary>
            public static int handle { get { if (!_handleReady) { _handleContent = SGetField<int>(LocalBridgeClazz, "handle"); _handleReady = true; } return _handleContent; } }
            private static int _handleContent = default;
            private static bool _handleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#handleProfiling"/>
            /// </summary>
            public static int handleProfiling { get { if (!_handleProfilingReady) { _handleProfilingContent = SGetField<int>(LocalBridgeClazz, "handleProfiling"); _handleProfilingReady = true; } return _handleProfilingContent; } }
            private static int _handleProfilingContent = default;
            private static bool _handleProfilingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#handwritingBoundsOffsetBottom"/>
            /// </summary>
            public static int handwritingBoundsOffsetBottom { get { if (!_handwritingBoundsOffsetBottomReady) { _handwritingBoundsOffsetBottomContent = SGetField<int>(LocalBridgeClazz, "handwritingBoundsOffsetBottom"); _handwritingBoundsOffsetBottomReady = true; } return _handwritingBoundsOffsetBottomContent; } }
            private static int _handwritingBoundsOffsetBottomContent = default;
            private static bool _handwritingBoundsOffsetBottomReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#handwritingBoundsOffsetLeft"/>
            /// </summary>
            public static int handwritingBoundsOffsetLeft { get { if (!_handwritingBoundsOffsetLeftReady) { _handwritingBoundsOffsetLeftContent = SGetField<int>(LocalBridgeClazz, "handwritingBoundsOffsetLeft"); _handwritingBoundsOffsetLeftReady = true; } return _handwritingBoundsOffsetLeftContent; } }
            private static int _handwritingBoundsOffsetLeftContent = default;
            private static bool _handwritingBoundsOffsetLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#handwritingBoundsOffsetRight"/>
            /// </summary>
            public static int handwritingBoundsOffsetRight { get { if (!_handwritingBoundsOffsetRightReady) { _handwritingBoundsOffsetRightContent = SGetField<int>(LocalBridgeClazz, "handwritingBoundsOffsetRight"); _handwritingBoundsOffsetRightReady = true; } return _handwritingBoundsOffsetRightContent; } }
            private static int _handwritingBoundsOffsetRightContent = default;
            private static bool _handwritingBoundsOffsetRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#handwritingBoundsOffsetTop"/>
            /// </summary>
            public static int handwritingBoundsOffsetTop { get { if (!_handwritingBoundsOffsetTopReady) { _handwritingBoundsOffsetTopContent = SGetField<int>(LocalBridgeClazz, "handwritingBoundsOffsetTop"); _handwritingBoundsOffsetTopReady = true; } return _handwritingBoundsOffsetTopContent; } }
            private static int _handwritingBoundsOffsetTopContent = default;
            private static bool _handwritingBoundsOffsetTopReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hapticFeedbackEnabled"/>
            /// </summary>
            public static int hapticFeedbackEnabled { get { if (!_hapticFeedbackEnabledReady) { _hapticFeedbackEnabledContent = SGetField<int>(LocalBridgeClazz, "hapticFeedbackEnabled"); _hapticFeedbackEnabledReady = true; } return _hapticFeedbackEnabledContent; } }
            private static int _hapticFeedbackEnabledContent = default;
            private static bool _hapticFeedbackEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hardwareAccelerated"/>
            /// </summary>
            public static int hardwareAccelerated { get { if (!_hardwareAcceleratedReady) { _hardwareAcceleratedContent = SGetField<int>(LocalBridgeClazz, "hardwareAccelerated"); _hardwareAcceleratedReady = true; } return _hardwareAcceleratedContent; } }
            private static int _hardwareAcceleratedContent = default;
            private static bool _hardwareAcceleratedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hasCode"/>
            /// </summary>
            public static int hasCode { get { if (!_hasCodeReady) { _hasCodeContent = SGetField<int>(LocalBridgeClazz, "hasCode"); _hasCodeReady = true; } return _hasCodeContent; } }
            private static int _hasCodeContent = default;
            private static bool _hasCodeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hasFragileUserData"/>
            /// </summary>
            public static int hasFragileUserData { get { if (!_hasFragileUserDataReady) { _hasFragileUserDataContent = SGetField<int>(LocalBridgeClazz, "hasFragileUserData"); _hasFragileUserDataReady = true; } return _hasFragileUserDataContent; } }
            private static int _hasFragileUserDataContent = default;
            private static bool _hasFragileUserDataReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#headerAmPmTextAppearance"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int headerAmPmTextAppearance { get { if (!_headerAmPmTextAppearanceReady) { _headerAmPmTextAppearanceContent = SGetField<int>(LocalBridgeClazz, "headerAmPmTextAppearance"); _headerAmPmTextAppearanceReady = true; } return _headerAmPmTextAppearanceContent; } }
            private static int _headerAmPmTextAppearanceContent = default;
            private static bool _headerAmPmTextAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#headerBackground"/>
            /// </summary>
            public static int headerBackground { get { if (!_headerBackgroundReady) { _headerBackgroundContent = SGetField<int>(LocalBridgeClazz, "headerBackground"); _headerBackgroundReady = true; } return _headerBackgroundContent; } }
            private static int _headerBackgroundContent = default;
            private static bool _headerBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#headerDayOfMonthTextAppearance"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int headerDayOfMonthTextAppearance { get { if (!_headerDayOfMonthTextAppearanceReady) { _headerDayOfMonthTextAppearanceContent = SGetField<int>(LocalBridgeClazz, "headerDayOfMonthTextAppearance"); _headerDayOfMonthTextAppearanceReady = true; } return _headerDayOfMonthTextAppearanceContent; } }
            private static int _headerDayOfMonthTextAppearanceContent = default;
            private static bool _headerDayOfMonthTextAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#headerDividersEnabled"/>
            /// </summary>
            public static int headerDividersEnabled { get { if (!_headerDividersEnabledReady) { _headerDividersEnabledContent = SGetField<int>(LocalBridgeClazz, "headerDividersEnabled"); _headerDividersEnabledReady = true; } return _headerDividersEnabledContent; } }
            private static int _headerDividersEnabledContent = default;
            private static bool _headerDividersEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#headerMonthTextAppearance"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int headerMonthTextAppearance { get { if (!_headerMonthTextAppearanceReady) { _headerMonthTextAppearanceContent = SGetField<int>(LocalBridgeClazz, "headerMonthTextAppearance"); _headerMonthTextAppearanceReady = true; } return _headerMonthTextAppearanceContent; } }
            private static int _headerMonthTextAppearanceContent = default;
            private static bool _headerMonthTextAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#headerTimeTextAppearance"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int headerTimeTextAppearance { get { if (!_headerTimeTextAppearanceReady) { _headerTimeTextAppearanceContent = SGetField<int>(LocalBridgeClazz, "headerTimeTextAppearance"); _headerTimeTextAppearanceReady = true; } return _headerTimeTextAppearanceContent; } }
            private static int _headerTimeTextAppearanceContent = default;
            private static bool _headerTimeTextAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#headerYearTextAppearance"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int headerYearTextAppearance { get { if (!_headerYearTextAppearanceReady) { _headerYearTextAppearanceContent = SGetField<int>(LocalBridgeClazz, "headerYearTextAppearance"); _headerYearTextAppearanceReady = true; } return _headerYearTextAppearanceContent; } }
            private static int _headerYearTextAppearanceContent = default;
            private static bool _headerYearTextAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#height"/>
            /// </summary>
            public static int height { get { if (!_heightReady) { _heightContent = SGetField<int>(LocalBridgeClazz, "height"); _heightReady = true; } return _heightContent; } }
            private static int _heightContent = default;
            private static bool _heightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hideOnContentScroll"/>
            /// </summary>
            public static int hideOnContentScroll { get { if (!_hideOnContentScrollReady) { _hideOnContentScrollContent = SGetField<int>(LocalBridgeClazz, "hideOnContentScroll"); _hideOnContentScrollReady = true; } return _hideOnContentScrollContent; } }
            private static int _hideOnContentScrollContent = default;
            private static bool _hideOnContentScrollReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hint"/>
            /// </summary>
            public static int hint { get { if (!_hintReady) { _hintContent = SGetField<int>(LocalBridgeClazz, "hint"); _hintReady = true; } return _hintContent; } }
            private static int _hintContent = default;
            private static bool _hintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#homeAsUpIndicator"/>
            /// </summary>
            public static int homeAsUpIndicator { get { if (!_homeAsUpIndicatorReady) { _homeAsUpIndicatorContent = SGetField<int>(LocalBridgeClazz, "homeAsUpIndicator"); _homeAsUpIndicatorReady = true; } return _homeAsUpIndicatorContent; } }
            private static int _homeAsUpIndicatorContent = default;
            private static bool _homeAsUpIndicatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#homeLayout"/>
            /// </summary>
            public static int homeLayout { get { if (!_homeLayoutReady) { _homeLayoutContent = SGetField<int>(LocalBridgeClazz, "homeLayout"); _homeLayoutReady = true; } return _homeLayoutContent; } }
            private static int _homeLayoutContent = default;
            private static bool _homeLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#horizontalDivider"/>
            /// </summary>
            public static int horizontalDivider { get { if (!_horizontalDividerReady) { _horizontalDividerContent = SGetField<int>(LocalBridgeClazz, "horizontalDivider"); _horizontalDividerReady = true; } return _horizontalDividerContent; } }
            private static int _horizontalDividerContent = default;
            private static bool _horizontalDividerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#horizontalGap"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int horizontalGap { get { if (!_horizontalGapReady) { _horizontalGapContent = SGetField<int>(LocalBridgeClazz, "horizontalGap"); _horizontalGapReady = true; } return _horizontalGapContent; } }
            private static int _horizontalGapContent = default;
            private static bool _horizontalGapReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#horizontalScrollViewStyle"/>
            /// </summary>
            public static int horizontalScrollViewStyle { get { if (!_horizontalScrollViewStyleReady) { _horizontalScrollViewStyleContent = SGetField<int>(LocalBridgeClazz, "horizontalScrollViewStyle"); _horizontalScrollViewStyleReady = true; } return _horizontalScrollViewStyleContent; } }
            private static int _horizontalScrollViewStyleContent = default;
            private static bool _horizontalScrollViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#horizontalSpacing"/>
            /// </summary>
            public static int horizontalSpacing { get { if (!_horizontalSpacingReady) { _horizontalSpacingContent = SGetField<int>(LocalBridgeClazz, "horizontalSpacing"); _horizontalSpacingReady = true; } return _horizontalSpacingContent; } }
            private static int _horizontalSpacingContent = default;
            private static bool _horizontalSpacingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#host"/>
            /// </summary>
            public static int host { get { if (!_hostReady) { _hostContent = SGetField<int>(LocalBridgeClazz, "host"); _hostReady = true; } return _hostContent; } }
            private static int _hostContent = default;
            private static bool _hostReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hotSpotX"/>
            /// </summary>
            public static int hotSpotX { get { if (!_hotSpotXReady) { _hotSpotXContent = SGetField<int>(LocalBridgeClazz, "hotSpotX"); _hotSpotXReady = true; } return _hotSpotXContent; } }
            private static int _hotSpotXContent = default;
            private static bool _hotSpotXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hotSpotY"/>
            /// </summary>
            public static int hotSpotY { get { if (!_hotSpotYReady) { _hotSpotYContent = SGetField<int>(LocalBridgeClazz, "hotSpotY"); _hotSpotYReady = true; } return _hotSpotYContent; } }
            private static int _hotSpotYContent = default;
            private static bool _hotSpotYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#htmlDescription"/>
            /// </summary>
            public static int htmlDescription { get { if (!_htmlDescriptionReady) { _htmlDescriptionContent = SGetField<int>(LocalBridgeClazz, "htmlDescription"); _htmlDescriptionReady = true; } return _htmlDescriptionContent; } }
            private static int _htmlDescriptionContent = default;
            private static bool _htmlDescriptionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#hyphenationFrequency"/>
            /// </summary>
            public static int hyphenationFrequency { get { if (!_hyphenationFrequencyReady) { _hyphenationFrequencyContent = SGetField<int>(LocalBridgeClazz, "hyphenationFrequency"); _hyphenationFrequencyReady = true; } return _hyphenationFrequencyContent; } }
            private static int _hyphenationFrequencyContent = default;
            private static bool _hyphenationFrequencyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#icon"/>
            /// </summary>
            public static int icon { get { if (!_iconReady) { _iconContent = SGetField<int>(LocalBridgeClazz, "icon"); _iconReady = true; } return _iconContent; } }
            private static int _iconContent = default;
            private static bool _iconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#iconifiedByDefault"/>
            /// </summary>
            public static int iconifiedByDefault { get { if (!_iconifiedByDefaultReady) { _iconifiedByDefaultContent = SGetField<int>(LocalBridgeClazz, "iconifiedByDefault"); _iconifiedByDefaultReady = true; } return _iconifiedByDefaultContent; } }
            private static int _iconifiedByDefaultContent = default;
            private static bool _iconifiedByDefaultReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#iconPreview"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int iconPreview { get { if (!_iconPreviewReady) { _iconPreviewContent = SGetField<int>(LocalBridgeClazz, "iconPreview"); _iconPreviewReady = true; } return _iconPreviewContent; } }
            private static int _iconPreviewContent = default;
            private static bool _iconPreviewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#iconSpaceReserved"/>
            /// </summary>
            public static int iconSpaceReserved { get { if (!_iconSpaceReservedReady) { _iconSpaceReservedContent = SGetField<int>(LocalBridgeClazz, "iconSpaceReserved"); _iconSpaceReservedReady = true; } return _iconSpaceReservedContent; } }
            private static int _iconSpaceReservedContent = default;
            private static bool _iconSpaceReservedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#iconTint"/>
            /// </summary>
            public static int iconTint { get { if (!_iconTintReady) { _iconTintContent = SGetField<int>(LocalBridgeClazz, "iconTint"); _iconTintReady = true; } return _iconTintContent; } }
            private static int _iconTintContent = default;
            private static bool _iconTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#iconTintMode"/>
            /// </summary>
            public static int iconTintMode { get { if (!_iconTintModeReady) { _iconTintModeContent = SGetField<int>(LocalBridgeClazz, "iconTintMode"); _iconTintModeReady = true; } return _iconTintModeContent; } }
            private static int _iconTintModeContent = default;
            private static bool _iconTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#id"/>
            /// </summary>
            public static int idField { get { if (!_idFieldReady) { _idFieldContent = SGetField<int>(LocalBridgeClazz, "id"); _idFieldReady = true; } return _idFieldContent; } }
            private static int _idFieldContent = default;
            private static bool _idFieldReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#identifier"/>
            /// </summary>
            public static int identifier { get { if (!_identifierReady) { _identifierContent = SGetField<int>(LocalBridgeClazz, "identifier"); _identifierReady = true; } return _identifierContent; } }
            private static int _identifierContent = default;
            private static bool _identifierReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#ignoreGravity"/>
            /// </summary>
            public static int ignoreGravity { get { if (!_ignoreGravityReady) { _ignoreGravityContent = SGetField<int>(LocalBridgeClazz, "ignoreGravity"); _ignoreGravityReady = true; } return _ignoreGravityContent; } }
            private static int _ignoreGravityContent = default;
            private static bool _ignoreGravityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#imageButtonStyle"/>
            /// </summary>
            public static int imageButtonStyle { get { if (!_imageButtonStyleReady) { _imageButtonStyleContent = SGetField<int>(LocalBridgeClazz, "imageButtonStyle"); _imageButtonStyleReady = true; } return _imageButtonStyleContent; } }
            private static int _imageButtonStyleContent = default;
            private static bool _imageButtonStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#imageWellStyle"/>
            /// </summary>
            public static int imageWellStyle { get { if (!_imageWellStyleReady) { _imageWellStyleContent = SGetField<int>(LocalBridgeClazz, "imageWellStyle"); _imageWellStyleReady = true; } return _imageWellStyleContent; } }
            private static int _imageWellStyleContent = default;
            private static bool _imageWellStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#imeActionId"/>
            /// </summary>
            public static int imeActionId { get { if (!_imeActionIdReady) { _imeActionIdContent = SGetField<int>(LocalBridgeClazz, "imeActionId"); _imeActionIdReady = true; } return _imeActionIdContent; } }
            private static int _imeActionIdContent = default;
            private static bool _imeActionIdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#imeActionLabel"/>
            /// </summary>
            public static int imeActionLabel { get { if (!_imeActionLabelReady) { _imeActionLabelContent = SGetField<int>(LocalBridgeClazz, "imeActionLabel"); _imeActionLabelReady = true; } return _imeActionLabelContent; } }
            private static int _imeActionLabelContent = default;
            private static bool _imeActionLabelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#imeExtractEnterAnimation"/>
            /// </summary>
            public static int imeExtractEnterAnimation { get { if (!_imeExtractEnterAnimationReady) { _imeExtractEnterAnimationContent = SGetField<int>(LocalBridgeClazz, "imeExtractEnterAnimation"); _imeExtractEnterAnimationReady = true; } return _imeExtractEnterAnimationContent; } }
            private static int _imeExtractEnterAnimationContent = default;
            private static bool _imeExtractEnterAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#imeExtractExitAnimation"/>
            /// </summary>
            public static int imeExtractExitAnimation { get { if (!_imeExtractExitAnimationReady) { _imeExtractExitAnimationContent = SGetField<int>(LocalBridgeClazz, "imeExtractExitAnimation"); _imeExtractExitAnimationReady = true; } return _imeExtractExitAnimationContent; } }
            private static int _imeExtractExitAnimationContent = default;
            private static bool _imeExtractExitAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#imeFullscreenBackground"/>
            /// </summary>
            public static int imeFullscreenBackground { get { if (!_imeFullscreenBackgroundReady) { _imeFullscreenBackgroundContent = SGetField<int>(LocalBridgeClazz, "imeFullscreenBackground"); _imeFullscreenBackgroundReady = true; } return _imeFullscreenBackgroundContent; } }
            private static int _imeFullscreenBackgroundContent = default;
            private static bool _imeFullscreenBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#imeOptions"/>
            /// </summary>
            public static int imeOptions { get { if (!_imeOptionsReady) { _imeOptionsContent = SGetField<int>(LocalBridgeClazz, "imeOptions"); _imeOptionsReady = true; } return _imeOptionsContent; } }
            private static int _imeOptionsContent = default;
            private static bool _imeOptionsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#imeSubtypeExtraValue"/>
            /// </summary>
            public static int imeSubtypeExtraValue { get { if (!_imeSubtypeExtraValueReady) { _imeSubtypeExtraValueContent = SGetField<int>(LocalBridgeClazz, "imeSubtypeExtraValue"); _imeSubtypeExtraValueReady = true; } return _imeSubtypeExtraValueContent; } }
            private static int _imeSubtypeExtraValueContent = default;
            private static bool _imeSubtypeExtraValueReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#imeSubtypeLocale"/>
            /// </summary>
            public static int imeSubtypeLocale { get { if (!_imeSubtypeLocaleReady) { _imeSubtypeLocaleContent = SGetField<int>(LocalBridgeClazz, "imeSubtypeLocale"); _imeSubtypeLocaleReady = true; } return _imeSubtypeLocaleContent; } }
            private static int _imeSubtypeLocaleContent = default;
            private static bool _imeSubtypeLocaleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#imeSubtypeMode"/>
            /// </summary>
            public static int imeSubtypeMode { get { if (!_imeSubtypeModeReady) { _imeSubtypeModeContent = SGetField<int>(LocalBridgeClazz, "imeSubtypeMode"); _imeSubtypeModeReady = true; } return _imeSubtypeModeContent; } }
            private static int _imeSubtypeModeContent = default;
            private static bool _imeSubtypeModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#immersive"/>
            /// </summary>
            public static int immersive { get { if (!_immersiveReady) { _immersiveContent = SGetField<int>(LocalBridgeClazz, "immersive"); _immersiveReady = true; } return _immersiveContent; } }
            private static int _immersiveContent = default;
            private static bool _immersiveReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#importantForAccessibility"/>
            /// </summary>
            public static int importantForAccessibility { get { if (!_importantForAccessibilityReady) { _importantForAccessibilityContent = SGetField<int>(LocalBridgeClazz, "importantForAccessibility"); _importantForAccessibilityReady = true; } return _importantForAccessibilityContent; } }
            private static int _importantForAccessibilityContent = default;
            private static bool _importantForAccessibilityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#importantForAutofill"/>
            /// </summary>
            public static int importantForAutofill { get { if (!_importantForAutofillReady) { _importantForAutofillContent = SGetField<int>(LocalBridgeClazz, "importantForAutofill"); _importantForAutofillReady = true; } return _importantForAutofillContent; } }
            private static int _importantForAutofillContent = default;
            private static bool _importantForAutofillReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#importantForContentCapture"/>
            /// </summary>
            public static int importantForContentCapture { get { if (!_importantForContentCaptureReady) { _importantForContentCaptureContent = SGetField<int>(LocalBridgeClazz, "importantForContentCapture"); _importantForContentCaptureReady = true; } return _importantForContentCaptureContent; } }
            private static int _importantForContentCaptureContent = default;
            private static bool _importantForContentCaptureReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#inAnimation"/>
            /// </summary>
            public static int inAnimation { get { if (!_inAnimationReady) { _inAnimationContent = SGetField<int>(LocalBridgeClazz, "inAnimation"); _inAnimationReady = true; } return _inAnimationContent; } }
            private static int _inAnimationContent = default;
            private static bool _inAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#includeFontPadding"/>
            /// </summary>
            public static int includeFontPadding { get { if (!_includeFontPaddingReady) { _includeFontPaddingContent = SGetField<int>(LocalBridgeClazz, "includeFontPadding"); _includeFontPaddingReady = true; } return _includeFontPaddingContent; } }
            private static int _includeFontPaddingContent = default;
            private static bool _includeFontPaddingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#includeInGlobalSearch"/>
            /// </summary>
            public static int includeInGlobalSearch { get { if (!_includeInGlobalSearchReady) { _includeInGlobalSearchContent = SGetField<int>(LocalBridgeClazz, "includeInGlobalSearch"); _includeInGlobalSearchReady = true; } return _includeInGlobalSearchContent; } }
            private static int _includeInGlobalSearchContent = default;
            private static bool _includeInGlobalSearchReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#indeterminate"/>
            /// </summary>
            public static int indeterminate { get { if (!_indeterminateReady) { _indeterminateContent = SGetField<int>(LocalBridgeClazz, "indeterminate"); _indeterminateReady = true; } return _indeterminateContent; } }
            private static int _indeterminateContent = default;
            private static bool _indeterminateReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#indeterminateBehavior"/>
            /// </summary>
            public static int indeterminateBehavior { get { if (!_indeterminateBehaviorReady) { _indeterminateBehaviorContent = SGetField<int>(LocalBridgeClazz, "indeterminateBehavior"); _indeterminateBehaviorReady = true; } return _indeterminateBehaviorContent; } }
            private static int _indeterminateBehaviorContent = default;
            private static bool _indeterminateBehaviorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#indeterminateDrawable"/>
            /// </summary>
            public static int indeterminateDrawable { get { if (!_indeterminateDrawableReady) { _indeterminateDrawableContent = SGetField<int>(LocalBridgeClazz, "indeterminateDrawable"); _indeterminateDrawableReady = true; } return _indeterminateDrawableContent; } }
            private static int _indeterminateDrawableContent = default;
            private static bool _indeterminateDrawableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#indeterminateDuration"/>
            /// </summary>
            public static int indeterminateDuration { get { if (!_indeterminateDurationReady) { _indeterminateDurationContent = SGetField<int>(LocalBridgeClazz, "indeterminateDuration"); _indeterminateDurationReady = true; } return _indeterminateDurationContent; } }
            private static int _indeterminateDurationContent = default;
            private static bool _indeterminateDurationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#indeterminateOnly"/>
            /// </summary>
            public static int indeterminateOnly { get { if (!_indeterminateOnlyReady) { _indeterminateOnlyContent = SGetField<int>(LocalBridgeClazz, "indeterminateOnly"); _indeterminateOnlyReady = true; } return _indeterminateOnlyContent; } }
            private static int _indeterminateOnlyContent = default;
            private static bool _indeterminateOnlyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#indeterminateProgressStyle"/>
            /// </summary>
            public static int indeterminateProgressStyle { get { if (!_indeterminateProgressStyleReady) { _indeterminateProgressStyleContent = SGetField<int>(LocalBridgeClazz, "indeterminateProgressStyle"); _indeterminateProgressStyleReady = true; } return _indeterminateProgressStyleContent; } }
            private static int _indeterminateProgressStyleContent = default;
            private static bool _indeterminateProgressStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#indeterminateTint"/>
            /// </summary>
            public static int indeterminateTint { get { if (!_indeterminateTintReady) { _indeterminateTintContent = SGetField<int>(LocalBridgeClazz, "indeterminateTint"); _indeterminateTintReady = true; } return _indeterminateTintContent; } }
            private static int _indeterminateTintContent = default;
            private static bool _indeterminateTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#indeterminateTintMode"/>
            /// </summary>
            public static int indeterminateTintMode { get { if (!_indeterminateTintModeReady) { _indeterminateTintModeContent = SGetField<int>(LocalBridgeClazz, "indeterminateTintMode"); _indeterminateTintModeReady = true; } return _indeterminateTintModeContent; } }
            private static int _indeterminateTintModeContent = default;
            private static bool _indeterminateTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#indicatorEnd"/>
            /// </summary>
            public static int indicatorEnd { get { if (!_indicatorEndReady) { _indicatorEndContent = SGetField<int>(LocalBridgeClazz, "indicatorEnd"); _indicatorEndReady = true; } return _indicatorEndContent; } }
            private static int _indicatorEndContent = default;
            private static bool _indicatorEndReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#indicatorLeft"/>
            /// </summary>
            public static int indicatorLeft { get { if (!_indicatorLeftReady) { _indicatorLeftContent = SGetField<int>(LocalBridgeClazz, "indicatorLeft"); _indicatorLeftReady = true; } return _indicatorLeftContent; } }
            private static int _indicatorLeftContent = default;
            private static bool _indicatorLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#indicatorRight"/>
            /// </summary>
            public static int indicatorRight { get { if (!_indicatorRightReady) { _indicatorRightContent = SGetField<int>(LocalBridgeClazz, "indicatorRight"); _indicatorRightReady = true; } return _indicatorRightContent; } }
            private static int _indicatorRightContent = default;
            private static bool _indicatorRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#indicatorStart"/>
            /// </summary>
            public static int indicatorStart { get { if (!_indicatorStartReady) { _indicatorStartContent = SGetField<int>(LocalBridgeClazz, "indicatorStart"); _indicatorStartReady = true; } return _indicatorStartContent; } }
            private static int _indicatorStartContent = default;
            private static bool _indicatorStartReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#inflatedId"/>
            /// </summary>
            public static int inflatedId { get { if (!_inflatedIdReady) { _inflatedIdContent = SGetField<int>(LocalBridgeClazz, "inflatedId"); _inflatedIdReady = true; } return _inflatedIdContent; } }
            private static int _inflatedIdContent = default;
            private static bool _inflatedIdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#inheritShowWhenLocked"/>
            /// </summary>
            public static int inheritShowWhenLocked { get { if (!_inheritShowWhenLockedReady) { _inheritShowWhenLockedContent = SGetField<int>(LocalBridgeClazz, "inheritShowWhenLocked"); _inheritShowWhenLockedReady = true; } return _inheritShowWhenLockedContent; } }
            private static int _inheritShowWhenLockedContent = default;
            private static bool _inheritShowWhenLockedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#initialKeyguardLayout"/>
            /// </summary>
            public static int initialKeyguardLayout { get { if (!_initialKeyguardLayoutReady) { _initialKeyguardLayoutContent = SGetField<int>(LocalBridgeClazz, "initialKeyguardLayout"); _initialKeyguardLayoutReady = true; } return _initialKeyguardLayoutContent; } }
            private static int _initialKeyguardLayoutContent = default;
            private static bool _initialKeyguardLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#initialLayout"/>
            /// </summary>
            public static int initialLayout { get { if (!_initialLayoutReady) { _initialLayoutContent = SGetField<int>(LocalBridgeClazz, "initialLayout"); _initialLayoutReady = true; } return _initialLayoutContent; } }
            private static int _initialLayoutContent = default;
            private static bool _initialLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#initOrder"/>
            /// </summary>
            public static int initOrder { get { if (!_initOrderReady) { _initOrderContent = SGetField<int>(LocalBridgeClazz, "initOrder"); _initOrderReady = true; } return _initOrderContent; } }
            private static int _initOrderContent = default;
            private static bool _initOrderReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#innerRadius"/>
            /// </summary>
            public static int innerRadius { get { if (!_innerRadiusReady) { _innerRadiusContent = SGetField<int>(LocalBridgeClazz, "innerRadius"); _innerRadiusReady = true; } return _innerRadiusContent; } }
            private static int _innerRadiusContent = default;
            private static bool _innerRadiusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#innerRadiusRatio"/>
            /// </summary>
            public static int innerRadiusRatio { get { if (!_innerRadiusRatioReady) { _innerRadiusRatioContent = SGetField<int>(LocalBridgeClazz, "innerRadiusRatio"); _innerRadiusRatioReady = true; } return _innerRadiusRatioContent; } }
            private static int _innerRadiusRatioContent = default;
            private static bool _innerRadiusRatioReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#inputMethod"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int inputMethod { get { if (!_inputMethodReady) { _inputMethodContent = SGetField<int>(LocalBridgeClazz, "inputMethod"); _inputMethodReady = true; } return _inputMethodContent; } }
            private static int _inputMethodContent = default;
            private static bool _inputMethodReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#inputType"/>
            /// </summary>
            public static int inputType { get { if (!_inputTypeReady) { _inputTypeContent = SGetField<int>(LocalBridgeClazz, "inputType"); _inputTypeReady = true; } return _inputTypeContent; } }
            private static int _inputTypeContent = default;
            private static bool _inputTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#inset"/>
            /// </summary>
            public static int inset { get { if (!_insetReady) { _insetContent = SGetField<int>(LocalBridgeClazz, "inset"); _insetReady = true; } return _insetContent; } }
            private static int _insetContent = default;
            private static bool _insetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#insetBottom"/>
            /// </summary>
            public static int insetBottom { get { if (!_insetBottomReady) { _insetBottomContent = SGetField<int>(LocalBridgeClazz, "insetBottom"); _insetBottomReady = true; } return _insetBottomContent; } }
            private static int _insetBottomContent = default;
            private static bool _insetBottomReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#insetLeft"/>
            /// </summary>
            public static int insetLeft { get { if (!_insetLeftReady) { _insetLeftContent = SGetField<int>(LocalBridgeClazz, "insetLeft"); _insetLeftReady = true; } return _insetLeftContent; } }
            private static int _insetLeftContent = default;
            private static bool _insetLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#insetRight"/>
            /// </summary>
            public static int insetRight { get { if (!_insetRightReady) { _insetRightContent = SGetField<int>(LocalBridgeClazz, "insetRight"); _insetRightReady = true; } return _insetRightContent; } }
            private static int _insetRightContent = default;
            private static bool _insetRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#insetTop"/>
            /// </summary>
            public static int insetTop { get { if (!_insetTopReady) { _insetTopContent = SGetField<int>(LocalBridgeClazz, "insetTop"); _insetTopReady = true; } return _insetTopContent; } }
            private static int _insetTopContent = default;
            private static bool _insetTopReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#installLocation"/>
            /// </summary>
            public static int installLocation { get { if (!_installLocationReady) { _installLocationContent = SGetField<int>(LocalBridgeClazz, "installLocation"); _installLocationReady = true; } return _installLocationContent; } }
            private static int _installLocationContent = default;
            private static bool _installLocationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#interactiveUiTimeout"/>
            /// </summary>
            public static int interactiveUiTimeout { get { if (!_interactiveUiTimeoutReady) { _interactiveUiTimeoutContent = SGetField<int>(LocalBridgeClazz, "interactiveUiTimeout"); _interactiveUiTimeoutReady = true; } return _interactiveUiTimeoutContent; } }
            private static int _interactiveUiTimeoutContent = default;
            private static bool _interactiveUiTimeoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#interpolator"/>
            /// </summary>
            public static int interpolatorField { get { if (!_interpolatorFieldReady) { _interpolatorFieldContent = SGetField<int>(LocalBridgeClazz, "interpolator"); _interpolatorFieldReady = true; } return _interpolatorFieldContent; } }
            private static int _interpolatorFieldContent = default;
            private static bool _interpolatorFieldReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#intro"/>
            /// </summary>
            public static int intro { get { if (!_introReady) { _introContent = SGetField<int>(LocalBridgeClazz, "intro"); _introReady = true; } return _introContent; } }
            private static int _introContent = default;
            private static bool _introReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isAccessibilityTool"/>
            /// </summary>
            public static int isAccessibilityTool { get { if (!_isAccessibilityToolReady) { _isAccessibilityToolContent = SGetField<int>(LocalBridgeClazz, "isAccessibilityTool"); _isAccessibilityToolReady = true; } return _isAccessibilityToolContent; } }
            private static int _isAccessibilityToolContent = default;
            private static bool _isAccessibilityToolReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isAlwaysSyncable"/>
            /// </summary>
            public static int isAlwaysSyncable { get { if (!_isAlwaysSyncableReady) { _isAlwaysSyncableContent = SGetField<int>(LocalBridgeClazz, "isAlwaysSyncable"); _isAlwaysSyncableReady = true; } return _isAlwaysSyncableContent; } }
            private static int _isAlwaysSyncableContent = default;
            private static bool _isAlwaysSyncableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isAsciiCapable"/>
            /// </summary>
            public static int isAsciiCapable { get { if (!_isAsciiCapableReady) { _isAsciiCapableContent = SGetField<int>(LocalBridgeClazz, "isAsciiCapable"); _isAsciiCapableReady = true; } return _isAsciiCapableContent; } }
            private static int _isAsciiCapableContent = default;
            private static bool _isAsciiCapableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isAuxiliary"/>
            /// </summary>
            public static int isAuxiliary { get { if (!_isAuxiliaryReady) { _isAuxiliaryContent = SGetField<int>(LocalBridgeClazz, "isAuxiliary"); _isAuxiliaryReady = true; } return _isAuxiliaryContent; } }
            private static int _isAuxiliaryContent = default;
            private static bool _isAuxiliaryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isCredential"/>
            /// </summary>
            public static int isCredential { get { if (!_isCredentialReady) { _isCredentialContent = SGetField<int>(LocalBridgeClazz, "isCredential"); _isCredentialReady = true; } return _isCredentialContent; } }
            private static int _isCredentialContent = default;
            private static bool _isCredentialReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isDefault"/>
            /// </summary>
            public static int isDefault { get { if (!_isDefaultReady) { _isDefaultContent = SGetField<int>(LocalBridgeClazz, "isDefault"); _isDefaultReady = true; } return _isDefaultContent; } }
            private static int _isDefaultContent = default;
            private static bool _isDefaultReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isFeatureSplit"/>
            /// </summary>
            public static int isFeatureSplit { get { if (!_isFeatureSplitReady) { _isFeatureSplitContent = SGetField<int>(LocalBridgeClazz, "isFeatureSplit"); _isFeatureSplitReady = true; } return _isFeatureSplitContent; } }
            private static int _isFeatureSplitContent = default;
            private static bool _isFeatureSplitReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isGame"/>
            /// </summary>
            public static int isGame { get { if (!_isGameReady) { _isGameContent = SGetField<int>(LocalBridgeClazz, "isGame"); _isGameReady = true; } return _isGameContent; } }
            private static int _isGameContent = default;
            private static bool _isGameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isIndicator"/>
            /// </summary>
            public static int isIndicator { get { if (!_isIndicatorReady) { _isIndicatorContent = SGetField<int>(LocalBridgeClazz, "isIndicator"); _isIndicatorReady = true; } return _isIndicatorContent; } }
            private static int _isIndicatorContent = default;
            private static bool _isIndicatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isLightTheme"/>
            /// </summary>
            public static int isLightTheme { get { if (!_isLightThemeReady) { _isLightThemeContent = SGetField<int>(LocalBridgeClazz, "isLightTheme"); _isLightThemeReady = true; } return _isLightThemeContent; } }
            private static int _isLightThemeContent = default;
            private static bool _isLightThemeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isModifier"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int isModifier { get { if (!_isModifierReady) { _isModifierContent = SGetField<int>(LocalBridgeClazz, "isModifier"); _isModifierReady = true; } return _isModifierContent; } }
            private static int _isModifierContent = default;
            private static bool _isModifierReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isolatedProcess"/>
            /// </summary>
            public static int isolatedProcess { get { if (!_isolatedProcessReady) { _isolatedProcessContent = SGetField<int>(LocalBridgeClazz, "isolatedProcess"); _isolatedProcessReady = true; } return _isolatedProcessContent; } }
            private static int _isolatedProcessContent = default;
            private static bool _isolatedProcessReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isolatedSplits"/>
            /// </summary>
            public static int isolatedSplits { get { if (!_isolatedSplitsReady) { _isolatedSplitsContent = SGetField<int>(LocalBridgeClazz, "isolatedSplits"); _isolatedSplitsReady = true; } return _isolatedSplitsContent; } }
            private static int _isolatedSplitsContent = default;
            private static bool _isolatedSplitsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isRepeatable"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int isRepeatable { get { if (!_isRepeatableReady) { _isRepeatableContent = SGetField<int>(LocalBridgeClazz, "isRepeatable"); _isRepeatableReady = true; } return _isRepeatableContent; } }
            private static int _isRepeatableContent = default;
            private static bool _isRepeatableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isScrollContainer"/>
            /// </summary>
            public static int isScrollContainer { get { if (!_isScrollContainerReady) { _isScrollContainerContent = SGetField<int>(LocalBridgeClazz, "isScrollContainer"); _isScrollContainerReady = true; } return _isScrollContainerContent; } }
            private static int _isScrollContainerContent = default;
            private static bool _isScrollContainerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isSplitRequired"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int isSplitRequired { get { if (!_isSplitRequiredReady) { _isSplitRequiredContent = SGetField<int>(LocalBridgeClazz, "isSplitRequired"); _isSplitRequiredReady = true; } return _isSplitRequiredContent; } }
            private static int _isSplitRequiredContent = default;
            private static bool _isSplitRequiredReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isStatic"/>
            /// </summary>
            public static int isStatic { get { if (!_isStaticReady) { _isStaticContent = SGetField<int>(LocalBridgeClazz, "isStatic"); _isStaticReady = true; } return _isStaticContent; } }
            private static int _isStaticContent = default;
            private static bool _isStaticReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#isSticky"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int isSticky { get { if (!_isStickyReady) { _isStickyContent = SGetField<int>(LocalBridgeClazz, "isSticky"); _isStickyReady = true; } return _isStickyContent; } }
            private static int _isStickyContent = default;
            private static bool _isStickyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#itemBackground"/>
            /// </summary>
            public static int itemBackground { get { if (!_itemBackgroundReady) { _itemBackgroundContent = SGetField<int>(LocalBridgeClazz, "itemBackground"); _itemBackgroundReady = true; } return _itemBackgroundContent; } }
            private static int _itemBackgroundContent = default;
            private static bool _itemBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#itemIconDisabledAlpha"/>
            /// </summary>
            public static int itemIconDisabledAlpha { get { if (!_itemIconDisabledAlphaReady) { _itemIconDisabledAlphaContent = SGetField<int>(LocalBridgeClazz, "itemIconDisabledAlpha"); _itemIconDisabledAlphaReady = true; } return _itemIconDisabledAlphaContent; } }
            private static int _itemIconDisabledAlphaContent = default;
            private static bool _itemIconDisabledAlphaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#itemPadding"/>
            /// </summary>
            public static int itemPadding { get { if (!_itemPaddingReady) { _itemPaddingContent = SGetField<int>(LocalBridgeClazz, "itemPadding"); _itemPaddingReady = true; } return _itemPaddingContent; } }
            private static int _itemPaddingContent = default;
            private static bool _itemPaddingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#itemTextAppearance"/>
            /// </summary>
            public static int itemTextAppearance { get { if (!_itemTextAppearanceReady) { _itemTextAppearanceContent = SGetField<int>(LocalBridgeClazz, "itemTextAppearance"); _itemTextAppearanceReady = true; } return _itemTextAppearanceContent; } }
            private static int _itemTextAppearanceContent = default;
            private static bool _itemTextAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#justificationMode"/>
            /// </summary>
            public static int justificationMode { get { if (!_justificationModeReady) { _justificationModeContent = SGetField<int>(LocalBridgeClazz, "justificationMode"); _justificationModeReady = true; } return _justificationModeContent; } }
            private static int _justificationModeContent = default;
            private static bool _justificationModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keepScreenOn"/>
            /// </summary>
            public static int keepScreenOn { get { if (!_keepScreenOnReady) { _keepScreenOnContent = SGetField<int>(LocalBridgeClazz, "keepScreenOn"); _keepScreenOnReady = true; } return _keepScreenOnContent; } }
            private static int _keepScreenOnContent = default;
            private static bool _keepScreenOnReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#key"/>
            /// </summary>
            public static int key { get { if (!_keyReady) { _keyContent = SGetField<int>(LocalBridgeClazz, "key"); _keyReady = true; } return _keyContent; } }
            private static int _keyContent = default;
            private static bool _keyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyBackground"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int keyBackground { get { if (!_keyBackgroundReady) { _keyBackgroundContent = SGetField<int>(LocalBridgeClazz, "keyBackground"); _keyBackgroundReady = true; } return _keyBackgroundContent; } }
            private static int _keyBackgroundContent = default;
            private static bool _keyBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyboardLayout"/>
            /// </summary>
            public static int keyboardLayout { get { if (!_keyboardLayoutReady) { _keyboardLayoutContent = SGetField<int>(LocalBridgeClazz, "keyboardLayout"); _keyboardLayoutReady = true; } return _keyboardLayoutContent; } }
            private static int _keyboardLayoutContent = default;
            private static bool _keyboardLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyboardLayoutType"/>
            /// </summary>
            public static int keyboardLayoutType { get { if (!_keyboardLayoutTypeReady) { _keyboardLayoutTypeContent = SGetField<int>(LocalBridgeClazz, "keyboardLayoutType"); _keyboardLayoutTypeReady = true; } return _keyboardLayoutTypeContent; } }
            private static int _keyboardLayoutTypeContent = default;
            private static bool _keyboardLayoutTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyboardLocale"/>
            /// </summary>
            public static int keyboardLocale { get { if (!_keyboardLocaleReady) { _keyboardLocaleContent = SGetField<int>(LocalBridgeClazz, "keyboardLocale"); _keyboardLocaleReady = true; } return _keyboardLocaleContent; } }
            private static int _keyboardLocaleContent = default;
            private static bool _keyboardLocaleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyboardMode"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int keyboardMode { get { if (!_keyboardModeReady) { _keyboardModeContent = SGetField<int>(LocalBridgeClazz, "keyboardMode"); _keyboardModeReady = true; } return _keyboardModeContent; } }
            private static int _keyboardModeContent = default;
            private static bool _keyboardModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyboardNavigationCluster"/>
            /// </summary>
            public static int keyboardNavigationCluster { get { if (!_keyboardNavigationClusterReady) { _keyboardNavigationClusterContent = SGetField<int>(LocalBridgeClazz, "keyboardNavigationCluster"); _keyboardNavigationClusterReady = true; } return _keyboardNavigationClusterContent; } }
            private static int _keyboardNavigationClusterContent = default;
            private static bool _keyboardNavigationClusterReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keycode"/>
            /// </summary>
            public static int keycode { get { if (!_keycodeReady) { _keycodeContent = SGetField<int>(LocalBridgeClazz, "keycode"); _keycodeReady = true; } return _keycodeContent; } }
            private static int _keycodeContent = default;
            private static bool _keycodeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyEdgeFlags"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int keyEdgeFlags { get { if (!_keyEdgeFlagsReady) { _keyEdgeFlagsContent = SGetField<int>(LocalBridgeClazz, "keyEdgeFlags"); _keyEdgeFlagsReady = true; } return _keyEdgeFlagsContent; } }
            private static int _keyEdgeFlagsContent = default;
            private static bool _keyEdgeFlagsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyHeight"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int keyHeight { get { if (!_keyHeightReady) { _keyHeightContent = SGetField<int>(LocalBridgeClazz, "keyHeight"); _keyHeightReady = true; } return _keyHeightContent; } }
            private static int _keyHeightContent = default;
            private static bool _keyHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyIcon"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int keyIcon { get { if (!_keyIconReady) { _keyIconContent = SGetField<int>(LocalBridgeClazz, "keyIcon"); _keyIconReady = true; } return _keyIconContent; } }
            private static int _keyIconContent = default;
            private static bool _keyIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyLabel"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int keyLabel { get { if (!_keyLabelReady) { _keyLabelContent = SGetField<int>(LocalBridgeClazz, "keyLabel"); _keyLabelReady = true; } return _keyLabelContent; } }
            private static int _keyLabelContent = default;
            private static bool _keyLabelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyOutputText"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int keyOutputText { get { if (!_keyOutputTextReady) { _keyOutputTextContent = SGetField<int>(LocalBridgeClazz, "keyOutputText"); _keyOutputTextReady = true; } return _keyOutputTextContent; } }
            private static int _keyOutputTextContent = default;
            private static bool _keyOutputTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyPreviewHeight"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int keyPreviewHeight { get { if (!_keyPreviewHeightReady) { _keyPreviewHeightContent = SGetField<int>(LocalBridgeClazz, "keyPreviewHeight"); _keyPreviewHeightReady = true; } return _keyPreviewHeightContent; } }
            private static int _keyPreviewHeightContent = default;
            private static bool _keyPreviewHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyPreviewLayout"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int keyPreviewLayout { get { if (!_keyPreviewLayoutReady) { _keyPreviewLayoutContent = SGetField<int>(LocalBridgeClazz, "keyPreviewLayout"); _keyPreviewLayoutReady = true; } return _keyPreviewLayoutContent; } }
            private static int _keyPreviewLayoutContent = default;
            private static bool _keyPreviewLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyPreviewOffset"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int keyPreviewOffset { get { if (!_keyPreviewOffsetReady) { _keyPreviewOffsetContent = SGetField<int>(LocalBridgeClazz, "keyPreviewOffset"); _keyPreviewOffsetReady = true; } return _keyPreviewOffsetContent; } }
            private static int _keyPreviewOffsetContent = default;
            private static bool _keyPreviewOffsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keySet"/>
            /// </summary>
            public static int keySet { get { if (!_keySetReady) { _keySetContent = SGetField<int>(LocalBridgeClazz, "keySet"); _keySetReady = true; } return _keySetContent; } }
            private static int _keySetContent = default;
            private static bool _keySetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyTextColor"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int keyTextColor { get { if (!_keyTextColorReady) { _keyTextColorContent = SGetField<int>(LocalBridgeClazz, "keyTextColor"); _keyTextColorReady = true; } return _keyTextColorContent; } }
            private static int _keyTextColorContent = default;
            private static bool _keyTextColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyTextSize"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int keyTextSize { get { if (!_keyTextSizeReady) { _keyTextSizeContent = SGetField<int>(LocalBridgeClazz, "keyTextSize"); _keyTextSizeReady = true; } return _keyTextSizeContent; } }
            private static int _keyTextSizeContent = default;
            private static bool _keyTextSizeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#keyWidth"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int keyWidth { get { if (!_keyWidthReady) { _keyWidthContent = SGetField<int>(LocalBridgeClazz, "keyWidth"); _keyWidthReady = true; } return _keyWidthContent; } }
            private static int _keyWidthContent = default;
            private static bool _keyWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#killAfterRestore"/>
            /// </summary>
            public static int killAfterRestore { get { if (!_killAfterRestoreReady) { _killAfterRestoreContent = SGetField<int>(LocalBridgeClazz, "killAfterRestore"); _killAfterRestoreReady = true; } return _killAfterRestoreContent; } }
            private static int _killAfterRestoreContent = default;
            private static bool _killAfterRestoreReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#knownActivityEmbeddingCerts"/>
            /// </summary>
            public static int knownActivityEmbeddingCerts { get { if (!_knownActivityEmbeddingCertsReady) { _knownActivityEmbeddingCertsContent = SGetField<int>(LocalBridgeClazz, "knownActivityEmbeddingCerts"); _knownActivityEmbeddingCertsReady = true; } return _knownActivityEmbeddingCertsContent; } }
            private static int _knownActivityEmbeddingCertsContent = default;
            private static bool _knownActivityEmbeddingCertsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#knownCerts"/>
            /// </summary>
            public static int knownCerts { get { if (!_knownCertsReady) { _knownCertsContent = SGetField<int>(LocalBridgeClazz, "knownCerts"); _knownCertsReady = true; } return _knownCertsContent; } }
            private static int _knownCertsContent = default;
            private static bool _knownCertsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#label"/>
            /// </summary>
            public static int label { get { if (!_labelReady) { _labelContent = SGetField<int>(LocalBridgeClazz, "label"); _labelReady = true; } return _labelContent; } }
            private static int _labelContent = default;
            private static bool _labelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#labelFor"/>
            /// </summary>
            public static int labelFor { get { if (!_labelForReady) { _labelForContent = SGetField<int>(LocalBridgeClazz, "labelFor"); _labelForReady = true; } return _labelForContent; } }
            private static int _labelForContent = default;
            private static bool _labelForReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#labelTextSize"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int labelTextSize { get { if (!_labelTextSizeReady) { _labelTextSizeContent = SGetField<int>(LocalBridgeClazz, "labelTextSize"); _labelTextSizeReady = true; } return _labelTextSizeContent; } }
            private static int _labelTextSizeContent = default;
            private static bool _labelTextSizeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#languageTag"/>
            /// </summary>
            public static int languageTag { get { if (!_languageTagReady) { _languageTagContent = SGetField<int>(LocalBridgeClazz, "languageTag"); _languageTagReady = true; } return _languageTagContent; } }
            private static int _languageTagContent = default;
            private static bool _languageTagReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#largeHeap"/>
            /// </summary>
            public static int largeHeap { get { if (!_largeHeapReady) { _largeHeapContent = SGetField<int>(LocalBridgeClazz, "largeHeap"); _largeHeapReady = true; } return _largeHeapContent; } }
            private static int _largeHeapContent = default;
            private static bool _largeHeapReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#largeScreens"/>
            /// </summary>
            public static int largeScreens { get { if (!_largeScreensReady) { _largeScreensContent = SGetField<int>(LocalBridgeClazz, "largeScreens"); _largeScreensReady = true; } return _largeScreensContent; } }
            private static int _largeScreensContent = default;
            private static bool _largeScreensReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#largestWidthLimitDp"/>
            /// </summary>
            public static int largestWidthLimitDp { get { if (!_largestWidthLimitDpReady) { _largestWidthLimitDpContent = SGetField<int>(LocalBridgeClazz, "largestWidthLimitDp"); _largestWidthLimitDpReady = true; } return _largestWidthLimitDpContent; } }
            private static int _largestWidthLimitDpContent = default;
            private static bool _largestWidthLimitDpReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#lastBaselineToBottomHeight"/>
            /// </summary>
            public static int lastBaselineToBottomHeight { get { if (!_lastBaselineToBottomHeightReady) { _lastBaselineToBottomHeightContent = SGetField<int>(LocalBridgeClazz, "lastBaselineToBottomHeight"); _lastBaselineToBottomHeightReady = true; } return _lastBaselineToBottomHeightContent; } }
            private static int _lastBaselineToBottomHeightContent = default;
            private static bool _lastBaselineToBottomHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#launchMode"/>
            /// </summary>
            public static int launchMode { get { if (!_launchModeReady) { _launchModeContent = SGetField<int>(LocalBridgeClazz, "launchMode"); _launchModeReady = true; } return _launchModeContent; } }
            private static int _launchModeContent = default;
            private static bool _launchModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#launchTaskBehindSourceAnimation"/>
            /// </summary>
            public static int launchTaskBehindSourceAnimation { get { if (!_launchTaskBehindSourceAnimationReady) { _launchTaskBehindSourceAnimationContent = SGetField<int>(LocalBridgeClazz, "launchTaskBehindSourceAnimation"); _launchTaskBehindSourceAnimationReady = true; } return _launchTaskBehindSourceAnimationContent; } }
            private static int _launchTaskBehindSourceAnimationContent = default;
            private static bool _launchTaskBehindSourceAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#launchTaskBehindTargetAnimation"/>
            /// </summary>
            public static int launchTaskBehindTargetAnimation { get { if (!_launchTaskBehindTargetAnimationReady) { _launchTaskBehindTargetAnimationContent = SGetField<int>(LocalBridgeClazz, "launchTaskBehindTargetAnimation"); _launchTaskBehindTargetAnimationReady = true; } return _launchTaskBehindTargetAnimationContent; } }
            private static int _launchTaskBehindTargetAnimationContent = default;
            private static bool _launchTaskBehindTargetAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layerType"/>
            /// </summary>
            public static int layerType { get { if (!_layerTypeReady) { _layerTypeContent = SGetField<int>(LocalBridgeClazz, "layerType"); _layerTypeReady = true; } return _layerTypeContent; } }
            private static int _layerTypeContent = default;
            private static bool _layerTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout"/>
            /// </summary>
            public static int layoutField { get { if (!_layoutFieldReady) { _layoutFieldContent = SGetField<int>(LocalBridgeClazz, "layout"); _layoutFieldReady = true; } return _layoutFieldContent; } }
            private static int _layoutFieldContent = default;
            private static bool _layoutFieldReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_above"/>
            /// </summary>
            public static int layout_above { get { if (!_layout_aboveReady) { _layout_aboveContent = SGetField<int>(LocalBridgeClazz, "layout_above"); _layout_aboveReady = true; } return _layout_aboveContent; } }
            private static int _layout_aboveContent = default;
            private static bool _layout_aboveReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_alignBaseline"/>
            /// </summary>
            public static int layout_alignBaseline { get { if (!_layout_alignBaselineReady) { _layout_alignBaselineContent = SGetField<int>(LocalBridgeClazz, "layout_alignBaseline"); _layout_alignBaselineReady = true; } return _layout_alignBaselineContent; } }
            private static int _layout_alignBaselineContent = default;
            private static bool _layout_alignBaselineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_alignBottom"/>
            /// </summary>
            public static int layout_alignBottom { get { if (!_layout_alignBottomReady) { _layout_alignBottomContent = SGetField<int>(LocalBridgeClazz, "layout_alignBottom"); _layout_alignBottomReady = true; } return _layout_alignBottomContent; } }
            private static int _layout_alignBottomContent = default;
            private static bool _layout_alignBottomReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_alignEnd"/>
            /// </summary>
            public static int layout_alignEnd { get { if (!_layout_alignEndReady) { _layout_alignEndContent = SGetField<int>(LocalBridgeClazz, "layout_alignEnd"); _layout_alignEndReady = true; } return _layout_alignEndContent; } }
            private static int _layout_alignEndContent = default;
            private static bool _layout_alignEndReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_alignLeft"/>
            /// </summary>
            public static int layout_alignLeft { get { if (!_layout_alignLeftReady) { _layout_alignLeftContent = SGetField<int>(LocalBridgeClazz, "layout_alignLeft"); _layout_alignLeftReady = true; } return _layout_alignLeftContent; } }
            private static int _layout_alignLeftContent = default;
            private static bool _layout_alignLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_alignParentBottom"/>
            /// </summary>
            public static int layout_alignParentBottom { get { if (!_layout_alignParentBottomReady) { _layout_alignParentBottomContent = SGetField<int>(LocalBridgeClazz, "layout_alignParentBottom"); _layout_alignParentBottomReady = true; } return _layout_alignParentBottomContent; } }
            private static int _layout_alignParentBottomContent = default;
            private static bool _layout_alignParentBottomReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_alignParentEnd"/>
            /// </summary>
            public static int layout_alignParentEnd { get { if (!_layout_alignParentEndReady) { _layout_alignParentEndContent = SGetField<int>(LocalBridgeClazz, "layout_alignParentEnd"); _layout_alignParentEndReady = true; } return _layout_alignParentEndContent; } }
            private static int _layout_alignParentEndContent = default;
            private static bool _layout_alignParentEndReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_alignParentLeft"/>
            /// </summary>
            public static int layout_alignParentLeft { get { if (!_layout_alignParentLeftReady) { _layout_alignParentLeftContent = SGetField<int>(LocalBridgeClazz, "layout_alignParentLeft"); _layout_alignParentLeftReady = true; } return _layout_alignParentLeftContent; } }
            private static int _layout_alignParentLeftContent = default;
            private static bool _layout_alignParentLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_alignParentRight"/>
            /// </summary>
            public static int layout_alignParentRight { get { if (!_layout_alignParentRightReady) { _layout_alignParentRightContent = SGetField<int>(LocalBridgeClazz, "layout_alignParentRight"); _layout_alignParentRightReady = true; } return _layout_alignParentRightContent; } }
            private static int _layout_alignParentRightContent = default;
            private static bool _layout_alignParentRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_alignParentStart"/>
            /// </summary>
            public static int layout_alignParentStart { get { if (!_layout_alignParentStartReady) { _layout_alignParentStartContent = SGetField<int>(LocalBridgeClazz, "layout_alignParentStart"); _layout_alignParentStartReady = true; } return _layout_alignParentStartContent; } }
            private static int _layout_alignParentStartContent = default;
            private static bool _layout_alignParentStartReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_alignParentTop"/>
            /// </summary>
            public static int layout_alignParentTop { get { if (!_layout_alignParentTopReady) { _layout_alignParentTopContent = SGetField<int>(LocalBridgeClazz, "layout_alignParentTop"); _layout_alignParentTopReady = true; } return _layout_alignParentTopContent; } }
            private static int _layout_alignParentTopContent = default;
            private static bool _layout_alignParentTopReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_alignRight"/>
            /// </summary>
            public static int layout_alignRight { get { if (!_layout_alignRightReady) { _layout_alignRightContent = SGetField<int>(LocalBridgeClazz, "layout_alignRight"); _layout_alignRightReady = true; } return _layout_alignRightContent; } }
            private static int _layout_alignRightContent = default;
            private static bool _layout_alignRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_alignStart"/>
            /// </summary>
            public static int layout_alignStart { get { if (!_layout_alignStartReady) { _layout_alignStartContent = SGetField<int>(LocalBridgeClazz, "layout_alignStart"); _layout_alignStartReady = true; } return _layout_alignStartContent; } }
            private static int _layout_alignStartContent = default;
            private static bool _layout_alignStartReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_alignTop"/>
            /// </summary>
            public static int layout_alignTop { get { if (!_layout_alignTopReady) { _layout_alignTopContent = SGetField<int>(LocalBridgeClazz, "layout_alignTop"); _layout_alignTopReady = true; } return _layout_alignTopContent; } }
            private static int _layout_alignTopContent = default;
            private static bool _layout_alignTopReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_alignWithParentIfMissing"/>
            /// </summary>
            public static int layout_alignWithParentIfMissing { get { if (!_layout_alignWithParentIfMissingReady) { _layout_alignWithParentIfMissingContent = SGetField<int>(LocalBridgeClazz, "layout_alignWithParentIfMissing"); _layout_alignWithParentIfMissingReady = true; } return _layout_alignWithParentIfMissingContent; } }
            private static int _layout_alignWithParentIfMissingContent = default;
            private static bool _layout_alignWithParentIfMissingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_below"/>
            /// </summary>
            public static int layout_below { get { if (!_layout_belowReady) { _layout_belowContent = SGetField<int>(LocalBridgeClazz, "layout_below"); _layout_belowReady = true; } return _layout_belowContent; } }
            private static int _layout_belowContent = default;
            private static bool _layout_belowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_centerHorizontal"/>
            /// </summary>
            public static int layout_centerHorizontal { get { if (!_layout_centerHorizontalReady) { _layout_centerHorizontalContent = SGetField<int>(LocalBridgeClazz, "layout_centerHorizontal"); _layout_centerHorizontalReady = true; } return _layout_centerHorizontalContent; } }
            private static int _layout_centerHorizontalContent = default;
            private static bool _layout_centerHorizontalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_centerInParent"/>
            /// </summary>
            public static int layout_centerInParent { get { if (!_layout_centerInParentReady) { _layout_centerInParentContent = SGetField<int>(LocalBridgeClazz, "layout_centerInParent"); _layout_centerInParentReady = true; } return _layout_centerInParentContent; } }
            private static int _layout_centerInParentContent = default;
            private static bool _layout_centerInParentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_centerVertical"/>
            /// </summary>
            public static int layout_centerVertical { get { if (!_layout_centerVerticalReady) { _layout_centerVerticalContent = SGetField<int>(LocalBridgeClazz, "layout_centerVertical"); _layout_centerVerticalReady = true; } return _layout_centerVerticalContent; } }
            private static int _layout_centerVerticalContent = default;
            private static bool _layout_centerVerticalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_column"/>
            /// </summary>
            public static int layout_column { get { if (!_layout_columnReady) { _layout_columnContent = SGetField<int>(LocalBridgeClazz, "layout_column"); _layout_columnReady = true; } return _layout_columnContent; } }
            private static int _layout_columnContent = default;
            private static bool _layout_columnReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_columnSpan"/>
            /// </summary>
            public static int layout_columnSpan { get { if (!_layout_columnSpanReady) { _layout_columnSpanContent = SGetField<int>(LocalBridgeClazz, "layout_columnSpan"); _layout_columnSpanReady = true; } return _layout_columnSpanContent; } }
            private static int _layout_columnSpanContent = default;
            private static bool _layout_columnSpanReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_columnWeight"/>
            /// </summary>
            public static int layout_columnWeight { get { if (!_layout_columnWeightReady) { _layout_columnWeightContent = SGetField<int>(LocalBridgeClazz, "layout_columnWeight"); _layout_columnWeightReady = true; } return _layout_columnWeightContent; } }
            private static int _layout_columnWeightContent = default;
            private static bool _layout_columnWeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_gravity"/>
            /// </summary>
            public static int layout_gravity { get { if (!_layout_gravityReady) { _layout_gravityContent = SGetField<int>(LocalBridgeClazz, "layout_gravity"); _layout_gravityReady = true; } return _layout_gravityContent; } }
            private static int _layout_gravityContent = default;
            private static bool _layout_gravityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_height"/>
            /// </summary>
            public static int layout_height { get { if (!_layout_heightReady) { _layout_heightContent = SGetField<int>(LocalBridgeClazz, "layout_height"); _layout_heightReady = true; } return _layout_heightContent; } }
            private static int _layout_heightContent = default;
            private static bool _layout_heightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_margin"/>
            /// </summary>
            public static int layout_margin { get { if (!_layout_marginReady) { _layout_marginContent = SGetField<int>(LocalBridgeClazz, "layout_margin"); _layout_marginReady = true; } return _layout_marginContent; } }
            private static int _layout_marginContent = default;
            private static bool _layout_marginReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_marginBottom"/>
            /// </summary>
            public static int layout_marginBottom { get { if (!_layout_marginBottomReady) { _layout_marginBottomContent = SGetField<int>(LocalBridgeClazz, "layout_marginBottom"); _layout_marginBottomReady = true; } return _layout_marginBottomContent; } }
            private static int _layout_marginBottomContent = default;
            private static bool _layout_marginBottomReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_marginEnd"/>
            /// </summary>
            public static int layout_marginEnd { get { if (!_layout_marginEndReady) { _layout_marginEndContent = SGetField<int>(LocalBridgeClazz, "layout_marginEnd"); _layout_marginEndReady = true; } return _layout_marginEndContent; } }
            private static int _layout_marginEndContent = default;
            private static bool _layout_marginEndReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_marginHorizontal"/>
            /// </summary>
            public static int layout_marginHorizontal { get { if (!_layout_marginHorizontalReady) { _layout_marginHorizontalContent = SGetField<int>(LocalBridgeClazz, "layout_marginHorizontal"); _layout_marginHorizontalReady = true; } return _layout_marginHorizontalContent; } }
            private static int _layout_marginHorizontalContent = default;
            private static bool _layout_marginHorizontalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_marginLeft"/>
            /// </summary>
            public static int layout_marginLeft { get { if (!_layout_marginLeftReady) { _layout_marginLeftContent = SGetField<int>(LocalBridgeClazz, "layout_marginLeft"); _layout_marginLeftReady = true; } return _layout_marginLeftContent; } }
            private static int _layout_marginLeftContent = default;
            private static bool _layout_marginLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_marginRight"/>
            /// </summary>
            public static int layout_marginRight { get { if (!_layout_marginRightReady) { _layout_marginRightContent = SGetField<int>(LocalBridgeClazz, "layout_marginRight"); _layout_marginRightReady = true; } return _layout_marginRightContent; } }
            private static int _layout_marginRightContent = default;
            private static bool _layout_marginRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_marginStart"/>
            /// </summary>
            public static int layout_marginStart { get { if (!_layout_marginStartReady) { _layout_marginStartContent = SGetField<int>(LocalBridgeClazz, "layout_marginStart"); _layout_marginStartReady = true; } return _layout_marginStartContent; } }
            private static int _layout_marginStartContent = default;
            private static bool _layout_marginStartReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_marginTop"/>
            /// </summary>
            public static int layout_marginTop { get { if (!_layout_marginTopReady) { _layout_marginTopContent = SGetField<int>(LocalBridgeClazz, "layout_marginTop"); _layout_marginTopReady = true; } return _layout_marginTopContent; } }
            private static int _layout_marginTopContent = default;
            private static bool _layout_marginTopReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_marginVertical"/>
            /// </summary>
            public static int layout_marginVertical { get { if (!_layout_marginVerticalReady) { _layout_marginVerticalContent = SGetField<int>(LocalBridgeClazz, "layout_marginVertical"); _layout_marginVerticalReady = true; } return _layout_marginVerticalContent; } }
            private static int _layout_marginVerticalContent = default;
            private static bool _layout_marginVerticalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_row"/>
            /// </summary>
            public static int layout_row { get { if (!_layout_rowReady) { _layout_rowContent = SGetField<int>(LocalBridgeClazz, "layout_row"); _layout_rowReady = true; } return _layout_rowContent; } }
            private static int _layout_rowContent = default;
            private static bool _layout_rowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_rowSpan"/>
            /// </summary>
            public static int layout_rowSpan { get { if (!_layout_rowSpanReady) { _layout_rowSpanContent = SGetField<int>(LocalBridgeClazz, "layout_rowSpan"); _layout_rowSpanReady = true; } return _layout_rowSpanContent; } }
            private static int _layout_rowSpanContent = default;
            private static bool _layout_rowSpanReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_rowWeight"/>
            /// </summary>
            public static int layout_rowWeight { get { if (!_layout_rowWeightReady) { _layout_rowWeightContent = SGetField<int>(LocalBridgeClazz, "layout_rowWeight"); _layout_rowWeightReady = true; } return _layout_rowWeightContent; } }
            private static int _layout_rowWeightContent = default;
            private static bool _layout_rowWeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_scale"/>
            /// </summary>
            public static int layout_scale { get { if (!_layout_scaleReady) { _layout_scaleContent = SGetField<int>(LocalBridgeClazz, "layout_scale"); _layout_scaleReady = true; } return _layout_scaleContent; } }
            private static int _layout_scaleContent = default;
            private static bool _layout_scaleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_span"/>
            /// </summary>
            public static int layout_span { get { if (!_layout_spanReady) { _layout_spanContent = SGetField<int>(LocalBridgeClazz, "layout_span"); _layout_spanReady = true; } return _layout_spanContent; } }
            private static int _layout_spanContent = default;
            private static bool _layout_spanReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_toEndOf"/>
            /// </summary>
            public static int layout_toEndOf { get { if (!_layout_toEndOfReady) { _layout_toEndOfContent = SGetField<int>(LocalBridgeClazz, "layout_toEndOf"); _layout_toEndOfReady = true; } return _layout_toEndOfContent; } }
            private static int _layout_toEndOfContent = default;
            private static bool _layout_toEndOfReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_toLeftOf"/>
            /// </summary>
            public static int layout_toLeftOf { get { if (!_layout_toLeftOfReady) { _layout_toLeftOfContent = SGetField<int>(LocalBridgeClazz, "layout_toLeftOf"); _layout_toLeftOfReady = true; } return _layout_toLeftOfContent; } }
            private static int _layout_toLeftOfContent = default;
            private static bool _layout_toLeftOfReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_toRightOf"/>
            /// </summary>
            public static int layout_toRightOf { get { if (!_layout_toRightOfReady) { _layout_toRightOfContent = SGetField<int>(LocalBridgeClazz, "layout_toRightOf"); _layout_toRightOfReady = true; } return _layout_toRightOfContent; } }
            private static int _layout_toRightOfContent = default;
            private static bool _layout_toRightOfReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_toStartOf"/>
            /// </summary>
            public static int layout_toStartOf { get { if (!_layout_toStartOfReady) { _layout_toStartOfContent = SGetField<int>(LocalBridgeClazz, "layout_toStartOf"); _layout_toStartOfReady = true; } return _layout_toStartOfContent; } }
            private static int _layout_toStartOfContent = default;
            private static bool _layout_toStartOfReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_weight"/>
            /// </summary>
            public static int layout_weight { get { if (!_layout_weightReady) { _layout_weightContent = SGetField<int>(LocalBridgeClazz, "layout_weight"); _layout_weightReady = true; } return _layout_weightContent; } }
            private static int _layout_weightContent = default;
            private static bool _layout_weightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_width"/>
            /// </summary>
            public static int layout_width { get { if (!_layout_widthReady) { _layout_widthContent = SGetField<int>(LocalBridgeClazz, "layout_width"); _layout_widthReady = true; } return _layout_widthContent; } }
            private static int _layout_widthContent = default;
            private static bool _layout_widthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_x"/>
            /// </summary>
            public static int layout_x { get { if (!_layout_xReady) { _layout_xContent = SGetField<int>(LocalBridgeClazz, "layout_x"); _layout_xReady = true; } return _layout_xContent; } }
            private static int _layout_xContent = default;
            private static bool _layout_xReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layout_y"/>
            /// </summary>
            public static int layout_y { get { if (!_layout_yReady) { _layout_yContent = SGetField<int>(LocalBridgeClazz, "layout_y"); _layout_yReady = true; } return _layout_yContent; } }
            private static int _layout_yContent = default;
            private static bool _layout_yReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layoutAnimation"/>
            /// </summary>
            public static int layoutAnimation { get { if (!_layoutAnimationReady) { _layoutAnimationContent = SGetField<int>(LocalBridgeClazz, "layoutAnimation"); _layoutAnimationReady = true; } return _layoutAnimationContent; } }
            private static int _layoutAnimationContent = default;
            private static bool _layoutAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layoutDirection"/>
            /// </summary>
            public static int layoutDirection { get { if (!_layoutDirectionReady) { _layoutDirectionContent = SGetField<int>(LocalBridgeClazz, "layoutDirection"); _layoutDirectionReady = true; } return _layoutDirectionContent; } }
            private static int _layoutDirectionContent = default;
            private static bool _layoutDirectionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#layoutMode"/>
            /// </summary>
            public static int layoutMode { get { if (!_layoutModeReady) { _layoutModeContent = SGetField<int>(LocalBridgeClazz, "layoutMode"); _layoutModeReady = true; } return _layoutModeContent; } }
            private static int _layoutModeContent = default;
            private static bool _layoutModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#left"/>
            /// </summary>
            public static int left { get { if (!_leftReady) { _leftContent = SGetField<int>(LocalBridgeClazz, "left"); _leftReady = true; } return _leftContent; } }
            private static int _leftContent = default;
            private static bool _leftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#letterSpacing"/>
            /// </summary>
            public static int letterSpacing { get { if (!_letterSpacingReady) { _letterSpacingContent = SGetField<int>(LocalBridgeClazz, "letterSpacing"); _letterSpacingReady = true; } return _letterSpacingContent; } }
            private static int _letterSpacingContent = default;
            private static bool _letterSpacingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#level"/>
            /// </summary>
            public static int level { get { if (!_levelReady) { _levelContent = SGetField<int>(LocalBridgeClazz, "level"); _levelReady = true; } return _levelContent; } }
            private static int _levelContent = default;
            private static bool _levelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#lineBreakStyle"/>
            /// </summary>
            public static int lineBreakStyle { get { if (!_lineBreakStyleReady) { _lineBreakStyleContent = SGetField<int>(LocalBridgeClazz, "lineBreakStyle"); _lineBreakStyleReady = true; } return _lineBreakStyleContent; } }
            private static int _lineBreakStyleContent = default;
            private static bool _lineBreakStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#lineBreakWordStyle"/>
            /// </summary>
            public static int lineBreakWordStyle { get { if (!_lineBreakWordStyleReady) { _lineBreakWordStyleContent = SGetField<int>(LocalBridgeClazz, "lineBreakWordStyle"); _lineBreakWordStyleReady = true; } return _lineBreakWordStyleContent; } }
            private static int _lineBreakWordStyleContent = default;
            private static bool _lineBreakWordStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#lineHeight"/>
            /// </summary>
            public static int lineHeight { get { if (!_lineHeightReady) { _lineHeightContent = SGetField<int>(LocalBridgeClazz, "lineHeight"); _lineHeightReady = true; } return _lineHeightContent; } }
            private static int _lineHeightContent = default;
            private static bool _lineHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#lines"/>
            /// </summary>
            public static int lines { get { if (!_linesReady) { _linesContent = SGetField<int>(LocalBridgeClazz, "lines"); _linesReady = true; } return _linesContent; } }
            private static int _linesContent = default;
            private static bool _linesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#lineSpacingExtra"/>
            /// </summary>
            public static int lineSpacingExtra { get { if (!_lineSpacingExtraReady) { _lineSpacingExtraContent = SGetField<int>(LocalBridgeClazz, "lineSpacingExtra"); _lineSpacingExtraReady = true; } return _lineSpacingExtraContent; } }
            private static int _lineSpacingExtraContent = default;
            private static bool _lineSpacingExtraReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#lineSpacingMultiplier"/>
            /// </summary>
            public static int lineSpacingMultiplier { get { if (!_lineSpacingMultiplierReady) { _lineSpacingMultiplierContent = SGetField<int>(LocalBridgeClazz, "lineSpacingMultiplier"); _lineSpacingMultiplierReady = true; } return _lineSpacingMultiplierContent; } }
            private static int _lineSpacingMultiplierContent = default;
            private static bool _lineSpacingMultiplierReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#linksClickable"/>
            /// </summary>
            public static int linksClickable { get { if (!_linksClickableReady) { _linksClickableContent = SGetField<int>(LocalBridgeClazz, "linksClickable"); _linksClickableReady = true; } return _linksClickableContent; } }
            private static int _linksClickableContent = default;
            private static bool _linksClickableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listChoiceBackgroundIndicator"/>
            /// </summary>
            public static int listChoiceBackgroundIndicator { get { if (!_listChoiceBackgroundIndicatorReady) { _listChoiceBackgroundIndicatorContent = SGetField<int>(LocalBridgeClazz, "listChoiceBackgroundIndicator"); _listChoiceBackgroundIndicatorReady = true; } return _listChoiceBackgroundIndicatorContent; } }
            private static int _listChoiceBackgroundIndicatorContent = default;
            private static bool _listChoiceBackgroundIndicatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listChoiceIndicatorMultiple"/>
            /// </summary>
            public static int listChoiceIndicatorMultiple { get { if (!_listChoiceIndicatorMultipleReady) { _listChoiceIndicatorMultipleContent = SGetField<int>(LocalBridgeClazz, "listChoiceIndicatorMultiple"); _listChoiceIndicatorMultipleReady = true; } return _listChoiceIndicatorMultipleContent; } }
            private static int _listChoiceIndicatorMultipleContent = default;
            private static bool _listChoiceIndicatorMultipleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listChoiceIndicatorSingle"/>
            /// </summary>
            public static int listChoiceIndicatorSingle { get { if (!_listChoiceIndicatorSingleReady) { _listChoiceIndicatorSingleContent = SGetField<int>(LocalBridgeClazz, "listChoiceIndicatorSingle"); _listChoiceIndicatorSingleReady = true; } return _listChoiceIndicatorSingleContent; } }
            private static int _listChoiceIndicatorSingleContent = default;
            private static bool _listChoiceIndicatorSingleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listDivider"/>
            /// </summary>
            public static int listDivider { get { if (!_listDividerReady) { _listDividerContent = SGetField<int>(LocalBridgeClazz, "listDivider"); _listDividerReady = true; } return _listDividerContent; } }
            private static int _listDividerContent = default;
            private static bool _listDividerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listDividerAlertDialog"/>
            /// </summary>
            public static int listDividerAlertDialog { get { if (!_listDividerAlertDialogReady) { _listDividerAlertDialogContent = SGetField<int>(LocalBridgeClazz, "listDividerAlertDialog"); _listDividerAlertDialogReady = true; } return _listDividerAlertDialogContent; } }
            private static int _listDividerAlertDialogContent = default;
            private static bool _listDividerAlertDialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listMenuViewStyle"/>
            /// </summary>
            public static int listMenuViewStyle { get { if (!_listMenuViewStyleReady) { _listMenuViewStyleContent = SGetField<int>(LocalBridgeClazz, "listMenuViewStyle"); _listMenuViewStyleReady = true; } return _listMenuViewStyleContent; } }
            private static int _listMenuViewStyleContent = default;
            private static bool _listMenuViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listPopupWindowStyle"/>
            /// </summary>
            public static int listPopupWindowStyle { get { if (!_listPopupWindowStyleReady) { _listPopupWindowStyleContent = SGetField<int>(LocalBridgeClazz, "listPopupWindowStyle"); _listPopupWindowStyleReady = true; } return _listPopupWindowStyleContent; } }
            private static int _listPopupWindowStyleContent = default;
            private static bool _listPopupWindowStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listPreferredItemHeight"/>
            /// </summary>
            public static int listPreferredItemHeight { get { if (!_listPreferredItemHeightReady) { _listPreferredItemHeightContent = SGetField<int>(LocalBridgeClazz, "listPreferredItemHeight"); _listPreferredItemHeightReady = true; } return _listPreferredItemHeightContent; } }
            private static int _listPreferredItemHeightContent = default;
            private static bool _listPreferredItemHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listPreferredItemHeightLarge"/>
            /// </summary>
            public static int listPreferredItemHeightLarge { get { if (!_listPreferredItemHeightLargeReady) { _listPreferredItemHeightLargeContent = SGetField<int>(LocalBridgeClazz, "listPreferredItemHeightLarge"); _listPreferredItemHeightLargeReady = true; } return _listPreferredItemHeightLargeContent; } }
            private static int _listPreferredItemHeightLargeContent = default;
            private static bool _listPreferredItemHeightLargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listPreferredItemHeightSmall"/>
            /// </summary>
            public static int listPreferredItemHeightSmall { get { if (!_listPreferredItemHeightSmallReady) { _listPreferredItemHeightSmallContent = SGetField<int>(LocalBridgeClazz, "listPreferredItemHeightSmall"); _listPreferredItemHeightSmallReady = true; } return _listPreferredItemHeightSmallContent; } }
            private static int _listPreferredItemHeightSmallContent = default;
            private static bool _listPreferredItemHeightSmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listPreferredItemPaddingEnd"/>
            /// </summary>
            public static int listPreferredItemPaddingEnd { get { if (!_listPreferredItemPaddingEndReady) { _listPreferredItemPaddingEndContent = SGetField<int>(LocalBridgeClazz, "listPreferredItemPaddingEnd"); _listPreferredItemPaddingEndReady = true; } return _listPreferredItemPaddingEndContent; } }
            private static int _listPreferredItemPaddingEndContent = default;
            private static bool _listPreferredItemPaddingEndReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listPreferredItemPaddingLeft"/>
            /// </summary>
            public static int listPreferredItemPaddingLeft { get { if (!_listPreferredItemPaddingLeftReady) { _listPreferredItemPaddingLeftContent = SGetField<int>(LocalBridgeClazz, "listPreferredItemPaddingLeft"); _listPreferredItemPaddingLeftReady = true; } return _listPreferredItemPaddingLeftContent; } }
            private static int _listPreferredItemPaddingLeftContent = default;
            private static bool _listPreferredItemPaddingLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listPreferredItemPaddingRight"/>
            /// </summary>
            public static int listPreferredItemPaddingRight { get { if (!_listPreferredItemPaddingRightReady) { _listPreferredItemPaddingRightContent = SGetField<int>(LocalBridgeClazz, "listPreferredItemPaddingRight"); _listPreferredItemPaddingRightReady = true; } return _listPreferredItemPaddingRightContent; } }
            private static int _listPreferredItemPaddingRightContent = default;
            private static bool _listPreferredItemPaddingRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listPreferredItemPaddingStart"/>
            /// </summary>
            public static int listPreferredItemPaddingStart { get { if (!_listPreferredItemPaddingStartReady) { _listPreferredItemPaddingStartContent = SGetField<int>(LocalBridgeClazz, "listPreferredItemPaddingStart"); _listPreferredItemPaddingStartReady = true; } return _listPreferredItemPaddingStartContent; } }
            private static int _listPreferredItemPaddingStartContent = default;
            private static bool _listPreferredItemPaddingStartReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listSelector"/>
            /// </summary>
            public static int listSelector { get { if (!_listSelectorReady) { _listSelectorContent = SGetField<int>(LocalBridgeClazz, "listSelector"); _listSelectorReady = true; } return _listSelectorContent; } }
            private static int _listSelectorContent = default;
            private static bool _listSelectorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listSeparatorTextViewStyle"/>
            /// </summary>
            public static int listSeparatorTextViewStyle { get { if (!_listSeparatorTextViewStyleReady) { _listSeparatorTextViewStyleContent = SGetField<int>(LocalBridgeClazz, "listSeparatorTextViewStyle"); _listSeparatorTextViewStyleReady = true; } return _listSeparatorTextViewStyleContent; } }
            private static int _listSeparatorTextViewStyleContent = default;
            private static bool _listSeparatorTextViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listViewStyle"/>
            /// </summary>
            public static int listViewStyle { get { if (!_listViewStyleReady) { _listViewStyleContent = SGetField<int>(LocalBridgeClazz, "listViewStyle"); _listViewStyleReady = true; } return _listViewStyleContent; } }
            private static int _listViewStyleContent = default;
            private static bool _listViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#listViewWhiteStyle"/>
            /// </summary>
            public static int listViewWhiteStyle { get { if (!_listViewWhiteStyleReady) { _listViewWhiteStyleContent = SGetField<int>(LocalBridgeClazz, "listViewWhiteStyle"); _listViewWhiteStyleReady = true; } return _listViewWhiteStyleContent; } }
            private static int _listViewWhiteStyleContent = default;
            private static bool _listViewWhiteStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#localeConfig"/>
            /// </summary>
            public static int localeConfig { get { if (!_localeConfigReady) { _localeConfigContent = SGetField<int>(LocalBridgeClazz, "localeConfig"); _localeConfigReady = true; } return _localeConfigContent; } }
            private static int _localeConfigContent = default;
            private static bool _localeConfigReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#lockTaskMode"/>
            /// </summary>
            public static int lockTaskMode { get { if (!_lockTaskModeReady) { _lockTaskModeContent = SGetField<int>(LocalBridgeClazz, "lockTaskMode"); _lockTaskModeReady = true; } return _lockTaskModeContent; } }
            private static int _lockTaskModeContent = default;
            private static bool _lockTaskModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#logo"/>
            /// </summary>
            public static int logo { get { if (!_logoReady) { _logoContent = SGetField<int>(LocalBridgeClazz, "logo"); _logoReady = true; } return _logoContent; } }
            private static int _logoContent = default;
            private static bool _logoReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#logoDescription"/>
            /// </summary>
            public static int logoDescription { get { if (!_logoDescriptionReady) { _logoDescriptionContent = SGetField<int>(LocalBridgeClazz, "logoDescription"); _logoDescriptionReady = true; } return _logoDescriptionContent; } }
            private static int _logoDescriptionContent = default;
            private static bool _logoDescriptionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#longClickable"/>
            /// </summary>
            public static int longClickable { get { if (!_longClickableReady) { _longClickableContent = SGetField<int>(LocalBridgeClazz, "longClickable"); _longClickableReady = true; } return _longClickableContent; } }
            private static int _longClickableContent = default;
            private static bool _longClickableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#loopViews"/>
            /// </summary>
            public static int loopViews { get { if (!_loopViewsReady) { _loopViewsContent = SGetField<int>(LocalBridgeClazz, "loopViews"); _loopViewsReady = true; } return _loopViewsContent; } }
            private static int _loopViewsContent = default;
            private static bool _loopViewsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#lStar"/>
            /// </summary>
            public static int lStar { get { if (!_lStarReady) { _lStarContent = SGetField<int>(LocalBridgeClazz, "lStar"); _lStarReady = true; } return _lStarContent; } }
            private static int _lStarContent = default;
            private static bool _lStarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#manageSpaceActivity"/>
            /// </summary>
            public static int manageSpaceActivity { get { if (!_manageSpaceActivityReady) { _manageSpaceActivityContent = SGetField<int>(LocalBridgeClazz, "manageSpaceActivity"); _manageSpaceActivityReady = true; } return _manageSpaceActivityContent; } }
            private static int _manageSpaceActivityContent = default;
            private static bool _manageSpaceActivityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#mapViewStyle"/>
            /// </summary>
            public static int mapViewStyle { get { if (!_mapViewStyleReady) { _mapViewStyleContent = SGetField<int>(LocalBridgeClazz, "mapViewStyle"); _mapViewStyleReady = true; } return _mapViewStyleContent; } }
            private static int _mapViewStyleContent = default;
            private static bool _mapViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#marqueeRepeatLimit"/>
            /// </summary>
            public static int marqueeRepeatLimit { get { if (!_marqueeRepeatLimitReady) { _marqueeRepeatLimitContent = SGetField<int>(LocalBridgeClazz, "marqueeRepeatLimit"); _marqueeRepeatLimitReady = true; } return _marqueeRepeatLimitContent; } }
            private static int _marqueeRepeatLimitContent = default;
            private static bool _marqueeRepeatLimitReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#matchOrder"/>
            /// </summary>
            public static int matchOrder { get { if (!_matchOrderReady) { _matchOrderContent = SGetField<int>(LocalBridgeClazz, "matchOrder"); _matchOrderReady = true; } return _matchOrderContent; } }
            private static int _matchOrderContent = default;
            private static bool _matchOrderReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#max"/>
            /// </summary>
            public static int max { get { if (!_maxReady) { _maxContent = SGetField<int>(LocalBridgeClazz, "max"); _maxReady = true; } return _maxContent; } }
            private static int _maxContent = default;
            private static bool _maxReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maxAspectRatio"/>
            /// </summary>
            public static int maxAspectRatio { get { if (!_maxAspectRatioReady) { _maxAspectRatioContent = SGetField<int>(LocalBridgeClazz, "maxAspectRatio"); _maxAspectRatioReady = true; } return _maxAspectRatioContent; } }
            private static int _maxAspectRatioContent = default;
            private static bool _maxAspectRatioReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maxButtonHeight"/>
            /// </summary>
            public static int maxButtonHeight { get { if (!_maxButtonHeightReady) { _maxButtonHeightContent = SGetField<int>(LocalBridgeClazz, "maxButtonHeight"); _maxButtonHeightReady = true; } return _maxButtonHeightContent; } }
            private static int _maxButtonHeightContent = default;
            private static bool _maxButtonHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maxDate"/>
            /// </summary>
            public static int maxDate { get { if (!_maxDateReady) { _maxDateContent = SGetField<int>(LocalBridgeClazz, "maxDate"); _maxDateReady = true; } return _maxDateContent; } }
            private static int _maxDateContent = default;
            private static bool _maxDateReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maxEms"/>
            /// </summary>
            public static int maxEms { get { if (!_maxEmsReady) { _maxEmsContent = SGetField<int>(LocalBridgeClazz, "maxEms"); _maxEmsReady = true; } return _maxEmsContent; } }
            private static int _maxEmsContent = default;
            private static bool _maxEmsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maxHeight"/>
            /// </summary>
            public static int maxHeight { get { if (!_maxHeightReady) { _maxHeightContent = SGetField<int>(LocalBridgeClazz, "maxHeight"); _maxHeightReady = true; } return _maxHeightContent; } }
            private static int _maxHeightContent = default;
            private static bool _maxHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maximumAngle"/>
            /// </summary>
            public static int maximumAngle { get { if (!_maximumAngleReady) { _maximumAngleContent = SGetField<int>(LocalBridgeClazz, "maximumAngle"); _maximumAngleReady = true; } return _maximumAngleContent; } }
            private static int _maximumAngleContent = default;
            private static bool _maximumAngleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maxItemsPerRow"/>
            /// </summary>
            public static int maxItemsPerRow { get { if (!_maxItemsPerRowReady) { _maxItemsPerRowContent = SGetField<int>(LocalBridgeClazz, "maxItemsPerRow"); _maxItemsPerRowReady = true; } return _maxItemsPerRowContent; } }
            private static int _maxItemsPerRowContent = default;
            private static bool _maxItemsPerRowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maxLength"/>
            /// </summary>
            public static int maxLength { get { if (!_maxLengthReady) { _maxLengthContent = SGetField<int>(LocalBridgeClazz, "maxLength"); _maxLengthReady = true; } return _maxLengthContent; } }
            private static int _maxLengthContent = default;
            private static bool _maxLengthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maxLevel"/>
            /// </summary>
            public static int maxLevel { get { if (!_maxLevelReady) { _maxLevelContent = SGetField<int>(LocalBridgeClazz, "maxLevel"); _maxLevelReady = true; } return _maxLevelContent; } }
            private static int _maxLevelContent = default;
            private static bool _maxLevelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maxLines"/>
            /// </summary>
            public static int maxLines { get { if (!_maxLinesReady) { _maxLinesContent = SGetField<int>(LocalBridgeClazz, "maxLines"); _maxLinesReady = true; } return _maxLinesContent; } }
            private static int _maxLinesContent = default;
            private static bool _maxLinesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maxLongVersionCode"/>
            /// </summary>
            public static int maxLongVersionCode { get { if (!_maxLongVersionCodeReady) { _maxLongVersionCodeContent = SGetField<int>(LocalBridgeClazz, "maxLongVersionCode"); _maxLongVersionCodeReady = true; } return _maxLongVersionCodeContent; } }
            private static int _maxLongVersionCodeContent = default;
            private static bool _maxLongVersionCodeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maxRecents"/>
            /// </summary>
            public static int maxRecents { get { if (!_maxRecentsReady) { _maxRecentsContent = SGetField<int>(LocalBridgeClazz, "maxRecents"); _maxRecentsReady = true; } return _maxRecentsContent; } }
            private static int _maxRecentsContent = default;
            private static bool _maxRecentsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maxResizeHeight"/>
            /// </summary>
            public static int maxResizeHeight { get { if (!_maxResizeHeightReady) { _maxResizeHeightContent = SGetField<int>(LocalBridgeClazz, "maxResizeHeight"); _maxResizeHeightReady = true; } return _maxResizeHeightContent; } }
            private static int _maxResizeHeightContent = default;
            private static bool _maxResizeHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maxResizeWidth"/>
            /// </summary>
            public static int maxResizeWidth { get { if (!_maxResizeWidthReady) { _maxResizeWidthContent = SGetField<int>(LocalBridgeClazz, "maxResizeWidth"); _maxResizeWidthReady = true; } return _maxResizeWidthContent; } }
            private static int _maxResizeWidthContent = default;
            private static bool _maxResizeWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maxRows"/>
            /// </summary>
            public static int maxRows { get { if (!_maxRowsReady) { _maxRowsContent = SGetField<int>(LocalBridgeClazz, "maxRows"); _maxRowsReady = true; } return _maxRowsContent; } }
            private static int _maxRowsContent = default;
            private static bool _maxRowsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maxSdkVersion"/>
            /// </summary>
            public static int maxSdkVersion { get { if (!_maxSdkVersionReady) { _maxSdkVersionContent = SGetField<int>(LocalBridgeClazz, "maxSdkVersion"); _maxSdkVersionReady = true; } return _maxSdkVersionContent; } }
            private static int _maxSdkVersionContent = default;
            private static bool _maxSdkVersionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#maxWidth"/>
            /// </summary>
            public static int maxWidth { get { if (!_maxWidthReady) { _maxWidthContent = SGetField<int>(LocalBridgeClazz, "maxWidth"); _maxWidthReady = true; } return _maxWidthContent; } }
            private static int _maxWidthContent = default;
            private static bool _maxWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#measureAllChildren"/>
            /// </summary>
            public static int measureAllChildren { get { if (!_measureAllChildrenReady) { _measureAllChildrenContent = SGetField<int>(LocalBridgeClazz, "measureAllChildren"); _measureAllChildrenReady = true; } return _measureAllChildrenContent; } }
            private static int _measureAllChildrenContent = default;
            private static bool _measureAllChildrenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#measureWithLargestChild"/>
            /// </summary>
            public static int measureWithLargestChild { get { if (!_measureWithLargestChildReady) { _measureWithLargestChildContent = SGetField<int>(LocalBridgeClazz, "measureWithLargestChild"); _measureWithLargestChildReady = true; } return _measureWithLargestChildContent; } }
            private static int _measureWithLargestChildContent = default;
            private static bool _measureWithLargestChildReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#mediaRouteButtonStyle"/>
            /// </summary>
            public static int mediaRouteButtonStyle { get { if (!_mediaRouteButtonStyleReady) { _mediaRouteButtonStyleContent = SGetField<int>(LocalBridgeClazz, "mediaRouteButtonStyle"); _mediaRouteButtonStyleReady = true; } return _mediaRouteButtonStyleContent; } }
            private static int _mediaRouteButtonStyleContent = default;
            private static bool _mediaRouteButtonStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#mediaRouteTypes"/>
            /// </summary>
            public static int mediaRouteTypes { get { if (!_mediaRouteTypesReady) { _mediaRouteTypesContent = SGetField<int>(LocalBridgeClazz, "mediaRouteTypes"); _mediaRouteTypesReady = true; } return _mediaRouteTypesContent; } }
            private static int _mediaRouteTypesContent = default;
            private static bool _mediaRouteTypesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#memtagMode"/>
            /// </summary>
            public static int memtagMode { get { if (!_memtagModeReady) { _memtagModeContent = SGetField<int>(LocalBridgeClazz, "memtagMode"); _memtagModeReady = true; } return _memtagModeContent; } }
            private static int _memtagModeContent = default;
            private static bool _memtagModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#menuCategory"/>
            /// </summary>
            public static int menuCategory { get { if (!_menuCategoryReady) { _menuCategoryContent = SGetField<int>(LocalBridgeClazz, "menuCategory"); _menuCategoryReady = true; } return _menuCategoryContent; } }
            private static int _menuCategoryContent = default;
            private static bool _menuCategoryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#mimeGroup"/>
            /// </summary>
            public static int mimeGroup { get { if (!_mimeGroupReady) { _mimeGroupContent = SGetField<int>(LocalBridgeClazz, "mimeGroup"); _mimeGroupReady = true; } return _mimeGroupContent; } }
            private static int _mimeGroupContent = default;
            private static bool _mimeGroupReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#mimeType"/>
            /// </summary>
            public static int mimeType { get { if (!_mimeTypeReady) { _mimeTypeContent = SGetField<int>(LocalBridgeClazz, "mimeType"); _mimeTypeReady = true; } return _mimeTypeContent; } }
            private static int _mimeTypeContent = default;
            private static bool _mimeTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#min"/>
            /// </summary>
            public static int min { get { if (!_minReady) { _minContent = SGetField<int>(LocalBridgeClazz, "min"); _minReady = true; } return _minContent; } }
            private static int _minContent = default;
            private static bool _minReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#minAspectRatio"/>
            /// </summary>
            public static int minAspectRatio { get { if (!_minAspectRatioReady) { _minAspectRatioContent = SGetField<int>(LocalBridgeClazz, "minAspectRatio"); _minAspectRatioReady = true; } return _minAspectRatioContent; } }
            private static int _minAspectRatioContent = default;
            private static bool _minAspectRatioReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#minDate"/>
            /// </summary>
            public static int minDate { get { if (!_minDateReady) { _minDateContent = SGetField<int>(LocalBridgeClazz, "minDate"); _minDateReady = true; } return _minDateContent; } }
            private static int _minDateContent = default;
            private static bool _minDateReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#minEms"/>
            /// </summary>
            public static int minEms { get { if (!_minEmsReady) { _minEmsContent = SGetField<int>(LocalBridgeClazz, "minEms"); _minEmsReady = true; } return _minEmsContent; } }
            private static int _minEmsContent = default;
            private static bool _minEmsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#minHeight"/>
            /// </summary>
            public static int minHeight { get { if (!_minHeightReady) { _minHeightContent = SGetField<int>(LocalBridgeClazz, "minHeight"); _minHeightReady = true; } return _minHeightContent; } }
            private static int _minHeightContent = default;
            private static bool _minHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#minimumHorizontalAngle"/>
            /// </summary>
            public static int minimumHorizontalAngle { get { if (!_minimumHorizontalAngleReady) { _minimumHorizontalAngleContent = SGetField<int>(LocalBridgeClazz, "minimumHorizontalAngle"); _minimumHorizontalAngleReady = true; } return _minimumHorizontalAngleContent; } }
            private static int _minimumHorizontalAngleContent = default;
            private static bool _minimumHorizontalAngleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#minimumVerticalAngle"/>
            /// </summary>
            public static int minimumVerticalAngle { get { if (!_minimumVerticalAngleReady) { _minimumVerticalAngleContent = SGetField<int>(LocalBridgeClazz, "minimumVerticalAngle"); _minimumVerticalAngleReady = true; } return _minimumVerticalAngleContent; } }
            private static int _minimumVerticalAngleContent = default;
            private static bool _minimumVerticalAngleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#minLevel"/>
            /// </summary>
            public static int minLevel { get { if (!_minLevelReady) { _minLevelContent = SGetField<int>(LocalBridgeClazz, "minLevel"); _minLevelReady = true; } return _minLevelContent; } }
            private static int _minLevelContent = default;
            private static bool _minLevelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#minLines"/>
            /// </summary>
            public static int minLines { get { if (!_minLinesReady) { _minLinesContent = SGetField<int>(LocalBridgeClazz, "minLines"); _minLinesReady = true; } return _minLinesContent; } }
            private static int _minLinesContent = default;
            private static bool _minLinesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#minResizeHeight"/>
            /// </summary>
            public static int minResizeHeight { get { if (!_minResizeHeightReady) { _minResizeHeightContent = SGetField<int>(LocalBridgeClazz, "minResizeHeight"); _minResizeHeightReady = true; } return _minResizeHeightContent; } }
            private static int _minResizeHeightContent = default;
            private static bool _minResizeHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#minResizeWidth"/>
            /// </summary>
            public static int minResizeWidth { get { if (!_minResizeWidthReady) { _minResizeWidthContent = SGetField<int>(LocalBridgeClazz, "minResizeWidth"); _minResizeWidthReady = true; } return _minResizeWidthContent; } }
            private static int _minResizeWidthContent = default;
            private static bool _minResizeWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#minSdkVersion"/>
            /// </summary>
            public static int minSdkVersion { get { if (!_minSdkVersionReady) { _minSdkVersionContent = SGetField<int>(LocalBridgeClazz, "minSdkVersion"); _minSdkVersionReady = true; } return _minSdkVersionContent; } }
            private static int _minSdkVersionContent = default;
            private static bool _minSdkVersionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#minWidth"/>
            /// </summary>
            public static int minWidth { get { if (!_minWidthReady) { _minWidthContent = SGetField<int>(LocalBridgeClazz, "minWidth"); _minWidthReady = true; } return _minWidthContent; } }
            private static int _minWidthContent = default;
            private static bool _minWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#mipMap"/>
            /// </summary>
            public static int mipMap { get { if (!_mipMapReady) { _mipMapContent = SGetField<int>(LocalBridgeClazz, "mipMap"); _mipMapReady = true; } return _mipMapContent; } }
            private static int _mipMapContent = default;
            private static bool _mipMapReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#mirrorForRtl"/>
            /// </summary>
            public static int mirrorForRtl { get { if (!_mirrorForRtlReady) { _mirrorForRtlContent = SGetField<int>(LocalBridgeClazz, "mirrorForRtl"); _mirrorForRtlReady = true; } return _mirrorForRtlContent; } }
            private static int _mirrorForRtlContent = default;
            private static bool _mirrorForRtlReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#mode"/>
            /// </summary>
            public static int mode { get { if (!_modeReady) { _modeContent = SGetField<int>(LocalBridgeClazz, "mode"); _modeReady = true; } return _modeContent; } }
            private static int _modeContent = default;
            private static bool _modeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#moreIcon"/>
            /// </summary>
            public static int moreIcon { get { if (!_moreIconReady) { _moreIconContent = SGetField<int>(LocalBridgeClazz, "moreIcon"); _moreIconReady = true; } return _moreIconContent; } }
            private static int _moreIconContent = default;
            private static bool _moreIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#multiArch"/>
            /// </summary>
            public static int multiArch { get { if (!_multiArchReady) { _multiArchContent = SGetField<int>(LocalBridgeClazz, "multiArch"); _multiArchReady = true; } return _multiArchContent; } }
            private static int _multiArchContent = default;
            private static bool _multiArchReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#multiprocess"/>
            /// </summary>
            public static int multiprocess { get { if (!_multiprocessReady) { _multiprocessContent = SGetField<int>(LocalBridgeClazz, "multiprocess"); _multiprocessReady = true; } return _multiprocessContent; } }
            private static int _multiprocessContent = default;
            private static bool _multiprocessReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#name"/>
            /// </summary>
            public static int name { get { if (!_nameReady) { _nameContent = SGetField<int>(LocalBridgeClazz, "name"); _nameReady = true; } return _nameContent; } }
            private static int _nameContent = default;
            private static bool _nameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#nativeHeapZeroInitialized"/>
            /// </summary>
            public static int nativeHeapZeroInitialized { get { if (!_nativeHeapZeroInitializedReady) { _nativeHeapZeroInitializedContent = SGetField<int>(LocalBridgeClazz, "nativeHeapZeroInitialized"); _nativeHeapZeroInitializedReady = true; } return _nativeHeapZeroInitializedContent; } }
            private static int _nativeHeapZeroInitializedContent = default;
            private static bool _nativeHeapZeroInitializedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#navigationBarColor"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int navigationBarColor { get { if (!_navigationBarColorReady) { _navigationBarColorContent = SGetField<int>(LocalBridgeClazz, "navigationBarColor"); _navigationBarColorReady = true; } return _navigationBarColorContent; } }
            private static int _navigationBarColorContent = default;
            private static bool _navigationBarColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#navigationBarDividerColor"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int navigationBarDividerColor { get { if (!_navigationBarDividerColorReady) { _navigationBarDividerColorContent = SGetField<int>(LocalBridgeClazz, "navigationBarDividerColor"); _navigationBarDividerColorReady = true; } return _navigationBarDividerColorContent; } }
            private static int _navigationBarDividerColorContent = default;
            private static bool _navigationBarDividerColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#navigationContentDescription"/>
            /// </summary>
            public static int navigationContentDescription { get { if (!_navigationContentDescriptionReady) { _navigationContentDescriptionContent = SGetField<int>(LocalBridgeClazz, "navigationContentDescription"); _navigationContentDescriptionReady = true; } return _navigationContentDescriptionContent; } }
            private static int _navigationContentDescriptionContent = default;
            private static bool _navigationContentDescriptionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#navigationIcon"/>
            /// </summary>
            public static int navigationIcon { get { if (!_navigationIconReady) { _navigationIconContent = SGetField<int>(LocalBridgeClazz, "navigationIcon"); _navigationIconReady = true; } return _navigationIconContent; } }
            private static int _navigationIconContent = default;
            private static bool _navigationIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#navigationMode"/>
            /// </summary>
            public static int navigationMode { get { if (!_navigationModeReady) { _navigationModeContent = SGetField<int>(LocalBridgeClazz, "navigationMode"); _navigationModeReady = true; } return _navigationModeContent; } }
            private static int _navigationModeContent = default;
            private static bool _navigationModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#negativeButtonText"/>
            /// </summary>
            public static int negativeButtonText { get { if (!_negativeButtonTextReady) { _negativeButtonTextContent = SGetField<int>(LocalBridgeClazz, "negativeButtonText"); _negativeButtonTextReady = true; } return _negativeButtonTextContent; } }
            private static int _negativeButtonTextContent = default;
            private static bool _negativeButtonTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#nestedScrollingEnabled"/>
            /// </summary>
            public static int nestedScrollingEnabled { get { if (!_nestedScrollingEnabledReady) { _nestedScrollingEnabledContent = SGetField<int>(LocalBridgeClazz, "nestedScrollingEnabled"); _nestedScrollingEnabledReady = true; } return _nestedScrollingEnabledContent; } }
            private static int _nestedScrollingEnabledContent = default;
            private static bool _nestedScrollingEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#networkSecurityConfig"/>
            /// </summary>
            public static int networkSecurityConfig { get { if (!_networkSecurityConfigReady) { _networkSecurityConfigContent = SGetField<int>(LocalBridgeClazz, "networkSecurityConfig"); _networkSecurityConfigReady = true; } return _networkSecurityConfigContent; } }
            private static int _networkSecurityConfigContent = default;
            private static bool _networkSecurityConfigReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#nextClusterForward"/>
            /// </summary>
            public static int nextClusterForward { get { if (!_nextClusterForwardReady) { _nextClusterForwardContent = SGetField<int>(LocalBridgeClazz, "nextClusterForward"); _nextClusterForwardReady = true; } return _nextClusterForwardContent; } }
            private static int _nextClusterForwardContent = default;
            private static bool _nextClusterForwardReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#nextFocusDown"/>
            /// </summary>
            public static int nextFocusDown { get { if (!_nextFocusDownReady) { _nextFocusDownContent = SGetField<int>(LocalBridgeClazz, "nextFocusDown"); _nextFocusDownReady = true; } return _nextFocusDownContent; } }
            private static int _nextFocusDownContent = default;
            private static bool _nextFocusDownReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#nextFocusForward"/>
            /// </summary>
            public static int nextFocusForward { get { if (!_nextFocusForwardReady) { _nextFocusForwardContent = SGetField<int>(LocalBridgeClazz, "nextFocusForward"); _nextFocusForwardReady = true; } return _nextFocusForwardContent; } }
            private static int _nextFocusForwardContent = default;
            private static bool _nextFocusForwardReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#nextFocusLeft"/>
            /// </summary>
            public static int nextFocusLeft { get { if (!_nextFocusLeftReady) { _nextFocusLeftContent = SGetField<int>(LocalBridgeClazz, "nextFocusLeft"); _nextFocusLeftReady = true; } return _nextFocusLeftContent; } }
            private static int _nextFocusLeftContent = default;
            private static bool _nextFocusLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#nextFocusRight"/>
            /// </summary>
            public static int nextFocusRight { get { if (!_nextFocusRightReady) { _nextFocusRightContent = SGetField<int>(LocalBridgeClazz, "nextFocusRight"); _nextFocusRightReady = true; } return _nextFocusRightContent; } }
            private static int _nextFocusRightContent = default;
            private static bool _nextFocusRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#nextFocusUp"/>
            /// </summary>
            public static int nextFocusUp { get { if (!_nextFocusUpReady) { _nextFocusUpContent = SGetField<int>(LocalBridgeClazz, "nextFocusUp"); _nextFocusUpReady = true; } return _nextFocusUpContent; } }
            private static int _nextFocusUpContent = default;
            private static bool _nextFocusUpReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#noHistory"/>
            /// </summary>
            public static int noHistory { get { if (!_noHistoryReady) { _noHistoryContent = SGetField<int>(LocalBridgeClazz, "noHistory"); _noHistoryReady = true; } return _noHistoryContent; } }
            private static int _noHistoryContent = default;
            private static bool _noHistoryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#nonInteractiveUiTimeout"/>
            /// </summary>
            public static int nonInteractiveUiTimeout { get { if (!_nonInteractiveUiTimeoutReady) { _nonInteractiveUiTimeoutContent = SGetField<int>(LocalBridgeClazz, "nonInteractiveUiTimeout"); _nonInteractiveUiTimeoutReady = true; } return _nonInteractiveUiTimeoutContent; } }
            private static int _nonInteractiveUiTimeoutContent = default;
            private static bool _nonInteractiveUiTimeoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#normalScreens"/>
            /// </summary>
            public static int normalScreens { get { if (!_normalScreensReady) { _normalScreensContent = SGetField<int>(LocalBridgeClazz, "normalScreens"); _normalScreensReady = true; } return _normalScreensContent; } }
            private static int _normalScreensContent = default;
            private static bool _normalScreensReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#notificationTimeout"/>
            /// </summary>
            public static int notificationTimeout { get { if (!_notificationTimeoutReady) { _notificationTimeoutContent = SGetField<int>(LocalBridgeClazz, "notificationTimeout"); _notificationTimeoutReady = true; } return _notificationTimeoutContent; } }
            private static int _notificationTimeoutContent = default;
            private static bool _notificationTimeoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#numberPickerStyle"/>
            /// </summary>
            public static int numberPickerStyle { get { if (!_numberPickerStyleReady) { _numberPickerStyleContent = SGetField<int>(LocalBridgeClazz, "numberPickerStyle"); _numberPickerStyleReady = true; } return _numberPickerStyleContent; } }
            private static int _numberPickerStyleContent = default;
            private static bool _numberPickerStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#numbersBackgroundColor"/>
            /// </summary>
            public static int numbersBackgroundColor { get { if (!_numbersBackgroundColorReady) { _numbersBackgroundColorContent = SGetField<int>(LocalBridgeClazz, "numbersBackgroundColor"); _numbersBackgroundColorReady = true; } return _numbersBackgroundColorContent; } }
            private static int _numbersBackgroundColorContent = default;
            private static bool _numbersBackgroundColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#numbersInnerTextColor"/>
            /// </summary>
            public static int numbersInnerTextColor { get { if (!_numbersInnerTextColorReady) { _numbersInnerTextColorContent = SGetField<int>(LocalBridgeClazz, "numbersInnerTextColor"); _numbersInnerTextColorReady = true; } return _numbersInnerTextColorContent; } }
            private static int _numbersInnerTextColorContent = default;
            private static bool _numbersInnerTextColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#numbersSelectorColor"/>
            /// </summary>
            public static int numbersSelectorColor { get { if (!_numbersSelectorColorReady) { _numbersSelectorColorContent = SGetField<int>(LocalBridgeClazz, "numbersSelectorColor"); _numbersSelectorColorReady = true; } return _numbersSelectorColorContent; } }
            private static int _numbersSelectorColorContent = default;
            private static bool _numbersSelectorColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#numbersTextColor"/>
            /// </summary>
            public static int numbersTextColor { get { if (!_numbersTextColorReady) { _numbersTextColorContent = SGetField<int>(LocalBridgeClazz, "numbersTextColor"); _numbersTextColorReady = true; } return _numbersTextColorContent; } }
            private static int _numbersTextColorContent = default;
            private static bool _numbersTextColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#numColumns"/>
            /// </summary>
            public static int numColumns { get { if (!_numColumnsReady) { _numColumnsContent = SGetField<int>(LocalBridgeClazz, "numColumns"); _numColumnsReady = true; } return _numColumnsContent; } }
            private static int _numColumnsContent = default;
            private static bool _numColumnsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#numeric"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int numeric { get { if (!_numericReady) { _numericContent = SGetField<int>(LocalBridgeClazz, "numeric"); _numericReady = true; } return _numericContent; } }
            private static int _numericContent = default;
            private static bool _numericReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#numericModifiers"/>
            /// </summary>
            public static int numericModifiers { get { if (!_numericModifiersReady) { _numericModifiersContent = SGetField<int>(LocalBridgeClazz, "numericModifiers"); _numericModifiersReady = true; } return _numericModifiersContent; } }
            private static int _numericModifiersContent = default;
            private static bool _numericModifiersReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#numericShortcut"/>
            /// </summary>
            public static int numericShortcut { get { if (!_numericShortcutReady) { _numericShortcutContent = SGetField<int>(LocalBridgeClazz, "numericShortcut"); _numericShortcutReady = true; } return _numericShortcutContent; } }
            private static int _numericShortcutContent = default;
            private static bool _numericShortcutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#numStars"/>
            /// </summary>
            public static int numStars { get { if (!_numStarsReady) { _numStarsContent = SGetField<int>(LocalBridgeClazz, "numStars"); _numStarsReady = true; } return _numStarsContent; } }
            private static int _numStarsContent = default;
            private static bool _numStarsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#offset"/>
            /// </summary>
            public static int offset { get { if (!_offsetReady) { _offsetContent = SGetField<int>(LocalBridgeClazz, "offset"); _offsetReady = true; } return _offsetContent; } }
            private static int _offsetContent = default;
            private static bool _offsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#onClick"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int onClick { get { if (!_onClickReady) { _onClickContent = SGetField<int>(LocalBridgeClazz, "onClick"); _onClickReady = true; } return _onClickContent; } }
            private static int _onClickContent = default;
            private static bool _onClickReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#oneshot"/>
            /// </summary>
            public static int oneshot { get { if (!_oneshotReady) { _oneshotContent = SGetField<int>(LocalBridgeClazz, "oneshot"); _oneshotReady = true; } return _oneshotContent; } }
            private static int _oneshotContent = default;
            private static bool _oneshotReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#opacity"/>
            /// </summary>
            public static int opacity { get { if (!_opacityReady) { _opacityContent = SGetField<int>(LocalBridgeClazz, "opacity"); _opacityReady = true; } return _opacityContent; } }
            private static int _opacityContent = default;
            private static bool _opacityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#opticalInsetBottom"/>
            /// </summary>
            public static int opticalInsetBottom { get { if (!_opticalInsetBottomReady) { _opticalInsetBottomContent = SGetField<int>(LocalBridgeClazz, "opticalInsetBottom"); _opticalInsetBottomReady = true; } return _opticalInsetBottomContent; } }
            private static int _opticalInsetBottomContent = default;
            private static bool _opticalInsetBottomReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#opticalInsetLeft"/>
            /// </summary>
            public static int opticalInsetLeft { get { if (!_opticalInsetLeftReady) { _opticalInsetLeftContent = SGetField<int>(LocalBridgeClazz, "opticalInsetLeft"); _opticalInsetLeftReady = true; } return _opticalInsetLeftContent; } }
            private static int _opticalInsetLeftContent = default;
            private static bool _opticalInsetLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#opticalInsetRight"/>
            /// </summary>
            public static int opticalInsetRight { get { if (!_opticalInsetRightReady) { _opticalInsetRightContent = SGetField<int>(LocalBridgeClazz, "opticalInsetRight"); _opticalInsetRightReady = true; } return _opticalInsetRightContent; } }
            private static int _opticalInsetRightContent = default;
            private static bool _opticalInsetRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#opticalInsetTop"/>
            /// </summary>
            public static int opticalInsetTop { get { if (!_opticalInsetTopReady) { _opticalInsetTopContent = SGetField<int>(LocalBridgeClazz, "opticalInsetTop"); _opticalInsetTopReady = true; } return _opticalInsetTopContent; } }
            private static int _opticalInsetTopContent = default;
            private static bool _opticalInsetTopReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#order"/>
            /// </summary>
            public static int order { get { if (!_orderReady) { _orderContent = SGetField<int>(LocalBridgeClazz, "order"); _orderReady = true; } return _orderContent; } }
            private static int _orderContent = default;
            private static bool _orderReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#orderInCategory"/>
            /// </summary>
            public static int orderInCategory { get { if (!_orderInCategoryReady) { _orderInCategoryContent = SGetField<int>(LocalBridgeClazz, "orderInCategory"); _orderInCategoryReady = true; } return _orderInCategoryContent; } }
            private static int _orderInCategoryContent = default;
            private static bool _orderInCategoryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#ordering"/>
            /// </summary>
            public static int ordering { get { if (!_orderingReady) { _orderingContent = SGetField<int>(LocalBridgeClazz, "ordering"); _orderingReady = true; } return _orderingContent; } }
            private static int _orderingContent = default;
            private static bool _orderingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#orderingFromXml"/>
            /// </summary>
            public static int orderingFromXml { get { if (!_orderingFromXmlReady) { _orderingFromXmlContent = SGetField<int>(LocalBridgeClazz, "orderingFromXml"); _orderingFromXmlReady = true; } return _orderingFromXmlContent; } }
            private static int _orderingFromXmlContent = default;
            private static bool _orderingFromXmlReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#orientation"/>
            /// </summary>
            public static int orientation { get { if (!_orientationReady) { _orientationContent = SGetField<int>(LocalBridgeClazz, "orientation"); _orientationReady = true; } return _orientationContent; } }
            private static int _orientationContent = default;
            private static bool _orientationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#outAnimation"/>
            /// </summary>
            public static int outAnimation { get { if (!_outAnimationReady) { _outAnimationContent = SGetField<int>(LocalBridgeClazz, "outAnimation"); _outAnimationReady = true; } return _outAnimationContent; } }
            private static int _outAnimationContent = default;
            private static bool _outAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#outlineAmbientShadowColor"/>
            /// </summary>
            public static int outlineAmbientShadowColor { get { if (!_outlineAmbientShadowColorReady) { _outlineAmbientShadowColorContent = SGetField<int>(LocalBridgeClazz, "outlineAmbientShadowColor"); _outlineAmbientShadowColorReady = true; } return _outlineAmbientShadowColorContent; } }
            private static int _outlineAmbientShadowColorContent = default;
            private static bool _outlineAmbientShadowColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#outlineProvider"/>
            /// </summary>
            public static int outlineProvider { get { if (!_outlineProviderReady) { _outlineProviderContent = SGetField<int>(LocalBridgeClazz, "outlineProvider"); _outlineProviderReady = true; } return _outlineProviderContent; } }
            private static int _outlineProviderContent = default;
            private static bool _outlineProviderReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#outlineSpotShadowColor"/>
            /// </summary>
            public static int outlineSpotShadowColor { get { if (!_outlineSpotShadowColorReady) { _outlineSpotShadowColorContent = SGetField<int>(LocalBridgeClazz, "outlineSpotShadowColor"); _outlineSpotShadowColorReady = true; } return _outlineSpotShadowColorContent; } }
            private static int _outlineSpotShadowColorContent = default;
            private static bool _outlineSpotShadowColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#overlapAnchor"/>
            /// </summary>
            public static int overlapAnchor { get { if (!_overlapAnchorReady) { _overlapAnchorContent = SGetField<int>(LocalBridgeClazz, "overlapAnchor"); _overlapAnchorReady = true; } return _overlapAnchorContent; } }
            private static int _overlapAnchorContent = default;
            private static bool _overlapAnchorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#overridesImplicitlyEnabledSubtype"/>
            /// </summary>
            public static int overridesImplicitlyEnabledSubtype { get { if (!_overridesImplicitlyEnabledSubtypeReady) { _overridesImplicitlyEnabledSubtypeContent = SGetField<int>(LocalBridgeClazz, "overridesImplicitlyEnabledSubtype"); _overridesImplicitlyEnabledSubtypeReady = true; } return _overridesImplicitlyEnabledSubtypeContent; } }
            private static int _overridesImplicitlyEnabledSubtypeContent = default;
            private static bool _overridesImplicitlyEnabledSubtypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#overScrollFooter"/>
            /// </summary>
            public static int overScrollFooter { get { if (!_overScrollFooterReady) { _overScrollFooterContent = SGetField<int>(LocalBridgeClazz, "overScrollFooter"); _overScrollFooterReady = true; } return _overScrollFooterContent; } }
            private static int _overScrollFooterContent = default;
            private static bool _overScrollFooterReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#overScrollHeader"/>
            /// </summary>
            public static int overScrollHeader { get { if (!_overScrollHeaderReady) { _overScrollHeaderContent = SGetField<int>(LocalBridgeClazz, "overScrollHeader"); _overScrollHeaderReady = true; } return _overScrollHeaderContent; } }
            private static int _overScrollHeaderContent = default;
            private static bool _overScrollHeaderReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#overScrollMode"/>
            /// </summary>
            public static int overScrollMode { get { if (!_overScrollModeReady) { _overScrollModeContent = SGetField<int>(LocalBridgeClazz, "overScrollMode"); _overScrollModeReady = true; } return _overScrollModeContent; } }
            private static int _overScrollModeContent = default;
            private static bool _overScrollModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#packageNames"/>
            /// </summary>
            public static int packageNames { get { if (!_packageNamesReady) { _packageNamesContent = SGetField<int>(LocalBridgeClazz, "packageNames"); _packageNamesReady = true; } return _packageNamesContent; } }
            private static int _packageNamesContent = default;
            private static bool _packageNamesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#packageType"/>
            /// </summary>
            public static int packageType { get { if (!_packageTypeReady) { _packageTypeContent = SGetField<int>(LocalBridgeClazz, "packageType"); _packageTypeReady = true; } return _packageTypeContent; } }
            private static int _packageTypeContent = default;
            private static bool _packageTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#padding"/>
            /// </summary>
            public static int padding { get { if (!_paddingReady) { _paddingContent = SGetField<int>(LocalBridgeClazz, "padding"); _paddingReady = true; } return _paddingContent; } }
            private static int _paddingContent = default;
            private static bool _paddingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#paddingBottom"/>
            /// </summary>
            public static int paddingBottom { get { if (!_paddingBottomReady) { _paddingBottomContent = SGetField<int>(LocalBridgeClazz, "paddingBottom"); _paddingBottomReady = true; } return _paddingBottomContent; } }
            private static int _paddingBottomContent = default;
            private static bool _paddingBottomReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#paddingEnd"/>
            /// </summary>
            public static int paddingEnd { get { if (!_paddingEndReady) { _paddingEndContent = SGetField<int>(LocalBridgeClazz, "paddingEnd"); _paddingEndReady = true; } return _paddingEndContent; } }
            private static int _paddingEndContent = default;
            private static bool _paddingEndReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#paddingHorizontal"/>
            /// </summary>
            public static int paddingHorizontal { get { if (!_paddingHorizontalReady) { _paddingHorizontalContent = SGetField<int>(LocalBridgeClazz, "paddingHorizontal"); _paddingHorizontalReady = true; } return _paddingHorizontalContent; } }
            private static int _paddingHorizontalContent = default;
            private static bool _paddingHorizontalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#paddingLeft"/>
            /// </summary>
            public static int paddingLeft { get { if (!_paddingLeftReady) { _paddingLeftContent = SGetField<int>(LocalBridgeClazz, "paddingLeft"); _paddingLeftReady = true; } return _paddingLeftContent; } }
            private static int _paddingLeftContent = default;
            private static bool _paddingLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#paddingMode"/>
            /// </summary>
            public static int paddingMode { get { if (!_paddingModeReady) { _paddingModeContent = SGetField<int>(LocalBridgeClazz, "paddingMode"); _paddingModeReady = true; } return _paddingModeContent; } }
            private static int _paddingModeContent = default;
            private static bool _paddingModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#paddingRight"/>
            /// </summary>
            public static int paddingRight { get { if (!_paddingRightReady) { _paddingRightContent = SGetField<int>(LocalBridgeClazz, "paddingRight"); _paddingRightReady = true; } return _paddingRightContent; } }
            private static int _paddingRightContent = default;
            private static bool _paddingRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#paddingStart"/>
            /// </summary>
            public static int paddingStart { get { if (!_paddingStartReady) { _paddingStartContent = SGetField<int>(LocalBridgeClazz, "paddingStart"); _paddingStartReady = true; } return _paddingStartContent; } }
            private static int _paddingStartContent = default;
            private static bool _paddingStartReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#paddingTop"/>
            /// </summary>
            public static int paddingTop { get { if (!_paddingTopReady) { _paddingTopContent = SGetField<int>(LocalBridgeClazz, "paddingTop"); _paddingTopReady = true; } return _paddingTopContent; } }
            private static int _paddingTopContent = default;
            private static bool _paddingTopReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#paddingVertical"/>
            /// </summary>
            public static int paddingVertical { get { if (!_paddingVerticalReady) { _paddingVerticalContent = SGetField<int>(LocalBridgeClazz, "paddingVertical"); _paddingVerticalReady = true; } return _paddingVerticalContent; } }
            private static int _paddingVerticalContent = default;
            private static bool _paddingVerticalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#panelBackground"/>
            /// </summary>
            public static int panelBackground { get { if (!_panelBackgroundReady) { _panelBackgroundContent = SGetField<int>(LocalBridgeClazz, "panelBackground"); _panelBackgroundReady = true; } return _panelBackgroundContent; } }
            private static int _panelBackgroundContent = default;
            private static bool _panelBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#panelColorBackground"/>
            /// </summary>
            public static int panelColorBackground { get { if (!_panelColorBackgroundReady) { _panelColorBackgroundContent = SGetField<int>(LocalBridgeClazz, "panelColorBackground"); _panelColorBackgroundReady = true; } return _panelColorBackgroundContent; } }
            private static int _panelColorBackgroundContent = default;
            private static bool _panelColorBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#panelColorForeground"/>
            /// </summary>
            public static int panelColorForeground { get { if (!_panelColorForegroundReady) { _panelColorForegroundContent = SGetField<int>(LocalBridgeClazz, "panelColorForeground"); _panelColorForegroundReady = true; } return _panelColorForegroundContent; } }
            private static int _panelColorForegroundContent = default;
            private static bool _panelColorForegroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#panelFullBackground"/>
            /// </summary>
            public static int panelFullBackground { get { if (!_panelFullBackgroundReady) { _panelFullBackgroundContent = SGetField<int>(LocalBridgeClazz, "panelFullBackground"); _panelFullBackgroundReady = true; } return _panelFullBackgroundContent; } }
            private static int _panelFullBackgroundContent = default;
            private static bool _panelFullBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#panelTextAppearance"/>
            /// </summary>
            public static int panelTextAppearance { get { if (!_panelTextAppearanceReady) { _panelTextAppearanceContent = SGetField<int>(LocalBridgeClazz, "panelTextAppearance"); _panelTextAppearanceReady = true; } return _panelTextAppearanceContent; } }
            private static int _panelTextAppearanceContent = default;
            private static bool _panelTextAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#parentActivityName"/>
            /// </summary>
            public static int parentActivityName { get { if (!_parentActivityNameReady) { _parentActivityNameContent = SGetField<int>(LocalBridgeClazz, "parentActivityName"); _parentActivityNameReady = true; } return _parentActivityNameContent; } }
            private static int _parentActivityNameContent = default;
            private static bool _parentActivityNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#password"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int password { get { if (!_passwordReady) { _passwordContent = SGetField<int>(LocalBridgeClazz, "password"); _passwordReady = true; } return _passwordContent; } }
            private static int _passwordContent = default;
            private static bool _passwordReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#passwordsActivity"/>
            /// </summary>
            public static int passwordsActivity { get { if (!_passwordsActivityReady) { _passwordsActivityContent = SGetField<int>(LocalBridgeClazz, "passwordsActivity"); _passwordsActivityReady = true; } return _passwordsActivityContent; } }
            private static int _passwordsActivityContent = default;
            private static bool _passwordsActivityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#path"/>
            /// </summary>
            public static int path { get { if (!_pathReady) { _pathContent = SGetField<int>(LocalBridgeClazz, "path"); _pathReady = true; } return _pathContent; } }
            private static int _pathContent = default;
            private static bool _pathReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#pathAdvancedPattern"/>
            /// </summary>
            public static int pathAdvancedPattern { get { if (!_pathAdvancedPatternReady) { _pathAdvancedPatternContent = SGetField<int>(LocalBridgeClazz, "pathAdvancedPattern"); _pathAdvancedPatternReady = true; } return _pathAdvancedPatternContent; } }
            private static int _pathAdvancedPatternContent = default;
            private static bool _pathAdvancedPatternReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#pathData"/>
            /// </summary>
            public static int pathData { get { if (!_pathDataReady) { _pathDataContent = SGetField<int>(LocalBridgeClazz, "pathData"); _pathDataReady = true; } return _pathDataContent; } }
            private static int _pathDataContent = default;
            private static bool _pathDataReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#pathPattern"/>
            /// </summary>
            public static int pathPattern { get { if (!_pathPatternReady) { _pathPatternContent = SGetField<int>(LocalBridgeClazz, "pathPattern"); _pathPatternReady = true; } return _pathPatternContent; } }
            private static int _pathPatternContent = default;
            private static bool _pathPatternReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#pathPrefix"/>
            /// </summary>
            public static int pathPrefix { get { if (!_pathPrefixReady) { _pathPrefixContent = SGetField<int>(LocalBridgeClazz, "pathPrefix"); _pathPrefixReady = true; } return _pathPrefixContent; } }
            private static int _pathPrefixContent = default;
            private static bool _pathPrefixReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#pathSuffix"/>
            /// </summary>
            public static int pathSuffix { get { if (!_pathSuffixReady) { _pathSuffixContent = SGetField<int>(LocalBridgeClazz, "pathSuffix"); _pathSuffixReady = true; } return _pathSuffixContent; } }
            private static int _pathSuffixContent = default;
            private static bool _pathSuffixReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#patternPathData"/>
            /// </summary>
            public static int patternPathData { get { if (!_patternPathDataReady) { _patternPathDataContent = SGetField<int>(LocalBridgeClazz, "patternPathData"); _patternPathDataReady = true; } return _patternPathDataContent; } }
            private static int _patternPathDataContent = default;
            private static bool _patternPathDataReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#permission"/>
            /// </summary>
            public static int permission { get { if (!_permissionReady) { _permissionContent = SGetField<int>(LocalBridgeClazz, "permission"); _permissionReady = true; } return _permissionContent; } }
            private static int _permissionContent = default;
            private static bool _permissionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#permissionFlags"/>
            /// </summary>
            public static int permissionFlags { get { if (!_permissionFlagsReady) { _permissionFlagsContent = SGetField<int>(LocalBridgeClazz, "permissionFlags"); _permissionFlagsReady = true; } return _permissionFlagsContent; } }
            private static int _permissionFlagsContent = default;
            private static bool _permissionFlagsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#permissionGroup"/>
            /// </summary>
            public static int permissionGroup { get { if (!_permissionGroupReady) { _permissionGroupContent = SGetField<int>(LocalBridgeClazz, "permissionGroup"); _permissionGroupReady = true; } return _permissionGroupContent; } }
            private static int _permissionGroupContent = default;
            private static bool _permissionGroupReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#permissionGroupFlags"/>
            /// </summary>
            public static int permissionGroupFlags { get { if (!_permissionGroupFlagsReady) { _permissionGroupFlagsContent = SGetField<int>(LocalBridgeClazz, "permissionGroupFlags"); _permissionGroupFlagsReady = true; } return _permissionGroupFlagsContent; } }
            private static int _permissionGroupFlagsContent = default;
            private static bool _permissionGroupFlagsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#persistableMode"/>
            /// </summary>
            public static int persistableMode { get { if (!_persistableModeReady) { _persistableModeContent = SGetField<int>(LocalBridgeClazz, "persistableMode"); _persistableModeReady = true; } return _persistableModeContent; } }
            private static int _persistableModeContent = default;
            private static bool _persistableModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#persistent"/>
            /// </summary>
            public static int persistent { get { if (!_persistentReady) { _persistentContent = SGetField<int>(LocalBridgeClazz, "persistent"); _persistentReady = true; } return _persistentContent; } }
            private static int _persistentContent = default;
            private static bool _persistentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#persistentDrawingCache"/>
            /// </summary>
            public static int persistentDrawingCache { get { if (!_persistentDrawingCacheReady) { _persistentDrawingCacheContent = SGetField<int>(LocalBridgeClazz, "persistentDrawingCache"); _persistentDrawingCacheReady = true; } return _persistentDrawingCacheContent; } }
            private static int _persistentDrawingCacheContent = default;
            private static bool _persistentDrawingCacheReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#persistentWhenFeatureAvailable"/>
            /// </summary>
            public static int persistentWhenFeatureAvailable { get { if (!_persistentWhenFeatureAvailableReady) { _persistentWhenFeatureAvailableContent = SGetField<int>(LocalBridgeClazz, "persistentWhenFeatureAvailable"); _persistentWhenFeatureAvailableReady = true; } return _persistentWhenFeatureAvailableContent; } }
            private static int _persistentWhenFeatureAvailableContent = default;
            private static bool _persistentWhenFeatureAvailableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#phoneNumber"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int phoneNumber { get { if (!_phoneNumberReady) { _phoneNumberContent = SGetField<int>(LocalBridgeClazz, "phoneNumber"); _phoneNumberReady = true; } return _phoneNumberContent; } }
            private static int _phoneNumberContent = default;
            private static bool _phoneNumberReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#physicalKeyboardHintLanguageTag"/>
            /// </summary>
            public static int physicalKeyboardHintLanguageTag { get { if (!_physicalKeyboardHintLanguageTagReady) { _physicalKeyboardHintLanguageTagContent = SGetField<int>(LocalBridgeClazz, "physicalKeyboardHintLanguageTag"); _physicalKeyboardHintLanguageTagReady = true; } return _physicalKeyboardHintLanguageTagContent; } }
            private static int _physicalKeyboardHintLanguageTagContent = default;
            private static bool _physicalKeyboardHintLanguageTagReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#physicalKeyboardHintLayoutType"/>
            /// </summary>
            public static int physicalKeyboardHintLayoutType { get { if (!_physicalKeyboardHintLayoutTypeReady) { _physicalKeyboardHintLayoutTypeContent = SGetField<int>(LocalBridgeClazz, "physicalKeyboardHintLayoutType"); _physicalKeyboardHintLayoutTypeReady = true; } return _physicalKeyboardHintLayoutTypeContent; } }
            private static int _physicalKeyboardHintLayoutTypeContent = default;
            private static bool _physicalKeyboardHintLayoutTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#pivotX"/>
            /// </summary>
            public static int pivotX { get { if (!_pivotXReady) { _pivotXContent = SGetField<int>(LocalBridgeClazz, "pivotX"); _pivotXReady = true; } return _pivotXContent; } }
            private static int _pivotXContent = default;
            private static bool _pivotXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#pivotY"/>
            /// </summary>
            public static int pivotY { get { if (!_pivotYReady) { _pivotYContent = SGetField<int>(LocalBridgeClazz, "pivotY"); _pivotYReady = true; } return _pivotYContent; } }
            private static int _pivotYContent = default;
            private static bool _pivotYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#pointerIcon"/>
            /// </summary>
            public static int pointerIcon { get { if (!_pointerIconReady) { _pointerIconContent = SGetField<int>(LocalBridgeClazz, "pointerIcon"); _pointerIconReady = true; } return _pointerIconContent; } }
            private static int _pointerIconContent = default;
            private static bool _pointerIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#popupAnimationStyle"/>
            /// </summary>
            public static int popupAnimationStyle { get { if (!_popupAnimationStyleReady) { _popupAnimationStyleContent = SGetField<int>(LocalBridgeClazz, "popupAnimationStyle"); _popupAnimationStyleReady = true; } return _popupAnimationStyleContent; } }
            private static int _popupAnimationStyleContent = default;
            private static bool _popupAnimationStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#popupBackground"/>
            /// </summary>
            public static int popupBackground { get { if (!_popupBackgroundReady) { _popupBackgroundContent = SGetField<int>(LocalBridgeClazz, "popupBackground"); _popupBackgroundReady = true; } return _popupBackgroundContent; } }
            private static int _popupBackgroundContent = default;
            private static bool _popupBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#popupCharacters"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int popupCharacters { get { if (!_popupCharactersReady) { _popupCharactersContent = SGetField<int>(LocalBridgeClazz, "popupCharacters"); _popupCharactersReady = true; } return _popupCharactersContent; } }
            private static int _popupCharactersContent = default;
            private static bool _popupCharactersReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#popupElevation"/>
            /// </summary>
            public static int popupElevation { get { if (!_popupElevationReady) { _popupElevationContent = SGetField<int>(LocalBridgeClazz, "popupElevation"); _popupElevationReady = true; } return _popupElevationContent; } }
            private static int _popupElevationContent = default;
            private static bool _popupElevationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#popupEnterTransition"/>
            /// </summary>
            public static int popupEnterTransition { get { if (!_popupEnterTransitionReady) { _popupEnterTransitionContent = SGetField<int>(LocalBridgeClazz, "popupEnterTransition"); _popupEnterTransitionReady = true; } return _popupEnterTransitionContent; } }
            private static int _popupEnterTransitionContent = default;
            private static bool _popupEnterTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#popupExitTransition"/>
            /// </summary>
            public static int popupExitTransition { get { if (!_popupExitTransitionReady) { _popupExitTransitionContent = SGetField<int>(LocalBridgeClazz, "popupExitTransition"); _popupExitTransitionReady = true; } return _popupExitTransitionContent; } }
            private static int _popupExitTransitionContent = default;
            private static bool _popupExitTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#popupKeyboard"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int popupKeyboard { get { if (!_popupKeyboardReady) { _popupKeyboardContent = SGetField<int>(LocalBridgeClazz, "popupKeyboard"); _popupKeyboardReady = true; } return _popupKeyboardContent; } }
            private static int _popupKeyboardContent = default;
            private static bool _popupKeyboardReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#popupLayout"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int popupLayout { get { if (!_popupLayoutReady) { _popupLayoutContent = SGetField<int>(LocalBridgeClazz, "popupLayout"); _popupLayoutReady = true; } return _popupLayoutContent; } }
            private static int _popupLayoutContent = default;
            private static bool _popupLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#popupMenuStyle"/>
            /// </summary>
            public static int popupMenuStyle { get { if (!_popupMenuStyleReady) { _popupMenuStyleContent = SGetField<int>(LocalBridgeClazz, "popupMenuStyle"); _popupMenuStyleReady = true; } return _popupMenuStyleContent; } }
            private static int _popupMenuStyleContent = default;
            private static bool _popupMenuStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#popupTheme"/>
            /// </summary>
            public static int popupTheme { get { if (!_popupThemeReady) { _popupThemeContent = SGetField<int>(LocalBridgeClazz, "popupTheme"); _popupThemeReady = true; } return _popupThemeContent; } }
            private static int _popupThemeContent = default;
            private static bool _popupThemeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#popupWindowStyle"/>
            /// </summary>
            public static int popupWindowStyle { get { if (!_popupWindowStyleReady) { _popupWindowStyleContent = SGetField<int>(LocalBridgeClazz, "popupWindowStyle"); _popupWindowStyleReady = true; } return _popupWindowStyleContent; } }
            private static int _popupWindowStyleContent = default;
            private static bool _popupWindowStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#port"/>
            /// </summary>
            public static int port { get { if (!_portReady) { _portContent = SGetField<int>(LocalBridgeClazz, "port"); _portReady = true; } return _portContent; } }
            private static int _portContent = default;
            private static bool _portReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#positiveButtonText"/>
            /// </summary>
            public static int positiveButtonText { get { if (!_positiveButtonTextReady) { _positiveButtonTextContent = SGetField<int>(LocalBridgeClazz, "positiveButtonText"); _positiveButtonTextReady = true; } return _positiveButtonTextContent; } }
            private static int _positiveButtonTextContent = default;
            private static bool _positiveButtonTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#preferenceCategoryStyle"/>
            /// </summary>
            public static int preferenceCategoryStyle { get { if (!_preferenceCategoryStyleReady) { _preferenceCategoryStyleContent = SGetField<int>(LocalBridgeClazz, "preferenceCategoryStyle"); _preferenceCategoryStyleReady = true; } return _preferenceCategoryStyleContent; } }
            private static int _preferenceCategoryStyleContent = default;
            private static bool _preferenceCategoryStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#preferenceFragmentStyle"/>
            /// </summary>
            public static int preferenceFragmentStyle { get { if (!_preferenceFragmentStyleReady) { _preferenceFragmentStyleContent = SGetField<int>(LocalBridgeClazz, "preferenceFragmentStyle"); _preferenceFragmentStyleReady = true; } return _preferenceFragmentStyleContent; } }
            private static int _preferenceFragmentStyleContent = default;
            private static bool _preferenceFragmentStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#preferenceInformationStyle"/>
            /// </summary>
            public static int preferenceInformationStyle { get { if (!_preferenceInformationStyleReady) { _preferenceInformationStyleContent = SGetField<int>(LocalBridgeClazz, "preferenceInformationStyle"); _preferenceInformationStyleReady = true; } return _preferenceInformationStyleContent; } }
            private static int _preferenceInformationStyleContent = default;
            private static bool _preferenceInformationStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#preferenceLayoutChild"/>
            /// </summary>
            public static int preferenceLayoutChild { get { if (!_preferenceLayoutChildReady) { _preferenceLayoutChildContent = SGetField<int>(LocalBridgeClazz, "preferenceLayoutChild"); _preferenceLayoutChildReady = true; } return _preferenceLayoutChildContent; } }
            private static int _preferenceLayoutChildContent = default;
            private static bool _preferenceLayoutChildReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#preferenceScreenStyle"/>
            /// </summary>
            public static int preferenceScreenStyle { get { if (!_preferenceScreenStyleReady) { _preferenceScreenStyleContent = SGetField<int>(LocalBridgeClazz, "preferenceScreenStyle"); _preferenceScreenStyleReady = true; } return _preferenceScreenStyleContent; } }
            private static int _preferenceScreenStyleContent = default;
            private static bool _preferenceScreenStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#preferenceStyle"/>
            /// </summary>
            public static int preferenceStyle { get { if (!_preferenceStyleReady) { _preferenceStyleContent = SGetField<int>(LocalBridgeClazz, "preferenceStyle"); _preferenceStyleReady = true; } return _preferenceStyleContent; } }
            private static int _preferenceStyleContent = default;
            private static bool _preferenceStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#preferKeepClear"/>
            /// </summary>
            public static int preferKeepClear { get { if (!_preferKeepClearReady) { _preferKeepClearContent = SGetField<int>(LocalBridgeClazz, "preferKeepClear"); _preferKeepClearReady = true; } return _preferKeepClearContent; } }
            private static int _preferKeepClearContent = default;
            private static bool _preferKeepClearReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#preferMinimalPostProcessing"/>
            /// </summary>
            public static int preferMinimalPostProcessing { get { if (!_preferMinimalPostProcessingReady) { _preferMinimalPostProcessingContent = SGetField<int>(LocalBridgeClazz, "preferMinimalPostProcessing"); _preferMinimalPostProcessingReady = true; } return _preferMinimalPostProcessingContent; } }
            private static int _preferMinimalPostProcessingContent = default;
            private static bool _preferMinimalPostProcessingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#presentationTheme"/>
            /// </summary>
            public static int presentationTheme { get { if (!_presentationThemeReady) { _presentationThemeContent = SGetField<int>(LocalBridgeClazz, "presentationTheme"); _presentationThemeReady = true; } return _presentationThemeContent; } }
            private static int _presentationThemeContent = default;
            private static bool _presentationThemeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#preserveLegacyExternalStorage"/>
            /// </summary>
            public static int preserveLegacyExternalStorage { get { if (!_preserveLegacyExternalStorageReady) { _preserveLegacyExternalStorageContent = SGetField<int>(LocalBridgeClazz, "preserveLegacyExternalStorage"); _preserveLegacyExternalStorageReady = true; } return _preserveLegacyExternalStorageContent; } }
            private static int _preserveLegacyExternalStorageContent = default;
            private static bool _preserveLegacyExternalStorageReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#previewImage"/>
            /// </summary>
            public static int previewImage { get { if (!_previewImageReady) { _previewImageContent = SGetField<int>(LocalBridgeClazz, "previewImage"); _previewImageReady = true; } return _previewImageContent; } }
            private static int _previewImageContent = default;
            private static bool _previewImageReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#previewLayout"/>
            /// </summary>
            public static int previewLayout { get { if (!_previewLayoutReady) { _previewLayoutContent = SGetField<int>(LocalBridgeClazz, "previewLayout"); _previewLayoutReady = true; } return _previewLayoutContent; } }
            private static int _previewLayoutContent = default;
            private static bool _previewLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#primaryContentAlpha"/>
            /// </summary>
            public static int primaryContentAlpha { get { if (!_primaryContentAlphaReady) { _primaryContentAlphaContent = SGetField<int>(LocalBridgeClazz, "primaryContentAlpha"); _primaryContentAlphaReady = true; } return _primaryContentAlphaContent; } }
            private static int _primaryContentAlphaContent = default;
            private static bool _primaryContentAlphaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#priority"/>
            /// </summary>
            public static int priority { get { if (!_priorityReady) { _priorityContent = SGetField<int>(LocalBridgeClazz, "priority"); _priorityReady = true; } return _priorityContent; } }
            private static int _priorityContent = default;
            private static bool _priorityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#privateImeOptions"/>
            /// </summary>
            public static int privateImeOptions { get { if (!_privateImeOptionsReady) { _privateImeOptionsContent = SGetField<int>(LocalBridgeClazz, "privateImeOptions"); _privateImeOptionsReady = true; } return _privateImeOptionsContent; } }
            private static int _privateImeOptionsContent = default;
            private static bool _privateImeOptionsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#process"/>
            /// </summary>
            public static int process { get { if (!_processReady) { _processContent = SGetField<int>(LocalBridgeClazz, "process"); _processReady = true; } return _processContent; } }
            private static int _processContent = default;
            private static bool _processReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#progress"/>
            /// </summary>
            public static int progress { get { if (!_progressReady) { _progressContent = SGetField<int>(LocalBridgeClazz, "progress"); _progressReady = true; } return _progressContent; } }
            private static int _progressContent = default;
            private static bool _progressReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#progressBackgroundTint"/>
            /// </summary>
            public static int progressBackgroundTint { get { if (!_progressBackgroundTintReady) { _progressBackgroundTintContent = SGetField<int>(LocalBridgeClazz, "progressBackgroundTint"); _progressBackgroundTintReady = true; } return _progressBackgroundTintContent; } }
            private static int _progressBackgroundTintContent = default;
            private static bool _progressBackgroundTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#progressBackgroundTintMode"/>
            /// </summary>
            public static int progressBackgroundTintMode { get { if (!_progressBackgroundTintModeReady) { _progressBackgroundTintModeContent = SGetField<int>(LocalBridgeClazz, "progressBackgroundTintMode"); _progressBackgroundTintModeReady = true; } return _progressBackgroundTintModeContent; } }
            private static int _progressBackgroundTintModeContent = default;
            private static bool _progressBackgroundTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#progressBarPadding"/>
            /// </summary>
            public static int progressBarPadding { get { if (!_progressBarPaddingReady) { _progressBarPaddingContent = SGetField<int>(LocalBridgeClazz, "progressBarPadding"); _progressBarPaddingReady = true; } return _progressBarPaddingContent; } }
            private static int _progressBarPaddingContent = default;
            private static bool _progressBarPaddingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#progressBarStyle"/>
            /// </summary>
            public static int progressBarStyle { get { if (!_progressBarStyleReady) { _progressBarStyleContent = SGetField<int>(LocalBridgeClazz, "progressBarStyle"); _progressBarStyleReady = true; } return _progressBarStyleContent; } }
            private static int _progressBarStyleContent = default;
            private static bool _progressBarStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#progressBarStyleHorizontal"/>
            /// </summary>
            public static int progressBarStyleHorizontal { get { if (!_progressBarStyleHorizontalReady) { _progressBarStyleHorizontalContent = SGetField<int>(LocalBridgeClazz, "progressBarStyleHorizontal"); _progressBarStyleHorizontalReady = true; } return _progressBarStyleHorizontalContent; } }
            private static int _progressBarStyleHorizontalContent = default;
            private static bool _progressBarStyleHorizontalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#progressBarStyleInverse"/>
            /// </summary>
            public static int progressBarStyleInverse { get { if (!_progressBarStyleInverseReady) { _progressBarStyleInverseContent = SGetField<int>(LocalBridgeClazz, "progressBarStyleInverse"); _progressBarStyleInverseReady = true; } return _progressBarStyleInverseContent; } }
            private static int _progressBarStyleInverseContent = default;
            private static bool _progressBarStyleInverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#progressBarStyleLarge"/>
            /// </summary>
            public static int progressBarStyleLarge { get { if (!_progressBarStyleLargeReady) { _progressBarStyleLargeContent = SGetField<int>(LocalBridgeClazz, "progressBarStyleLarge"); _progressBarStyleLargeReady = true; } return _progressBarStyleLargeContent; } }
            private static int _progressBarStyleLargeContent = default;
            private static bool _progressBarStyleLargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#progressBarStyleLargeInverse"/>
            /// </summary>
            public static int progressBarStyleLargeInverse { get { if (!_progressBarStyleLargeInverseReady) { _progressBarStyleLargeInverseContent = SGetField<int>(LocalBridgeClazz, "progressBarStyleLargeInverse"); _progressBarStyleLargeInverseReady = true; } return _progressBarStyleLargeInverseContent; } }
            private static int _progressBarStyleLargeInverseContent = default;
            private static bool _progressBarStyleLargeInverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#progressBarStyleSmall"/>
            /// </summary>
            public static int progressBarStyleSmall { get { if (!_progressBarStyleSmallReady) { _progressBarStyleSmallContent = SGetField<int>(LocalBridgeClazz, "progressBarStyleSmall"); _progressBarStyleSmallReady = true; } return _progressBarStyleSmallContent; } }
            private static int _progressBarStyleSmallContent = default;
            private static bool _progressBarStyleSmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#progressBarStyleSmallInverse"/>
            /// </summary>
            public static int progressBarStyleSmallInverse { get { if (!_progressBarStyleSmallInverseReady) { _progressBarStyleSmallInverseContent = SGetField<int>(LocalBridgeClazz, "progressBarStyleSmallInverse"); _progressBarStyleSmallInverseReady = true; } return _progressBarStyleSmallInverseContent; } }
            private static int _progressBarStyleSmallInverseContent = default;
            private static bool _progressBarStyleSmallInverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#progressBarStyleSmallTitle"/>
            /// </summary>
            public static int progressBarStyleSmallTitle { get { if (!_progressBarStyleSmallTitleReady) { _progressBarStyleSmallTitleContent = SGetField<int>(LocalBridgeClazz, "progressBarStyleSmallTitle"); _progressBarStyleSmallTitleReady = true; } return _progressBarStyleSmallTitleContent; } }
            private static int _progressBarStyleSmallTitleContent = default;
            private static bool _progressBarStyleSmallTitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#progressDrawable"/>
            /// </summary>
            public static int progressDrawable { get { if (!_progressDrawableReady) { _progressDrawableContent = SGetField<int>(LocalBridgeClazz, "progressDrawable"); _progressDrawableReady = true; } return _progressDrawableContent; } }
            private static int _progressDrawableContent = default;
            private static bool _progressDrawableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#progressTint"/>
            /// </summary>
            public static int progressTint { get { if (!_progressTintReady) { _progressTintContent = SGetField<int>(LocalBridgeClazz, "progressTint"); _progressTintReady = true; } return _progressTintContent; } }
            private static int _progressTintContent = default;
            private static bool _progressTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#progressTintMode"/>
            /// </summary>
            public static int progressTintMode { get { if (!_progressTintModeReady) { _progressTintModeContent = SGetField<int>(LocalBridgeClazz, "progressTintMode"); _progressTintModeReady = true; } return _progressTintModeContent; } }
            private static int _progressTintModeContent = default;
            private static bool _progressTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#prompt"/>
            /// </summary>
            public static int prompt { get { if (!_promptReady) { _promptContent = SGetField<int>(LocalBridgeClazz, "prompt"); _promptReady = true; } return _promptContent; } }
            private static int _promptContent = default;
            private static bool _promptReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#propertyName"/>
            /// </summary>
            public static int propertyName { get { if (!_propertyNameReady) { _propertyNameContent = SGetField<int>(LocalBridgeClazz, "propertyName"); _propertyNameReady = true; } return _propertyNameContent; } }
            private static int _propertyNameContent = default;
            private static bool _propertyNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#propertyXName"/>
            /// </summary>
            public static int propertyXName { get { if (!_propertyXNameReady) { _propertyXNameContent = SGetField<int>(LocalBridgeClazz, "propertyXName"); _propertyXNameReady = true; } return _propertyXNameContent; } }
            private static int _propertyXNameContent = default;
            private static bool _propertyXNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#propertyYName"/>
            /// </summary>
            public static int propertyYName { get { if (!_propertyYNameReady) { _propertyYNameContent = SGetField<int>(LocalBridgeClazz, "propertyYName"); _propertyYNameReady = true; } return _propertyYNameContent; } }
            private static int _propertyYNameContent = default;
            private static bool _propertyYNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#protectionLevel"/>
            /// </summary>
            public static int protectionLevel { get { if (!_protectionLevelReady) { _protectionLevelContent = SGetField<int>(LocalBridgeClazz, "protectionLevel"); _protectionLevelReady = true; } return _protectionLevelContent; } }
            private static int _protectionLevelContent = default;
            private static bool _protectionLevelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#publicKey"/>
            /// </summary>
            public static int publicKey { get { if (!_publicKeyReady) { _publicKeyContent = SGetField<int>(LocalBridgeClazz, "publicKey"); _publicKeyReady = true; } return _publicKeyContent; } }
            private static int _publicKeyContent = default;
            private static bool _publicKeyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#query"/>
            /// </summary>
            public static int query { get { if (!_queryReady) { _queryContent = SGetField<int>(LocalBridgeClazz, "query"); _queryReady = true; } return _queryContent; } }
            private static int _queryContent = default;
            private static bool _queryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#queryActionMsg"/>
            /// </summary>
            public static int queryActionMsg { get { if (!_queryActionMsgReady) { _queryActionMsgContent = SGetField<int>(LocalBridgeClazz, "queryActionMsg"); _queryActionMsgReady = true; } return _queryActionMsgContent; } }
            private static int _queryActionMsgContent = default;
            private static bool _queryActionMsgReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#queryAdvancedPattern"/>
            /// </summary>
            public static int queryAdvancedPattern { get { if (!_queryAdvancedPatternReady) { _queryAdvancedPatternContent = SGetField<int>(LocalBridgeClazz, "queryAdvancedPattern"); _queryAdvancedPatternReady = true; } return _queryAdvancedPatternContent; } }
            private static int _queryAdvancedPatternContent = default;
            private static bool _queryAdvancedPatternReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#queryAfterZeroResults"/>
            /// </summary>
            public static int queryAfterZeroResults { get { if (!_queryAfterZeroResultsReady) { _queryAfterZeroResultsContent = SGetField<int>(LocalBridgeClazz, "queryAfterZeroResults"); _queryAfterZeroResultsReady = true; } return _queryAfterZeroResultsContent; } }
            private static int _queryAfterZeroResultsContent = default;
            private static bool _queryAfterZeroResultsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#queryBackground"/>
            /// </summary>
            public static int queryBackground { get { if (!_queryBackgroundReady) { _queryBackgroundContent = SGetField<int>(LocalBridgeClazz, "queryBackground"); _queryBackgroundReady = true; } return _queryBackgroundContent; } }
            private static int _queryBackgroundContent = default;
            private static bool _queryBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#queryHint"/>
            /// </summary>
            public static int queryHint { get { if (!_queryHintReady) { _queryHintContent = SGetField<int>(LocalBridgeClazz, "queryHint"); _queryHintReady = true; } return _queryHintContent; } }
            private static int _queryHintContent = default;
            private static bool _queryHintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#queryPattern"/>
            /// </summary>
            public static int queryPattern { get { if (!_queryPatternReady) { _queryPatternContent = SGetField<int>(LocalBridgeClazz, "queryPattern"); _queryPatternReady = true; } return _queryPatternContent; } }
            private static int _queryPatternContent = default;
            private static bool _queryPatternReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#queryPrefix"/>
            /// </summary>
            public static int queryPrefix { get { if (!_queryPrefixReady) { _queryPrefixContent = SGetField<int>(LocalBridgeClazz, "queryPrefix"); _queryPrefixReady = true; } return _queryPrefixContent; } }
            private static int _queryPrefixContent = default;
            private static bool _queryPrefixReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#querySuffix"/>
            /// </summary>
            public static int querySuffix { get { if (!_querySuffixReady) { _querySuffixContent = SGetField<int>(LocalBridgeClazz, "querySuffix"); _querySuffixReady = true; } return _querySuffixContent; } }
            private static int _querySuffixContent = default;
            private static bool _querySuffixReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#quickContactBadgeStyleSmallWindowLarge"/>
            /// </summary>
            public static int quickContactBadgeStyleSmallWindowLarge { get { if (!_quickContactBadgeStyleSmallWindowLargeReady) { _quickContactBadgeStyleSmallWindowLargeContent = SGetField<int>(LocalBridgeClazz, "quickContactBadgeStyleSmallWindowLarge"); _quickContactBadgeStyleSmallWindowLargeReady = true; } return _quickContactBadgeStyleSmallWindowLargeContent; } }
            private static int _quickContactBadgeStyleSmallWindowLargeContent = default;
            private static bool _quickContactBadgeStyleSmallWindowLargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#quickContactBadgeStyleSmallWindowMedium"/>
            /// </summary>
            public static int quickContactBadgeStyleSmallWindowMedium { get { if (!_quickContactBadgeStyleSmallWindowMediumReady) { _quickContactBadgeStyleSmallWindowMediumContent = SGetField<int>(LocalBridgeClazz, "quickContactBadgeStyleSmallWindowMedium"); _quickContactBadgeStyleSmallWindowMediumReady = true; } return _quickContactBadgeStyleSmallWindowMediumContent; } }
            private static int _quickContactBadgeStyleSmallWindowMediumContent = default;
            private static bool _quickContactBadgeStyleSmallWindowMediumReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#quickContactBadgeStyleSmallWindowSmall"/>
            /// </summary>
            public static int quickContactBadgeStyleSmallWindowSmall { get { if (!_quickContactBadgeStyleSmallWindowSmallReady) { _quickContactBadgeStyleSmallWindowSmallContent = SGetField<int>(LocalBridgeClazz, "quickContactBadgeStyleSmallWindowSmall"); _quickContactBadgeStyleSmallWindowSmallReady = true; } return _quickContactBadgeStyleSmallWindowSmallContent; } }
            private static int _quickContactBadgeStyleSmallWindowSmallContent = default;
            private static bool _quickContactBadgeStyleSmallWindowSmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#quickContactBadgeStyleWindowLarge"/>
            /// </summary>
            public static int quickContactBadgeStyleWindowLarge { get { if (!_quickContactBadgeStyleWindowLargeReady) { _quickContactBadgeStyleWindowLargeContent = SGetField<int>(LocalBridgeClazz, "quickContactBadgeStyleWindowLarge"); _quickContactBadgeStyleWindowLargeReady = true; } return _quickContactBadgeStyleWindowLargeContent; } }
            private static int _quickContactBadgeStyleWindowLargeContent = default;
            private static bool _quickContactBadgeStyleWindowLargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#quickContactBadgeStyleWindowMedium"/>
            /// </summary>
            public static int quickContactBadgeStyleWindowMedium { get { if (!_quickContactBadgeStyleWindowMediumReady) { _quickContactBadgeStyleWindowMediumContent = SGetField<int>(LocalBridgeClazz, "quickContactBadgeStyleWindowMedium"); _quickContactBadgeStyleWindowMediumReady = true; } return _quickContactBadgeStyleWindowMediumContent; } }
            private static int _quickContactBadgeStyleWindowMediumContent = default;
            private static bool _quickContactBadgeStyleWindowMediumReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#quickContactBadgeStyleWindowSmall"/>
            /// </summary>
            public static int quickContactBadgeStyleWindowSmall { get { if (!_quickContactBadgeStyleWindowSmallReady) { _quickContactBadgeStyleWindowSmallContent = SGetField<int>(LocalBridgeClazz, "quickContactBadgeStyleWindowSmall"); _quickContactBadgeStyleWindowSmallReady = true; } return _quickContactBadgeStyleWindowSmallContent; } }
            private static int _quickContactBadgeStyleWindowSmallContent = default;
            private static bool _quickContactBadgeStyleWindowSmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#radioButtonStyle"/>
            /// </summary>
            public static int radioButtonStyle { get { if (!_radioButtonStyleReady) { _radioButtonStyleContent = SGetField<int>(LocalBridgeClazz, "radioButtonStyle"); _radioButtonStyleReady = true; } return _radioButtonStyleContent; } }
            private static int _radioButtonStyleContent = default;
            private static bool _radioButtonStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#radius"/>
            /// </summary>
            public static int radius { get { if (!_radiusReady) { _radiusContent = SGetField<int>(LocalBridgeClazz, "radius"); _radiusReady = true; } return _radiusContent; } }
            private static int _radiusContent = default;
            private static bool _radiusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#rating"/>
            /// </summary>
            public static int rating { get { if (!_ratingReady) { _ratingContent = SGetField<int>(LocalBridgeClazz, "rating"); _ratingReady = true; } return _ratingContent; } }
            private static int _ratingContent = default;
            private static bool _ratingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#ratingBarStyle"/>
            /// </summary>
            public static int ratingBarStyle { get { if (!_ratingBarStyleReady) { _ratingBarStyleContent = SGetField<int>(LocalBridgeClazz, "ratingBarStyle"); _ratingBarStyleReady = true; } return _ratingBarStyleContent; } }
            private static int _ratingBarStyleContent = default;
            private static bool _ratingBarStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#ratingBarStyleIndicator"/>
            /// </summary>
            public static int ratingBarStyleIndicator { get { if (!_ratingBarStyleIndicatorReady) { _ratingBarStyleIndicatorContent = SGetField<int>(LocalBridgeClazz, "ratingBarStyleIndicator"); _ratingBarStyleIndicatorReady = true; } return _ratingBarStyleIndicatorContent; } }
            private static int _ratingBarStyleIndicatorContent = default;
            private static bool _ratingBarStyleIndicatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#ratingBarStyleSmall"/>
            /// </summary>
            public static int ratingBarStyleSmall { get { if (!_ratingBarStyleSmallReady) { _ratingBarStyleSmallContent = SGetField<int>(LocalBridgeClazz, "ratingBarStyleSmall"); _ratingBarStyleSmallReady = true; } return _ratingBarStyleSmallContent; } }
            private static int _ratingBarStyleSmallContent = default;
            private static bool _ratingBarStyleSmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#readPermission"/>
            /// </summary>
            public static int readPermission { get { if (!_readPermissionReady) { _readPermissionContent = SGetField<int>(LocalBridgeClazz, "readPermission"); _readPermissionReady = true; } return _readPermissionContent; } }
            private static int _readPermissionContent = default;
            private static bool _readPermissionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#recognitionService"/>
            /// </summary>
            public static int recognitionService { get { if (!_recognitionServiceReady) { _recognitionServiceContent = SGetField<int>(LocalBridgeClazz, "recognitionService"); _recognitionServiceReady = true; } return _recognitionServiceContent; } }
            private static int _recognitionServiceContent = default;
            private static bool _recognitionServiceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#recreateOnConfigChanges"/>
            /// </summary>
            public static int recreateOnConfigChanges { get { if (!_recreateOnConfigChangesReady) { _recreateOnConfigChangesContent = SGetField<int>(LocalBridgeClazz, "recreateOnConfigChanges"); _recreateOnConfigChangesReady = true; } return _recreateOnConfigChangesContent; } }
            private static int _recreateOnConfigChangesContent = default;
            private static bool _recreateOnConfigChangesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#recycleEnabled"/>
            /// </summary>
            public static int recycleEnabled { get { if (!_recycleEnabledReady) { _recycleEnabledContent = SGetField<int>(LocalBridgeClazz, "recycleEnabled"); _recycleEnabledReady = true; } return _recycleEnabledContent; } }
            private static int _recycleEnabledContent = default;
            private static bool _recycleEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#relinquishTaskIdentity"/>
            /// </summary>
            public static int relinquishTaskIdentity { get { if (!_relinquishTaskIdentityReady) { _relinquishTaskIdentityContent = SGetField<int>(LocalBridgeClazz, "relinquishTaskIdentity"); _relinquishTaskIdentityReady = true; } return _relinquishTaskIdentityContent; } }
            private static int _relinquishTaskIdentityContent = default;
            private static bool _relinquishTaskIdentityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#reparent"/>
            /// </summary>
            public static int reparent { get { if (!_reparentReady) { _reparentContent = SGetField<int>(LocalBridgeClazz, "reparent"); _reparentReady = true; } return _reparentContent; } }
            private static int _reparentContent = default;
            private static bool _reparentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#reparentWithOverlay"/>
            /// </summary>
            public static int reparentWithOverlay { get { if (!_reparentWithOverlayReady) { _reparentWithOverlayContent = SGetField<int>(LocalBridgeClazz, "reparentWithOverlay"); _reparentWithOverlayReady = true; } return _reparentWithOverlayContent; } }
            private static int _reparentWithOverlayContent = default;
            private static bool _reparentWithOverlayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#repeatCount"/>
            /// </summary>
            public static int repeatCount { get { if (!_repeatCountReady) { _repeatCountContent = SGetField<int>(LocalBridgeClazz, "repeatCount"); _repeatCountReady = true; } return _repeatCountContent; } }
            private static int _repeatCountContent = default;
            private static bool _repeatCountReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#repeatMode"/>
            /// </summary>
            public static int repeatMode { get { if (!_repeatModeReady) { _repeatModeContent = SGetField<int>(LocalBridgeClazz, "repeatMode"); _repeatModeReady = true; } return _repeatModeContent; } }
            private static int _repeatModeContent = default;
            private static bool _repeatModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#reqFiveWayNav"/>
            /// </summary>
            public static int reqFiveWayNav { get { if (!_reqFiveWayNavReady) { _reqFiveWayNavContent = SGetField<int>(LocalBridgeClazz, "reqFiveWayNav"); _reqFiveWayNavReady = true; } return _reqFiveWayNavContent; } }
            private static int _reqFiveWayNavContent = default;
            private static bool _reqFiveWayNavReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#reqHardKeyboard"/>
            /// </summary>
            public static int reqHardKeyboard { get { if (!_reqHardKeyboardReady) { _reqHardKeyboardContent = SGetField<int>(LocalBridgeClazz, "reqHardKeyboard"); _reqHardKeyboardReady = true; } return _reqHardKeyboardContent; } }
            private static int _reqHardKeyboardContent = default;
            private static bool _reqHardKeyboardReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#reqKeyboardType"/>
            /// </summary>
            public static int reqKeyboardType { get { if (!_reqKeyboardTypeReady) { _reqKeyboardTypeContent = SGetField<int>(LocalBridgeClazz, "reqKeyboardType"); _reqKeyboardTypeReady = true; } return _reqKeyboardTypeContent; } }
            private static int _reqKeyboardTypeContent = default;
            private static bool _reqKeyboardTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#reqNavigation"/>
            /// </summary>
            public static int reqNavigation { get { if (!_reqNavigationReady) { _reqNavigationContent = SGetField<int>(LocalBridgeClazz, "reqNavigation"); _reqNavigationReady = true; } return _reqNavigationContent; } }
            private static int _reqNavigationContent = default;
            private static bool _reqNavigationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#reqTouchScreen"/>
            /// </summary>
            public static int reqTouchScreen { get { if (!_reqTouchScreenReady) { _reqTouchScreenContent = SGetField<int>(LocalBridgeClazz, "reqTouchScreen"); _reqTouchScreenReady = true; } return _reqTouchScreenContent; } }
            private static int _reqTouchScreenContent = default;
            private static bool _reqTouchScreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#requestLegacyExternalStorage"/>
            /// </summary>
            public static int requestLegacyExternalStorage { get { if (!_requestLegacyExternalStorageReady) { _requestLegacyExternalStorageContent = SGetField<int>(LocalBridgeClazz, "requestLegacyExternalStorage"); _requestLegacyExternalStorageReady = true; } return _requestLegacyExternalStorageContent; } }
            private static int _requestLegacyExternalStorageContent = default;
            private static bool _requestLegacyExternalStorageReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#requestRawExternalStorageAccess"/>
            /// </summary>
            public static int requestRawExternalStorageAccess { get { if (!_requestRawExternalStorageAccessReady) { _requestRawExternalStorageAccessContent = SGetField<int>(LocalBridgeClazz, "requestRawExternalStorageAccess"); _requestRawExternalStorageAccessReady = true; } return _requestRawExternalStorageAccessContent; } }
            private static int _requestRawExternalStorageAccessContent = default;
            private static bool _requestRawExternalStorageAccessReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#requireContentUriPermissionFromCaller"/>
            /// </summary>
            public static int requireContentUriPermissionFromCaller { get { if (!_requireContentUriPermissionFromCallerReady) { _requireContentUriPermissionFromCallerContent = SGetField<int>(LocalBridgeClazz, "requireContentUriPermissionFromCaller"); _requireContentUriPermissionFromCallerReady = true; } return _requireContentUriPermissionFromCallerContent; } }
            private static int _requireContentUriPermissionFromCallerContent = default;
            private static bool _requireContentUriPermissionFromCallerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#required"/>
            /// </summary>
            public static int required { get { if (!_requiredReady) { _requiredContent = SGetField<int>(LocalBridgeClazz, "required"); _requiredReady = true; } return _requiredContent; } }
            private static int _requiredContent = default;
            private static bool _requiredReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#requiredAccountType"/>
            /// </summary>
            public static int requiredAccountType { get { if (!_requiredAccountTypeReady) { _requiredAccountTypeContent = SGetField<int>(LocalBridgeClazz, "requiredAccountType"); _requiredAccountTypeReady = true; } return _requiredAccountTypeContent; } }
            private static int _requiredAccountTypeContent = default;
            private static bool _requiredAccountTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#requiredDisplayCategory"/>
            /// </summary>
            public static int requiredDisplayCategory { get { if (!_requiredDisplayCategoryReady) { _requiredDisplayCategoryContent = SGetField<int>(LocalBridgeClazz, "requiredDisplayCategory"); _requiredDisplayCategoryReady = true; } return _requiredDisplayCategoryContent; } }
            private static int _requiredDisplayCategoryContent = default;
            private static bool _requiredDisplayCategoryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#requireDeviceScreenOn"/>
            /// </summary>
            public static int requireDeviceScreenOn { get { if (!_requireDeviceScreenOnReady) { _requireDeviceScreenOnContent = SGetField<int>(LocalBridgeClazz, "requireDeviceScreenOn"); _requireDeviceScreenOnReady = true; } return _requireDeviceScreenOnContent; } }
            private static int _requireDeviceScreenOnContent = default;
            private static bool _requireDeviceScreenOnReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#requireDeviceUnlock"/>
            /// </summary>
            public static int requireDeviceUnlock { get { if (!_requireDeviceUnlockReady) { _requireDeviceUnlockContent = SGetField<int>(LocalBridgeClazz, "requireDeviceUnlock"); _requireDeviceUnlockReady = true; } return _requireDeviceUnlockContent; } }
            private static int _requireDeviceUnlockContent = default;
            private static bool _requireDeviceUnlockReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#requiredFeature"/>
            /// </summary>
            public static int requiredFeature { get { if (!_requiredFeatureReady) { _requiredFeatureContent = SGetField<int>(LocalBridgeClazz, "requiredFeature"); _requiredFeatureReady = true; } return _requiredFeatureContent; } }
            private static int _requiredFeatureContent = default;
            private static bool _requiredFeatureReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#requiredForAllUsers"/>
            /// </summary>
            public static int requiredForAllUsers { get { if (!_requiredForAllUsersReady) { _requiredForAllUsersContent = SGetField<int>(LocalBridgeClazz, "requiredForAllUsers"); _requiredForAllUsersReady = true; } return _requiredForAllUsersContent; } }
            private static int _requiredForAllUsersContent = default;
            private static bool _requiredForAllUsersReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#requiredNotFeature"/>
            /// </summary>
            public static int requiredNotFeature { get { if (!_requiredNotFeatureReady) { _requiredNotFeatureContent = SGetField<int>(LocalBridgeClazz, "requiredNotFeature"); _requiredNotFeatureReady = true; } return _requiredNotFeatureContent; } }
            private static int _requiredNotFeatureContent = default;
            private static bool _requiredNotFeatureReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#requiredSplitTypes"/>
            /// </summary>
            public static int requiredSplitTypes { get { if (!_requiredSplitTypesReady) { _requiredSplitTypesContent = SGetField<int>(LocalBridgeClazz, "requiredSplitTypes"); _requiredSplitTypesReady = true; } return _requiredSplitTypesContent; } }
            private static int _requiredSplitTypesContent = default;
            private static bool _requiredSplitTypesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#requiresFadingEdge"/>
            /// </summary>
            public static int requiresFadingEdge { get { if (!_requiresFadingEdgeReady) { _requiresFadingEdgeContent = SGetField<int>(LocalBridgeClazz, "requiresFadingEdge"); _requiresFadingEdgeReady = true; } return _requiresFadingEdgeContent; } }
            private static int _requiresFadingEdgeContent = default;
            private static bool _requiresFadingEdgeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#requiresSmallestWidthDp"/>
            /// </summary>
            public static int requiresSmallestWidthDp { get { if (!_requiresSmallestWidthDpReady) { _requiresSmallestWidthDpContent = SGetField<int>(LocalBridgeClazz, "requiresSmallestWidthDp"); _requiresSmallestWidthDpReady = true; } return _requiresSmallestWidthDpContent; } }
            private static int _requiresSmallestWidthDpContent = default;
            private static bool _requiresSmallestWidthDpReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#resetEnabledSettingsOnAppDataCleared"/>
            /// </summary>
            public static int resetEnabledSettingsOnAppDataCleared { get { if (!_resetEnabledSettingsOnAppDataClearedReady) { _resetEnabledSettingsOnAppDataClearedContent = SGetField<int>(LocalBridgeClazz, "resetEnabledSettingsOnAppDataCleared"); _resetEnabledSettingsOnAppDataClearedReady = true; } return _resetEnabledSettingsOnAppDataClearedContent; } }
            private static int _resetEnabledSettingsOnAppDataClearedContent = default;
            private static bool _resetEnabledSettingsOnAppDataClearedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#resizeable"/>
            /// </summary>
            public static int resizeable { get { if (!_resizeableReady) { _resizeableContent = SGetField<int>(LocalBridgeClazz, "resizeable"); _resizeableReady = true; } return _resizeableContent; } }
            private static int _resizeableContent = default;
            private static bool _resizeableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#resizeableActivity"/>
            /// </summary>
            public static int resizeableActivity { get { if (!_resizeableActivityReady) { _resizeableActivityContent = SGetField<int>(LocalBridgeClazz, "resizeableActivity"); _resizeableActivityReady = true; } return _resizeableActivityContent; } }
            private static int _resizeableActivityContent = default;
            private static bool _resizeableActivityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#resizeClip"/>
            /// </summary>
            public static int resizeClip { get { if (!_resizeClipReady) { _resizeClipContent = SGetField<int>(LocalBridgeClazz, "resizeClip"); _resizeClipReady = true; } return _resizeClipContent; } }
            private static int _resizeClipContent = default;
            private static bool _resizeClipReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#resizeMode"/>
            /// </summary>
            public static int resizeMode { get { if (!_resizeModeReady) { _resizeModeContent = SGetField<int>(LocalBridgeClazz, "resizeMode"); _resizeModeReady = true; } return _resizeModeContent; } }
            private static int _resizeModeContent = default;
            private static bool _resizeModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#resource"/>
            /// </summary>
            public static int resource { get { if (!_resourceReady) { _resourceContent = SGetField<int>(LocalBridgeClazz, "resource"); _resourceReady = true; } return _resourceContent; } }
            private static int _resourceContent = default;
            private static bool _resourceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#resourcesMap"/>
            /// </summary>
            public static int resourcesMap { get { if (!_resourcesMapReady) { _resourcesMapContent = SGetField<int>(LocalBridgeClazz, "resourcesMap"); _resourcesMapReady = true; } return _resourcesMapContent; } }
            private static int _resourcesMapContent = default;
            private static bool _resourcesMapReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#restoreAnyVersion"/>
            /// </summary>
            public static int restoreAnyVersion { get { if (!_restoreAnyVersionReady) { _restoreAnyVersionContent = SGetField<int>(LocalBridgeClazz, "restoreAnyVersion"); _restoreAnyVersionReady = true; } return _restoreAnyVersionContent; } }
            private static int _restoreAnyVersionContent = default;
            private static bool _restoreAnyVersionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#restoreNeedsApplication"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int restoreNeedsApplication { get { if (!_restoreNeedsApplicationReady) { _restoreNeedsApplicationContent = SGetField<int>(LocalBridgeClazz, "restoreNeedsApplication"); _restoreNeedsApplicationReady = true; } return _restoreNeedsApplicationContent; } }
            private static int _restoreNeedsApplicationContent = default;
            private static bool _restoreNeedsApplicationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#restrictedAccountType"/>
            /// </summary>
            public static int restrictedAccountType { get { if (!_restrictedAccountTypeReady) { _restrictedAccountTypeContent = SGetField<int>(LocalBridgeClazz, "restrictedAccountType"); _restrictedAccountTypeReady = true; } return _restrictedAccountTypeContent; } }
            private static int _restrictedAccountTypeContent = default;
            private static bool _restrictedAccountTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#restrictionType"/>
            /// </summary>
            public static int restrictionType { get { if (!_restrictionTypeReady) { _restrictionTypeContent = SGetField<int>(LocalBridgeClazz, "restrictionType"); _restrictionTypeReady = true; } return _restrictionTypeContent; } }
            private static int _restrictionTypeContent = default;
            private static bool _restrictionTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#resumeWhilePausing"/>
            /// </summary>
            public static int resumeWhilePausing { get { if (!_resumeWhilePausingReady) { _resumeWhilePausingContent = SGetField<int>(LocalBridgeClazz, "resumeWhilePausing"); _resumeWhilePausingReady = true; } return _resumeWhilePausingContent; } }
            private static int _resumeWhilePausingContent = default;
            private static bool _resumeWhilePausingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#reversible"/>
            /// </summary>
            public static int reversible { get { if (!_reversibleReady) { _reversibleContent = SGetField<int>(LocalBridgeClazz, "reversible"); _reversibleReady = true; } return _reversibleContent; } }
            private static int _reversibleContent = default;
            private static bool _reversibleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#revisionCode"/>
            /// </summary>
            public static int revisionCode { get { if (!_revisionCodeReady) { _revisionCodeContent = SGetField<int>(LocalBridgeClazz, "revisionCode"); _revisionCodeReady = true; } return _revisionCodeContent; } }
            private static int _revisionCodeContent = default;
            private static bool _revisionCodeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#right"/>
            /// </summary>
            public static int right { get { if (!_rightReady) { _rightContent = SGetField<int>(LocalBridgeClazz, "right"); _rightReady = true; } return _rightContent; } }
            private static int _rightContent = default;
            private static bool _rightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#ringtonePreferenceStyle"/>
            /// </summary>
            public static int ringtonePreferenceStyle { get { if (!_ringtonePreferenceStyleReady) { _ringtonePreferenceStyleContent = SGetField<int>(LocalBridgeClazz, "ringtonePreferenceStyle"); _ringtonePreferenceStyleReady = true; } return _ringtonePreferenceStyleContent; } }
            private static int _ringtonePreferenceStyleContent = default;
            private static bool _ringtonePreferenceStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#ringtoneType"/>
            /// </summary>
            public static int ringtoneType { get { if (!_ringtoneTypeReady) { _ringtoneTypeContent = SGetField<int>(LocalBridgeClazz, "ringtoneType"); _ringtoneTypeReady = true; } return _ringtoneTypeContent; } }
            private static int _ringtoneTypeContent = default;
            private static bool _ringtoneTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#rollbackDataPolicy"/>
            /// </summary>
            public static int rollbackDataPolicy { get { if (!_rollbackDataPolicyReady) { _rollbackDataPolicyContent = SGetField<int>(LocalBridgeClazz, "rollbackDataPolicy"); _rollbackDataPolicyReady = true; } return _rollbackDataPolicyContent; } }
            private static int _rollbackDataPolicyContent = default;
            private static bool _rollbackDataPolicyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#rotation"/>
            /// </summary>
            public static int rotation { get { if (!_rotationReady) { _rotationContent = SGetField<int>(LocalBridgeClazz, "rotation"); _rotationReady = true; } return _rotationContent; } }
            private static int _rotationContent = default;
            private static bool _rotationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#rotationAnimation"/>
            /// </summary>
            public static int rotationAnimation { get { if (!_rotationAnimationReady) { _rotationAnimationContent = SGetField<int>(LocalBridgeClazz, "rotationAnimation"); _rotationAnimationReady = true; } return _rotationAnimationContent; } }
            private static int _rotationAnimationContent = default;
            private static bool _rotationAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#rotationX"/>
            /// </summary>
            public static int rotationX { get { if (!_rotationXReady) { _rotationXContent = SGetField<int>(LocalBridgeClazz, "rotationX"); _rotationXReady = true; } return _rotationXContent; } }
            private static int _rotationXContent = default;
            private static bool _rotationXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#rotationY"/>
            /// </summary>
            public static int rotationY { get { if (!_rotationYReady) { _rotationYContent = SGetField<int>(LocalBridgeClazz, "rotationY"); _rotationYReady = true; } return _rotationYContent; } }
            private static int _rotationYContent = default;
            private static bool _rotationYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#roundIcon"/>
            /// </summary>
            public static int roundIcon { get { if (!_roundIconReady) { _roundIconContent = SGetField<int>(LocalBridgeClazz, "roundIcon"); _roundIconReady = true; } return _roundIconContent; } }
            private static int _roundIconContent = default;
            private static bool _roundIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#rowCount"/>
            /// </summary>
            public static int rowCount { get { if (!_rowCountReady) { _rowCountContent = SGetField<int>(LocalBridgeClazz, "rowCount"); _rowCountReady = true; } return _rowCountContent; } }
            private static int _rowCountContent = default;
            private static bool _rowCountReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#rowDelay"/>
            /// </summary>
            public static int rowDelay { get { if (!_rowDelayReady) { _rowDelayContent = SGetField<int>(LocalBridgeClazz, "rowDelay"); _rowDelayReady = true; } return _rowDelayContent; } }
            private static int _rowDelayContent = default;
            private static bool _rowDelayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#rowEdgeFlags"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int rowEdgeFlags { get { if (!_rowEdgeFlagsReady) { _rowEdgeFlagsContent = SGetField<int>(LocalBridgeClazz, "rowEdgeFlags"); _rowEdgeFlagsReady = true; } return _rowEdgeFlagsContent; } }
            private static int _rowEdgeFlagsContent = default;
            private static bool _rowEdgeFlagsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#rowHeight"/>
            /// </summary>
            public static int rowHeight { get { if (!_rowHeightReady) { _rowHeightContent = SGetField<int>(LocalBridgeClazz, "rowHeight"); _rowHeightReady = true; } return _rowHeightContent; } }
            private static int _rowHeightContent = default;
            private static bool _rowHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#rowOrderPreserved"/>
            /// </summary>
            public static int rowOrderPreserved { get { if (!_rowOrderPreservedReady) { _rowOrderPreservedContent = SGetField<int>(LocalBridgeClazz, "rowOrderPreserved"); _rowOrderPreservedReady = true; } return _rowOrderPreservedContent; } }
            private static int _rowOrderPreservedContent = default;
            private static bool _rowOrderPreservedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#saveEnabled"/>
            /// </summary>
            public static int saveEnabled { get { if (!_saveEnabledReady) { _saveEnabledContent = SGetField<int>(LocalBridgeClazz, "saveEnabled"); _saveEnabledReady = true; } return _saveEnabledContent; } }
            private static int _saveEnabledContent = default;
            private static bool _saveEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scaleGravity"/>
            /// </summary>
            public static int scaleGravity { get { if (!_scaleGravityReady) { _scaleGravityContent = SGetField<int>(LocalBridgeClazz, "scaleGravity"); _scaleGravityReady = true; } return _scaleGravityContent; } }
            private static int _scaleGravityContent = default;
            private static bool _scaleGravityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scaleHeight"/>
            /// </summary>
            public static int scaleHeight { get { if (!_scaleHeightReady) { _scaleHeightContent = SGetField<int>(LocalBridgeClazz, "scaleHeight"); _scaleHeightReady = true; } return _scaleHeightContent; } }
            private static int _scaleHeightContent = default;
            private static bool _scaleHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scaleType"/>
            /// </summary>
            public static int scaleType { get { if (!_scaleTypeReady) { _scaleTypeContent = SGetField<int>(LocalBridgeClazz, "scaleType"); _scaleTypeReady = true; } return _scaleTypeContent; } }
            private static int _scaleTypeContent = default;
            private static bool _scaleTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scaleWidth"/>
            /// </summary>
            public static int scaleWidth { get { if (!_scaleWidthReady) { _scaleWidthContent = SGetField<int>(LocalBridgeClazz, "scaleWidth"); _scaleWidthReady = true; } return _scaleWidthContent; } }
            private static int _scaleWidthContent = default;
            private static bool _scaleWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scaleX"/>
            /// </summary>
            public static int scaleX { get { if (!_scaleXReady) { _scaleXContent = SGetField<int>(LocalBridgeClazz, "scaleX"); _scaleXReady = true; } return _scaleXContent; } }
            private static int _scaleXContent = default;
            private static bool _scaleXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scaleY"/>
            /// </summary>
            public static int scaleY { get { if (!_scaleYReady) { _scaleYContent = SGetField<int>(LocalBridgeClazz, "scaleY"); _scaleYReady = true; } return _scaleYContent; } }
            private static int _scaleYContent = default;
            private static bool _scaleYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scheme"/>
            /// </summary>
            public static int scheme { get { if (!_schemeReady) { _schemeContent = SGetField<int>(LocalBridgeClazz, "scheme"); _schemeReady = true; } return _schemeContent; } }
            private static int _schemeContent = default;
            private static bool _schemeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#screenDensity"/>
            /// </summary>
            public static int screenDensity { get { if (!_screenDensityReady) { _screenDensityContent = SGetField<int>(LocalBridgeClazz, "screenDensity"); _screenDensityReady = true; } return _screenDensityContent; } }
            private static int _screenDensityContent = default;
            private static bool _screenDensityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#screenOrientation"/>
            /// </summary>
            public static int screenOrientation { get { if (!_screenOrientationReady) { _screenOrientationContent = SGetField<int>(LocalBridgeClazz, "screenOrientation"); _screenOrientationReady = true; } return _screenOrientationContent; } }
            private static int _screenOrientationContent = default;
            private static bool _screenOrientationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#screenReaderFocusable"/>
            /// </summary>
            public static int screenReaderFocusable { get { if (!_screenReaderFocusableReady) { _screenReaderFocusableContent = SGetField<int>(LocalBridgeClazz, "screenReaderFocusable"); _screenReaderFocusableReady = true; } return _screenReaderFocusableContent; } }
            private static int _screenReaderFocusableContent = default;
            private static bool _screenReaderFocusableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#screenSize"/>
            /// </summary>
            public static int screenSize { get { if (!_screenSizeReady) { _screenSizeContent = SGetField<int>(LocalBridgeClazz, "screenSize"); _screenSizeReady = true; } return _screenSizeContent; } }
            private static int _screenSizeContent = default;
            private static bool _screenSizeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollbarAlwaysDrawHorizontalTrack"/>
            /// </summary>
            public static int scrollbarAlwaysDrawHorizontalTrack { get { if (!_scrollbarAlwaysDrawHorizontalTrackReady) { _scrollbarAlwaysDrawHorizontalTrackContent = SGetField<int>(LocalBridgeClazz, "scrollbarAlwaysDrawHorizontalTrack"); _scrollbarAlwaysDrawHorizontalTrackReady = true; } return _scrollbarAlwaysDrawHorizontalTrackContent; } }
            private static int _scrollbarAlwaysDrawHorizontalTrackContent = default;
            private static bool _scrollbarAlwaysDrawHorizontalTrackReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollbarAlwaysDrawVerticalTrack"/>
            /// </summary>
            public static int scrollbarAlwaysDrawVerticalTrack { get { if (!_scrollbarAlwaysDrawVerticalTrackReady) { _scrollbarAlwaysDrawVerticalTrackContent = SGetField<int>(LocalBridgeClazz, "scrollbarAlwaysDrawVerticalTrack"); _scrollbarAlwaysDrawVerticalTrackReady = true; } return _scrollbarAlwaysDrawVerticalTrackContent; } }
            private static int _scrollbarAlwaysDrawVerticalTrackContent = default;
            private static bool _scrollbarAlwaysDrawVerticalTrackReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollbarDefaultDelayBeforeFade"/>
            /// </summary>
            public static int scrollbarDefaultDelayBeforeFade { get { if (!_scrollbarDefaultDelayBeforeFadeReady) { _scrollbarDefaultDelayBeforeFadeContent = SGetField<int>(LocalBridgeClazz, "scrollbarDefaultDelayBeforeFade"); _scrollbarDefaultDelayBeforeFadeReady = true; } return _scrollbarDefaultDelayBeforeFadeContent; } }
            private static int _scrollbarDefaultDelayBeforeFadeContent = default;
            private static bool _scrollbarDefaultDelayBeforeFadeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollbarFadeDuration"/>
            /// </summary>
            public static int scrollbarFadeDuration { get { if (!_scrollbarFadeDurationReady) { _scrollbarFadeDurationContent = SGetField<int>(LocalBridgeClazz, "scrollbarFadeDuration"); _scrollbarFadeDurationReady = true; } return _scrollbarFadeDurationContent; } }
            private static int _scrollbarFadeDurationContent = default;
            private static bool _scrollbarFadeDurationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollbars"/>
            /// </summary>
            public static int scrollbars { get { if (!_scrollbarsReady) { _scrollbarsContent = SGetField<int>(LocalBridgeClazz, "scrollbars"); _scrollbarsReady = true; } return _scrollbarsContent; } }
            private static int _scrollbarsContent = default;
            private static bool _scrollbarsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollbarSize"/>
            /// </summary>
            public static int scrollbarSize { get { if (!_scrollbarSizeReady) { _scrollbarSizeContent = SGetField<int>(LocalBridgeClazz, "scrollbarSize"); _scrollbarSizeReady = true; } return _scrollbarSizeContent; } }
            private static int _scrollbarSizeContent = default;
            private static bool _scrollbarSizeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollbarStyle"/>
            /// </summary>
            public static int scrollbarStyle { get { if (!_scrollbarStyleReady) { _scrollbarStyleContent = SGetField<int>(LocalBridgeClazz, "scrollbarStyle"); _scrollbarStyleReady = true; } return _scrollbarStyleContent; } }
            private static int _scrollbarStyleContent = default;
            private static bool _scrollbarStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollbarThumbHorizontal"/>
            /// </summary>
            public static int scrollbarThumbHorizontal { get { if (!_scrollbarThumbHorizontalReady) { _scrollbarThumbHorizontalContent = SGetField<int>(LocalBridgeClazz, "scrollbarThumbHorizontal"); _scrollbarThumbHorizontalReady = true; } return _scrollbarThumbHorizontalContent; } }
            private static int _scrollbarThumbHorizontalContent = default;
            private static bool _scrollbarThumbHorizontalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollbarThumbVertical"/>
            /// </summary>
            public static int scrollbarThumbVertical { get { if (!_scrollbarThumbVerticalReady) { _scrollbarThumbVerticalContent = SGetField<int>(LocalBridgeClazz, "scrollbarThumbVertical"); _scrollbarThumbVerticalReady = true; } return _scrollbarThumbVerticalContent; } }
            private static int _scrollbarThumbVerticalContent = default;
            private static bool _scrollbarThumbVerticalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollbarTrackHorizontal"/>
            /// </summary>
            public static int scrollbarTrackHorizontal { get { if (!_scrollbarTrackHorizontalReady) { _scrollbarTrackHorizontalContent = SGetField<int>(LocalBridgeClazz, "scrollbarTrackHorizontal"); _scrollbarTrackHorizontalReady = true; } return _scrollbarTrackHorizontalContent; } }
            private static int _scrollbarTrackHorizontalContent = default;
            private static bool _scrollbarTrackHorizontalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollbarTrackVertical"/>
            /// </summary>
            public static int scrollbarTrackVertical { get { if (!_scrollbarTrackVerticalReady) { _scrollbarTrackVerticalContent = SGetField<int>(LocalBridgeClazz, "scrollbarTrackVertical"); _scrollbarTrackVerticalReady = true; } return _scrollbarTrackVerticalContent; } }
            private static int _scrollbarTrackVerticalContent = default;
            private static bool _scrollbarTrackVerticalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollHorizontally"/>
            /// </summary>
            public static int scrollHorizontally { get { if (!_scrollHorizontallyReady) { _scrollHorizontallyContent = SGetField<int>(LocalBridgeClazz, "scrollHorizontally"); _scrollHorizontallyReady = true; } return _scrollHorizontallyContent; } }
            private static int _scrollHorizontallyContent = default;
            private static bool _scrollHorizontallyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollIndicators"/>
            /// </summary>
            public static int scrollIndicators { get { if (!_scrollIndicatorsReady) { _scrollIndicatorsContent = SGetField<int>(LocalBridgeClazz, "scrollIndicators"); _scrollIndicatorsReady = true; } return _scrollIndicatorsContent; } }
            private static int _scrollIndicatorsContent = default;
            private static bool _scrollIndicatorsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollingCache"/>
            /// </summary>
            public static int scrollingCache { get { if (!_scrollingCacheReady) { _scrollingCacheContent = SGetField<int>(LocalBridgeClazz, "scrollingCache"); _scrollingCacheReady = true; } return _scrollingCacheContent; } }
            private static int _scrollingCacheContent = default;
            private static bool _scrollingCacheReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollViewStyle"/>
            /// </summary>
            public static int scrollViewStyle { get { if (!_scrollViewStyleReady) { _scrollViewStyleContent = SGetField<int>(LocalBridgeClazz, "scrollViewStyle"); _scrollViewStyleReady = true; } return _scrollViewStyleContent; } }
            private static int _scrollViewStyleContent = default;
            private static bool _scrollViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollX"/>
            /// </summary>
            public static int scrollX { get { if (!_scrollXReady) { _scrollXContent = SGetField<int>(LocalBridgeClazz, "scrollX"); _scrollXReady = true; } return _scrollXContent; } }
            private static int _scrollXContent = default;
            private static bool _scrollXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#scrollY"/>
            /// </summary>
            public static int scrollY { get { if (!_scrollYReady) { _scrollYContent = SGetField<int>(LocalBridgeClazz, "scrollY"); _scrollYReady = true; } return _scrollYContent; } }
            private static int _scrollYContent = default;
            private static bool _scrollYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#searchButtonText"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int searchButtonText { get { if (!_searchButtonTextReady) { _searchButtonTextContent = SGetField<int>(LocalBridgeClazz, "searchButtonText"); _searchButtonTextReady = true; } return _searchButtonTextContent; } }
            private static int _searchButtonTextContent = default;
            private static bool _searchButtonTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#searchHintIcon"/>
            /// </summary>
            public static int searchHintIcon { get { if (!_searchHintIconReady) { _searchHintIconContent = SGetField<int>(LocalBridgeClazz, "searchHintIcon"); _searchHintIconReady = true; } return _searchHintIconContent; } }
            private static int _searchHintIconContent = default;
            private static bool _searchHintIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#searchIcon"/>
            /// </summary>
            public static int searchIcon { get { if (!_searchIconReady) { _searchIconContent = SGetField<int>(LocalBridgeClazz, "searchIcon"); _searchIconReady = true; } return _searchIconContent; } }
            private static int _searchIconContent = default;
            private static bool _searchIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#searchMode"/>
            /// </summary>
            public static int searchMode { get { if (!_searchModeReady) { _searchModeContent = SGetField<int>(LocalBridgeClazz, "searchMode"); _searchModeReady = true; } return _searchModeContent; } }
            private static int _searchModeContent = default;
            private static bool _searchModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#searchResultHighlightColor"/>
            /// </summary>
            public static int searchResultHighlightColor { get { if (!_searchResultHighlightColorReady) { _searchResultHighlightColorContent = SGetField<int>(LocalBridgeClazz, "searchResultHighlightColor"); _searchResultHighlightColorReady = true; } return _searchResultHighlightColorContent; } }
            private static int _searchResultHighlightColorContent = default;
            private static bool _searchResultHighlightColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#searchSettingsDescription"/>
            /// </summary>
            public static int searchSettingsDescription { get { if (!_searchSettingsDescriptionReady) { _searchSettingsDescriptionContent = SGetField<int>(LocalBridgeClazz, "searchSettingsDescription"); _searchSettingsDescriptionReady = true; } return _searchSettingsDescriptionContent; } }
            private static int _searchSettingsDescriptionContent = default;
            private static bool _searchSettingsDescriptionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#searchSuggestAuthority"/>
            /// </summary>
            public static int searchSuggestAuthority { get { if (!_searchSuggestAuthorityReady) { _searchSuggestAuthorityContent = SGetField<int>(LocalBridgeClazz, "searchSuggestAuthority"); _searchSuggestAuthorityReady = true; } return _searchSuggestAuthorityContent; } }
            private static int _searchSuggestAuthorityContent = default;
            private static bool _searchSuggestAuthorityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#searchSuggestIntentAction"/>
            /// </summary>
            public static int searchSuggestIntentAction { get { if (!_searchSuggestIntentActionReady) { _searchSuggestIntentActionContent = SGetField<int>(LocalBridgeClazz, "searchSuggestIntentAction"); _searchSuggestIntentActionReady = true; } return _searchSuggestIntentActionContent; } }
            private static int _searchSuggestIntentActionContent = default;
            private static bool _searchSuggestIntentActionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#searchSuggestIntentData"/>
            /// </summary>
            public static int searchSuggestIntentData { get { if (!_searchSuggestIntentDataReady) { _searchSuggestIntentDataContent = SGetField<int>(LocalBridgeClazz, "searchSuggestIntentData"); _searchSuggestIntentDataReady = true; } return _searchSuggestIntentDataContent; } }
            private static int _searchSuggestIntentDataContent = default;
            private static bool _searchSuggestIntentDataReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#searchSuggestPath"/>
            /// </summary>
            public static int searchSuggestPath { get { if (!_searchSuggestPathReady) { _searchSuggestPathContent = SGetField<int>(LocalBridgeClazz, "searchSuggestPath"); _searchSuggestPathReady = true; } return _searchSuggestPathContent; } }
            private static int _searchSuggestPathContent = default;
            private static bool _searchSuggestPathReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#searchSuggestSelection"/>
            /// </summary>
            public static int searchSuggestSelection { get { if (!_searchSuggestSelectionReady) { _searchSuggestSelectionContent = SGetField<int>(LocalBridgeClazz, "searchSuggestSelection"); _searchSuggestSelectionReady = true; } return _searchSuggestSelectionContent; } }
            private static int _searchSuggestSelectionContent = default;
            private static bool _searchSuggestSelectionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#searchSuggestThreshold"/>
            /// </summary>
            public static int searchSuggestThreshold { get { if (!_searchSuggestThresholdReady) { _searchSuggestThresholdContent = SGetField<int>(LocalBridgeClazz, "searchSuggestThreshold"); _searchSuggestThresholdReady = true; } return _searchSuggestThresholdContent; } }
            private static int _searchSuggestThresholdContent = default;
            private static bool _searchSuggestThresholdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#searchViewStyle"/>
            /// </summary>
            public static int searchViewStyle { get { if (!_searchViewStyleReady) { _searchViewStyleContent = SGetField<int>(LocalBridgeClazz, "searchViewStyle"); _searchViewStyleReady = true; } return _searchViewStyleContent; } }
            private static int _searchViewStyleContent = default;
            private static bool _searchViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#secondaryContentAlpha"/>
            /// </summary>
            public static int secondaryContentAlpha { get { if (!_secondaryContentAlphaReady) { _secondaryContentAlphaContent = SGetField<int>(LocalBridgeClazz, "secondaryContentAlpha"); _secondaryContentAlphaReady = true; } return _secondaryContentAlphaContent; } }
            private static int _secondaryContentAlphaContent = default;
            private static bool _secondaryContentAlphaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#secondaryProgress"/>
            /// </summary>
            public static int secondaryProgress { get { if (!_secondaryProgressReady) { _secondaryProgressContent = SGetField<int>(LocalBridgeClazz, "secondaryProgress"); _secondaryProgressReady = true; } return _secondaryProgressContent; } }
            private static int _secondaryProgressContent = default;
            private static bool _secondaryProgressReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#secondaryProgressTint"/>
            /// </summary>
            public static int secondaryProgressTint { get { if (!_secondaryProgressTintReady) { _secondaryProgressTintContent = SGetField<int>(LocalBridgeClazz, "secondaryProgressTint"); _secondaryProgressTintReady = true; } return _secondaryProgressTintContent; } }
            private static int _secondaryProgressTintContent = default;
            private static bool _secondaryProgressTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#secondaryProgressTintMode"/>
            /// </summary>
            public static int secondaryProgressTintMode { get { if (!_secondaryProgressTintModeReady) { _secondaryProgressTintModeContent = SGetField<int>(LocalBridgeClazz, "secondaryProgressTintMode"); _secondaryProgressTintModeReady = true; } return _secondaryProgressTintModeContent; } }
            private static int _secondaryProgressTintModeContent = default;
            private static bool _secondaryProgressTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#secureElementName"/>
            /// </summary>
            public static int secureElementName { get { if (!_secureElementNameReady) { _secureElementNameContent = SGetField<int>(LocalBridgeClazz, "secureElementName"); _secureElementNameReady = true; } return _secureElementNameContent; } }
            private static int _secureElementNameContent = default;
            private static bool _secureElementNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#seekBarStyle"/>
            /// </summary>
            public static int seekBarStyle { get { if (!_seekBarStyleReady) { _seekBarStyleContent = SGetField<int>(LocalBridgeClazz, "seekBarStyle"); _seekBarStyleReady = true; } return _seekBarStyleContent; } }
            private static int _seekBarStyleContent = default;
            private static bool _seekBarStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#segmentedButtonStyle"/>
            /// </summary>
            public static int segmentedButtonStyle { get { if (!_segmentedButtonStyleReady) { _segmentedButtonStyleContent = SGetField<int>(LocalBridgeClazz, "segmentedButtonStyle"); _segmentedButtonStyleReady = true; } return _segmentedButtonStyleContent; } }
            private static int _segmentedButtonStyleContent = default;
            private static bool _segmentedButtonStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#selectable"/>
            /// </summary>
            public static int selectable { get { if (!_selectableReady) { _selectableContent = SGetField<int>(LocalBridgeClazz, "selectable"); _selectableReady = true; } return _selectableContent; } }
            private static int _selectableContent = default;
            private static bool _selectableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#selectableAsDefault"/>
            /// </summary>
            public static int selectableAsDefault { get { if (!_selectableAsDefaultReady) { _selectableAsDefaultContent = SGetField<int>(LocalBridgeClazz, "selectableAsDefault"); _selectableAsDefaultReady = true; } return _selectableAsDefaultContent; } }
            private static int _selectableAsDefaultContent = default;
            private static bool _selectableAsDefaultReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#selectableItemBackground"/>
            /// </summary>
            public static int selectableItemBackground { get { if (!_selectableItemBackgroundReady) { _selectableItemBackgroundContent = SGetField<int>(LocalBridgeClazz, "selectableItemBackground"); _selectableItemBackgroundReady = true; } return _selectableItemBackgroundContent; } }
            private static int _selectableItemBackgroundContent = default;
            private static bool _selectableItemBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#selectableItemBackgroundBorderless"/>
            /// </summary>
            public static int selectableItemBackgroundBorderless { get { if (!_selectableItemBackgroundBorderlessReady) { _selectableItemBackgroundBorderlessContent = SGetField<int>(LocalBridgeClazz, "selectableItemBackgroundBorderless"); _selectableItemBackgroundBorderlessReady = true; } return _selectableItemBackgroundBorderlessContent; } }
            private static int _selectableItemBackgroundBorderlessContent = default;
            private static bool _selectableItemBackgroundBorderlessReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#selectAllOnFocus"/>
            /// </summary>
            public static int selectAllOnFocus { get { if (!_selectAllOnFocusReady) { _selectAllOnFocusContent = SGetField<int>(LocalBridgeClazz, "selectAllOnFocus"); _selectAllOnFocusReady = true; } return _selectAllOnFocusContent; } }
            private static int _selectAllOnFocusContent = default;
            private static bool _selectAllOnFocusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#selectedDateVerticalBar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int selectedDateVerticalBar { get { if (!_selectedDateVerticalBarReady) { _selectedDateVerticalBarContent = SGetField<int>(LocalBridgeClazz, "selectedDateVerticalBar"); _selectedDateVerticalBarReady = true; } return _selectedDateVerticalBarContent; } }
            private static int _selectedDateVerticalBarContent = default;
            private static bool _selectedDateVerticalBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#selectedWeekBackgroundColor"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int selectedWeekBackgroundColor { get { if (!_selectedWeekBackgroundColorReady) { _selectedWeekBackgroundColorContent = SGetField<int>(LocalBridgeClazz, "selectedWeekBackgroundColor"); _selectedWeekBackgroundColorReady = true; } return _selectedWeekBackgroundColorContent; } }
            private static int _selectedWeekBackgroundColorContent = default;
            private static bool _selectedWeekBackgroundColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#selectionDividerHeight"/>
            /// </summary>
            public static int selectionDividerHeight { get { if (!_selectionDividerHeightReady) { _selectionDividerHeightContent = SGetField<int>(LocalBridgeClazz, "selectionDividerHeight"); _selectionDividerHeightReady = true; } return _selectionDividerHeightContent; } }
            private static int _selectionDividerHeightContent = default;
            private static bool _selectionDividerHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#sessionService"/>
            /// </summary>
            public static int sessionService { get { if (!_sessionServiceReady) { _sessionServiceContent = SGetField<int>(LocalBridgeClazz, "sessionService"); _sessionServiceReady = true; } return _sessionServiceContent; } }
            private static int _sessionServiceContent = default;
            private static bool _sessionServiceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#settingsActivity"/>
            /// </summary>
            public static int settingsActivity { get { if (!_settingsActivityReady) { _settingsActivityContent = SGetField<int>(LocalBridgeClazz, "settingsActivity"); _settingsActivityReady = true; } return _settingsActivityContent; } }
            private static int _settingsActivityContent = default;
            private static bool _settingsActivityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#settingsSliceUri"/>
            /// </summary>
            public static int settingsSliceUri { get { if (!_settingsSliceUriReady) { _settingsSliceUriContent = SGetField<int>(LocalBridgeClazz, "settingsSliceUri"); _settingsSliceUriReady = true; } return _settingsSliceUriContent; } }
            private static int _settingsSliceUriContent = default;
            private static bool _settingsSliceUriReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#settingsSubtitle"/>
            /// </summary>
            public static int settingsSubtitle { get { if (!_settingsSubtitleReady) { _settingsSubtitleContent = SGetField<int>(LocalBridgeClazz, "settingsSubtitle"); _settingsSubtitleReady = true; } return _settingsSubtitleContent; } }
            private static int _settingsSubtitleContent = default;
            private static bool _settingsSubtitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#setupActivity"/>
            /// </summary>
            public static int setupActivity { get { if (!_setupActivityReady) { _setupActivityContent = SGetField<int>(LocalBridgeClazz, "setupActivity"); _setupActivityReady = true; } return _setupActivityContent; } }
            private static int _setupActivityContent = default;
            private static bool _setupActivityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shadowColor"/>
            /// </summary>
            public static int shadowColor { get { if (!_shadowColorReady) { _shadowColorContent = SGetField<int>(LocalBridgeClazz, "shadowColor"); _shadowColorReady = true; } return _shadowColorContent; } }
            private static int _shadowColorContent = default;
            private static bool _shadowColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shadowDx"/>
            /// </summary>
            public static int shadowDx { get { if (!_shadowDxReady) { _shadowDxContent = SGetField<int>(LocalBridgeClazz, "shadowDx"); _shadowDxReady = true; } return _shadowDxContent; } }
            private static int _shadowDxContent = default;
            private static bool _shadowDxReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shadowDy"/>
            /// </summary>
            public static int shadowDy { get { if (!_shadowDyReady) { _shadowDyContent = SGetField<int>(LocalBridgeClazz, "shadowDy"); _shadowDyReady = true; } return _shadowDyContent; } }
            private static int _shadowDyContent = default;
            private static bool _shadowDyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shadowRadius"/>
            /// </summary>
            public static int shadowRadius { get { if (!_shadowRadiusReady) { _shadowRadiusContent = SGetField<int>(LocalBridgeClazz, "shadowRadius"); _shadowRadiusReady = true; } return _shadowRadiusContent; } }
            private static int _shadowRadiusContent = default;
            private static bool _shadowRadiusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shape"/>
            /// </summary>
            public static int shape { get { if (!_shapeReady) { _shapeContent = SGetField<int>(LocalBridgeClazz, "shape"); _shapeReady = true; } return _shapeContent; } }
            private static int _shapeContent = default;
            private static bool _shapeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#sharedUserId"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int sharedUserId { get { if (!_sharedUserIdReady) { _sharedUserIdContent = SGetField<int>(LocalBridgeClazz, "sharedUserId"); _sharedUserIdReady = true; } return _sharedUserIdContent; } }
            private static int _sharedUserIdContent = default;
            private static bool _sharedUserIdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#sharedUserLabel"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int sharedUserLabel { get { if (!_sharedUserLabelReady) { _sharedUserLabelContent = SGetField<int>(LocalBridgeClazz, "sharedUserLabel"); _sharedUserLabelReady = true; } return _sharedUserLabelContent; } }
            private static int _sharedUserLabelContent = default;
            private static bool _sharedUserLabelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#sharedUserMaxSdkVersion"/>
            /// </summary>
            public static int sharedUserMaxSdkVersion { get { if (!_sharedUserMaxSdkVersionReady) { _sharedUserMaxSdkVersionContent = SGetField<int>(LocalBridgeClazz, "sharedUserMaxSdkVersion"); _sharedUserMaxSdkVersionReady = true; } return _sharedUserMaxSdkVersionContent; } }
            private static int _sharedUserMaxSdkVersionContent = default;
            private static bool _sharedUserMaxSdkVersionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shareInterpolator"/>
            /// </summary>
            public static int shareInterpolator { get { if (!_shareInterpolatorReady) { _shareInterpolatorContent = SGetField<int>(LocalBridgeClazz, "shareInterpolator"); _shareInterpolatorReady = true; } return _shareInterpolatorContent; } }
            private static int _shareInterpolatorContent = default;
            private static bool _shareInterpolatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shell"/>
            /// </summary>
            public static int shell { get { if (!_shellReady) { _shellContent = SGetField<int>(LocalBridgeClazz, "shell"); _shellReady = true; } return _shellContent; } }
            private static int _shellContent = default;
            private static bool _shellReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shiftDrawingOffsetForStartOverhang"/>
            /// </summary>
            public static int shiftDrawingOffsetForStartOverhang { get { if (!_shiftDrawingOffsetForStartOverhangReady) { _shiftDrawingOffsetForStartOverhangContent = SGetField<int>(LocalBridgeClazz, "shiftDrawingOffsetForStartOverhang"); _shiftDrawingOffsetForStartOverhangReady = true; } return _shiftDrawingOffsetForStartOverhangContent; } }
            private static int _shiftDrawingOffsetForStartOverhangContent = default;
            private static bool _shiftDrawingOffsetForStartOverhangReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shortcutDisabledMessage"/>
            /// </summary>
            public static int shortcutDisabledMessage { get { if (!_shortcutDisabledMessageReady) { _shortcutDisabledMessageContent = SGetField<int>(LocalBridgeClazz, "shortcutDisabledMessage"); _shortcutDisabledMessageReady = true; } return _shortcutDisabledMessageContent; } }
            private static int _shortcutDisabledMessageContent = default;
            private static bool _shortcutDisabledMessageReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shortcutId"/>
            /// </summary>
            public static int shortcutId { get { if (!_shortcutIdReady) { _shortcutIdContent = SGetField<int>(LocalBridgeClazz, "shortcutId"); _shortcutIdReady = true; } return _shortcutIdContent; } }
            private static int _shortcutIdContent = default;
            private static bool _shortcutIdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shortcutLongLabel"/>
            /// </summary>
            public static int shortcutLongLabel { get { if (!_shortcutLongLabelReady) { _shortcutLongLabelContent = SGetField<int>(LocalBridgeClazz, "shortcutLongLabel"); _shortcutLongLabelReady = true; } return _shortcutLongLabelContent; } }
            private static int _shortcutLongLabelContent = default;
            private static bool _shortcutLongLabelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shortcutShortLabel"/>
            /// </summary>
            public static int shortcutShortLabel { get { if (!_shortcutShortLabelReady) { _shortcutShortLabelContent = SGetField<int>(LocalBridgeClazz, "shortcutShortLabel"); _shortcutShortLabelReady = true; } return _shortcutShortLabelContent; } }
            private static int _shortcutShortLabelContent = default;
            private static bool _shortcutShortLabelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shouldDefaultToObserveMode"/>
            /// </summary>
            public static int shouldDefaultToObserveMode { get { if (!_shouldDefaultToObserveModeReady) { _shouldDefaultToObserveModeContent = SGetField<int>(LocalBridgeClazz, "shouldDefaultToObserveMode"); _shouldDefaultToObserveModeReady = true; } return _shouldDefaultToObserveModeContent; } }
            private static int _shouldDefaultToObserveModeContent = default;
            private static bool _shouldDefaultToObserveModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shouldDisableView"/>
            /// </summary>
            public static int shouldDisableView { get { if (!_shouldDisableViewReady) { _shouldDisableViewContent = SGetField<int>(LocalBridgeClazz, "shouldDisableView"); _shouldDisableViewReady = true; } return _shouldDisableViewContent; } }
            private static int _shouldDisableViewContent = default;
            private static bool _shouldDisableViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shouldUseDefaultUnfoldTransition"/>
            /// </summary>
            public static int shouldUseDefaultUnfoldTransition { get { if (!_shouldUseDefaultUnfoldTransitionReady) { _shouldUseDefaultUnfoldTransitionContent = SGetField<int>(LocalBridgeClazz, "shouldUseDefaultUnfoldTransition"); _shouldUseDefaultUnfoldTransitionReady = true; } return _shouldUseDefaultUnfoldTransitionContent; } }
            private static int _shouldUseDefaultUnfoldTransitionContent = default;
            private static bool _shouldUseDefaultUnfoldTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#showAsAction"/>
            /// </summary>
            public static int showAsAction { get { if (!_showAsActionReady) { _showAsActionContent = SGetField<int>(LocalBridgeClazz, "showAsAction"); _showAsActionReady = true; } return _showAsActionContent; } }
            private static int _showAsActionContent = default;
            private static bool _showAsActionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#showBackdrop"/>
            /// </summary>
            public static int showBackdrop { get { if (!_showBackdropReady) { _showBackdropContent = SGetField<int>(LocalBridgeClazz, "showBackdrop"); _showBackdropReady = true; } return _showBackdropContent; } }
            private static int _showBackdropContent = default;
            private static bool _showBackdropReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#showClockAndComplications"/>
            /// </summary>
            public static int showClockAndComplications { get { if (!_showClockAndComplicationsReady) { _showClockAndComplicationsContent = SGetField<int>(LocalBridgeClazz, "showClockAndComplications"); _showClockAndComplicationsReady = true; } return _showClockAndComplicationsContent; } }
            private static int _showClockAndComplicationsContent = default;
            private static bool _showClockAndComplicationsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#showDefault"/>
            /// </summary>
            public static int showDefault { get { if (!_showDefaultReady) { _showDefaultContent = SGetField<int>(LocalBridgeClazz, "showDefault"); _showDefaultReady = true; } return _showDefaultContent; } }
            private static int _showDefaultContent = default;
            private static bool _showDefaultReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#showDividers"/>
            /// </summary>
            public static int showDividers { get { if (!_showDividersReady) { _showDividersContent = SGetField<int>(LocalBridgeClazz, "showDividers"); _showDividersReady = true; } return _showDividersContent; } }
            private static int _showDividersContent = default;
            private static bool _showDividersReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#showForAllUsers"/>
            /// </summary>
            public static int showForAllUsers { get { if (!_showForAllUsersReady) { _showForAllUsersContent = SGetField<int>(LocalBridgeClazz, "showForAllUsers"); _showForAllUsersReady = true; } return _showForAllUsersContent; } }
            private static int _showForAllUsersContent = default;
            private static bool _showForAllUsersReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#showInInputMethodPicker"/>
            /// </summary>
            public static int showInInputMethodPicker { get { if (!_showInInputMethodPickerReady) { _showInInputMethodPickerContent = SGetField<int>(LocalBridgeClazz, "showInInputMethodPicker"); _showInInputMethodPickerReady = true; } return _showInInputMethodPickerContent; } }
            private static int _showInInputMethodPickerContent = default;
            private static bool _showInInputMethodPickerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#showMetadataInPreview"/>
            /// </summary>
            public static int showMetadataInPreview { get { if (!_showMetadataInPreviewReady) { _showMetadataInPreviewContent = SGetField<int>(LocalBridgeClazz, "showMetadataInPreview"); _showMetadataInPreviewReady = true; } return _showMetadataInPreviewContent; } }
            private static int _showMetadataInPreviewContent = default;
            private static bool _showMetadataInPreviewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shownWeekCount"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int shownWeekCount { get { if (!_shownWeekCountReady) { _shownWeekCountContent = SGetField<int>(LocalBridgeClazz, "shownWeekCount"); _shownWeekCountReady = true; } return _shownWeekCountContent; } }
            private static int _shownWeekCountContent = default;
            private static bool _shownWeekCountReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#showOnLockScreen"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int showOnLockScreen { get { if (!_showOnLockScreenReady) { _showOnLockScreenContent = SGetField<int>(LocalBridgeClazz, "showOnLockScreen"); _showOnLockScreenReady = true; } return _showOnLockScreenContent; } }
            private static int _showOnLockScreenContent = default;
            private static bool _showOnLockScreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#showSilent"/>
            /// </summary>
            public static int showSilent { get { if (!_showSilentReady) { _showSilentContent = SGetField<int>(LocalBridgeClazz, "showSilent"); _showSilentReady = true; } return _showSilentContent; } }
            private static int _showSilentContent = default;
            private static bool _showSilentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#showText"/>
            /// </summary>
            public static int showText { get { if (!_showTextReady) { _showTextContent = SGetField<int>(LocalBridgeClazz, "showText"); _showTextReady = true; } return _showTextContent; } }
            private static int _showTextContent = default;
            private static bool _showTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#showWeekNumber"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int showWeekNumber { get { if (!_showWeekNumberReady) { _showWeekNumberContent = SGetField<int>(LocalBridgeClazz, "showWeekNumber"); _showWeekNumberReady = true; } return _showWeekNumberContent; } }
            private static int _showWeekNumberContent = default;
            private static bool _showWeekNumberReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#showWhenLocked"/>
            /// </summary>
            public static int showWhenLocked { get { if (!_showWhenLockedReady) { _showWhenLockedContent = SGetField<int>(LocalBridgeClazz, "showWhenLocked"); _showWhenLockedReady = true; } return _showWhenLockedContent; } }
            private static int _showWhenLockedContent = default;
            private static bool _showWhenLockedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#shrinkColumns"/>
            /// </summary>
            public static int shrinkColumns { get { if (!_shrinkColumnsReady) { _shrinkColumnsContent = SGetField<int>(LocalBridgeClazz, "shrinkColumns"); _shrinkColumnsReady = true; } return _shrinkColumnsContent; } }
            private static int _shrinkColumnsContent = default;
            private static bool _shrinkColumnsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#singleLine"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int singleLine { get { if (!_singleLineReady) { _singleLineContent = SGetField<int>(LocalBridgeClazz, "singleLine"); _singleLineReady = true; } return _singleLineContent; } }
            private static int _singleLineContent = default;
            private static bool _singleLineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#singleLineTitle"/>
            /// </summary>
            public static int singleLineTitle { get { if (!_singleLineTitleReady) { _singleLineTitleContent = SGetField<int>(LocalBridgeClazz, "singleLineTitle"); _singleLineTitleReady = true; } return _singleLineTitleContent; } }
            private static int _singleLineTitleContent = default;
            private static bool _singleLineTitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#singleUser"/>
            /// </summary>
            public static int singleUser { get { if (!_singleUserReady) { _singleUserContent = SGetField<int>(LocalBridgeClazz, "singleUser"); _singleUserReady = true; } return _singleUserContent; } }
            private static int _singleUserContent = default;
            private static bool _singleUserReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#slideEdge"/>
            /// </summary>
            public static int slideEdge { get { if (!_slideEdgeReady) { _slideEdgeContent = SGetField<int>(LocalBridgeClazz, "slideEdge"); _slideEdgeReady = true; } return _slideEdgeContent; } }
            private static int _slideEdgeContent = default;
            private static bool _slideEdgeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#smallIcon"/>
            /// </summary>
            public static int smallIcon { get { if (!_smallIconReady) { _smallIconContent = SGetField<int>(LocalBridgeClazz, "smallIcon"); _smallIconReady = true; } return _smallIconContent; } }
            private static int _smallIconContent = default;
            private static bool _smallIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#smallScreens"/>
            /// </summary>
            public static int smallScreens { get { if (!_smallScreensReady) { _smallScreensContent = SGetField<int>(LocalBridgeClazz, "smallScreens"); _smallScreensReady = true; } return _smallScreensContent; } }
            private static int _smallScreensContent = default;
            private static bool _smallScreensReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#smoothScrollbar"/>
            /// </summary>
            public static int smoothScrollbar { get { if (!_smoothScrollbarReady) { _smoothScrollbarContent = SGetField<int>(LocalBridgeClazz, "smoothScrollbar"); _smoothScrollbarReady = true; } return _smoothScrollbarContent; } }
            private static int _smoothScrollbarContent = default;
            private static bool _smoothScrollbarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#soundEffectsEnabled"/>
            /// </summary>
            public static int soundEffectsEnabled { get { if (!_soundEffectsEnabledReady) { _soundEffectsEnabledContent = SGetField<int>(LocalBridgeClazz, "soundEffectsEnabled"); _soundEffectsEnabledReady = true; } return _soundEffectsEnabledContent; } }
            private static int _soundEffectsEnabledContent = default;
            private static bool _soundEffectsEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#spacing"/>
            /// </summary>
            public static int spacing { get { if (!_spacingReady) { _spacingContent = SGetField<int>(LocalBridgeClazz, "spacing"); _spacingReady = true; } return _spacingContent; } }
            private static int _spacingContent = default;
            private static bool _spacingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#spinnerDropDownItemStyle"/>
            /// </summary>
            public static int spinnerDropDownItemStyle { get { if (!_spinnerDropDownItemStyleReady) { _spinnerDropDownItemStyleContent = SGetField<int>(LocalBridgeClazz, "spinnerDropDownItemStyle"); _spinnerDropDownItemStyleReady = true; } return _spinnerDropDownItemStyleContent; } }
            private static int _spinnerDropDownItemStyleContent = default;
            private static bool _spinnerDropDownItemStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#spinnerItemStyle"/>
            /// </summary>
            public static int spinnerItemStyle { get { if (!_spinnerItemStyleReady) { _spinnerItemStyleContent = SGetField<int>(LocalBridgeClazz, "spinnerItemStyle"); _spinnerItemStyleReady = true; } return _spinnerItemStyleContent; } }
            private static int _spinnerItemStyleContent = default;
            private static bool _spinnerItemStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#spinnerMode"/>
            /// </summary>
            public static int spinnerMode { get { if (!_spinnerModeReady) { _spinnerModeContent = SGetField<int>(LocalBridgeClazz, "spinnerMode"); _spinnerModeReady = true; } return _spinnerModeContent; } }
            private static int _spinnerModeContent = default;
            private static bool _spinnerModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#spinnersShown"/>
            /// </summary>
            public static int spinnersShown { get { if (!_spinnersShownReady) { _spinnersShownContent = SGetField<int>(LocalBridgeClazz, "spinnersShown"); _spinnersShownReady = true; } return _spinnersShownContent; } }
            private static int _spinnersShownContent = default;
            private static bool _spinnersShownReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#spinnerStyle"/>
            /// </summary>
            public static int spinnerStyle { get { if (!_spinnerStyleReady) { _spinnerStyleContent = SGetField<int>(LocalBridgeClazz, "spinnerStyle"); _spinnerStyleReady = true; } return _spinnerStyleContent; } }
            private static int _spinnerStyleContent = default;
            private static bool _spinnerStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#splashScreenTheme"/>
            /// </summary>
            public static int splashScreenTheme { get { if (!_splashScreenThemeReady) { _splashScreenThemeContent = SGetField<int>(LocalBridgeClazz, "splashScreenTheme"); _splashScreenThemeReady = true; } return _splashScreenThemeContent; } }
            private static int _splashScreenThemeContent = default;
            private static bool _splashScreenThemeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#splitMotionEvents"/>
            /// </summary>
            public static int splitMotionEvents { get { if (!_splitMotionEventsReady) { _splitMotionEventsContent = SGetField<int>(LocalBridgeClazz, "splitMotionEvents"); _splitMotionEventsReady = true; } return _splitMotionEventsContent; } }
            private static int _splitMotionEventsContent = default;
            private static bool _splitMotionEventsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#splitName"/>
            /// </summary>
            public static int splitName { get { if (!_splitNameReady) { _splitNameContent = SGetField<int>(LocalBridgeClazz, "splitName"); _splitNameReady = true; } return _splitNameContent; } }
            private static int _splitNameContent = default;
            private static bool _splitNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#splitTrack"/>
            /// </summary>
            public static int splitTrack { get { if (!_splitTrackReady) { _splitTrackContent = SGetField<int>(LocalBridgeClazz, "splitTrack"); _splitTrackReady = true; } return _splitTrackContent; } }
            private static int _splitTrackContent = default;
            private static bool _splitTrackReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#splitTypes"/>
            /// </summary>
            public static int splitTypes { get { if (!_splitTypesReady) { _splitTypesContent = SGetField<int>(LocalBridgeClazz, "splitTypes"); _splitTypesReady = true; } return _splitTypesContent; } }
            private static int _splitTypesContent = default;
            private static bool _splitTypesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#spotShadowAlpha"/>
            /// </summary>
            public static int spotShadowAlpha { get { if (!_spotShadowAlphaReady) { _spotShadowAlphaContent = SGetField<int>(LocalBridgeClazz, "spotShadowAlpha"); _spotShadowAlphaReady = true; } return _spotShadowAlphaContent; } }
            private static int _spotShadowAlphaContent = default;
            private static bool _spotShadowAlphaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#src"/>
            /// </summary>
            public static int src { get { if (!_srcReady) { _srcContent = SGetField<int>(LocalBridgeClazz, "src"); _srcReady = true; } return _srcContent; } }
            private static int _srcContent = default;
            private static bool _srcReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#ssp"/>
            /// </summary>
            public static int ssp { get { if (!_sspReady) { _sspContent = SGetField<int>(LocalBridgeClazz, "ssp"); _sspReady = true; } return _sspContent; } }
            private static int _sspContent = default;
            private static bool _sspReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#sspAdvancedPattern"/>
            /// </summary>
            public static int sspAdvancedPattern { get { if (!_sspAdvancedPatternReady) { _sspAdvancedPatternContent = SGetField<int>(LocalBridgeClazz, "sspAdvancedPattern"); _sspAdvancedPatternReady = true; } return _sspAdvancedPatternContent; } }
            private static int _sspAdvancedPatternContent = default;
            private static bool _sspAdvancedPatternReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#sspPattern"/>
            /// </summary>
            public static int sspPattern { get { if (!_sspPatternReady) { _sspPatternContent = SGetField<int>(LocalBridgeClazz, "sspPattern"); _sspPatternReady = true; } return _sspPatternContent; } }
            private static int _sspPatternContent = default;
            private static bool _sspPatternReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#sspPrefix"/>
            /// </summary>
            public static int sspPrefix { get { if (!_sspPrefixReady) { _sspPrefixContent = SGetField<int>(LocalBridgeClazz, "sspPrefix"); _sspPrefixReady = true; } return _sspPrefixContent; } }
            private static int _sspPrefixContent = default;
            private static bool _sspPrefixReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#sspSuffix"/>
            /// </summary>
            public static int sspSuffix { get { if (!_sspSuffixReady) { _sspSuffixContent = SGetField<int>(LocalBridgeClazz, "sspSuffix"); _sspSuffixReady = true; } return _sspSuffixContent; } }
            private static int _sspSuffixContent = default;
            private static bool _sspSuffixReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#stackFromBottom"/>
            /// </summary>
            public static int stackFromBottom { get { if (!_stackFromBottomReady) { _stackFromBottomContent = SGetField<int>(LocalBridgeClazz, "stackFromBottom"); _stackFromBottomReady = true; } return _stackFromBottomContent; } }
            private static int _stackFromBottomContent = default;
            private static bool _stackFromBottomReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#stackViewStyle"/>
            /// </summary>
            public static int stackViewStyle { get { if (!_stackViewStyleReady) { _stackViewStyleContent = SGetField<int>(LocalBridgeClazz, "stackViewStyle"); _stackViewStyleReady = true; } return _stackViewStyleContent; } }
            private static int _stackViewStyleContent = default;
            private static bool _stackViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#starStyle"/>
            /// </summary>
            public static int starStyle { get { if (!_starStyleReady) { _starStyleContent = SGetField<int>(LocalBridgeClazz, "starStyle"); _starStyleReady = true; } return _starStyleContent; } }
            private static int _starStyleContent = default;
            private static bool _starStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#start"/>
            /// </summary>
            public static int start { get { if (!_startReady) { _startContent = SGetField<int>(LocalBridgeClazz, "start"); _startReady = true; } return _startContent; } }
            private static int _startContent = default;
            private static bool _startReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#startColor"/>
            /// </summary>
            public static int startColor { get { if (!_startColorReady) { _startColorContent = SGetField<int>(LocalBridgeClazz, "startColor"); _startColorReady = true; } return _startColorContent; } }
            private static int _startColorContent = default;
            private static bool _startColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#startDelay"/>
            /// </summary>
            public static int startDelay { get { if (!_startDelayReady) { _startDelayContent = SGetField<int>(LocalBridgeClazz, "startDelay"); _startDelayReady = true; } return _startDelayContent; } }
            private static int _startDelayContent = default;
            private static bool _startDelayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#startOffset"/>
            /// </summary>
            public static int startOffset { get { if (!_startOffsetReady) { _startOffsetContent = SGetField<int>(LocalBridgeClazz, "startOffset"); _startOffsetReady = true; } return _startOffsetContent; } }
            private static int _startOffsetContent = default;
            private static bool _startOffsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#startX"/>
            /// </summary>
            public static int startX { get { if (!_startXReady) { _startXContent = SGetField<int>(LocalBridgeClazz, "startX"); _startXReady = true; } return _startXContent; } }
            private static int _startXContent = default;
            private static bool _startXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#startY"/>
            /// </summary>
            public static int startY { get { if (!_startYReady) { _startYContent = SGetField<int>(LocalBridgeClazz, "startY"); _startYReady = true; } return _startYContent; } }
            private static int _startYContent = default;
            private static bool _startYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#startYear"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int startYear { get { if (!_startYearReady) { _startYearContent = SGetField<int>(LocalBridgeClazz, "startYear"); _startYearReady = true; } return _startYearContent; } }
            private static int _startYearContent = default;
            private static bool _startYearReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_above_anchor"/>
            /// </summary>
            public static int state_above_anchor { get { if (!_state_above_anchorReady) { _state_above_anchorContent = SGetField<int>(LocalBridgeClazz, "state_above_anchor"); _state_above_anchorReady = true; } return _state_above_anchorContent; } }
            private static int _state_above_anchorContent = default;
            private static bool _state_above_anchorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_accelerated"/>
            /// </summary>
            public static int state_accelerated { get { if (!_state_acceleratedReady) { _state_acceleratedContent = SGetField<int>(LocalBridgeClazz, "state_accelerated"); _state_acceleratedReady = true; } return _state_acceleratedContent; } }
            private static int _state_acceleratedContent = default;
            private static bool _state_acceleratedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_activated"/>
            /// </summary>
            public static int state_activated { get { if (!_state_activatedReady) { _state_activatedContent = SGetField<int>(LocalBridgeClazz, "state_activated"); _state_activatedReady = true; } return _state_activatedContent; } }
            private static int _state_activatedContent = default;
            private static bool _state_activatedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_active"/>
            /// </summary>
            public static int state_active { get { if (!_state_activeReady) { _state_activeContent = SGetField<int>(LocalBridgeClazz, "state_active"); _state_activeReady = true; } return _state_activeContent; } }
            private static int _state_activeContent = default;
            private static bool _state_activeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_checkable"/>
            /// </summary>
            public static int state_checkable { get { if (!_state_checkableReady) { _state_checkableContent = SGetField<int>(LocalBridgeClazz, "state_checkable"); _state_checkableReady = true; } return _state_checkableContent; } }
            private static int _state_checkableContent = default;
            private static bool _state_checkableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_checked"/>
            /// </summary>
            public static int state_checked { get { if (!_state_checkedReady) { _state_checkedContent = SGetField<int>(LocalBridgeClazz, "state_checked"); _state_checkedReady = true; } return _state_checkedContent; } }
            private static int _state_checkedContent = default;
            private static bool _state_checkedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_drag_can_accept"/>
            /// </summary>
            public static int state_drag_can_accept { get { if (!_state_drag_can_acceptReady) { _state_drag_can_acceptContent = SGetField<int>(LocalBridgeClazz, "state_drag_can_accept"); _state_drag_can_acceptReady = true; } return _state_drag_can_acceptContent; } }
            private static int _state_drag_can_acceptContent = default;
            private static bool _state_drag_can_acceptReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_drag_hovered"/>
            /// </summary>
            public static int state_drag_hovered { get { if (!_state_drag_hoveredReady) { _state_drag_hoveredContent = SGetField<int>(LocalBridgeClazz, "state_drag_hovered"); _state_drag_hoveredReady = true; } return _state_drag_hoveredContent; } }
            private static int _state_drag_hoveredContent = default;
            private static bool _state_drag_hoveredReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_empty"/>
            /// </summary>
            public static int state_empty { get { if (!_state_emptyReady) { _state_emptyContent = SGetField<int>(LocalBridgeClazz, "state_empty"); _state_emptyReady = true; } return _state_emptyContent; } }
            private static int _state_emptyContent = default;
            private static bool _state_emptyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_enabled"/>
            /// </summary>
            public static int state_enabled { get { if (!_state_enabledReady) { _state_enabledContent = SGetField<int>(LocalBridgeClazz, "state_enabled"); _state_enabledReady = true; } return _state_enabledContent; } }
            private static int _state_enabledContent = default;
            private static bool _state_enabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_expanded"/>
            /// </summary>
            public static int state_expanded { get { if (!_state_expandedReady) { _state_expandedContent = SGetField<int>(LocalBridgeClazz, "state_expanded"); _state_expandedReady = true; } return _state_expandedContent; } }
            private static int _state_expandedContent = default;
            private static bool _state_expandedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_first"/>
            /// </summary>
            public static int state_first { get { if (!_state_firstReady) { _state_firstContent = SGetField<int>(LocalBridgeClazz, "state_first"); _state_firstReady = true; } return _state_firstContent; } }
            private static int _state_firstContent = default;
            private static bool _state_firstReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_focused"/>
            /// </summary>
            public static int state_focused { get { if (!_state_focusedReady) { _state_focusedContent = SGetField<int>(LocalBridgeClazz, "state_focused"); _state_focusedReady = true; } return _state_focusedContent; } }
            private static int _state_focusedContent = default;
            private static bool _state_focusedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_hovered"/>
            /// </summary>
            public static int state_hovered { get { if (!_state_hoveredReady) { _state_hoveredContent = SGetField<int>(LocalBridgeClazz, "state_hovered"); _state_hoveredReady = true; } return _state_hoveredContent; } }
            private static int _state_hoveredContent = default;
            private static bool _state_hoveredReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_last"/>
            /// </summary>
            public static int state_last { get { if (!_state_lastReady) { _state_lastContent = SGetField<int>(LocalBridgeClazz, "state_last"); _state_lastReady = true; } return _state_lastContent; } }
            private static int _state_lastContent = default;
            private static bool _state_lastReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_long_pressable"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int state_long_pressable { get { if (!_state_long_pressableReady) { _state_long_pressableContent = SGetField<int>(LocalBridgeClazz, "state_long_pressable"); _state_long_pressableReady = true; } return _state_long_pressableContent; } }
            private static int _state_long_pressableContent = default;
            private static bool _state_long_pressableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_middle"/>
            /// </summary>
            public static int state_middle { get { if (!_state_middleReady) { _state_middleContent = SGetField<int>(LocalBridgeClazz, "state_middle"); _state_middleReady = true; } return _state_middleContent; } }
            private static int _state_middleContent = default;
            private static bool _state_middleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_multiline"/>
            /// </summary>
            public static int state_multiline { get { if (!_state_multilineReady) { _state_multilineContent = SGetField<int>(LocalBridgeClazz, "state_multiline"); _state_multilineReady = true; } return _state_multilineContent; } }
            private static int _state_multilineContent = default;
            private static bool _state_multilineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_pressed"/>
            /// </summary>
            public static int state_pressed { get { if (!_state_pressedReady) { _state_pressedContent = SGetField<int>(LocalBridgeClazz, "state_pressed"); _state_pressedReady = true; } return _state_pressedContent; } }
            private static int _state_pressedContent = default;
            private static bool _state_pressedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_selected"/>
            /// </summary>
            public static int state_selected { get { if (!_state_selectedReady) { _state_selectedContent = SGetField<int>(LocalBridgeClazz, "state_selected"); _state_selectedReady = true; } return _state_selectedContent; } }
            private static int _state_selectedContent = default;
            private static bool _state_selectedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_single"/>
            /// </summary>
            public static int state_single { get { if (!_state_singleReady) { _state_singleContent = SGetField<int>(LocalBridgeClazz, "state_single"); _state_singleReady = true; } return _state_singleContent; } }
            private static int _state_singleContent = default;
            private static bool _state_singleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#state_window_focused"/>
            /// </summary>
            public static int state_window_focused { get { if (!_state_window_focusedReady) { _state_window_focusedContent = SGetField<int>(LocalBridgeClazz, "state_window_focused"); _state_window_focusedReady = true; } return _state_window_focusedContent; } }
            private static int _state_window_focusedContent = default;
            private static bool _state_window_focusedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#stateListAnimator"/>
            /// </summary>
            public static int stateListAnimator { get { if (!_stateListAnimatorReady) { _stateListAnimatorContent = SGetField<int>(LocalBridgeClazz, "stateListAnimator"); _stateListAnimatorReady = true; } return _stateListAnimatorContent; } }
            private static int _stateListAnimatorContent = default;
            private static bool _stateListAnimatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#stateNotNeeded"/>
            /// </summary>
            public static int stateNotNeeded { get { if (!_stateNotNeededReady) { _stateNotNeededContent = SGetField<int>(LocalBridgeClazz, "stateNotNeeded"); _stateNotNeededReady = true; } return _stateNotNeededContent; } }
            private static int _stateNotNeededContent = default;
            private static bool _stateNotNeededReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#staticWallpaperPreview"/>
            /// </summary>
            public static int staticWallpaperPreview { get { if (!_staticWallpaperPreviewReady) { _staticWallpaperPreviewContent = SGetField<int>(LocalBridgeClazz, "staticWallpaperPreview"); _staticWallpaperPreviewReady = true; } return _staticWallpaperPreviewContent; } }
            private static int _staticWallpaperPreviewContent = default;
            private static bool _staticWallpaperPreviewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#statusBarColor"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int statusBarColor { get { if (!_statusBarColorReady) { _statusBarColorContent = SGetField<int>(LocalBridgeClazz, "statusBarColor"); _statusBarColorReady = true; } return _statusBarColorContent; } }
            private static int _statusBarColorContent = default;
            private static bool _statusBarColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#stepSize"/>
            /// </summary>
            public static int stepSize { get { if (!_stepSizeReady) { _stepSizeContent = SGetField<int>(LocalBridgeClazz, "stepSize"); _stepSizeReady = true; } return _stepSizeContent; } }
            private static int _stepSizeContent = default;
            private static bool _stepSizeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#stopWithTask"/>
            /// </summary>
            public static int stopWithTask { get { if (!_stopWithTaskReady) { _stopWithTaskContent = SGetField<int>(LocalBridgeClazz, "stopWithTask"); _stopWithTaskReady = true; } return _stopWithTaskContent; } }
            private static int _stopWithTaskContent = default;
            private static bool _stopWithTaskReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#streamType"/>
            /// </summary>
            public static int streamType { get { if (!_streamTypeReady) { _streamTypeContent = SGetField<int>(LocalBridgeClazz, "streamType"); _streamTypeReady = true; } return _streamTypeContent; } }
            private static int _streamTypeContent = default;
            private static bool _streamTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#stretchColumns"/>
            /// </summary>
            public static int stretchColumns { get { if (!_stretchColumnsReady) { _stretchColumnsContent = SGetField<int>(LocalBridgeClazz, "stretchColumns"); _stretchColumnsReady = true; } return _stretchColumnsContent; } }
            private static int _stretchColumnsContent = default;
            private static bool _stretchColumnsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#stretchMode"/>
            /// </summary>
            public static int stretchMode { get { if (!_stretchModeReady) { _stretchModeContent = SGetField<int>(LocalBridgeClazz, "stretchMode"); _stretchModeReady = true; } return _stretchModeContent; } }
            private static int _stretchModeContent = default;
            private static bool _stretchModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#strokeAlpha"/>
            /// </summary>
            public static int strokeAlpha { get { if (!_strokeAlphaReady) { _strokeAlphaContent = SGetField<int>(LocalBridgeClazz, "strokeAlpha"); _strokeAlphaReady = true; } return _strokeAlphaContent; } }
            private static int _strokeAlphaContent = default;
            private static bool _strokeAlphaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#strokeColor"/>
            /// </summary>
            public static int strokeColor { get { if (!_strokeColorReady) { _strokeColorContent = SGetField<int>(LocalBridgeClazz, "strokeColor"); _strokeColorReady = true; } return _strokeColorContent; } }
            private static int _strokeColorContent = default;
            private static bool _strokeColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#strokeLineCap"/>
            /// </summary>
            public static int strokeLineCap { get { if (!_strokeLineCapReady) { _strokeLineCapContent = SGetField<int>(LocalBridgeClazz, "strokeLineCap"); _strokeLineCapReady = true; } return _strokeLineCapContent; } }
            private static int _strokeLineCapContent = default;
            private static bool _strokeLineCapReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#strokeLineJoin"/>
            /// </summary>
            public static int strokeLineJoin { get { if (!_strokeLineJoinReady) { _strokeLineJoinContent = SGetField<int>(LocalBridgeClazz, "strokeLineJoin"); _strokeLineJoinReady = true; } return _strokeLineJoinContent; } }
            private static int _strokeLineJoinContent = default;
            private static bool _strokeLineJoinReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#strokeMiterLimit"/>
            /// </summary>
            public static int strokeMiterLimit { get { if (!_strokeMiterLimitReady) { _strokeMiterLimitContent = SGetField<int>(LocalBridgeClazz, "strokeMiterLimit"); _strokeMiterLimitReady = true; } return _strokeMiterLimitContent; } }
            private static int _strokeMiterLimitContent = default;
            private static bool _strokeMiterLimitReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#strokeWidth"/>
            /// </summary>
            public static int strokeWidth { get { if (!_strokeWidthReady) { _strokeWidthContent = SGetField<int>(LocalBridgeClazz, "strokeWidth"); _strokeWidthReady = true; } return _strokeWidthContent; } }
            private static int _strokeWidthContent = default;
            private static bool _strokeWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#stylusHandwritingSettingsActivity"/>
            /// </summary>
            public static int stylusHandwritingSettingsActivity { get { if (!_stylusHandwritingSettingsActivityReady) { _stylusHandwritingSettingsActivityContent = SGetField<int>(LocalBridgeClazz, "stylusHandwritingSettingsActivity"); _stylusHandwritingSettingsActivityReady = true; } return _stylusHandwritingSettingsActivityContent; } }
            private static int _stylusHandwritingSettingsActivityContent = default;
            private static bool _stylusHandwritingSettingsActivityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#subMenuArrow"/>
            /// </summary>
            public static int subMenuArrow { get { if (!_subMenuArrowReady) { _subMenuArrowContent = SGetField<int>(LocalBridgeClazz, "subMenuArrow"); _subMenuArrowReady = true; } return _subMenuArrowContent; } }
            private static int _subMenuArrowContent = default;
            private static bool _subMenuArrowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#submitBackground"/>
            /// </summary>
            public static int submitBackground { get { if (!_submitBackgroundReady) { _submitBackgroundContent = SGetField<int>(LocalBridgeClazz, "submitBackground"); _submitBackgroundReady = true; } return _submitBackgroundContent; } }
            private static int _submitBackgroundContent = default;
            private static bool _submitBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#subtitle"/>
            /// </summary>
            public static int subtitle { get { if (!_subtitleReady) { _subtitleContent = SGetField<int>(LocalBridgeClazz, "subtitle"); _subtitleReady = true; } return _subtitleContent; } }
            private static int _subtitleContent = default;
            private static bool _subtitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#subtitleTextAppearance"/>
            /// </summary>
            public static int subtitleTextAppearance { get { if (!_subtitleTextAppearanceReady) { _subtitleTextAppearanceContent = SGetField<int>(LocalBridgeClazz, "subtitleTextAppearance"); _subtitleTextAppearanceReady = true; } return _subtitleTextAppearanceContent; } }
            private static int _subtitleTextAppearanceContent = default;
            private static bool _subtitleTextAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#subtitleTextColor"/>
            /// </summary>
            public static int subtitleTextColor { get { if (!_subtitleTextColorReady) { _subtitleTextColorContent = SGetField<int>(LocalBridgeClazz, "subtitleTextColor"); _subtitleTextColorReady = true; } return _subtitleTextColorContent; } }
            private static int _subtitleTextColorContent = default;
            private static bool _subtitleTextColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#subtitleTextStyle"/>
            /// </summary>
            public static int subtitleTextStyle { get { if (!_subtitleTextStyleReady) { _subtitleTextStyleContent = SGetField<int>(LocalBridgeClazz, "subtitleTextStyle"); _subtitleTextStyleReady = true; } return _subtitleTextStyleContent; } }
            private static int _subtitleTextStyleContent = default;
            private static bool _subtitleTextStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#subtypeExtraValue"/>
            /// </summary>
            public static int subtypeExtraValue { get { if (!_subtypeExtraValueReady) { _subtypeExtraValueContent = SGetField<int>(LocalBridgeClazz, "subtypeExtraValue"); _subtypeExtraValueReady = true; } return _subtypeExtraValueContent; } }
            private static int _subtypeExtraValueContent = default;
            private static bool _subtypeExtraValueReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#subtypeId"/>
            /// </summary>
            public static int subtypeId { get { if (!_subtypeIdReady) { _subtypeIdContent = SGetField<int>(LocalBridgeClazz, "subtypeId"); _subtypeIdReady = true; } return _subtypeIdContent; } }
            private static int _subtypeIdContent = default;
            private static bool _subtypeIdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#subtypeLocale"/>
            /// </summary>
            public static int subtypeLocale { get { if (!_subtypeLocaleReady) { _subtypeLocaleContent = SGetField<int>(LocalBridgeClazz, "subtypeLocale"); _subtypeLocaleReady = true; } return _subtypeLocaleContent; } }
            private static int _subtypeLocaleContent = default;
            private static bool _subtypeLocaleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#suggestActionMsg"/>
            /// </summary>
            public static int suggestActionMsg { get { if (!_suggestActionMsgReady) { _suggestActionMsgContent = SGetField<int>(LocalBridgeClazz, "suggestActionMsg"); _suggestActionMsgReady = true; } return _suggestActionMsgContent; } }
            private static int _suggestActionMsgContent = default;
            private static bool _suggestActionMsgReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#suggestActionMsgColumn"/>
            /// </summary>
            public static int suggestActionMsgColumn { get { if (!_suggestActionMsgColumnReady) { _suggestActionMsgColumnContent = SGetField<int>(LocalBridgeClazz, "suggestActionMsgColumn"); _suggestActionMsgColumnReady = true; } return _suggestActionMsgColumnContent; } }
            private static int _suggestActionMsgColumnContent = default;
            private static bool _suggestActionMsgColumnReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#suggestionRowLayout"/>
            /// </summary>
            public static int suggestionRowLayout { get { if (!_suggestionRowLayoutReady) { _suggestionRowLayoutContent = SGetField<int>(LocalBridgeClazz, "suggestionRowLayout"); _suggestionRowLayoutReady = true; } return _suggestionRowLayoutContent; } }
            private static int _suggestionRowLayoutContent = default;
            private static bool _suggestionRowLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#summary"/>
            /// </summary>
            public static int summary { get { if (!_summaryReady) { _summaryContent = SGetField<int>(LocalBridgeClazz, "summary"); _summaryReady = true; } return _summaryContent; } }
            private static int _summaryContent = default;
            private static bool _summaryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#summaryColumn"/>
            /// </summary>
            public static int summaryColumn { get { if (!_summaryColumnReady) { _summaryColumnContent = SGetField<int>(LocalBridgeClazz, "summaryColumn"); _summaryColumnReady = true; } return _summaryColumnContent; } }
            private static int _summaryColumnContent = default;
            private static bool _summaryColumnReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#summaryOff"/>
            /// </summary>
            public static int summaryOff { get { if (!_summaryOffReady) { _summaryOffContent = SGetField<int>(LocalBridgeClazz, "summaryOff"); _summaryOffReady = true; } return _summaryOffContent; } }
            private static int _summaryOffContent = default;
            private static bool _summaryOffReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#summaryOn"/>
            /// </summary>
            public static int summaryOn { get { if (!_summaryOnReady) { _summaryOnContent = SGetField<int>(LocalBridgeClazz, "summaryOn"); _summaryOnReady = true; } return _summaryOnContent; } }
            private static int _summaryOnContent = default;
            private static bool _summaryOnReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#supportedTypes"/>
            /// </summary>
            public static int supportedTypes { get { if (!_supportedTypesReady) { _supportedTypesContent = SGetField<int>(LocalBridgeClazz, "supportedTypes"); _supportedTypesReady = true; } return _supportedTypesContent; } }
            private static int _supportedTypesContent = default;
            private static bool _supportedTypesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#supportsAssist"/>
            /// </summary>
            public static int supportsAssist { get { if (!_supportsAssistReady) { _supportsAssistContent = SGetField<int>(LocalBridgeClazz, "supportsAssist"); _supportsAssistReady = true; } return _supportsAssistContent; } }
            private static int _supportsAssistContent = default;
            private static bool _supportsAssistReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#supportsBatteryGameMode"/>
            /// </summary>
            public static int supportsBatteryGameMode { get { if (!_supportsBatteryGameModeReady) { _supportsBatteryGameModeContent = SGetField<int>(LocalBridgeClazz, "supportsBatteryGameMode"); _supportsBatteryGameModeReady = true; } return _supportsBatteryGameModeContent; } }
            private static int _supportsBatteryGameModeContent = default;
            private static bool _supportsBatteryGameModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#supportsConnectionlessStylusHandwriting"/>
            /// </summary>
            public static int supportsConnectionlessStylusHandwriting { get { if (!_supportsConnectionlessStylusHandwritingReady) { _supportsConnectionlessStylusHandwritingContent = SGetField<int>(LocalBridgeClazz, "supportsConnectionlessStylusHandwriting"); _supportsConnectionlessStylusHandwritingReady = true; } return _supportsConnectionlessStylusHandwritingContent; } }
            private static int _supportsConnectionlessStylusHandwritingContent = default;
            private static bool _supportsConnectionlessStylusHandwritingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#supportsInlineSuggestions"/>
            /// </summary>
            public static int supportsInlineSuggestions { get { if (!_supportsInlineSuggestionsReady) { _supportsInlineSuggestionsContent = SGetField<int>(LocalBridgeClazz, "supportsInlineSuggestions"); _supportsInlineSuggestionsReady = true; } return _supportsInlineSuggestionsContent; } }
            private static int _supportsInlineSuggestionsContent = default;
            private static bool _supportsInlineSuggestionsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#supportsInlineSuggestionsWithTouchExploration"/>
            /// </summary>
            public static int supportsInlineSuggestionsWithTouchExploration { get { if (!_supportsInlineSuggestionsWithTouchExplorationReady) { _supportsInlineSuggestionsWithTouchExplorationContent = SGetField<int>(LocalBridgeClazz, "supportsInlineSuggestionsWithTouchExploration"); _supportsInlineSuggestionsWithTouchExplorationReady = true; } return _supportsInlineSuggestionsWithTouchExplorationContent; } }
            private static int _supportsInlineSuggestionsWithTouchExplorationContent = default;
            private static bool _supportsInlineSuggestionsWithTouchExplorationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#supportsLaunchVoiceAssistFromKeyguard"/>
            /// </summary>
            public static int supportsLaunchVoiceAssistFromKeyguard { get { if (!_supportsLaunchVoiceAssistFromKeyguardReady) { _supportsLaunchVoiceAssistFromKeyguardContent = SGetField<int>(LocalBridgeClazz, "supportsLaunchVoiceAssistFromKeyguard"); _supportsLaunchVoiceAssistFromKeyguardReady = true; } return _supportsLaunchVoiceAssistFromKeyguardContent; } }
            private static int _supportsLaunchVoiceAssistFromKeyguardContent = default;
            private static bool _supportsLaunchVoiceAssistFromKeyguardReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#supportsLocalInteraction"/>
            /// </summary>
            public static int supportsLocalInteraction { get { if (!_supportsLocalInteractionReady) { _supportsLocalInteractionContent = SGetField<int>(LocalBridgeClazz, "supportsLocalInteraction"); _supportsLocalInteractionReady = true; } return _supportsLocalInteractionContent; } }
            private static int _supportsLocalInteractionContent = default;
            private static bool _supportsLocalInteractionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#supportsMultipleDisplays"/>
            /// </summary>
            public static int supportsMultipleDisplays { get { if (!_supportsMultipleDisplaysReady) { _supportsMultipleDisplaysContent = SGetField<int>(LocalBridgeClazz, "supportsMultipleDisplays"); _supportsMultipleDisplaysReady = true; } return _supportsMultipleDisplaysContent; } }
            private static int _supportsMultipleDisplaysContent = default;
            private static bool _supportsMultipleDisplaysReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#supportsPerformanceGameMode"/>
            /// </summary>
            public static int supportsPerformanceGameMode { get { if (!_supportsPerformanceGameModeReady) { _supportsPerformanceGameModeContent = SGetField<int>(LocalBridgeClazz, "supportsPerformanceGameMode"); _supportsPerformanceGameModeReady = true; } return _supportsPerformanceGameModeContent; } }
            private static int _supportsPerformanceGameModeContent = default;
            private static bool _supportsPerformanceGameModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#supportsPictureInPicture"/>
            /// </summary>
            public static int supportsPictureInPicture { get { if (!_supportsPictureInPictureReady) { _supportsPictureInPictureContent = SGetField<int>(LocalBridgeClazz, "supportsPictureInPicture"); _supportsPictureInPictureReady = true; } return _supportsPictureInPictureContent; } }
            private static int _supportsPictureInPictureContent = default;
            private static bool _supportsPictureInPictureReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#supportsRtl"/>
            /// </summary>
            public static int supportsRtl { get { if (!_supportsRtlReady) { _supportsRtlContent = SGetField<int>(LocalBridgeClazz, "supportsRtl"); _supportsRtlReady = true; } return _supportsRtlContent; } }
            private static int _supportsRtlContent = default;
            private static bool _supportsRtlReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#supportsStylusHandwriting"/>
            /// </summary>
            public static int supportsStylusHandwriting { get { if (!_supportsStylusHandwritingReady) { _supportsStylusHandwritingContent = SGetField<int>(LocalBridgeClazz, "supportsStylusHandwriting"); _supportsStylusHandwritingReady = true; } return _supportsStylusHandwritingContent; } }
            private static int _supportsStylusHandwritingContent = default;
            private static bool _supportsStylusHandwritingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#supportsSwitchingToNextInputMethod"/>
            /// </summary>
            public static int supportsSwitchingToNextInputMethod { get { if (!_supportsSwitchingToNextInputMethodReady) { _supportsSwitchingToNextInputMethodContent = SGetField<int>(LocalBridgeClazz, "supportsSwitchingToNextInputMethod"); _supportsSwitchingToNextInputMethodReady = true; } return _supportsSwitchingToNextInputMethodContent; } }
            private static int _supportsSwitchingToNextInputMethodContent = default;
            private static bool _supportsSwitchingToNextInputMethodReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#supportsUploading"/>
            /// </summary>
            public static int supportsUploading { get { if (!_supportsUploadingReady) { _supportsUploadingContent = SGetField<int>(LocalBridgeClazz, "supportsUploading"); _supportsUploadingReady = true; } return _supportsUploadingContent; } }
            private static int _supportsUploadingContent = default;
            private static bool _supportsUploadingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#suppressesSpellChecker"/>
            /// </summary>
            public static int suppressesSpellChecker { get { if (!_suppressesSpellCheckerReady) { _suppressesSpellCheckerContent = SGetField<int>(LocalBridgeClazz, "suppressesSpellChecker"); _suppressesSpellCheckerReady = true; } return _suppressesSpellCheckerContent; } }
            private static int _suppressesSpellCheckerContent = default;
            private static bool _suppressesSpellCheckerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#switchMinWidth"/>
            /// </summary>
            public static int switchMinWidth { get { if (!_switchMinWidthReady) { _switchMinWidthContent = SGetField<int>(LocalBridgeClazz, "switchMinWidth"); _switchMinWidthReady = true; } return _switchMinWidthContent; } }
            private static int _switchMinWidthContent = default;
            private static bool _switchMinWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#switchPadding"/>
            /// </summary>
            public static int switchPadding { get { if (!_switchPaddingReady) { _switchPaddingContent = SGetField<int>(LocalBridgeClazz, "switchPadding"); _switchPaddingReady = true; } return _switchPaddingContent; } }
            private static int _switchPaddingContent = default;
            private static bool _switchPaddingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#switchPreferenceStyle"/>
            /// </summary>
            public static int switchPreferenceStyle { get { if (!_switchPreferenceStyleReady) { _switchPreferenceStyleContent = SGetField<int>(LocalBridgeClazz, "switchPreferenceStyle"); _switchPreferenceStyleReady = true; } return _switchPreferenceStyleContent; } }
            private static int _switchPreferenceStyleContent = default;
            private static bool _switchPreferenceStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#switchStyle"/>
            /// </summary>
            public static int switchStyle { get { if (!_switchStyleReady) { _switchStyleContent = SGetField<int>(LocalBridgeClazz, "switchStyle"); _switchStyleReady = true; } return _switchStyleContent; } }
            private static int _switchStyleContent = default;
            private static bool _switchStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#switchTextAppearance"/>
            /// </summary>
            public static int switchTextAppearance { get { if (!_switchTextAppearanceReady) { _switchTextAppearanceContent = SGetField<int>(LocalBridgeClazz, "switchTextAppearance"); _switchTextAppearanceReady = true; } return _switchTextAppearanceContent; } }
            private static int _switchTextAppearanceContent = default;
            private static bool _switchTextAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#switchTextOff"/>
            /// </summary>
            public static int switchTextOff { get { if (!_switchTextOffReady) { _switchTextOffContent = SGetField<int>(LocalBridgeClazz, "switchTextOff"); _switchTextOffReady = true; } return _switchTextOffContent; } }
            private static int _switchTextOffContent = default;
            private static bool _switchTextOffReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#switchTextOn"/>
            /// </summary>
            public static int switchTextOn { get { if (!_switchTextOnReady) { _switchTextOnContent = SGetField<int>(LocalBridgeClazz, "switchTextOn"); _switchTextOnReady = true; } return _switchTextOnContent; } }
            private static int _switchTextOnContent = default;
            private static bool _switchTextOnReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#syncable"/>
            /// </summary>
            public static int syncable { get { if (!_syncableReady) { _syncableContent = SGetField<int>(LocalBridgeClazz, "syncable"); _syncableReady = true; } return _syncableContent; } }
            private static int _syncableContent = default;
            private static bool _syncableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#systemUserOnly"/>
            /// </summary>
            public static int systemUserOnly { get { if (!_systemUserOnlyReady) { _systemUserOnlyContent = SGetField<int>(LocalBridgeClazz, "systemUserOnly"); _systemUserOnlyReady = true; } return _systemUserOnlyContent; } }
            private static int _systemUserOnlyContent = default;
            private static bool _systemUserOnlyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tabStripEnabled"/>
            /// </summary>
            public static int tabStripEnabled { get { if (!_tabStripEnabledReady) { _tabStripEnabledContent = SGetField<int>(LocalBridgeClazz, "tabStripEnabled"); _tabStripEnabledReady = true; } return _tabStripEnabledContent; } }
            private static int _tabStripEnabledContent = default;
            private static bool _tabStripEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tabStripLeft"/>
            /// </summary>
            public static int tabStripLeft { get { if (!_tabStripLeftReady) { _tabStripLeftContent = SGetField<int>(LocalBridgeClazz, "tabStripLeft"); _tabStripLeftReady = true; } return _tabStripLeftContent; } }
            private static int _tabStripLeftContent = default;
            private static bool _tabStripLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tabStripRight"/>
            /// </summary>
            public static int tabStripRight { get { if (!_tabStripRightReady) { _tabStripRightContent = SGetField<int>(LocalBridgeClazz, "tabStripRight"); _tabStripRightReady = true; } return _tabStripRightContent; } }
            private static int _tabStripRightContent = default;
            private static bool _tabStripRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tabWidgetStyle"/>
            /// </summary>
            public static int tabWidgetStyle { get { if (!_tabWidgetStyleReady) { _tabWidgetStyleContent = SGetField<int>(LocalBridgeClazz, "tabWidgetStyle"); _tabWidgetStyleReady = true; } return _tabWidgetStyleContent; } }
            private static int _tabWidgetStyleContent = default;
            private static bool _tabWidgetStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tag"/>
            /// </summary>
            public static int tag { get { if (!_tagReady) { _tagContent = SGetField<int>(LocalBridgeClazz, "tag"); _tagReady = true; } return _tagContent; } }
            private static int _tagContent = default;
            private static bool _tagReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#targetActivity"/>
            /// </summary>
            public static int targetActivity { get { if (!_targetActivityReady) { _targetActivityContent = SGetField<int>(LocalBridgeClazz, "targetActivity"); _targetActivityReady = true; } return _targetActivityContent; } }
            private static int _targetActivityContent = default;
            private static bool _targetActivityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#targetCellHeight"/>
            /// </summary>
            public static int targetCellHeight { get { if (!_targetCellHeightReady) { _targetCellHeightContent = SGetField<int>(LocalBridgeClazz, "targetCellHeight"); _targetCellHeightReady = true; } return _targetCellHeightContent; } }
            private static int _targetCellHeightContent = default;
            private static bool _targetCellHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#targetCellWidth"/>
            /// </summary>
            public static int targetCellWidth { get { if (!_targetCellWidthReady) { _targetCellWidthContent = SGetField<int>(LocalBridgeClazz, "targetCellWidth"); _targetCellWidthReady = true; } return _targetCellWidthContent; } }
            private static int _targetCellWidthContent = default;
            private static bool _targetCellWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#targetClass"/>
            /// </summary>
            public static int targetClass { get { if (!_targetClassReady) { _targetClassContent = SGetField<int>(LocalBridgeClazz, "targetClass"); _targetClassReady = true; } return _targetClassContent; } }
            private static int _targetClassContent = default;
            private static bool _targetClassReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#targetDescriptions"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int targetDescriptions { get { if (!_targetDescriptionsReady) { _targetDescriptionsContent = SGetField<int>(LocalBridgeClazz, "targetDescriptions"); _targetDescriptionsReady = true; } return _targetDescriptionsContent; } }
            private static int _targetDescriptionsContent = default;
            private static bool _targetDescriptionsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#targetId"/>
            /// </summary>
            public static int targetId { get { if (!_targetIdReady) { _targetIdContent = SGetField<int>(LocalBridgeClazz, "targetId"); _targetIdReady = true; } return _targetIdContent; } }
            private static int _targetIdContent = default;
            private static bool _targetIdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#targetName"/>
            /// </summary>
            public static int targetName { get { if (!_targetNameReady) { _targetNameContent = SGetField<int>(LocalBridgeClazz, "targetName"); _targetNameReady = true; } return _targetNameContent; } }
            private static int _targetNameContent = default;
            private static bool _targetNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#targetPackage"/>
            /// </summary>
            public static int targetPackage { get { if (!_targetPackageReady) { _targetPackageContent = SGetField<int>(LocalBridgeClazz, "targetPackage"); _targetPackageReady = true; } return _targetPackageContent; } }
            private static int _targetPackageContent = default;
            private static bool _targetPackageReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#targetProcesses"/>
            /// </summary>
            public static int targetProcesses { get { if (!_targetProcessesReady) { _targetProcessesContent = SGetField<int>(LocalBridgeClazz, "targetProcesses"); _targetProcessesReady = true; } return _targetProcessesContent; } }
            private static int _targetProcessesContent = default;
            private static bool _targetProcessesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#targetSandboxVersion"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int targetSandboxVersion { get { if (!_targetSandboxVersionReady) { _targetSandboxVersionContent = SGetField<int>(LocalBridgeClazz, "targetSandboxVersion"); _targetSandboxVersionReady = true; } return _targetSandboxVersionContent; } }
            private static int _targetSandboxVersionContent = default;
            private static bool _targetSandboxVersionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#targetSdkVersion"/>
            /// </summary>
            public static int targetSdkVersion { get { if (!_targetSdkVersionReady) { _targetSdkVersionContent = SGetField<int>(LocalBridgeClazz, "targetSdkVersion"); _targetSdkVersionReady = true; } return _targetSdkVersionContent; } }
            private static int _targetSdkVersionContent = default;
            private static bool _targetSdkVersionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#taskAffinity"/>
            /// </summary>
            public static int taskAffinity { get { if (!_taskAffinityReady) { _taskAffinityContent = SGetField<int>(LocalBridgeClazz, "taskAffinity"); _taskAffinityReady = true; } return _taskAffinityContent; } }
            private static int _taskAffinityContent = default;
            private static bool _taskAffinityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#taskCloseEnterAnimation"/>
            /// </summary>
            public static int taskCloseEnterAnimation { get { if (!_taskCloseEnterAnimationReady) { _taskCloseEnterAnimationContent = SGetField<int>(LocalBridgeClazz, "taskCloseEnterAnimation"); _taskCloseEnterAnimationReady = true; } return _taskCloseEnterAnimationContent; } }
            private static int _taskCloseEnterAnimationContent = default;
            private static bool _taskCloseEnterAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#taskCloseExitAnimation"/>
            /// </summary>
            public static int taskCloseExitAnimation { get { if (!_taskCloseExitAnimationReady) { _taskCloseExitAnimationContent = SGetField<int>(LocalBridgeClazz, "taskCloseExitAnimation"); _taskCloseExitAnimationReady = true; } return _taskCloseExitAnimationContent; } }
            private static int _taskCloseExitAnimationContent = default;
            private static bool _taskCloseExitAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#taskOpenEnterAnimation"/>
            /// </summary>
            public static int taskOpenEnterAnimation { get { if (!_taskOpenEnterAnimationReady) { _taskOpenEnterAnimationContent = SGetField<int>(LocalBridgeClazz, "taskOpenEnterAnimation"); _taskOpenEnterAnimationReady = true; } return _taskOpenEnterAnimationContent; } }
            private static int _taskOpenEnterAnimationContent = default;
            private static bool _taskOpenEnterAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#taskOpenExitAnimation"/>
            /// </summary>
            public static int taskOpenExitAnimation { get { if (!_taskOpenExitAnimationReady) { _taskOpenExitAnimationContent = SGetField<int>(LocalBridgeClazz, "taskOpenExitAnimation"); _taskOpenExitAnimationReady = true; } return _taskOpenExitAnimationContent; } }
            private static int _taskOpenExitAnimationContent = default;
            private static bool _taskOpenExitAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#taskToBackEnterAnimation"/>
            /// </summary>
            public static int taskToBackEnterAnimation { get { if (!_taskToBackEnterAnimationReady) { _taskToBackEnterAnimationContent = SGetField<int>(LocalBridgeClazz, "taskToBackEnterAnimation"); _taskToBackEnterAnimationReady = true; } return _taskToBackEnterAnimationContent; } }
            private static int _taskToBackEnterAnimationContent = default;
            private static bool _taskToBackEnterAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#taskToBackExitAnimation"/>
            /// </summary>
            public static int taskToBackExitAnimation { get { if (!_taskToBackExitAnimationReady) { _taskToBackExitAnimationContent = SGetField<int>(LocalBridgeClazz, "taskToBackExitAnimation"); _taskToBackExitAnimationReady = true; } return _taskToBackExitAnimationContent; } }
            private static int _taskToBackExitAnimationContent = default;
            private static bool _taskToBackExitAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#taskToFrontEnterAnimation"/>
            /// </summary>
            public static int taskToFrontEnterAnimation { get { if (!_taskToFrontEnterAnimationReady) { _taskToFrontEnterAnimationContent = SGetField<int>(LocalBridgeClazz, "taskToFrontEnterAnimation"); _taskToFrontEnterAnimationReady = true; } return _taskToFrontEnterAnimationContent; } }
            private static int _taskToFrontEnterAnimationContent = default;
            private static bool _taskToFrontEnterAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#taskToFrontExitAnimation"/>
            /// </summary>
            public static int taskToFrontExitAnimation { get { if (!_taskToFrontExitAnimationReady) { _taskToFrontExitAnimationContent = SGetField<int>(LocalBridgeClazz, "taskToFrontExitAnimation"); _taskToFrontExitAnimationReady = true; } return _taskToFrontExitAnimationContent; } }
            private static int _taskToFrontExitAnimationContent = default;
            private static bool _taskToFrontExitAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tension"/>
            /// </summary>
            public static int tension { get { if (!_tensionReady) { _tensionContent = SGetField<int>(LocalBridgeClazz, "tension"); _tensionReady = true; } return _tensionContent; } }
            private static int _tensionContent = default;
            private static bool _tensionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#testOnly"/>
            /// </summary>
            public static int testOnly { get { if (!_testOnlyReady) { _testOnlyContent = SGetField<int>(LocalBridgeClazz, "testOnly"); _testOnlyReady = true; } return _testOnlyContent; } }
            private static int _testOnlyContent = default;
            private static bool _testOnlyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#text"/>
            /// </summary>
            public static int text { get { if (!_textReady) { _textContent = SGetField<int>(LocalBridgeClazz, "text"); _textReady = true; } return _textContent; } }
            private static int _textContent = default;
            private static bool _textReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAlignment"/>
            /// </summary>
            public static int textAlignment { get { if (!_textAlignmentReady) { _textAlignmentContent = SGetField<int>(LocalBridgeClazz, "textAlignment"); _textAlignmentReady = true; } return _textAlignmentContent; } }
            private static int _textAlignmentContent = default;
            private static bool _textAlignmentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAllCaps"/>
            /// </summary>
            public static int textAllCaps { get { if (!_textAllCapsReady) { _textAllCapsContent = SGetField<int>(LocalBridgeClazz, "textAllCaps"); _textAllCapsReady = true; } return _textAllCapsContent; } }
            private static int _textAllCapsContent = default;
            private static bool _textAllCapsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearance"/>
            /// </summary>
            public static int textAppearance { get { if (!_textAppearanceReady) { _textAppearanceContent = SGetField<int>(LocalBridgeClazz, "textAppearance"); _textAppearanceReady = true; } return _textAppearanceContent; } }
            private static int _textAppearanceContent = default;
            private static bool _textAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearanceButton"/>
            /// </summary>
            public static int textAppearanceButton { get { if (!_textAppearanceButtonReady) { _textAppearanceButtonContent = SGetField<int>(LocalBridgeClazz, "textAppearanceButton"); _textAppearanceButtonReady = true; } return _textAppearanceButtonContent; } }
            private static int _textAppearanceButtonContent = default;
            private static bool _textAppearanceButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearanceInverse"/>
            /// </summary>
            public static int textAppearanceInverse { get { if (!_textAppearanceInverseReady) { _textAppearanceInverseContent = SGetField<int>(LocalBridgeClazz, "textAppearanceInverse"); _textAppearanceInverseReady = true; } return _textAppearanceInverseContent; } }
            private static int _textAppearanceInverseContent = default;
            private static bool _textAppearanceInverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearanceLarge"/>
            /// </summary>
            public static int textAppearanceLarge { get { if (!_textAppearanceLargeReady) { _textAppearanceLargeContent = SGetField<int>(LocalBridgeClazz, "textAppearanceLarge"); _textAppearanceLargeReady = true; } return _textAppearanceLargeContent; } }
            private static int _textAppearanceLargeContent = default;
            private static bool _textAppearanceLargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearanceLargeInverse"/>
            /// </summary>
            public static int textAppearanceLargeInverse { get { if (!_textAppearanceLargeInverseReady) { _textAppearanceLargeInverseContent = SGetField<int>(LocalBridgeClazz, "textAppearanceLargeInverse"); _textAppearanceLargeInverseReady = true; } return _textAppearanceLargeInverseContent; } }
            private static int _textAppearanceLargeInverseContent = default;
            private static bool _textAppearanceLargeInverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearanceLargePopupMenu"/>
            /// </summary>
            public static int textAppearanceLargePopupMenu { get { if (!_textAppearanceLargePopupMenuReady) { _textAppearanceLargePopupMenuContent = SGetField<int>(LocalBridgeClazz, "textAppearanceLargePopupMenu"); _textAppearanceLargePopupMenuReady = true; } return _textAppearanceLargePopupMenuContent; } }
            private static int _textAppearanceLargePopupMenuContent = default;
            private static bool _textAppearanceLargePopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearanceListItem"/>
            /// </summary>
            public static int textAppearanceListItem { get { if (!_textAppearanceListItemReady) { _textAppearanceListItemContent = SGetField<int>(LocalBridgeClazz, "textAppearanceListItem"); _textAppearanceListItemReady = true; } return _textAppearanceListItemContent; } }
            private static int _textAppearanceListItemContent = default;
            private static bool _textAppearanceListItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearanceListItemSecondary"/>
            /// </summary>
            public static int textAppearanceListItemSecondary { get { if (!_textAppearanceListItemSecondaryReady) { _textAppearanceListItemSecondaryContent = SGetField<int>(LocalBridgeClazz, "textAppearanceListItemSecondary"); _textAppearanceListItemSecondaryReady = true; } return _textAppearanceListItemSecondaryContent; } }
            private static int _textAppearanceListItemSecondaryContent = default;
            private static bool _textAppearanceListItemSecondaryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearanceListItemSmall"/>
            /// </summary>
            public static int textAppearanceListItemSmall { get { if (!_textAppearanceListItemSmallReady) { _textAppearanceListItemSmallContent = SGetField<int>(LocalBridgeClazz, "textAppearanceListItemSmall"); _textAppearanceListItemSmallReady = true; } return _textAppearanceListItemSmallContent; } }
            private static int _textAppearanceListItemSmallContent = default;
            private static bool _textAppearanceListItemSmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearanceMedium"/>
            /// </summary>
            public static int textAppearanceMedium { get { if (!_textAppearanceMediumReady) { _textAppearanceMediumContent = SGetField<int>(LocalBridgeClazz, "textAppearanceMedium"); _textAppearanceMediumReady = true; } return _textAppearanceMediumContent; } }
            private static int _textAppearanceMediumContent = default;
            private static bool _textAppearanceMediumReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearanceMediumInverse"/>
            /// </summary>
            public static int textAppearanceMediumInverse { get { if (!_textAppearanceMediumInverseReady) { _textAppearanceMediumInverseContent = SGetField<int>(LocalBridgeClazz, "textAppearanceMediumInverse"); _textAppearanceMediumInverseReady = true; } return _textAppearanceMediumInverseContent; } }
            private static int _textAppearanceMediumInverseContent = default;
            private static bool _textAppearanceMediumInverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearancePopupMenuHeader"/>
            /// </summary>
            public static int textAppearancePopupMenuHeader { get { if (!_textAppearancePopupMenuHeaderReady) { _textAppearancePopupMenuHeaderContent = SGetField<int>(LocalBridgeClazz, "textAppearancePopupMenuHeader"); _textAppearancePopupMenuHeaderReady = true; } return _textAppearancePopupMenuHeaderContent; } }
            private static int _textAppearancePopupMenuHeaderContent = default;
            private static bool _textAppearancePopupMenuHeaderReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearanceSearchResultSubtitle"/>
            /// </summary>
            public static int textAppearanceSearchResultSubtitle { get { if (!_textAppearanceSearchResultSubtitleReady) { _textAppearanceSearchResultSubtitleContent = SGetField<int>(LocalBridgeClazz, "textAppearanceSearchResultSubtitle"); _textAppearanceSearchResultSubtitleReady = true; } return _textAppearanceSearchResultSubtitleContent; } }
            private static int _textAppearanceSearchResultSubtitleContent = default;
            private static bool _textAppearanceSearchResultSubtitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearanceSearchResultTitle"/>
            /// </summary>
            public static int textAppearanceSearchResultTitle { get { if (!_textAppearanceSearchResultTitleReady) { _textAppearanceSearchResultTitleContent = SGetField<int>(LocalBridgeClazz, "textAppearanceSearchResultTitle"); _textAppearanceSearchResultTitleReady = true; } return _textAppearanceSearchResultTitleContent; } }
            private static int _textAppearanceSearchResultTitleContent = default;
            private static bool _textAppearanceSearchResultTitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearanceSmall"/>
            /// </summary>
            public static int textAppearanceSmall { get { if (!_textAppearanceSmallReady) { _textAppearanceSmallContent = SGetField<int>(LocalBridgeClazz, "textAppearanceSmall"); _textAppearanceSmallReady = true; } return _textAppearanceSmallContent; } }
            private static int _textAppearanceSmallContent = default;
            private static bool _textAppearanceSmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearanceSmallInverse"/>
            /// </summary>
            public static int textAppearanceSmallInverse { get { if (!_textAppearanceSmallInverseReady) { _textAppearanceSmallInverseContent = SGetField<int>(LocalBridgeClazz, "textAppearanceSmallInverse"); _textAppearanceSmallInverseReady = true; } return _textAppearanceSmallInverseContent; } }
            private static int _textAppearanceSmallInverseContent = default;
            private static bool _textAppearanceSmallInverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textAppearanceSmallPopupMenu"/>
            /// </summary>
            public static int textAppearanceSmallPopupMenu { get { if (!_textAppearanceSmallPopupMenuReady) { _textAppearanceSmallPopupMenuContent = SGetField<int>(LocalBridgeClazz, "textAppearanceSmallPopupMenu"); _textAppearanceSmallPopupMenuReady = true; } return _textAppearanceSmallPopupMenuContent; } }
            private static int _textAppearanceSmallPopupMenuContent = default;
            private static bool _textAppearanceSmallPopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textCheckMark"/>
            /// </summary>
            public static int textCheckMark { get { if (!_textCheckMarkReady) { _textCheckMarkContent = SGetField<int>(LocalBridgeClazz, "textCheckMark"); _textCheckMarkReady = true; } return _textCheckMarkContent; } }
            private static int _textCheckMarkContent = default;
            private static bool _textCheckMarkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textCheckMarkInverse"/>
            /// </summary>
            public static int textCheckMarkInverse { get { if (!_textCheckMarkInverseReady) { _textCheckMarkInverseContent = SGetField<int>(LocalBridgeClazz, "textCheckMarkInverse"); _textCheckMarkInverseReady = true; } return _textCheckMarkInverseContent; } }
            private static int _textCheckMarkInverseContent = default;
            private static bool _textCheckMarkInverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColor"/>
            /// </summary>
            public static int textColor { get { if (!_textColorReady) { _textColorContent = SGetField<int>(LocalBridgeClazz, "textColor"); _textColorReady = true; } return _textColorContent; } }
            private static int _textColorContent = default;
            private static bool _textColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorAlertDialogListItem"/>
            /// </summary>
            public static int textColorAlertDialogListItem { get { if (!_textColorAlertDialogListItemReady) { _textColorAlertDialogListItemContent = SGetField<int>(LocalBridgeClazz, "textColorAlertDialogListItem"); _textColorAlertDialogListItemReady = true; } return _textColorAlertDialogListItemContent; } }
            private static int _textColorAlertDialogListItemContent = default;
            private static bool _textColorAlertDialogListItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorHighlight"/>
            /// </summary>
            public static int textColorHighlight { get { if (!_textColorHighlightReady) { _textColorHighlightContent = SGetField<int>(LocalBridgeClazz, "textColorHighlight"); _textColorHighlightReady = true; } return _textColorHighlightContent; } }
            private static int _textColorHighlightContent = default;
            private static bool _textColorHighlightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorHighlightInverse"/>
            /// </summary>
            public static int textColorHighlightInverse { get { if (!_textColorHighlightInverseReady) { _textColorHighlightInverseContent = SGetField<int>(LocalBridgeClazz, "textColorHighlightInverse"); _textColorHighlightInverseReady = true; } return _textColorHighlightInverseContent; } }
            private static int _textColorHighlightInverseContent = default;
            private static bool _textColorHighlightInverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorHint"/>
            /// </summary>
            public static int textColorHint { get { if (!_textColorHintReady) { _textColorHintContent = SGetField<int>(LocalBridgeClazz, "textColorHint"); _textColorHintReady = true; } return _textColorHintContent; } }
            private static int _textColorHintContent = default;
            private static bool _textColorHintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorHintInverse"/>
            /// </summary>
            public static int textColorHintInverse { get { if (!_textColorHintInverseReady) { _textColorHintInverseContent = SGetField<int>(LocalBridgeClazz, "textColorHintInverse"); _textColorHintInverseReady = true; } return _textColorHintInverseContent; } }
            private static int _textColorHintInverseContent = default;
            private static bool _textColorHintInverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorLink"/>
            /// </summary>
            public static int textColorLink { get { if (!_textColorLinkReady) { _textColorLinkContent = SGetField<int>(LocalBridgeClazz, "textColorLink"); _textColorLinkReady = true; } return _textColorLinkContent; } }
            private static int _textColorLinkContent = default;
            private static bool _textColorLinkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorLinkInverse"/>
            /// </summary>
            public static int textColorLinkInverse { get { if (!_textColorLinkInverseReady) { _textColorLinkInverseContent = SGetField<int>(LocalBridgeClazz, "textColorLinkInverse"); _textColorLinkInverseReady = true; } return _textColorLinkInverseContent; } }
            private static int _textColorLinkInverseContent = default;
            private static bool _textColorLinkInverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorPrimary"/>
            /// </summary>
            public static int textColorPrimary { get { if (!_textColorPrimaryReady) { _textColorPrimaryContent = SGetField<int>(LocalBridgeClazz, "textColorPrimary"); _textColorPrimaryReady = true; } return _textColorPrimaryContent; } }
            private static int _textColorPrimaryContent = default;
            private static bool _textColorPrimaryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorPrimaryDisableOnly"/>
            /// </summary>
            public static int textColorPrimaryDisableOnly { get { if (!_textColorPrimaryDisableOnlyReady) { _textColorPrimaryDisableOnlyContent = SGetField<int>(LocalBridgeClazz, "textColorPrimaryDisableOnly"); _textColorPrimaryDisableOnlyReady = true; } return _textColorPrimaryDisableOnlyContent; } }
            private static int _textColorPrimaryDisableOnlyContent = default;
            private static bool _textColorPrimaryDisableOnlyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorPrimaryInverse"/>
            /// </summary>
            public static int textColorPrimaryInverse { get { if (!_textColorPrimaryInverseReady) { _textColorPrimaryInverseContent = SGetField<int>(LocalBridgeClazz, "textColorPrimaryInverse"); _textColorPrimaryInverseReady = true; } return _textColorPrimaryInverseContent; } }
            private static int _textColorPrimaryInverseContent = default;
            private static bool _textColorPrimaryInverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorPrimaryInverseDisableOnly"/>
            /// </summary>
            public static int textColorPrimaryInverseDisableOnly { get { if (!_textColorPrimaryInverseDisableOnlyReady) { _textColorPrimaryInverseDisableOnlyContent = SGetField<int>(LocalBridgeClazz, "textColorPrimaryInverseDisableOnly"); _textColorPrimaryInverseDisableOnlyReady = true; } return _textColorPrimaryInverseDisableOnlyContent; } }
            private static int _textColorPrimaryInverseDisableOnlyContent = default;
            private static bool _textColorPrimaryInverseDisableOnlyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorPrimaryInverseNoDisable"/>
            /// </summary>
            public static int textColorPrimaryInverseNoDisable { get { if (!_textColorPrimaryInverseNoDisableReady) { _textColorPrimaryInverseNoDisableContent = SGetField<int>(LocalBridgeClazz, "textColorPrimaryInverseNoDisable"); _textColorPrimaryInverseNoDisableReady = true; } return _textColorPrimaryInverseNoDisableContent; } }
            private static int _textColorPrimaryInverseNoDisableContent = default;
            private static bool _textColorPrimaryInverseNoDisableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorPrimaryNoDisable"/>
            /// </summary>
            public static int textColorPrimaryNoDisable { get { if (!_textColorPrimaryNoDisableReady) { _textColorPrimaryNoDisableContent = SGetField<int>(LocalBridgeClazz, "textColorPrimaryNoDisable"); _textColorPrimaryNoDisableReady = true; } return _textColorPrimaryNoDisableContent; } }
            private static int _textColorPrimaryNoDisableContent = default;
            private static bool _textColorPrimaryNoDisableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorSecondary"/>
            /// </summary>
            public static int textColorSecondary { get { if (!_textColorSecondaryReady) { _textColorSecondaryContent = SGetField<int>(LocalBridgeClazz, "textColorSecondary"); _textColorSecondaryReady = true; } return _textColorSecondaryContent; } }
            private static int _textColorSecondaryContent = default;
            private static bool _textColorSecondaryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorSecondaryInverse"/>
            /// </summary>
            public static int textColorSecondaryInverse { get { if (!_textColorSecondaryInverseReady) { _textColorSecondaryInverseContent = SGetField<int>(LocalBridgeClazz, "textColorSecondaryInverse"); _textColorSecondaryInverseReady = true; } return _textColorSecondaryInverseContent; } }
            private static int _textColorSecondaryInverseContent = default;
            private static bool _textColorSecondaryInverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorSecondaryInverseNoDisable"/>
            /// </summary>
            public static int textColorSecondaryInverseNoDisable { get { if (!_textColorSecondaryInverseNoDisableReady) { _textColorSecondaryInverseNoDisableContent = SGetField<int>(LocalBridgeClazz, "textColorSecondaryInverseNoDisable"); _textColorSecondaryInverseNoDisableReady = true; } return _textColorSecondaryInverseNoDisableContent; } }
            private static int _textColorSecondaryInverseNoDisableContent = default;
            private static bool _textColorSecondaryInverseNoDisableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorSecondaryNoDisable"/>
            /// </summary>
            public static int textColorSecondaryNoDisable { get { if (!_textColorSecondaryNoDisableReady) { _textColorSecondaryNoDisableContent = SGetField<int>(LocalBridgeClazz, "textColorSecondaryNoDisable"); _textColorSecondaryNoDisableReady = true; } return _textColorSecondaryNoDisableContent; } }
            private static int _textColorSecondaryNoDisableContent = default;
            private static bool _textColorSecondaryNoDisableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorTertiary"/>
            /// </summary>
            public static int textColorTertiary { get { if (!_textColorTertiaryReady) { _textColorTertiaryContent = SGetField<int>(LocalBridgeClazz, "textColorTertiary"); _textColorTertiaryReady = true; } return _textColorTertiaryContent; } }
            private static int _textColorTertiaryContent = default;
            private static bool _textColorTertiaryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textColorTertiaryInverse"/>
            /// </summary>
            public static int textColorTertiaryInverse { get { if (!_textColorTertiaryInverseReady) { _textColorTertiaryInverseContent = SGetField<int>(LocalBridgeClazz, "textColorTertiaryInverse"); _textColorTertiaryInverseReady = true; } return _textColorTertiaryInverseContent; } }
            private static int _textColorTertiaryInverseContent = default;
            private static bool _textColorTertiaryInverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textCursorDrawable"/>
            /// </summary>
            public static int textCursorDrawable { get { if (!_textCursorDrawableReady) { _textCursorDrawableContent = SGetField<int>(LocalBridgeClazz, "textCursorDrawable"); _textCursorDrawableReady = true; } return _textCursorDrawableContent; } }
            private static int _textCursorDrawableContent = default;
            private static bool _textCursorDrawableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textDirection"/>
            /// </summary>
            public static int textDirection { get { if (!_textDirectionReady) { _textDirectionContent = SGetField<int>(LocalBridgeClazz, "textDirection"); _textDirectionReady = true; } return _textDirectionContent; } }
            private static int _textDirectionContent = default;
            private static bool _textDirectionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textEditNoPasteWindowLayout"/>
            /// </summary>
            public static int textEditNoPasteWindowLayout { get { if (!_textEditNoPasteWindowLayoutReady) { _textEditNoPasteWindowLayoutContent = SGetField<int>(LocalBridgeClazz, "textEditNoPasteWindowLayout"); _textEditNoPasteWindowLayoutReady = true; } return _textEditNoPasteWindowLayoutContent; } }
            private static int _textEditNoPasteWindowLayoutContent = default;
            private static bool _textEditNoPasteWindowLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textEditPasteWindowLayout"/>
            /// </summary>
            public static int textEditPasteWindowLayout { get { if (!_textEditPasteWindowLayoutReady) { _textEditPasteWindowLayoutContent = SGetField<int>(LocalBridgeClazz, "textEditPasteWindowLayout"); _textEditPasteWindowLayoutReady = true; } return _textEditPasteWindowLayoutContent; } }
            private static int _textEditPasteWindowLayoutContent = default;
            private static bool _textEditPasteWindowLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textEditSideNoPasteWindowLayout"/>
            /// </summary>
            public static int textEditSideNoPasteWindowLayout { get { if (!_textEditSideNoPasteWindowLayoutReady) { _textEditSideNoPasteWindowLayoutContent = SGetField<int>(LocalBridgeClazz, "textEditSideNoPasteWindowLayout"); _textEditSideNoPasteWindowLayoutReady = true; } return _textEditSideNoPasteWindowLayoutContent; } }
            private static int _textEditSideNoPasteWindowLayoutContent = default;
            private static bool _textEditSideNoPasteWindowLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textEditSidePasteWindowLayout"/>
            /// </summary>
            public static int textEditSidePasteWindowLayout { get { if (!_textEditSidePasteWindowLayoutReady) { _textEditSidePasteWindowLayoutContent = SGetField<int>(LocalBridgeClazz, "textEditSidePasteWindowLayout"); _textEditSidePasteWindowLayoutReady = true; } return _textEditSidePasteWindowLayoutContent; } }
            private static int _textEditSidePasteWindowLayoutContent = default;
            private static bool _textEditSidePasteWindowLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textEditSuggestionItemLayout"/>
            /// </summary>
            public static int textEditSuggestionItemLayout { get { if (!_textEditSuggestionItemLayoutReady) { _textEditSuggestionItemLayoutContent = SGetField<int>(LocalBridgeClazz, "textEditSuggestionItemLayout"); _textEditSuggestionItemLayoutReady = true; } return _textEditSuggestionItemLayoutContent; } }
            private static int _textEditSuggestionItemLayoutContent = default;
            private static bool _textEditSuggestionItemLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textFilterEnabled"/>
            /// </summary>
            public static int textFilterEnabled { get { if (!_textFilterEnabledReady) { _textFilterEnabledContent = SGetField<int>(LocalBridgeClazz, "textFilterEnabled"); _textFilterEnabledReady = true; } return _textFilterEnabledContent; } }
            private static int _textFilterEnabledContent = default;
            private static bool _textFilterEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textFontWeight"/>
            /// </summary>
            public static int textFontWeight { get { if (!_textFontWeightReady) { _textFontWeightContent = SGetField<int>(LocalBridgeClazz, "textFontWeight"); _textFontWeightReady = true; } return _textFontWeightContent; } }
            private static int _textFontWeightContent = default;
            private static bool _textFontWeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textIsSelectable"/>
            /// </summary>
            public static int textIsSelectable { get { if (!_textIsSelectableReady) { _textIsSelectableContent = SGetField<int>(LocalBridgeClazz, "textIsSelectable"); _textIsSelectableReady = true; } return _textIsSelectableContent; } }
            private static int _textIsSelectableContent = default;
            private static bool _textIsSelectableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textLocale"/>
            /// </summary>
            public static int textLocale { get { if (!_textLocaleReady) { _textLocaleContent = SGetField<int>(LocalBridgeClazz, "textLocale"); _textLocaleReady = true; } return _textLocaleContent; } }
            private static int _textLocaleContent = default;
            private static bool _textLocaleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textOff"/>
            /// </summary>
            public static int textOff { get { if (!_textOffReady) { _textOffContent = SGetField<int>(LocalBridgeClazz, "textOff"); _textOffReady = true; } return _textOffContent; } }
            private static int _textOffContent = default;
            private static bool _textOffReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textOn"/>
            /// </summary>
            public static int textOn { get { if (!_textOnReady) { _textOnContent = SGetField<int>(LocalBridgeClazz, "textOn"); _textOnReady = true; } return _textOnContent; } }
            private static int _textOnContent = default;
            private static bool _textOnReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textScaleX"/>
            /// </summary>
            public static int textScaleX { get { if (!_textScaleXReady) { _textScaleXContent = SGetField<int>(LocalBridgeClazz, "textScaleX"); _textScaleXReady = true; } return _textScaleXContent; } }
            private static int _textScaleXContent = default;
            private static bool _textScaleXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textSelectHandle"/>
            /// </summary>
            public static int textSelectHandle { get { if (!_textSelectHandleReady) { _textSelectHandleContent = SGetField<int>(LocalBridgeClazz, "textSelectHandle"); _textSelectHandleReady = true; } return _textSelectHandleContent; } }
            private static int _textSelectHandleContent = default;
            private static bool _textSelectHandleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textSelectHandleLeft"/>
            /// </summary>
            public static int textSelectHandleLeft { get { if (!_textSelectHandleLeftReady) { _textSelectHandleLeftContent = SGetField<int>(LocalBridgeClazz, "textSelectHandleLeft"); _textSelectHandleLeftReady = true; } return _textSelectHandleLeftContent; } }
            private static int _textSelectHandleLeftContent = default;
            private static bool _textSelectHandleLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textSelectHandleRight"/>
            /// </summary>
            public static int textSelectHandleRight { get { if (!_textSelectHandleRightReady) { _textSelectHandleRightContent = SGetField<int>(LocalBridgeClazz, "textSelectHandleRight"); _textSelectHandleRightReady = true; } return _textSelectHandleRightContent; } }
            private static int _textSelectHandleRightContent = default;
            private static bool _textSelectHandleRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textSelectHandleWindowStyle"/>
            /// </summary>
            public static int textSelectHandleWindowStyle { get { if (!_textSelectHandleWindowStyleReady) { _textSelectHandleWindowStyleContent = SGetField<int>(LocalBridgeClazz, "textSelectHandleWindowStyle"); _textSelectHandleWindowStyleReady = true; } return _textSelectHandleWindowStyleContent; } }
            private static int _textSelectHandleWindowStyleContent = default;
            private static bool _textSelectHandleWindowStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textSize"/>
            /// </summary>
            public static int textSize { get { if (!_textSizeReady) { _textSizeContent = SGetField<int>(LocalBridgeClazz, "textSize"); _textSizeReady = true; } return _textSizeContent; } }
            private static int _textSizeContent = default;
            private static bool _textSizeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textStyle"/>
            /// </summary>
            public static int textStyle { get { if (!_textStyleReady) { _textStyleContent = SGetField<int>(LocalBridgeClazz, "textStyle"); _textStyleReady = true; } return _textStyleContent; } }
            private static int _textStyleContent = default;
            private static bool _textStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textSuggestionsWindowStyle"/>
            /// </summary>
            public static int textSuggestionsWindowStyle { get { if (!_textSuggestionsWindowStyleReady) { _textSuggestionsWindowStyleContent = SGetField<int>(LocalBridgeClazz, "textSuggestionsWindowStyle"); _textSuggestionsWindowStyleReady = true; } return _textSuggestionsWindowStyleContent; } }
            private static int _textSuggestionsWindowStyleContent = default;
            private static bool _textSuggestionsWindowStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#textViewStyle"/>
            /// </summary>
            public static int textViewStyle { get { if (!_textViewStyleReady) { _textViewStyleContent = SGetField<int>(LocalBridgeClazz, "textViewStyle"); _textViewStyleReady = true; } return _textViewStyleContent; } }
            private static int _textViewStyleContent = default;
            private static bool _textViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#theme"/>
            /// </summary>
            public static int theme { get { if (!_themeReady) { _themeContent = SGetField<int>(LocalBridgeClazz, "theme"); _themeReady = true; } return _themeContent; } }
            private static int _themeContent = default;
            private static bool _themeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#thickness"/>
            /// </summary>
            public static int thickness { get { if (!_thicknessReady) { _thicknessContent = SGetField<int>(LocalBridgeClazz, "thickness"); _thicknessReady = true; } return _thicknessContent; } }
            private static int _thicknessContent = default;
            private static bool _thicknessReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#thicknessRatio"/>
            /// </summary>
            public static int thicknessRatio { get { if (!_thicknessRatioReady) { _thicknessRatioContent = SGetField<int>(LocalBridgeClazz, "thicknessRatio"); _thicknessRatioReady = true; } return _thicknessRatioContent; } }
            private static int _thicknessRatioContent = default;
            private static bool _thicknessRatioReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#thumb"/>
            /// </summary>
            public static int thumb { get { if (!_thumbReady) { _thumbContent = SGetField<int>(LocalBridgeClazz, "thumb"); _thumbReady = true; } return _thumbContent; } }
            private static int _thumbContent = default;
            private static bool _thumbReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#thumbnail"/>
            /// </summary>
            public static int thumbnail { get { if (!_thumbnailReady) { _thumbnailContent = SGetField<int>(LocalBridgeClazz, "thumbnail"); _thumbnailReady = true; } return _thumbnailContent; } }
            private static int _thumbnailContent = default;
            private static bool _thumbnailReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#thumbOffset"/>
            /// </summary>
            public static int thumbOffset { get { if (!_thumbOffsetReady) { _thumbOffsetContent = SGetField<int>(LocalBridgeClazz, "thumbOffset"); _thumbOffsetReady = true; } return _thumbOffsetContent; } }
            private static int _thumbOffsetContent = default;
            private static bool _thumbOffsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#thumbPosition"/>
            /// </summary>
            public static int thumbPosition { get { if (!_thumbPositionReady) { _thumbPositionContent = SGetField<int>(LocalBridgeClazz, "thumbPosition"); _thumbPositionReady = true; } return _thumbPositionContent; } }
            private static int _thumbPositionContent = default;
            private static bool _thumbPositionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#thumbTextPadding"/>
            /// </summary>
            public static int thumbTextPadding { get { if (!_thumbTextPaddingReady) { _thumbTextPaddingContent = SGetField<int>(LocalBridgeClazz, "thumbTextPadding"); _thumbTextPaddingReady = true; } return _thumbTextPaddingContent; } }
            private static int _thumbTextPaddingContent = default;
            private static bool _thumbTextPaddingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#thumbTint"/>
            /// </summary>
            public static int thumbTint { get { if (!_thumbTintReady) { _thumbTintContent = SGetField<int>(LocalBridgeClazz, "thumbTint"); _thumbTintReady = true; } return _thumbTintContent; } }
            private static int _thumbTintContent = default;
            private static bool _thumbTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#thumbTintMode"/>
            /// </summary>
            public static int thumbTintMode { get { if (!_thumbTintModeReady) { _thumbTintModeContent = SGetField<int>(LocalBridgeClazz, "thumbTintMode"); _thumbTintModeReady = true; } return _thumbTintModeContent; } }
            private static int _thumbTintModeContent = default;
            private static bool _thumbTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tickMark"/>
            /// </summary>
            public static int tickMark { get { if (!_tickMarkReady) { _tickMarkContent = SGetField<int>(LocalBridgeClazz, "tickMark"); _tickMarkReady = true; } return _tickMarkContent; } }
            private static int _tickMarkContent = default;
            private static bool _tickMarkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tickMarkTint"/>
            /// </summary>
            public static int tickMarkTint { get { if (!_tickMarkTintReady) { _tickMarkTintContent = SGetField<int>(LocalBridgeClazz, "tickMarkTint"); _tickMarkTintReady = true; } return _tickMarkTintContent; } }
            private static int _tickMarkTintContent = default;
            private static bool _tickMarkTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tickMarkTintMode"/>
            /// </summary>
            public static int tickMarkTintMode { get { if (!_tickMarkTintModeReady) { _tickMarkTintModeContent = SGetField<int>(LocalBridgeClazz, "tickMarkTintMode"); _tickMarkTintModeReady = true; } return _tickMarkTintModeContent; } }
            private static int _tickMarkTintModeContent = default;
            private static bool _tickMarkTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tileMode"/>
            /// </summary>
            public static int tileMode { get { if (!_tileModeReady) { _tileModeContent = SGetField<int>(LocalBridgeClazz, "tileMode"); _tileModeReady = true; } return _tileModeContent; } }
            private static int _tileModeContent = default;
            private static bool _tileModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tileModeX"/>
            /// </summary>
            public static int tileModeX { get { if (!_tileModeXReady) { _tileModeXContent = SGetField<int>(LocalBridgeClazz, "tileModeX"); _tileModeXReady = true; } return _tileModeXContent; } }
            private static int _tileModeXContent = default;
            private static bool _tileModeXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tileModeY"/>
            /// </summary>
            public static int tileModeY { get { if (!_tileModeYReady) { _tileModeYContent = SGetField<int>(LocalBridgeClazz, "tileModeY"); _tileModeYReady = true; } return _tileModeYContent; } }
            private static int _tileModeYContent = default;
            private static bool _tileModeYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tileService"/>
            /// </summary>
            public static int tileService { get { if (!_tileServiceReady) { _tileServiceContent = SGetField<int>(LocalBridgeClazz, "tileService"); _tileServiceReady = true; } return _tileServiceContent; } }
            private static int _tileServiceContent = default;
            private static bool _tileServiceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#timePickerDialogTheme"/>
            /// </summary>
            public static int timePickerDialogTheme { get { if (!_timePickerDialogThemeReady) { _timePickerDialogThemeContent = SGetField<int>(LocalBridgeClazz, "timePickerDialogTheme"); _timePickerDialogThemeReady = true; } return _timePickerDialogThemeContent; } }
            private static int _timePickerDialogThemeContent = default;
            private static bool _timePickerDialogThemeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#timePickerMode"/>
            /// </summary>
            public static int timePickerMode { get { if (!_timePickerModeReady) { _timePickerModeContent = SGetField<int>(LocalBridgeClazz, "timePickerMode"); _timePickerModeReady = true; } return _timePickerModeContent; } }
            private static int _timePickerModeContent = default;
            private static bool _timePickerModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#timePickerStyle"/>
            /// </summary>
            public static int timePickerStyle { get { if (!_timePickerStyleReady) { _timePickerStyleContent = SGetField<int>(LocalBridgeClazz, "timePickerStyle"); _timePickerStyleReady = true; } return _timePickerStyleContent; } }
            private static int _timePickerStyleContent = default;
            private static bool _timePickerStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#timeZone"/>
            /// </summary>
            public static int timeZone { get { if (!_timeZoneReady) { _timeZoneContent = SGetField<int>(LocalBridgeClazz, "timeZone"); _timeZoneReady = true; } return _timeZoneContent; } }
            private static int _timeZoneContent = default;
            private static bool _timeZoneReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tint"/>
            /// </summary>
            public static int tint { get { if (!_tintReady) { _tintContent = SGetField<int>(LocalBridgeClazz, "tint"); _tintReady = true; } return _tintContent; } }
            private static int _tintContent = default;
            private static bool _tintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tintMode"/>
            /// </summary>
            public static int tintMode { get { if (!_tintModeReady) { _tintModeContent = SGetField<int>(LocalBridgeClazz, "tintMode"); _tintModeReady = true; } return _tintModeContent; } }
            private static int _tintModeContent = default;
            private static bool _tintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#title"/>
            /// </summary>
            public static int title { get { if (!_titleReady) { _titleContent = SGetField<int>(LocalBridgeClazz, "title"); _titleReady = true; } return _titleContent; } }
            private static int _titleContent = default;
            private static bool _titleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#titleCondensed"/>
            /// </summary>
            public static int titleCondensed { get { if (!_titleCondensedReady) { _titleCondensedContent = SGetField<int>(LocalBridgeClazz, "titleCondensed"); _titleCondensedReady = true; } return _titleCondensedContent; } }
            private static int _titleCondensedContent = default;
            private static bool _titleCondensedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#titleMargin"/>
            /// </summary>
            public static int titleMargin { get { if (!_titleMarginReady) { _titleMarginContent = SGetField<int>(LocalBridgeClazz, "titleMargin"); _titleMarginReady = true; } return _titleMarginContent; } }
            private static int _titleMarginContent = default;
            private static bool _titleMarginReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#titleMarginBottom"/>
            /// </summary>
            public static int titleMarginBottom { get { if (!_titleMarginBottomReady) { _titleMarginBottomContent = SGetField<int>(LocalBridgeClazz, "titleMarginBottom"); _titleMarginBottomReady = true; } return _titleMarginBottomContent; } }
            private static int _titleMarginBottomContent = default;
            private static bool _titleMarginBottomReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#titleMarginEnd"/>
            /// </summary>
            public static int titleMarginEnd { get { if (!_titleMarginEndReady) { _titleMarginEndContent = SGetField<int>(LocalBridgeClazz, "titleMarginEnd"); _titleMarginEndReady = true; } return _titleMarginEndContent; } }
            private static int _titleMarginEndContent = default;
            private static bool _titleMarginEndReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#titleMarginStart"/>
            /// </summary>
            public static int titleMarginStart { get { if (!_titleMarginStartReady) { _titleMarginStartContent = SGetField<int>(LocalBridgeClazz, "titleMarginStart"); _titleMarginStartReady = true; } return _titleMarginStartContent; } }
            private static int _titleMarginStartContent = default;
            private static bool _titleMarginStartReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#titleMarginTop"/>
            /// </summary>
            public static int titleMarginTop { get { if (!_titleMarginTopReady) { _titleMarginTopContent = SGetField<int>(LocalBridgeClazz, "titleMarginTop"); _titleMarginTopReady = true; } return _titleMarginTopContent; } }
            private static int _titleMarginTopContent = default;
            private static bool _titleMarginTopReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#titleTextAppearance"/>
            /// </summary>
            public static int titleTextAppearance { get { if (!_titleTextAppearanceReady) { _titleTextAppearanceContent = SGetField<int>(LocalBridgeClazz, "titleTextAppearance"); _titleTextAppearanceReady = true; } return _titleTextAppearanceContent; } }
            private static int _titleTextAppearanceContent = default;
            private static bool _titleTextAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#titleTextColor"/>
            /// </summary>
            public static int titleTextColor { get { if (!_titleTextColorReady) { _titleTextColorContent = SGetField<int>(LocalBridgeClazz, "titleTextColor"); _titleTextColorReady = true; } return _titleTextColorContent; } }
            private static int _titleTextColorContent = default;
            private static bool _titleTextColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#titleTextStyle"/>
            /// </summary>
            public static int titleTextStyle { get { if (!_titleTextStyleReady) { _titleTextStyleContent = SGetField<int>(LocalBridgeClazz, "titleTextStyle"); _titleTextStyleReady = true; } return _titleTextStyleContent; } }
            private static int _titleTextStyleContent = default;
            private static bool _titleTextStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#toAlpha"/>
            /// </summary>
            public static int toAlpha { get { if (!_toAlphaReady) { _toAlphaContent = SGetField<int>(LocalBridgeClazz, "toAlpha"); _toAlphaReady = true; } return _toAlphaContent; } }
            private static int _toAlphaContent = default;
            private static bool _toAlphaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#toDegrees"/>
            /// </summary>
            public static int toDegrees { get { if (!_toDegreesReady) { _toDegreesContent = SGetField<int>(LocalBridgeClazz, "toDegrees"); _toDegreesReady = true; } return _toDegreesContent; } }
            private static int _toDegreesContent = default;
            private static bool _toDegreesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#toExtendBottom"/>
            /// </summary>
            public static int toExtendBottom { get { if (!_toExtendBottomReady) { _toExtendBottomContent = SGetField<int>(LocalBridgeClazz, "toExtendBottom"); _toExtendBottomReady = true; } return _toExtendBottomContent; } }
            private static int _toExtendBottomContent = default;
            private static bool _toExtendBottomReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#toExtendLeft"/>
            /// </summary>
            public static int toExtendLeft { get { if (!_toExtendLeftReady) { _toExtendLeftContent = SGetField<int>(LocalBridgeClazz, "toExtendLeft"); _toExtendLeftReady = true; } return _toExtendLeftContent; } }
            private static int _toExtendLeftContent = default;
            private static bool _toExtendLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#toExtendRight"/>
            /// </summary>
            public static int toExtendRight { get { if (!_toExtendRightReady) { _toExtendRightContent = SGetField<int>(LocalBridgeClazz, "toExtendRight"); _toExtendRightReady = true; } return _toExtendRightContent; } }
            private static int _toExtendRightContent = default;
            private static bool _toExtendRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#toExtendTop"/>
            /// </summary>
            public static int toExtendTop { get { if (!_toExtendTopReady) { _toExtendTopContent = SGetField<int>(LocalBridgeClazz, "toExtendTop"); _toExtendTopReady = true; } return _toExtendTopContent; } }
            private static int _toExtendTopContent = default;
            private static bool _toExtendTopReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#toId"/>
            /// </summary>
            public static int toId { get { if (!_toIdReady) { _toIdContent = SGetField<int>(LocalBridgeClazz, "toId"); _toIdReady = true; } return _toIdContent; } }
            private static int _toIdContent = default;
            private static bool _toIdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#toolbarStyle"/>
            /// </summary>
            public static int toolbarStyle { get { if (!_toolbarStyleReady) { _toolbarStyleContent = SGetField<int>(LocalBridgeClazz, "toolbarStyle"); _toolbarStyleReady = true; } return _toolbarStyleContent; } }
            private static int _toolbarStyleContent = default;
            private static bool _toolbarStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tooltipText"/>
            /// </summary>
            public static int tooltipText { get { if (!_tooltipTextReady) { _tooltipTextContent = SGetField<int>(LocalBridgeClazz, "tooltipText"); _tooltipTextReady = true; } return _tooltipTextContent; } }
            private static int _tooltipTextContent = default;
            private static bool _tooltipTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#top"/>
            /// </summary>
            public static int top { get { if (!_topReady) { _topContent = SGetField<int>(LocalBridgeClazz, "top"); _topReady = true; } return _topContent; } }
            private static int _topContent = default;
            private static bool _topReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#topBright"/>
            /// </summary>
            public static int topBright { get { if (!_topBrightReady) { _topBrightContent = SGetField<int>(LocalBridgeClazz, "topBright"); _topBrightReady = true; } return _topBrightContent; } }
            private static int _topBrightContent = default;
            private static bool _topBrightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#topDark"/>
            /// </summary>
            public static int topDark { get { if (!_topDarkReady) { _topDarkContent = SGetField<int>(LocalBridgeClazz, "topDark"); _topDarkReady = true; } return _topDarkContent; } }
            private static int _topDarkContent = default;
            private static bool _topDarkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#topLeftRadius"/>
            /// </summary>
            public static int topLeftRadius { get { if (!_topLeftRadiusReady) { _topLeftRadiusContent = SGetField<int>(LocalBridgeClazz, "topLeftRadius"); _topLeftRadiusReady = true; } return _topLeftRadiusContent; } }
            private static int _topLeftRadiusContent = default;
            private static bool _topLeftRadiusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#topOffset"/>
            /// </summary>
            public static int topOffset { get { if (!_topOffsetReady) { _topOffsetContent = SGetField<int>(LocalBridgeClazz, "topOffset"); _topOffsetReady = true; } return _topOffsetContent; } }
            private static int _topOffsetContent = default;
            private static bool _topOffsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#topRightRadius"/>
            /// </summary>
            public static int topRightRadius { get { if (!_topRightRadiusReady) { _topRightRadiusContent = SGetField<int>(LocalBridgeClazz, "topRightRadius"); _topRightRadiusReady = true; } return _topRightRadiusContent; } }
            private static int _topRightRadiusContent = default;
            private static bool _topRightRadiusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#toScene"/>
            /// </summary>
            public static int toScene { get { if (!_toSceneReady) { _toSceneContent = SGetField<int>(LocalBridgeClazz, "toScene"); _toSceneReady = true; } return _toSceneContent; } }
            private static int _toSceneContent = default;
            private static bool _toSceneReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#touchscreenBlocksFocus"/>
            /// </summary>
            public static int touchscreenBlocksFocus { get { if (!_touchscreenBlocksFocusReady) { _touchscreenBlocksFocusContent = SGetField<int>(LocalBridgeClazz, "touchscreenBlocksFocus"); _touchscreenBlocksFocusReady = true; } return _touchscreenBlocksFocusContent; } }
            private static int _touchscreenBlocksFocusContent = default;
            private static bool _touchscreenBlocksFocusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#toXDelta"/>
            /// </summary>
            public static int toXDelta { get { if (!_toXDeltaReady) { _toXDeltaContent = SGetField<int>(LocalBridgeClazz, "toXDelta"); _toXDeltaReady = true; } return _toXDeltaContent; } }
            private static int _toXDeltaContent = default;
            private static bool _toXDeltaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#toXScale"/>
            /// </summary>
            public static int toXScale { get { if (!_toXScaleReady) { _toXScaleContent = SGetField<int>(LocalBridgeClazz, "toXScale"); _toXScaleReady = true; } return _toXScaleContent; } }
            private static int _toXScaleContent = default;
            private static bool _toXScaleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#toYDelta"/>
            /// </summary>
            public static int toYDelta { get { if (!_toYDeltaReady) { _toYDeltaContent = SGetField<int>(LocalBridgeClazz, "toYDelta"); _toYDeltaReady = true; } return _toYDeltaContent; } }
            private static int _toYDeltaContent = default;
            private static bool _toYDeltaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#toYScale"/>
            /// </summary>
            public static int toYScale { get { if (!_toYScaleReady) { _toYScaleContent = SGetField<int>(LocalBridgeClazz, "toYScale"); _toYScaleReady = true; } return _toYScaleContent; } }
            private static int _toYScaleContent = default;
            private static bool _toYScaleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#track"/>
            /// </summary>
            public static int track { get { if (!_trackReady) { _trackContent = SGetField<int>(LocalBridgeClazz, "track"); _trackReady = true; } return _trackContent; } }
            private static int _trackContent = default;
            private static bool _trackReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#trackTint"/>
            /// </summary>
            public static int trackTint { get { if (!_trackTintReady) { _trackTintContent = SGetField<int>(LocalBridgeClazz, "trackTint"); _trackTintReady = true; } return _trackTintContent; } }
            private static int _trackTintContent = default;
            private static bool _trackTintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#trackTintMode"/>
            /// </summary>
            public static int trackTintMode { get { if (!_trackTintModeReady) { _trackTintModeContent = SGetField<int>(LocalBridgeClazz, "trackTintMode"); _trackTintModeReady = true; } return _trackTintModeContent; } }
            private static int _trackTintModeContent = default;
            private static bool _trackTintModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#transcriptMode"/>
            /// </summary>
            public static int transcriptMode { get { if (!_transcriptModeReady) { _transcriptModeContent = SGetField<int>(LocalBridgeClazz, "transcriptMode"); _transcriptModeReady = true; } return _transcriptModeContent; } }
            private static int _transcriptModeContent = default;
            private static bool _transcriptModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#transformPivotX"/>
            /// </summary>
            public static int transformPivotX { get { if (!_transformPivotXReady) { _transformPivotXContent = SGetField<int>(LocalBridgeClazz, "transformPivotX"); _transformPivotXReady = true; } return _transformPivotXContent; } }
            private static int _transformPivotXContent = default;
            private static bool _transformPivotXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#transformPivotY"/>
            /// </summary>
            public static int transformPivotY { get { if (!_transformPivotYReady) { _transformPivotYContent = SGetField<int>(LocalBridgeClazz, "transformPivotY"); _transformPivotYReady = true; } return _transformPivotYContent; } }
            private static int _transformPivotYContent = default;
            private static bool _transformPivotYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#transition"/>
            /// </summary>
            public static int transitionField { get { if (!_transitionFieldReady) { _transitionFieldContent = SGetField<int>(LocalBridgeClazz, "transition"); _transitionFieldReady = true; } return _transitionFieldContent; } }
            private static int _transitionFieldContent = default;
            private static bool _transitionFieldReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#transitionGroup"/>
            /// </summary>
            public static int transitionGroup { get { if (!_transitionGroupReady) { _transitionGroupContent = SGetField<int>(LocalBridgeClazz, "transitionGroup"); _transitionGroupReady = true; } return _transitionGroupContent; } }
            private static int _transitionGroupContent = default;
            private static bool _transitionGroupReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#transitionName"/>
            /// </summary>
            public static int transitionName { get { if (!_transitionNameReady) { _transitionNameContent = SGetField<int>(LocalBridgeClazz, "transitionName"); _transitionNameReady = true; } return _transitionNameContent; } }
            private static int _transitionNameContent = default;
            private static bool _transitionNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#transitionOrdering"/>
            /// </summary>
            public static int transitionOrdering { get { if (!_transitionOrderingReady) { _transitionOrderingContent = SGetField<int>(LocalBridgeClazz, "transitionOrdering"); _transitionOrderingReady = true; } return _transitionOrderingContent; } }
            private static int _transitionOrderingContent = default;
            private static bool _transitionOrderingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#transitionVisibilityMode"/>
            /// </summary>
            public static int transitionVisibilityMode { get { if (!_transitionVisibilityModeReady) { _transitionVisibilityModeContent = SGetField<int>(LocalBridgeClazz, "transitionVisibilityMode"); _transitionVisibilityModeReady = true; } return _transitionVisibilityModeContent; } }
            private static int _transitionVisibilityModeContent = default;
            private static bool _transitionVisibilityModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#translateX"/>
            /// </summary>
            public static int translateX { get { if (!_translateXReady) { _translateXContent = SGetField<int>(LocalBridgeClazz, "translateX"); _translateXReady = true; } return _translateXContent; } }
            private static int _translateXContent = default;
            private static bool _translateXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#translateY"/>
            /// </summary>
            public static int translateY { get { if (!_translateYReady) { _translateYContent = SGetField<int>(LocalBridgeClazz, "translateY"); _translateYReady = true; } return _translateYContent; } }
            private static int _translateYContent = default;
            private static bool _translateYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#translationX"/>
            /// </summary>
            public static int translationX { get { if (!_translationXReady) { _translationXContent = SGetField<int>(LocalBridgeClazz, "translationX"); _translationXReady = true; } return _translationXContent; } }
            private static int _translationXContent = default;
            private static bool _translationXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#translationY"/>
            /// </summary>
            public static int translationY { get { if (!_translationYReady) { _translationYContent = SGetField<int>(LocalBridgeClazz, "translationY"); _translationYReady = true; } return _translationYContent; } }
            private static int _translationYContent = default;
            private static bool _translationYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#translationZ"/>
            /// </summary>
            public static int translationZ { get { if (!_translationZReady) { _translationZContent = SGetField<int>(LocalBridgeClazz, "translationZ"); _translationZReady = true; } return _translationZContent; } }
            private static int _translationZContent = default;
            private static bool _translationZReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#trimPathEnd"/>
            /// </summary>
            public static int trimPathEnd { get { if (!_trimPathEndReady) { _trimPathEndContent = SGetField<int>(LocalBridgeClazz, "trimPathEnd"); _trimPathEndReady = true; } return _trimPathEndContent; } }
            private static int _trimPathEndContent = default;
            private static bool _trimPathEndReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#trimPathOffset"/>
            /// </summary>
            public static int trimPathOffset { get { if (!_trimPathOffsetReady) { _trimPathOffsetContent = SGetField<int>(LocalBridgeClazz, "trimPathOffset"); _trimPathOffsetReady = true; } return _trimPathOffsetContent; } }
            private static int _trimPathOffsetContent = default;
            private static bool _trimPathOffsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#trimPathStart"/>
            /// </summary>
            public static int trimPathStart { get { if (!_trimPathStartReady) { _trimPathStartContent = SGetField<int>(LocalBridgeClazz, "trimPathStart"); _trimPathStartReady = true; } return _trimPathStartContent; } }
            private static int _trimPathStartContent = default;
            private static bool _trimPathStartReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#ttcIndex"/>
            /// </summary>
            public static int ttcIndex { get { if (!_ttcIndexReady) { _ttcIndexContent = SGetField<int>(LocalBridgeClazz, "ttcIndex"); _ttcIndexReady = true; } return _ttcIndexContent; } }
            private static int _ttcIndexContent = default;
            private static bool _ttcIndexReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#tunerCount"/>
            /// </summary>
            public static int tunerCount { get { if (!_tunerCountReady) { _tunerCountContent = SGetField<int>(LocalBridgeClazz, "tunerCount"); _tunerCountReady = true; } return _tunerCountContent; } }
            private static int _tunerCountContent = default;
            private static bool _tunerCountReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#turnScreenOn"/>
            /// </summary>
            public static int turnScreenOn { get { if (!_turnScreenOnReady) { _turnScreenOnContent = SGetField<int>(LocalBridgeClazz, "turnScreenOn"); _turnScreenOnReady = true; } return _turnScreenOnContent; } }
            private static int _turnScreenOnContent = default;
            private static bool _turnScreenOnReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#type"/>
            /// </summary>
            public static int type { get { if (!_typeReady) { _typeContent = SGetField<int>(LocalBridgeClazz, "type"); _typeReady = true; } return _typeContent; } }
            private static int _typeContent = default;
            private static bool _typeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#typeface"/>
            /// </summary>
            public static int typeface { get { if (!_typefaceReady) { _typefaceContent = SGetField<int>(LocalBridgeClazz, "typeface"); _typefaceReady = true; } return _typefaceContent; } }
            private static int _typefaceContent = default;
            private static bool _typefaceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#uiOptions"/>
            /// </summary>
            public static int uiOptions { get { if (!_uiOptionsReady) { _uiOptionsContent = SGetField<int>(LocalBridgeClazz, "uiOptions"); _uiOptionsReady = true; } return _uiOptionsContent; } }
            private static int _uiOptionsContent = default;
            private static bool _uiOptionsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#uncertainGestureColor"/>
            /// </summary>
            public static int uncertainGestureColor { get { if (!_uncertainGestureColorReady) { _uncertainGestureColorContent = SGetField<int>(LocalBridgeClazz, "uncertainGestureColor"); _uncertainGestureColorReady = true; } return _uncertainGestureColorContent; } }
            private static int _uncertainGestureColorContent = default;
            private static bool _uncertainGestureColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#unfocusedMonthDateColor"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int unfocusedMonthDateColor { get { if (!_unfocusedMonthDateColorReady) { _unfocusedMonthDateColorContent = SGetField<int>(LocalBridgeClazz, "unfocusedMonthDateColor"); _unfocusedMonthDateColorReady = true; } return _unfocusedMonthDateColorContent; } }
            private static int _unfocusedMonthDateColorContent = default;
            private static bool _unfocusedMonthDateColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#unselectedAlpha"/>
            /// </summary>
            public static int unselectedAlpha { get { if (!_unselectedAlphaReady) { _unselectedAlphaContent = SGetField<int>(LocalBridgeClazz, "unselectedAlpha"); _unselectedAlphaReady = true; } return _unselectedAlphaContent; } }
            private static int _unselectedAlphaContent = default;
            private static bool _unselectedAlphaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#updatePeriodMillis"/>
            /// </summary>
            public static int updatePeriodMillis { get { if (!_updatePeriodMillisReady) { _updatePeriodMillisContent = SGetField<int>(LocalBridgeClazz, "updatePeriodMillis"); _updatePeriodMillisReady = true; } return _updatePeriodMillisContent; } }
            private static int _updatePeriodMillisContent = default;
            private static bool _updatePeriodMillisReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#use32bitAbi"/>
            /// </summary>
            public static int use32bitAbi { get { if (!_use32bitAbiReady) { _use32bitAbiContent = SGetField<int>(LocalBridgeClazz, "use32bitAbi"); _use32bitAbiReady = true; } return _use32bitAbiContent; } }
            private static int _use32bitAbiContent = default;
            private static bool _use32bitAbiReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#useAppZygote"/>
            /// </summary>
            public static int useAppZygote { get { if (!_useAppZygoteReady) { _useAppZygoteContent = SGetField<int>(LocalBridgeClazz, "useAppZygote"); _useAppZygoteReady = true; } return _useAppZygoteContent; } }
            private static int _useAppZygoteContent = default;
            private static bool _useAppZygoteReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#useBoundsForWidth"/>
            /// </summary>
            public static int useBoundsForWidth { get { if (!_useBoundsForWidthReady) { _useBoundsForWidthContent = SGetField<int>(LocalBridgeClazz, "useBoundsForWidth"); _useBoundsForWidthReady = true; } return _useBoundsForWidthContent; } }
            private static int _useBoundsForWidthContent = default;
            private static bool _useBoundsForWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#useDefaultMargins"/>
            /// </summary>
            public static int useDefaultMargins { get { if (!_useDefaultMarginsReady) { _useDefaultMarginsContent = SGetField<int>(LocalBridgeClazz, "useDefaultMargins"); _useDefaultMarginsReady = true; } return _useDefaultMarginsContent; } }
            private static int _useDefaultMarginsContent = default;
            private static bool _useDefaultMarginsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#useEmbeddedDex"/>
            /// </summary>
            public static int useEmbeddedDex { get { if (!_useEmbeddedDexReady) { _useEmbeddedDexContent = SGetField<int>(LocalBridgeClazz, "useEmbeddedDex"); _useEmbeddedDexReady = true; } return _useEmbeddedDexContent; } }
            private static int _useEmbeddedDexContent = default;
            private static bool _useEmbeddedDexReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#useIntrinsicSizeAsMinimum"/>
            /// </summary>
            public static int useIntrinsicSizeAsMinimum { get { if (!_useIntrinsicSizeAsMinimumReady) { _useIntrinsicSizeAsMinimumContent = SGetField<int>(LocalBridgeClazz, "useIntrinsicSizeAsMinimum"); _useIntrinsicSizeAsMinimumReady = true; } return _useIntrinsicSizeAsMinimumContent; } }
            private static int _useIntrinsicSizeAsMinimumContent = default;
            private static bool _useIntrinsicSizeAsMinimumReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#useLevel"/>
            /// </summary>
            public static int useLevel { get { if (!_useLevelReady) { _useLevelContent = SGetField<int>(LocalBridgeClazz, "useLevel"); _useLevelReady = true; } return _useLevelContent; } }
            private static int _useLevelContent = default;
            private static bool _useLevelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#useLocalePreferredLineHeightForMinimum"/>
            /// </summary>
            public static int useLocalePreferredLineHeightForMinimum { get { if (!_useLocalePreferredLineHeightForMinimumReady) { _useLocalePreferredLineHeightForMinimumContent = SGetField<int>(LocalBridgeClazz, "useLocalePreferredLineHeightForMinimum"); _useLocalePreferredLineHeightForMinimumReady = true; } return _useLocalePreferredLineHeightForMinimumContent; } }
            private static int _useLocalePreferredLineHeightForMinimumContent = default;
            private static bool _useLocalePreferredLineHeightForMinimumReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#userVisible"/>
            /// </summary>
            public static int userVisible { get { if (!_userVisibleReady) { _userVisibleContent = SGetField<int>(LocalBridgeClazz, "userVisible"); _userVisibleReady = true; } return _userVisibleContent; } }
            private static int _userVisibleContent = default;
            private static bool _userVisibleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#usesCleartextTraffic"/>
            /// </summary>
            public static int usesCleartextTraffic { get { if (!_usesCleartextTrafficReady) { _usesCleartextTrafficContent = SGetField<int>(LocalBridgeClazz, "usesCleartextTraffic"); _usesCleartextTrafficReady = true; } return _usesCleartextTrafficContent; } }
            private static int _usesCleartextTrafficContent = default;
            private static bool _usesCleartextTrafficReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#usesPermissionFlags"/>
            /// </summary>
            public static int usesPermissionFlags { get { if (!_usesPermissionFlagsReady) { _usesPermissionFlagsContent = SGetField<int>(LocalBridgeClazz, "usesPermissionFlags"); _usesPermissionFlagsReady = true; } return _usesPermissionFlagsContent; } }
            private static int _usesPermissionFlagsContent = default;
            private static bool _usesPermissionFlagsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#value"/>
            /// </summary>
            public static int value { get { if (!_valueReady) { _valueContent = SGetField<int>(LocalBridgeClazz, "value"); _valueReady = true; } return _valueContent; } }
            private static int _valueContent = default;
            private static bool _valueReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#valueFrom"/>
            /// </summary>
            public static int valueFrom { get { if (!_valueFromReady) { _valueFromContent = SGetField<int>(LocalBridgeClazz, "valueFrom"); _valueFromReady = true; } return _valueFromContent; } }
            private static int _valueFromContent = default;
            private static bool _valueFromReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#valueTo"/>
            /// </summary>
            public static int valueTo { get { if (!_valueToReady) { _valueToContent = SGetField<int>(LocalBridgeClazz, "valueTo"); _valueToReady = true; } return _valueToContent; } }
            private static int _valueToContent = default;
            private static bool _valueToReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#valueType"/>
            /// </summary>
            public static int valueType { get { if (!_valueTypeReady) { _valueTypeContent = SGetField<int>(LocalBridgeClazz, "valueType"); _valueTypeReady = true; } return _valueTypeContent; } }
            private static int _valueTypeContent = default;
            private static bool _valueTypeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#variablePadding"/>
            /// </summary>
            public static int variablePadding { get { if (!_variablePaddingReady) { _variablePaddingContent = SGetField<int>(LocalBridgeClazz, "variablePadding"); _variablePaddingReady = true; } return _variablePaddingContent; } }
            private static int _variablePaddingContent = default;
            private static bool _variablePaddingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#vendor"/>
            /// </summary>
            public static int vendor { get { if (!_vendorReady) { _vendorContent = SGetField<int>(LocalBridgeClazz, "vendor"); _vendorReady = true; } return _vendorContent; } }
            private static int _vendorContent = default;
            private static bool _vendorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#version"/>
            /// </summary>
            public static int version { get { if (!_versionReady) { _versionContent = SGetField<int>(LocalBridgeClazz, "version"); _versionReady = true; } return _versionContent; } }
            private static int _versionContent = default;
            private static bool _versionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#versionCode"/>
            /// </summary>
            public static int versionCode { get { if (!_versionCodeReady) { _versionCodeContent = SGetField<int>(LocalBridgeClazz, "versionCode"); _versionCodeReady = true; } return _versionCodeContent; } }
            private static int _versionCodeContent = default;
            private static bool _versionCodeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#versionCodeMajor"/>
            /// </summary>
            public static int versionCodeMajor { get { if (!_versionCodeMajorReady) { _versionCodeMajorContent = SGetField<int>(LocalBridgeClazz, "versionCodeMajor"); _versionCodeMajorReady = true; } return _versionCodeMajorContent; } }
            private static int _versionCodeMajorContent = default;
            private static bool _versionCodeMajorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#versionMajor"/>
            /// </summary>
            public static int versionMajor { get { if (!_versionMajorReady) { _versionMajorContent = SGetField<int>(LocalBridgeClazz, "versionMajor"); _versionMajorReady = true; } return _versionMajorContent; } }
            private static int _versionMajorContent = default;
            private static bool _versionMajorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#versionName"/>
            /// </summary>
            public static int versionName { get { if (!_versionNameReady) { _versionNameContent = SGetField<int>(LocalBridgeClazz, "versionName"); _versionNameReady = true; } return _versionNameContent; } }
            private static int _versionNameContent = default;
            private static bool _versionNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#verticalCorrection"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int verticalCorrection { get { if (!_verticalCorrectionReady) { _verticalCorrectionContent = SGetField<int>(LocalBridgeClazz, "verticalCorrection"); _verticalCorrectionReady = true; } return _verticalCorrectionContent; } }
            private static int _verticalCorrectionContent = default;
            private static bool _verticalCorrectionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#verticalDivider"/>
            /// </summary>
            public static int verticalDivider { get { if (!_verticalDividerReady) { _verticalDividerContent = SGetField<int>(LocalBridgeClazz, "verticalDivider"); _verticalDividerReady = true; } return _verticalDividerContent; } }
            private static int _verticalDividerContent = default;
            private static bool _verticalDividerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#verticalGap"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int verticalGap { get { if (!_verticalGapReady) { _verticalGapContent = SGetField<int>(LocalBridgeClazz, "verticalGap"); _verticalGapReady = true; } return _verticalGapContent; } }
            private static int _verticalGapContent = default;
            private static bool _verticalGapReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#verticalScrollbarPosition"/>
            /// </summary>
            public static int verticalScrollbarPosition { get { if (!_verticalScrollbarPositionReady) { _verticalScrollbarPositionContent = SGetField<int>(LocalBridgeClazz, "verticalScrollbarPosition"); _verticalScrollbarPositionReady = true; } return _verticalScrollbarPositionContent; } }
            private static int _verticalScrollbarPositionContent = default;
            private static bool _verticalScrollbarPositionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#verticalSpacing"/>
            /// </summary>
            public static int verticalSpacing { get { if (!_verticalSpacingReady) { _verticalSpacingContent = SGetField<int>(LocalBridgeClazz, "verticalSpacing"); _verticalSpacingReady = true; } return _verticalSpacingContent; } }
            private static int _verticalSpacingContent = default;
            private static bool _verticalSpacingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#viewportHeight"/>
            /// </summary>
            public static int viewportHeight { get { if (!_viewportHeightReady) { _viewportHeightContent = SGetField<int>(LocalBridgeClazz, "viewportHeight"); _viewportHeightReady = true; } return _viewportHeightContent; } }
            private static int _viewportHeightContent = default;
            private static bool _viewportHeightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#viewportWidth"/>
            /// </summary>
            public static int viewportWidth { get { if (!_viewportWidthReady) { _viewportWidthContent = SGetField<int>(LocalBridgeClazz, "viewportWidth"); _viewportWidthReady = true; } return _viewportWidthContent; } }
            private static int _viewportWidthContent = default;
            private static bool _viewportWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#visibility"/>
            /// </summary>
            public static int visibility { get { if (!_visibilityReady) { _visibilityContent = SGetField<int>(LocalBridgeClazz, "visibility"); _visibilityReady = true; } return _visibilityContent; } }
            private static int _visibilityContent = default;
            private static bool _visibilityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#visible"/>
            /// </summary>
            public static int visible { get { if (!_visibleReady) { _visibleContent = SGetField<int>(LocalBridgeClazz, "visible"); _visibleReady = true; } return _visibleContent; } }
            private static int _visibleContent = default;
            private static bool _visibleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#visibleToInstantApps"/>
            /// </summary>
            public static int visibleToInstantApps { get { if (!_visibleToInstantAppsReady) { _visibleToInstantAppsContent = SGetField<int>(LocalBridgeClazz, "visibleToInstantApps"); _visibleToInstantAppsReady = true; } return _visibleToInstantAppsContent; } }
            private static int _visibleToInstantAppsContent = default;
            private static bool _visibleToInstantAppsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#vmSafeMode"/>
            /// </summary>
            public static int vmSafeMode { get { if (!_vmSafeModeReady) { _vmSafeModeContent = SGetField<int>(LocalBridgeClazz, "vmSafeMode"); _vmSafeModeReady = true; } return _vmSafeModeContent; } }
            private static int _vmSafeModeContent = default;
            private static bool _vmSafeModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#voiceIcon"/>
            /// </summary>
            public static int voiceIcon { get { if (!_voiceIconReady) { _voiceIconContent = SGetField<int>(LocalBridgeClazz, "voiceIcon"); _voiceIconReady = true; } return _voiceIconContent; } }
            private static int _voiceIconContent = default;
            private static bool _voiceIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#voiceLanguage"/>
            /// </summary>
            public static int voiceLanguage { get { if (!_voiceLanguageReady) { _voiceLanguageContent = SGetField<int>(LocalBridgeClazz, "voiceLanguage"); _voiceLanguageReady = true; } return _voiceLanguageContent; } }
            private static int _voiceLanguageContent = default;
            private static bool _voiceLanguageReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#voiceLanguageModel"/>
            /// </summary>
            public static int voiceLanguageModel { get { if (!_voiceLanguageModelReady) { _voiceLanguageModelContent = SGetField<int>(LocalBridgeClazz, "voiceLanguageModel"); _voiceLanguageModelReady = true; } return _voiceLanguageModelContent; } }
            private static int _voiceLanguageModelContent = default;
            private static bool _voiceLanguageModelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#voiceMaxResults"/>
            /// </summary>
            public static int voiceMaxResults { get { if (!_voiceMaxResultsReady) { _voiceMaxResultsContent = SGetField<int>(LocalBridgeClazz, "voiceMaxResults"); _voiceMaxResultsReady = true; } return _voiceMaxResultsContent; } }
            private static int _voiceMaxResultsContent = default;
            private static bool _voiceMaxResultsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#voicePromptText"/>
            /// </summary>
            public static int voicePromptText { get { if (!_voicePromptTextReady) { _voicePromptTextContent = SGetField<int>(LocalBridgeClazz, "voicePromptText"); _voicePromptTextReady = true; } return _voicePromptTextContent; } }
            private static int _voicePromptTextContent = default;
            private static bool _voicePromptTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#voiceSearchMode"/>
            /// </summary>
            public static int voiceSearchMode { get { if (!_voiceSearchModeReady) { _voiceSearchModeContent = SGetField<int>(LocalBridgeClazz, "voiceSearchMode"); _voiceSearchModeReady = true; } return _voiceSearchModeContent; } }
            private static int _voiceSearchModeContent = default;
            private static bool _voiceSearchModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#wallpaperCloseEnterAnimation"/>
            /// </summary>
            public static int wallpaperCloseEnterAnimation { get { if (!_wallpaperCloseEnterAnimationReady) { _wallpaperCloseEnterAnimationContent = SGetField<int>(LocalBridgeClazz, "wallpaperCloseEnterAnimation"); _wallpaperCloseEnterAnimationReady = true; } return _wallpaperCloseEnterAnimationContent; } }
            private static int _wallpaperCloseEnterAnimationContent = default;
            private static bool _wallpaperCloseEnterAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#wallpaperCloseExitAnimation"/>
            /// </summary>
            public static int wallpaperCloseExitAnimation { get { if (!_wallpaperCloseExitAnimationReady) { _wallpaperCloseExitAnimationContent = SGetField<int>(LocalBridgeClazz, "wallpaperCloseExitAnimation"); _wallpaperCloseExitAnimationReady = true; } return _wallpaperCloseExitAnimationContent; } }
            private static int _wallpaperCloseExitAnimationContent = default;
            private static bool _wallpaperCloseExitAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#wallpaperIntraCloseEnterAnimation"/>
            /// </summary>
            public static int wallpaperIntraCloseEnterAnimation { get { if (!_wallpaperIntraCloseEnterAnimationReady) { _wallpaperIntraCloseEnterAnimationContent = SGetField<int>(LocalBridgeClazz, "wallpaperIntraCloseEnterAnimation"); _wallpaperIntraCloseEnterAnimationReady = true; } return _wallpaperIntraCloseEnterAnimationContent; } }
            private static int _wallpaperIntraCloseEnterAnimationContent = default;
            private static bool _wallpaperIntraCloseEnterAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#wallpaperIntraCloseExitAnimation"/>
            /// </summary>
            public static int wallpaperIntraCloseExitAnimation { get { if (!_wallpaperIntraCloseExitAnimationReady) { _wallpaperIntraCloseExitAnimationContent = SGetField<int>(LocalBridgeClazz, "wallpaperIntraCloseExitAnimation"); _wallpaperIntraCloseExitAnimationReady = true; } return _wallpaperIntraCloseExitAnimationContent; } }
            private static int _wallpaperIntraCloseExitAnimationContent = default;
            private static bool _wallpaperIntraCloseExitAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#wallpaperIntraOpenEnterAnimation"/>
            /// </summary>
            public static int wallpaperIntraOpenEnterAnimation { get { if (!_wallpaperIntraOpenEnterAnimationReady) { _wallpaperIntraOpenEnterAnimationContent = SGetField<int>(LocalBridgeClazz, "wallpaperIntraOpenEnterAnimation"); _wallpaperIntraOpenEnterAnimationReady = true; } return _wallpaperIntraOpenEnterAnimationContent; } }
            private static int _wallpaperIntraOpenEnterAnimationContent = default;
            private static bool _wallpaperIntraOpenEnterAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#wallpaperIntraOpenExitAnimation"/>
            /// </summary>
            public static int wallpaperIntraOpenExitAnimation { get { if (!_wallpaperIntraOpenExitAnimationReady) { _wallpaperIntraOpenExitAnimationContent = SGetField<int>(LocalBridgeClazz, "wallpaperIntraOpenExitAnimation"); _wallpaperIntraOpenExitAnimationReady = true; } return _wallpaperIntraOpenExitAnimationContent; } }
            private static int _wallpaperIntraOpenExitAnimationContent = default;
            private static bool _wallpaperIntraOpenExitAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#wallpaperOpenEnterAnimation"/>
            /// </summary>
            public static int wallpaperOpenEnterAnimation { get { if (!_wallpaperOpenEnterAnimationReady) { _wallpaperOpenEnterAnimationContent = SGetField<int>(LocalBridgeClazz, "wallpaperOpenEnterAnimation"); _wallpaperOpenEnterAnimationReady = true; } return _wallpaperOpenEnterAnimationContent; } }
            private static int _wallpaperOpenEnterAnimationContent = default;
            private static bool _wallpaperOpenEnterAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#wallpaperOpenExitAnimation"/>
            /// </summary>
            public static int wallpaperOpenExitAnimation { get { if (!_wallpaperOpenExitAnimationReady) { _wallpaperOpenExitAnimationContent = SGetField<int>(LocalBridgeClazz, "wallpaperOpenExitAnimation"); _wallpaperOpenExitAnimationReady = true; } return _wallpaperOpenExitAnimationContent; } }
            private static int _wallpaperOpenExitAnimationContent = default;
            private static bool _wallpaperOpenExitAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#webTextViewStyle"/>
            /// </summary>
            public static int webTextViewStyle { get { if (!_webTextViewStyleReady) { _webTextViewStyleContent = SGetField<int>(LocalBridgeClazz, "webTextViewStyle"); _webTextViewStyleReady = true; } return _webTextViewStyleContent; } }
            private static int _webTextViewStyleContent = default;
            private static bool _webTextViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#webViewStyle"/>
            /// </summary>
            public static int webViewStyle { get { if (!_webViewStyleReady) { _webViewStyleContent = SGetField<int>(LocalBridgeClazz, "webViewStyle"); _webViewStyleReady = true; } return _webViewStyleContent; } }
            private static int _webViewStyleContent = default;
            private static bool _webViewStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#weekDayTextAppearance"/>
            /// </summary>
            public static int weekDayTextAppearance { get { if (!_weekDayTextAppearanceReady) { _weekDayTextAppearanceContent = SGetField<int>(LocalBridgeClazz, "weekDayTextAppearance"); _weekDayTextAppearanceReady = true; } return _weekDayTextAppearanceContent; } }
            private static int _weekDayTextAppearanceContent = default;
            private static bool _weekDayTextAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#weekNumberColor"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int weekNumberColor { get { if (!_weekNumberColorReady) { _weekNumberColorContent = SGetField<int>(LocalBridgeClazz, "weekNumberColor"); _weekNumberColorReady = true; } return _weekNumberColorContent; } }
            private static int _weekNumberColorContent = default;
            private static bool _weekNumberColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#weekSeparatorLineColor"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int weekSeparatorLineColor { get { if (!_weekSeparatorLineColorReady) { _weekSeparatorLineColorContent = SGetField<int>(LocalBridgeClazz, "weekSeparatorLineColor"); _weekSeparatorLineColorReady = true; } return _weekSeparatorLineColorContent; } }
            private static int _weekSeparatorLineColorContent = default;
            private static bool _weekSeparatorLineColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#weightSum"/>
            /// </summary>
            public static int weightSum { get { if (!_weightSumReady) { _weightSumContent = SGetField<int>(LocalBridgeClazz, "weightSum"); _weightSumReady = true; } return _weightSumContent; } }
            private static int _weightSumContent = default;
            private static bool _weightSumReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#widgetCategory"/>
            /// </summary>
            public static int widgetCategory { get { if (!_widgetCategoryReady) { _widgetCategoryContent = SGetField<int>(LocalBridgeClazz, "widgetCategory"); _widgetCategoryReady = true; } return _widgetCategoryContent; } }
            private static int _widgetCategoryContent = default;
            private static bool _widgetCategoryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#widgetFeatures"/>
            /// </summary>
            public static int widgetFeatures { get { if (!_widgetFeaturesReady) { _widgetFeaturesContent = SGetField<int>(LocalBridgeClazz, "widgetFeatures"); _widgetFeaturesReady = true; } return _widgetFeaturesContent; } }
            private static int _widgetFeaturesContent = default;
            private static bool _widgetFeaturesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#widgetLayout"/>
            /// </summary>
            public static int widgetLayout { get { if (!_widgetLayoutReady) { _widgetLayoutContent = SGetField<int>(LocalBridgeClazz, "widgetLayout"); _widgetLayoutReady = true; } return _widgetLayoutContent; } }
            private static int _widgetLayoutContent = default;
            private static bool _widgetLayoutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#width"/>
            /// </summary>
            public static int width { get { if (!_widthReady) { _widthContent = SGetField<int>(LocalBridgeClazz, "width"); _widthReady = true; } return _widthContent; } }
            private static int _widthContent = default;
            private static bool _widthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowActionBar"/>
            /// </summary>
            public static int windowActionBar { get { if (!_windowActionBarReady) { _windowActionBarContent = SGetField<int>(LocalBridgeClazz, "windowActionBar"); _windowActionBarReady = true; } return _windowActionBarContent; } }
            private static int _windowActionBarContent = default;
            private static bool _windowActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowActionBarOverlay"/>
            /// </summary>
            public static int windowActionBarOverlay { get { if (!_windowActionBarOverlayReady) { _windowActionBarOverlayContent = SGetField<int>(LocalBridgeClazz, "windowActionBarOverlay"); _windowActionBarOverlayReady = true; } return _windowActionBarOverlayContent; } }
            private static int _windowActionBarOverlayContent = default;
            private static bool _windowActionBarOverlayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowActionModeOverlay"/>
            /// </summary>
            public static int windowActionModeOverlay { get { if (!_windowActionModeOverlayReady) { _windowActionModeOverlayContent = SGetField<int>(LocalBridgeClazz, "windowActionModeOverlay"); _windowActionModeOverlayReady = true; } return _windowActionModeOverlayContent; } }
            private static int _windowActionModeOverlayContent = default;
            private static bool _windowActionModeOverlayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowActivityTransitions"/>
            /// </summary>
            public static int windowActivityTransitions { get { if (!_windowActivityTransitionsReady) { _windowActivityTransitionsContent = SGetField<int>(LocalBridgeClazz, "windowActivityTransitions"); _windowActivityTransitionsReady = true; } return _windowActivityTransitionsContent; } }
            private static int _windowActivityTransitionsContent = default;
            private static bool _windowActivityTransitionsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowAllowEnterTransitionOverlap"/>
            /// </summary>
            public static int windowAllowEnterTransitionOverlap { get { if (!_windowAllowEnterTransitionOverlapReady) { _windowAllowEnterTransitionOverlapContent = SGetField<int>(LocalBridgeClazz, "windowAllowEnterTransitionOverlap"); _windowAllowEnterTransitionOverlapReady = true; } return _windowAllowEnterTransitionOverlapContent; } }
            private static int _windowAllowEnterTransitionOverlapContent = default;
            private static bool _windowAllowEnterTransitionOverlapReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowAllowReturnTransitionOverlap"/>
            /// </summary>
            public static int windowAllowReturnTransitionOverlap { get { if (!_windowAllowReturnTransitionOverlapReady) { _windowAllowReturnTransitionOverlapContent = SGetField<int>(LocalBridgeClazz, "windowAllowReturnTransitionOverlap"); _windowAllowReturnTransitionOverlapReady = true; } return _windowAllowReturnTransitionOverlapContent; } }
            private static int _windowAllowReturnTransitionOverlapContent = default;
            private static bool _windowAllowReturnTransitionOverlapReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowAnimationStyle"/>
            /// </summary>
            public static int windowAnimationStyle { get { if (!_windowAnimationStyleReady) { _windowAnimationStyleContent = SGetField<int>(LocalBridgeClazz, "windowAnimationStyle"); _windowAnimationStyleReady = true; } return _windowAnimationStyleContent; } }
            private static int _windowAnimationStyleContent = default;
            private static bool _windowAnimationStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowBackground"/>
            /// </summary>
            public static int windowBackground { get { if (!_windowBackgroundReady) { _windowBackgroundContent = SGetField<int>(LocalBridgeClazz, "windowBackground"); _windowBackgroundReady = true; } return _windowBackgroundContent; } }
            private static int _windowBackgroundContent = default;
            private static bool _windowBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowBackgroundBlurRadius"/>
            /// </summary>
            public static int windowBackgroundBlurRadius { get { if (!_windowBackgroundBlurRadiusReady) { _windowBackgroundBlurRadiusContent = SGetField<int>(LocalBridgeClazz, "windowBackgroundBlurRadius"); _windowBackgroundBlurRadiusReady = true; } return _windowBackgroundBlurRadiusContent; } }
            private static int _windowBackgroundBlurRadiusContent = default;
            private static bool _windowBackgroundBlurRadiusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowBackgroundFallback"/>
            /// </summary>
            public static int windowBackgroundFallback { get { if (!_windowBackgroundFallbackReady) { _windowBackgroundFallbackContent = SGetField<int>(LocalBridgeClazz, "windowBackgroundFallback"); _windowBackgroundFallbackReady = true; } return _windowBackgroundFallbackContent; } }
            private static int _windowBackgroundFallbackContent = default;
            private static bool _windowBackgroundFallbackReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowBlurBehindEnabled"/>
            /// </summary>
            public static int windowBlurBehindEnabled { get { if (!_windowBlurBehindEnabledReady) { _windowBlurBehindEnabledContent = SGetField<int>(LocalBridgeClazz, "windowBlurBehindEnabled"); _windowBlurBehindEnabledReady = true; } return _windowBlurBehindEnabledContent; } }
            private static int _windowBlurBehindEnabledContent = default;
            private static bool _windowBlurBehindEnabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowBlurBehindRadius"/>
            /// </summary>
            public static int windowBlurBehindRadius { get { if (!_windowBlurBehindRadiusReady) { _windowBlurBehindRadiusContent = SGetField<int>(LocalBridgeClazz, "windowBlurBehindRadius"); _windowBlurBehindRadiusReady = true; } return _windowBlurBehindRadiusContent; } }
            private static int _windowBlurBehindRadiusContent = default;
            private static bool _windowBlurBehindRadiusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowClipToOutline"/>
            /// </summary>
            public static int windowClipToOutline { get { if (!_windowClipToOutlineReady) { _windowClipToOutlineContent = SGetField<int>(LocalBridgeClazz, "windowClipToOutline"); _windowClipToOutlineReady = true; } return _windowClipToOutlineContent; } }
            private static int _windowClipToOutlineContent = default;
            private static bool _windowClipToOutlineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowCloseOnTouchOutside"/>
            /// </summary>
            public static int windowCloseOnTouchOutside { get { if (!_windowCloseOnTouchOutsideReady) { _windowCloseOnTouchOutsideContent = SGetField<int>(LocalBridgeClazz, "windowCloseOnTouchOutside"); _windowCloseOnTouchOutsideReady = true; } return _windowCloseOnTouchOutsideContent; } }
            private static int _windowCloseOnTouchOutsideContent = default;
            private static bool _windowCloseOnTouchOutsideReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowContentOverlay"/>
            /// </summary>
            public static int windowContentOverlay { get { if (!_windowContentOverlayReady) { _windowContentOverlayContent = SGetField<int>(LocalBridgeClazz, "windowContentOverlay"); _windowContentOverlayReady = true; } return _windowContentOverlayContent; } }
            private static int _windowContentOverlayContent = default;
            private static bool _windowContentOverlayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowContentTransitionManager"/>
            /// </summary>
            public static int windowContentTransitionManager { get { if (!_windowContentTransitionManagerReady) { _windowContentTransitionManagerContent = SGetField<int>(LocalBridgeClazz, "windowContentTransitionManager"); _windowContentTransitionManagerReady = true; } return _windowContentTransitionManagerContent; } }
            private static int _windowContentTransitionManagerContent = default;
            private static bool _windowContentTransitionManagerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowContentTransitions"/>
            /// </summary>
            public static int windowContentTransitions { get { if (!_windowContentTransitionsReady) { _windowContentTransitionsContent = SGetField<int>(LocalBridgeClazz, "windowContentTransitions"); _windowContentTransitionsReady = true; } return _windowContentTransitionsContent; } }
            private static int _windowContentTransitionsContent = default;
            private static bool _windowContentTransitionsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowDisablePreview"/>
            /// </summary>
            public static int windowDisablePreview { get { if (!_windowDisablePreviewReady) { _windowDisablePreviewContent = SGetField<int>(LocalBridgeClazz, "windowDisablePreview"); _windowDisablePreviewReady = true; } return _windowDisablePreviewContent; } }
            private static int _windowDisablePreviewContent = default;
            private static bool _windowDisablePreviewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowDrawsSystemBarBackgrounds"/>
            /// </summary>
            public static int windowDrawsSystemBarBackgrounds { get { if (!_windowDrawsSystemBarBackgroundsReady) { _windowDrawsSystemBarBackgroundsContent = SGetField<int>(LocalBridgeClazz, "windowDrawsSystemBarBackgrounds"); _windowDrawsSystemBarBackgroundsReady = true; } return _windowDrawsSystemBarBackgroundsContent; } }
            private static int _windowDrawsSystemBarBackgroundsContent = default;
            private static bool _windowDrawsSystemBarBackgroundsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowElevation"/>
            /// </summary>
            public static int windowElevation { get { if (!_windowElevationReady) { _windowElevationContent = SGetField<int>(LocalBridgeClazz, "windowElevation"); _windowElevationReady = true; } return _windowElevationContent; } }
            private static int _windowElevationContent = default;
            private static bool _windowElevationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowEnableSplitTouch"/>
            /// </summary>
            public static int windowEnableSplitTouch { get { if (!_windowEnableSplitTouchReady) { _windowEnableSplitTouchContent = SGetField<int>(LocalBridgeClazz, "windowEnableSplitTouch"); _windowEnableSplitTouchReady = true; } return _windowEnableSplitTouchContent; } }
            private static int _windowEnableSplitTouchContent = default;
            private static bool _windowEnableSplitTouchReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowEnterAnimation"/>
            /// </summary>
            public static int windowEnterAnimation { get { if (!_windowEnterAnimationReady) { _windowEnterAnimationContent = SGetField<int>(LocalBridgeClazz, "windowEnterAnimation"); _windowEnterAnimationReady = true; } return _windowEnterAnimationContent; } }
            private static int _windowEnterAnimationContent = default;
            private static bool _windowEnterAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowEnterTransition"/>
            /// </summary>
            public static int windowEnterTransition { get { if (!_windowEnterTransitionReady) { _windowEnterTransitionContent = SGetField<int>(LocalBridgeClazz, "windowEnterTransition"); _windowEnterTransitionReady = true; } return _windowEnterTransitionContent; } }
            private static int _windowEnterTransitionContent = default;
            private static bool _windowEnterTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowExitAnimation"/>
            /// </summary>
            public static int windowExitAnimation { get { if (!_windowExitAnimationReady) { _windowExitAnimationContent = SGetField<int>(LocalBridgeClazz, "windowExitAnimation"); _windowExitAnimationReady = true; } return _windowExitAnimationContent; } }
            private static int _windowExitAnimationContent = default;
            private static bool _windowExitAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowExitTransition"/>
            /// </summary>
            public static int windowExitTransition { get { if (!_windowExitTransitionReady) { _windowExitTransitionContent = SGetField<int>(LocalBridgeClazz, "windowExitTransition"); _windowExitTransitionReady = true; } return _windowExitTransitionContent; } }
            private static int _windowExitTransitionContent = default;
            private static bool _windowExitTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowFrame"/>
            /// </summary>
            public static int windowFrame { get { if (!_windowFrameReady) { _windowFrameContent = SGetField<int>(LocalBridgeClazz, "windowFrame"); _windowFrameReady = true; } return _windowFrameContent; } }
            private static int _windowFrameContent = default;
            private static bool _windowFrameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowFullscreen"/>
            /// </summary>
            public static int windowFullscreen { get { if (!_windowFullscreenReady) { _windowFullscreenContent = SGetField<int>(LocalBridgeClazz, "windowFullscreen"); _windowFullscreenReady = true; } return _windowFullscreenContent; } }
            private static int _windowFullscreenContent = default;
            private static bool _windowFullscreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowHideAnimation"/>
            /// </summary>
            public static int windowHideAnimation { get { if (!_windowHideAnimationReady) { _windowHideAnimationContent = SGetField<int>(LocalBridgeClazz, "windowHideAnimation"); _windowHideAnimationReady = true; } return _windowHideAnimationContent; } }
            private static int _windowHideAnimationContent = default;
            private static bool _windowHideAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowIsFloating"/>
            /// </summary>
            public static int windowIsFloating { get { if (!_windowIsFloatingReady) { _windowIsFloatingContent = SGetField<int>(LocalBridgeClazz, "windowIsFloating"); _windowIsFloatingReady = true; } return _windowIsFloatingContent; } }
            private static int _windowIsFloatingContent = default;
            private static bool _windowIsFloatingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowIsFrameRatePowerSavingsBalanced"/>
            /// </summary>
            public static int windowIsFrameRatePowerSavingsBalanced { get { if (!_windowIsFrameRatePowerSavingsBalancedReady) { _windowIsFrameRatePowerSavingsBalancedContent = SGetField<int>(LocalBridgeClazz, "windowIsFrameRatePowerSavingsBalanced"); _windowIsFrameRatePowerSavingsBalancedReady = true; } return _windowIsFrameRatePowerSavingsBalancedContent; } }
            private static int _windowIsFrameRatePowerSavingsBalancedContent = default;
            private static bool _windowIsFrameRatePowerSavingsBalancedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowIsTranslucent"/>
            /// </summary>
            public static int windowIsTranslucent { get { if (!_windowIsTranslucentReady) { _windowIsTranslucentContent = SGetField<int>(LocalBridgeClazz, "windowIsTranslucent"); _windowIsTranslucentReady = true; } return _windowIsTranslucentContent; } }
            private static int _windowIsTranslucentContent = default;
            private static bool _windowIsTranslucentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowLayoutAffinity"/>
            /// </summary>
            public static int windowLayoutAffinity { get { if (!_windowLayoutAffinityReady) { _windowLayoutAffinityContent = SGetField<int>(LocalBridgeClazz, "windowLayoutAffinity"); _windowLayoutAffinityReady = true; } return _windowLayoutAffinityContent; } }
            private static int _windowLayoutAffinityContent = default;
            private static bool _windowLayoutAffinityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowLayoutInDisplayCutoutMode"/>
            /// </summary>
            public static int windowLayoutInDisplayCutoutMode { get { if (!_windowLayoutInDisplayCutoutModeReady) { _windowLayoutInDisplayCutoutModeContent = SGetField<int>(LocalBridgeClazz, "windowLayoutInDisplayCutoutMode"); _windowLayoutInDisplayCutoutModeReady = true; } return _windowLayoutInDisplayCutoutModeContent; } }
            private static int _windowLayoutInDisplayCutoutModeContent = default;
            private static bool _windowLayoutInDisplayCutoutModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowLightNavigationBar"/>
            /// </summary>
            public static int windowLightNavigationBar { get { if (!_windowLightNavigationBarReady) { _windowLightNavigationBarContent = SGetField<int>(LocalBridgeClazz, "windowLightNavigationBar"); _windowLightNavigationBarReady = true; } return _windowLightNavigationBarContent; } }
            private static int _windowLightNavigationBarContent = default;
            private static bool _windowLightNavigationBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowLightStatusBar"/>
            /// </summary>
            public static int windowLightStatusBar { get { if (!_windowLightStatusBarReady) { _windowLightStatusBarContent = SGetField<int>(LocalBridgeClazz, "windowLightStatusBar"); _windowLightStatusBarReady = true; } return _windowLightStatusBarContent; } }
            private static int _windowLightStatusBarContent = default;
            private static bool _windowLightStatusBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowMinWidthMajor"/>
            /// </summary>
            public static int windowMinWidthMajor { get { if (!_windowMinWidthMajorReady) { _windowMinWidthMajorContent = SGetField<int>(LocalBridgeClazz, "windowMinWidthMajor"); _windowMinWidthMajorReady = true; } return _windowMinWidthMajorContent; } }
            private static int _windowMinWidthMajorContent = default;
            private static bool _windowMinWidthMajorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowMinWidthMinor"/>
            /// </summary>
            public static int windowMinWidthMinor { get { if (!_windowMinWidthMinorReady) { _windowMinWidthMinorContent = SGetField<int>(LocalBridgeClazz, "windowMinWidthMinor"); _windowMinWidthMinorReady = true; } return _windowMinWidthMinorContent; } }
            private static int _windowMinWidthMinorContent = default;
            private static bool _windowMinWidthMinorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowNoDisplay"/>
            /// </summary>
            public static int windowNoDisplay { get { if (!_windowNoDisplayReady) { _windowNoDisplayContent = SGetField<int>(LocalBridgeClazz, "windowNoDisplay"); _windowNoDisplayReady = true; } return _windowNoDisplayContent; } }
            private static int _windowNoDisplayContent = default;
            private static bool _windowNoDisplayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowNoMoveAnimation"/>
            /// </summary>
            public static int windowNoMoveAnimation { get { if (!_windowNoMoveAnimationReady) { _windowNoMoveAnimationContent = SGetField<int>(LocalBridgeClazz, "windowNoMoveAnimation"); _windowNoMoveAnimationReady = true; } return _windowNoMoveAnimationContent; } }
            private static int _windowNoMoveAnimationContent = default;
            private static bool _windowNoMoveAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowNoTitle"/>
            /// </summary>
            public static int windowNoTitle { get { if (!_windowNoTitleReady) { _windowNoTitleContent = SGetField<int>(LocalBridgeClazz, "windowNoTitle"); _windowNoTitleReady = true; } return _windowNoTitleContent; } }
            private static int _windowNoTitleContent = default;
            private static bool _windowNoTitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowOptOutEdgeToEdgeEnforcement"/>
            /// </summary>
            public static int windowOptOutEdgeToEdgeEnforcement { get { if (!_windowOptOutEdgeToEdgeEnforcementReady) { _windowOptOutEdgeToEdgeEnforcementContent = SGetField<int>(LocalBridgeClazz, "windowOptOutEdgeToEdgeEnforcement"); _windowOptOutEdgeToEdgeEnforcementReady = true; } return _windowOptOutEdgeToEdgeEnforcementContent; } }
            private static int _windowOptOutEdgeToEdgeEnforcementContent = default;
            private static bool _windowOptOutEdgeToEdgeEnforcementReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowOverscan"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int windowOverscan { get { if (!_windowOverscanReady) { _windowOverscanContent = SGetField<int>(LocalBridgeClazz, "windowOverscan"); _windowOverscanReady = true; } return _windowOverscanContent; } }
            private static int _windowOverscanContent = default;
            private static bool _windowOverscanReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowReenterTransition"/>
            /// </summary>
            public static int windowReenterTransition { get { if (!_windowReenterTransitionReady) { _windowReenterTransitionContent = SGetField<int>(LocalBridgeClazz, "windowReenterTransition"); _windowReenterTransitionReady = true; } return _windowReenterTransitionContent; } }
            private static int _windowReenterTransitionContent = default;
            private static bool _windowReenterTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowReturnTransition"/>
            /// </summary>
            public static int windowReturnTransition { get { if (!_windowReturnTransitionReady) { _windowReturnTransitionContent = SGetField<int>(LocalBridgeClazz, "windowReturnTransition"); _windowReturnTransitionReady = true; } return _windowReturnTransitionContent; } }
            private static int _windowReturnTransitionContent = default;
            private static bool _windowReturnTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowSharedElementEnterTransition"/>
            /// </summary>
            public static int windowSharedElementEnterTransition { get { if (!_windowSharedElementEnterTransitionReady) { _windowSharedElementEnterTransitionContent = SGetField<int>(LocalBridgeClazz, "windowSharedElementEnterTransition"); _windowSharedElementEnterTransitionReady = true; } return _windowSharedElementEnterTransitionContent; } }
            private static int _windowSharedElementEnterTransitionContent = default;
            private static bool _windowSharedElementEnterTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowSharedElementExitTransition"/>
            /// </summary>
            public static int windowSharedElementExitTransition { get { if (!_windowSharedElementExitTransitionReady) { _windowSharedElementExitTransitionContent = SGetField<int>(LocalBridgeClazz, "windowSharedElementExitTransition"); _windowSharedElementExitTransitionReady = true; } return _windowSharedElementExitTransitionContent; } }
            private static int _windowSharedElementExitTransitionContent = default;
            private static bool _windowSharedElementExitTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowSharedElementReenterTransition"/>
            /// </summary>
            public static int windowSharedElementReenterTransition { get { if (!_windowSharedElementReenterTransitionReady) { _windowSharedElementReenterTransitionContent = SGetField<int>(LocalBridgeClazz, "windowSharedElementReenterTransition"); _windowSharedElementReenterTransitionReady = true; } return _windowSharedElementReenterTransitionContent; } }
            private static int _windowSharedElementReenterTransitionContent = default;
            private static bool _windowSharedElementReenterTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowSharedElementReturnTransition"/>
            /// </summary>
            public static int windowSharedElementReturnTransition { get { if (!_windowSharedElementReturnTransitionReady) { _windowSharedElementReturnTransitionContent = SGetField<int>(LocalBridgeClazz, "windowSharedElementReturnTransition"); _windowSharedElementReturnTransitionReady = true; } return _windowSharedElementReturnTransitionContent; } }
            private static int _windowSharedElementReturnTransitionContent = default;
            private static bool _windowSharedElementReturnTransitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowSharedElementsUseOverlay"/>
            /// </summary>
            public static int windowSharedElementsUseOverlay { get { if (!_windowSharedElementsUseOverlayReady) { _windowSharedElementsUseOverlayContent = SGetField<int>(LocalBridgeClazz, "windowSharedElementsUseOverlay"); _windowSharedElementsUseOverlayReady = true; } return _windowSharedElementsUseOverlayContent; } }
            private static int _windowSharedElementsUseOverlayContent = default;
            private static bool _windowSharedElementsUseOverlayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowShowAnimation"/>
            /// </summary>
            public static int windowShowAnimation { get { if (!_windowShowAnimationReady) { _windowShowAnimationContent = SGetField<int>(LocalBridgeClazz, "windowShowAnimation"); _windowShowAnimationReady = true; } return _windowShowAnimationContent; } }
            private static int _windowShowAnimationContent = default;
            private static bool _windowShowAnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowShowWallpaper"/>
            /// </summary>
            public static int windowShowWallpaper { get { if (!_windowShowWallpaperReady) { _windowShowWallpaperContent = SGetField<int>(LocalBridgeClazz, "windowShowWallpaper"); _windowShowWallpaperReady = true; } return _windowShowWallpaperContent; } }
            private static int _windowShowWallpaperContent = default;
            private static bool _windowShowWallpaperReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowSoftInputMode"/>
            /// </summary>
            public static int windowSoftInputMode { get { if (!_windowSoftInputModeReady) { _windowSoftInputModeContent = SGetField<int>(LocalBridgeClazz, "windowSoftInputMode"); _windowSoftInputModeReady = true; } return _windowSoftInputModeContent; } }
            private static int _windowSoftInputModeContent = default;
            private static bool _windowSoftInputModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowSplashScreenAnimatedIcon"/>
            /// </summary>
            public static int windowSplashScreenAnimatedIcon { get { if (!_windowSplashScreenAnimatedIconReady) { _windowSplashScreenAnimatedIconContent = SGetField<int>(LocalBridgeClazz, "windowSplashScreenAnimatedIcon"); _windowSplashScreenAnimatedIconReady = true; } return _windowSplashScreenAnimatedIconContent; } }
            private static int _windowSplashScreenAnimatedIconContent = default;
            private static bool _windowSplashScreenAnimatedIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowSplashScreenAnimationDuration"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int windowSplashScreenAnimationDuration { get { if (!_windowSplashScreenAnimationDurationReady) { _windowSplashScreenAnimationDurationContent = SGetField<int>(LocalBridgeClazz, "windowSplashScreenAnimationDuration"); _windowSplashScreenAnimationDurationReady = true; } return _windowSplashScreenAnimationDurationContent; } }
            private static int _windowSplashScreenAnimationDurationContent = default;
            private static bool _windowSplashScreenAnimationDurationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowSplashScreenBackground"/>
            /// </summary>
            public static int windowSplashScreenBackground { get { if (!_windowSplashScreenBackgroundReady) { _windowSplashScreenBackgroundContent = SGetField<int>(LocalBridgeClazz, "windowSplashScreenBackground"); _windowSplashScreenBackgroundReady = true; } return _windowSplashScreenBackgroundContent; } }
            private static int _windowSplashScreenBackgroundContent = default;
            private static bool _windowSplashScreenBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowSplashScreenBehavior"/>
            /// </summary>
            public static int windowSplashScreenBehavior { get { if (!_windowSplashScreenBehaviorReady) { _windowSplashScreenBehaviorContent = SGetField<int>(LocalBridgeClazz, "windowSplashScreenBehavior"); _windowSplashScreenBehaviorReady = true; } return _windowSplashScreenBehaviorContent; } }
            private static int _windowSplashScreenBehaviorContent = default;
            private static bool _windowSplashScreenBehaviorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowSplashScreenBrandingImage"/>
            /// </summary>
            public static int windowSplashScreenBrandingImage { get { if (!_windowSplashScreenBrandingImageReady) { _windowSplashScreenBrandingImageContent = SGetField<int>(LocalBridgeClazz, "windowSplashScreenBrandingImage"); _windowSplashScreenBrandingImageReady = true; } return _windowSplashScreenBrandingImageContent; } }
            private static int _windowSplashScreenBrandingImageContent = default;
            private static bool _windowSplashScreenBrandingImageReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowSplashscreenContent"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int windowSplashscreenContent { get { if (!_windowSplashscreenContentReady) { _windowSplashscreenContentContent = SGetField<int>(LocalBridgeClazz, "windowSplashscreenContent"); _windowSplashscreenContentReady = true; } return _windowSplashscreenContentContent; } }
            private static int _windowSplashscreenContentContent = default;
            private static bool _windowSplashscreenContentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowSplashScreenIconBackgroundColor"/>
            /// </summary>
            public static int windowSplashScreenIconBackgroundColor { get { if (!_windowSplashScreenIconBackgroundColorReady) { _windowSplashScreenIconBackgroundColorContent = SGetField<int>(LocalBridgeClazz, "windowSplashScreenIconBackgroundColor"); _windowSplashScreenIconBackgroundColorReady = true; } return _windowSplashScreenIconBackgroundColorContent; } }
            private static int _windowSplashScreenIconBackgroundColorContent = default;
            private static bool _windowSplashScreenIconBackgroundColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowSwipeToDismiss"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int windowSwipeToDismiss { get { if (!_windowSwipeToDismissReady) { _windowSwipeToDismissContent = SGetField<int>(LocalBridgeClazz, "windowSwipeToDismiss"); _windowSwipeToDismissReady = true; } return _windowSwipeToDismissContent; } }
            private static int _windowSwipeToDismissContent = default;
            private static bool _windowSwipeToDismissReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowTitleBackgroundStyle"/>
            /// </summary>
            public static int windowTitleBackgroundStyle { get { if (!_windowTitleBackgroundStyleReady) { _windowTitleBackgroundStyleContent = SGetField<int>(LocalBridgeClazz, "windowTitleBackgroundStyle"); _windowTitleBackgroundStyleReady = true; } return _windowTitleBackgroundStyleContent; } }
            private static int _windowTitleBackgroundStyleContent = default;
            private static bool _windowTitleBackgroundStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowTitleSize"/>
            /// </summary>
            public static int windowTitleSize { get { if (!_windowTitleSizeReady) { _windowTitleSizeContent = SGetField<int>(LocalBridgeClazz, "windowTitleSize"); _windowTitleSizeReady = true; } return _windowTitleSizeContent; } }
            private static int _windowTitleSizeContent = default;
            private static bool _windowTitleSizeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowTitleStyle"/>
            /// </summary>
            public static int windowTitleStyle { get { if (!_windowTitleStyleReady) { _windowTitleStyleContent = SGetField<int>(LocalBridgeClazz, "windowTitleStyle"); _windowTitleStyleReady = true; } return _windowTitleStyleContent; } }
            private static int _windowTitleStyleContent = default;
            private static bool _windowTitleStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowTransitionBackgroundFadeDuration"/>
            /// </summary>
            public static int windowTransitionBackgroundFadeDuration { get { if (!_windowTransitionBackgroundFadeDurationReady) { _windowTransitionBackgroundFadeDurationContent = SGetField<int>(LocalBridgeClazz, "windowTransitionBackgroundFadeDuration"); _windowTransitionBackgroundFadeDurationReady = true; } return _windowTransitionBackgroundFadeDurationContent; } }
            private static int _windowTransitionBackgroundFadeDurationContent = default;
            private static bool _windowTransitionBackgroundFadeDurationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowTranslucentNavigation"/>
            /// </summary>
            public static int windowTranslucentNavigation { get { if (!_windowTranslucentNavigationReady) { _windowTranslucentNavigationContent = SGetField<int>(LocalBridgeClazz, "windowTranslucentNavigation"); _windowTranslucentNavigationReady = true; } return _windowTranslucentNavigationContent; } }
            private static int _windowTranslucentNavigationContent = default;
            private static bool _windowTranslucentNavigationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#windowTranslucentStatus"/>
            /// </summary>
            public static int windowTranslucentStatus { get { if (!_windowTranslucentStatusReady) { _windowTranslucentStatusContent = SGetField<int>(LocalBridgeClazz, "windowTranslucentStatus"); _windowTranslucentStatusReady = true; } return _windowTranslucentStatusContent; } }
            private static int _windowTranslucentStatusContent = default;
            private static bool _windowTranslucentStatusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#writePermission"/>
            /// </summary>
            public static int writePermission { get { if (!_writePermissionReady) { _writePermissionContent = SGetField<int>(LocalBridgeClazz, "writePermission"); _writePermissionReady = true; } return _writePermissionContent; } }
            private static int _writePermissionContent = default;
            private static bool _writePermissionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#x"/>
            /// </summary>
            public static int x { get { if (!_xReady) { _xContent = SGetField<int>(LocalBridgeClazz, "x"); _xReady = true; } return _xContent; } }
            private static int _xContent = default;
            private static bool _xReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#xlargeScreens"/>
            /// </summary>
            public static int xlargeScreens { get { if (!_xlargeScreensReady) { _xlargeScreensContent = SGetField<int>(LocalBridgeClazz, "xlargeScreens"); _xlargeScreensReady = true; } return _xlargeScreensContent; } }
            private static int _xlargeScreensContent = default;
            private static bool _xlargeScreensReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#y"/>
            /// </summary>
            public static int y { get { if (!_yReady) { _yContent = SGetField<int>(LocalBridgeClazz, "y"); _yReady = true; } return _yContent; } }
            private static int _yContent = default;
            private static bool _yReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#yearListItemTextAppearance"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int yearListItemTextAppearance { get { if (!_yearListItemTextAppearanceReady) { _yearListItemTextAppearanceContent = SGetField<int>(LocalBridgeClazz, "yearListItemTextAppearance"); _yearListItemTextAppearanceReady = true; } return _yearListItemTextAppearanceContent; } }
            private static int _yearListItemTextAppearanceContent = default;
            private static bool _yearListItemTextAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#yearListSelectorColor"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int yearListSelectorColor { get { if (!_yearListSelectorColorReady) { _yearListSelectorColorContent = SGetField<int>(LocalBridgeClazz, "yearListSelectorColor"); _yearListSelectorColorReady = true; } return _yearListSelectorColorContent; } }
            private static int _yearListSelectorColorContent = default;
            private static bool _yearListSelectorColorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#yesNoPreferenceStyle"/>
            /// </summary>
            public static int yesNoPreferenceStyle { get { if (!_yesNoPreferenceStyleReady) { _yesNoPreferenceStyleContent = SGetField<int>(LocalBridgeClazz, "yesNoPreferenceStyle"); _yesNoPreferenceStyleReady = true; } return _yesNoPreferenceStyleContent; } }
            private static int _yesNoPreferenceStyleContent = default;
            private static bool _yesNoPreferenceStyleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#zAdjustment"/>
            /// </summary>
            public static int zAdjustment { get { if (!_zAdjustmentReady) { _zAdjustmentContent = SGetField<int>(LocalBridgeClazz, "zAdjustment"); _zAdjustmentReady = true; } return _zAdjustmentContent; } }
            private static int _zAdjustmentContent = default;
            private static bool _zAdjustmentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.attr.html#zygotePreloadName"/>
            /// </summary>
            public static int zygotePreloadName { get { if (!_zygotePreloadNameReady) { _zygotePreloadNameContent = SGetField<int>(LocalBridgeClazz, "zygotePreloadName"); _zygotePreloadNameReady = true; } return _zygotePreloadNameContent; } }
            private static int _zygotePreloadNameContent = default;
            private static bool _zygotePreloadNameReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region boolClass
        public partial class boolClass
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region color
        public partial class color
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#background_dark"/>
            /// </summary>
            public static int background_dark { get { if (!_background_darkReady) { _background_darkContent = SGetField<int>(LocalBridgeClazz, "background_dark"); _background_darkReady = true; } return _background_darkContent; } }
            private static int _background_darkContent = default;
            private static bool _background_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#background_light"/>
            /// </summary>
            public static int background_light { get { if (!_background_lightReady) { _background_lightContent = SGetField<int>(LocalBridgeClazz, "background_light"); _background_lightReady = true; } return _background_lightContent; } }
            private static int _background_lightContent = default;
            private static bool _background_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#black"/>
            /// </summary>
            public static int black { get { if (!_blackReady) { _blackContent = SGetField<int>(LocalBridgeClazz, "black"); _blackReady = true; } return _blackContent; } }
            private static int _blackContent = default;
            private static bool _blackReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#darker_gray"/>
            /// </summary>
            public static int darker_gray { get { if (!_darker_grayReady) { _darker_grayContent = SGetField<int>(LocalBridgeClazz, "darker_gray"); _darker_grayReady = true; } return _darker_grayContent; } }
            private static int _darker_grayContent = default;
            private static bool _darker_grayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#holo_blue_bright"/>
            /// </summary>
            public static int holo_blue_bright { get { if (!_holo_blue_brightReady) { _holo_blue_brightContent = SGetField<int>(LocalBridgeClazz, "holo_blue_bright"); _holo_blue_brightReady = true; } return _holo_blue_brightContent; } }
            private static int _holo_blue_brightContent = default;
            private static bool _holo_blue_brightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#holo_blue_dark"/>
            /// </summary>
            public static int holo_blue_dark { get { if (!_holo_blue_darkReady) { _holo_blue_darkContent = SGetField<int>(LocalBridgeClazz, "holo_blue_dark"); _holo_blue_darkReady = true; } return _holo_blue_darkContent; } }
            private static int _holo_blue_darkContent = default;
            private static bool _holo_blue_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#holo_blue_light"/>
            /// </summary>
            public static int holo_blue_light { get { if (!_holo_blue_lightReady) { _holo_blue_lightContent = SGetField<int>(LocalBridgeClazz, "holo_blue_light"); _holo_blue_lightReady = true; } return _holo_blue_lightContent; } }
            private static int _holo_blue_lightContent = default;
            private static bool _holo_blue_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#holo_green_dark"/>
            /// </summary>
            public static int holo_green_dark { get { if (!_holo_green_darkReady) { _holo_green_darkContent = SGetField<int>(LocalBridgeClazz, "holo_green_dark"); _holo_green_darkReady = true; } return _holo_green_darkContent; } }
            private static int _holo_green_darkContent = default;
            private static bool _holo_green_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#holo_green_light"/>
            /// </summary>
            public static int holo_green_light { get { if (!_holo_green_lightReady) { _holo_green_lightContent = SGetField<int>(LocalBridgeClazz, "holo_green_light"); _holo_green_lightReady = true; } return _holo_green_lightContent; } }
            private static int _holo_green_lightContent = default;
            private static bool _holo_green_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#holo_orange_dark"/>
            /// </summary>
            public static int holo_orange_dark { get { if (!_holo_orange_darkReady) { _holo_orange_darkContent = SGetField<int>(LocalBridgeClazz, "holo_orange_dark"); _holo_orange_darkReady = true; } return _holo_orange_darkContent; } }
            private static int _holo_orange_darkContent = default;
            private static bool _holo_orange_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#holo_orange_light"/>
            /// </summary>
            public static int holo_orange_light { get { if (!_holo_orange_lightReady) { _holo_orange_lightContent = SGetField<int>(LocalBridgeClazz, "holo_orange_light"); _holo_orange_lightReady = true; } return _holo_orange_lightContent; } }
            private static int _holo_orange_lightContent = default;
            private static bool _holo_orange_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#holo_purple"/>
            /// </summary>
            public static int holo_purple { get { if (!_holo_purpleReady) { _holo_purpleContent = SGetField<int>(LocalBridgeClazz, "holo_purple"); _holo_purpleReady = true; } return _holo_purpleContent; } }
            private static int _holo_purpleContent = default;
            private static bool _holo_purpleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#holo_red_dark"/>
            /// </summary>
            public static int holo_red_dark { get { if (!_holo_red_darkReady) { _holo_red_darkContent = SGetField<int>(LocalBridgeClazz, "holo_red_dark"); _holo_red_darkReady = true; } return _holo_red_darkContent; } }
            private static int _holo_red_darkContent = default;
            private static bool _holo_red_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#holo_red_light"/>
            /// </summary>
            public static int holo_red_light { get { if (!_holo_red_lightReady) { _holo_red_lightContent = SGetField<int>(LocalBridgeClazz, "holo_red_light"); _holo_red_lightReady = true; } return _holo_red_lightContent; } }
            private static int _holo_red_lightContent = default;
            private static bool _holo_red_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#primary_text_dark"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int primary_text_dark { get { if (!_primary_text_darkReady) { _primary_text_darkContent = SGetField<int>(LocalBridgeClazz, "primary_text_dark"); _primary_text_darkReady = true; } return _primary_text_darkContent; } }
            private static int _primary_text_darkContent = default;
            private static bool _primary_text_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#primary_text_dark_nodisable"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int primary_text_dark_nodisable { get { if (!_primary_text_dark_nodisableReady) { _primary_text_dark_nodisableContent = SGetField<int>(LocalBridgeClazz, "primary_text_dark_nodisable"); _primary_text_dark_nodisableReady = true; } return _primary_text_dark_nodisableContent; } }
            private static int _primary_text_dark_nodisableContent = default;
            private static bool _primary_text_dark_nodisableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#primary_text_light"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int primary_text_light { get { if (!_primary_text_lightReady) { _primary_text_lightContent = SGetField<int>(LocalBridgeClazz, "primary_text_light"); _primary_text_lightReady = true; } return _primary_text_lightContent; } }
            private static int _primary_text_lightContent = default;
            private static bool _primary_text_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#primary_text_light_nodisable"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int primary_text_light_nodisable { get { if (!_primary_text_light_nodisableReady) { _primary_text_light_nodisableContent = SGetField<int>(LocalBridgeClazz, "primary_text_light_nodisable"); _primary_text_light_nodisableReady = true; } return _primary_text_light_nodisableContent; } }
            private static int _primary_text_light_nodisableContent = default;
            private static bool _primary_text_light_nodisableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#secondary_text_dark"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int secondary_text_dark { get { if (!_secondary_text_darkReady) { _secondary_text_darkContent = SGetField<int>(LocalBridgeClazz, "secondary_text_dark"); _secondary_text_darkReady = true; } return _secondary_text_darkContent; } }
            private static int _secondary_text_darkContent = default;
            private static bool _secondary_text_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#secondary_text_dark_nodisable"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int secondary_text_dark_nodisable { get { if (!_secondary_text_dark_nodisableReady) { _secondary_text_dark_nodisableContent = SGetField<int>(LocalBridgeClazz, "secondary_text_dark_nodisable"); _secondary_text_dark_nodisableReady = true; } return _secondary_text_dark_nodisableContent; } }
            private static int _secondary_text_dark_nodisableContent = default;
            private static bool _secondary_text_dark_nodisableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#secondary_text_light"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int secondary_text_light { get { if (!_secondary_text_lightReady) { _secondary_text_lightContent = SGetField<int>(LocalBridgeClazz, "secondary_text_light"); _secondary_text_lightReady = true; } return _secondary_text_lightContent; } }
            private static int _secondary_text_lightContent = default;
            private static bool _secondary_text_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#secondary_text_light_nodisable"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int secondary_text_light_nodisable { get { if (!_secondary_text_light_nodisableReady) { _secondary_text_light_nodisableContent = SGetField<int>(LocalBridgeClazz, "secondary_text_light_nodisable"); _secondary_text_light_nodisableReady = true; } return _secondary_text_light_nodisableContent; } }
            private static int _secondary_text_light_nodisableContent = default;
            private static bool _secondary_text_light_nodisableReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent1_0"/>
            /// </summary>
            public static int system_accent1_0 { get { if (!_system_accent1_0Ready) { _system_accent1_0Content = SGetField<int>(LocalBridgeClazz, "system_accent1_0"); _system_accent1_0Ready = true; } return _system_accent1_0Content; } }
            private static int _system_accent1_0Content = default;
            private static bool _system_accent1_0Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent1_10"/>
            /// </summary>
            public static int system_accent1_10 { get { if (!_system_accent1_10Ready) { _system_accent1_10Content = SGetField<int>(LocalBridgeClazz, "system_accent1_10"); _system_accent1_10Ready = true; } return _system_accent1_10Content; } }
            private static int _system_accent1_10Content = default;
            private static bool _system_accent1_10Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent1_100"/>
            /// </summary>
            public static int system_accent1_100 { get { if (!_system_accent1_100Ready) { _system_accent1_100Content = SGetField<int>(LocalBridgeClazz, "system_accent1_100"); _system_accent1_100Ready = true; } return _system_accent1_100Content; } }
            private static int _system_accent1_100Content = default;
            private static bool _system_accent1_100Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent1_1000"/>
            /// </summary>
            public static int system_accent1_1000 { get { if (!_system_accent1_1000Ready) { _system_accent1_1000Content = SGetField<int>(LocalBridgeClazz, "system_accent1_1000"); _system_accent1_1000Ready = true; } return _system_accent1_1000Content; } }
            private static int _system_accent1_1000Content = default;
            private static bool _system_accent1_1000Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent1_200"/>
            /// </summary>
            public static int system_accent1_200 { get { if (!_system_accent1_200Ready) { _system_accent1_200Content = SGetField<int>(LocalBridgeClazz, "system_accent1_200"); _system_accent1_200Ready = true; } return _system_accent1_200Content; } }
            private static int _system_accent1_200Content = default;
            private static bool _system_accent1_200Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent1_300"/>
            /// </summary>
            public static int system_accent1_300 { get { if (!_system_accent1_300Ready) { _system_accent1_300Content = SGetField<int>(LocalBridgeClazz, "system_accent1_300"); _system_accent1_300Ready = true; } return _system_accent1_300Content; } }
            private static int _system_accent1_300Content = default;
            private static bool _system_accent1_300Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent1_400"/>
            /// </summary>
            public static int system_accent1_400 { get { if (!_system_accent1_400Ready) { _system_accent1_400Content = SGetField<int>(LocalBridgeClazz, "system_accent1_400"); _system_accent1_400Ready = true; } return _system_accent1_400Content; } }
            private static int _system_accent1_400Content = default;
            private static bool _system_accent1_400Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent1_50"/>
            /// </summary>
            public static int system_accent1_50 { get { if (!_system_accent1_50Ready) { _system_accent1_50Content = SGetField<int>(LocalBridgeClazz, "system_accent1_50"); _system_accent1_50Ready = true; } return _system_accent1_50Content; } }
            private static int _system_accent1_50Content = default;
            private static bool _system_accent1_50Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent1_500"/>
            /// </summary>
            public static int system_accent1_500 { get { if (!_system_accent1_500Ready) { _system_accent1_500Content = SGetField<int>(LocalBridgeClazz, "system_accent1_500"); _system_accent1_500Ready = true; } return _system_accent1_500Content; } }
            private static int _system_accent1_500Content = default;
            private static bool _system_accent1_500Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent1_600"/>
            /// </summary>
            public static int system_accent1_600 { get { if (!_system_accent1_600Ready) { _system_accent1_600Content = SGetField<int>(LocalBridgeClazz, "system_accent1_600"); _system_accent1_600Ready = true; } return _system_accent1_600Content; } }
            private static int _system_accent1_600Content = default;
            private static bool _system_accent1_600Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent1_700"/>
            /// </summary>
            public static int system_accent1_700 { get { if (!_system_accent1_700Ready) { _system_accent1_700Content = SGetField<int>(LocalBridgeClazz, "system_accent1_700"); _system_accent1_700Ready = true; } return _system_accent1_700Content; } }
            private static int _system_accent1_700Content = default;
            private static bool _system_accent1_700Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent1_800"/>
            /// </summary>
            public static int system_accent1_800 { get { if (!_system_accent1_800Ready) { _system_accent1_800Content = SGetField<int>(LocalBridgeClazz, "system_accent1_800"); _system_accent1_800Ready = true; } return _system_accent1_800Content; } }
            private static int _system_accent1_800Content = default;
            private static bool _system_accent1_800Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent1_900"/>
            /// </summary>
            public static int system_accent1_900 { get { if (!_system_accent1_900Ready) { _system_accent1_900Content = SGetField<int>(LocalBridgeClazz, "system_accent1_900"); _system_accent1_900Ready = true; } return _system_accent1_900Content; } }
            private static int _system_accent1_900Content = default;
            private static bool _system_accent1_900Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent2_0"/>
            /// </summary>
            public static int system_accent2_0 { get { if (!_system_accent2_0Ready) { _system_accent2_0Content = SGetField<int>(LocalBridgeClazz, "system_accent2_0"); _system_accent2_0Ready = true; } return _system_accent2_0Content; } }
            private static int _system_accent2_0Content = default;
            private static bool _system_accent2_0Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent2_10"/>
            /// </summary>
            public static int system_accent2_10 { get { if (!_system_accent2_10Ready) { _system_accent2_10Content = SGetField<int>(LocalBridgeClazz, "system_accent2_10"); _system_accent2_10Ready = true; } return _system_accent2_10Content; } }
            private static int _system_accent2_10Content = default;
            private static bool _system_accent2_10Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent2_100"/>
            /// </summary>
            public static int system_accent2_100 { get { if (!_system_accent2_100Ready) { _system_accent2_100Content = SGetField<int>(LocalBridgeClazz, "system_accent2_100"); _system_accent2_100Ready = true; } return _system_accent2_100Content; } }
            private static int _system_accent2_100Content = default;
            private static bool _system_accent2_100Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent2_1000"/>
            /// </summary>
            public static int system_accent2_1000 { get { if (!_system_accent2_1000Ready) { _system_accent2_1000Content = SGetField<int>(LocalBridgeClazz, "system_accent2_1000"); _system_accent2_1000Ready = true; } return _system_accent2_1000Content; } }
            private static int _system_accent2_1000Content = default;
            private static bool _system_accent2_1000Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent2_200"/>
            /// </summary>
            public static int system_accent2_200 { get { if (!_system_accent2_200Ready) { _system_accent2_200Content = SGetField<int>(LocalBridgeClazz, "system_accent2_200"); _system_accent2_200Ready = true; } return _system_accent2_200Content; } }
            private static int _system_accent2_200Content = default;
            private static bool _system_accent2_200Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent2_300"/>
            /// </summary>
            public static int system_accent2_300 { get { if (!_system_accent2_300Ready) { _system_accent2_300Content = SGetField<int>(LocalBridgeClazz, "system_accent2_300"); _system_accent2_300Ready = true; } return _system_accent2_300Content; } }
            private static int _system_accent2_300Content = default;
            private static bool _system_accent2_300Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent2_400"/>
            /// </summary>
            public static int system_accent2_400 { get { if (!_system_accent2_400Ready) { _system_accent2_400Content = SGetField<int>(LocalBridgeClazz, "system_accent2_400"); _system_accent2_400Ready = true; } return _system_accent2_400Content; } }
            private static int _system_accent2_400Content = default;
            private static bool _system_accent2_400Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent2_50"/>
            /// </summary>
            public static int system_accent2_50 { get { if (!_system_accent2_50Ready) { _system_accent2_50Content = SGetField<int>(LocalBridgeClazz, "system_accent2_50"); _system_accent2_50Ready = true; } return _system_accent2_50Content; } }
            private static int _system_accent2_50Content = default;
            private static bool _system_accent2_50Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent2_500"/>
            /// </summary>
            public static int system_accent2_500 { get { if (!_system_accent2_500Ready) { _system_accent2_500Content = SGetField<int>(LocalBridgeClazz, "system_accent2_500"); _system_accent2_500Ready = true; } return _system_accent2_500Content; } }
            private static int _system_accent2_500Content = default;
            private static bool _system_accent2_500Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent2_600"/>
            /// </summary>
            public static int system_accent2_600 { get { if (!_system_accent2_600Ready) { _system_accent2_600Content = SGetField<int>(LocalBridgeClazz, "system_accent2_600"); _system_accent2_600Ready = true; } return _system_accent2_600Content; } }
            private static int _system_accent2_600Content = default;
            private static bool _system_accent2_600Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent2_700"/>
            /// </summary>
            public static int system_accent2_700 { get { if (!_system_accent2_700Ready) { _system_accent2_700Content = SGetField<int>(LocalBridgeClazz, "system_accent2_700"); _system_accent2_700Ready = true; } return _system_accent2_700Content; } }
            private static int _system_accent2_700Content = default;
            private static bool _system_accent2_700Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent2_800"/>
            /// </summary>
            public static int system_accent2_800 { get { if (!_system_accent2_800Ready) { _system_accent2_800Content = SGetField<int>(LocalBridgeClazz, "system_accent2_800"); _system_accent2_800Ready = true; } return _system_accent2_800Content; } }
            private static int _system_accent2_800Content = default;
            private static bool _system_accent2_800Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent2_900"/>
            /// </summary>
            public static int system_accent2_900 { get { if (!_system_accent2_900Ready) { _system_accent2_900Content = SGetField<int>(LocalBridgeClazz, "system_accent2_900"); _system_accent2_900Ready = true; } return _system_accent2_900Content; } }
            private static int _system_accent2_900Content = default;
            private static bool _system_accent2_900Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent3_0"/>
            /// </summary>
            public static int system_accent3_0 { get { if (!_system_accent3_0Ready) { _system_accent3_0Content = SGetField<int>(LocalBridgeClazz, "system_accent3_0"); _system_accent3_0Ready = true; } return _system_accent3_0Content; } }
            private static int _system_accent3_0Content = default;
            private static bool _system_accent3_0Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent3_10"/>
            /// </summary>
            public static int system_accent3_10 { get { if (!_system_accent3_10Ready) { _system_accent3_10Content = SGetField<int>(LocalBridgeClazz, "system_accent3_10"); _system_accent3_10Ready = true; } return _system_accent3_10Content; } }
            private static int _system_accent3_10Content = default;
            private static bool _system_accent3_10Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent3_100"/>
            /// </summary>
            public static int system_accent3_100 { get { if (!_system_accent3_100Ready) { _system_accent3_100Content = SGetField<int>(LocalBridgeClazz, "system_accent3_100"); _system_accent3_100Ready = true; } return _system_accent3_100Content; } }
            private static int _system_accent3_100Content = default;
            private static bool _system_accent3_100Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent3_1000"/>
            /// </summary>
            public static int system_accent3_1000 { get { if (!_system_accent3_1000Ready) { _system_accent3_1000Content = SGetField<int>(LocalBridgeClazz, "system_accent3_1000"); _system_accent3_1000Ready = true; } return _system_accent3_1000Content; } }
            private static int _system_accent3_1000Content = default;
            private static bool _system_accent3_1000Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent3_200"/>
            /// </summary>
            public static int system_accent3_200 { get { if (!_system_accent3_200Ready) { _system_accent3_200Content = SGetField<int>(LocalBridgeClazz, "system_accent3_200"); _system_accent3_200Ready = true; } return _system_accent3_200Content; } }
            private static int _system_accent3_200Content = default;
            private static bool _system_accent3_200Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent3_300"/>
            /// </summary>
            public static int system_accent3_300 { get { if (!_system_accent3_300Ready) { _system_accent3_300Content = SGetField<int>(LocalBridgeClazz, "system_accent3_300"); _system_accent3_300Ready = true; } return _system_accent3_300Content; } }
            private static int _system_accent3_300Content = default;
            private static bool _system_accent3_300Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent3_400"/>
            /// </summary>
            public static int system_accent3_400 { get { if (!_system_accent3_400Ready) { _system_accent3_400Content = SGetField<int>(LocalBridgeClazz, "system_accent3_400"); _system_accent3_400Ready = true; } return _system_accent3_400Content; } }
            private static int _system_accent3_400Content = default;
            private static bool _system_accent3_400Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent3_50"/>
            /// </summary>
            public static int system_accent3_50 { get { if (!_system_accent3_50Ready) { _system_accent3_50Content = SGetField<int>(LocalBridgeClazz, "system_accent3_50"); _system_accent3_50Ready = true; } return _system_accent3_50Content; } }
            private static int _system_accent3_50Content = default;
            private static bool _system_accent3_50Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent3_500"/>
            /// </summary>
            public static int system_accent3_500 { get { if (!_system_accent3_500Ready) { _system_accent3_500Content = SGetField<int>(LocalBridgeClazz, "system_accent3_500"); _system_accent3_500Ready = true; } return _system_accent3_500Content; } }
            private static int _system_accent3_500Content = default;
            private static bool _system_accent3_500Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent3_600"/>
            /// </summary>
            public static int system_accent3_600 { get { if (!_system_accent3_600Ready) { _system_accent3_600Content = SGetField<int>(LocalBridgeClazz, "system_accent3_600"); _system_accent3_600Ready = true; } return _system_accent3_600Content; } }
            private static int _system_accent3_600Content = default;
            private static bool _system_accent3_600Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent3_700"/>
            /// </summary>
            public static int system_accent3_700 { get { if (!_system_accent3_700Ready) { _system_accent3_700Content = SGetField<int>(LocalBridgeClazz, "system_accent3_700"); _system_accent3_700Ready = true; } return _system_accent3_700Content; } }
            private static int _system_accent3_700Content = default;
            private static bool _system_accent3_700Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent3_800"/>
            /// </summary>
            public static int system_accent3_800 { get { if (!_system_accent3_800Ready) { _system_accent3_800Content = SGetField<int>(LocalBridgeClazz, "system_accent3_800"); _system_accent3_800Ready = true; } return _system_accent3_800Content; } }
            private static int _system_accent3_800Content = default;
            private static bool _system_accent3_800Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_accent3_900"/>
            /// </summary>
            public static int system_accent3_900 { get { if (!_system_accent3_900Ready) { _system_accent3_900Content = SGetField<int>(LocalBridgeClazz, "system_accent3_900"); _system_accent3_900Ready = true; } return _system_accent3_900Content; } }
            private static int _system_accent3_900Content = default;
            private static bool _system_accent3_900Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_background_dark"/>
            /// </summary>
            public static int system_background_dark { get { if (!_system_background_darkReady) { _system_background_darkContent = SGetField<int>(LocalBridgeClazz, "system_background_dark"); _system_background_darkReady = true; } return _system_background_darkContent; } }
            private static int _system_background_darkContent = default;
            private static bool _system_background_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_background_light"/>
            /// </summary>
            public static int system_background_light { get { if (!_system_background_lightReady) { _system_background_lightContent = SGetField<int>(LocalBridgeClazz, "system_background_light"); _system_background_lightReady = true; } return _system_background_lightContent; } }
            private static int _system_background_lightContent = default;
            private static bool _system_background_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_control_activated_dark"/>
            /// </summary>
            public static int system_control_activated_dark { get { if (!_system_control_activated_darkReady) { _system_control_activated_darkContent = SGetField<int>(LocalBridgeClazz, "system_control_activated_dark"); _system_control_activated_darkReady = true; } return _system_control_activated_darkContent; } }
            private static int _system_control_activated_darkContent = default;
            private static bool _system_control_activated_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_control_activated_light"/>
            /// </summary>
            public static int system_control_activated_light { get { if (!_system_control_activated_lightReady) { _system_control_activated_lightContent = SGetField<int>(LocalBridgeClazz, "system_control_activated_light"); _system_control_activated_lightReady = true; } return _system_control_activated_lightContent; } }
            private static int _system_control_activated_lightContent = default;
            private static bool _system_control_activated_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_control_highlight_dark"/>
            /// </summary>
            public static int system_control_highlight_dark { get { if (!_system_control_highlight_darkReady) { _system_control_highlight_darkContent = SGetField<int>(LocalBridgeClazz, "system_control_highlight_dark"); _system_control_highlight_darkReady = true; } return _system_control_highlight_darkContent; } }
            private static int _system_control_highlight_darkContent = default;
            private static bool _system_control_highlight_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_control_highlight_light"/>
            /// </summary>
            public static int system_control_highlight_light { get { if (!_system_control_highlight_lightReady) { _system_control_highlight_lightContent = SGetField<int>(LocalBridgeClazz, "system_control_highlight_light"); _system_control_highlight_lightReady = true; } return _system_control_highlight_lightContent; } }
            private static int _system_control_highlight_lightContent = default;
            private static bool _system_control_highlight_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_control_normal_dark"/>
            /// </summary>
            public static int system_control_normal_dark { get { if (!_system_control_normal_darkReady) { _system_control_normal_darkContent = SGetField<int>(LocalBridgeClazz, "system_control_normal_dark"); _system_control_normal_darkReady = true; } return _system_control_normal_darkContent; } }
            private static int _system_control_normal_darkContent = default;
            private static bool _system_control_normal_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_control_normal_light"/>
            /// </summary>
            public static int system_control_normal_light { get { if (!_system_control_normal_lightReady) { _system_control_normal_lightContent = SGetField<int>(LocalBridgeClazz, "system_control_normal_light"); _system_control_normal_lightReady = true; } return _system_control_normal_lightContent; } }
            private static int _system_control_normal_lightContent = default;
            private static bool _system_control_normal_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_0"/>
            /// </summary>
            public static int system_error_0 { get { if (!_system_error_0Ready) { _system_error_0Content = SGetField<int>(LocalBridgeClazz, "system_error_0"); _system_error_0Ready = true; } return _system_error_0Content; } }
            private static int _system_error_0Content = default;
            private static bool _system_error_0Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_10"/>
            /// </summary>
            public static int system_error_10 { get { if (!_system_error_10Ready) { _system_error_10Content = SGetField<int>(LocalBridgeClazz, "system_error_10"); _system_error_10Ready = true; } return _system_error_10Content; } }
            private static int _system_error_10Content = default;
            private static bool _system_error_10Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_100"/>
            /// </summary>
            public static int system_error_100 { get { if (!_system_error_100Ready) { _system_error_100Content = SGetField<int>(LocalBridgeClazz, "system_error_100"); _system_error_100Ready = true; } return _system_error_100Content; } }
            private static int _system_error_100Content = default;
            private static bool _system_error_100Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_1000"/>
            /// </summary>
            public static int system_error_1000 { get { if (!_system_error_1000Ready) { _system_error_1000Content = SGetField<int>(LocalBridgeClazz, "system_error_1000"); _system_error_1000Ready = true; } return _system_error_1000Content; } }
            private static int _system_error_1000Content = default;
            private static bool _system_error_1000Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_200"/>
            /// </summary>
            public static int system_error_200 { get { if (!_system_error_200Ready) { _system_error_200Content = SGetField<int>(LocalBridgeClazz, "system_error_200"); _system_error_200Ready = true; } return _system_error_200Content; } }
            private static int _system_error_200Content = default;
            private static bool _system_error_200Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_300"/>
            /// </summary>
            public static int system_error_300 { get { if (!_system_error_300Ready) { _system_error_300Content = SGetField<int>(LocalBridgeClazz, "system_error_300"); _system_error_300Ready = true; } return _system_error_300Content; } }
            private static int _system_error_300Content = default;
            private static bool _system_error_300Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_400"/>
            /// </summary>
            public static int system_error_400 { get { if (!_system_error_400Ready) { _system_error_400Content = SGetField<int>(LocalBridgeClazz, "system_error_400"); _system_error_400Ready = true; } return _system_error_400Content; } }
            private static int _system_error_400Content = default;
            private static bool _system_error_400Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_50"/>
            /// </summary>
            public static int system_error_50 { get { if (!_system_error_50Ready) { _system_error_50Content = SGetField<int>(LocalBridgeClazz, "system_error_50"); _system_error_50Ready = true; } return _system_error_50Content; } }
            private static int _system_error_50Content = default;
            private static bool _system_error_50Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_500"/>
            /// </summary>
            public static int system_error_500 { get { if (!_system_error_500Ready) { _system_error_500Content = SGetField<int>(LocalBridgeClazz, "system_error_500"); _system_error_500Ready = true; } return _system_error_500Content; } }
            private static int _system_error_500Content = default;
            private static bool _system_error_500Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_600"/>
            /// </summary>
            public static int system_error_600 { get { if (!_system_error_600Ready) { _system_error_600Content = SGetField<int>(LocalBridgeClazz, "system_error_600"); _system_error_600Ready = true; } return _system_error_600Content; } }
            private static int _system_error_600Content = default;
            private static bool _system_error_600Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_700"/>
            /// </summary>
            public static int system_error_700 { get { if (!_system_error_700Ready) { _system_error_700Content = SGetField<int>(LocalBridgeClazz, "system_error_700"); _system_error_700Ready = true; } return _system_error_700Content; } }
            private static int _system_error_700Content = default;
            private static bool _system_error_700Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_800"/>
            /// </summary>
            public static int system_error_800 { get { if (!_system_error_800Ready) { _system_error_800Content = SGetField<int>(LocalBridgeClazz, "system_error_800"); _system_error_800Ready = true; } return _system_error_800Content; } }
            private static int _system_error_800Content = default;
            private static bool _system_error_800Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_900"/>
            /// </summary>
            public static int system_error_900 { get { if (!_system_error_900Ready) { _system_error_900Content = SGetField<int>(LocalBridgeClazz, "system_error_900"); _system_error_900Ready = true; } return _system_error_900Content; } }
            private static int _system_error_900Content = default;
            private static bool _system_error_900Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_container_dark"/>
            /// </summary>
            public static int system_error_container_dark { get { if (!_system_error_container_darkReady) { _system_error_container_darkContent = SGetField<int>(LocalBridgeClazz, "system_error_container_dark"); _system_error_container_darkReady = true; } return _system_error_container_darkContent; } }
            private static int _system_error_container_darkContent = default;
            private static bool _system_error_container_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_container_light"/>
            /// </summary>
            public static int system_error_container_light { get { if (!_system_error_container_lightReady) { _system_error_container_lightContent = SGetField<int>(LocalBridgeClazz, "system_error_container_light"); _system_error_container_lightReady = true; } return _system_error_container_lightContent; } }
            private static int _system_error_container_lightContent = default;
            private static bool _system_error_container_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_dark"/>
            /// </summary>
            public static int system_error_dark { get { if (!_system_error_darkReady) { _system_error_darkContent = SGetField<int>(LocalBridgeClazz, "system_error_dark"); _system_error_darkReady = true; } return _system_error_darkContent; } }
            private static int _system_error_darkContent = default;
            private static bool _system_error_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_error_light"/>
            /// </summary>
            public static int system_error_light { get { if (!_system_error_lightReady) { _system_error_lightContent = SGetField<int>(LocalBridgeClazz, "system_error_light"); _system_error_lightReady = true; } return _system_error_lightContent; } }
            private static int _system_error_lightContent = default;
            private static bool _system_error_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral1_0"/>
            /// </summary>
            public static int system_neutral1_0 { get { if (!_system_neutral1_0Ready) { _system_neutral1_0Content = SGetField<int>(LocalBridgeClazz, "system_neutral1_0"); _system_neutral1_0Ready = true; } return _system_neutral1_0Content; } }
            private static int _system_neutral1_0Content = default;
            private static bool _system_neutral1_0Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral1_10"/>
            /// </summary>
            public static int system_neutral1_10 { get { if (!_system_neutral1_10Ready) { _system_neutral1_10Content = SGetField<int>(LocalBridgeClazz, "system_neutral1_10"); _system_neutral1_10Ready = true; } return _system_neutral1_10Content; } }
            private static int _system_neutral1_10Content = default;
            private static bool _system_neutral1_10Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral1_100"/>
            /// </summary>
            public static int system_neutral1_100 { get { if (!_system_neutral1_100Ready) { _system_neutral1_100Content = SGetField<int>(LocalBridgeClazz, "system_neutral1_100"); _system_neutral1_100Ready = true; } return _system_neutral1_100Content; } }
            private static int _system_neutral1_100Content = default;
            private static bool _system_neutral1_100Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral1_1000"/>
            /// </summary>
            public static int system_neutral1_1000 { get { if (!_system_neutral1_1000Ready) { _system_neutral1_1000Content = SGetField<int>(LocalBridgeClazz, "system_neutral1_1000"); _system_neutral1_1000Ready = true; } return _system_neutral1_1000Content; } }
            private static int _system_neutral1_1000Content = default;
            private static bool _system_neutral1_1000Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral1_200"/>
            /// </summary>
            public static int system_neutral1_200 { get { if (!_system_neutral1_200Ready) { _system_neutral1_200Content = SGetField<int>(LocalBridgeClazz, "system_neutral1_200"); _system_neutral1_200Ready = true; } return _system_neutral1_200Content; } }
            private static int _system_neutral1_200Content = default;
            private static bool _system_neutral1_200Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral1_300"/>
            /// </summary>
            public static int system_neutral1_300 { get { if (!_system_neutral1_300Ready) { _system_neutral1_300Content = SGetField<int>(LocalBridgeClazz, "system_neutral1_300"); _system_neutral1_300Ready = true; } return _system_neutral1_300Content; } }
            private static int _system_neutral1_300Content = default;
            private static bool _system_neutral1_300Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral1_400"/>
            /// </summary>
            public static int system_neutral1_400 { get { if (!_system_neutral1_400Ready) { _system_neutral1_400Content = SGetField<int>(LocalBridgeClazz, "system_neutral1_400"); _system_neutral1_400Ready = true; } return _system_neutral1_400Content; } }
            private static int _system_neutral1_400Content = default;
            private static bool _system_neutral1_400Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral1_50"/>
            /// </summary>
            public static int system_neutral1_50 { get { if (!_system_neutral1_50Ready) { _system_neutral1_50Content = SGetField<int>(LocalBridgeClazz, "system_neutral1_50"); _system_neutral1_50Ready = true; } return _system_neutral1_50Content; } }
            private static int _system_neutral1_50Content = default;
            private static bool _system_neutral1_50Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral1_500"/>
            /// </summary>
            public static int system_neutral1_500 { get { if (!_system_neutral1_500Ready) { _system_neutral1_500Content = SGetField<int>(LocalBridgeClazz, "system_neutral1_500"); _system_neutral1_500Ready = true; } return _system_neutral1_500Content; } }
            private static int _system_neutral1_500Content = default;
            private static bool _system_neutral1_500Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral1_600"/>
            /// </summary>
            public static int system_neutral1_600 { get { if (!_system_neutral1_600Ready) { _system_neutral1_600Content = SGetField<int>(LocalBridgeClazz, "system_neutral1_600"); _system_neutral1_600Ready = true; } return _system_neutral1_600Content; } }
            private static int _system_neutral1_600Content = default;
            private static bool _system_neutral1_600Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral1_700"/>
            /// </summary>
            public static int system_neutral1_700 { get { if (!_system_neutral1_700Ready) { _system_neutral1_700Content = SGetField<int>(LocalBridgeClazz, "system_neutral1_700"); _system_neutral1_700Ready = true; } return _system_neutral1_700Content; } }
            private static int _system_neutral1_700Content = default;
            private static bool _system_neutral1_700Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral1_800"/>
            /// </summary>
            public static int system_neutral1_800 { get { if (!_system_neutral1_800Ready) { _system_neutral1_800Content = SGetField<int>(LocalBridgeClazz, "system_neutral1_800"); _system_neutral1_800Ready = true; } return _system_neutral1_800Content; } }
            private static int _system_neutral1_800Content = default;
            private static bool _system_neutral1_800Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral1_900"/>
            /// </summary>
            public static int system_neutral1_900 { get { if (!_system_neutral1_900Ready) { _system_neutral1_900Content = SGetField<int>(LocalBridgeClazz, "system_neutral1_900"); _system_neutral1_900Ready = true; } return _system_neutral1_900Content; } }
            private static int _system_neutral1_900Content = default;
            private static bool _system_neutral1_900Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral2_0"/>
            /// </summary>
            public static int system_neutral2_0 { get { if (!_system_neutral2_0Ready) { _system_neutral2_0Content = SGetField<int>(LocalBridgeClazz, "system_neutral2_0"); _system_neutral2_0Ready = true; } return _system_neutral2_0Content; } }
            private static int _system_neutral2_0Content = default;
            private static bool _system_neutral2_0Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral2_10"/>
            /// </summary>
            public static int system_neutral2_10 { get { if (!_system_neutral2_10Ready) { _system_neutral2_10Content = SGetField<int>(LocalBridgeClazz, "system_neutral2_10"); _system_neutral2_10Ready = true; } return _system_neutral2_10Content; } }
            private static int _system_neutral2_10Content = default;
            private static bool _system_neutral2_10Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral2_100"/>
            /// </summary>
            public static int system_neutral2_100 { get { if (!_system_neutral2_100Ready) { _system_neutral2_100Content = SGetField<int>(LocalBridgeClazz, "system_neutral2_100"); _system_neutral2_100Ready = true; } return _system_neutral2_100Content; } }
            private static int _system_neutral2_100Content = default;
            private static bool _system_neutral2_100Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral2_1000"/>
            /// </summary>
            public static int system_neutral2_1000 { get { if (!_system_neutral2_1000Ready) { _system_neutral2_1000Content = SGetField<int>(LocalBridgeClazz, "system_neutral2_1000"); _system_neutral2_1000Ready = true; } return _system_neutral2_1000Content; } }
            private static int _system_neutral2_1000Content = default;
            private static bool _system_neutral2_1000Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral2_200"/>
            /// </summary>
            public static int system_neutral2_200 { get { if (!_system_neutral2_200Ready) { _system_neutral2_200Content = SGetField<int>(LocalBridgeClazz, "system_neutral2_200"); _system_neutral2_200Ready = true; } return _system_neutral2_200Content; } }
            private static int _system_neutral2_200Content = default;
            private static bool _system_neutral2_200Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral2_300"/>
            /// </summary>
            public static int system_neutral2_300 { get { if (!_system_neutral2_300Ready) { _system_neutral2_300Content = SGetField<int>(LocalBridgeClazz, "system_neutral2_300"); _system_neutral2_300Ready = true; } return _system_neutral2_300Content; } }
            private static int _system_neutral2_300Content = default;
            private static bool _system_neutral2_300Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral2_400"/>
            /// </summary>
            public static int system_neutral2_400 { get { if (!_system_neutral2_400Ready) { _system_neutral2_400Content = SGetField<int>(LocalBridgeClazz, "system_neutral2_400"); _system_neutral2_400Ready = true; } return _system_neutral2_400Content; } }
            private static int _system_neutral2_400Content = default;
            private static bool _system_neutral2_400Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral2_50"/>
            /// </summary>
            public static int system_neutral2_50 { get { if (!_system_neutral2_50Ready) { _system_neutral2_50Content = SGetField<int>(LocalBridgeClazz, "system_neutral2_50"); _system_neutral2_50Ready = true; } return _system_neutral2_50Content; } }
            private static int _system_neutral2_50Content = default;
            private static bool _system_neutral2_50Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral2_500"/>
            /// </summary>
            public static int system_neutral2_500 { get { if (!_system_neutral2_500Ready) { _system_neutral2_500Content = SGetField<int>(LocalBridgeClazz, "system_neutral2_500"); _system_neutral2_500Ready = true; } return _system_neutral2_500Content; } }
            private static int _system_neutral2_500Content = default;
            private static bool _system_neutral2_500Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral2_600"/>
            /// </summary>
            public static int system_neutral2_600 { get { if (!_system_neutral2_600Ready) { _system_neutral2_600Content = SGetField<int>(LocalBridgeClazz, "system_neutral2_600"); _system_neutral2_600Ready = true; } return _system_neutral2_600Content; } }
            private static int _system_neutral2_600Content = default;
            private static bool _system_neutral2_600Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral2_700"/>
            /// </summary>
            public static int system_neutral2_700 { get { if (!_system_neutral2_700Ready) { _system_neutral2_700Content = SGetField<int>(LocalBridgeClazz, "system_neutral2_700"); _system_neutral2_700Ready = true; } return _system_neutral2_700Content; } }
            private static int _system_neutral2_700Content = default;
            private static bool _system_neutral2_700Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral2_800"/>
            /// </summary>
            public static int system_neutral2_800 { get { if (!_system_neutral2_800Ready) { _system_neutral2_800Content = SGetField<int>(LocalBridgeClazz, "system_neutral2_800"); _system_neutral2_800Ready = true; } return _system_neutral2_800Content; } }
            private static int _system_neutral2_800Content = default;
            private static bool _system_neutral2_800Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_neutral2_900"/>
            /// </summary>
            public static int system_neutral2_900 { get { if (!_system_neutral2_900Ready) { _system_neutral2_900Content = SGetField<int>(LocalBridgeClazz, "system_neutral2_900"); _system_neutral2_900Ready = true; } return _system_neutral2_900Content; } }
            private static int _system_neutral2_900Content = default;
            private static bool _system_neutral2_900Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_background_dark"/>
            /// </summary>
            public static int system_on_background_dark { get { if (!_system_on_background_darkReady) { _system_on_background_darkContent = SGetField<int>(LocalBridgeClazz, "system_on_background_dark"); _system_on_background_darkReady = true; } return _system_on_background_darkContent; } }
            private static int _system_on_background_darkContent = default;
            private static bool _system_on_background_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_background_light"/>
            /// </summary>
            public static int system_on_background_light { get { if (!_system_on_background_lightReady) { _system_on_background_lightContent = SGetField<int>(LocalBridgeClazz, "system_on_background_light"); _system_on_background_lightReady = true; } return _system_on_background_lightContent; } }
            private static int _system_on_background_lightContent = default;
            private static bool _system_on_background_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_error_container_dark"/>
            /// </summary>
            public static int system_on_error_container_dark { get { if (!_system_on_error_container_darkReady) { _system_on_error_container_darkContent = SGetField<int>(LocalBridgeClazz, "system_on_error_container_dark"); _system_on_error_container_darkReady = true; } return _system_on_error_container_darkContent; } }
            private static int _system_on_error_container_darkContent = default;
            private static bool _system_on_error_container_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_error_container_light"/>
            /// </summary>
            public static int system_on_error_container_light { get { if (!_system_on_error_container_lightReady) { _system_on_error_container_lightContent = SGetField<int>(LocalBridgeClazz, "system_on_error_container_light"); _system_on_error_container_lightReady = true; } return _system_on_error_container_lightContent; } }
            private static int _system_on_error_container_lightContent = default;
            private static bool _system_on_error_container_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_error_dark"/>
            /// </summary>
            public static int system_on_error_dark { get { if (!_system_on_error_darkReady) { _system_on_error_darkContent = SGetField<int>(LocalBridgeClazz, "system_on_error_dark"); _system_on_error_darkReady = true; } return _system_on_error_darkContent; } }
            private static int _system_on_error_darkContent = default;
            private static bool _system_on_error_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_error_light"/>
            /// </summary>
            public static int system_on_error_light { get { if (!_system_on_error_lightReady) { _system_on_error_lightContent = SGetField<int>(LocalBridgeClazz, "system_on_error_light"); _system_on_error_lightReady = true; } return _system_on_error_lightContent; } }
            private static int _system_on_error_lightContent = default;
            private static bool _system_on_error_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_primary_container_dark"/>
            /// </summary>
            public static int system_on_primary_container_dark { get { if (!_system_on_primary_container_darkReady) { _system_on_primary_container_darkContent = SGetField<int>(LocalBridgeClazz, "system_on_primary_container_dark"); _system_on_primary_container_darkReady = true; } return _system_on_primary_container_darkContent; } }
            private static int _system_on_primary_container_darkContent = default;
            private static bool _system_on_primary_container_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_primary_container_light"/>
            /// </summary>
            public static int system_on_primary_container_light { get { if (!_system_on_primary_container_lightReady) { _system_on_primary_container_lightContent = SGetField<int>(LocalBridgeClazz, "system_on_primary_container_light"); _system_on_primary_container_lightReady = true; } return _system_on_primary_container_lightContent; } }
            private static int _system_on_primary_container_lightContent = default;
            private static bool _system_on_primary_container_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_primary_dark"/>
            /// </summary>
            public static int system_on_primary_dark { get { if (!_system_on_primary_darkReady) { _system_on_primary_darkContent = SGetField<int>(LocalBridgeClazz, "system_on_primary_dark"); _system_on_primary_darkReady = true; } return _system_on_primary_darkContent; } }
            private static int _system_on_primary_darkContent = default;
            private static bool _system_on_primary_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_primary_fixed"/>
            /// </summary>
            public static int system_on_primary_fixed { get { if (!_system_on_primary_fixedReady) { _system_on_primary_fixedContent = SGetField<int>(LocalBridgeClazz, "system_on_primary_fixed"); _system_on_primary_fixedReady = true; } return _system_on_primary_fixedContent; } }
            private static int _system_on_primary_fixedContent = default;
            private static bool _system_on_primary_fixedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_primary_fixed_variant"/>
            /// </summary>
            public static int system_on_primary_fixed_variant { get { if (!_system_on_primary_fixed_variantReady) { _system_on_primary_fixed_variantContent = SGetField<int>(LocalBridgeClazz, "system_on_primary_fixed_variant"); _system_on_primary_fixed_variantReady = true; } return _system_on_primary_fixed_variantContent; } }
            private static int _system_on_primary_fixed_variantContent = default;
            private static bool _system_on_primary_fixed_variantReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_primary_light"/>
            /// </summary>
            public static int system_on_primary_light { get { if (!_system_on_primary_lightReady) { _system_on_primary_lightContent = SGetField<int>(LocalBridgeClazz, "system_on_primary_light"); _system_on_primary_lightReady = true; } return _system_on_primary_lightContent; } }
            private static int _system_on_primary_lightContent = default;
            private static bool _system_on_primary_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_secondary_container_dark"/>
            /// </summary>
            public static int system_on_secondary_container_dark { get { if (!_system_on_secondary_container_darkReady) { _system_on_secondary_container_darkContent = SGetField<int>(LocalBridgeClazz, "system_on_secondary_container_dark"); _system_on_secondary_container_darkReady = true; } return _system_on_secondary_container_darkContent; } }
            private static int _system_on_secondary_container_darkContent = default;
            private static bool _system_on_secondary_container_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_secondary_container_light"/>
            /// </summary>
            public static int system_on_secondary_container_light { get { if (!_system_on_secondary_container_lightReady) { _system_on_secondary_container_lightContent = SGetField<int>(LocalBridgeClazz, "system_on_secondary_container_light"); _system_on_secondary_container_lightReady = true; } return _system_on_secondary_container_lightContent; } }
            private static int _system_on_secondary_container_lightContent = default;
            private static bool _system_on_secondary_container_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_secondary_dark"/>
            /// </summary>
            public static int system_on_secondary_dark { get { if (!_system_on_secondary_darkReady) { _system_on_secondary_darkContent = SGetField<int>(LocalBridgeClazz, "system_on_secondary_dark"); _system_on_secondary_darkReady = true; } return _system_on_secondary_darkContent; } }
            private static int _system_on_secondary_darkContent = default;
            private static bool _system_on_secondary_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_secondary_fixed"/>
            /// </summary>
            public static int system_on_secondary_fixed { get { if (!_system_on_secondary_fixedReady) { _system_on_secondary_fixedContent = SGetField<int>(LocalBridgeClazz, "system_on_secondary_fixed"); _system_on_secondary_fixedReady = true; } return _system_on_secondary_fixedContent; } }
            private static int _system_on_secondary_fixedContent = default;
            private static bool _system_on_secondary_fixedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_secondary_fixed_variant"/>
            /// </summary>
            public static int system_on_secondary_fixed_variant { get { if (!_system_on_secondary_fixed_variantReady) { _system_on_secondary_fixed_variantContent = SGetField<int>(LocalBridgeClazz, "system_on_secondary_fixed_variant"); _system_on_secondary_fixed_variantReady = true; } return _system_on_secondary_fixed_variantContent; } }
            private static int _system_on_secondary_fixed_variantContent = default;
            private static bool _system_on_secondary_fixed_variantReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_secondary_light"/>
            /// </summary>
            public static int system_on_secondary_light { get { if (!_system_on_secondary_lightReady) { _system_on_secondary_lightContent = SGetField<int>(LocalBridgeClazz, "system_on_secondary_light"); _system_on_secondary_lightReady = true; } return _system_on_secondary_lightContent; } }
            private static int _system_on_secondary_lightContent = default;
            private static bool _system_on_secondary_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_surface_dark"/>
            /// </summary>
            public static int system_on_surface_dark { get { if (!_system_on_surface_darkReady) { _system_on_surface_darkContent = SGetField<int>(LocalBridgeClazz, "system_on_surface_dark"); _system_on_surface_darkReady = true; } return _system_on_surface_darkContent; } }
            private static int _system_on_surface_darkContent = default;
            private static bool _system_on_surface_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_surface_disabled"/>
            /// </summary>
            public static int system_on_surface_disabled { get { if (!_system_on_surface_disabledReady) { _system_on_surface_disabledContent = SGetField<int>(LocalBridgeClazz, "system_on_surface_disabled"); _system_on_surface_disabledReady = true; } return _system_on_surface_disabledContent; } }
            private static int _system_on_surface_disabledContent = default;
            private static bool _system_on_surface_disabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_surface_light"/>
            /// </summary>
            public static int system_on_surface_light { get { if (!_system_on_surface_lightReady) { _system_on_surface_lightContent = SGetField<int>(LocalBridgeClazz, "system_on_surface_light"); _system_on_surface_lightReady = true; } return _system_on_surface_lightContent; } }
            private static int _system_on_surface_lightContent = default;
            private static bool _system_on_surface_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_surface_variant_dark"/>
            /// </summary>
            public static int system_on_surface_variant_dark { get { if (!_system_on_surface_variant_darkReady) { _system_on_surface_variant_darkContent = SGetField<int>(LocalBridgeClazz, "system_on_surface_variant_dark"); _system_on_surface_variant_darkReady = true; } return _system_on_surface_variant_darkContent; } }
            private static int _system_on_surface_variant_darkContent = default;
            private static bool _system_on_surface_variant_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_surface_variant_light"/>
            /// </summary>
            public static int system_on_surface_variant_light { get { if (!_system_on_surface_variant_lightReady) { _system_on_surface_variant_lightContent = SGetField<int>(LocalBridgeClazz, "system_on_surface_variant_light"); _system_on_surface_variant_lightReady = true; } return _system_on_surface_variant_lightContent; } }
            private static int _system_on_surface_variant_lightContent = default;
            private static bool _system_on_surface_variant_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_tertiary_container_dark"/>
            /// </summary>
            public static int system_on_tertiary_container_dark { get { if (!_system_on_tertiary_container_darkReady) { _system_on_tertiary_container_darkContent = SGetField<int>(LocalBridgeClazz, "system_on_tertiary_container_dark"); _system_on_tertiary_container_darkReady = true; } return _system_on_tertiary_container_darkContent; } }
            private static int _system_on_tertiary_container_darkContent = default;
            private static bool _system_on_tertiary_container_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_tertiary_container_light"/>
            /// </summary>
            public static int system_on_tertiary_container_light { get { if (!_system_on_tertiary_container_lightReady) { _system_on_tertiary_container_lightContent = SGetField<int>(LocalBridgeClazz, "system_on_tertiary_container_light"); _system_on_tertiary_container_lightReady = true; } return _system_on_tertiary_container_lightContent; } }
            private static int _system_on_tertiary_container_lightContent = default;
            private static bool _system_on_tertiary_container_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_tertiary_dark"/>
            /// </summary>
            public static int system_on_tertiary_dark { get { if (!_system_on_tertiary_darkReady) { _system_on_tertiary_darkContent = SGetField<int>(LocalBridgeClazz, "system_on_tertiary_dark"); _system_on_tertiary_darkReady = true; } return _system_on_tertiary_darkContent; } }
            private static int _system_on_tertiary_darkContent = default;
            private static bool _system_on_tertiary_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_tertiary_fixed"/>
            /// </summary>
            public static int system_on_tertiary_fixed { get { if (!_system_on_tertiary_fixedReady) { _system_on_tertiary_fixedContent = SGetField<int>(LocalBridgeClazz, "system_on_tertiary_fixed"); _system_on_tertiary_fixedReady = true; } return _system_on_tertiary_fixedContent; } }
            private static int _system_on_tertiary_fixedContent = default;
            private static bool _system_on_tertiary_fixedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_tertiary_fixed_variant"/>
            /// </summary>
            public static int system_on_tertiary_fixed_variant { get { if (!_system_on_tertiary_fixed_variantReady) { _system_on_tertiary_fixed_variantContent = SGetField<int>(LocalBridgeClazz, "system_on_tertiary_fixed_variant"); _system_on_tertiary_fixed_variantReady = true; } return _system_on_tertiary_fixed_variantContent; } }
            private static int _system_on_tertiary_fixed_variantContent = default;
            private static bool _system_on_tertiary_fixed_variantReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_on_tertiary_light"/>
            /// </summary>
            public static int system_on_tertiary_light { get { if (!_system_on_tertiary_lightReady) { _system_on_tertiary_lightContent = SGetField<int>(LocalBridgeClazz, "system_on_tertiary_light"); _system_on_tertiary_lightReady = true; } return _system_on_tertiary_lightContent; } }
            private static int _system_on_tertiary_lightContent = default;
            private static bool _system_on_tertiary_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_outline_dark"/>
            /// </summary>
            public static int system_outline_dark { get { if (!_system_outline_darkReady) { _system_outline_darkContent = SGetField<int>(LocalBridgeClazz, "system_outline_dark"); _system_outline_darkReady = true; } return _system_outline_darkContent; } }
            private static int _system_outline_darkContent = default;
            private static bool _system_outline_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_outline_disabled"/>
            /// </summary>
            public static int system_outline_disabled { get { if (!_system_outline_disabledReady) { _system_outline_disabledContent = SGetField<int>(LocalBridgeClazz, "system_outline_disabled"); _system_outline_disabledReady = true; } return _system_outline_disabledContent; } }
            private static int _system_outline_disabledContent = default;
            private static bool _system_outline_disabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_outline_light"/>
            /// </summary>
            public static int system_outline_light { get { if (!_system_outline_lightReady) { _system_outline_lightContent = SGetField<int>(LocalBridgeClazz, "system_outline_light"); _system_outline_lightReady = true; } return _system_outline_lightContent; } }
            private static int _system_outline_lightContent = default;
            private static bool _system_outline_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_outline_variant_dark"/>
            /// </summary>
            public static int system_outline_variant_dark { get { if (!_system_outline_variant_darkReady) { _system_outline_variant_darkContent = SGetField<int>(LocalBridgeClazz, "system_outline_variant_dark"); _system_outline_variant_darkReady = true; } return _system_outline_variant_darkContent; } }
            private static int _system_outline_variant_darkContent = default;
            private static bool _system_outline_variant_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_outline_variant_light"/>
            /// </summary>
            public static int system_outline_variant_light { get { if (!_system_outline_variant_lightReady) { _system_outline_variant_lightContent = SGetField<int>(LocalBridgeClazz, "system_outline_variant_light"); _system_outline_variant_lightReady = true; } return _system_outline_variant_lightContent; } }
            private static int _system_outline_variant_lightContent = default;
            private static bool _system_outline_variant_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_palette_key_color_neutral_dark"/>
            /// </summary>
            public static int system_palette_key_color_neutral_dark { get { if (!_system_palette_key_color_neutral_darkReady) { _system_palette_key_color_neutral_darkContent = SGetField<int>(LocalBridgeClazz, "system_palette_key_color_neutral_dark"); _system_palette_key_color_neutral_darkReady = true; } return _system_palette_key_color_neutral_darkContent; } }
            private static int _system_palette_key_color_neutral_darkContent = default;
            private static bool _system_palette_key_color_neutral_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_palette_key_color_neutral_light"/>
            /// </summary>
            public static int system_palette_key_color_neutral_light { get { if (!_system_palette_key_color_neutral_lightReady) { _system_palette_key_color_neutral_lightContent = SGetField<int>(LocalBridgeClazz, "system_palette_key_color_neutral_light"); _system_palette_key_color_neutral_lightReady = true; } return _system_palette_key_color_neutral_lightContent; } }
            private static int _system_palette_key_color_neutral_lightContent = default;
            private static bool _system_palette_key_color_neutral_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_palette_key_color_neutral_variant_dark"/>
            /// </summary>
            public static int system_palette_key_color_neutral_variant_dark { get { if (!_system_palette_key_color_neutral_variant_darkReady) { _system_palette_key_color_neutral_variant_darkContent = SGetField<int>(LocalBridgeClazz, "system_palette_key_color_neutral_variant_dark"); _system_palette_key_color_neutral_variant_darkReady = true; } return _system_palette_key_color_neutral_variant_darkContent; } }
            private static int _system_palette_key_color_neutral_variant_darkContent = default;
            private static bool _system_palette_key_color_neutral_variant_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_palette_key_color_neutral_variant_light"/>
            /// </summary>
            public static int system_palette_key_color_neutral_variant_light { get { if (!_system_palette_key_color_neutral_variant_lightReady) { _system_palette_key_color_neutral_variant_lightContent = SGetField<int>(LocalBridgeClazz, "system_palette_key_color_neutral_variant_light"); _system_palette_key_color_neutral_variant_lightReady = true; } return _system_palette_key_color_neutral_variant_lightContent; } }
            private static int _system_palette_key_color_neutral_variant_lightContent = default;
            private static bool _system_palette_key_color_neutral_variant_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_palette_key_color_primary_dark"/>
            /// </summary>
            public static int system_palette_key_color_primary_dark { get { if (!_system_palette_key_color_primary_darkReady) { _system_palette_key_color_primary_darkContent = SGetField<int>(LocalBridgeClazz, "system_palette_key_color_primary_dark"); _system_palette_key_color_primary_darkReady = true; } return _system_palette_key_color_primary_darkContent; } }
            private static int _system_palette_key_color_primary_darkContent = default;
            private static bool _system_palette_key_color_primary_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_palette_key_color_primary_light"/>
            /// </summary>
            public static int system_palette_key_color_primary_light { get { if (!_system_palette_key_color_primary_lightReady) { _system_palette_key_color_primary_lightContent = SGetField<int>(LocalBridgeClazz, "system_palette_key_color_primary_light"); _system_palette_key_color_primary_lightReady = true; } return _system_palette_key_color_primary_lightContent; } }
            private static int _system_palette_key_color_primary_lightContent = default;
            private static bool _system_palette_key_color_primary_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_palette_key_color_secondary_dark"/>
            /// </summary>
            public static int system_palette_key_color_secondary_dark { get { if (!_system_palette_key_color_secondary_darkReady) { _system_palette_key_color_secondary_darkContent = SGetField<int>(LocalBridgeClazz, "system_palette_key_color_secondary_dark"); _system_palette_key_color_secondary_darkReady = true; } return _system_palette_key_color_secondary_darkContent; } }
            private static int _system_palette_key_color_secondary_darkContent = default;
            private static bool _system_palette_key_color_secondary_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_palette_key_color_secondary_light"/>
            /// </summary>
            public static int system_palette_key_color_secondary_light { get { if (!_system_palette_key_color_secondary_lightReady) { _system_palette_key_color_secondary_lightContent = SGetField<int>(LocalBridgeClazz, "system_palette_key_color_secondary_light"); _system_palette_key_color_secondary_lightReady = true; } return _system_palette_key_color_secondary_lightContent; } }
            private static int _system_palette_key_color_secondary_lightContent = default;
            private static bool _system_palette_key_color_secondary_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_palette_key_color_tertiary_dark"/>
            /// </summary>
            public static int system_palette_key_color_tertiary_dark { get { if (!_system_palette_key_color_tertiary_darkReady) { _system_palette_key_color_tertiary_darkContent = SGetField<int>(LocalBridgeClazz, "system_palette_key_color_tertiary_dark"); _system_palette_key_color_tertiary_darkReady = true; } return _system_palette_key_color_tertiary_darkContent; } }
            private static int _system_palette_key_color_tertiary_darkContent = default;
            private static bool _system_palette_key_color_tertiary_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_palette_key_color_tertiary_light"/>
            /// </summary>
            public static int system_palette_key_color_tertiary_light { get { if (!_system_palette_key_color_tertiary_lightReady) { _system_palette_key_color_tertiary_lightContent = SGetField<int>(LocalBridgeClazz, "system_palette_key_color_tertiary_light"); _system_palette_key_color_tertiary_lightReady = true; } return _system_palette_key_color_tertiary_lightContent; } }
            private static int _system_palette_key_color_tertiary_lightContent = default;
            private static bool _system_palette_key_color_tertiary_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_primary_container_dark"/>
            /// </summary>
            public static int system_primary_container_dark { get { if (!_system_primary_container_darkReady) { _system_primary_container_darkContent = SGetField<int>(LocalBridgeClazz, "system_primary_container_dark"); _system_primary_container_darkReady = true; } return _system_primary_container_darkContent; } }
            private static int _system_primary_container_darkContent = default;
            private static bool _system_primary_container_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_primary_container_light"/>
            /// </summary>
            public static int system_primary_container_light { get { if (!_system_primary_container_lightReady) { _system_primary_container_lightContent = SGetField<int>(LocalBridgeClazz, "system_primary_container_light"); _system_primary_container_lightReady = true; } return _system_primary_container_lightContent; } }
            private static int _system_primary_container_lightContent = default;
            private static bool _system_primary_container_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_primary_dark"/>
            /// </summary>
            public static int system_primary_dark { get { if (!_system_primary_darkReady) { _system_primary_darkContent = SGetField<int>(LocalBridgeClazz, "system_primary_dark"); _system_primary_darkReady = true; } return _system_primary_darkContent; } }
            private static int _system_primary_darkContent = default;
            private static bool _system_primary_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_primary_fixed"/>
            /// </summary>
            public static int system_primary_fixed { get { if (!_system_primary_fixedReady) { _system_primary_fixedContent = SGetField<int>(LocalBridgeClazz, "system_primary_fixed"); _system_primary_fixedReady = true; } return _system_primary_fixedContent; } }
            private static int _system_primary_fixedContent = default;
            private static bool _system_primary_fixedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_primary_fixed_dim"/>
            /// </summary>
            public static int system_primary_fixed_dim { get { if (!_system_primary_fixed_dimReady) { _system_primary_fixed_dimContent = SGetField<int>(LocalBridgeClazz, "system_primary_fixed_dim"); _system_primary_fixed_dimReady = true; } return _system_primary_fixed_dimContent; } }
            private static int _system_primary_fixed_dimContent = default;
            private static bool _system_primary_fixed_dimReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_primary_light"/>
            /// </summary>
            public static int system_primary_light { get { if (!_system_primary_lightReady) { _system_primary_lightContent = SGetField<int>(LocalBridgeClazz, "system_primary_light"); _system_primary_lightReady = true; } return _system_primary_lightContent; } }
            private static int _system_primary_lightContent = default;
            private static bool _system_primary_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_secondary_container_dark"/>
            /// </summary>
            public static int system_secondary_container_dark { get { if (!_system_secondary_container_darkReady) { _system_secondary_container_darkContent = SGetField<int>(LocalBridgeClazz, "system_secondary_container_dark"); _system_secondary_container_darkReady = true; } return _system_secondary_container_darkContent; } }
            private static int _system_secondary_container_darkContent = default;
            private static bool _system_secondary_container_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_secondary_container_light"/>
            /// </summary>
            public static int system_secondary_container_light { get { if (!_system_secondary_container_lightReady) { _system_secondary_container_lightContent = SGetField<int>(LocalBridgeClazz, "system_secondary_container_light"); _system_secondary_container_lightReady = true; } return _system_secondary_container_lightContent; } }
            private static int _system_secondary_container_lightContent = default;
            private static bool _system_secondary_container_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_secondary_dark"/>
            /// </summary>
            public static int system_secondary_dark { get { if (!_system_secondary_darkReady) { _system_secondary_darkContent = SGetField<int>(LocalBridgeClazz, "system_secondary_dark"); _system_secondary_darkReady = true; } return _system_secondary_darkContent; } }
            private static int _system_secondary_darkContent = default;
            private static bool _system_secondary_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_secondary_fixed"/>
            /// </summary>
            public static int system_secondary_fixed { get { if (!_system_secondary_fixedReady) { _system_secondary_fixedContent = SGetField<int>(LocalBridgeClazz, "system_secondary_fixed"); _system_secondary_fixedReady = true; } return _system_secondary_fixedContent; } }
            private static int _system_secondary_fixedContent = default;
            private static bool _system_secondary_fixedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_secondary_fixed_dim"/>
            /// </summary>
            public static int system_secondary_fixed_dim { get { if (!_system_secondary_fixed_dimReady) { _system_secondary_fixed_dimContent = SGetField<int>(LocalBridgeClazz, "system_secondary_fixed_dim"); _system_secondary_fixed_dimReady = true; } return _system_secondary_fixed_dimContent; } }
            private static int _system_secondary_fixed_dimContent = default;
            private static bool _system_secondary_fixed_dimReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_secondary_light"/>
            /// </summary>
            public static int system_secondary_light { get { if (!_system_secondary_lightReady) { _system_secondary_lightContent = SGetField<int>(LocalBridgeClazz, "system_secondary_light"); _system_secondary_lightReady = true; } return _system_secondary_lightContent; } }
            private static int _system_secondary_lightContent = default;
            private static bool _system_secondary_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_bright_dark"/>
            /// </summary>
            public static int system_surface_bright_dark { get { if (!_system_surface_bright_darkReady) { _system_surface_bright_darkContent = SGetField<int>(LocalBridgeClazz, "system_surface_bright_dark"); _system_surface_bright_darkReady = true; } return _system_surface_bright_darkContent; } }
            private static int _system_surface_bright_darkContent = default;
            private static bool _system_surface_bright_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_bright_light"/>
            /// </summary>
            public static int system_surface_bright_light { get { if (!_system_surface_bright_lightReady) { _system_surface_bright_lightContent = SGetField<int>(LocalBridgeClazz, "system_surface_bright_light"); _system_surface_bright_lightReady = true; } return _system_surface_bright_lightContent; } }
            private static int _system_surface_bright_lightContent = default;
            private static bool _system_surface_bright_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_container_dark"/>
            /// </summary>
            public static int system_surface_container_dark { get { if (!_system_surface_container_darkReady) { _system_surface_container_darkContent = SGetField<int>(LocalBridgeClazz, "system_surface_container_dark"); _system_surface_container_darkReady = true; } return _system_surface_container_darkContent; } }
            private static int _system_surface_container_darkContent = default;
            private static bool _system_surface_container_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_container_high_dark"/>
            /// </summary>
            public static int system_surface_container_high_dark { get { if (!_system_surface_container_high_darkReady) { _system_surface_container_high_darkContent = SGetField<int>(LocalBridgeClazz, "system_surface_container_high_dark"); _system_surface_container_high_darkReady = true; } return _system_surface_container_high_darkContent; } }
            private static int _system_surface_container_high_darkContent = default;
            private static bool _system_surface_container_high_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_container_high_light"/>
            /// </summary>
            public static int system_surface_container_high_light { get { if (!_system_surface_container_high_lightReady) { _system_surface_container_high_lightContent = SGetField<int>(LocalBridgeClazz, "system_surface_container_high_light"); _system_surface_container_high_lightReady = true; } return _system_surface_container_high_lightContent; } }
            private static int _system_surface_container_high_lightContent = default;
            private static bool _system_surface_container_high_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_container_highest_dark"/>
            /// </summary>
            public static int system_surface_container_highest_dark { get { if (!_system_surface_container_highest_darkReady) { _system_surface_container_highest_darkContent = SGetField<int>(LocalBridgeClazz, "system_surface_container_highest_dark"); _system_surface_container_highest_darkReady = true; } return _system_surface_container_highest_darkContent; } }
            private static int _system_surface_container_highest_darkContent = default;
            private static bool _system_surface_container_highest_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_container_highest_light"/>
            /// </summary>
            public static int system_surface_container_highest_light { get { if (!_system_surface_container_highest_lightReady) { _system_surface_container_highest_lightContent = SGetField<int>(LocalBridgeClazz, "system_surface_container_highest_light"); _system_surface_container_highest_lightReady = true; } return _system_surface_container_highest_lightContent; } }
            private static int _system_surface_container_highest_lightContent = default;
            private static bool _system_surface_container_highest_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_container_light"/>
            /// </summary>
            public static int system_surface_container_light { get { if (!_system_surface_container_lightReady) { _system_surface_container_lightContent = SGetField<int>(LocalBridgeClazz, "system_surface_container_light"); _system_surface_container_lightReady = true; } return _system_surface_container_lightContent; } }
            private static int _system_surface_container_lightContent = default;
            private static bool _system_surface_container_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_container_low_dark"/>
            /// </summary>
            public static int system_surface_container_low_dark { get { if (!_system_surface_container_low_darkReady) { _system_surface_container_low_darkContent = SGetField<int>(LocalBridgeClazz, "system_surface_container_low_dark"); _system_surface_container_low_darkReady = true; } return _system_surface_container_low_darkContent; } }
            private static int _system_surface_container_low_darkContent = default;
            private static bool _system_surface_container_low_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_container_low_light"/>
            /// </summary>
            public static int system_surface_container_low_light { get { if (!_system_surface_container_low_lightReady) { _system_surface_container_low_lightContent = SGetField<int>(LocalBridgeClazz, "system_surface_container_low_light"); _system_surface_container_low_lightReady = true; } return _system_surface_container_low_lightContent; } }
            private static int _system_surface_container_low_lightContent = default;
            private static bool _system_surface_container_low_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_container_lowest_dark"/>
            /// </summary>
            public static int system_surface_container_lowest_dark { get { if (!_system_surface_container_lowest_darkReady) { _system_surface_container_lowest_darkContent = SGetField<int>(LocalBridgeClazz, "system_surface_container_lowest_dark"); _system_surface_container_lowest_darkReady = true; } return _system_surface_container_lowest_darkContent; } }
            private static int _system_surface_container_lowest_darkContent = default;
            private static bool _system_surface_container_lowest_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_container_lowest_light"/>
            /// </summary>
            public static int system_surface_container_lowest_light { get { if (!_system_surface_container_lowest_lightReady) { _system_surface_container_lowest_lightContent = SGetField<int>(LocalBridgeClazz, "system_surface_container_lowest_light"); _system_surface_container_lowest_lightReady = true; } return _system_surface_container_lowest_lightContent; } }
            private static int _system_surface_container_lowest_lightContent = default;
            private static bool _system_surface_container_lowest_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_dark"/>
            /// </summary>
            public static int system_surface_dark { get { if (!_system_surface_darkReady) { _system_surface_darkContent = SGetField<int>(LocalBridgeClazz, "system_surface_dark"); _system_surface_darkReady = true; } return _system_surface_darkContent; } }
            private static int _system_surface_darkContent = default;
            private static bool _system_surface_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_dim_dark"/>
            /// </summary>
            public static int system_surface_dim_dark { get { if (!_system_surface_dim_darkReady) { _system_surface_dim_darkContent = SGetField<int>(LocalBridgeClazz, "system_surface_dim_dark"); _system_surface_dim_darkReady = true; } return _system_surface_dim_darkContent; } }
            private static int _system_surface_dim_darkContent = default;
            private static bool _system_surface_dim_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_dim_light"/>
            /// </summary>
            public static int system_surface_dim_light { get { if (!_system_surface_dim_lightReady) { _system_surface_dim_lightContent = SGetField<int>(LocalBridgeClazz, "system_surface_dim_light"); _system_surface_dim_lightReady = true; } return _system_surface_dim_lightContent; } }
            private static int _system_surface_dim_lightContent = default;
            private static bool _system_surface_dim_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_disabled"/>
            /// </summary>
            public static int system_surface_disabled { get { if (!_system_surface_disabledReady) { _system_surface_disabledContent = SGetField<int>(LocalBridgeClazz, "system_surface_disabled"); _system_surface_disabledReady = true; } return _system_surface_disabledContent; } }
            private static int _system_surface_disabledContent = default;
            private static bool _system_surface_disabledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_light"/>
            /// </summary>
            public static int system_surface_light { get { if (!_system_surface_lightReady) { _system_surface_lightContent = SGetField<int>(LocalBridgeClazz, "system_surface_light"); _system_surface_lightReady = true; } return _system_surface_lightContent; } }
            private static int _system_surface_lightContent = default;
            private static bool _system_surface_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_variant_dark"/>
            /// </summary>
            public static int system_surface_variant_dark { get { if (!_system_surface_variant_darkReady) { _system_surface_variant_darkContent = SGetField<int>(LocalBridgeClazz, "system_surface_variant_dark"); _system_surface_variant_darkReady = true; } return _system_surface_variant_darkContent; } }
            private static int _system_surface_variant_darkContent = default;
            private static bool _system_surface_variant_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_surface_variant_light"/>
            /// </summary>
            public static int system_surface_variant_light { get { if (!_system_surface_variant_lightReady) { _system_surface_variant_lightContent = SGetField<int>(LocalBridgeClazz, "system_surface_variant_light"); _system_surface_variant_lightReady = true; } return _system_surface_variant_lightContent; } }
            private static int _system_surface_variant_lightContent = default;
            private static bool _system_surface_variant_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_tertiary_container_dark"/>
            /// </summary>
            public static int system_tertiary_container_dark { get { if (!_system_tertiary_container_darkReady) { _system_tertiary_container_darkContent = SGetField<int>(LocalBridgeClazz, "system_tertiary_container_dark"); _system_tertiary_container_darkReady = true; } return _system_tertiary_container_darkContent; } }
            private static int _system_tertiary_container_darkContent = default;
            private static bool _system_tertiary_container_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_tertiary_container_light"/>
            /// </summary>
            public static int system_tertiary_container_light { get { if (!_system_tertiary_container_lightReady) { _system_tertiary_container_lightContent = SGetField<int>(LocalBridgeClazz, "system_tertiary_container_light"); _system_tertiary_container_lightReady = true; } return _system_tertiary_container_lightContent; } }
            private static int _system_tertiary_container_lightContent = default;
            private static bool _system_tertiary_container_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_tertiary_dark"/>
            /// </summary>
            public static int system_tertiary_dark { get { if (!_system_tertiary_darkReady) { _system_tertiary_darkContent = SGetField<int>(LocalBridgeClazz, "system_tertiary_dark"); _system_tertiary_darkReady = true; } return _system_tertiary_darkContent; } }
            private static int _system_tertiary_darkContent = default;
            private static bool _system_tertiary_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_tertiary_fixed"/>
            /// </summary>
            public static int system_tertiary_fixed { get { if (!_system_tertiary_fixedReady) { _system_tertiary_fixedContent = SGetField<int>(LocalBridgeClazz, "system_tertiary_fixed"); _system_tertiary_fixedReady = true; } return _system_tertiary_fixedContent; } }
            private static int _system_tertiary_fixedContent = default;
            private static bool _system_tertiary_fixedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_tertiary_fixed_dim"/>
            /// </summary>
            public static int system_tertiary_fixed_dim { get { if (!_system_tertiary_fixed_dimReady) { _system_tertiary_fixed_dimContent = SGetField<int>(LocalBridgeClazz, "system_tertiary_fixed_dim"); _system_tertiary_fixed_dimReady = true; } return _system_tertiary_fixed_dimContent; } }
            private static int _system_tertiary_fixed_dimContent = default;
            private static bool _system_tertiary_fixed_dimReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_tertiary_light"/>
            /// </summary>
            public static int system_tertiary_light { get { if (!_system_tertiary_lightReady) { _system_tertiary_lightContent = SGetField<int>(LocalBridgeClazz, "system_tertiary_light"); _system_tertiary_lightReady = true; } return _system_tertiary_lightContent; } }
            private static int _system_tertiary_lightContent = default;
            private static bool _system_tertiary_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_text_hint_inverse_dark"/>
            /// </summary>
            public static int system_text_hint_inverse_dark { get { if (!_system_text_hint_inverse_darkReady) { _system_text_hint_inverse_darkContent = SGetField<int>(LocalBridgeClazz, "system_text_hint_inverse_dark"); _system_text_hint_inverse_darkReady = true; } return _system_text_hint_inverse_darkContent; } }
            private static int _system_text_hint_inverse_darkContent = default;
            private static bool _system_text_hint_inverse_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_text_hint_inverse_light"/>
            /// </summary>
            public static int system_text_hint_inverse_light { get { if (!_system_text_hint_inverse_lightReady) { _system_text_hint_inverse_lightContent = SGetField<int>(LocalBridgeClazz, "system_text_hint_inverse_light"); _system_text_hint_inverse_lightReady = true; } return _system_text_hint_inverse_lightContent; } }
            private static int _system_text_hint_inverse_lightContent = default;
            private static bool _system_text_hint_inverse_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_text_primary_inverse_dark"/>
            /// </summary>
            public static int system_text_primary_inverse_dark { get { if (!_system_text_primary_inverse_darkReady) { _system_text_primary_inverse_darkContent = SGetField<int>(LocalBridgeClazz, "system_text_primary_inverse_dark"); _system_text_primary_inverse_darkReady = true; } return _system_text_primary_inverse_darkContent; } }
            private static int _system_text_primary_inverse_darkContent = default;
            private static bool _system_text_primary_inverse_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_text_primary_inverse_disable_only_dark"/>
            /// </summary>
            public static int system_text_primary_inverse_disable_only_dark { get { if (!_system_text_primary_inverse_disable_only_darkReady) { _system_text_primary_inverse_disable_only_darkContent = SGetField<int>(LocalBridgeClazz, "system_text_primary_inverse_disable_only_dark"); _system_text_primary_inverse_disable_only_darkReady = true; } return _system_text_primary_inverse_disable_only_darkContent; } }
            private static int _system_text_primary_inverse_disable_only_darkContent = default;
            private static bool _system_text_primary_inverse_disable_only_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_text_primary_inverse_disable_only_light"/>
            /// </summary>
            public static int system_text_primary_inverse_disable_only_light { get { if (!_system_text_primary_inverse_disable_only_lightReady) { _system_text_primary_inverse_disable_only_lightContent = SGetField<int>(LocalBridgeClazz, "system_text_primary_inverse_disable_only_light"); _system_text_primary_inverse_disable_only_lightReady = true; } return _system_text_primary_inverse_disable_only_lightContent; } }
            private static int _system_text_primary_inverse_disable_only_lightContent = default;
            private static bool _system_text_primary_inverse_disable_only_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_text_primary_inverse_light"/>
            /// </summary>
            public static int system_text_primary_inverse_light { get { if (!_system_text_primary_inverse_lightReady) { _system_text_primary_inverse_lightContent = SGetField<int>(LocalBridgeClazz, "system_text_primary_inverse_light"); _system_text_primary_inverse_lightReady = true; } return _system_text_primary_inverse_lightContent; } }
            private static int _system_text_primary_inverse_lightContent = default;
            private static bool _system_text_primary_inverse_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_text_secondary_and_tertiary_inverse_dark"/>
            /// </summary>
            public static int system_text_secondary_and_tertiary_inverse_dark { get { if (!_system_text_secondary_and_tertiary_inverse_darkReady) { _system_text_secondary_and_tertiary_inverse_darkContent = SGetField<int>(LocalBridgeClazz, "system_text_secondary_and_tertiary_inverse_dark"); _system_text_secondary_and_tertiary_inverse_darkReady = true; } return _system_text_secondary_and_tertiary_inverse_darkContent; } }
            private static int _system_text_secondary_and_tertiary_inverse_darkContent = default;
            private static bool _system_text_secondary_and_tertiary_inverse_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_text_secondary_and_tertiary_inverse_disabled_dark"/>
            /// </summary>
            public static int system_text_secondary_and_tertiary_inverse_disabled_dark { get { if (!_system_text_secondary_and_tertiary_inverse_disabled_darkReady) { _system_text_secondary_and_tertiary_inverse_disabled_darkContent = SGetField<int>(LocalBridgeClazz, "system_text_secondary_and_tertiary_inverse_disabled_dark"); _system_text_secondary_and_tertiary_inverse_disabled_darkReady = true; } return _system_text_secondary_and_tertiary_inverse_disabled_darkContent; } }
            private static int _system_text_secondary_and_tertiary_inverse_disabled_darkContent = default;
            private static bool _system_text_secondary_and_tertiary_inverse_disabled_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_text_secondary_and_tertiary_inverse_disabled_light"/>
            /// </summary>
            public static int system_text_secondary_and_tertiary_inverse_disabled_light { get { if (!_system_text_secondary_and_tertiary_inverse_disabled_lightReady) { _system_text_secondary_and_tertiary_inverse_disabled_lightContent = SGetField<int>(LocalBridgeClazz, "system_text_secondary_and_tertiary_inverse_disabled_light"); _system_text_secondary_and_tertiary_inverse_disabled_lightReady = true; } return _system_text_secondary_and_tertiary_inverse_disabled_lightContent; } }
            private static int _system_text_secondary_and_tertiary_inverse_disabled_lightContent = default;
            private static bool _system_text_secondary_and_tertiary_inverse_disabled_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#system_text_secondary_and_tertiary_inverse_light"/>
            /// </summary>
            public static int system_text_secondary_and_tertiary_inverse_light { get { if (!_system_text_secondary_and_tertiary_inverse_lightReady) { _system_text_secondary_and_tertiary_inverse_lightContent = SGetField<int>(LocalBridgeClazz, "system_text_secondary_and_tertiary_inverse_light"); _system_text_secondary_and_tertiary_inverse_lightReady = true; } return _system_text_secondary_and_tertiary_inverse_lightContent; } }
            private static int _system_text_secondary_and_tertiary_inverse_lightContent = default;
            private static bool _system_text_secondary_and_tertiary_inverse_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#tab_indicator_text"/>
            /// </summary>
            public static int tab_indicator_text { get { if (!_tab_indicator_textReady) { _tab_indicator_textContent = SGetField<int>(LocalBridgeClazz, "tab_indicator_text"); _tab_indicator_textReady = true; } return _tab_indicator_textContent; } }
            private static int _tab_indicator_textContent = default;
            private static bool _tab_indicator_textReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#tertiary_text_dark"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int tertiary_text_dark { get { if (!_tertiary_text_darkReady) { _tertiary_text_darkContent = SGetField<int>(LocalBridgeClazz, "tertiary_text_dark"); _tertiary_text_darkReady = true; } return _tertiary_text_darkContent; } }
            private static int _tertiary_text_darkContent = default;
            private static bool _tertiary_text_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#tertiary_text_light"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int tertiary_text_light { get { if (!_tertiary_text_lightReady) { _tertiary_text_lightContent = SGetField<int>(LocalBridgeClazz, "tertiary_text_light"); _tertiary_text_lightReady = true; } return _tertiary_text_lightContent; } }
            private static int _tertiary_text_lightContent = default;
            private static bool _tertiary_text_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#transparent"/>
            /// </summary>
            public static int transparent { get { if (!_transparentReady) { _transparentContent = SGetField<int>(LocalBridgeClazz, "transparent"); _transparentReady = true; } return _transparentContent; } }
            private static int _transparentContent = default;
            private static bool _transparentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#white"/>
            /// </summary>
            public static int white { get { if (!_whiteReady) { _whiteContent = SGetField<int>(LocalBridgeClazz, "white"); _whiteReady = true; } return _whiteContent; } }
            private static int _whiteContent = default;
            private static bool _whiteReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.color.html#widget_edittext_dark"/>
            /// </summary>
            public static int widget_edittext_dark { get { if (!_widget_edittext_darkReady) { _widget_edittext_darkContent = SGetField<int>(LocalBridgeClazz, "widget_edittext_dark"); _widget_edittext_darkReady = true; } return _widget_edittext_darkContent; } }
            private static int _widget_edittext_darkContent = default;
            private static bool _widget_edittext_darkReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region dimen
        public partial class dimen
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.dimen.html#app_icon_size"/>
            /// </summary>
            public static int app_icon_size { get { if (!_app_icon_sizeReady) { _app_icon_sizeContent = SGetField<int>(LocalBridgeClazz, "app_icon_size"); _app_icon_sizeReady = true; } return _app_icon_sizeContent; } }
            private static int _app_icon_sizeContent = default;
            private static bool _app_icon_sizeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.dimen.html#dialog_min_width_major"/>
            /// </summary>
            public static int dialog_min_width_major { get { if (!_dialog_min_width_majorReady) { _dialog_min_width_majorContent = SGetField<int>(LocalBridgeClazz, "dialog_min_width_major"); _dialog_min_width_majorReady = true; } return _dialog_min_width_majorContent; } }
            private static int _dialog_min_width_majorContent = default;
            private static bool _dialog_min_width_majorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.dimen.html#dialog_min_width_minor"/>
            /// </summary>
            public static int dialog_min_width_minor { get { if (!_dialog_min_width_minorReady) { _dialog_min_width_minorContent = SGetField<int>(LocalBridgeClazz, "dialog_min_width_minor"); _dialog_min_width_minorReady = true; } return _dialog_min_width_minorContent; } }
            private static int _dialog_min_width_minorContent = default;
            private static bool _dialog_min_width_minorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.dimen.html#notification_large_icon_height"/>
            /// </summary>
            public static int notification_large_icon_height { get { if (!_notification_large_icon_heightReady) { _notification_large_icon_heightContent = SGetField<int>(LocalBridgeClazz, "notification_large_icon_height"); _notification_large_icon_heightReady = true; } return _notification_large_icon_heightContent; } }
            private static int _notification_large_icon_heightContent = default;
            private static bool _notification_large_icon_heightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.dimen.html#notification_large_icon_width"/>
            /// </summary>
            public static int notification_large_icon_width { get { if (!_notification_large_icon_widthReady) { _notification_large_icon_widthContent = SGetField<int>(LocalBridgeClazz, "notification_large_icon_width"); _notification_large_icon_widthReady = true; } return _notification_large_icon_widthContent; } }
            private static int _notification_large_icon_widthContent = default;
            private static bool _notification_large_icon_widthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.dimen.html#system_app_widget_background_radius"/>
            /// </summary>
            public static int system_app_widget_background_radius { get { if (!_system_app_widget_background_radiusReady) { _system_app_widget_background_radiusContent = SGetField<int>(LocalBridgeClazz, "system_app_widget_background_radius"); _system_app_widget_background_radiusReady = true; } return _system_app_widget_background_radiusContent; } }
            private static int _system_app_widget_background_radiusContent = default;
            private static bool _system_app_widget_background_radiusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.dimen.html#system_app_widget_inner_radius"/>
            /// </summary>
            public static int system_app_widget_inner_radius { get { if (!_system_app_widget_inner_radiusReady) { _system_app_widget_inner_radiusContent = SGetField<int>(LocalBridgeClazz, "system_app_widget_inner_radius"); _system_app_widget_inner_radiusReady = true; } return _system_app_widget_inner_radiusContent; } }
            private static int _system_app_widget_inner_radiusContent = default;
            private static bool _system_app_widget_inner_radiusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.dimen.html#thumbnail_height"/>
            /// </summary>
            public static int thumbnail_height { get { if (!_thumbnail_heightReady) { _thumbnail_heightContent = SGetField<int>(LocalBridgeClazz, "thumbnail_height"); _thumbnail_heightReady = true; } return _thumbnail_heightContent; } }
            private static int _thumbnail_heightContent = default;
            private static bool _thumbnail_heightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.dimen.html#thumbnail_width"/>
            /// </summary>
            public static int thumbnail_width { get { if (!_thumbnail_widthReady) { _thumbnail_widthContent = SGetField<int>(LocalBridgeClazz, "thumbnail_width"); _thumbnail_widthReady = true; } return _thumbnail_widthContent; } }
            private static int _thumbnail_widthContent = default;
            private static bool _thumbnail_widthReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region drawable
        public partial class drawable
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#alert_dark_frame"/>
            /// </summary>
            public static int alert_dark_frame { get { if (!_alert_dark_frameReady) { _alert_dark_frameContent = SGetField<int>(LocalBridgeClazz, "alert_dark_frame"); _alert_dark_frameReady = true; } return _alert_dark_frameContent; } }
            private static int _alert_dark_frameContent = default;
            private static bool _alert_dark_frameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#alert_light_frame"/>
            /// </summary>
            public static int alert_light_frame { get { if (!_alert_light_frameReady) { _alert_light_frameContent = SGetField<int>(LocalBridgeClazz, "alert_light_frame"); _alert_light_frameReady = true; } return _alert_light_frameContent; } }
            private static int _alert_light_frameContent = default;
            private static bool _alert_light_frameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#arrow_down_float"/>
            /// </summary>
            public static int arrow_down_float { get { if (!_arrow_down_floatReady) { _arrow_down_floatContent = SGetField<int>(LocalBridgeClazz, "arrow_down_float"); _arrow_down_floatReady = true; } return _arrow_down_floatContent; } }
            private static int _arrow_down_floatContent = default;
            private static bool _arrow_down_floatReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#arrow_up_float"/>
            /// </summary>
            public static int arrow_up_float { get { if (!_arrow_up_floatReady) { _arrow_up_floatContent = SGetField<int>(LocalBridgeClazz, "arrow_up_float"); _arrow_up_floatReady = true; } return _arrow_up_floatContent; } }
            private static int _arrow_up_floatContent = default;
            private static bool _arrow_up_floatReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#bottom_bar"/>
            /// </summary>
            public static int bottom_bar { get { if (!_bottom_barReady) { _bottom_barContent = SGetField<int>(LocalBridgeClazz, "bottom_bar"); _bottom_barReady = true; } return _bottom_barContent; } }
            private static int _bottom_barContent = default;
            private static bool _bottom_barReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#btn_default"/>
            /// </summary>
            public static int btn_default { get { if (!_btn_defaultReady) { _btn_defaultContent = SGetField<int>(LocalBridgeClazz, "btn_default"); _btn_defaultReady = true; } return _btn_defaultContent; } }
            private static int _btn_defaultContent = default;
            private static bool _btn_defaultReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#btn_default_small"/>
            /// </summary>
            public static int btn_default_small { get { if (!_btn_default_smallReady) { _btn_default_smallContent = SGetField<int>(LocalBridgeClazz, "btn_default_small"); _btn_default_smallReady = true; } return _btn_default_smallContent; } }
            private static int _btn_default_smallContent = default;
            private static bool _btn_default_smallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#btn_dialog"/>
            /// </summary>
            public static int btn_dialog { get { if (!_btn_dialogReady) { _btn_dialogContent = SGetField<int>(LocalBridgeClazz, "btn_dialog"); _btn_dialogReady = true; } return _btn_dialogContent; } }
            private static int _btn_dialogContent = default;
            private static bool _btn_dialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#btn_dropdown"/>
            /// </summary>
            public static int btn_dropdown { get { if (!_btn_dropdownReady) { _btn_dropdownContent = SGetField<int>(LocalBridgeClazz, "btn_dropdown"); _btn_dropdownReady = true; } return _btn_dropdownContent; } }
            private static int _btn_dropdownContent = default;
            private static bool _btn_dropdownReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#btn_minus"/>
            /// </summary>
            public static int btn_minus { get { if (!_btn_minusReady) { _btn_minusContent = SGetField<int>(LocalBridgeClazz, "btn_minus"); _btn_minusReady = true; } return _btn_minusContent; } }
            private static int _btn_minusContent = default;
            private static bool _btn_minusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#btn_plus"/>
            /// </summary>
            public static int btn_plus { get { if (!_btn_plusReady) { _btn_plusContent = SGetField<int>(LocalBridgeClazz, "btn_plus"); _btn_plusReady = true; } return _btn_plusContent; } }
            private static int _btn_plusContent = default;
            private static bool _btn_plusReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#btn_radio"/>
            /// </summary>
            public static int btn_radio { get { if (!_btn_radioReady) { _btn_radioContent = SGetField<int>(LocalBridgeClazz, "btn_radio"); _btn_radioReady = true; } return _btn_radioContent; } }
            private static int _btn_radioContent = default;
            private static bool _btn_radioReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#btn_star"/>
            /// </summary>
            public static int btn_star { get { if (!_btn_starReady) { _btn_starContent = SGetField<int>(LocalBridgeClazz, "btn_star"); _btn_starReady = true; } return _btn_starContent; } }
            private static int _btn_starContent = default;
            private static bool _btn_starReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#btn_star_big_off"/>
            /// </summary>
            public static int btn_star_big_off { get { if (!_btn_star_big_offReady) { _btn_star_big_offContent = SGetField<int>(LocalBridgeClazz, "btn_star_big_off"); _btn_star_big_offReady = true; } return _btn_star_big_offContent; } }
            private static int _btn_star_big_offContent = default;
            private static bool _btn_star_big_offReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#btn_star_big_on"/>
            /// </summary>
            public static int btn_star_big_on { get { if (!_btn_star_big_onReady) { _btn_star_big_onContent = SGetField<int>(LocalBridgeClazz, "btn_star_big_on"); _btn_star_big_onReady = true; } return _btn_star_big_onContent; } }
            private static int _btn_star_big_onContent = default;
            private static bool _btn_star_big_onReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#button_onoff_indicator_off"/>
            /// </summary>
            public static int button_onoff_indicator_off { get { if (!_button_onoff_indicator_offReady) { _button_onoff_indicator_offContent = SGetField<int>(LocalBridgeClazz, "button_onoff_indicator_off"); _button_onoff_indicator_offReady = true; } return _button_onoff_indicator_offContent; } }
            private static int _button_onoff_indicator_offContent = default;
            private static bool _button_onoff_indicator_offReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#button_onoff_indicator_on"/>
            /// </summary>
            public static int button_onoff_indicator_on { get { if (!_button_onoff_indicator_onReady) { _button_onoff_indicator_onContent = SGetField<int>(LocalBridgeClazz, "button_onoff_indicator_on"); _button_onoff_indicator_onReady = true; } return _button_onoff_indicator_onContent; } }
            private static int _button_onoff_indicator_onContent = default;
            private static bool _button_onoff_indicator_onReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#checkbox_off_background"/>
            /// </summary>
            public static int checkbox_off_background { get { if (!_checkbox_off_backgroundReady) { _checkbox_off_backgroundContent = SGetField<int>(LocalBridgeClazz, "checkbox_off_background"); _checkbox_off_backgroundReady = true; } return _checkbox_off_backgroundContent; } }
            private static int _checkbox_off_backgroundContent = default;
            private static bool _checkbox_off_backgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#checkbox_on_background"/>
            /// </summary>
            public static int checkbox_on_background { get { if (!_checkbox_on_backgroundReady) { _checkbox_on_backgroundContent = SGetField<int>(LocalBridgeClazz, "checkbox_on_background"); _checkbox_on_backgroundReady = true; } return _checkbox_on_backgroundContent; } }
            private static int _checkbox_on_backgroundContent = default;
            private static bool _checkbox_on_backgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#dark_header"/>
            /// </summary>
            public static int dark_header { get { if (!_dark_headerReady) { _dark_headerContent = SGetField<int>(LocalBridgeClazz, "dark_header"); _dark_headerReady = true; } return _dark_headerContent; } }
            private static int _dark_headerContent = default;
            private static bool _dark_headerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#dialog_frame"/>
            /// </summary>
            public static int dialog_frame { get { if (!_dialog_frameReady) { _dialog_frameContent = SGetField<int>(LocalBridgeClazz, "dialog_frame"); _dialog_frameReady = true; } return _dialog_frameContent; } }
            private static int _dialog_frameContent = default;
            private static bool _dialog_frameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#dialog_holo_dark_frame"/>
            /// </summary>
            public static int dialog_holo_dark_frame { get { if (!_dialog_holo_dark_frameReady) { _dialog_holo_dark_frameContent = SGetField<int>(LocalBridgeClazz, "dialog_holo_dark_frame"); _dialog_holo_dark_frameReady = true; } return _dialog_holo_dark_frameContent; } }
            private static int _dialog_holo_dark_frameContent = default;
            private static bool _dialog_holo_dark_frameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#dialog_holo_light_frame"/>
            /// </summary>
            public static int dialog_holo_light_frame { get { if (!_dialog_holo_light_frameReady) { _dialog_holo_light_frameContent = SGetField<int>(LocalBridgeClazz, "dialog_holo_light_frame"); _dialog_holo_light_frameReady = true; } return _dialog_holo_light_frameContent; } }
            private static int _dialog_holo_light_frameContent = default;
            private static bool _dialog_holo_light_frameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#divider_horizontal_bright"/>
            /// </summary>
            public static int divider_horizontal_bright { get { if (!_divider_horizontal_brightReady) { _divider_horizontal_brightContent = SGetField<int>(LocalBridgeClazz, "divider_horizontal_bright"); _divider_horizontal_brightReady = true; } return _divider_horizontal_brightContent; } }
            private static int _divider_horizontal_brightContent = default;
            private static bool _divider_horizontal_brightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#divider_horizontal_dark"/>
            /// </summary>
            public static int divider_horizontal_dark { get { if (!_divider_horizontal_darkReady) { _divider_horizontal_darkContent = SGetField<int>(LocalBridgeClazz, "divider_horizontal_dark"); _divider_horizontal_darkReady = true; } return _divider_horizontal_darkContent; } }
            private static int _divider_horizontal_darkContent = default;
            private static bool _divider_horizontal_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#divider_horizontal_dim_dark"/>
            /// </summary>
            public static int divider_horizontal_dim_dark { get { if (!_divider_horizontal_dim_darkReady) { _divider_horizontal_dim_darkContent = SGetField<int>(LocalBridgeClazz, "divider_horizontal_dim_dark"); _divider_horizontal_dim_darkReady = true; } return _divider_horizontal_dim_darkContent; } }
            private static int _divider_horizontal_dim_darkContent = default;
            private static bool _divider_horizontal_dim_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#divider_horizontal_textfield"/>
            /// </summary>
            public static int divider_horizontal_textfield { get { if (!_divider_horizontal_textfieldReady) { _divider_horizontal_textfieldContent = SGetField<int>(LocalBridgeClazz, "divider_horizontal_textfield"); _divider_horizontal_textfieldReady = true; } return _divider_horizontal_textfieldContent; } }
            private static int _divider_horizontal_textfieldContent = default;
            private static bool _divider_horizontal_textfieldReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#edit_text"/>
            /// </summary>
            public static int edit_text { get { if (!_edit_textReady) { _edit_textContent = SGetField<int>(LocalBridgeClazz, "edit_text"); _edit_textReady = true; } return _edit_textContent; } }
            private static int _edit_textContent = default;
            private static bool _edit_textReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#editbox_background"/>
            /// </summary>
            public static int editbox_background { get { if (!_editbox_backgroundReady) { _editbox_backgroundContent = SGetField<int>(LocalBridgeClazz, "editbox_background"); _editbox_backgroundReady = true; } return _editbox_backgroundContent; } }
            private static int _editbox_backgroundContent = default;
            private static bool _editbox_backgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#editbox_background_normal"/>
            /// </summary>
            public static int editbox_background_normal { get { if (!_editbox_background_normalReady) { _editbox_background_normalContent = SGetField<int>(LocalBridgeClazz, "editbox_background_normal"); _editbox_background_normalReady = true; } return _editbox_background_normalContent; } }
            private static int _editbox_background_normalContent = default;
            private static bool _editbox_background_normalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#editbox_dropdown_dark_frame"/>
            /// </summary>
            public static int editbox_dropdown_dark_frame { get { if (!_editbox_dropdown_dark_frameReady) { _editbox_dropdown_dark_frameContent = SGetField<int>(LocalBridgeClazz, "editbox_dropdown_dark_frame"); _editbox_dropdown_dark_frameReady = true; } return _editbox_dropdown_dark_frameContent; } }
            private static int _editbox_dropdown_dark_frameContent = default;
            private static bool _editbox_dropdown_dark_frameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#editbox_dropdown_light_frame"/>
            /// </summary>
            public static int editbox_dropdown_light_frame { get { if (!_editbox_dropdown_light_frameReady) { _editbox_dropdown_light_frameContent = SGetField<int>(LocalBridgeClazz, "editbox_dropdown_light_frame"); _editbox_dropdown_light_frameReady = true; } return _editbox_dropdown_light_frameContent; } }
            private static int _editbox_dropdown_light_frameContent = default;
            private static bool _editbox_dropdown_light_frameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#gallery_thumb"/>
            /// </summary>
            public static int gallery_thumb { get { if (!_gallery_thumbReady) { _gallery_thumbContent = SGetField<int>(LocalBridgeClazz, "gallery_thumb"); _gallery_thumbReady = true; } return _gallery_thumbContent; } }
            private static int _gallery_thumbContent = default;
            private static bool _gallery_thumbReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_btn_speak_now"/>
            /// </summary>
            public static int ic_btn_speak_now { get { if (!_ic_btn_speak_nowReady) { _ic_btn_speak_nowContent = SGetField<int>(LocalBridgeClazz, "ic_btn_speak_now"); _ic_btn_speak_nowReady = true; } return _ic_btn_speak_nowContent; } }
            private static int _ic_btn_speak_nowContent = default;
            private static bool _ic_btn_speak_nowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_delete"/>
            /// </summary>
            public static int ic_delete { get { if (!_ic_deleteReady) { _ic_deleteContent = SGetField<int>(LocalBridgeClazz, "ic_delete"); _ic_deleteReady = true; } return _ic_deleteContent; } }
            private static int _ic_deleteContent = default;
            private static bool _ic_deleteReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_dialog_alert"/>
            /// </summary>
            public static int ic_dialog_alert { get { if (!_ic_dialog_alertReady) { _ic_dialog_alertContent = SGetField<int>(LocalBridgeClazz, "ic_dialog_alert"); _ic_dialog_alertReady = true; } return _ic_dialog_alertContent; } }
            private static int _ic_dialog_alertContent = default;
            private static bool _ic_dialog_alertReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_dialog_dialer"/>
            /// </summary>
            public static int ic_dialog_dialer { get { if (!_ic_dialog_dialerReady) { _ic_dialog_dialerContent = SGetField<int>(LocalBridgeClazz, "ic_dialog_dialer"); _ic_dialog_dialerReady = true; } return _ic_dialog_dialerContent; } }
            private static int _ic_dialog_dialerContent = default;
            private static bool _ic_dialog_dialerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_dialog_email"/>
            /// </summary>
            public static int ic_dialog_email { get { if (!_ic_dialog_emailReady) { _ic_dialog_emailContent = SGetField<int>(LocalBridgeClazz, "ic_dialog_email"); _ic_dialog_emailReady = true; } return _ic_dialog_emailContent; } }
            private static int _ic_dialog_emailContent = default;
            private static bool _ic_dialog_emailReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_dialog_info"/>
            /// </summary>
            public static int ic_dialog_info { get { if (!_ic_dialog_infoReady) { _ic_dialog_infoContent = SGetField<int>(LocalBridgeClazz, "ic_dialog_info"); _ic_dialog_infoReady = true; } return _ic_dialog_infoContent; } }
            private static int _ic_dialog_infoContent = default;
            private static bool _ic_dialog_infoReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_dialog_map"/>
            /// </summary>
            public static int ic_dialog_map { get { if (!_ic_dialog_mapReady) { _ic_dialog_mapContent = SGetField<int>(LocalBridgeClazz, "ic_dialog_map"); _ic_dialog_mapReady = true; } return _ic_dialog_mapContent; } }
            private static int _ic_dialog_mapContent = default;
            private static bool _ic_dialog_mapReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_input_add"/>
            /// </summary>
            public static int ic_input_add { get { if (!_ic_input_addReady) { _ic_input_addContent = SGetField<int>(LocalBridgeClazz, "ic_input_add"); _ic_input_addReady = true; } return _ic_input_addContent; } }
            private static int _ic_input_addContent = default;
            private static bool _ic_input_addReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_input_delete"/>
            /// </summary>
            public static int ic_input_delete { get { if (!_ic_input_deleteReady) { _ic_input_deleteContent = SGetField<int>(LocalBridgeClazz, "ic_input_delete"); _ic_input_deleteReady = true; } return _ic_input_deleteContent; } }
            private static int _ic_input_deleteContent = default;
            private static bool _ic_input_deleteReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_input_get"/>
            /// </summary>
            public static int ic_input_get { get { if (!_ic_input_getReady) { _ic_input_getContent = SGetField<int>(LocalBridgeClazz, "ic_input_get"); _ic_input_getReady = true; } return _ic_input_getContent; } }
            private static int _ic_input_getContent = default;
            private static bool _ic_input_getReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_lock_idle_alarm"/>
            /// </summary>
            public static int ic_lock_idle_alarm { get { if (!_ic_lock_idle_alarmReady) { _ic_lock_idle_alarmContent = SGetField<int>(LocalBridgeClazz, "ic_lock_idle_alarm"); _ic_lock_idle_alarmReady = true; } return _ic_lock_idle_alarmContent; } }
            private static int _ic_lock_idle_alarmContent = default;
            private static bool _ic_lock_idle_alarmReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_lock_idle_charging"/>
            /// </summary>
            public static int ic_lock_idle_charging { get { if (!_ic_lock_idle_chargingReady) { _ic_lock_idle_chargingContent = SGetField<int>(LocalBridgeClazz, "ic_lock_idle_charging"); _ic_lock_idle_chargingReady = true; } return _ic_lock_idle_chargingContent; } }
            private static int _ic_lock_idle_chargingContent = default;
            private static bool _ic_lock_idle_chargingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_lock_idle_lock"/>
            /// </summary>
            public static int ic_lock_idle_lock { get { if (!_ic_lock_idle_lockReady) { _ic_lock_idle_lockContent = SGetField<int>(LocalBridgeClazz, "ic_lock_idle_lock"); _ic_lock_idle_lockReady = true; } return _ic_lock_idle_lockContent; } }
            private static int _ic_lock_idle_lockContent = default;
            private static bool _ic_lock_idle_lockReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_lock_idle_low_battery"/>
            /// </summary>
            public static int ic_lock_idle_low_battery { get { if (!_ic_lock_idle_low_batteryReady) { _ic_lock_idle_low_batteryContent = SGetField<int>(LocalBridgeClazz, "ic_lock_idle_low_battery"); _ic_lock_idle_low_batteryReady = true; } return _ic_lock_idle_low_batteryContent; } }
            private static int _ic_lock_idle_low_batteryContent = default;
            private static bool _ic_lock_idle_low_batteryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_lock_lock"/>
            /// </summary>
            public static int ic_lock_lock { get { if (!_ic_lock_lockReady) { _ic_lock_lockContent = SGetField<int>(LocalBridgeClazz, "ic_lock_lock"); _ic_lock_lockReady = true; } return _ic_lock_lockContent; } }
            private static int _ic_lock_lockContent = default;
            private static bool _ic_lock_lockReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_lock_power_off"/>
            /// </summary>
            public static int ic_lock_power_off { get { if (!_ic_lock_power_offReady) { _ic_lock_power_offContent = SGetField<int>(LocalBridgeClazz, "ic_lock_power_off"); _ic_lock_power_offReady = true; } return _ic_lock_power_offContent; } }
            private static int _ic_lock_power_offContent = default;
            private static bool _ic_lock_power_offReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_lock_silent_mode"/>
            /// </summary>
            public static int ic_lock_silent_mode { get { if (!_ic_lock_silent_modeReady) { _ic_lock_silent_modeContent = SGetField<int>(LocalBridgeClazz, "ic_lock_silent_mode"); _ic_lock_silent_modeReady = true; } return _ic_lock_silent_modeContent; } }
            private static int _ic_lock_silent_modeContent = default;
            private static bool _ic_lock_silent_modeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_lock_silent_mode_off"/>
            /// </summary>
            public static int ic_lock_silent_mode_off { get { if (!_ic_lock_silent_mode_offReady) { _ic_lock_silent_mode_offContent = SGetField<int>(LocalBridgeClazz, "ic_lock_silent_mode_off"); _ic_lock_silent_mode_offReady = true; } return _ic_lock_silent_mode_offContent; } }
            private static int _ic_lock_silent_mode_offContent = default;
            private static bool _ic_lock_silent_mode_offReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_media_ff"/>
            /// </summary>
            public static int ic_media_ff { get { if (!_ic_media_ffReady) { _ic_media_ffContent = SGetField<int>(LocalBridgeClazz, "ic_media_ff"); _ic_media_ffReady = true; } return _ic_media_ffContent; } }
            private static int _ic_media_ffContent = default;
            private static bool _ic_media_ffReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_media_next"/>
            /// </summary>
            public static int ic_media_next { get { if (!_ic_media_nextReady) { _ic_media_nextContent = SGetField<int>(LocalBridgeClazz, "ic_media_next"); _ic_media_nextReady = true; } return _ic_media_nextContent; } }
            private static int _ic_media_nextContent = default;
            private static bool _ic_media_nextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_media_pause"/>
            /// </summary>
            public static int ic_media_pause { get { if (!_ic_media_pauseReady) { _ic_media_pauseContent = SGetField<int>(LocalBridgeClazz, "ic_media_pause"); _ic_media_pauseReady = true; } return _ic_media_pauseContent; } }
            private static int _ic_media_pauseContent = default;
            private static bool _ic_media_pauseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_media_play"/>
            /// </summary>
            public static int ic_media_play { get { if (!_ic_media_playReady) { _ic_media_playContent = SGetField<int>(LocalBridgeClazz, "ic_media_play"); _ic_media_playReady = true; } return _ic_media_playContent; } }
            private static int _ic_media_playContent = default;
            private static bool _ic_media_playReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_media_previous"/>
            /// </summary>
            public static int ic_media_previous { get { if (!_ic_media_previousReady) { _ic_media_previousContent = SGetField<int>(LocalBridgeClazz, "ic_media_previous"); _ic_media_previousReady = true; } return _ic_media_previousContent; } }
            private static int _ic_media_previousContent = default;
            private static bool _ic_media_previousReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_media_rew"/>
            /// </summary>
            public static int ic_media_rew { get { if (!_ic_media_rewReady) { _ic_media_rewContent = SGetField<int>(LocalBridgeClazz, "ic_media_rew"); _ic_media_rewReady = true; } return _ic_media_rewContent; } }
            private static int _ic_media_rewContent = default;
            private static bool _ic_media_rewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_add"/>
            /// </summary>
            public static int ic_menu_add { get { if (!_ic_menu_addReady) { _ic_menu_addContent = SGetField<int>(LocalBridgeClazz, "ic_menu_add"); _ic_menu_addReady = true; } return _ic_menu_addContent; } }
            private static int _ic_menu_addContent = default;
            private static bool _ic_menu_addReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_agenda"/>
            /// </summary>
            public static int ic_menu_agenda { get { if (!_ic_menu_agendaReady) { _ic_menu_agendaContent = SGetField<int>(LocalBridgeClazz, "ic_menu_agenda"); _ic_menu_agendaReady = true; } return _ic_menu_agendaContent; } }
            private static int _ic_menu_agendaContent = default;
            private static bool _ic_menu_agendaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_always_landscape_portrait"/>
            /// </summary>
            public static int ic_menu_always_landscape_portrait { get { if (!_ic_menu_always_landscape_portraitReady) { _ic_menu_always_landscape_portraitContent = SGetField<int>(LocalBridgeClazz, "ic_menu_always_landscape_portrait"); _ic_menu_always_landscape_portraitReady = true; } return _ic_menu_always_landscape_portraitContent; } }
            private static int _ic_menu_always_landscape_portraitContent = default;
            private static bool _ic_menu_always_landscape_portraitReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_call"/>
            /// </summary>
            public static int ic_menu_call { get { if (!_ic_menu_callReady) { _ic_menu_callContent = SGetField<int>(LocalBridgeClazz, "ic_menu_call"); _ic_menu_callReady = true; } return _ic_menu_callContent; } }
            private static int _ic_menu_callContent = default;
            private static bool _ic_menu_callReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_camera"/>
            /// </summary>
            public static int ic_menu_camera { get { if (!_ic_menu_cameraReady) { _ic_menu_cameraContent = SGetField<int>(LocalBridgeClazz, "ic_menu_camera"); _ic_menu_cameraReady = true; } return _ic_menu_cameraContent; } }
            private static int _ic_menu_cameraContent = default;
            private static bool _ic_menu_cameraReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_close_clear_cancel"/>
            /// </summary>
            public static int ic_menu_close_clear_cancel { get { if (!_ic_menu_close_clear_cancelReady) { _ic_menu_close_clear_cancelContent = SGetField<int>(LocalBridgeClazz, "ic_menu_close_clear_cancel"); _ic_menu_close_clear_cancelReady = true; } return _ic_menu_close_clear_cancelContent; } }
            private static int _ic_menu_close_clear_cancelContent = default;
            private static bool _ic_menu_close_clear_cancelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_compass"/>
            /// </summary>
            public static int ic_menu_compass { get { if (!_ic_menu_compassReady) { _ic_menu_compassContent = SGetField<int>(LocalBridgeClazz, "ic_menu_compass"); _ic_menu_compassReady = true; } return _ic_menu_compassContent; } }
            private static int _ic_menu_compassContent = default;
            private static bool _ic_menu_compassReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_crop"/>
            /// </summary>
            public static int ic_menu_crop { get { if (!_ic_menu_cropReady) { _ic_menu_cropContent = SGetField<int>(LocalBridgeClazz, "ic_menu_crop"); _ic_menu_cropReady = true; } return _ic_menu_cropContent; } }
            private static int _ic_menu_cropContent = default;
            private static bool _ic_menu_cropReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_day"/>
            /// </summary>
            public static int ic_menu_day { get { if (!_ic_menu_dayReady) { _ic_menu_dayContent = SGetField<int>(LocalBridgeClazz, "ic_menu_day"); _ic_menu_dayReady = true; } return _ic_menu_dayContent; } }
            private static int _ic_menu_dayContent = default;
            private static bool _ic_menu_dayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_delete"/>
            /// </summary>
            public static int ic_menu_delete { get { if (!_ic_menu_deleteReady) { _ic_menu_deleteContent = SGetField<int>(LocalBridgeClazz, "ic_menu_delete"); _ic_menu_deleteReady = true; } return _ic_menu_deleteContent; } }
            private static int _ic_menu_deleteContent = default;
            private static bool _ic_menu_deleteReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_directions"/>
            /// </summary>
            public static int ic_menu_directions { get { if (!_ic_menu_directionsReady) { _ic_menu_directionsContent = SGetField<int>(LocalBridgeClazz, "ic_menu_directions"); _ic_menu_directionsReady = true; } return _ic_menu_directionsContent; } }
            private static int _ic_menu_directionsContent = default;
            private static bool _ic_menu_directionsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_edit"/>
            /// </summary>
            public static int ic_menu_edit { get { if (!_ic_menu_editReady) { _ic_menu_editContent = SGetField<int>(LocalBridgeClazz, "ic_menu_edit"); _ic_menu_editReady = true; } return _ic_menu_editContent; } }
            private static int _ic_menu_editContent = default;
            private static bool _ic_menu_editReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_gallery"/>
            /// </summary>
            public static int ic_menu_gallery { get { if (!_ic_menu_galleryReady) { _ic_menu_galleryContent = SGetField<int>(LocalBridgeClazz, "ic_menu_gallery"); _ic_menu_galleryReady = true; } return _ic_menu_galleryContent; } }
            private static int _ic_menu_galleryContent = default;
            private static bool _ic_menu_galleryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_help"/>
            /// </summary>
            public static int ic_menu_help { get { if (!_ic_menu_helpReady) { _ic_menu_helpContent = SGetField<int>(LocalBridgeClazz, "ic_menu_help"); _ic_menu_helpReady = true; } return _ic_menu_helpContent; } }
            private static int _ic_menu_helpContent = default;
            private static bool _ic_menu_helpReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_info_details"/>
            /// </summary>
            public static int ic_menu_info_details { get { if (!_ic_menu_info_detailsReady) { _ic_menu_info_detailsContent = SGetField<int>(LocalBridgeClazz, "ic_menu_info_details"); _ic_menu_info_detailsReady = true; } return _ic_menu_info_detailsContent; } }
            private static int _ic_menu_info_detailsContent = default;
            private static bool _ic_menu_info_detailsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_manage"/>
            /// </summary>
            public static int ic_menu_manage { get { if (!_ic_menu_manageReady) { _ic_menu_manageContent = SGetField<int>(LocalBridgeClazz, "ic_menu_manage"); _ic_menu_manageReady = true; } return _ic_menu_manageContent; } }
            private static int _ic_menu_manageContent = default;
            private static bool _ic_menu_manageReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_mapmode"/>
            /// </summary>
            public static int ic_menu_mapmode { get { if (!_ic_menu_mapmodeReady) { _ic_menu_mapmodeContent = SGetField<int>(LocalBridgeClazz, "ic_menu_mapmode"); _ic_menu_mapmodeReady = true; } return _ic_menu_mapmodeContent; } }
            private static int _ic_menu_mapmodeContent = default;
            private static bool _ic_menu_mapmodeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_month"/>
            /// </summary>
            public static int ic_menu_month { get { if (!_ic_menu_monthReady) { _ic_menu_monthContent = SGetField<int>(LocalBridgeClazz, "ic_menu_month"); _ic_menu_monthReady = true; } return _ic_menu_monthContent; } }
            private static int _ic_menu_monthContent = default;
            private static bool _ic_menu_monthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_more"/>
            /// </summary>
            public static int ic_menu_more { get { if (!_ic_menu_moreReady) { _ic_menu_moreContent = SGetField<int>(LocalBridgeClazz, "ic_menu_more"); _ic_menu_moreReady = true; } return _ic_menu_moreContent; } }
            private static int _ic_menu_moreContent = default;
            private static bool _ic_menu_moreReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_my_calendar"/>
            /// </summary>
            public static int ic_menu_my_calendar { get { if (!_ic_menu_my_calendarReady) { _ic_menu_my_calendarContent = SGetField<int>(LocalBridgeClazz, "ic_menu_my_calendar"); _ic_menu_my_calendarReady = true; } return _ic_menu_my_calendarContent; } }
            private static int _ic_menu_my_calendarContent = default;
            private static bool _ic_menu_my_calendarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_mylocation"/>
            /// </summary>
            public static int ic_menu_mylocation { get { if (!_ic_menu_mylocationReady) { _ic_menu_mylocationContent = SGetField<int>(LocalBridgeClazz, "ic_menu_mylocation"); _ic_menu_mylocationReady = true; } return _ic_menu_mylocationContent; } }
            private static int _ic_menu_mylocationContent = default;
            private static bool _ic_menu_mylocationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_myplaces"/>
            /// </summary>
            public static int ic_menu_myplaces { get { if (!_ic_menu_myplacesReady) { _ic_menu_myplacesContent = SGetField<int>(LocalBridgeClazz, "ic_menu_myplaces"); _ic_menu_myplacesReady = true; } return _ic_menu_myplacesContent; } }
            private static int _ic_menu_myplacesContent = default;
            private static bool _ic_menu_myplacesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_preferences"/>
            /// </summary>
            public static int ic_menu_preferences { get { if (!_ic_menu_preferencesReady) { _ic_menu_preferencesContent = SGetField<int>(LocalBridgeClazz, "ic_menu_preferences"); _ic_menu_preferencesReady = true; } return _ic_menu_preferencesContent; } }
            private static int _ic_menu_preferencesContent = default;
            private static bool _ic_menu_preferencesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_recent_history"/>
            /// </summary>
            public static int ic_menu_recent_history { get { if (!_ic_menu_recent_historyReady) { _ic_menu_recent_historyContent = SGetField<int>(LocalBridgeClazz, "ic_menu_recent_history"); _ic_menu_recent_historyReady = true; } return _ic_menu_recent_historyContent; } }
            private static int _ic_menu_recent_historyContent = default;
            private static bool _ic_menu_recent_historyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_report_image"/>
            /// </summary>
            public static int ic_menu_report_image { get { if (!_ic_menu_report_imageReady) { _ic_menu_report_imageContent = SGetField<int>(LocalBridgeClazz, "ic_menu_report_image"); _ic_menu_report_imageReady = true; } return _ic_menu_report_imageContent; } }
            private static int _ic_menu_report_imageContent = default;
            private static bool _ic_menu_report_imageReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_revert"/>
            /// </summary>
            public static int ic_menu_revert { get { if (!_ic_menu_revertReady) { _ic_menu_revertContent = SGetField<int>(LocalBridgeClazz, "ic_menu_revert"); _ic_menu_revertReady = true; } return _ic_menu_revertContent; } }
            private static int _ic_menu_revertContent = default;
            private static bool _ic_menu_revertReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_rotate"/>
            /// </summary>
            public static int ic_menu_rotate { get { if (!_ic_menu_rotateReady) { _ic_menu_rotateContent = SGetField<int>(LocalBridgeClazz, "ic_menu_rotate"); _ic_menu_rotateReady = true; } return _ic_menu_rotateContent; } }
            private static int _ic_menu_rotateContent = default;
            private static bool _ic_menu_rotateReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_save"/>
            /// </summary>
            public static int ic_menu_save { get { if (!_ic_menu_saveReady) { _ic_menu_saveContent = SGetField<int>(LocalBridgeClazz, "ic_menu_save"); _ic_menu_saveReady = true; } return _ic_menu_saveContent; } }
            private static int _ic_menu_saveContent = default;
            private static bool _ic_menu_saveReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_search"/>
            /// </summary>
            public static int ic_menu_search { get { if (!_ic_menu_searchReady) { _ic_menu_searchContent = SGetField<int>(LocalBridgeClazz, "ic_menu_search"); _ic_menu_searchReady = true; } return _ic_menu_searchContent; } }
            private static int _ic_menu_searchContent = default;
            private static bool _ic_menu_searchReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_send"/>
            /// </summary>
            public static int ic_menu_send { get { if (!_ic_menu_sendReady) { _ic_menu_sendContent = SGetField<int>(LocalBridgeClazz, "ic_menu_send"); _ic_menu_sendReady = true; } return _ic_menu_sendContent; } }
            private static int _ic_menu_sendContent = default;
            private static bool _ic_menu_sendReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_set_as"/>
            /// </summary>
            public static int ic_menu_set_as { get { if (!_ic_menu_set_asReady) { _ic_menu_set_asContent = SGetField<int>(LocalBridgeClazz, "ic_menu_set_as"); _ic_menu_set_asReady = true; } return _ic_menu_set_asContent; } }
            private static int _ic_menu_set_asContent = default;
            private static bool _ic_menu_set_asReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_share"/>
            /// </summary>
            public static int ic_menu_share { get { if (!_ic_menu_shareReady) { _ic_menu_shareContent = SGetField<int>(LocalBridgeClazz, "ic_menu_share"); _ic_menu_shareReady = true; } return _ic_menu_shareContent; } }
            private static int _ic_menu_shareContent = default;
            private static bool _ic_menu_shareReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_slideshow"/>
            /// </summary>
            public static int ic_menu_slideshow { get { if (!_ic_menu_slideshowReady) { _ic_menu_slideshowContent = SGetField<int>(LocalBridgeClazz, "ic_menu_slideshow"); _ic_menu_slideshowReady = true; } return _ic_menu_slideshowContent; } }
            private static int _ic_menu_slideshowContent = default;
            private static bool _ic_menu_slideshowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_sort_alphabetically"/>
            /// </summary>
            public static int ic_menu_sort_alphabetically { get { if (!_ic_menu_sort_alphabeticallyReady) { _ic_menu_sort_alphabeticallyContent = SGetField<int>(LocalBridgeClazz, "ic_menu_sort_alphabetically"); _ic_menu_sort_alphabeticallyReady = true; } return _ic_menu_sort_alphabeticallyContent; } }
            private static int _ic_menu_sort_alphabeticallyContent = default;
            private static bool _ic_menu_sort_alphabeticallyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_sort_by_size"/>
            /// </summary>
            public static int ic_menu_sort_by_size { get { if (!_ic_menu_sort_by_sizeReady) { _ic_menu_sort_by_sizeContent = SGetField<int>(LocalBridgeClazz, "ic_menu_sort_by_size"); _ic_menu_sort_by_sizeReady = true; } return _ic_menu_sort_by_sizeContent; } }
            private static int _ic_menu_sort_by_sizeContent = default;
            private static bool _ic_menu_sort_by_sizeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_today"/>
            /// </summary>
            public static int ic_menu_today { get { if (!_ic_menu_todayReady) { _ic_menu_todayContent = SGetField<int>(LocalBridgeClazz, "ic_menu_today"); _ic_menu_todayReady = true; } return _ic_menu_todayContent; } }
            private static int _ic_menu_todayContent = default;
            private static bool _ic_menu_todayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_upload"/>
            /// </summary>
            public static int ic_menu_upload { get { if (!_ic_menu_uploadReady) { _ic_menu_uploadContent = SGetField<int>(LocalBridgeClazz, "ic_menu_upload"); _ic_menu_uploadReady = true; } return _ic_menu_uploadContent; } }
            private static int _ic_menu_uploadContent = default;
            private static bool _ic_menu_uploadReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_upload_you_tube"/>
            /// </summary>
            public static int ic_menu_upload_you_tube { get { if (!_ic_menu_upload_you_tubeReady) { _ic_menu_upload_you_tubeContent = SGetField<int>(LocalBridgeClazz, "ic_menu_upload_you_tube"); _ic_menu_upload_you_tubeReady = true; } return _ic_menu_upload_you_tubeContent; } }
            private static int _ic_menu_upload_you_tubeContent = default;
            private static bool _ic_menu_upload_you_tubeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_view"/>
            /// </summary>
            public static int ic_menu_view { get { if (!_ic_menu_viewReady) { _ic_menu_viewContent = SGetField<int>(LocalBridgeClazz, "ic_menu_view"); _ic_menu_viewReady = true; } return _ic_menu_viewContent; } }
            private static int _ic_menu_viewContent = default;
            private static bool _ic_menu_viewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_week"/>
            /// </summary>
            public static int ic_menu_week { get { if (!_ic_menu_weekReady) { _ic_menu_weekContent = SGetField<int>(LocalBridgeClazz, "ic_menu_week"); _ic_menu_weekReady = true; } return _ic_menu_weekContent; } }
            private static int _ic_menu_weekContent = default;
            private static bool _ic_menu_weekReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_menu_zoom"/>
            /// </summary>
            public static int ic_menu_zoom { get { if (!_ic_menu_zoomReady) { _ic_menu_zoomContent = SGetField<int>(LocalBridgeClazz, "ic_menu_zoom"); _ic_menu_zoomReady = true; } return _ic_menu_zoomContent; } }
            private static int _ic_menu_zoomContent = default;
            private static bool _ic_menu_zoomReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_notification_clear_all"/>
            /// </summary>
            public static int ic_notification_clear_all { get { if (!_ic_notification_clear_allReady) { _ic_notification_clear_allContent = SGetField<int>(LocalBridgeClazz, "ic_notification_clear_all"); _ic_notification_clear_allReady = true; } return _ic_notification_clear_allContent; } }
            private static int _ic_notification_clear_allContent = default;
            private static bool _ic_notification_clear_allReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_notification_overlay"/>
            /// </summary>
            public static int ic_notification_overlay { get { if (!_ic_notification_overlayReady) { _ic_notification_overlayContent = SGetField<int>(LocalBridgeClazz, "ic_notification_overlay"); _ic_notification_overlayReady = true; } return _ic_notification_overlayContent; } }
            private static int _ic_notification_overlayContent = default;
            private static bool _ic_notification_overlayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_partial_secure"/>
            /// </summary>
            public static int ic_partial_secure { get { if (!_ic_partial_secureReady) { _ic_partial_secureContent = SGetField<int>(LocalBridgeClazz, "ic_partial_secure"); _ic_partial_secureReady = true; } return _ic_partial_secureContent; } }
            private static int _ic_partial_secureContent = default;
            private static bool _ic_partial_secureReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_popup_disk_full"/>
            /// </summary>
            public static int ic_popup_disk_full { get { if (!_ic_popup_disk_fullReady) { _ic_popup_disk_fullContent = SGetField<int>(LocalBridgeClazz, "ic_popup_disk_full"); _ic_popup_disk_fullReady = true; } return _ic_popup_disk_fullContent; } }
            private static int _ic_popup_disk_fullContent = default;
            private static bool _ic_popup_disk_fullReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_popup_reminder"/>
            /// </summary>
            public static int ic_popup_reminder { get { if (!_ic_popup_reminderReady) { _ic_popup_reminderContent = SGetField<int>(LocalBridgeClazz, "ic_popup_reminder"); _ic_popup_reminderReady = true; } return _ic_popup_reminderContent; } }
            private static int _ic_popup_reminderContent = default;
            private static bool _ic_popup_reminderReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_popup_sync"/>
            /// </summary>
            public static int ic_popup_sync { get { if (!_ic_popup_syncReady) { _ic_popup_syncContent = SGetField<int>(LocalBridgeClazz, "ic_popup_sync"); _ic_popup_syncReady = true; } return _ic_popup_syncContent; } }
            private static int _ic_popup_syncContent = default;
            private static bool _ic_popup_syncReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_search_category_default"/>
            /// </summary>
            public static int ic_search_category_default { get { if (!_ic_search_category_defaultReady) { _ic_search_category_defaultContent = SGetField<int>(LocalBridgeClazz, "ic_search_category_default"); _ic_search_category_defaultReady = true; } return _ic_search_category_defaultContent; } }
            private static int _ic_search_category_defaultContent = default;
            private static bool _ic_search_category_defaultReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#ic_secure"/>
            /// </summary>
            public static int ic_secure { get { if (!_ic_secureReady) { _ic_secureContent = SGetField<int>(LocalBridgeClazz, "ic_secure"); _ic_secureReady = true; } return _ic_secureContent; } }
            private static int _ic_secureContent = default;
            private static bool _ic_secureReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#list_selector_background"/>
            /// </summary>
            public static int list_selector_background { get { if (!_list_selector_backgroundReady) { _list_selector_backgroundContent = SGetField<int>(LocalBridgeClazz, "list_selector_background"); _list_selector_backgroundReady = true; } return _list_selector_backgroundContent; } }
            private static int _list_selector_backgroundContent = default;
            private static bool _list_selector_backgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#menu_frame"/>
            /// </summary>
            public static int menu_frame { get { if (!_menu_frameReady) { _menu_frameContent = SGetField<int>(LocalBridgeClazz, "menu_frame"); _menu_frameReady = true; } return _menu_frameContent; } }
            private static int _menu_frameContent = default;
            private static bool _menu_frameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#menu_full_frame"/>
            /// </summary>
            public static int menu_full_frame { get { if (!_menu_full_frameReady) { _menu_full_frameContent = SGetField<int>(LocalBridgeClazz, "menu_full_frame"); _menu_full_frameReady = true; } return _menu_full_frameContent; } }
            private static int _menu_full_frameContent = default;
            private static bool _menu_full_frameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#menuitem_background"/>
            /// </summary>
            public static int menuitem_background { get { if (!_menuitem_backgroundReady) { _menuitem_backgroundContent = SGetField<int>(LocalBridgeClazz, "menuitem_background"); _menuitem_backgroundReady = true; } return _menuitem_backgroundContent; } }
            private static int _menuitem_backgroundContent = default;
            private static bool _menuitem_backgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#picture_frame"/>
            /// </summary>
            public static int picture_frame { get { if (!_picture_frameReady) { _picture_frameContent = SGetField<int>(LocalBridgeClazz, "picture_frame"); _picture_frameReady = true; } return _picture_frameContent; } }
            private static int _picture_frameContent = default;
            private static bool _picture_frameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#presence_audio_away"/>
            /// </summary>
            public static int presence_audio_away { get { if (!_presence_audio_awayReady) { _presence_audio_awayContent = SGetField<int>(LocalBridgeClazz, "presence_audio_away"); _presence_audio_awayReady = true; } return _presence_audio_awayContent; } }
            private static int _presence_audio_awayContent = default;
            private static bool _presence_audio_awayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#presence_audio_busy"/>
            /// </summary>
            public static int presence_audio_busy { get { if (!_presence_audio_busyReady) { _presence_audio_busyContent = SGetField<int>(LocalBridgeClazz, "presence_audio_busy"); _presence_audio_busyReady = true; } return _presence_audio_busyContent; } }
            private static int _presence_audio_busyContent = default;
            private static bool _presence_audio_busyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#presence_audio_online"/>
            /// </summary>
            public static int presence_audio_online { get { if (!_presence_audio_onlineReady) { _presence_audio_onlineContent = SGetField<int>(LocalBridgeClazz, "presence_audio_online"); _presence_audio_onlineReady = true; } return _presence_audio_onlineContent; } }
            private static int _presence_audio_onlineContent = default;
            private static bool _presence_audio_onlineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#presence_away"/>
            /// </summary>
            public static int presence_away { get { if (!_presence_awayReady) { _presence_awayContent = SGetField<int>(LocalBridgeClazz, "presence_away"); _presence_awayReady = true; } return _presence_awayContent; } }
            private static int _presence_awayContent = default;
            private static bool _presence_awayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#presence_busy"/>
            /// </summary>
            public static int presence_busy { get { if (!_presence_busyReady) { _presence_busyContent = SGetField<int>(LocalBridgeClazz, "presence_busy"); _presence_busyReady = true; } return _presence_busyContent; } }
            private static int _presence_busyContent = default;
            private static bool _presence_busyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#presence_invisible"/>
            /// </summary>
            public static int presence_invisible { get { if (!_presence_invisibleReady) { _presence_invisibleContent = SGetField<int>(LocalBridgeClazz, "presence_invisible"); _presence_invisibleReady = true; } return _presence_invisibleContent; } }
            private static int _presence_invisibleContent = default;
            private static bool _presence_invisibleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#presence_offline"/>
            /// </summary>
            public static int presence_offline { get { if (!_presence_offlineReady) { _presence_offlineContent = SGetField<int>(LocalBridgeClazz, "presence_offline"); _presence_offlineReady = true; } return _presence_offlineContent; } }
            private static int _presence_offlineContent = default;
            private static bool _presence_offlineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#presence_online"/>
            /// </summary>
            public static int presence_online { get { if (!_presence_onlineReady) { _presence_onlineContent = SGetField<int>(LocalBridgeClazz, "presence_online"); _presence_onlineReady = true; } return _presence_onlineContent; } }
            private static int _presence_onlineContent = default;
            private static bool _presence_onlineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#presence_video_away"/>
            /// </summary>
            public static int presence_video_away { get { if (!_presence_video_awayReady) { _presence_video_awayContent = SGetField<int>(LocalBridgeClazz, "presence_video_away"); _presence_video_awayReady = true; } return _presence_video_awayContent; } }
            private static int _presence_video_awayContent = default;
            private static bool _presence_video_awayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#presence_video_busy"/>
            /// </summary>
            public static int presence_video_busy { get { if (!_presence_video_busyReady) { _presence_video_busyContent = SGetField<int>(LocalBridgeClazz, "presence_video_busy"); _presence_video_busyReady = true; } return _presence_video_busyContent; } }
            private static int _presence_video_busyContent = default;
            private static bool _presence_video_busyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#presence_video_online"/>
            /// </summary>
            public static int presence_video_online { get { if (!_presence_video_onlineReady) { _presence_video_onlineContent = SGetField<int>(LocalBridgeClazz, "presence_video_online"); _presence_video_onlineReady = true; } return _presence_video_onlineContent; } }
            private static int _presence_video_onlineContent = default;
            private static bool _presence_video_onlineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#progress_horizontal"/>
            /// </summary>
            public static int progress_horizontal { get { if (!_progress_horizontalReady) { _progress_horizontalContent = SGetField<int>(LocalBridgeClazz, "progress_horizontal"); _progress_horizontalReady = true; } return _progress_horizontalContent; } }
            private static int _progress_horizontalContent = default;
            private static bool _progress_horizontalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#progress_indeterminate_horizontal"/>
            /// </summary>
            public static int progress_indeterminate_horizontal { get { if (!_progress_indeterminate_horizontalReady) { _progress_indeterminate_horizontalContent = SGetField<int>(LocalBridgeClazz, "progress_indeterminate_horizontal"); _progress_indeterminate_horizontalReady = true; } return _progress_indeterminate_horizontalContent; } }
            private static int _progress_indeterminate_horizontalContent = default;
            private static bool _progress_indeterminate_horizontalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#radiobutton_off_background"/>
            /// </summary>
            public static int radiobutton_off_background { get { if (!_radiobutton_off_backgroundReady) { _radiobutton_off_backgroundContent = SGetField<int>(LocalBridgeClazz, "radiobutton_off_background"); _radiobutton_off_backgroundReady = true; } return _radiobutton_off_backgroundContent; } }
            private static int _radiobutton_off_backgroundContent = default;
            private static bool _radiobutton_off_backgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#radiobutton_on_background"/>
            /// </summary>
            public static int radiobutton_on_background { get { if (!_radiobutton_on_backgroundReady) { _radiobutton_on_backgroundContent = SGetField<int>(LocalBridgeClazz, "radiobutton_on_background"); _radiobutton_on_backgroundReady = true; } return _radiobutton_on_backgroundContent; } }
            private static int _radiobutton_on_backgroundContent = default;
            private static bool _radiobutton_on_backgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#screen_background_dark"/>
            /// </summary>
            public static int screen_background_dark { get { if (!_screen_background_darkReady) { _screen_background_darkContent = SGetField<int>(LocalBridgeClazz, "screen_background_dark"); _screen_background_darkReady = true; } return _screen_background_darkContent; } }
            private static int _screen_background_darkContent = default;
            private static bool _screen_background_darkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#screen_background_dark_transparent"/>
            /// </summary>
            public static int screen_background_dark_transparent { get { if (!_screen_background_dark_transparentReady) { _screen_background_dark_transparentContent = SGetField<int>(LocalBridgeClazz, "screen_background_dark_transparent"); _screen_background_dark_transparentReady = true; } return _screen_background_dark_transparentContent; } }
            private static int _screen_background_dark_transparentContent = default;
            private static bool _screen_background_dark_transparentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#screen_background_light"/>
            /// </summary>
            public static int screen_background_light { get { if (!_screen_background_lightReady) { _screen_background_lightContent = SGetField<int>(LocalBridgeClazz, "screen_background_light"); _screen_background_lightReady = true; } return _screen_background_lightContent; } }
            private static int _screen_background_lightContent = default;
            private static bool _screen_background_lightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#screen_background_light_transparent"/>
            /// </summary>
            public static int screen_background_light_transparent { get { if (!_screen_background_light_transparentReady) { _screen_background_light_transparentContent = SGetField<int>(LocalBridgeClazz, "screen_background_light_transparent"); _screen_background_light_transparentReady = true; } return _screen_background_light_transparentContent; } }
            private static int _screen_background_light_transparentContent = default;
            private static bool _screen_background_light_transparentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#spinner_background"/>
            /// </summary>
            public static int spinner_background { get { if (!_spinner_backgroundReady) { _spinner_backgroundContent = SGetField<int>(LocalBridgeClazz, "spinner_background"); _spinner_backgroundReady = true; } return _spinner_backgroundContent; } }
            private static int _spinner_backgroundContent = default;
            private static bool _spinner_backgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#spinner_dropdown_background"/>
            /// </summary>
            public static int spinner_dropdown_background { get { if (!_spinner_dropdown_backgroundReady) { _spinner_dropdown_backgroundContent = SGetField<int>(LocalBridgeClazz, "spinner_dropdown_background"); _spinner_dropdown_backgroundReady = true; } return _spinner_dropdown_backgroundContent; } }
            private static int _spinner_dropdown_backgroundContent = default;
            private static bool _spinner_dropdown_backgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#star_big_off"/>
            /// </summary>
            public static int star_big_off { get { if (!_star_big_offReady) { _star_big_offContent = SGetField<int>(LocalBridgeClazz, "star_big_off"); _star_big_offReady = true; } return _star_big_offContent; } }
            private static int _star_big_offContent = default;
            private static bool _star_big_offReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#star_big_on"/>
            /// </summary>
            public static int star_big_on { get { if (!_star_big_onReady) { _star_big_onContent = SGetField<int>(LocalBridgeClazz, "star_big_on"); _star_big_onReady = true; } return _star_big_onContent; } }
            private static int _star_big_onContent = default;
            private static bool _star_big_onReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#star_off"/>
            /// </summary>
            public static int star_off { get { if (!_star_offReady) { _star_offContent = SGetField<int>(LocalBridgeClazz, "star_off"); _star_offReady = true; } return _star_offContent; } }
            private static int _star_offContent = default;
            private static bool _star_offReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#star_on"/>
            /// </summary>
            public static int star_on { get { if (!_star_onReady) { _star_onContent = SGetField<int>(LocalBridgeClazz, "star_on"); _star_onReady = true; } return _star_onContent; } }
            private static int _star_onContent = default;
            private static bool _star_onReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_notify_call_mute"/>
            /// </summary>
            public static int stat_notify_call_mute { get { if (!_stat_notify_call_muteReady) { _stat_notify_call_muteContent = SGetField<int>(LocalBridgeClazz, "stat_notify_call_mute"); _stat_notify_call_muteReady = true; } return _stat_notify_call_muteContent; } }
            private static int _stat_notify_call_muteContent = default;
            private static bool _stat_notify_call_muteReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_notify_chat"/>
            /// </summary>
            public static int stat_notify_chat { get { if (!_stat_notify_chatReady) { _stat_notify_chatContent = SGetField<int>(LocalBridgeClazz, "stat_notify_chat"); _stat_notify_chatReady = true; } return _stat_notify_chatContent; } }
            private static int _stat_notify_chatContent = default;
            private static bool _stat_notify_chatReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_notify_error"/>
            /// </summary>
            public static int stat_notify_error { get { if (!_stat_notify_errorReady) { _stat_notify_errorContent = SGetField<int>(LocalBridgeClazz, "stat_notify_error"); _stat_notify_errorReady = true; } return _stat_notify_errorContent; } }
            private static int _stat_notify_errorContent = default;
            private static bool _stat_notify_errorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_notify_missed_call"/>
            /// </summary>
            public static int stat_notify_missed_call { get { if (!_stat_notify_missed_callReady) { _stat_notify_missed_callContent = SGetField<int>(LocalBridgeClazz, "stat_notify_missed_call"); _stat_notify_missed_callReady = true; } return _stat_notify_missed_callContent; } }
            private static int _stat_notify_missed_callContent = default;
            private static bool _stat_notify_missed_callReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_notify_more"/>
            /// </summary>
            public static int stat_notify_more { get { if (!_stat_notify_moreReady) { _stat_notify_moreContent = SGetField<int>(LocalBridgeClazz, "stat_notify_more"); _stat_notify_moreReady = true; } return _stat_notify_moreContent; } }
            private static int _stat_notify_moreContent = default;
            private static bool _stat_notify_moreReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_notify_sdcard"/>
            /// </summary>
            public static int stat_notify_sdcard { get { if (!_stat_notify_sdcardReady) { _stat_notify_sdcardContent = SGetField<int>(LocalBridgeClazz, "stat_notify_sdcard"); _stat_notify_sdcardReady = true; } return _stat_notify_sdcardContent; } }
            private static int _stat_notify_sdcardContent = default;
            private static bool _stat_notify_sdcardReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_notify_sdcard_prepare"/>
            /// </summary>
            public static int stat_notify_sdcard_prepare { get { if (!_stat_notify_sdcard_prepareReady) { _stat_notify_sdcard_prepareContent = SGetField<int>(LocalBridgeClazz, "stat_notify_sdcard_prepare"); _stat_notify_sdcard_prepareReady = true; } return _stat_notify_sdcard_prepareContent; } }
            private static int _stat_notify_sdcard_prepareContent = default;
            private static bool _stat_notify_sdcard_prepareReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_notify_sdcard_usb"/>
            /// </summary>
            public static int stat_notify_sdcard_usb { get { if (!_stat_notify_sdcard_usbReady) { _stat_notify_sdcard_usbContent = SGetField<int>(LocalBridgeClazz, "stat_notify_sdcard_usb"); _stat_notify_sdcard_usbReady = true; } return _stat_notify_sdcard_usbContent; } }
            private static int _stat_notify_sdcard_usbContent = default;
            private static bool _stat_notify_sdcard_usbReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_notify_sync"/>
            /// </summary>
            public static int stat_notify_sync { get { if (!_stat_notify_syncReady) { _stat_notify_syncContent = SGetField<int>(LocalBridgeClazz, "stat_notify_sync"); _stat_notify_syncReady = true; } return _stat_notify_syncContent; } }
            private static int _stat_notify_syncContent = default;
            private static bool _stat_notify_syncReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_notify_sync_noanim"/>
            /// </summary>
            public static int stat_notify_sync_noanim { get { if (!_stat_notify_sync_noanimReady) { _stat_notify_sync_noanimContent = SGetField<int>(LocalBridgeClazz, "stat_notify_sync_noanim"); _stat_notify_sync_noanimReady = true; } return _stat_notify_sync_noanimContent; } }
            private static int _stat_notify_sync_noanimContent = default;
            private static bool _stat_notify_sync_noanimReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_notify_voicemail"/>
            /// </summary>
            public static int stat_notify_voicemail { get { if (!_stat_notify_voicemailReady) { _stat_notify_voicemailContent = SGetField<int>(LocalBridgeClazz, "stat_notify_voicemail"); _stat_notify_voicemailReady = true; } return _stat_notify_voicemailContent; } }
            private static int _stat_notify_voicemailContent = default;
            private static bool _stat_notify_voicemailReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_sys_data_bluetooth"/>
            /// </summary>
            public static int stat_sys_data_bluetooth { get { if (!_stat_sys_data_bluetoothReady) { _stat_sys_data_bluetoothContent = SGetField<int>(LocalBridgeClazz, "stat_sys_data_bluetooth"); _stat_sys_data_bluetoothReady = true; } return _stat_sys_data_bluetoothContent; } }
            private static int _stat_sys_data_bluetoothContent = default;
            private static bool _stat_sys_data_bluetoothReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_sys_download"/>
            /// </summary>
            public static int stat_sys_download { get { if (!_stat_sys_downloadReady) { _stat_sys_downloadContent = SGetField<int>(LocalBridgeClazz, "stat_sys_download"); _stat_sys_downloadReady = true; } return _stat_sys_downloadContent; } }
            private static int _stat_sys_downloadContent = default;
            private static bool _stat_sys_downloadReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_sys_download_done"/>
            /// </summary>
            public static int stat_sys_download_done { get { if (!_stat_sys_download_doneReady) { _stat_sys_download_doneContent = SGetField<int>(LocalBridgeClazz, "stat_sys_download_done"); _stat_sys_download_doneReady = true; } return _stat_sys_download_doneContent; } }
            private static int _stat_sys_download_doneContent = default;
            private static bool _stat_sys_download_doneReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_sys_headset"/>
            /// </summary>
            public static int stat_sys_headset { get { if (!_stat_sys_headsetReady) { _stat_sys_headsetContent = SGetField<int>(LocalBridgeClazz, "stat_sys_headset"); _stat_sys_headsetReady = true; } return _stat_sys_headsetContent; } }
            private static int _stat_sys_headsetContent = default;
            private static bool _stat_sys_headsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_sys_phone_call"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int stat_sys_phone_call { get { if (!_stat_sys_phone_callReady) { _stat_sys_phone_callContent = SGetField<int>(LocalBridgeClazz, "stat_sys_phone_call"); _stat_sys_phone_callReady = true; } return _stat_sys_phone_callContent; } }
            private static int _stat_sys_phone_callContent = default;
            private static bool _stat_sys_phone_callReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_sys_phone_call_forward"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int stat_sys_phone_call_forward { get { if (!_stat_sys_phone_call_forwardReady) { _stat_sys_phone_call_forwardContent = SGetField<int>(LocalBridgeClazz, "stat_sys_phone_call_forward"); _stat_sys_phone_call_forwardReady = true; } return _stat_sys_phone_call_forwardContent; } }
            private static int _stat_sys_phone_call_forwardContent = default;
            private static bool _stat_sys_phone_call_forwardReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_sys_phone_call_on_hold"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int stat_sys_phone_call_on_hold { get { if (!_stat_sys_phone_call_on_holdReady) { _stat_sys_phone_call_on_holdContent = SGetField<int>(LocalBridgeClazz, "stat_sys_phone_call_on_hold"); _stat_sys_phone_call_on_holdReady = true; } return _stat_sys_phone_call_on_holdContent; } }
            private static int _stat_sys_phone_call_on_holdContent = default;
            private static bool _stat_sys_phone_call_on_holdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_sys_speakerphone"/>
            /// </summary>
            public static int stat_sys_speakerphone { get { if (!_stat_sys_speakerphoneReady) { _stat_sys_speakerphoneContent = SGetField<int>(LocalBridgeClazz, "stat_sys_speakerphone"); _stat_sys_speakerphoneReady = true; } return _stat_sys_speakerphoneContent; } }
            private static int _stat_sys_speakerphoneContent = default;
            private static bool _stat_sys_speakerphoneReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_sys_upload"/>
            /// </summary>
            public static int stat_sys_upload { get { if (!_stat_sys_uploadReady) { _stat_sys_uploadContent = SGetField<int>(LocalBridgeClazz, "stat_sys_upload"); _stat_sys_uploadReady = true; } return _stat_sys_uploadContent; } }
            private static int _stat_sys_uploadContent = default;
            private static bool _stat_sys_uploadReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_sys_upload_done"/>
            /// </summary>
            public static int stat_sys_upload_done { get { if (!_stat_sys_upload_doneReady) { _stat_sys_upload_doneContent = SGetField<int>(LocalBridgeClazz, "stat_sys_upload_done"); _stat_sys_upload_doneReady = true; } return _stat_sys_upload_doneContent; } }
            private static int _stat_sys_upload_doneContent = default;
            private static bool _stat_sys_upload_doneReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_sys_vp_phone_call"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int stat_sys_vp_phone_call { get { if (!_stat_sys_vp_phone_callReady) { _stat_sys_vp_phone_callContent = SGetField<int>(LocalBridgeClazz, "stat_sys_vp_phone_call"); _stat_sys_vp_phone_callReady = true; } return _stat_sys_vp_phone_callContent; } }
            private static int _stat_sys_vp_phone_callContent = default;
            private static bool _stat_sys_vp_phone_callReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_sys_vp_phone_call_on_hold"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int stat_sys_vp_phone_call_on_hold { get { if (!_stat_sys_vp_phone_call_on_holdReady) { _stat_sys_vp_phone_call_on_holdContent = SGetField<int>(LocalBridgeClazz, "stat_sys_vp_phone_call_on_hold"); _stat_sys_vp_phone_call_on_holdReady = true; } return _stat_sys_vp_phone_call_on_holdContent; } }
            private static int _stat_sys_vp_phone_call_on_holdContent = default;
            private static bool _stat_sys_vp_phone_call_on_holdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#stat_sys_warning"/>
            /// </summary>
            public static int stat_sys_warning { get { if (!_stat_sys_warningReady) { _stat_sys_warningContent = SGetField<int>(LocalBridgeClazz, "stat_sys_warning"); _stat_sys_warningReady = true; } return _stat_sys_warningContent; } }
            private static int _stat_sys_warningContent = default;
            private static bool _stat_sys_warningReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#status_bar_item_app_background"/>
            /// </summary>
            public static int status_bar_item_app_background { get { if (!_status_bar_item_app_backgroundReady) { _status_bar_item_app_backgroundContent = SGetField<int>(LocalBridgeClazz, "status_bar_item_app_background"); _status_bar_item_app_backgroundReady = true; } return _status_bar_item_app_backgroundContent; } }
            private static int _status_bar_item_app_backgroundContent = default;
            private static bool _status_bar_item_app_backgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#status_bar_item_background"/>
            /// </summary>
            public static int status_bar_item_background { get { if (!_status_bar_item_backgroundReady) { _status_bar_item_backgroundContent = SGetField<int>(LocalBridgeClazz, "status_bar_item_background"); _status_bar_item_backgroundReady = true; } return _status_bar_item_backgroundContent; } }
            private static int _status_bar_item_backgroundContent = default;
            private static bool _status_bar_item_backgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#sym_action_call"/>
            /// </summary>
            public static int sym_action_call { get { if (!_sym_action_callReady) { _sym_action_callContent = SGetField<int>(LocalBridgeClazz, "sym_action_call"); _sym_action_callReady = true; } return _sym_action_callContent; } }
            private static int _sym_action_callContent = default;
            private static bool _sym_action_callReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#sym_action_chat"/>
            /// </summary>
            public static int sym_action_chat { get { if (!_sym_action_chatReady) { _sym_action_chatContent = SGetField<int>(LocalBridgeClazz, "sym_action_chat"); _sym_action_chatReady = true; } return _sym_action_chatContent; } }
            private static int _sym_action_chatContent = default;
            private static bool _sym_action_chatReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#sym_action_email"/>
            /// </summary>
            public static int sym_action_email { get { if (!_sym_action_emailReady) { _sym_action_emailContent = SGetField<int>(LocalBridgeClazz, "sym_action_email"); _sym_action_emailReady = true; } return _sym_action_emailContent; } }
            private static int _sym_action_emailContent = default;
            private static bool _sym_action_emailReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#sym_call_incoming"/>
            /// </summary>
            public static int sym_call_incoming { get { if (!_sym_call_incomingReady) { _sym_call_incomingContent = SGetField<int>(LocalBridgeClazz, "sym_call_incoming"); _sym_call_incomingReady = true; } return _sym_call_incomingContent; } }
            private static int _sym_call_incomingContent = default;
            private static bool _sym_call_incomingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#sym_call_missed"/>
            /// </summary>
            public static int sym_call_missed { get { if (!_sym_call_missedReady) { _sym_call_missedContent = SGetField<int>(LocalBridgeClazz, "sym_call_missed"); _sym_call_missedReady = true; } return _sym_call_missedContent; } }
            private static int _sym_call_missedContent = default;
            private static bool _sym_call_missedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#sym_call_outgoing"/>
            /// </summary>
            public static int sym_call_outgoing { get { if (!_sym_call_outgoingReady) { _sym_call_outgoingContent = SGetField<int>(LocalBridgeClazz, "sym_call_outgoing"); _sym_call_outgoingReady = true; } return _sym_call_outgoingContent; } }
            private static int _sym_call_outgoingContent = default;
            private static bool _sym_call_outgoingReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#sym_contact_card"/>
            /// </summary>
            public static int sym_contact_card { get { if (!_sym_contact_cardReady) { _sym_contact_cardContent = SGetField<int>(LocalBridgeClazz, "sym_contact_card"); _sym_contact_cardReady = true; } return _sym_contact_cardContent; } }
            private static int _sym_contact_cardContent = default;
            private static bool _sym_contact_cardReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#sym_def_app_icon"/>
            /// </summary>
            public static int sym_def_app_icon { get { if (!_sym_def_app_iconReady) { _sym_def_app_iconContent = SGetField<int>(LocalBridgeClazz, "sym_def_app_icon"); _sym_def_app_iconReady = true; } return _sym_def_app_iconContent; } }
            private static int _sym_def_app_iconContent = default;
            private static bool _sym_def_app_iconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#title_bar"/>
            /// </summary>
            public static int title_bar { get { if (!_title_barReady) { _title_barContent = SGetField<int>(LocalBridgeClazz, "title_bar"); _title_barReady = true; } return _title_barContent; } }
            private static int _title_barContent = default;
            private static bool _title_barReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#title_bar_tall"/>
            /// </summary>
            public static int title_bar_tall { get { if (!_title_bar_tallReady) { _title_bar_tallContent = SGetField<int>(LocalBridgeClazz, "title_bar_tall"); _title_bar_tallReady = true; } return _title_bar_tallContent; } }
            private static int _title_bar_tallContent = default;
            private static bool _title_bar_tallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#toast_frame"/>
            /// </summary>
            public static int toast_frame { get { if (!_toast_frameReady) { _toast_frameContent = SGetField<int>(LocalBridgeClazz, "toast_frame"); _toast_frameReady = true; } return _toast_frameContent; } }
            private static int _toast_frameContent = default;
            private static bool _toast_frameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.drawable.html#zoom_plate"/>
            /// </summary>
            public static int zoom_plate { get { if (!_zoom_plateReady) { _zoom_plateContent = SGetField<int>(LocalBridgeClazz, "zoom_plate"); _zoom_plateReady = true; } return _zoom_plateContent; } }
            private static int _zoom_plateContent = default;
            private static bool _zoom_plateReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region fraction
        public partial class fraction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region id
        public partial class id
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionContextClick"/>
            /// </summary>
            public static int accessibilityActionContextClick { get { if (!_accessibilityActionContextClickReady) { _accessibilityActionContextClickContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionContextClick"); _accessibilityActionContextClickReady = true; } return _accessibilityActionContextClickContent; } }
            private static int _accessibilityActionContextClickContent = default;
            private static bool _accessibilityActionContextClickReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionDragCancel"/>
            /// </summary>
            public static int accessibilityActionDragCancel { get { if (!_accessibilityActionDragCancelReady) { _accessibilityActionDragCancelContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionDragCancel"); _accessibilityActionDragCancelReady = true; } return _accessibilityActionDragCancelContent; } }
            private static int _accessibilityActionDragCancelContent = default;
            private static bool _accessibilityActionDragCancelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionDragDrop"/>
            /// </summary>
            public static int accessibilityActionDragDrop { get { if (!_accessibilityActionDragDropReady) { _accessibilityActionDragDropContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionDragDrop"); _accessibilityActionDragDropReady = true; } return _accessibilityActionDragDropContent; } }
            private static int _accessibilityActionDragDropContent = default;
            private static bool _accessibilityActionDragDropReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionDragStart"/>
            /// </summary>
            public static int accessibilityActionDragStart { get { if (!_accessibilityActionDragStartReady) { _accessibilityActionDragStartContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionDragStart"); _accessibilityActionDragStartReady = true; } return _accessibilityActionDragStartContent; } }
            private static int _accessibilityActionDragStartContent = default;
            private static bool _accessibilityActionDragStartReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionHideTooltip"/>
            /// </summary>
            public static int accessibilityActionHideTooltip { get { if (!_accessibilityActionHideTooltipReady) { _accessibilityActionHideTooltipContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionHideTooltip"); _accessibilityActionHideTooltipReady = true; } return _accessibilityActionHideTooltipContent; } }
            private static int _accessibilityActionHideTooltipContent = default;
            private static bool _accessibilityActionHideTooltipReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionImeEnter"/>
            /// </summary>
            public static int accessibilityActionImeEnter { get { if (!_accessibilityActionImeEnterReady) { _accessibilityActionImeEnterContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionImeEnter"); _accessibilityActionImeEnterReady = true; } return _accessibilityActionImeEnterContent; } }
            private static int _accessibilityActionImeEnterContent = default;
            private static bool _accessibilityActionImeEnterReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionMoveWindow"/>
            /// </summary>
            public static int accessibilityActionMoveWindow { get { if (!_accessibilityActionMoveWindowReady) { _accessibilityActionMoveWindowContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionMoveWindow"); _accessibilityActionMoveWindowReady = true; } return _accessibilityActionMoveWindowContent; } }
            private static int _accessibilityActionMoveWindowContent = default;
            private static bool _accessibilityActionMoveWindowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionPageDown"/>
            /// </summary>
            public static int accessibilityActionPageDown { get { if (!_accessibilityActionPageDownReady) { _accessibilityActionPageDownContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionPageDown"); _accessibilityActionPageDownReady = true; } return _accessibilityActionPageDownContent; } }
            private static int _accessibilityActionPageDownContent = default;
            private static bool _accessibilityActionPageDownReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionPageLeft"/>
            /// </summary>
            public static int accessibilityActionPageLeft { get { if (!_accessibilityActionPageLeftReady) { _accessibilityActionPageLeftContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionPageLeft"); _accessibilityActionPageLeftReady = true; } return _accessibilityActionPageLeftContent; } }
            private static int _accessibilityActionPageLeftContent = default;
            private static bool _accessibilityActionPageLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionPageRight"/>
            /// </summary>
            public static int accessibilityActionPageRight { get { if (!_accessibilityActionPageRightReady) { _accessibilityActionPageRightContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionPageRight"); _accessibilityActionPageRightReady = true; } return _accessibilityActionPageRightContent; } }
            private static int _accessibilityActionPageRightContent = default;
            private static bool _accessibilityActionPageRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionPageUp"/>
            /// </summary>
            public static int accessibilityActionPageUp { get { if (!_accessibilityActionPageUpReady) { _accessibilityActionPageUpContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionPageUp"); _accessibilityActionPageUpReady = true; } return _accessibilityActionPageUpContent; } }
            private static int _accessibilityActionPageUpContent = default;
            private static bool _accessibilityActionPageUpReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionPressAndHold"/>
            /// </summary>
            public static int accessibilityActionPressAndHold { get { if (!_accessibilityActionPressAndHoldReady) { _accessibilityActionPressAndHoldContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionPressAndHold"); _accessibilityActionPressAndHoldReady = true; } return _accessibilityActionPressAndHoldContent; } }
            private static int _accessibilityActionPressAndHoldContent = default;
            private static bool _accessibilityActionPressAndHoldReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionScrollDown"/>
            /// </summary>
            public static int accessibilityActionScrollDown { get { if (!_accessibilityActionScrollDownReady) { _accessibilityActionScrollDownContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionScrollDown"); _accessibilityActionScrollDownReady = true; } return _accessibilityActionScrollDownContent; } }
            private static int _accessibilityActionScrollDownContent = default;
            private static bool _accessibilityActionScrollDownReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionScrollInDirection"/>
            /// </summary>
            public static int accessibilityActionScrollInDirection { get { if (!_accessibilityActionScrollInDirectionReady) { _accessibilityActionScrollInDirectionContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionScrollInDirection"); _accessibilityActionScrollInDirectionReady = true; } return _accessibilityActionScrollInDirectionContent; } }
            private static int _accessibilityActionScrollInDirectionContent = default;
            private static bool _accessibilityActionScrollInDirectionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionScrollLeft"/>
            /// </summary>
            public static int accessibilityActionScrollLeft { get { if (!_accessibilityActionScrollLeftReady) { _accessibilityActionScrollLeftContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionScrollLeft"); _accessibilityActionScrollLeftReady = true; } return _accessibilityActionScrollLeftContent; } }
            private static int _accessibilityActionScrollLeftContent = default;
            private static bool _accessibilityActionScrollLeftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionScrollRight"/>
            /// </summary>
            public static int accessibilityActionScrollRight { get { if (!_accessibilityActionScrollRightReady) { _accessibilityActionScrollRightContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionScrollRight"); _accessibilityActionScrollRightReady = true; } return _accessibilityActionScrollRightContent; } }
            private static int _accessibilityActionScrollRightContent = default;
            private static bool _accessibilityActionScrollRightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionScrollToPosition"/>
            /// </summary>
            public static int accessibilityActionScrollToPosition { get { if (!_accessibilityActionScrollToPositionReady) { _accessibilityActionScrollToPositionContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionScrollToPosition"); _accessibilityActionScrollToPositionReady = true; } return _accessibilityActionScrollToPositionContent; } }
            private static int _accessibilityActionScrollToPositionContent = default;
            private static bool _accessibilityActionScrollToPositionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionScrollUp"/>
            /// </summary>
            public static int accessibilityActionScrollUp { get { if (!_accessibilityActionScrollUpReady) { _accessibilityActionScrollUpContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionScrollUp"); _accessibilityActionScrollUpReady = true; } return _accessibilityActionScrollUpContent; } }
            private static int _accessibilityActionScrollUpContent = default;
            private static bool _accessibilityActionScrollUpReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionSetProgress"/>
            /// </summary>
            public static int accessibilityActionSetProgress { get { if (!_accessibilityActionSetProgressReady) { _accessibilityActionSetProgressContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionSetProgress"); _accessibilityActionSetProgressReady = true; } return _accessibilityActionSetProgressContent; } }
            private static int _accessibilityActionSetProgressContent = default;
            private static bool _accessibilityActionSetProgressReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionShowOnScreen"/>
            /// </summary>
            public static int accessibilityActionShowOnScreen { get { if (!_accessibilityActionShowOnScreenReady) { _accessibilityActionShowOnScreenContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionShowOnScreen"); _accessibilityActionShowOnScreenReady = true; } return _accessibilityActionShowOnScreenContent; } }
            private static int _accessibilityActionShowOnScreenContent = default;
            private static bool _accessibilityActionShowOnScreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionShowTextSuggestions"/>
            /// </summary>
            public static int accessibilityActionShowTextSuggestions { get { if (!_accessibilityActionShowTextSuggestionsReady) { _accessibilityActionShowTextSuggestionsContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionShowTextSuggestions"); _accessibilityActionShowTextSuggestionsReady = true; } return _accessibilityActionShowTextSuggestionsContent; } }
            private static int _accessibilityActionShowTextSuggestionsContent = default;
            private static bool _accessibilityActionShowTextSuggestionsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilityActionShowTooltip"/>
            /// </summary>
            public static int accessibilityActionShowTooltip { get { if (!_accessibilityActionShowTooltipReady) { _accessibilityActionShowTooltipContent = SGetField<int>(LocalBridgeClazz, "accessibilityActionShowTooltip"); _accessibilityActionShowTooltipReady = true; } return _accessibilityActionShowTooltipContent; } }
            private static int _accessibilityActionShowTooltipContent = default;
            private static bool _accessibilityActionShowTooltipReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilitySystemActionBack"/>
            /// </summary>
            public static int accessibilitySystemActionBack { get { if (!_accessibilitySystemActionBackReady) { _accessibilitySystemActionBackContent = SGetField<int>(LocalBridgeClazz, "accessibilitySystemActionBack"); _accessibilitySystemActionBackReady = true; } return _accessibilitySystemActionBackContent; } }
            private static int _accessibilitySystemActionBackContent = default;
            private static bool _accessibilitySystemActionBackReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilitySystemActionHome"/>
            /// </summary>
            public static int accessibilitySystemActionHome { get { if (!_accessibilitySystemActionHomeReady) { _accessibilitySystemActionHomeContent = SGetField<int>(LocalBridgeClazz, "accessibilitySystemActionHome"); _accessibilitySystemActionHomeReady = true; } return _accessibilitySystemActionHomeContent; } }
            private static int _accessibilitySystemActionHomeContent = default;
            private static bool _accessibilitySystemActionHomeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilitySystemActionLockScreen"/>
            /// </summary>
            public static int accessibilitySystemActionLockScreen { get { if (!_accessibilitySystemActionLockScreenReady) { _accessibilitySystemActionLockScreenContent = SGetField<int>(LocalBridgeClazz, "accessibilitySystemActionLockScreen"); _accessibilitySystemActionLockScreenReady = true; } return _accessibilitySystemActionLockScreenContent; } }
            private static int _accessibilitySystemActionLockScreenContent = default;
            private static bool _accessibilitySystemActionLockScreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilitySystemActionNotifications"/>
            /// </summary>
            public static int accessibilitySystemActionNotifications { get { if (!_accessibilitySystemActionNotificationsReady) { _accessibilitySystemActionNotificationsContent = SGetField<int>(LocalBridgeClazz, "accessibilitySystemActionNotifications"); _accessibilitySystemActionNotificationsReady = true; } return _accessibilitySystemActionNotificationsContent; } }
            private static int _accessibilitySystemActionNotificationsContent = default;
            private static bool _accessibilitySystemActionNotificationsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilitySystemActionPowerDialog"/>
            /// </summary>
            public static int accessibilitySystemActionPowerDialog { get { if (!_accessibilitySystemActionPowerDialogReady) { _accessibilitySystemActionPowerDialogContent = SGetField<int>(LocalBridgeClazz, "accessibilitySystemActionPowerDialog"); _accessibilitySystemActionPowerDialogReady = true; } return _accessibilitySystemActionPowerDialogContent; } }
            private static int _accessibilitySystemActionPowerDialogContent = default;
            private static bool _accessibilitySystemActionPowerDialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilitySystemActionQuickSettings"/>
            /// </summary>
            public static int accessibilitySystemActionQuickSettings { get { if (!_accessibilitySystemActionQuickSettingsReady) { _accessibilitySystemActionQuickSettingsContent = SGetField<int>(LocalBridgeClazz, "accessibilitySystemActionQuickSettings"); _accessibilitySystemActionQuickSettingsReady = true; } return _accessibilitySystemActionQuickSettingsContent; } }
            private static int _accessibilitySystemActionQuickSettingsContent = default;
            private static bool _accessibilitySystemActionQuickSettingsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilitySystemActionRecents"/>
            /// </summary>
            public static int accessibilitySystemActionRecents { get { if (!_accessibilitySystemActionRecentsReady) { _accessibilitySystemActionRecentsContent = SGetField<int>(LocalBridgeClazz, "accessibilitySystemActionRecents"); _accessibilitySystemActionRecentsReady = true; } return _accessibilitySystemActionRecentsContent; } }
            private static int _accessibilitySystemActionRecentsContent = default;
            private static bool _accessibilitySystemActionRecentsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilitySystemActionTakeScreenshot"/>
            /// </summary>
            public static int accessibilitySystemActionTakeScreenshot { get { if (!_accessibilitySystemActionTakeScreenshotReady) { _accessibilitySystemActionTakeScreenshotContent = SGetField<int>(LocalBridgeClazz, "accessibilitySystemActionTakeScreenshot"); _accessibilitySystemActionTakeScreenshotReady = true; } return _accessibilitySystemActionTakeScreenshotContent; } }
            private static int _accessibilitySystemActionTakeScreenshotContent = default;
            private static bool _accessibilitySystemActionTakeScreenshotReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#accessibilitySystemActionToggleSplitScreen"/>
            /// </summary>
            public static int accessibilitySystemActionToggleSplitScreen { get { if (!_accessibilitySystemActionToggleSplitScreenReady) { _accessibilitySystemActionToggleSplitScreenContent = SGetField<int>(LocalBridgeClazz, "accessibilitySystemActionToggleSplitScreen"); _accessibilitySystemActionToggleSplitScreenReady = true; } return _accessibilitySystemActionToggleSplitScreenContent; } }
            private static int _accessibilitySystemActionToggleSplitScreenContent = default;
            private static bool _accessibilitySystemActionToggleSplitScreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#addToDictionary"/>
            /// </summary>
            public static int addToDictionary { get { if (!_addToDictionaryReady) { _addToDictionaryContent = SGetField<int>(LocalBridgeClazz, "addToDictionary"); _addToDictionaryReady = true; } return _addToDictionaryContent; } }
            private static int _addToDictionaryContent = default;
            private static bool _addToDictionaryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#autofill"/>
            /// </summary>
            public static int autofill { get { if (!_autofillReady) { _autofillContent = SGetField<int>(LocalBridgeClazz, "autofill"); _autofillReady = true; } return _autofillContent; } }
            private static int _autofillContent = default;
            private static bool _autofillReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#background"/>
            /// </summary>
            public static int background { get { if (!_backgroundReady) { _backgroundContent = SGetField<int>(LocalBridgeClazz, "background"); _backgroundReady = true; } return _backgroundContent; } }
            private static int _backgroundContent = default;
            private static bool _backgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#bold"/>
            /// </summary>
            public static int bold { get { if (!_boldReady) { _boldContent = SGetField<int>(LocalBridgeClazz, "bold"); _boldReady = true; } return _boldContent; } }
            private static int _boldContent = default;
            private static bool _boldReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#button1"/>
            /// </summary>
            public static int button1 { get { if (!_button1Ready) { _button1Content = SGetField<int>(LocalBridgeClazz, "button1"); _button1Ready = true; } return _button1Content; } }
            private static int _button1Content = default;
            private static bool _button1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#button2"/>
            /// </summary>
            public static int button2 { get { if (!_button2Ready) { _button2Content = SGetField<int>(LocalBridgeClazz, "button2"); _button2Ready = true; } return _button2Content; } }
            private static int _button2Content = default;
            private static bool _button2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#button3"/>
            /// </summary>
            public static int button3 { get { if (!_button3Ready) { _button3Content = SGetField<int>(LocalBridgeClazz, "button3"); _button3Ready = true; } return _button3Content; } }
            private static int _button3Content = default;
            private static bool _button3Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#candidatesArea"/>
            /// </summary>
            public static int candidatesArea { get { if (!_candidatesAreaReady) { _candidatesAreaContent = SGetField<int>(LocalBridgeClazz, "candidatesArea"); _candidatesAreaReady = true; } return _candidatesAreaContent; } }
            private static int _candidatesAreaContent = default;
            private static bool _candidatesAreaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#checkbox"/>
            /// </summary>
            public static int checkbox { get { if (!_checkboxReady) { _checkboxContent = SGetField<int>(LocalBridgeClazz, "checkbox"); _checkboxReady = true; } return _checkboxContent; } }
            private static int _checkboxContent = default;
            private static bool _checkboxReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#closeButton"/>
            /// </summary>
            public static int closeButton { get { if (!_closeButtonReady) { _closeButtonContent = SGetField<int>(LocalBridgeClazz, "closeButton"); _closeButtonReady = true; } return _closeButtonContent; } }
            private static int _closeButtonContent = default;
            private static bool _closeButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#content"/>
            /// </summary>
            public static int content { get { if (!_contentReady) { _contentContent = SGetField<int>(LocalBridgeClazz, "content"); _contentReady = true; } return _contentContent; } }
            private static int _contentContent = default;
            private static bool _contentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#copy"/>
            /// </summary>
            public static int copy { get { if (!_copyReady) { _copyContent = SGetField<int>(LocalBridgeClazz, "copy"); _copyReady = true; } return _copyContent; } }
            private static int _copyContent = default;
            private static bool _copyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#copyUrl"/>
            /// </summary>
            public static int copyUrl { get { if (!_copyUrlReady) { _copyUrlContent = SGetField<int>(LocalBridgeClazz, "copyUrl"); _copyUrlReady = true; } return _copyUrlContent; } }
            private static int _copyUrlContent = default;
            private static bool _copyUrlReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#custom"/>
            /// </summary>
            public static int custom { get { if (!_customReady) { _customContent = SGetField<int>(LocalBridgeClazz, "custom"); _customReady = true; } return _customContent; } }
            private static int _customContent = default;
            private static bool _customReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#cut"/>
            /// </summary>
            public static int cut { get { if (!_cutReady) { _cutContent = SGetField<int>(LocalBridgeClazz, "cut"); _cutReady = true; } return _cutContent; } }
            private static int _cutContent = default;
            private static bool _cutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#edit"/>
            /// </summary>
            public static int edit { get { if (!_editReady) { _editContent = SGetField<int>(LocalBridgeClazz, "edit"); _editReady = true; } return _editContent; } }
            private static int _editContent = default;
            private static bool _editReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#empty"/>
            /// </summary>
            public static int empty { get { if (!_emptyReady) { _emptyContent = SGetField<int>(LocalBridgeClazz, "empty"); _emptyReady = true; } return _emptyContent; } }
            private static int _emptyContent = default;
            private static bool _emptyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#extractArea"/>
            /// </summary>
            public static int extractArea { get { if (!_extractAreaReady) { _extractAreaContent = SGetField<int>(LocalBridgeClazz, "extractArea"); _extractAreaReady = true; } return _extractAreaContent; } }
            private static int _extractAreaContent = default;
            private static bool _extractAreaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#hint"/>
            /// </summary>
            public static int hint { get { if (!_hintReady) { _hintContent = SGetField<int>(LocalBridgeClazz, "hint"); _hintReady = true; } return _hintContent; } }
            private static int _hintContent = default;
            private static bool _hintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#home"/>
            /// </summary>
            public static int home { get { if (!_homeReady) { _homeContent = SGetField<int>(LocalBridgeClazz, "home"); _homeReady = true; } return _homeContent; } }
            private static int _homeContent = default;
            private static bool _homeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#icon"/>
            /// </summary>
            public static int icon { get { if (!_iconReady) { _iconContent = SGetField<int>(LocalBridgeClazz, "icon"); _iconReady = true; } return _iconContent; } }
            private static int _iconContent = default;
            private static bool _iconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#icon_frame"/>
            /// </summary>
            public static int icon_frame { get { if (!_icon_frameReady) { _icon_frameContent = SGetField<int>(LocalBridgeClazz, "icon_frame"); _icon_frameReady = true; } return _icon_frameContent; } }
            private static int _icon_frameContent = default;
            private static bool _icon_frameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#icon1"/>
            /// </summary>
            public static int icon1 { get { if (!_icon1Ready) { _icon1Content = SGetField<int>(LocalBridgeClazz, "icon1"); _icon1Ready = true; } return _icon1Content; } }
            private static int _icon1Content = default;
            private static bool _icon1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#icon2"/>
            /// </summary>
            public static int icon2 { get { if (!_icon2Ready) { _icon2Content = SGetField<int>(LocalBridgeClazz, "icon2"); _icon2Ready = true; } return _icon2Content; } }
            private static int _icon2Content = default;
            private static bool _icon2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#input"/>
            /// </summary>
            public static int input { get { if (!_inputReady) { _inputContent = SGetField<int>(LocalBridgeClazz, "input"); _inputReady = true; } return _inputContent; } }
            private static int _inputContent = default;
            private static bool _inputReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#inputArea"/>
            /// </summary>
            public static int inputArea { get { if (!_inputAreaReady) { _inputAreaContent = SGetField<int>(LocalBridgeClazz, "inputArea"); _inputAreaReady = true; } return _inputAreaContent; } }
            private static int _inputAreaContent = default;
            private static bool _inputAreaReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#inputExtractAccessories"/>
            /// </summary>
            public static int inputExtractAccessories { get { if (!_inputExtractAccessoriesReady) { _inputExtractAccessoriesContent = SGetField<int>(LocalBridgeClazz, "inputExtractAccessories"); _inputExtractAccessoriesReady = true; } return _inputExtractAccessoriesContent; } }
            private static int _inputExtractAccessoriesContent = default;
            private static bool _inputExtractAccessoriesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#inputExtractAction"/>
            /// </summary>
            public static int inputExtractAction { get { if (!_inputExtractActionReady) { _inputExtractActionContent = SGetField<int>(LocalBridgeClazz, "inputExtractAction"); _inputExtractActionReady = true; } return _inputExtractActionContent; } }
            private static int _inputExtractActionContent = default;
            private static bool _inputExtractActionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#inputExtractEditText"/>
            /// </summary>
            public static int inputExtractEditText { get { if (!_inputExtractEditTextReady) { _inputExtractEditTextContent = SGetField<int>(LocalBridgeClazz, "inputExtractEditText"); _inputExtractEditTextReady = true; } return _inputExtractEditTextContent; } }
            private static int _inputExtractEditTextContent = default;
            private static bool _inputExtractEditTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#italic"/>
            /// </summary>
            public static int italic { get { if (!_italicReady) { _italicContent = SGetField<int>(LocalBridgeClazz, "italic"); _italicReady = true; } return _italicContent; } }
            private static int _italicContent = default;
            private static bool _italicReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#keyboardView"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int keyboardView { get { if (!_keyboardViewReady) { _keyboardViewContent = SGetField<int>(LocalBridgeClazz, "keyboardView"); _keyboardViewReady = true; } return _keyboardViewContent; } }
            private static int _keyboardViewContent = default;
            private static bool _keyboardViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#list"/>
            /// </summary>
            public static int list { get { if (!_listReady) { _listContent = SGetField<int>(LocalBridgeClazz, "list"); _listReady = true; } return _listContent; } }
            private static int _listContent = default;
            private static bool _listReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#list_container"/>
            /// </summary>
            public static int list_container { get { if (!_list_containerReady) { _list_containerContent = SGetField<int>(LocalBridgeClazz, "list_container"); _list_containerReady = true; } return _list_containerContent; } }
            private static int _list_containerContent = default;
            private static bool _list_containerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#mask"/>
            /// </summary>
            public static int mask { get { if (!_maskReady) { _maskContent = SGetField<int>(LocalBridgeClazz, "mask"); _maskReady = true; } return _maskContent; } }
            private static int _maskContent = default;
            private static bool _maskReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#message"/>
            /// </summary>
            public static int message { get { if (!_messageReady) { _messageContent = SGetField<int>(LocalBridgeClazz, "message"); _messageReady = true; } return _messageContent; } }
            private static int _messageContent = default;
            private static bool _messageReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#navigationBarBackground"/>
            /// </summary>
            public static int navigationBarBackground { get { if (!_navigationBarBackgroundReady) { _navigationBarBackgroundContent = SGetField<int>(LocalBridgeClazz, "navigationBarBackground"); _navigationBarBackgroundReady = true; } return _navigationBarBackgroundContent; } }
            private static int _navigationBarBackgroundContent = default;
            private static bool _navigationBarBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#paste"/>
            /// </summary>
            public static int paste { get { if (!_pasteReady) { _pasteContent = SGetField<int>(LocalBridgeClazz, "paste"); _pasteReady = true; } return _pasteContent; } }
            private static int _pasteContent = default;
            private static bool _pasteReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#pasteAsPlainText"/>
            /// </summary>
            public static int pasteAsPlainText { get { if (!_pasteAsPlainTextReady) { _pasteAsPlainTextContent = SGetField<int>(LocalBridgeClazz, "pasteAsPlainText"); _pasteAsPlainTextReady = true; } return _pasteAsPlainTextContent; } }
            private static int _pasteAsPlainTextContent = default;
            private static bool _pasteAsPlainTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#primary"/>
            /// </summary>
            public static int primary { get { if (!_primaryReady) { _primaryContent = SGetField<int>(LocalBridgeClazz, "primary"); _primaryReady = true; } return _primaryContent; } }
            private static int _primaryContent = default;
            private static bool _primaryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#progress"/>
            /// </summary>
            public static int progress { get { if (!_progressReady) { _progressContent = SGetField<int>(LocalBridgeClazz, "progress"); _progressReady = true; } return _progressContent; } }
            private static int _progressContent = default;
            private static bool _progressReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#redo"/>
            /// </summary>
            public static int redo { get { if (!_redoReady) { _redoContent = SGetField<int>(LocalBridgeClazz, "redo"); _redoReady = true; } return _redoContent; } }
            private static int _redoContent = default;
            private static bool _redoReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#replaceText"/>
            /// </summary>
            public static int replaceText { get { if (!_replaceTextReady) { _replaceTextContent = SGetField<int>(LocalBridgeClazz, "replaceText"); _replaceTextReady = true; } return _replaceTextContent; } }
            private static int _replaceTextContent = default;
            private static bool _replaceTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#secondaryProgress"/>
            /// </summary>
            public static int secondaryProgress { get { if (!_secondaryProgressReady) { _secondaryProgressContent = SGetField<int>(LocalBridgeClazz, "secondaryProgress"); _secondaryProgressReady = true; } return _secondaryProgressContent; } }
            private static int _secondaryProgressContent = default;
            private static bool _secondaryProgressReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#selectAll"/>
            /// </summary>
            public static int selectAll { get { if (!_selectAllReady) { _selectAllContent = SGetField<int>(LocalBridgeClazz, "selectAll"); _selectAllReady = true; } return _selectAllContent; } }
            private static int _selectAllContent = default;
            private static bool _selectAllReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#selectedIcon"/>
            /// </summary>
            public static int selectedIcon { get { if (!_selectedIconReady) { _selectedIconContent = SGetField<int>(LocalBridgeClazz, "selectedIcon"); _selectedIconReady = true; } return _selectedIconContent; } }
            private static int _selectedIconContent = default;
            private static bool _selectedIconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#selectTextMode"/>
            /// </summary>
            public static int selectTextMode { get { if (!_selectTextModeReady) { _selectTextModeContent = SGetField<int>(LocalBridgeClazz, "selectTextMode"); _selectTextModeReady = true; } return _selectTextModeContent; } }
            private static int _selectTextModeContent = default;
            private static bool _selectTextModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#shareText"/>
            /// </summary>
            public static int shareText { get { if (!_shareTextReady) { _shareTextContent = SGetField<int>(LocalBridgeClazz, "shareText"); _shareTextReady = true; } return _shareTextContent; } }
            private static int _shareTextContent = default;
            private static bool _shareTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#startSelectingText"/>
            /// </summary>
            public static int startSelectingText { get { if (!_startSelectingTextReady) { _startSelectingTextContent = SGetField<int>(LocalBridgeClazz, "startSelectingText"); _startSelectingTextReady = true; } return _startSelectingTextContent; } }
            private static int _startSelectingTextContent = default;
            private static bool _startSelectingTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#statusBarBackground"/>
            /// </summary>
            public static int statusBarBackground { get { if (!_statusBarBackgroundReady) { _statusBarBackgroundContent = SGetField<int>(LocalBridgeClazz, "statusBarBackground"); _statusBarBackgroundReady = true; } return _statusBarBackgroundContent; } }
            private static int _statusBarBackgroundContent = default;
            private static bool _statusBarBackgroundReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#stopSelectingText"/>
            /// </summary>
            public static int stopSelectingText { get { if (!_stopSelectingTextReady) { _stopSelectingTextContent = SGetField<int>(LocalBridgeClazz, "stopSelectingText"); _stopSelectingTextReady = true; } return _stopSelectingTextContent; } }
            private static int _stopSelectingTextContent = default;
            private static bool _stopSelectingTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#summary"/>
            /// </summary>
            public static int summary { get { if (!_summaryReady) { _summaryContent = SGetField<int>(LocalBridgeClazz, "summary"); _summaryReady = true; } return _summaryContent; } }
            private static int _summaryContent = default;
            private static bool _summaryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#switch_widget"/>
            /// </summary>
            public static int switch_widget { get { if (!_switch_widgetReady) { _switch_widgetContent = SGetField<int>(LocalBridgeClazz, "switch_widget"); _switch_widgetReady = true; } return _switch_widgetContent; } }
            private static int _switch_widgetContent = default;
            private static bool _switch_widgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#switchInputMethod"/>
            /// </summary>
            public static int switchInputMethod { get { if (!_switchInputMethodReady) { _switchInputMethodContent = SGetField<int>(LocalBridgeClazz, "switchInputMethod"); _switchInputMethodReady = true; } return _switchInputMethodContent; } }
            private static int _switchInputMethodContent = default;
            private static bool _switchInputMethodReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#tabcontent"/>
            /// </summary>
            public static int tabcontent { get { if (!_tabcontentReady) { _tabcontentContent = SGetField<int>(LocalBridgeClazz, "tabcontent"); _tabcontentReady = true; } return _tabcontentContent; } }
            private static int _tabcontentContent = default;
            private static bool _tabcontentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#tabhost"/>
            /// </summary>
            public static int tabhost { get { if (!_tabhostReady) { _tabhostContent = SGetField<int>(LocalBridgeClazz, "tabhost"); _tabhostReady = true; } return _tabhostContent; } }
            private static int _tabhostContent = default;
            private static bool _tabhostReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#tabs"/>
            /// </summary>
            public static int tabs { get { if (!_tabsReady) { _tabsContent = SGetField<int>(LocalBridgeClazz, "tabs"); _tabsReady = true; } return _tabsContent; } }
            private static int _tabsContent = default;
            private static bool _tabsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#text1"/>
            /// </summary>
            public static int text1 { get { if (!_text1Ready) { _text1Content = SGetField<int>(LocalBridgeClazz, "text1"); _text1Ready = true; } return _text1Content; } }
            private static int _text1Content = default;
            private static bool _text1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#text2"/>
            /// </summary>
            public static int text2 { get { if (!_text2Ready) { _text2Content = SGetField<int>(LocalBridgeClazz, "text2"); _text2Ready = true; } return _text2Content; } }
            private static int _text2Content = default;
            private static bool _text2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#textAssist"/>
            /// </summary>
            public static int textAssist { get { if (!_textAssistReady) { _textAssistContent = SGetField<int>(LocalBridgeClazz, "textAssist"); _textAssistReady = true; } return _textAssistContent; } }
            private static int _textAssistContent = default;
            private static bool _textAssistReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#title"/>
            /// </summary>
            public static int title { get { if (!_titleReady) { _titleContent = SGetField<int>(LocalBridgeClazz, "title"); _titleReady = true; } return _titleContent; } }
            private static int _titleContent = default;
            private static bool _titleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#toggle"/>
            /// </summary>
            public static int toggle { get { if (!_toggleReady) { _toggleContent = SGetField<int>(LocalBridgeClazz, "toggle"); _toggleReady = true; } return _toggleContent; } }
            private static int _toggleContent = default;
            private static bool _toggleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#underline"/>
            /// </summary>
            public static int underline { get { if (!_underlineReady) { _underlineContent = SGetField<int>(LocalBridgeClazz, "underline"); _underlineReady = true; } return _underlineContent; } }
            private static int _underlineContent = default;
            private static bool _underlineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#undo"/>
            /// </summary>
            public static int undo { get { if (!_undoReady) { _undoContent = SGetField<int>(LocalBridgeClazz, "undo"); _undoReady = true; } return _undoContent; } }
            private static int _undoContent = default;
            private static bool _undoReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.id.html#widget_frame"/>
            /// </summary>
            public static int widget_frame { get { if (!_widget_frameReady) { _widget_frameContent = SGetField<int>(LocalBridgeClazz, "widget_frame"); _widget_frameReady = true; } return _widget_frameContent; } }
            private static int _widget_frameContent = default;
            private static bool _widget_frameReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region integer
        public partial class integer
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.integer.html#config_longAnimTime"/>
            /// </summary>
            public static int config_longAnimTime { get { if (!_config_longAnimTimeReady) { _config_longAnimTimeContent = SGetField<int>(LocalBridgeClazz, "config_longAnimTime"); _config_longAnimTimeReady = true; } return _config_longAnimTimeContent; } }
            private static int _config_longAnimTimeContent = default;
            private static bool _config_longAnimTimeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.integer.html#config_mediumAnimTime"/>
            /// </summary>
            public static int config_mediumAnimTime { get { if (!_config_mediumAnimTimeReady) { _config_mediumAnimTimeContent = SGetField<int>(LocalBridgeClazz, "config_mediumAnimTime"); _config_mediumAnimTimeReady = true; } return _config_mediumAnimTimeContent; } }
            private static int _config_mediumAnimTimeContent = default;
            private static bool _config_mediumAnimTimeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.integer.html#config_shortAnimTime"/>
            /// </summary>
            public static int config_shortAnimTime { get { if (!_config_shortAnimTimeReady) { _config_shortAnimTimeContent = SGetField<int>(LocalBridgeClazz, "config_shortAnimTime"); _config_shortAnimTimeReady = true; } return _config_shortAnimTimeContent; } }
            private static int _config_shortAnimTimeContent = default;
            private static bool _config_shortAnimTimeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.integer.html#status_bar_notification_info_maxnum"/>
            /// </summary>
            public static int status_bar_notification_info_maxnum { get { if (!_status_bar_notification_info_maxnumReady) { _status_bar_notification_info_maxnumContent = SGetField<int>(LocalBridgeClazz, "status_bar_notification_info_maxnum"); _status_bar_notification_info_maxnumReady = true; } return _status_bar_notification_info_maxnumContent; } }
            private static int _status_bar_notification_info_maxnumContent = default;
            private static bool _status_bar_notification_info_maxnumReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region interpolator
        public partial class interpolator
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#accelerate_cubic"/>
            /// </summary>
            public static int accelerate_cubic { get { if (!_accelerate_cubicReady) { _accelerate_cubicContent = SGetField<int>(LocalBridgeClazz, "accelerate_cubic"); _accelerate_cubicReady = true; } return _accelerate_cubicContent; } }
            private static int _accelerate_cubicContent = default;
            private static bool _accelerate_cubicReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#accelerate_decelerate"/>
            /// </summary>
            public static int accelerate_decelerate { get { if (!_accelerate_decelerateReady) { _accelerate_decelerateContent = SGetField<int>(LocalBridgeClazz, "accelerate_decelerate"); _accelerate_decelerateReady = true; } return _accelerate_decelerateContent; } }
            private static int _accelerate_decelerateContent = default;
            private static bool _accelerate_decelerateReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#accelerate_quad"/>
            /// </summary>
            public static int accelerate_quad { get { if (!_accelerate_quadReady) { _accelerate_quadContent = SGetField<int>(LocalBridgeClazz, "accelerate_quad"); _accelerate_quadReady = true; } return _accelerate_quadContent; } }
            private static int _accelerate_quadContent = default;
            private static bool _accelerate_quadReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#accelerate_quint"/>
            /// </summary>
            public static int accelerate_quint { get { if (!_accelerate_quintReady) { _accelerate_quintContent = SGetField<int>(LocalBridgeClazz, "accelerate_quint"); _accelerate_quintReady = true; } return _accelerate_quintContent; } }
            private static int _accelerate_quintContent = default;
            private static bool _accelerate_quintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#anticipate"/>
            /// </summary>
            public static int anticipate { get { if (!_anticipateReady) { _anticipateContent = SGetField<int>(LocalBridgeClazz, "anticipate"); _anticipateReady = true; } return _anticipateContent; } }
            private static int _anticipateContent = default;
            private static bool _anticipateReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#anticipate_overshoot"/>
            /// </summary>
            public static int anticipate_overshoot { get { if (!_anticipate_overshootReady) { _anticipate_overshootContent = SGetField<int>(LocalBridgeClazz, "anticipate_overshoot"); _anticipate_overshootReady = true; } return _anticipate_overshootContent; } }
            private static int _anticipate_overshootContent = default;
            private static bool _anticipate_overshootReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#bounce"/>
            /// </summary>
            public static int bounce { get { if (!_bounceReady) { _bounceContent = SGetField<int>(LocalBridgeClazz, "bounce"); _bounceReady = true; } return _bounceContent; } }
            private static int _bounceContent = default;
            private static bool _bounceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#cycle"/>
            /// </summary>
            public static int cycle { get { if (!_cycleReady) { _cycleContent = SGetField<int>(LocalBridgeClazz, "cycle"); _cycleReady = true; } return _cycleContent; } }
            private static int _cycleContent = default;
            private static bool _cycleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#decelerate_cubic"/>
            /// </summary>
            public static int decelerate_cubic { get { if (!_decelerate_cubicReady) { _decelerate_cubicContent = SGetField<int>(LocalBridgeClazz, "decelerate_cubic"); _decelerate_cubicReady = true; } return _decelerate_cubicContent; } }
            private static int _decelerate_cubicContent = default;
            private static bool _decelerate_cubicReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#decelerate_quad"/>
            /// </summary>
            public static int decelerate_quad { get { if (!_decelerate_quadReady) { _decelerate_quadContent = SGetField<int>(LocalBridgeClazz, "decelerate_quad"); _decelerate_quadReady = true; } return _decelerate_quadContent; } }
            private static int _decelerate_quadContent = default;
            private static bool _decelerate_quadReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#decelerate_quint"/>
            /// </summary>
            public static int decelerate_quint { get { if (!_decelerate_quintReady) { _decelerate_quintContent = SGetField<int>(LocalBridgeClazz, "decelerate_quint"); _decelerate_quintReady = true; } return _decelerate_quintContent; } }
            private static int _decelerate_quintContent = default;
            private static bool _decelerate_quintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#fast_out_extra_slow_in"/>
            /// </summary>
            public static int fast_out_extra_slow_in { get { if (!_fast_out_extra_slow_inReady) { _fast_out_extra_slow_inContent = SGetField<int>(LocalBridgeClazz, "fast_out_extra_slow_in"); _fast_out_extra_slow_inReady = true; } return _fast_out_extra_slow_inContent; } }
            private static int _fast_out_extra_slow_inContent = default;
            private static bool _fast_out_extra_slow_inReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#fast_out_linear_in"/>
            /// </summary>
            public static int fast_out_linear_in { get { if (!_fast_out_linear_inReady) { _fast_out_linear_inContent = SGetField<int>(LocalBridgeClazz, "fast_out_linear_in"); _fast_out_linear_inReady = true; } return _fast_out_linear_inContent; } }
            private static int _fast_out_linear_inContent = default;
            private static bool _fast_out_linear_inReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#fast_out_slow_in"/>
            /// </summary>
            public static int fast_out_slow_in { get { if (!_fast_out_slow_inReady) { _fast_out_slow_inContent = SGetField<int>(LocalBridgeClazz, "fast_out_slow_in"); _fast_out_slow_inReady = true; } return _fast_out_slow_inContent; } }
            private static int _fast_out_slow_inContent = default;
            private static bool _fast_out_slow_inReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#linear"/>
            /// </summary>
            public static int linear { get { if (!_linearReady) { _linearContent = SGetField<int>(LocalBridgeClazz, "linear"); _linearReady = true; } return _linearContent; } }
            private static int _linearContent = default;
            private static bool _linearReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#linear_out_slow_in"/>
            /// </summary>
            public static int linear_out_slow_in { get { if (!_linear_out_slow_inReady) { _linear_out_slow_inContent = SGetField<int>(LocalBridgeClazz, "linear_out_slow_in"); _linear_out_slow_inReady = true; } return _linear_out_slow_inContent; } }
            private static int _linear_out_slow_inContent = default;
            private static bool _linear_out_slow_inReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.interpolator.html#overshoot"/>
            /// </summary>
            public static int overshoot { get { if (!_overshootReady) { _overshootContent = SGetField<int>(LocalBridgeClazz, "overshoot"); _overshootReady = true; } return _overshootContent; } }
            private static int _overshootContent = default;
            private static bool _overshootReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region layout
        public partial class layout
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#activity_list_item"/>
            /// </summary>
            public static int activity_list_item { get { if (!_activity_list_itemReady) { _activity_list_itemContent = SGetField<int>(LocalBridgeClazz, "activity_list_item"); _activity_list_itemReady = true; } return _activity_list_itemContent; } }
            private static int _activity_list_itemContent = default;
            private static bool _activity_list_itemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#browser_link_context_header"/>
            /// </summary>
            public static int browser_link_context_header { get { if (!_browser_link_context_headerReady) { _browser_link_context_headerContent = SGetField<int>(LocalBridgeClazz, "browser_link_context_header"); _browser_link_context_headerReady = true; } return _browser_link_context_headerContent; } }
            private static int _browser_link_context_headerContent = default;
            private static bool _browser_link_context_headerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#expandable_list_content"/>
            /// </summary>
            public static int expandable_list_content { get { if (!_expandable_list_contentReady) { _expandable_list_contentContent = SGetField<int>(LocalBridgeClazz, "expandable_list_content"); _expandable_list_contentReady = true; } return _expandable_list_contentContent; } }
            private static int _expandable_list_contentContent = default;
            private static bool _expandable_list_contentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#list_content"/>
            /// </summary>
            public static int list_content { get { if (!_list_contentReady) { _list_contentContent = SGetField<int>(LocalBridgeClazz, "list_content"); _list_contentReady = true; } return _list_contentContent; } }
            private static int _list_contentContent = default;
            private static bool _list_contentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#preference_category"/>
            /// </summary>
            public static int preference_category { get { if (!_preference_categoryReady) { _preference_categoryContent = SGetField<int>(LocalBridgeClazz, "preference_category"); _preference_categoryReady = true; } return _preference_categoryContent; } }
            private static int _preference_categoryContent = default;
            private static bool _preference_categoryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#select_dialog_item"/>
            /// </summary>
            public static int select_dialog_item { get { if (!_select_dialog_itemReady) { _select_dialog_itemContent = SGetField<int>(LocalBridgeClazz, "select_dialog_item"); _select_dialog_itemReady = true; } return _select_dialog_itemContent; } }
            private static int _select_dialog_itemContent = default;
            private static bool _select_dialog_itemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#select_dialog_multichoice"/>
            /// </summary>
            public static int select_dialog_multichoice { get { if (!_select_dialog_multichoiceReady) { _select_dialog_multichoiceContent = SGetField<int>(LocalBridgeClazz, "select_dialog_multichoice"); _select_dialog_multichoiceReady = true; } return _select_dialog_multichoiceContent; } }
            private static int _select_dialog_multichoiceContent = default;
            private static bool _select_dialog_multichoiceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#select_dialog_singlechoice"/>
            /// </summary>
            public static int select_dialog_singlechoice { get { if (!_select_dialog_singlechoiceReady) { _select_dialog_singlechoiceContent = SGetField<int>(LocalBridgeClazz, "select_dialog_singlechoice"); _select_dialog_singlechoiceReady = true; } return _select_dialog_singlechoiceContent; } }
            private static int _select_dialog_singlechoiceContent = default;
            private static bool _select_dialog_singlechoiceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#simple_dropdown_item_1line"/>
            /// </summary>
            public static int simple_dropdown_item_1line { get { if (!_simple_dropdown_item_1lineReady) { _simple_dropdown_item_1lineContent = SGetField<int>(LocalBridgeClazz, "simple_dropdown_item_1line"); _simple_dropdown_item_1lineReady = true; } return _simple_dropdown_item_1lineContent; } }
            private static int _simple_dropdown_item_1lineContent = default;
            private static bool _simple_dropdown_item_1lineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#simple_expandable_list_item_1"/>
            /// </summary>
            public static int simple_expandable_list_item_1 { get { if (!_simple_expandable_list_item_1Ready) { _simple_expandable_list_item_1Content = SGetField<int>(LocalBridgeClazz, "simple_expandable_list_item_1"); _simple_expandable_list_item_1Ready = true; } return _simple_expandable_list_item_1Content; } }
            private static int _simple_expandable_list_item_1Content = default;
            private static bool _simple_expandable_list_item_1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#simple_expandable_list_item_2"/>
            /// </summary>
            public static int simple_expandable_list_item_2 { get { if (!_simple_expandable_list_item_2Ready) { _simple_expandable_list_item_2Content = SGetField<int>(LocalBridgeClazz, "simple_expandable_list_item_2"); _simple_expandable_list_item_2Ready = true; } return _simple_expandable_list_item_2Content; } }
            private static int _simple_expandable_list_item_2Content = default;
            private static bool _simple_expandable_list_item_2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#simple_gallery_item"/>
            /// </summary>
            public static int simple_gallery_item { get { if (!_simple_gallery_itemReady) { _simple_gallery_itemContent = SGetField<int>(LocalBridgeClazz, "simple_gallery_item"); _simple_gallery_itemReady = true; } return _simple_gallery_itemContent; } }
            private static int _simple_gallery_itemContent = default;
            private static bool _simple_gallery_itemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#simple_list_item_1"/>
            /// </summary>
            public static int simple_list_item_1 { get { if (!_simple_list_item_1Ready) { _simple_list_item_1Content = SGetField<int>(LocalBridgeClazz, "simple_list_item_1"); _simple_list_item_1Ready = true; } return _simple_list_item_1Content; } }
            private static int _simple_list_item_1Content = default;
            private static bool _simple_list_item_1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#simple_list_item_2"/>
            /// </summary>
            public static int simple_list_item_2 { get { if (!_simple_list_item_2Ready) { _simple_list_item_2Content = SGetField<int>(LocalBridgeClazz, "simple_list_item_2"); _simple_list_item_2Ready = true; } return _simple_list_item_2Content; } }
            private static int _simple_list_item_2Content = default;
            private static bool _simple_list_item_2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#simple_list_item_activated_1"/>
            /// </summary>
            public static int simple_list_item_activated_1 { get { if (!_simple_list_item_activated_1Ready) { _simple_list_item_activated_1Content = SGetField<int>(LocalBridgeClazz, "simple_list_item_activated_1"); _simple_list_item_activated_1Ready = true; } return _simple_list_item_activated_1Content; } }
            private static int _simple_list_item_activated_1Content = default;
            private static bool _simple_list_item_activated_1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#simple_list_item_activated_2"/>
            /// </summary>
            public static int simple_list_item_activated_2 { get { if (!_simple_list_item_activated_2Ready) { _simple_list_item_activated_2Content = SGetField<int>(LocalBridgeClazz, "simple_list_item_activated_2"); _simple_list_item_activated_2Ready = true; } return _simple_list_item_activated_2Content; } }
            private static int _simple_list_item_activated_2Content = default;
            private static bool _simple_list_item_activated_2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#simple_list_item_checked"/>
            /// </summary>
            public static int simple_list_item_checked { get { if (!_simple_list_item_checkedReady) { _simple_list_item_checkedContent = SGetField<int>(LocalBridgeClazz, "simple_list_item_checked"); _simple_list_item_checkedReady = true; } return _simple_list_item_checkedContent; } }
            private static int _simple_list_item_checkedContent = default;
            private static bool _simple_list_item_checkedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#simple_list_item_multiple_choice"/>
            /// </summary>
            public static int simple_list_item_multiple_choice { get { if (!_simple_list_item_multiple_choiceReady) { _simple_list_item_multiple_choiceContent = SGetField<int>(LocalBridgeClazz, "simple_list_item_multiple_choice"); _simple_list_item_multiple_choiceReady = true; } return _simple_list_item_multiple_choiceContent; } }
            private static int _simple_list_item_multiple_choiceContent = default;
            private static bool _simple_list_item_multiple_choiceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#simple_list_item_single_choice"/>
            /// </summary>
            public static int simple_list_item_single_choice { get { if (!_simple_list_item_single_choiceReady) { _simple_list_item_single_choiceContent = SGetField<int>(LocalBridgeClazz, "simple_list_item_single_choice"); _simple_list_item_single_choiceReady = true; } return _simple_list_item_single_choiceContent; } }
            private static int _simple_list_item_single_choiceContent = default;
            private static bool _simple_list_item_single_choiceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#simple_selectable_list_item"/>
            /// </summary>
            public static int simple_selectable_list_item { get { if (!_simple_selectable_list_itemReady) { _simple_selectable_list_itemContent = SGetField<int>(LocalBridgeClazz, "simple_selectable_list_item"); _simple_selectable_list_itemReady = true; } return _simple_selectable_list_itemContent; } }
            private static int _simple_selectable_list_itemContent = default;
            private static bool _simple_selectable_list_itemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#simple_spinner_dropdown_item"/>
            /// </summary>
            public static int simple_spinner_dropdown_item { get { if (!_simple_spinner_dropdown_itemReady) { _simple_spinner_dropdown_itemContent = SGetField<int>(LocalBridgeClazz, "simple_spinner_dropdown_item"); _simple_spinner_dropdown_itemReady = true; } return _simple_spinner_dropdown_itemContent; } }
            private static int _simple_spinner_dropdown_itemContent = default;
            private static bool _simple_spinner_dropdown_itemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#simple_spinner_item"/>
            /// </summary>
            public static int simple_spinner_item { get { if (!_simple_spinner_itemReady) { _simple_spinner_itemContent = SGetField<int>(LocalBridgeClazz, "simple_spinner_item"); _simple_spinner_itemReady = true; } return _simple_spinner_itemContent; } }
            private static int _simple_spinner_itemContent = default;
            private static bool _simple_spinner_itemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#test_list_item"/>
            /// </summary>
            public static int test_list_item { get { if (!_test_list_itemReady) { _test_list_itemContent = SGetField<int>(LocalBridgeClazz, "test_list_item"); _test_list_itemReady = true; } return _test_list_itemContent; } }
            private static int _test_list_itemContent = default;
            private static bool _test_list_itemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.layout.html#two_line_list_item"/>
            /// </summary>
            public static int two_line_list_item { get { if (!_two_line_list_itemReady) { _two_line_list_itemContent = SGetField<int>(LocalBridgeClazz, "two_line_list_item"); _two_line_list_itemReady = true; } return _two_line_list_itemContent; } }
            private static int _two_line_list_itemContent = default;
            private static bool _two_line_list_itemReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region menu
        public partial class menu
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region mipmap
        public partial class mipmap
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.mipmap.html#sym_def_app_icon"/>
            /// </summary>
            public static int sym_def_app_icon { get { if (!_sym_def_app_iconReady) { _sym_def_app_iconContent = SGetField<int>(LocalBridgeClazz, "sym_def_app_icon"); _sym_def_app_iconReady = true; } return _sym_def_app_iconContent; } }
            private static int _sym_def_app_iconContent = default;
            private static bool _sym_def_app_iconReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region plurals
        public partial class plurals
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region raw
        public partial class raw
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region stringClass
        public partial class stringClass
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#autofill"/>
            /// </summary>
            public static int autofill { get { if (!_autofillReady) { _autofillContent = SGetField<int>(LocalBridgeClazz, "autofill"); _autofillReady = true; } return _autofillContent; } }
            private static int _autofillContent = default;
            private static bool _autofillReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#cancel"/>
            /// </summary>
            public static int cancel { get { if (!_cancelReady) { _cancelContent = SGetField<int>(LocalBridgeClazz, "cancel"); _cancelReady = true; } return _cancelContent; } }
            private static int _cancelContent = default;
            private static bool _cancelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#copy"/>
            /// </summary>
            public static int copy { get { if (!_copyReady) { _copyContent = SGetField<int>(LocalBridgeClazz, "copy"); _copyReady = true; } return _copyContent; } }
            private static int _copyContent = default;
            private static bool _copyReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#copyUrl"/>
            /// </summary>
            public static int copyUrl { get { if (!_copyUrlReady) { _copyUrlContent = SGetField<int>(LocalBridgeClazz, "copyUrl"); _copyUrlReady = true; } return _copyUrlContent; } }
            private static int _copyUrlContent = default;
            private static bool _copyUrlReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#cut"/>
            /// </summary>
            public static int cut { get { if (!_cutReady) { _cutContent = SGetField<int>(LocalBridgeClazz, "cut"); _cutReady = true; } return _cutContent; } }
            private static int _cutContent = default;
            private static bool _cutReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#defaultMsisdnAlphaTag"/>
            /// </summary>
            public static int defaultMsisdnAlphaTag { get { if (!_defaultMsisdnAlphaTagReady) { _defaultMsisdnAlphaTagContent = SGetField<int>(LocalBridgeClazz, "defaultMsisdnAlphaTag"); _defaultMsisdnAlphaTagReady = true; } return _defaultMsisdnAlphaTagContent; } }
            private static int _defaultMsisdnAlphaTagContent = default;
            private static bool _defaultMsisdnAlphaTagReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#defaultVoiceMailAlphaTag"/>
            /// </summary>
            public static int defaultVoiceMailAlphaTag { get { if (!_defaultVoiceMailAlphaTagReady) { _defaultVoiceMailAlphaTagContent = SGetField<int>(LocalBridgeClazz, "defaultVoiceMailAlphaTag"); _defaultVoiceMailAlphaTagReady = true; } return _defaultVoiceMailAlphaTagContent; } }
            private static int _defaultVoiceMailAlphaTagContent = default;
            private static bool _defaultVoiceMailAlphaTagReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#dialog_alert_title"/>
            /// </summary>
            public static int dialog_alert_title { get { if (!_dialog_alert_titleReady) { _dialog_alert_titleContent = SGetField<int>(LocalBridgeClazz, "dialog_alert_title"); _dialog_alert_titleReady = true; } return _dialog_alert_titleContent; } }
            private static int _dialog_alert_titleContent = default;
            private static bool _dialog_alert_titleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#emptyPhoneNumber"/>
            /// </summary>
            public static int emptyPhoneNumber { get { if (!_emptyPhoneNumberReady) { _emptyPhoneNumberContent = SGetField<int>(LocalBridgeClazz, "emptyPhoneNumber"); _emptyPhoneNumberReady = true; } return _emptyPhoneNumberContent; } }
            private static int _emptyPhoneNumberContent = default;
            private static bool _emptyPhoneNumberReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#fingerprint_icon_content_description"/>
            /// </summary>
            public static int fingerprint_icon_content_description { get { if (!_fingerprint_icon_content_descriptionReady) { _fingerprint_icon_content_descriptionContent = SGetField<int>(LocalBridgeClazz, "fingerprint_icon_content_description"); _fingerprint_icon_content_descriptionReady = true; } return _fingerprint_icon_content_descriptionContent; } }
            private static int _fingerprint_icon_content_descriptionContent = default;
            private static bool _fingerprint_icon_content_descriptionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#httpErrorBadUrl"/>
            /// </summary>
            public static int httpErrorBadUrl { get { if (!_httpErrorBadUrlReady) { _httpErrorBadUrlContent = SGetField<int>(LocalBridgeClazz, "httpErrorBadUrl"); _httpErrorBadUrlReady = true; } return _httpErrorBadUrlContent; } }
            private static int _httpErrorBadUrlContent = default;
            private static bool _httpErrorBadUrlReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#httpErrorUnsupportedScheme"/>
            /// </summary>
            public static int httpErrorUnsupportedScheme { get { if (!_httpErrorUnsupportedSchemeReady) { _httpErrorUnsupportedSchemeContent = SGetField<int>(LocalBridgeClazz, "httpErrorUnsupportedScheme"); _httpErrorUnsupportedSchemeReady = true; } return _httpErrorUnsupportedSchemeContent; } }
            private static int _httpErrorUnsupportedSchemeContent = default;
            private static bool _httpErrorUnsupportedSchemeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#no"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int no { get { if (!_noReady) { _noContent = SGetField<int>(LocalBridgeClazz, "no"); _noReady = true; } return _noContent; } }
            private static int _noContent = default;
            private static bool _noReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#ok"/>
            /// </summary>
            public static int ok { get { if (!_okReady) { _okContent = SGetField<int>(LocalBridgeClazz, "ok"); _okReady = true; } return _okContent; } }
            private static int _okContent = default;
            private static bool _okReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#paste"/>
            /// </summary>
            public static int paste { get { if (!_pasteReady) { _pasteContent = SGetField<int>(LocalBridgeClazz, "paste"); _pasteReady = true; } return _pasteContent; } }
            private static int _pasteContent = default;
            private static bool _pasteReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#paste_as_plain_text"/>
            /// </summary>
            public static int paste_as_plain_text { get { if (!_paste_as_plain_textReady) { _paste_as_plain_textContent = SGetField<int>(LocalBridgeClazz, "paste_as_plain_text"); _paste_as_plain_textReady = true; } return _paste_as_plain_textContent; } }
            private static int _paste_as_plain_textContent = default;
            private static bool _paste_as_plain_textReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#search_go"/>
            /// </summary>
            public static int search_go { get { if (!_search_goReady) { _search_goContent = SGetField<int>(LocalBridgeClazz, "search_go"); _search_goReady = true; } return _search_goContent; } }
            private static int _search_goContent = default;
            private static bool _search_goReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#selectAll"/>
            /// </summary>
            public static int selectAll { get { if (!_selectAllReady) { _selectAllContent = SGetField<int>(LocalBridgeClazz, "selectAll"); _selectAllReady = true; } return _selectAllContent; } }
            private static int _selectAllContent = default;
            private static bool _selectAllReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#selectTextMode"/>
            /// </summary>
            public static int selectTextMode { get { if (!_selectTextModeReady) { _selectTextModeContent = SGetField<int>(LocalBridgeClazz, "selectTextMode"); _selectTextModeReady = true; } return _selectTextModeContent; } }
            private static int _selectTextModeContent = default;
            private static bool _selectTextModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#status_bar_notification_info_overflow"/>
            /// </summary>
            public static int status_bar_notification_info_overflow { get { if (!_status_bar_notification_info_overflowReady) { _status_bar_notification_info_overflowContent = SGetField<int>(LocalBridgeClazz, "status_bar_notification_info_overflow"); _status_bar_notification_info_overflowReady = true; } return _status_bar_notification_info_overflowContent; } }
            private static int _status_bar_notification_info_overflowContent = default;
            private static bool _status_bar_notification_info_overflowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#unknownName"/>
            /// </summary>
            public static int unknownName { get { if (!_unknownNameReady) { _unknownNameContent = SGetField<int>(LocalBridgeClazz, "unknownName"); _unknownNameReady = true; } return _unknownNameContent; } }
            private static int _unknownNameContent = default;
            private static bool _unknownNameReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#untitled"/>
            /// </summary>
            public static int untitled { get { if (!_untitledReady) { _untitledContent = SGetField<int>(LocalBridgeClazz, "untitled"); _untitledReady = true; } return _untitledContent; } }
            private static int _untitledContent = default;
            private static bool _untitledReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#VideoView_error_button"/>
            /// </summary>
            public static int VideoView_error_button { get { if (!_VideoView_error_buttonReady) { _VideoView_error_buttonContent = SGetField<int>(LocalBridgeClazz, "VideoView_error_button"); _VideoView_error_buttonReady = true; } return _VideoView_error_buttonContent; } }
            private static int _VideoView_error_buttonContent = default;
            private static bool _VideoView_error_buttonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#VideoView_error_text_invalid_progressive_playback"/>
            /// </summary>
            public static int VideoView_error_text_invalid_progressive_playback { get { if (!_VideoView_error_text_invalid_progressive_playbackReady) { _VideoView_error_text_invalid_progressive_playbackContent = SGetField<int>(LocalBridgeClazz, "VideoView_error_text_invalid_progressive_playback"); _VideoView_error_text_invalid_progressive_playbackReady = true; } return _VideoView_error_text_invalid_progressive_playbackContent; } }
            private static int _VideoView_error_text_invalid_progressive_playbackContent = default;
            private static bool _VideoView_error_text_invalid_progressive_playbackReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#VideoView_error_text_unknown"/>
            /// </summary>
            public static int VideoView_error_text_unknown { get { if (!_VideoView_error_text_unknownReady) { _VideoView_error_text_unknownContent = SGetField<int>(LocalBridgeClazz, "VideoView_error_text_unknown"); _VideoView_error_text_unknownReady = true; } return _VideoView_error_text_unknownContent; } }
            private static int _VideoView_error_text_unknownContent = default;
            private static bool _VideoView_error_text_unknownReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#VideoView_error_title"/>
            /// </summary>
            public static int VideoView_error_title { get { if (!_VideoView_error_titleReady) { _VideoView_error_titleContent = SGetField<int>(LocalBridgeClazz, "VideoView_error_title"); _VideoView_error_titleReady = true; } return _VideoView_error_titleContent; } }
            private static int _VideoView_error_titleContent = default;
            private static bool _VideoView_error_titleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.string.html#yes"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int yes { get { if (!_yesReady) { _yesContent = SGetField<int>(LocalBridgeClazz, "yes"); _yesReady = true; } return _yesContent; } }
            private static int _yesContent = default;
            private static bool _yesReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region style
        public partial class style
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Animation"/>
            /// </summary>
            public static int Animation { get { if (!_AnimationReady) { _AnimationContent = SGetField<int>(LocalBridgeClazz, "Animation"); _AnimationReady = true; } return _AnimationContent; } }
            private static int _AnimationContent = default;
            private static bool _AnimationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Animation_Activity"/>
            /// </summary>
            public static int Animation_Activity { get { if (!_Animation_ActivityReady) { _Animation_ActivityContent = SGetField<int>(LocalBridgeClazz, "Animation_Activity"); _Animation_ActivityReady = true; } return _Animation_ActivityContent; } }
            private static int _Animation_ActivityContent = default;
            private static bool _Animation_ActivityReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Animation_Dialog"/>
            /// </summary>
            public static int Animation_Dialog { get { if (!_Animation_DialogReady) { _Animation_DialogContent = SGetField<int>(LocalBridgeClazz, "Animation_Dialog"); _Animation_DialogReady = true; } return _Animation_DialogContent; } }
            private static int _Animation_DialogContent = default;
            private static bool _Animation_DialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Animation_InputMethod"/>
            /// </summary>
            public static int Animation_InputMethod { get { if (!_Animation_InputMethodReady) { _Animation_InputMethodContent = SGetField<int>(LocalBridgeClazz, "Animation_InputMethod"); _Animation_InputMethodReady = true; } return _Animation_InputMethodContent; } }
            private static int _Animation_InputMethodContent = default;
            private static bool _Animation_InputMethodReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Animation_Toast"/>
            /// </summary>
            public static int Animation_Toast { get { if (!_Animation_ToastReady) { _Animation_ToastContent = SGetField<int>(LocalBridgeClazz, "Animation_Toast"); _Animation_ToastReady = true; } return _Animation_ToastContent; } }
            private static int _Animation_ToastContent = default;
            private static bool _Animation_ToastReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Animation_Translucent"/>
            /// </summary>
            public static int Animation_Translucent { get { if (!_Animation_TranslucentReady) { _Animation_TranslucentContent = SGetField<int>(LocalBridgeClazz, "Animation_Translucent"); _Animation_TranslucentReady = true; } return _Animation_TranslucentContent; } }
            private static int _Animation_TranslucentContent = default;
            private static bool _Animation_TranslucentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#DeviceDefault_ButtonBar"/>
            /// </summary>
            public static int DeviceDefault_ButtonBar { get { if (!_DeviceDefault_ButtonBarReady) { _DeviceDefault_ButtonBarContent = SGetField<int>(LocalBridgeClazz, "DeviceDefault_ButtonBar"); _DeviceDefault_ButtonBarReady = true; } return _DeviceDefault_ButtonBarContent; } }
            private static int _DeviceDefault_ButtonBarContent = default;
            private static bool _DeviceDefault_ButtonBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#DeviceDefault_ButtonBar_AlertDialog"/>
            /// </summary>
            public static int DeviceDefault_ButtonBar_AlertDialog { get { if (!_DeviceDefault_ButtonBar_AlertDialogReady) { _DeviceDefault_ButtonBar_AlertDialogContent = SGetField<int>(LocalBridgeClazz, "DeviceDefault_ButtonBar_AlertDialog"); _DeviceDefault_ButtonBar_AlertDialogReady = true; } return _DeviceDefault_ButtonBar_AlertDialogContent; } }
            private static int _DeviceDefault_ButtonBar_AlertDialogContent = default;
            private static bool _DeviceDefault_ButtonBar_AlertDialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#DeviceDefault_Light_ButtonBar"/>
            /// </summary>
            public static int DeviceDefault_Light_ButtonBar { get { if (!_DeviceDefault_Light_ButtonBarReady) { _DeviceDefault_Light_ButtonBarContent = SGetField<int>(LocalBridgeClazz, "DeviceDefault_Light_ButtonBar"); _DeviceDefault_Light_ButtonBarReady = true; } return _DeviceDefault_Light_ButtonBarContent; } }
            private static int _DeviceDefault_Light_ButtonBarContent = default;
            private static bool _DeviceDefault_Light_ButtonBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#DeviceDefault_Light_ButtonBar_AlertDialog"/>
            /// </summary>
            public static int DeviceDefault_Light_ButtonBar_AlertDialog { get { if (!_DeviceDefault_Light_ButtonBar_AlertDialogReady) { _DeviceDefault_Light_ButtonBar_AlertDialogContent = SGetField<int>(LocalBridgeClazz, "DeviceDefault_Light_ButtonBar_AlertDialog"); _DeviceDefault_Light_ButtonBar_AlertDialogReady = true; } return _DeviceDefault_Light_ButtonBar_AlertDialogContent; } }
            private static int _DeviceDefault_Light_ButtonBar_AlertDialogContent = default;
            private static bool _DeviceDefault_Light_ButtonBar_AlertDialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#DeviceDefault_Light_SegmentedButton"/>
            /// </summary>
            public static int DeviceDefault_Light_SegmentedButton { get { if (!_DeviceDefault_Light_SegmentedButtonReady) { _DeviceDefault_Light_SegmentedButtonContent = SGetField<int>(LocalBridgeClazz, "DeviceDefault_Light_SegmentedButton"); _DeviceDefault_Light_SegmentedButtonReady = true; } return _DeviceDefault_Light_SegmentedButtonContent; } }
            private static int _DeviceDefault_Light_SegmentedButtonContent = default;
            private static bool _DeviceDefault_Light_SegmentedButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#DeviceDefault_SegmentedButton"/>
            /// </summary>
            public static int DeviceDefault_SegmentedButton { get { if (!_DeviceDefault_SegmentedButtonReady) { _DeviceDefault_SegmentedButtonContent = SGetField<int>(LocalBridgeClazz, "DeviceDefault_SegmentedButton"); _DeviceDefault_SegmentedButtonReady = true; } return _DeviceDefault_SegmentedButtonContent; } }
            private static int _DeviceDefault_SegmentedButtonContent = default;
            private static bool _DeviceDefault_SegmentedButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Holo_ButtonBar"/>
            /// </summary>
            public static int Holo_ButtonBar { get { if (!_Holo_ButtonBarReady) { _Holo_ButtonBarContent = SGetField<int>(LocalBridgeClazz, "Holo_ButtonBar"); _Holo_ButtonBarReady = true; } return _Holo_ButtonBarContent; } }
            private static int _Holo_ButtonBarContent = default;
            private static bool _Holo_ButtonBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Holo_ButtonBar_AlertDialog"/>
            /// </summary>
            public static int Holo_ButtonBar_AlertDialog { get { if (!_Holo_ButtonBar_AlertDialogReady) { _Holo_ButtonBar_AlertDialogContent = SGetField<int>(LocalBridgeClazz, "Holo_ButtonBar_AlertDialog"); _Holo_ButtonBar_AlertDialogReady = true; } return _Holo_ButtonBar_AlertDialogContent; } }
            private static int _Holo_ButtonBar_AlertDialogContent = default;
            private static bool _Holo_ButtonBar_AlertDialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Holo_Light_ButtonBar"/>
            /// </summary>
            public static int Holo_Light_ButtonBar { get { if (!_Holo_Light_ButtonBarReady) { _Holo_Light_ButtonBarContent = SGetField<int>(LocalBridgeClazz, "Holo_Light_ButtonBar"); _Holo_Light_ButtonBarReady = true; } return _Holo_Light_ButtonBarContent; } }
            private static int _Holo_Light_ButtonBarContent = default;
            private static bool _Holo_Light_ButtonBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Holo_Light_ButtonBar_AlertDialog"/>
            /// </summary>
            public static int Holo_Light_ButtonBar_AlertDialog { get { if (!_Holo_Light_ButtonBar_AlertDialogReady) { _Holo_Light_ButtonBar_AlertDialogContent = SGetField<int>(LocalBridgeClazz, "Holo_Light_ButtonBar_AlertDialog"); _Holo_Light_ButtonBar_AlertDialogReady = true; } return _Holo_Light_ButtonBar_AlertDialogContent; } }
            private static int _Holo_Light_ButtonBar_AlertDialogContent = default;
            private static bool _Holo_Light_ButtonBar_AlertDialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Holo_Light_SegmentedButton"/>
            /// </summary>
            public static int Holo_Light_SegmentedButton { get { if (!_Holo_Light_SegmentedButtonReady) { _Holo_Light_SegmentedButtonContent = SGetField<int>(LocalBridgeClazz, "Holo_Light_SegmentedButton"); _Holo_Light_SegmentedButtonReady = true; } return _Holo_Light_SegmentedButtonContent; } }
            private static int _Holo_Light_SegmentedButtonContent = default;
            private static bool _Holo_Light_SegmentedButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Holo_SegmentedButton"/>
            /// </summary>
            public static int Holo_SegmentedButton { get { if (!_Holo_SegmentedButtonReady) { _Holo_SegmentedButtonContent = SGetField<int>(LocalBridgeClazz, "Holo_SegmentedButton"); _Holo_SegmentedButtonReady = true; } return _Holo_SegmentedButtonContent; } }
            private static int _Holo_SegmentedButtonContent = default;
            private static bool _Holo_SegmentedButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#MediaButton"/>
            /// </summary>
            public static int MediaButton { get { if (!_MediaButtonReady) { _MediaButtonContent = SGetField<int>(LocalBridgeClazz, "MediaButton"); _MediaButtonReady = true; } return _MediaButtonContent; } }
            private static int _MediaButtonContent = default;
            private static bool _MediaButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#MediaButton_Ffwd"/>
            /// </summary>
            public static int MediaButton_Ffwd { get { if (!_MediaButton_FfwdReady) { _MediaButton_FfwdContent = SGetField<int>(LocalBridgeClazz, "MediaButton_Ffwd"); _MediaButton_FfwdReady = true; } return _MediaButton_FfwdContent; } }
            private static int _MediaButton_FfwdContent = default;
            private static bool _MediaButton_FfwdReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#MediaButton_Next"/>
            /// </summary>
            public static int MediaButton_Next { get { if (!_MediaButton_NextReady) { _MediaButton_NextContent = SGetField<int>(LocalBridgeClazz, "MediaButton_Next"); _MediaButton_NextReady = true; } return _MediaButton_NextContent; } }
            private static int _MediaButton_NextContent = default;
            private static bool _MediaButton_NextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#MediaButton_Pause"/>
            /// </summary>
            public static int MediaButton_Pause { get { if (!_MediaButton_PauseReady) { _MediaButton_PauseContent = SGetField<int>(LocalBridgeClazz, "MediaButton_Pause"); _MediaButton_PauseReady = true; } return _MediaButton_PauseContent; } }
            private static int _MediaButton_PauseContent = default;
            private static bool _MediaButton_PauseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#MediaButton_Play"/>
            /// </summary>
            public static int MediaButton_Play { get { if (!_MediaButton_PlayReady) { _MediaButton_PlayContent = SGetField<int>(LocalBridgeClazz, "MediaButton_Play"); _MediaButton_PlayReady = true; } return _MediaButton_PlayContent; } }
            private static int _MediaButton_PlayContent = default;
            private static bool _MediaButton_PlayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#MediaButton_Previous"/>
            /// </summary>
            public static int MediaButton_Previous { get { if (!_MediaButton_PreviousReady) { _MediaButton_PreviousContent = SGetField<int>(LocalBridgeClazz, "MediaButton_Previous"); _MediaButton_PreviousReady = true; } return _MediaButton_PreviousContent; } }
            private static int _MediaButton_PreviousContent = default;
            private static bool _MediaButton_PreviousReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#MediaButton_Rew"/>
            /// </summary>
            public static int MediaButton_Rew { get { if (!_MediaButton_RewReady) { _MediaButton_RewContent = SGetField<int>(LocalBridgeClazz, "MediaButton_Rew"); _MediaButton_RewReady = true; } return _MediaButton_RewContent; } }
            private static int _MediaButton_RewContent = default;
            private static bool _MediaButton_RewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance"/>
            /// </summary>
            public static int TextAppearance { get { if (!_TextAppearanceReady) { _TextAppearanceContent = SGetField<int>(LocalBridgeClazz, "TextAppearance"); _TextAppearanceReady = true; } return _TextAppearanceContent; } }
            private static int _TextAppearanceContent = default;
            private static bool _TextAppearanceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault { get { if (!_TextAppearance_DeviceDefaultReady) { _TextAppearance_DeviceDefaultContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault"); _TextAppearance_DeviceDefaultReady = true; } return _TextAppearance_DeviceDefaultContent; } }
            private static int _TextAppearance_DeviceDefaultContent = default;
            private static bool _TextAppearance_DeviceDefaultReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_DialogWindowTitle"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_DialogWindowTitle { get { if (!_TextAppearance_DeviceDefault_DialogWindowTitleReady) { _TextAppearance_DeviceDefault_DialogWindowTitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_DialogWindowTitle"); _TextAppearance_DeviceDefault_DialogWindowTitleReady = true; } return _TextAppearance_DeviceDefault_DialogWindowTitleContent; } }
            private static int _TextAppearance_DeviceDefault_DialogWindowTitleContent = default;
            private static bool _TextAppearance_DeviceDefault_DialogWindowTitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Headline"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Headline { get { if (!_TextAppearance_DeviceDefault_HeadlineReady) { _TextAppearance_DeviceDefault_HeadlineContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Headline"); _TextAppearance_DeviceDefault_HeadlineReady = true; } return _TextAppearance_DeviceDefault_HeadlineContent; } }
            private static int _TextAppearance_DeviceDefault_HeadlineContent = default;
            private static bool _TextAppearance_DeviceDefault_HeadlineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Inverse"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Inverse { get { if (!_TextAppearance_DeviceDefault_InverseReady) { _TextAppearance_DeviceDefault_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Inverse"); _TextAppearance_DeviceDefault_InverseReady = true; } return _TextAppearance_DeviceDefault_InverseContent; } }
            private static int _TextAppearance_DeviceDefault_InverseContent = default;
            private static bool _TextAppearance_DeviceDefault_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Large"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Large { get { if (!_TextAppearance_DeviceDefault_LargeReady) { _TextAppearance_DeviceDefault_LargeContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Large"); _TextAppearance_DeviceDefault_LargeReady = true; } return _TextAppearance_DeviceDefault_LargeContent; } }
            private static int _TextAppearance_DeviceDefault_LargeContent = default;
            private static bool _TextAppearance_DeviceDefault_LargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Large_Inverse"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Large_Inverse { get { if (!_TextAppearance_DeviceDefault_Large_InverseReady) { _TextAppearance_DeviceDefault_Large_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Large_Inverse"); _TextAppearance_DeviceDefault_Large_InverseReady = true; } return _TextAppearance_DeviceDefault_Large_InverseContent; } }
            private static int _TextAppearance_DeviceDefault_Large_InverseContent = default;
            private static bool _TextAppearance_DeviceDefault_Large_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Medium"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Medium { get { if (!_TextAppearance_DeviceDefault_MediumReady) { _TextAppearance_DeviceDefault_MediumContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Medium"); _TextAppearance_DeviceDefault_MediumReady = true; } return _TextAppearance_DeviceDefault_MediumContent; } }
            private static int _TextAppearance_DeviceDefault_MediumContent = default;
            private static bool _TextAppearance_DeviceDefault_MediumReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Medium_Inverse"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Medium_Inverse { get { if (!_TextAppearance_DeviceDefault_Medium_InverseReady) { _TextAppearance_DeviceDefault_Medium_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Medium_Inverse"); _TextAppearance_DeviceDefault_Medium_InverseReady = true; } return _TextAppearance_DeviceDefault_Medium_InverseContent; } }
            private static int _TextAppearance_DeviceDefault_Medium_InverseContent = default;
            private static bool _TextAppearance_DeviceDefault_Medium_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_SearchResult_Subtitle"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_SearchResult_Subtitle { get { if (!_TextAppearance_DeviceDefault_SearchResult_SubtitleReady) { _TextAppearance_DeviceDefault_SearchResult_SubtitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_SearchResult_Subtitle"); _TextAppearance_DeviceDefault_SearchResult_SubtitleReady = true; } return _TextAppearance_DeviceDefault_SearchResult_SubtitleContent; } }
            private static int _TextAppearance_DeviceDefault_SearchResult_SubtitleContent = default;
            private static bool _TextAppearance_DeviceDefault_SearchResult_SubtitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_SearchResult_Title"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_SearchResult_Title { get { if (!_TextAppearance_DeviceDefault_SearchResult_TitleReady) { _TextAppearance_DeviceDefault_SearchResult_TitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_SearchResult_Title"); _TextAppearance_DeviceDefault_SearchResult_TitleReady = true; } return _TextAppearance_DeviceDefault_SearchResult_TitleContent; } }
            private static int _TextAppearance_DeviceDefault_SearchResult_TitleContent = default;
            private static bool _TextAppearance_DeviceDefault_SearchResult_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Small"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Small { get { if (!_TextAppearance_DeviceDefault_SmallReady) { _TextAppearance_DeviceDefault_SmallContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Small"); _TextAppearance_DeviceDefault_SmallReady = true; } return _TextAppearance_DeviceDefault_SmallContent; } }
            private static int _TextAppearance_DeviceDefault_SmallContent = default;
            private static bool _TextAppearance_DeviceDefault_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Small_Inverse"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Small_Inverse { get { if (!_TextAppearance_DeviceDefault_Small_InverseReady) { _TextAppearance_DeviceDefault_Small_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Small_Inverse"); _TextAppearance_DeviceDefault_Small_InverseReady = true; } return _TextAppearance_DeviceDefault_Small_InverseContent; } }
            private static int _TextAppearance_DeviceDefault_Small_InverseContent = default;
            private static bool _TextAppearance_DeviceDefault_Small_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget { get { if (!_TextAppearance_DeviceDefault_WidgetReady) { _TextAppearance_DeviceDefault_WidgetContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget"); _TextAppearance_DeviceDefault_WidgetReady = true; } return _TextAppearance_DeviceDefault_WidgetContent; } }
            private static int _TextAppearance_DeviceDefault_WidgetContent = default;
            private static bool _TextAppearance_DeviceDefault_WidgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_ActionBar_Menu"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_ActionBar_Menu { get { if (!_TextAppearance_DeviceDefault_Widget_ActionBar_MenuReady) { _TextAppearance_DeviceDefault_Widget_ActionBar_MenuContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_ActionBar_Menu"); _TextAppearance_DeviceDefault_Widget_ActionBar_MenuReady = true; } return _TextAppearance_DeviceDefault_Widget_ActionBar_MenuContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_ActionBar_MenuContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_ActionBar_MenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle { get { if (!_TextAppearance_DeviceDefault_Widget_ActionBar_SubtitleReady) { _TextAppearance_DeviceDefault_Widget_ActionBar_SubtitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle"); _TextAppearance_DeviceDefault_Widget_ActionBar_SubtitleReady = true; } return _TextAppearance_DeviceDefault_Widget_ActionBar_SubtitleContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_ActionBar_SubtitleContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_ActionBar_SubtitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_Inverse"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_Inverse { get { if (!_TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_InverseReady) { _TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_Inverse"); _TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_InverseReady = true; } return _TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_InverseContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_InverseContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_ActionBar_Title"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_ActionBar_Title { get { if (!_TextAppearance_DeviceDefault_Widget_ActionBar_TitleReady) { _TextAppearance_DeviceDefault_Widget_ActionBar_TitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_ActionBar_Title"); _TextAppearance_DeviceDefault_Widget_ActionBar_TitleReady = true; } return _TextAppearance_DeviceDefault_Widget_ActionBar_TitleContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_ActionBar_TitleContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_ActionBar_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_ActionBar_Title_Inverse"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int TextAppearance_DeviceDefault_Widget_ActionBar_Title_Inverse { get { if (!_TextAppearance_DeviceDefault_Widget_ActionBar_Title_InverseReady) { _TextAppearance_DeviceDefault_Widget_ActionBar_Title_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_ActionBar_Title_Inverse"); _TextAppearance_DeviceDefault_Widget_ActionBar_Title_InverseReady = true; } return _TextAppearance_DeviceDefault_Widget_ActionBar_Title_InverseContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_ActionBar_Title_InverseContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_ActionBar_Title_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle { get { if (!_TextAppearance_DeviceDefault_Widget_ActionMode_SubtitleReady) { _TextAppearance_DeviceDefault_Widget_ActionMode_SubtitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle"); _TextAppearance_DeviceDefault_Widget_ActionMode_SubtitleReady = true; } return _TextAppearance_DeviceDefault_Widget_ActionMode_SubtitleContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_ActionMode_SubtitleContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_ActionMode_SubtitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_Inverse"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_Inverse { get { if (!_TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_InverseReady) { _TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_Inverse"); _TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_InverseReady = true; } return _TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_InverseContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_InverseContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_ActionMode_Title"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_ActionMode_Title { get { if (!_TextAppearance_DeviceDefault_Widget_ActionMode_TitleReady) { _TextAppearance_DeviceDefault_Widget_ActionMode_TitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_ActionMode_Title"); _TextAppearance_DeviceDefault_Widget_ActionMode_TitleReady = true; } return _TextAppearance_DeviceDefault_Widget_ActionMode_TitleContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_ActionMode_TitleContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_ActionMode_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_ActionMode_Title_Inverse"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int TextAppearance_DeviceDefault_Widget_ActionMode_Title_Inverse { get { if (!_TextAppearance_DeviceDefault_Widget_ActionMode_Title_InverseReady) { _TextAppearance_DeviceDefault_Widget_ActionMode_Title_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_ActionMode_Title_Inverse"); _TextAppearance_DeviceDefault_Widget_ActionMode_Title_InverseReady = true; } return _TextAppearance_DeviceDefault_Widget_ActionMode_Title_InverseContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_ActionMode_Title_InverseContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_ActionMode_Title_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_Button"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_Button { get { if (!_TextAppearance_DeviceDefault_Widget_ButtonReady) { _TextAppearance_DeviceDefault_Widget_ButtonContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_Button"); _TextAppearance_DeviceDefault_Widget_ButtonReady = true; } return _TextAppearance_DeviceDefault_Widget_ButtonContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_ButtonContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_ButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_DropDownHint"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_DropDownHint { get { if (!_TextAppearance_DeviceDefault_Widget_DropDownHintReady) { _TextAppearance_DeviceDefault_Widget_DropDownHintContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_DropDownHint"); _TextAppearance_DeviceDefault_Widget_DropDownHintReady = true; } return _TextAppearance_DeviceDefault_Widget_DropDownHintContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_DropDownHintContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_DropDownHintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_DropDownItem"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_DropDownItem { get { if (!_TextAppearance_DeviceDefault_Widget_DropDownItemReady) { _TextAppearance_DeviceDefault_Widget_DropDownItemContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_DropDownItem"); _TextAppearance_DeviceDefault_Widget_DropDownItemReady = true; } return _TextAppearance_DeviceDefault_Widget_DropDownItemContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_DropDownItemContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_DropDownItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_EditText"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_EditText { get { if (!_TextAppearance_DeviceDefault_Widget_EditTextReady) { _TextAppearance_DeviceDefault_Widget_EditTextContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_EditText"); _TextAppearance_DeviceDefault_Widget_EditTextReady = true; } return _TextAppearance_DeviceDefault_Widget_EditTextContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_EditTextContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_EditTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_IconMenu_Item"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_IconMenu_Item { get { if (!_TextAppearance_DeviceDefault_Widget_IconMenu_ItemReady) { _TextAppearance_DeviceDefault_Widget_IconMenu_ItemContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_IconMenu_Item"); _TextAppearance_DeviceDefault_Widget_IconMenu_ItemReady = true; } return _TextAppearance_DeviceDefault_Widget_IconMenu_ItemContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_IconMenu_ItemContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_IconMenu_ItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_PopupMenu"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_PopupMenu { get { if (!_TextAppearance_DeviceDefault_Widget_PopupMenuReady) { _TextAppearance_DeviceDefault_Widget_PopupMenuContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_PopupMenu"); _TextAppearance_DeviceDefault_Widget_PopupMenuReady = true; } return _TextAppearance_DeviceDefault_Widget_PopupMenuContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_PopupMenuContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_PopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_PopupMenu_Large"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_PopupMenu_Large { get { if (!_TextAppearance_DeviceDefault_Widget_PopupMenu_LargeReady) { _TextAppearance_DeviceDefault_Widget_PopupMenu_LargeContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_PopupMenu_Large"); _TextAppearance_DeviceDefault_Widget_PopupMenu_LargeReady = true; } return _TextAppearance_DeviceDefault_Widget_PopupMenu_LargeContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_PopupMenu_LargeContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_PopupMenu_LargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_PopupMenu_Small"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_PopupMenu_Small { get { if (!_TextAppearance_DeviceDefault_Widget_PopupMenu_SmallReady) { _TextAppearance_DeviceDefault_Widget_PopupMenu_SmallContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_PopupMenu_Small"); _TextAppearance_DeviceDefault_Widget_PopupMenu_SmallReady = true; } return _TextAppearance_DeviceDefault_Widget_PopupMenu_SmallContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_PopupMenu_SmallContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_PopupMenu_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_TabWidget"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_TabWidget { get { if (!_TextAppearance_DeviceDefault_Widget_TabWidgetReady) { _TextAppearance_DeviceDefault_Widget_TabWidgetContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_TabWidget"); _TextAppearance_DeviceDefault_Widget_TabWidgetReady = true; } return _TextAppearance_DeviceDefault_Widget_TabWidgetContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_TabWidgetContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_TabWidgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_TextView"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_TextView { get { if (!_TextAppearance_DeviceDefault_Widget_TextViewReady) { _TextAppearance_DeviceDefault_Widget_TextViewContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_TextView"); _TextAppearance_DeviceDefault_Widget_TextViewReady = true; } return _TextAppearance_DeviceDefault_Widget_TextViewContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_TextViewContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_TextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_TextView_PopupMenu"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_TextView_PopupMenu { get { if (!_TextAppearance_DeviceDefault_Widget_TextView_PopupMenuReady) { _TextAppearance_DeviceDefault_Widget_TextView_PopupMenuContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_TextView_PopupMenu"); _TextAppearance_DeviceDefault_Widget_TextView_PopupMenuReady = true; } return _TextAppearance_DeviceDefault_Widget_TextView_PopupMenuContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_TextView_PopupMenuContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_TextView_PopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_Widget_TextView_SpinnerItem"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_Widget_TextView_SpinnerItem { get { if (!_TextAppearance_DeviceDefault_Widget_TextView_SpinnerItemReady) { _TextAppearance_DeviceDefault_Widget_TextView_SpinnerItemContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_Widget_TextView_SpinnerItem"); _TextAppearance_DeviceDefault_Widget_TextView_SpinnerItemReady = true; } return _TextAppearance_DeviceDefault_Widget_TextView_SpinnerItemContent; } }
            private static int _TextAppearance_DeviceDefault_Widget_TextView_SpinnerItemContent = default;
            private static bool _TextAppearance_DeviceDefault_Widget_TextView_SpinnerItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DeviceDefault_WindowTitle"/>
            /// </summary>
            public static int TextAppearance_DeviceDefault_WindowTitle { get { if (!_TextAppearance_DeviceDefault_WindowTitleReady) { _TextAppearance_DeviceDefault_WindowTitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DeviceDefault_WindowTitle"); _TextAppearance_DeviceDefault_WindowTitleReady = true; } return _TextAppearance_DeviceDefault_WindowTitleContent; } }
            private static int _TextAppearance_DeviceDefault_WindowTitleContent = default;
            private static bool _TextAppearance_DeviceDefault_WindowTitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_DialogWindowTitle"/>
            /// </summary>
            public static int TextAppearance_DialogWindowTitle { get { if (!_TextAppearance_DialogWindowTitleReady) { _TextAppearance_DialogWindowTitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_DialogWindowTitle"); _TextAppearance_DialogWindowTitleReady = true; } return _TextAppearance_DialogWindowTitleContent; } }
            private static int _TextAppearance_DialogWindowTitleContent = default;
            private static bool _TextAppearance_DialogWindowTitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo"/>
            /// </summary>
            public static int TextAppearance_Holo { get { if (!_TextAppearance_HoloReady) { _TextAppearance_HoloContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo"); _TextAppearance_HoloReady = true; } return _TextAppearance_HoloContent; } }
            private static int _TextAppearance_HoloContent = default;
            private static bool _TextAppearance_HoloReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_DialogWindowTitle"/>
            /// </summary>
            public static int TextAppearance_Holo_DialogWindowTitle { get { if (!_TextAppearance_Holo_DialogWindowTitleReady) { _TextAppearance_Holo_DialogWindowTitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_DialogWindowTitle"); _TextAppearance_Holo_DialogWindowTitleReady = true; } return _TextAppearance_Holo_DialogWindowTitleContent; } }
            private static int _TextAppearance_Holo_DialogWindowTitleContent = default;
            private static bool _TextAppearance_Holo_DialogWindowTitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Inverse"/>
            /// </summary>
            public static int TextAppearance_Holo_Inverse { get { if (!_TextAppearance_Holo_InverseReady) { _TextAppearance_Holo_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Inverse"); _TextAppearance_Holo_InverseReady = true; } return _TextAppearance_Holo_InverseContent; } }
            private static int _TextAppearance_Holo_InverseContent = default;
            private static bool _TextAppearance_Holo_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Large"/>
            /// </summary>
            public static int TextAppearance_Holo_Large { get { if (!_TextAppearance_Holo_LargeReady) { _TextAppearance_Holo_LargeContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Large"); _TextAppearance_Holo_LargeReady = true; } return _TextAppearance_Holo_LargeContent; } }
            private static int _TextAppearance_Holo_LargeContent = default;
            private static bool _TextAppearance_Holo_LargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Large_Inverse"/>
            /// </summary>
            public static int TextAppearance_Holo_Large_Inverse { get { if (!_TextAppearance_Holo_Large_InverseReady) { _TextAppearance_Holo_Large_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Large_Inverse"); _TextAppearance_Holo_Large_InverseReady = true; } return _TextAppearance_Holo_Large_InverseContent; } }
            private static int _TextAppearance_Holo_Large_InverseContent = default;
            private static bool _TextAppearance_Holo_Large_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Medium"/>
            /// </summary>
            public static int TextAppearance_Holo_Medium { get { if (!_TextAppearance_Holo_MediumReady) { _TextAppearance_Holo_MediumContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Medium"); _TextAppearance_Holo_MediumReady = true; } return _TextAppearance_Holo_MediumContent; } }
            private static int _TextAppearance_Holo_MediumContent = default;
            private static bool _TextAppearance_Holo_MediumReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Medium_Inverse"/>
            /// </summary>
            public static int TextAppearance_Holo_Medium_Inverse { get { if (!_TextAppearance_Holo_Medium_InverseReady) { _TextAppearance_Holo_Medium_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Medium_Inverse"); _TextAppearance_Holo_Medium_InverseReady = true; } return _TextAppearance_Holo_Medium_InverseContent; } }
            private static int _TextAppearance_Holo_Medium_InverseContent = default;
            private static bool _TextAppearance_Holo_Medium_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_SearchResult_Subtitle"/>
            /// </summary>
            public static int TextAppearance_Holo_SearchResult_Subtitle { get { if (!_TextAppearance_Holo_SearchResult_SubtitleReady) { _TextAppearance_Holo_SearchResult_SubtitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_SearchResult_Subtitle"); _TextAppearance_Holo_SearchResult_SubtitleReady = true; } return _TextAppearance_Holo_SearchResult_SubtitleContent; } }
            private static int _TextAppearance_Holo_SearchResult_SubtitleContent = default;
            private static bool _TextAppearance_Holo_SearchResult_SubtitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_SearchResult_Title"/>
            /// </summary>
            public static int TextAppearance_Holo_SearchResult_Title { get { if (!_TextAppearance_Holo_SearchResult_TitleReady) { _TextAppearance_Holo_SearchResult_TitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_SearchResult_Title"); _TextAppearance_Holo_SearchResult_TitleReady = true; } return _TextAppearance_Holo_SearchResult_TitleContent; } }
            private static int _TextAppearance_Holo_SearchResult_TitleContent = default;
            private static bool _TextAppearance_Holo_SearchResult_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Small"/>
            /// </summary>
            public static int TextAppearance_Holo_Small { get { if (!_TextAppearance_Holo_SmallReady) { _TextAppearance_Holo_SmallContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Small"); _TextAppearance_Holo_SmallReady = true; } return _TextAppearance_Holo_SmallContent; } }
            private static int _TextAppearance_Holo_SmallContent = default;
            private static bool _TextAppearance_Holo_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Small_Inverse"/>
            /// </summary>
            public static int TextAppearance_Holo_Small_Inverse { get { if (!_TextAppearance_Holo_Small_InverseReady) { _TextAppearance_Holo_Small_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Small_Inverse"); _TextAppearance_Holo_Small_InverseReady = true; } return _TextAppearance_Holo_Small_InverseContent; } }
            private static int _TextAppearance_Holo_Small_InverseContent = default;
            private static bool _TextAppearance_Holo_Small_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget { get { if (!_TextAppearance_Holo_WidgetReady) { _TextAppearance_Holo_WidgetContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget"); _TextAppearance_Holo_WidgetReady = true; } return _TextAppearance_Holo_WidgetContent; } }
            private static int _TextAppearance_Holo_WidgetContent = default;
            private static bool _TextAppearance_Holo_WidgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_ActionBar_Menu"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_ActionBar_Menu { get { if (!_TextAppearance_Holo_Widget_ActionBar_MenuReady) { _TextAppearance_Holo_Widget_ActionBar_MenuContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_ActionBar_Menu"); _TextAppearance_Holo_Widget_ActionBar_MenuReady = true; } return _TextAppearance_Holo_Widget_ActionBar_MenuContent; } }
            private static int _TextAppearance_Holo_Widget_ActionBar_MenuContent = default;
            private static bool _TextAppearance_Holo_Widget_ActionBar_MenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_ActionBar_Subtitle"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_ActionBar_Subtitle { get { if (!_TextAppearance_Holo_Widget_ActionBar_SubtitleReady) { _TextAppearance_Holo_Widget_ActionBar_SubtitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_ActionBar_Subtitle"); _TextAppearance_Holo_Widget_ActionBar_SubtitleReady = true; } return _TextAppearance_Holo_Widget_ActionBar_SubtitleContent; } }
            private static int _TextAppearance_Holo_Widget_ActionBar_SubtitleContent = default;
            private static bool _TextAppearance_Holo_Widget_ActionBar_SubtitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_ActionBar_Subtitle_Inverse"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_ActionBar_Subtitle_Inverse { get { if (!_TextAppearance_Holo_Widget_ActionBar_Subtitle_InverseReady) { _TextAppearance_Holo_Widget_ActionBar_Subtitle_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_ActionBar_Subtitle_Inverse"); _TextAppearance_Holo_Widget_ActionBar_Subtitle_InverseReady = true; } return _TextAppearance_Holo_Widget_ActionBar_Subtitle_InverseContent; } }
            private static int _TextAppearance_Holo_Widget_ActionBar_Subtitle_InverseContent = default;
            private static bool _TextAppearance_Holo_Widget_ActionBar_Subtitle_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_ActionBar_Title"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_ActionBar_Title { get { if (!_TextAppearance_Holo_Widget_ActionBar_TitleReady) { _TextAppearance_Holo_Widget_ActionBar_TitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_ActionBar_Title"); _TextAppearance_Holo_Widget_ActionBar_TitleReady = true; } return _TextAppearance_Holo_Widget_ActionBar_TitleContent; } }
            private static int _TextAppearance_Holo_Widget_ActionBar_TitleContent = default;
            private static bool _TextAppearance_Holo_Widget_ActionBar_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_ActionBar_Title_Inverse"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_ActionBar_Title_Inverse { get { if (!_TextAppearance_Holo_Widget_ActionBar_Title_InverseReady) { _TextAppearance_Holo_Widget_ActionBar_Title_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_ActionBar_Title_Inverse"); _TextAppearance_Holo_Widget_ActionBar_Title_InverseReady = true; } return _TextAppearance_Holo_Widget_ActionBar_Title_InverseContent; } }
            private static int _TextAppearance_Holo_Widget_ActionBar_Title_InverseContent = default;
            private static bool _TextAppearance_Holo_Widget_ActionBar_Title_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_ActionMode_Subtitle"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_ActionMode_Subtitle { get { if (!_TextAppearance_Holo_Widget_ActionMode_SubtitleReady) { _TextAppearance_Holo_Widget_ActionMode_SubtitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_ActionMode_Subtitle"); _TextAppearance_Holo_Widget_ActionMode_SubtitleReady = true; } return _TextAppearance_Holo_Widget_ActionMode_SubtitleContent; } }
            private static int _TextAppearance_Holo_Widget_ActionMode_SubtitleContent = default;
            private static bool _TextAppearance_Holo_Widget_ActionMode_SubtitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_ActionMode_Subtitle_Inverse"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_ActionMode_Subtitle_Inverse { get { if (!_TextAppearance_Holo_Widget_ActionMode_Subtitle_InverseReady) { _TextAppearance_Holo_Widget_ActionMode_Subtitle_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_ActionMode_Subtitle_Inverse"); _TextAppearance_Holo_Widget_ActionMode_Subtitle_InverseReady = true; } return _TextAppearance_Holo_Widget_ActionMode_Subtitle_InverseContent; } }
            private static int _TextAppearance_Holo_Widget_ActionMode_Subtitle_InverseContent = default;
            private static bool _TextAppearance_Holo_Widget_ActionMode_Subtitle_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_ActionMode_Title"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_ActionMode_Title { get { if (!_TextAppearance_Holo_Widget_ActionMode_TitleReady) { _TextAppearance_Holo_Widget_ActionMode_TitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_ActionMode_Title"); _TextAppearance_Holo_Widget_ActionMode_TitleReady = true; } return _TextAppearance_Holo_Widget_ActionMode_TitleContent; } }
            private static int _TextAppearance_Holo_Widget_ActionMode_TitleContent = default;
            private static bool _TextAppearance_Holo_Widget_ActionMode_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_ActionMode_Title_Inverse"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_ActionMode_Title_Inverse { get { if (!_TextAppearance_Holo_Widget_ActionMode_Title_InverseReady) { _TextAppearance_Holo_Widget_ActionMode_Title_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_ActionMode_Title_Inverse"); _TextAppearance_Holo_Widget_ActionMode_Title_InverseReady = true; } return _TextAppearance_Holo_Widget_ActionMode_Title_InverseContent; } }
            private static int _TextAppearance_Holo_Widget_ActionMode_Title_InverseContent = default;
            private static bool _TextAppearance_Holo_Widget_ActionMode_Title_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_Button"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_Button { get { if (!_TextAppearance_Holo_Widget_ButtonReady) { _TextAppearance_Holo_Widget_ButtonContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_Button"); _TextAppearance_Holo_Widget_ButtonReady = true; } return _TextAppearance_Holo_Widget_ButtonContent; } }
            private static int _TextAppearance_Holo_Widget_ButtonContent = default;
            private static bool _TextAppearance_Holo_Widget_ButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_DropDownHint"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_DropDownHint { get { if (!_TextAppearance_Holo_Widget_DropDownHintReady) { _TextAppearance_Holo_Widget_DropDownHintContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_DropDownHint"); _TextAppearance_Holo_Widget_DropDownHintReady = true; } return _TextAppearance_Holo_Widget_DropDownHintContent; } }
            private static int _TextAppearance_Holo_Widget_DropDownHintContent = default;
            private static bool _TextAppearance_Holo_Widget_DropDownHintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_DropDownItem"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_DropDownItem { get { if (!_TextAppearance_Holo_Widget_DropDownItemReady) { _TextAppearance_Holo_Widget_DropDownItemContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_DropDownItem"); _TextAppearance_Holo_Widget_DropDownItemReady = true; } return _TextAppearance_Holo_Widget_DropDownItemContent; } }
            private static int _TextAppearance_Holo_Widget_DropDownItemContent = default;
            private static bool _TextAppearance_Holo_Widget_DropDownItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_EditText"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_EditText { get { if (!_TextAppearance_Holo_Widget_EditTextReady) { _TextAppearance_Holo_Widget_EditTextContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_EditText"); _TextAppearance_Holo_Widget_EditTextReady = true; } return _TextAppearance_Holo_Widget_EditTextContent; } }
            private static int _TextAppearance_Holo_Widget_EditTextContent = default;
            private static bool _TextAppearance_Holo_Widget_EditTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_IconMenu_Item"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_IconMenu_Item { get { if (!_TextAppearance_Holo_Widget_IconMenu_ItemReady) { _TextAppearance_Holo_Widget_IconMenu_ItemContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_IconMenu_Item"); _TextAppearance_Holo_Widget_IconMenu_ItemReady = true; } return _TextAppearance_Holo_Widget_IconMenu_ItemContent; } }
            private static int _TextAppearance_Holo_Widget_IconMenu_ItemContent = default;
            private static bool _TextAppearance_Holo_Widget_IconMenu_ItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_PopupMenu"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_PopupMenu { get { if (!_TextAppearance_Holo_Widget_PopupMenuReady) { _TextAppearance_Holo_Widget_PopupMenuContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_PopupMenu"); _TextAppearance_Holo_Widget_PopupMenuReady = true; } return _TextAppearance_Holo_Widget_PopupMenuContent; } }
            private static int _TextAppearance_Holo_Widget_PopupMenuContent = default;
            private static bool _TextAppearance_Holo_Widget_PopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_PopupMenu_Large"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_PopupMenu_Large { get { if (!_TextAppearance_Holo_Widget_PopupMenu_LargeReady) { _TextAppearance_Holo_Widget_PopupMenu_LargeContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_PopupMenu_Large"); _TextAppearance_Holo_Widget_PopupMenu_LargeReady = true; } return _TextAppearance_Holo_Widget_PopupMenu_LargeContent; } }
            private static int _TextAppearance_Holo_Widget_PopupMenu_LargeContent = default;
            private static bool _TextAppearance_Holo_Widget_PopupMenu_LargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_PopupMenu_Small"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_PopupMenu_Small { get { if (!_TextAppearance_Holo_Widget_PopupMenu_SmallReady) { _TextAppearance_Holo_Widget_PopupMenu_SmallContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_PopupMenu_Small"); _TextAppearance_Holo_Widget_PopupMenu_SmallReady = true; } return _TextAppearance_Holo_Widget_PopupMenu_SmallContent; } }
            private static int _TextAppearance_Holo_Widget_PopupMenu_SmallContent = default;
            private static bool _TextAppearance_Holo_Widget_PopupMenu_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_TabWidget"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_TabWidget { get { if (!_TextAppearance_Holo_Widget_TabWidgetReady) { _TextAppearance_Holo_Widget_TabWidgetContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_TabWidget"); _TextAppearance_Holo_Widget_TabWidgetReady = true; } return _TextAppearance_Holo_Widget_TabWidgetContent; } }
            private static int _TextAppearance_Holo_Widget_TabWidgetContent = default;
            private static bool _TextAppearance_Holo_Widget_TabWidgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_TextView"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_TextView { get { if (!_TextAppearance_Holo_Widget_TextViewReady) { _TextAppearance_Holo_Widget_TextViewContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_TextView"); _TextAppearance_Holo_Widget_TextViewReady = true; } return _TextAppearance_Holo_Widget_TextViewContent; } }
            private static int _TextAppearance_Holo_Widget_TextViewContent = default;
            private static bool _TextAppearance_Holo_Widget_TextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_TextView_PopupMenu"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_TextView_PopupMenu { get { if (!_TextAppearance_Holo_Widget_TextView_PopupMenuReady) { _TextAppearance_Holo_Widget_TextView_PopupMenuContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_TextView_PopupMenu"); _TextAppearance_Holo_Widget_TextView_PopupMenuReady = true; } return _TextAppearance_Holo_Widget_TextView_PopupMenuContent; } }
            private static int _TextAppearance_Holo_Widget_TextView_PopupMenuContent = default;
            private static bool _TextAppearance_Holo_Widget_TextView_PopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_Widget_TextView_SpinnerItem"/>
            /// </summary>
            public static int TextAppearance_Holo_Widget_TextView_SpinnerItem { get { if (!_TextAppearance_Holo_Widget_TextView_SpinnerItemReady) { _TextAppearance_Holo_Widget_TextView_SpinnerItemContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_Widget_TextView_SpinnerItem"); _TextAppearance_Holo_Widget_TextView_SpinnerItemReady = true; } return _TextAppearance_Holo_Widget_TextView_SpinnerItemContent; } }
            private static int _TextAppearance_Holo_Widget_TextView_SpinnerItemContent = default;
            private static bool _TextAppearance_Holo_Widget_TextView_SpinnerItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Holo_WindowTitle"/>
            /// </summary>
            public static int TextAppearance_Holo_WindowTitle { get { if (!_TextAppearance_Holo_WindowTitleReady) { _TextAppearance_Holo_WindowTitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Holo_WindowTitle"); _TextAppearance_Holo_WindowTitleReady = true; } return _TextAppearance_Holo_WindowTitleContent; } }
            private static int _TextAppearance_Holo_WindowTitleContent = default;
            private static bool _TextAppearance_Holo_WindowTitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Inverse"/>
            /// </summary>
            public static int TextAppearance_Inverse { get { if (!_TextAppearance_InverseReady) { _TextAppearance_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Inverse"); _TextAppearance_InverseReady = true; } return _TextAppearance_InverseContent; } }
            private static int _TextAppearance_InverseContent = default;
            private static bool _TextAppearance_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Large"/>
            /// </summary>
            public static int TextAppearance_Large { get { if (!_TextAppearance_LargeReady) { _TextAppearance_LargeContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Large"); _TextAppearance_LargeReady = true; } return _TextAppearance_LargeContent; } }
            private static int _TextAppearance_LargeContent = default;
            private static bool _TextAppearance_LargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Large_Inverse"/>
            /// </summary>
            public static int TextAppearance_Large_Inverse { get { if (!_TextAppearance_Large_InverseReady) { _TextAppearance_Large_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Large_Inverse"); _TextAppearance_Large_InverseReady = true; } return _TextAppearance_Large_InverseContent; } }
            private static int _TextAppearance_Large_InverseContent = default;
            private static bool _TextAppearance_Large_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material"/>
            /// </summary>
            public static int TextAppearance_Material { get { if (!_TextAppearance_MaterialReady) { _TextAppearance_MaterialContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material"); _TextAppearance_MaterialReady = true; } return _TextAppearance_MaterialContent; } }
            private static int _TextAppearance_MaterialContent = default;
            private static bool _TextAppearance_MaterialReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Body1"/>
            /// </summary>
            public static int TextAppearance_Material_Body1 { get { if (!_TextAppearance_Material_Body1Ready) { _TextAppearance_Material_Body1Content = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Body1"); _TextAppearance_Material_Body1Ready = true; } return _TextAppearance_Material_Body1Content; } }
            private static int _TextAppearance_Material_Body1Content = default;
            private static bool _TextAppearance_Material_Body1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Body2"/>
            /// </summary>
            public static int TextAppearance_Material_Body2 { get { if (!_TextAppearance_Material_Body2Ready) { _TextAppearance_Material_Body2Content = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Body2"); _TextAppearance_Material_Body2Ready = true; } return _TextAppearance_Material_Body2Content; } }
            private static int _TextAppearance_Material_Body2Content = default;
            private static bool _TextAppearance_Material_Body2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Button"/>
            /// </summary>
            public static int TextAppearance_Material_Button { get { if (!_TextAppearance_Material_ButtonReady) { _TextAppearance_Material_ButtonContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Button"); _TextAppearance_Material_ButtonReady = true; } return _TextAppearance_Material_ButtonContent; } }
            private static int _TextAppearance_Material_ButtonContent = default;
            private static bool _TextAppearance_Material_ButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Caption"/>
            /// </summary>
            public static int TextAppearance_Material_Caption { get { if (!_TextAppearance_Material_CaptionReady) { _TextAppearance_Material_CaptionContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Caption"); _TextAppearance_Material_CaptionReady = true; } return _TextAppearance_Material_CaptionContent; } }
            private static int _TextAppearance_Material_CaptionContent = default;
            private static bool _TextAppearance_Material_CaptionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_DialogWindowTitle"/>
            /// </summary>
            public static int TextAppearance_Material_DialogWindowTitle { get { if (!_TextAppearance_Material_DialogWindowTitleReady) { _TextAppearance_Material_DialogWindowTitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_DialogWindowTitle"); _TextAppearance_Material_DialogWindowTitleReady = true; } return _TextAppearance_Material_DialogWindowTitleContent; } }
            private static int _TextAppearance_Material_DialogWindowTitleContent = default;
            private static bool _TextAppearance_Material_DialogWindowTitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Display1"/>
            /// </summary>
            public static int TextAppearance_Material_Display1 { get { if (!_TextAppearance_Material_Display1Ready) { _TextAppearance_Material_Display1Content = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Display1"); _TextAppearance_Material_Display1Ready = true; } return _TextAppearance_Material_Display1Content; } }
            private static int _TextAppearance_Material_Display1Content = default;
            private static bool _TextAppearance_Material_Display1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Display2"/>
            /// </summary>
            public static int TextAppearance_Material_Display2 { get { if (!_TextAppearance_Material_Display2Ready) { _TextAppearance_Material_Display2Content = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Display2"); _TextAppearance_Material_Display2Ready = true; } return _TextAppearance_Material_Display2Content; } }
            private static int _TextAppearance_Material_Display2Content = default;
            private static bool _TextAppearance_Material_Display2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Display3"/>
            /// </summary>
            public static int TextAppearance_Material_Display3 { get { if (!_TextAppearance_Material_Display3Ready) { _TextAppearance_Material_Display3Content = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Display3"); _TextAppearance_Material_Display3Ready = true; } return _TextAppearance_Material_Display3Content; } }
            private static int _TextAppearance_Material_Display3Content = default;
            private static bool _TextAppearance_Material_Display3Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Display4"/>
            /// </summary>
            public static int TextAppearance_Material_Display4 { get { if (!_TextAppearance_Material_Display4Ready) { _TextAppearance_Material_Display4Content = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Display4"); _TextAppearance_Material_Display4Ready = true; } return _TextAppearance_Material_Display4Content; } }
            private static int _TextAppearance_Material_Display4Content = default;
            private static bool _TextAppearance_Material_Display4Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Headline"/>
            /// </summary>
            public static int TextAppearance_Material_Headline { get { if (!_TextAppearance_Material_HeadlineReady) { _TextAppearance_Material_HeadlineContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Headline"); _TextAppearance_Material_HeadlineReady = true; } return _TextAppearance_Material_HeadlineContent; } }
            private static int _TextAppearance_Material_HeadlineContent = default;
            private static bool _TextAppearance_Material_HeadlineReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Inverse"/>
            /// </summary>
            public static int TextAppearance_Material_Inverse { get { if (!_TextAppearance_Material_InverseReady) { _TextAppearance_Material_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Inverse"); _TextAppearance_Material_InverseReady = true; } return _TextAppearance_Material_InverseContent; } }
            private static int _TextAppearance_Material_InverseContent = default;
            private static bool _TextAppearance_Material_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Large"/>
            /// </summary>
            public static int TextAppearance_Material_Large { get { if (!_TextAppearance_Material_LargeReady) { _TextAppearance_Material_LargeContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Large"); _TextAppearance_Material_LargeReady = true; } return _TextAppearance_Material_LargeContent; } }
            private static int _TextAppearance_Material_LargeContent = default;
            private static bool _TextAppearance_Material_LargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Large_Inverse"/>
            /// </summary>
            public static int TextAppearance_Material_Large_Inverse { get { if (!_TextAppearance_Material_Large_InverseReady) { _TextAppearance_Material_Large_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Large_Inverse"); _TextAppearance_Material_Large_InverseReady = true; } return _TextAppearance_Material_Large_InverseContent; } }
            private static int _TextAppearance_Material_Large_InverseContent = default;
            private static bool _TextAppearance_Material_Large_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Medium"/>
            /// </summary>
            public static int TextAppearance_Material_Medium { get { if (!_TextAppearance_Material_MediumReady) { _TextAppearance_Material_MediumContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Medium"); _TextAppearance_Material_MediumReady = true; } return _TextAppearance_Material_MediumContent; } }
            private static int _TextAppearance_Material_MediumContent = default;
            private static bool _TextAppearance_Material_MediumReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Medium_Inverse"/>
            /// </summary>
            public static int TextAppearance_Material_Medium_Inverse { get { if (!_TextAppearance_Material_Medium_InverseReady) { _TextAppearance_Material_Medium_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Medium_Inverse"); _TextAppearance_Material_Medium_InverseReady = true; } return _TextAppearance_Material_Medium_InverseContent; } }
            private static int _TextAppearance_Material_Medium_InverseContent = default;
            private static bool _TextAppearance_Material_Medium_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Menu"/>
            /// </summary>
            public static int TextAppearance_Material_Menu { get { if (!_TextAppearance_Material_MenuReady) { _TextAppearance_Material_MenuContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Menu"); _TextAppearance_Material_MenuReady = true; } return _TextAppearance_Material_MenuContent; } }
            private static int _TextAppearance_Material_MenuContent = default;
            private static bool _TextAppearance_Material_MenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Notification"/>
            /// </summary>
            public static int TextAppearance_Material_Notification { get { if (!_TextAppearance_Material_NotificationReady) { _TextAppearance_Material_NotificationContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Notification"); _TextAppearance_Material_NotificationReady = true; } return _TextAppearance_Material_NotificationContent; } }
            private static int _TextAppearance_Material_NotificationContent = default;
            private static bool _TextAppearance_Material_NotificationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Notification_Emphasis"/>
            /// </summary>
            public static int TextAppearance_Material_Notification_Emphasis { get { if (!_TextAppearance_Material_Notification_EmphasisReady) { _TextAppearance_Material_Notification_EmphasisContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Notification_Emphasis"); _TextAppearance_Material_Notification_EmphasisReady = true; } return _TextAppearance_Material_Notification_EmphasisContent; } }
            private static int _TextAppearance_Material_Notification_EmphasisContent = default;
            private static bool _TextAppearance_Material_Notification_EmphasisReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Notification_Info"/>
            /// </summary>
            public static int TextAppearance_Material_Notification_Info { get { if (!_TextAppearance_Material_Notification_InfoReady) { _TextAppearance_Material_Notification_InfoContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Notification_Info"); _TextAppearance_Material_Notification_InfoReady = true; } return _TextAppearance_Material_Notification_InfoContent; } }
            private static int _TextAppearance_Material_Notification_InfoContent = default;
            private static bool _TextAppearance_Material_Notification_InfoReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Notification_Line2"/>
            /// </summary>
            public static int TextAppearance_Material_Notification_Line2 { get { if (!_TextAppearance_Material_Notification_Line2Ready) { _TextAppearance_Material_Notification_Line2Content = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Notification_Line2"); _TextAppearance_Material_Notification_Line2Ready = true; } return _TextAppearance_Material_Notification_Line2Content; } }
            private static int _TextAppearance_Material_Notification_Line2Content = default;
            private static bool _TextAppearance_Material_Notification_Line2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Notification_Time"/>
            /// </summary>
            public static int TextAppearance_Material_Notification_Time { get { if (!_TextAppearance_Material_Notification_TimeReady) { _TextAppearance_Material_Notification_TimeContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Notification_Time"); _TextAppearance_Material_Notification_TimeReady = true; } return _TextAppearance_Material_Notification_TimeContent; } }
            private static int _TextAppearance_Material_Notification_TimeContent = default;
            private static bool _TextAppearance_Material_Notification_TimeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Notification_Title"/>
            /// </summary>
            public static int TextAppearance_Material_Notification_Title { get { if (!_TextAppearance_Material_Notification_TitleReady) { _TextAppearance_Material_Notification_TitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Notification_Title"); _TextAppearance_Material_Notification_TitleReady = true; } return _TextAppearance_Material_Notification_TitleContent; } }
            private static int _TextAppearance_Material_Notification_TitleContent = default;
            private static bool _TextAppearance_Material_Notification_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_SearchResult_Subtitle"/>
            /// </summary>
            public static int TextAppearance_Material_SearchResult_Subtitle { get { if (!_TextAppearance_Material_SearchResult_SubtitleReady) { _TextAppearance_Material_SearchResult_SubtitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_SearchResult_Subtitle"); _TextAppearance_Material_SearchResult_SubtitleReady = true; } return _TextAppearance_Material_SearchResult_SubtitleContent; } }
            private static int _TextAppearance_Material_SearchResult_SubtitleContent = default;
            private static bool _TextAppearance_Material_SearchResult_SubtitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_SearchResult_Title"/>
            /// </summary>
            public static int TextAppearance_Material_SearchResult_Title { get { if (!_TextAppearance_Material_SearchResult_TitleReady) { _TextAppearance_Material_SearchResult_TitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_SearchResult_Title"); _TextAppearance_Material_SearchResult_TitleReady = true; } return _TextAppearance_Material_SearchResult_TitleContent; } }
            private static int _TextAppearance_Material_SearchResult_TitleContent = default;
            private static bool _TextAppearance_Material_SearchResult_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Small"/>
            /// </summary>
            public static int TextAppearance_Material_Small { get { if (!_TextAppearance_Material_SmallReady) { _TextAppearance_Material_SmallContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Small"); _TextAppearance_Material_SmallReady = true; } return _TextAppearance_Material_SmallContent; } }
            private static int _TextAppearance_Material_SmallContent = default;
            private static bool _TextAppearance_Material_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Small_Inverse"/>
            /// </summary>
            public static int TextAppearance_Material_Small_Inverse { get { if (!_TextAppearance_Material_Small_InverseReady) { _TextAppearance_Material_Small_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Small_Inverse"); _TextAppearance_Material_Small_InverseReady = true; } return _TextAppearance_Material_Small_InverseContent; } }
            private static int _TextAppearance_Material_Small_InverseContent = default;
            private static bool _TextAppearance_Material_Small_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Subhead"/>
            /// </summary>
            public static int TextAppearance_Material_Subhead { get { if (!_TextAppearance_Material_SubheadReady) { _TextAppearance_Material_SubheadContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Subhead"); _TextAppearance_Material_SubheadReady = true; } return _TextAppearance_Material_SubheadContent; } }
            private static int _TextAppearance_Material_SubheadContent = default;
            private static bool _TextAppearance_Material_SubheadReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Title"/>
            /// </summary>
            public static int TextAppearance_Material_Title { get { if (!_TextAppearance_Material_TitleReady) { _TextAppearance_Material_TitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Title"); _TextAppearance_Material_TitleReady = true; } return _TextAppearance_Material_TitleContent; } }
            private static int _TextAppearance_Material_TitleContent = default;
            private static bool _TextAppearance_Material_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget"/>
            /// </summary>
            public static int TextAppearance_Material_Widget { get { if (!_TextAppearance_Material_WidgetReady) { _TextAppearance_Material_WidgetContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget"); _TextAppearance_Material_WidgetReady = true; } return _TextAppearance_Material_WidgetContent; } }
            private static int _TextAppearance_Material_WidgetContent = default;
            private static bool _TextAppearance_Material_WidgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_ActionBar_Menu"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_ActionBar_Menu { get { if (!_TextAppearance_Material_Widget_ActionBar_MenuReady) { _TextAppearance_Material_Widget_ActionBar_MenuContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_ActionBar_Menu"); _TextAppearance_Material_Widget_ActionBar_MenuReady = true; } return _TextAppearance_Material_Widget_ActionBar_MenuContent; } }
            private static int _TextAppearance_Material_Widget_ActionBar_MenuContent = default;
            private static bool _TextAppearance_Material_Widget_ActionBar_MenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_ActionBar_Subtitle"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_ActionBar_Subtitle { get { if (!_TextAppearance_Material_Widget_ActionBar_SubtitleReady) { _TextAppearance_Material_Widget_ActionBar_SubtitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_ActionBar_Subtitle"); _TextAppearance_Material_Widget_ActionBar_SubtitleReady = true; } return _TextAppearance_Material_Widget_ActionBar_SubtitleContent; } }
            private static int _TextAppearance_Material_Widget_ActionBar_SubtitleContent = default;
            private static bool _TextAppearance_Material_Widget_ActionBar_SubtitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_ActionBar_Subtitle_Inverse"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_ActionBar_Subtitle_Inverse { get { if (!_TextAppearance_Material_Widget_ActionBar_Subtitle_InverseReady) { _TextAppearance_Material_Widget_ActionBar_Subtitle_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_ActionBar_Subtitle_Inverse"); _TextAppearance_Material_Widget_ActionBar_Subtitle_InverseReady = true; } return _TextAppearance_Material_Widget_ActionBar_Subtitle_InverseContent; } }
            private static int _TextAppearance_Material_Widget_ActionBar_Subtitle_InverseContent = default;
            private static bool _TextAppearance_Material_Widget_ActionBar_Subtitle_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_ActionBar_Title"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_ActionBar_Title { get { if (!_TextAppearance_Material_Widget_ActionBar_TitleReady) { _TextAppearance_Material_Widget_ActionBar_TitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_ActionBar_Title"); _TextAppearance_Material_Widget_ActionBar_TitleReady = true; } return _TextAppearance_Material_Widget_ActionBar_TitleContent; } }
            private static int _TextAppearance_Material_Widget_ActionBar_TitleContent = default;
            private static bool _TextAppearance_Material_Widget_ActionBar_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_ActionBar_Title_Inverse"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_ActionBar_Title_Inverse { get { if (!_TextAppearance_Material_Widget_ActionBar_Title_InverseReady) { _TextAppearance_Material_Widget_ActionBar_Title_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_ActionBar_Title_Inverse"); _TextAppearance_Material_Widget_ActionBar_Title_InverseReady = true; } return _TextAppearance_Material_Widget_ActionBar_Title_InverseContent; } }
            private static int _TextAppearance_Material_Widget_ActionBar_Title_InverseContent = default;
            private static bool _TextAppearance_Material_Widget_ActionBar_Title_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_ActionMode_Subtitle"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_ActionMode_Subtitle { get { if (!_TextAppearance_Material_Widget_ActionMode_SubtitleReady) { _TextAppearance_Material_Widget_ActionMode_SubtitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_ActionMode_Subtitle"); _TextAppearance_Material_Widget_ActionMode_SubtitleReady = true; } return _TextAppearance_Material_Widget_ActionMode_SubtitleContent; } }
            private static int _TextAppearance_Material_Widget_ActionMode_SubtitleContent = default;
            private static bool _TextAppearance_Material_Widget_ActionMode_SubtitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_ActionMode_Subtitle_Inverse"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_ActionMode_Subtitle_Inverse { get { if (!_TextAppearance_Material_Widget_ActionMode_Subtitle_InverseReady) { _TextAppearance_Material_Widget_ActionMode_Subtitle_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_ActionMode_Subtitle_Inverse"); _TextAppearance_Material_Widget_ActionMode_Subtitle_InverseReady = true; } return _TextAppearance_Material_Widget_ActionMode_Subtitle_InverseContent; } }
            private static int _TextAppearance_Material_Widget_ActionMode_Subtitle_InverseContent = default;
            private static bool _TextAppearance_Material_Widget_ActionMode_Subtitle_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_ActionMode_Title"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_ActionMode_Title { get { if (!_TextAppearance_Material_Widget_ActionMode_TitleReady) { _TextAppearance_Material_Widget_ActionMode_TitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_ActionMode_Title"); _TextAppearance_Material_Widget_ActionMode_TitleReady = true; } return _TextAppearance_Material_Widget_ActionMode_TitleContent; } }
            private static int _TextAppearance_Material_Widget_ActionMode_TitleContent = default;
            private static bool _TextAppearance_Material_Widget_ActionMode_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_ActionMode_Title_Inverse"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_ActionMode_Title_Inverse { get { if (!_TextAppearance_Material_Widget_ActionMode_Title_InverseReady) { _TextAppearance_Material_Widget_ActionMode_Title_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_ActionMode_Title_Inverse"); _TextAppearance_Material_Widget_ActionMode_Title_InverseReady = true; } return _TextAppearance_Material_Widget_ActionMode_Title_InverseContent; } }
            private static int _TextAppearance_Material_Widget_ActionMode_Title_InverseContent = default;
            private static bool _TextAppearance_Material_Widget_ActionMode_Title_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_Button"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_Button { get { if (!_TextAppearance_Material_Widget_ButtonReady) { _TextAppearance_Material_Widget_ButtonContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_Button"); _TextAppearance_Material_Widget_ButtonReady = true; } return _TextAppearance_Material_Widget_ButtonContent; } }
            private static int _TextAppearance_Material_Widget_ButtonContent = default;
            private static bool _TextAppearance_Material_Widget_ButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_Button_Borderless_Colored"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_Button_Borderless_Colored { get { if (!_TextAppearance_Material_Widget_Button_Borderless_ColoredReady) { _TextAppearance_Material_Widget_Button_Borderless_ColoredContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_Button_Borderless_Colored"); _TextAppearance_Material_Widget_Button_Borderless_ColoredReady = true; } return _TextAppearance_Material_Widget_Button_Borderless_ColoredContent; } }
            private static int _TextAppearance_Material_Widget_Button_Borderless_ColoredContent = default;
            private static bool _TextAppearance_Material_Widget_Button_Borderless_ColoredReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_Button_Colored"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_Button_Colored { get { if (!_TextAppearance_Material_Widget_Button_ColoredReady) { _TextAppearance_Material_Widget_Button_ColoredContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_Button_Colored"); _TextAppearance_Material_Widget_Button_ColoredReady = true; } return _TextAppearance_Material_Widget_Button_ColoredContent; } }
            private static int _TextAppearance_Material_Widget_Button_ColoredContent = default;
            private static bool _TextAppearance_Material_Widget_Button_ColoredReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_Button_Inverse"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_Button_Inverse { get { if (!_TextAppearance_Material_Widget_Button_InverseReady) { _TextAppearance_Material_Widget_Button_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_Button_Inverse"); _TextAppearance_Material_Widget_Button_InverseReady = true; } return _TextAppearance_Material_Widget_Button_InverseContent; } }
            private static int _TextAppearance_Material_Widget_Button_InverseContent = default;
            private static bool _TextAppearance_Material_Widget_Button_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_DropDownHint"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_DropDownHint { get { if (!_TextAppearance_Material_Widget_DropDownHintReady) { _TextAppearance_Material_Widget_DropDownHintContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_DropDownHint"); _TextAppearance_Material_Widget_DropDownHintReady = true; } return _TextAppearance_Material_Widget_DropDownHintContent; } }
            private static int _TextAppearance_Material_Widget_DropDownHintContent = default;
            private static bool _TextAppearance_Material_Widget_DropDownHintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_DropDownItem"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_DropDownItem { get { if (!_TextAppearance_Material_Widget_DropDownItemReady) { _TextAppearance_Material_Widget_DropDownItemContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_DropDownItem"); _TextAppearance_Material_Widget_DropDownItemReady = true; } return _TextAppearance_Material_Widget_DropDownItemContent; } }
            private static int _TextAppearance_Material_Widget_DropDownItemContent = default;
            private static bool _TextAppearance_Material_Widget_DropDownItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_EditText"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_EditText { get { if (!_TextAppearance_Material_Widget_EditTextReady) { _TextAppearance_Material_Widget_EditTextContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_EditText"); _TextAppearance_Material_Widget_EditTextReady = true; } return _TextAppearance_Material_Widget_EditTextContent; } }
            private static int _TextAppearance_Material_Widget_EditTextContent = default;
            private static bool _TextAppearance_Material_Widget_EditTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_IconMenu_Item"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_IconMenu_Item { get { if (!_TextAppearance_Material_Widget_IconMenu_ItemReady) { _TextAppearance_Material_Widget_IconMenu_ItemContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_IconMenu_Item"); _TextAppearance_Material_Widget_IconMenu_ItemReady = true; } return _TextAppearance_Material_Widget_IconMenu_ItemContent; } }
            private static int _TextAppearance_Material_Widget_IconMenu_ItemContent = default;
            private static bool _TextAppearance_Material_Widget_IconMenu_ItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_PopupMenu"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_PopupMenu { get { if (!_TextAppearance_Material_Widget_PopupMenuReady) { _TextAppearance_Material_Widget_PopupMenuContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_PopupMenu"); _TextAppearance_Material_Widget_PopupMenuReady = true; } return _TextAppearance_Material_Widget_PopupMenuContent; } }
            private static int _TextAppearance_Material_Widget_PopupMenuContent = default;
            private static bool _TextAppearance_Material_Widget_PopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_PopupMenu_Large"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_PopupMenu_Large { get { if (!_TextAppearance_Material_Widget_PopupMenu_LargeReady) { _TextAppearance_Material_Widget_PopupMenu_LargeContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_PopupMenu_Large"); _TextAppearance_Material_Widget_PopupMenu_LargeReady = true; } return _TextAppearance_Material_Widget_PopupMenu_LargeContent; } }
            private static int _TextAppearance_Material_Widget_PopupMenu_LargeContent = default;
            private static bool _TextAppearance_Material_Widget_PopupMenu_LargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_PopupMenu_Small"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_PopupMenu_Small { get { if (!_TextAppearance_Material_Widget_PopupMenu_SmallReady) { _TextAppearance_Material_Widget_PopupMenu_SmallContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_PopupMenu_Small"); _TextAppearance_Material_Widget_PopupMenu_SmallReady = true; } return _TextAppearance_Material_Widget_PopupMenu_SmallContent; } }
            private static int _TextAppearance_Material_Widget_PopupMenu_SmallContent = default;
            private static bool _TextAppearance_Material_Widget_PopupMenu_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_TabWidget"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_TabWidget { get { if (!_TextAppearance_Material_Widget_TabWidgetReady) { _TextAppearance_Material_Widget_TabWidgetContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_TabWidget"); _TextAppearance_Material_Widget_TabWidgetReady = true; } return _TextAppearance_Material_Widget_TabWidgetContent; } }
            private static int _TextAppearance_Material_Widget_TabWidgetContent = default;
            private static bool _TextAppearance_Material_Widget_TabWidgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_TextView"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_TextView { get { if (!_TextAppearance_Material_Widget_TextViewReady) { _TextAppearance_Material_Widget_TextViewContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_TextView"); _TextAppearance_Material_Widget_TextViewReady = true; } return _TextAppearance_Material_Widget_TextViewContent; } }
            private static int _TextAppearance_Material_Widget_TextViewContent = default;
            private static bool _TextAppearance_Material_Widget_TextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_TextView_PopupMenu"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_TextView_PopupMenu { get { if (!_TextAppearance_Material_Widget_TextView_PopupMenuReady) { _TextAppearance_Material_Widget_TextView_PopupMenuContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_TextView_PopupMenu"); _TextAppearance_Material_Widget_TextView_PopupMenuReady = true; } return _TextAppearance_Material_Widget_TextView_PopupMenuContent; } }
            private static int _TextAppearance_Material_Widget_TextView_PopupMenuContent = default;
            private static bool _TextAppearance_Material_Widget_TextView_PopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_TextView_SpinnerItem"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_TextView_SpinnerItem { get { if (!_TextAppearance_Material_Widget_TextView_SpinnerItemReady) { _TextAppearance_Material_Widget_TextView_SpinnerItemContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_TextView_SpinnerItem"); _TextAppearance_Material_Widget_TextView_SpinnerItemReady = true; } return _TextAppearance_Material_Widget_TextView_SpinnerItemContent; } }
            private static int _TextAppearance_Material_Widget_TextView_SpinnerItemContent = default;
            private static bool _TextAppearance_Material_Widget_TextView_SpinnerItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_Toolbar_Subtitle"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_Toolbar_Subtitle { get { if (!_TextAppearance_Material_Widget_Toolbar_SubtitleReady) { _TextAppearance_Material_Widget_Toolbar_SubtitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_Toolbar_Subtitle"); _TextAppearance_Material_Widget_Toolbar_SubtitleReady = true; } return _TextAppearance_Material_Widget_Toolbar_SubtitleContent; } }
            private static int _TextAppearance_Material_Widget_Toolbar_SubtitleContent = default;
            private static bool _TextAppearance_Material_Widget_Toolbar_SubtitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_Widget_Toolbar_Title"/>
            /// </summary>
            public static int TextAppearance_Material_Widget_Toolbar_Title { get { if (!_TextAppearance_Material_Widget_Toolbar_TitleReady) { _TextAppearance_Material_Widget_Toolbar_TitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_Widget_Toolbar_Title"); _TextAppearance_Material_Widget_Toolbar_TitleReady = true; } return _TextAppearance_Material_Widget_Toolbar_TitleContent; } }
            private static int _TextAppearance_Material_Widget_Toolbar_TitleContent = default;
            private static bool _TextAppearance_Material_Widget_Toolbar_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Material_WindowTitle"/>
            /// </summary>
            public static int TextAppearance_Material_WindowTitle { get { if (!_TextAppearance_Material_WindowTitleReady) { _TextAppearance_Material_WindowTitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Material_WindowTitle"); _TextAppearance_Material_WindowTitleReady = true; } return _TextAppearance_Material_WindowTitleContent; } }
            private static int _TextAppearance_Material_WindowTitleContent = default;
            private static bool _TextAppearance_Material_WindowTitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Medium"/>
            /// </summary>
            public static int TextAppearance_Medium { get { if (!_TextAppearance_MediumReady) { _TextAppearance_MediumContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Medium"); _TextAppearance_MediumReady = true; } return _TextAppearance_MediumContent; } }
            private static int _TextAppearance_MediumContent = default;
            private static bool _TextAppearance_MediumReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Medium_Inverse"/>
            /// </summary>
            public static int TextAppearance_Medium_Inverse { get { if (!_TextAppearance_Medium_InverseReady) { _TextAppearance_Medium_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Medium_Inverse"); _TextAppearance_Medium_InverseReady = true; } return _TextAppearance_Medium_InverseContent; } }
            private static int _TextAppearance_Medium_InverseContent = default;
            private static bool _TextAppearance_Medium_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Small"/>
            /// </summary>
            public static int TextAppearance_Small { get { if (!_TextAppearance_SmallReady) { _TextAppearance_SmallContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Small"); _TextAppearance_SmallReady = true; } return _TextAppearance_SmallContent; } }
            private static int _TextAppearance_SmallContent = default;
            private static bool _TextAppearance_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Small_Inverse"/>
            /// </summary>
            public static int TextAppearance_Small_Inverse { get { if (!_TextAppearance_Small_InverseReady) { _TextAppearance_Small_InverseContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Small_Inverse"); _TextAppearance_Small_InverseReady = true; } return _TextAppearance_Small_InverseContent; } }
            private static int _TextAppearance_Small_InverseContent = default;
            private static bool _TextAppearance_Small_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_StatusBar_EventContent"/>
            /// </summary>
            public static int TextAppearance_StatusBar_EventContent { get { if (!_TextAppearance_StatusBar_EventContentReady) { _TextAppearance_StatusBar_EventContentContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_StatusBar_EventContent"); _TextAppearance_StatusBar_EventContentReady = true; } return _TextAppearance_StatusBar_EventContentContent; } }
            private static int _TextAppearance_StatusBar_EventContentContent = default;
            private static bool _TextAppearance_StatusBar_EventContentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_StatusBar_EventContent_Title"/>
            /// </summary>
            public static int TextAppearance_StatusBar_EventContent_Title { get { if (!_TextAppearance_StatusBar_EventContent_TitleReady) { _TextAppearance_StatusBar_EventContent_TitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_StatusBar_EventContent_Title"); _TextAppearance_StatusBar_EventContent_TitleReady = true; } return _TextAppearance_StatusBar_EventContent_TitleContent; } }
            private static int _TextAppearance_StatusBar_EventContent_TitleContent = default;
            private static bool _TextAppearance_StatusBar_EventContent_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_StatusBar_Icon"/>
            /// </summary>
            public static int TextAppearance_StatusBar_Icon { get { if (!_TextAppearance_StatusBar_IconReady) { _TextAppearance_StatusBar_IconContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_StatusBar_Icon"); _TextAppearance_StatusBar_IconReady = true; } return _TextAppearance_StatusBar_IconContent; } }
            private static int _TextAppearance_StatusBar_IconContent = default;
            private static bool _TextAppearance_StatusBar_IconReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_StatusBar_Title"/>
            /// </summary>
            public static int TextAppearance_StatusBar_Title { get { if (!_TextAppearance_StatusBar_TitleReady) { _TextAppearance_StatusBar_TitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_StatusBar_Title"); _TextAppearance_StatusBar_TitleReady = true; } return _TextAppearance_StatusBar_TitleContent; } }
            private static int _TextAppearance_StatusBar_TitleContent = default;
            private static bool _TextAppearance_StatusBar_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_SuggestionHighlight"/>
            /// </summary>
            public static int TextAppearance_SuggestionHighlight { get { if (!_TextAppearance_SuggestionHighlightReady) { _TextAppearance_SuggestionHighlightContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_SuggestionHighlight"); _TextAppearance_SuggestionHighlightReady = true; } return _TextAppearance_SuggestionHighlightContent; } }
            private static int _TextAppearance_SuggestionHighlightContent = default;
            private static bool _TextAppearance_SuggestionHighlightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Theme"/>
            /// </summary>
            public static int TextAppearance_Theme { get { if (!_TextAppearance_ThemeReady) { _TextAppearance_ThemeContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Theme"); _TextAppearance_ThemeReady = true; } return _TextAppearance_ThemeContent; } }
            private static int _TextAppearance_ThemeContent = default;
            private static bool _TextAppearance_ThemeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Theme_Dialog"/>
            /// </summary>
            public static int TextAppearance_Theme_Dialog { get { if (!_TextAppearance_Theme_DialogReady) { _TextAppearance_Theme_DialogContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Theme_Dialog"); _TextAppearance_Theme_DialogReady = true; } return _TextAppearance_Theme_DialogContent; } }
            private static int _TextAppearance_Theme_DialogContent = default;
            private static bool _TextAppearance_Theme_DialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Widget"/>
            /// </summary>
            public static int TextAppearance_Widget { get { if (!_TextAppearance_WidgetReady) { _TextAppearance_WidgetContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Widget"); _TextAppearance_WidgetReady = true; } return _TextAppearance_WidgetContent; } }
            private static int _TextAppearance_WidgetContent = default;
            private static bool _TextAppearance_WidgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Widget_Button"/>
            /// </summary>
            public static int TextAppearance_Widget_Button { get { if (!_TextAppearance_Widget_ButtonReady) { _TextAppearance_Widget_ButtonContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Widget_Button"); _TextAppearance_Widget_ButtonReady = true; } return _TextAppearance_Widget_ButtonContent; } }
            private static int _TextAppearance_Widget_ButtonContent = default;
            private static bool _TextAppearance_Widget_ButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Widget_DropDownHint"/>
            /// </summary>
            public static int TextAppearance_Widget_DropDownHint { get { if (!_TextAppearance_Widget_DropDownHintReady) { _TextAppearance_Widget_DropDownHintContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Widget_DropDownHint"); _TextAppearance_Widget_DropDownHintReady = true; } return _TextAppearance_Widget_DropDownHintContent; } }
            private static int _TextAppearance_Widget_DropDownHintContent = default;
            private static bool _TextAppearance_Widget_DropDownHintReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Widget_DropDownItem"/>
            /// </summary>
            public static int TextAppearance_Widget_DropDownItem { get { if (!_TextAppearance_Widget_DropDownItemReady) { _TextAppearance_Widget_DropDownItemContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Widget_DropDownItem"); _TextAppearance_Widget_DropDownItemReady = true; } return _TextAppearance_Widget_DropDownItemContent; } }
            private static int _TextAppearance_Widget_DropDownItemContent = default;
            private static bool _TextAppearance_Widget_DropDownItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Widget_EditText"/>
            /// </summary>
            public static int TextAppearance_Widget_EditText { get { if (!_TextAppearance_Widget_EditTextReady) { _TextAppearance_Widget_EditTextContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Widget_EditText"); _TextAppearance_Widget_EditTextReady = true; } return _TextAppearance_Widget_EditTextContent; } }
            private static int _TextAppearance_Widget_EditTextContent = default;
            private static bool _TextAppearance_Widget_EditTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Widget_IconMenu_Item"/>
            /// </summary>
            public static int TextAppearance_Widget_IconMenu_Item { get { if (!_TextAppearance_Widget_IconMenu_ItemReady) { _TextAppearance_Widget_IconMenu_ItemContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Widget_IconMenu_Item"); _TextAppearance_Widget_IconMenu_ItemReady = true; } return _TextAppearance_Widget_IconMenu_ItemContent; } }
            private static int _TextAppearance_Widget_IconMenu_ItemContent = default;
            private static bool _TextAppearance_Widget_IconMenu_ItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Widget_PopupMenu_Large"/>
            /// </summary>
            public static int TextAppearance_Widget_PopupMenu_Large { get { if (!_TextAppearance_Widget_PopupMenu_LargeReady) { _TextAppearance_Widget_PopupMenu_LargeContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Widget_PopupMenu_Large"); _TextAppearance_Widget_PopupMenu_LargeReady = true; } return _TextAppearance_Widget_PopupMenu_LargeContent; } }
            private static int _TextAppearance_Widget_PopupMenu_LargeContent = default;
            private static bool _TextAppearance_Widget_PopupMenu_LargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Widget_PopupMenu_Small"/>
            /// </summary>
            public static int TextAppearance_Widget_PopupMenu_Small { get { if (!_TextAppearance_Widget_PopupMenu_SmallReady) { _TextAppearance_Widget_PopupMenu_SmallContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Widget_PopupMenu_Small"); _TextAppearance_Widget_PopupMenu_SmallReady = true; } return _TextAppearance_Widget_PopupMenu_SmallContent; } }
            private static int _TextAppearance_Widget_PopupMenu_SmallContent = default;
            private static bool _TextAppearance_Widget_PopupMenu_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Widget_TabWidget"/>
            /// </summary>
            public static int TextAppearance_Widget_TabWidget { get { if (!_TextAppearance_Widget_TabWidgetReady) { _TextAppearance_Widget_TabWidgetContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Widget_TabWidget"); _TextAppearance_Widget_TabWidgetReady = true; } return _TextAppearance_Widget_TabWidgetContent; } }
            private static int _TextAppearance_Widget_TabWidgetContent = default;
            private static bool _TextAppearance_Widget_TabWidgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Widget_TextView"/>
            /// </summary>
            public static int TextAppearance_Widget_TextView { get { if (!_TextAppearance_Widget_TextViewReady) { _TextAppearance_Widget_TextViewContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Widget_TextView"); _TextAppearance_Widget_TextViewReady = true; } return _TextAppearance_Widget_TextViewContent; } }
            private static int _TextAppearance_Widget_TextViewContent = default;
            private static bool _TextAppearance_Widget_TextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Widget_TextView_PopupMenu"/>
            /// </summary>
            public static int TextAppearance_Widget_TextView_PopupMenu { get { if (!_TextAppearance_Widget_TextView_PopupMenuReady) { _TextAppearance_Widget_TextView_PopupMenuContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Widget_TextView_PopupMenu"); _TextAppearance_Widget_TextView_PopupMenuReady = true; } return _TextAppearance_Widget_TextView_PopupMenuContent; } }
            private static int _TextAppearance_Widget_TextView_PopupMenuContent = default;
            private static bool _TextAppearance_Widget_TextView_PopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_Widget_TextView_SpinnerItem"/>
            /// </summary>
            public static int TextAppearance_Widget_TextView_SpinnerItem { get { if (!_TextAppearance_Widget_TextView_SpinnerItemReady) { _TextAppearance_Widget_TextView_SpinnerItemContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_Widget_TextView_SpinnerItem"); _TextAppearance_Widget_TextView_SpinnerItemReady = true; } return _TextAppearance_Widget_TextView_SpinnerItemContent; } }
            private static int _TextAppearance_Widget_TextView_SpinnerItemContent = default;
            private static bool _TextAppearance_Widget_TextView_SpinnerItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#TextAppearance_WindowTitle"/>
            /// </summary>
            public static int TextAppearance_WindowTitle { get { if (!_TextAppearance_WindowTitleReady) { _TextAppearance_WindowTitleContent = SGetField<int>(LocalBridgeClazz, "TextAppearance_WindowTitle"); _TextAppearance_WindowTitleReady = true; } return _TextAppearance_WindowTitleContent; } }
            private static int _TextAppearance_WindowTitleContent = default;
            private static bool _TextAppearance_WindowTitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme"/>
            /// </summary>
            public static int Theme { get { if (!_ThemeReady) { _ThemeContent = SGetField<int>(LocalBridgeClazz, "Theme"); _ThemeReady = true; } return _ThemeContent; } }
            private static int _ThemeContent = default;
            private static bool _ThemeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Black"/>
            /// </summary>
            public static int Theme_Black { get { if (!_Theme_BlackReady) { _Theme_BlackContent = SGetField<int>(LocalBridgeClazz, "Theme_Black"); _Theme_BlackReady = true; } return _Theme_BlackContent; } }
            private static int _Theme_BlackContent = default;
            private static bool _Theme_BlackReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Black_NoTitleBar"/>
            /// </summary>
            public static int Theme_Black_NoTitleBar { get { if (!_Theme_Black_NoTitleBarReady) { _Theme_Black_NoTitleBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Black_NoTitleBar"); _Theme_Black_NoTitleBarReady = true; } return _Theme_Black_NoTitleBarContent; } }
            private static int _Theme_Black_NoTitleBarContent = default;
            private static bool _Theme_Black_NoTitleBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Black_NoTitleBar_Fullscreen"/>
            /// </summary>
            public static int Theme_Black_NoTitleBar_Fullscreen { get { if (!_Theme_Black_NoTitleBar_FullscreenReady) { _Theme_Black_NoTitleBar_FullscreenContent = SGetField<int>(LocalBridgeClazz, "Theme_Black_NoTitleBar_Fullscreen"); _Theme_Black_NoTitleBar_FullscreenReady = true; } return _Theme_Black_NoTitleBar_FullscreenContent; } }
            private static int _Theme_Black_NoTitleBar_FullscreenContent = default;
            private static bool _Theme_Black_NoTitleBar_FullscreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault"/>
            /// </summary>
            public static int Theme_DeviceDefault { get { if (!_Theme_DeviceDefaultReady) { _Theme_DeviceDefaultContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault"); _Theme_DeviceDefaultReady = true; } return _Theme_DeviceDefaultContent; } }
            private static int _Theme_DeviceDefaultContent = default;
            private static bool _Theme_DeviceDefaultReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_DayNight"/>
            /// </summary>
            public static int Theme_DeviceDefault_DayNight { get { if (!_Theme_DeviceDefault_DayNightReady) { _Theme_DeviceDefault_DayNightContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_DayNight"); _Theme_DeviceDefault_DayNightReady = true; } return _Theme_DeviceDefault_DayNightContent; } }
            private static int _Theme_DeviceDefault_DayNightContent = default;
            private static bool _Theme_DeviceDefault_DayNightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Dialog"/>
            /// </summary>
            public static int Theme_DeviceDefault_Dialog { get { if (!_Theme_DeviceDefault_DialogReady) { _Theme_DeviceDefault_DialogContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Dialog"); _Theme_DeviceDefault_DialogReady = true; } return _Theme_DeviceDefault_DialogContent; } }
            private static int _Theme_DeviceDefault_DialogContent = default;
            private static bool _Theme_DeviceDefault_DialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Dialog_Alert"/>
            /// </summary>
            public static int Theme_DeviceDefault_Dialog_Alert { get { if (!_Theme_DeviceDefault_Dialog_AlertReady) { _Theme_DeviceDefault_Dialog_AlertContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Dialog_Alert"); _Theme_DeviceDefault_Dialog_AlertReady = true; } return _Theme_DeviceDefault_Dialog_AlertContent; } }
            private static int _Theme_DeviceDefault_Dialog_AlertContent = default;
            private static bool _Theme_DeviceDefault_Dialog_AlertReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Dialog_MinWidth"/>
            /// </summary>
            public static int Theme_DeviceDefault_Dialog_MinWidth { get { if (!_Theme_DeviceDefault_Dialog_MinWidthReady) { _Theme_DeviceDefault_Dialog_MinWidthContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Dialog_MinWidth"); _Theme_DeviceDefault_Dialog_MinWidthReady = true; } return _Theme_DeviceDefault_Dialog_MinWidthContent; } }
            private static int _Theme_DeviceDefault_Dialog_MinWidthContent = default;
            private static bool _Theme_DeviceDefault_Dialog_MinWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Dialog_NoActionBar"/>
            /// </summary>
            public static int Theme_DeviceDefault_Dialog_NoActionBar { get { if (!_Theme_DeviceDefault_Dialog_NoActionBarReady) { _Theme_DeviceDefault_Dialog_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Dialog_NoActionBar"); _Theme_DeviceDefault_Dialog_NoActionBarReady = true; } return _Theme_DeviceDefault_Dialog_NoActionBarContent; } }
            private static int _Theme_DeviceDefault_Dialog_NoActionBarContent = default;
            private static bool _Theme_DeviceDefault_Dialog_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Dialog_NoActionBar_MinWidth"/>
            /// </summary>
            public static int Theme_DeviceDefault_Dialog_NoActionBar_MinWidth { get { if (!_Theme_DeviceDefault_Dialog_NoActionBar_MinWidthReady) { _Theme_DeviceDefault_Dialog_NoActionBar_MinWidthContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Dialog_NoActionBar_MinWidth"); _Theme_DeviceDefault_Dialog_NoActionBar_MinWidthReady = true; } return _Theme_DeviceDefault_Dialog_NoActionBar_MinWidthContent; } }
            private static int _Theme_DeviceDefault_Dialog_NoActionBar_MinWidthContent = default;
            private static bool _Theme_DeviceDefault_Dialog_NoActionBar_MinWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_DialogWhenLarge"/>
            /// </summary>
            public static int Theme_DeviceDefault_DialogWhenLarge { get { if (!_Theme_DeviceDefault_DialogWhenLargeReady) { _Theme_DeviceDefault_DialogWhenLargeContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_DialogWhenLarge"); _Theme_DeviceDefault_DialogWhenLargeReady = true; } return _Theme_DeviceDefault_DialogWhenLargeContent; } }
            private static int _Theme_DeviceDefault_DialogWhenLargeContent = default;
            private static bool _Theme_DeviceDefault_DialogWhenLargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_DialogWhenLarge_NoActionBar"/>
            /// </summary>
            public static int Theme_DeviceDefault_DialogWhenLarge_NoActionBar { get { if (!_Theme_DeviceDefault_DialogWhenLarge_NoActionBarReady) { _Theme_DeviceDefault_DialogWhenLarge_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_DialogWhenLarge_NoActionBar"); _Theme_DeviceDefault_DialogWhenLarge_NoActionBarReady = true; } return _Theme_DeviceDefault_DialogWhenLarge_NoActionBarContent; } }
            private static int _Theme_DeviceDefault_DialogWhenLarge_NoActionBarContent = default;
            private static bool _Theme_DeviceDefault_DialogWhenLarge_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_InputMethod"/>
            /// </summary>
            public static int Theme_DeviceDefault_InputMethod { get { if (!_Theme_DeviceDefault_InputMethodReady) { _Theme_DeviceDefault_InputMethodContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_InputMethod"); _Theme_DeviceDefault_InputMethodReady = true; } return _Theme_DeviceDefault_InputMethodContent; } }
            private static int _Theme_DeviceDefault_InputMethodContent = default;
            private static bool _Theme_DeviceDefault_InputMethodReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Light"/>
            /// </summary>
            public static int Theme_DeviceDefault_Light { get { if (!_Theme_DeviceDefault_LightReady) { _Theme_DeviceDefault_LightContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Light"); _Theme_DeviceDefault_LightReady = true; } return _Theme_DeviceDefault_LightContent; } }
            private static int _Theme_DeviceDefault_LightContent = default;
            private static bool _Theme_DeviceDefault_LightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Light_DarkActionBar"/>
            /// </summary>
            public static int Theme_DeviceDefault_Light_DarkActionBar { get { if (!_Theme_DeviceDefault_Light_DarkActionBarReady) { _Theme_DeviceDefault_Light_DarkActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Light_DarkActionBar"); _Theme_DeviceDefault_Light_DarkActionBarReady = true; } return _Theme_DeviceDefault_Light_DarkActionBarContent; } }
            private static int _Theme_DeviceDefault_Light_DarkActionBarContent = default;
            private static bool _Theme_DeviceDefault_Light_DarkActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Light_Dialog"/>
            /// </summary>
            public static int Theme_DeviceDefault_Light_Dialog { get { if (!_Theme_DeviceDefault_Light_DialogReady) { _Theme_DeviceDefault_Light_DialogContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Light_Dialog"); _Theme_DeviceDefault_Light_DialogReady = true; } return _Theme_DeviceDefault_Light_DialogContent; } }
            private static int _Theme_DeviceDefault_Light_DialogContent = default;
            private static bool _Theme_DeviceDefault_Light_DialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Light_Dialog_Alert"/>
            /// </summary>
            public static int Theme_DeviceDefault_Light_Dialog_Alert { get { if (!_Theme_DeviceDefault_Light_Dialog_AlertReady) { _Theme_DeviceDefault_Light_Dialog_AlertContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Light_Dialog_Alert"); _Theme_DeviceDefault_Light_Dialog_AlertReady = true; } return _Theme_DeviceDefault_Light_Dialog_AlertContent; } }
            private static int _Theme_DeviceDefault_Light_Dialog_AlertContent = default;
            private static bool _Theme_DeviceDefault_Light_Dialog_AlertReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Light_Dialog_MinWidth"/>
            /// </summary>
            public static int Theme_DeviceDefault_Light_Dialog_MinWidth { get { if (!_Theme_DeviceDefault_Light_Dialog_MinWidthReady) { _Theme_DeviceDefault_Light_Dialog_MinWidthContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Light_Dialog_MinWidth"); _Theme_DeviceDefault_Light_Dialog_MinWidthReady = true; } return _Theme_DeviceDefault_Light_Dialog_MinWidthContent; } }
            private static int _Theme_DeviceDefault_Light_Dialog_MinWidthContent = default;
            private static bool _Theme_DeviceDefault_Light_Dialog_MinWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Light_Dialog_NoActionBar"/>
            /// </summary>
            public static int Theme_DeviceDefault_Light_Dialog_NoActionBar { get { if (!_Theme_DeviceDefault_Light_Dialog_NoActionBarReady) { _Theme_DeviceDefault_Light_Dialog_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Light_Dialog_NoActionBar"); _Theme_DeviceDefault_Light_Dialog_NoActionBarReady = true; } return _Theme_DeviceDefault_Light_Dialog_NoActionBarContent; } }
            private static int _Theme_DeviceDefault_Light_Dialog_NoActionBarContent = default;
            private static bool _Theme_DeviceDefault_Light_Dialog_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidth"/>
            /// </summary>
            public static int Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidth { get { if (!_Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidthReady) { _Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidthContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidth"); _Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidthReady = true; } return _Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidthContent; } }
            private static int _Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidthContent = default;
            private static bool _Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Light_DialogWhenLarge"/>
            /// </summary>
            public static int Theme_DeviceDefault_Light_DialogWhenLarge { get { if (!_Theme_DeviceDefault_Light_DialogWhenLargeReady) { _Theme_DeviceDefault_Light_DialogWhenLargeContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Light_DialogWhenLarge"); _Theme_DeviceDefault_Light_DialogWhenLargeReady = true; } return _Theme_DeviceDefault_Light_DialogWhenLargeContent; } }
            private static int _Theme_DeviceDefault_Light_DialogWhenLargeContent = default;
            private static bool _Theme_DeviceDefault_Light_DialogWhenLargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBar"/>
            /// </summary>
            public static int Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBar { get { if (!_Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBarReady) { _Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBar"); _Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBarReady = true; } return _Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBarContent; } }
            private static int _Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBarContent = default;
            private static bool _Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Light_NoActionBar"/>
            /// </summary>
            public static int Theme_DeviceDefault_Light_NoActionBar { get { if (!_Theme_DeviceDefault_Light_NoActionBarReady) { _Theme_DeviceDefault_Light_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Light_NoActionBar"); _Theme_DeviceDefault_Light_NoActionBarReady = true; } return _Theme_DeviceDefault_Light_NoActionBarContent; } }
            private static int _Theme_DeviceDefault_Light_NoActionBarContent = default;
            private static bool _Theme_DeviceDefault_Light_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Light_NoActionBar_Fullscreen"/>
            /// </summary>
            public static int Theme_DeviceDefault_Light_NoActionBar_Fullscreen { get { if (!_Theme_DeviceDefault_Light_NoActionBar_FullscreenReady) { _Theme_DeviceDefault_Light_NoActionBar_FullscreenContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Light_NoActionBar_Fullscreen"); _Theme_DeviceDefault_Light_NoActionBar_FullscreenReady = true; } return _Theme_DeviceDefault_Light_NoActionBar_FullscreenContent; } }
            private static int _Theme_DeviceDefault_Light_NoActionBar_FullscreenContent = default;
            private static bool _Theme_DeviceDefault_Light_NoActionBar_FullscreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Light_NoActionBar_Overscan"/>
            /// </summary>
            public static int Theme_DeviceDefault_Light_NoActionBar_Overscan { get { if (!_Theme_DeviceDefault_Light_NoActionBar_OverscanReady) { _Theme_DeviceDefault_Light_NoActionBar_OverscanContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Light_NoActionBar_Overscan"); _Theme_DeviceDefault_Light_NoActionBar_OverscanReady = true; } return _Theme_DeviceDefault_Light_NoActionBar_OverscanContent; } }
            private static int _Theme_DeviceDefault_Light_NoActionBar_OverscanContent = default;
            private static bool _Theme_DeviceDefault_Light_NoActionBar_OverscanReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Light_NoActionBar_TranslucentDecor"/>
            /// </summary>
            public static int Theme_DeviceDefault_Light_NoActionBar_TranslucentDecor { get { if (!_Theme_DeviceDefault_Light_NoActionBar_TranslucentDecorReady) { _Theme_DeviceDefault_Light_NoActionBar_TranslucentDecorContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Light_NoActionBar_TranslucentDecor"); _Theme_DeviceDefault_Light_NoActionBar_TranslucentDecorReady = true; } return _Theme_DeviceDefault_Light_NoActionBar_TranslucentDecorContent; } }
            private static int _Theme_DeviceDefault_Light_NoActionBar_TranslucentDecorContent = default;
            private static bool _Theme_DeviceDefault_Light_NoActionBar_TranslucentDecorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Light_Panel"/>
            /// </summary>
            public static int Theme_DeviceDefault_Light_Panel { get { if (!_Theme_DeviceDefault_Light_PanelReady) { _Theme_DeviceDefault_Light_PanelContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Light_Panel"); _Theme_DeviceDefault_Light_PanelReady = true; } return _Theme_DeviceDefault_Light_PanelContent; } }
            private static int _Theme_DeviceDefault_Light_PanelContent = default;
            private static bool _Theme_DeviceDefault_Light_PanelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_NoActionBar"/>
            /// </summary>
            public static int Theme_DeviceDefault_NoActionBar { get { if (!_Theme_DeviceDefault_NoActionBarReady) { _Theme_DeviceDefault_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_NoActionBar"); _Theme_DeviceDefault_NoActionBarReady = true; } return _Theme_DeviceDefault_NoActionBarContent; } }
            private static int _Theme_DeviceDefault_NoActionBarContent = default;
            private static bool _Theme_DeviceDefault_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_NoActionBar_Fullscreen"/>
            /// </summary>
            public static int Theme_DeviceDefault_NoActionBar_Fullscreen { get { if (!_Theme_DeviceDefault_NoActionBar_FullscreenReady) { _Theme_DeviceDefault_NoActionBar_FullscreenContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_NoActionBar_Fullscreen"); _Theme_DeviceDefault_NoActionBar_FullscreenReady = true; } return _Theme_DeviceDefault_NoActionBar_FullscreenContent; } }
            private static int _Theme_DeviceDefault_NoActionBar_FullscreenContent = default;
            private static bool _Theme_DeviceDefault_NoActionBar_FullscreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_NoActionBar_Overscan"/>
            /// </summary>
            public static int Theme_DeviceDefault_NoActionBar_Overscan { get { if (!_Theme_DeviceDefault_NoActionBar_OverscanReady) { _Theme_DeviceDefault_NoActionBar_OverscanContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_NoActionBar_Overscan"); _Theme_DeviceDefault_NoActionBar_OverscanReady = true; } return _Theme_DeviceDefault_NoActionBar_OverscanContent; } }
            private static int _Theme_DeviceDefault_NoActionBar_OverscanContent = default;
            private static bool _Theme_DeviceDefault_NoActionBar_OverscanReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_NoActionBar_TranslucentDecor"/>
            /// </summary>
            public static int Theme_DeviceDefault_NoActionBar_TranslucentDecor { get { if (!_Theme_DeviceDefault_NoActionBar_TranslucentDecorReady) { _Theme_DeviceDefault_NoActionBar_TranslucentDecorContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_NoActionBar_TranslucentDecor"); _Theme_DeviceDefault_NoActionBar_TranslucentDecorReady = true; } return _Theme_DeviceDefault_NoActionBar_TranslucentDecorContent; } }
            private static int _Theme_DeviceDefault_NoActionBar_TranslucentDecorContent = default;
            private static bool _Theme_DeviceDefault_NoActionBar_TranslucentDecorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Panel"/>
            /// </summary>
            public static int Theme_DeviceDefault_Panel { get { if (!_Theme_DeviceDefault_PanelReady) { _Theme_DeviceDefault_PanelContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Panel"); _Theme_DeviceDefault_PanelReady = true; } return _Theme_DeviceDefault_PanelContent; } }
            private static int _Theme_DeviceDefault_PanelContent = default;
            private static bool _Theme_DeviceDefault_PanelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Settings"/>
            /// </summary>
            public static int Theme_DeviceDefault_Settings { get { if (!_Theme_DeviceDefault_SettingsReady) { _Theme_DeviceDefault_SettingsContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Settings"); _Theme_DeviceDefault_SettingsReady = true; } return _Theme_DeviceDefault_SettingsContent; } }
            private static int _Theme_DeviceDefault_SettingsContent = default;
            private static bool _Theme_DeviceDefault_SettingsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Wallpaper"/>
            /// </summary>
            public static int Theme_DeviceDefault_Wallpaper { get { if (!_Theme_DeviceDefault_WallpaperReady) { _Theme_DeviceDefault_WallpaperContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Wallpaper"); _Theme_DeviceDefault_WallpaperReady = true; } return _Theme_DeviceDefault_WallpaperContent; } }
            private static int _Theme_DeviceDefault_WallpaperContent = default;
            private static bool _Theme_DeviceDefault_WallpaperReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_DeviceDefault_Wallpaper_NoTitleBar"/>
            /// </summary>
            public static int Theme_DeviceDefault_Wallpaper_NoTitleBar { get { if (!_Theme_DeviceDefault_Wallpaper_NoTitleBarReady) { _Theme_DeviceDefault_Wallpaper_NoTitleBarContent = SGetField<int>(LocalBridgeClazz, "Theme_DeviceDefault_Wallpaper_NoTitleBar"); _Theme_DeviceDefault_Wallpaper_NoTitleBarReady = true; } return _Theme_DeviceDefault_Wallpaper_NoTitleBarContent; } }
            private static int _Theme_DeviceDefault_Wallpaper_NoTitleBarContent = default;
            private static bool _Theme_DeviceDefault_Wallpaper_NoTitleBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Dialog"/>
            /// </summary>
            public static int Theme_Dialog { get { if (!_Theme_DialogReady) { _Theme_DialogContent = SGetField<int>(LocalBridgeClazz, "Theme_Dialog"); _Theme_DialogReady = true; } return _Theme_DialogContent; } }
            private static int _Theme_DialogContent = default;
            private static bool _Theme_DialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo { get { if (!_Theme_HoloReady) { _Theme_HoloContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo"); _Theme_HoloReady = true; } return _Theme_HoloContent; } }
            private static int _Theme_HoloContent = default;
            private static bool _Theme_HoloReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Dialog"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Dialog { get { if (!_Theme_Holo_DialogReady) { _Theme_Holo_DialogContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Dialog"); _Theme_Holo_DialogReady = true; } return _Theme_Holo_DialogContent; } }
            private static int _Theme_Holo_DialogContent = default;
            private static bool _Theme_Holo_DialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Dialog_MinWidth"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Dialog_MinWidth { get { if (!_Theme_Holo_Dialog_MinWidthReady) { _Theme_Holo_Dialog_MinWidthContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Dialog_MinWidth"); _Theme_Holo_Dialog_MinWidthReady = true; } return _Theme_Holo_Dialog_MinWidthContent; } }
            private static int _Theme_Holo_Dialog_MinWidthContent = default;
            private static bool _Theme_Holo_Dialog_MinWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Dialog_NoActionBar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Dialog_NoActionBar { get { if (!_Theme_Holo_Dialog_NoActionBarReady) { _Theme_Holo_Dialog_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Dialog_NoActionBar"); _Theme_Holo_Dialog_NoActionBarReady = true; } return _Theme_Holo_Dialog_NoActionBarContent; } }
            private static int _Theme_Holo_Dialog_NoActionBarContent = default;
            private static bool _Theme_Holo_Dialog_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Dialog_NoActionBar_MinWidth"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Dialog_NoActionBar_MinWidth { get { if (!_Theme_Holo_Dialog_NoActionBar_MinWidthReady) { _Theme_Holo_Dialog_NoActionBar_MinWidthContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Dialog_NoActionBar_MinWidth"); _Theme_Holo_Dialog_NoActionBar_MinWidthReady = true; } return _Theme_Holo_Dialog_NoActionBar_MinWidthContent; } }
            private static int _Theme_Holo_Dialog_NoActionBar_MinWidthContent = default;
            private static bool _Theme_Holo_Dialog_NoActionBar_MinWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_DialogWhenLarge"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_DialogWhenLarge { get { if (!_Theme_Holo_DialogWhenLargeReady) { _Theme_Holo_DialogWhenLargeContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_DialogWhenLarge"); _Theme_Holo_DialogWhenLargeReady = true; } return _Theme_Holo_DialogWhenLargeContent; } }
            private static int _Theme_Holo_DialogWhenLargeContent = default;
            private static bool _Theme_Holo_DialogWhenLargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_DialogWhenLarge_NoActionBar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_DialogWhenLarge_NoActionBar { get { if (!_Theme_Holo_DialogWhenLarge_NoActionBarReady) { _Theme_Holo_DialogWhenLarge_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_DialogWhenLarge_NoActionBar"); _Theme_Holo_DialogWhenLarge_NoActionBarReady = true; } return _Theme_Holo_DialogWhenLarge_NoActionBarContent; } }
            private static int _Theme_Holo_DialogWhenLarge_NoActionBarContent = default;
            private static bool _Theme_Holo_DialogWhenLarge_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_InputMethod"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_InputMethod { get { if (!_Theme_Holo_InputMethodReady) { _Theme_Holo_InputMethodContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_InputMethod"); _Theme_Holo_InputMethodReady = true; } return _Theme_Holo_InputMethodContent; } }
            private static int _Theme_Holo_InputMethodContent = default;
            private static bool _Theme_Holo_InputMethodReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Light"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Light { get { if (!_Theme_Holo_LightReady) { _Theme_Holo_LightContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Light"); _Theme_Holo_LightReady = true; } return _Theme_Holo_LightContent; } }
            private static int _Theme_Holo_LightContent = default;
            private static bool _Theme_Holo_LightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Light_DarkActionBar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Light_DarkActionBar { get { if (!_Theme_Holo_Light_DarkActionBarReady) { _Theme_Holo_Light_DarkActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Light_DarkActionBar"); _Theme_Holo_Light_DarkActionBarReady = true; } return _Theme_Holo_Light_DarkActionBarContent; } }
            private static int _Theme_Holo_Light_DarkActionBarContent = default;
            private static bool _Theme_Holo_Light_DarkActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Light_Dialog"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Light_Dialog { get { if (!_Theme_Holo_Light_DialogReady) { _Theme_Holo_Light_DialogContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Light_Dialog"); _Theme_Holo_Light_DialogReady = true; } return _Theme_Holo_Light_DialogContent; } }
            private static int _Theme_Holo_Light_DialogContent = default;
            private static bool _Theme_Holo_Light_DialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Light_Dialog_MinWidth"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Light_Dialog_MinWidth { get { if (!_Theme_Holo_Light_Dialog_MinWidthReady) { _Theme_Holo_Light_Dialog_MinWidthContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Light_Dialog_MinWidth"); _Theme_Holo_Light_Dialog_MinWidthReady = true; } return _Theme_Holo_Light_Dialog_MinWidthContent; } }
            private static int _Theme_Holo_Light_Dialog_MinWidthContent = default;
            private static bool _Theme_Holo_Light_Dialog_MinWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Light_Dialog_NoActionBar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Light_Dialog_NoActionBar { get { if (!_Theme_Holo_Light_Dialog_NoActionBarReady) { _Theme_Holo_Light_Dialog_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Light_Dialog_NoActionBar"); _Theme_Holo_Light_Dialog_NoActionBarReady = true; } return _Theme_Holo_Light_Dialog_NoActionBarContent; } }
            private static int _Theme_Holo_Light_Dialog_NoActionBarContent = default;
            private static bool _Theme_Holo_Light_Dialog_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Light_Dialog_NoActionBar_MinWidth"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Light_Dialog_NoActionBar_MinWidth { get { if (!_Theme_Holo_Light_Dialog_NoActionBar_MinWidthReady) { _Theme_Holo_Light_Dialog_NoActionBar_MinWidthContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Light_Dialog_NoActionBar_MinWidth"); _Theme_Holo_Light_Dialog_NoActionBar_MinWidthReady = true; } return _Theme_Holo_Light_Dialog_NoActionBar_MinWidthContent; } }
            private static int _Theme_Holo_Light_Dialog_NoActionBar_MinWidthContent = default;
            private static bool _Theme_Holo_Light_Dialog_NoActionBar_MinWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Light_DialogWhenLarge"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Light_DialogWhenLarge { get { if (!_Theme_Holo_Light_DialogWhenLargeReady) { _Theme_Holo_Light_DialogWhenLargeContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Light_DialogWhenLarge"); _Theme_Holo_Light_DialogWhenLargeReady = true; } return _Theme_Holo_Light_DialogWhenLargeContent; } }
            private static int _Theme_Holo_Light_DialogWhenLargeContent = default;
            private static bool _Theme_Holo_Light_DialogWhenLargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Light_DialogWhenLarge_NoActionBar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Light_DialogWhenLarge_NoActionBar { get { if (!_Theme_Holo_Light_DialogWhenLarge_NoActionBarReady) { _Theme_Holo_Light_DialogWhenLarge_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Light_DialogWhenLarge_NoActionBar"); _Theme_Holo_Light_DialogWhenLarge_NoActionBarReady = true; } return _Theme_Holo_Light_DialogWhenLarge_NoActionBarContent; } }
            private static int _Theme_Holo_Light_DialogWhenLarge_NoActionBarContent = default;
            private static bool _Theme_Holo_Light_DialogWhenLarge_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Light_NoActionBar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Light_NoActionBar { get { if (!_Theme_Holo_Light_NoActionBarReady) { _Theme_Holo_Light_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Light_NoActionBar"); _Theme_Holo_Light_NoActionBarReady = true; } return _Theme_Holo_Light_NoActionBarContent; } }
            private static int _Theme_Holo_Light_NoActionBarContent = default;
            private static bool _Theme_Holo_Light_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Light_NoActionBar_Fullscreen"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Light_NoActionBar_Fullscreen { get { if (!_Theme_Holo_Light_NoActionBar_FullscreenReady) { _Theme_Holo_Light_NoActionBar_FullscreenContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Light_NoActionBar_Fullscreen"); _Theme_Holo_Light_NoActionBar_FullscreenReady = true; } return _Theme_Holo_Light_NoActionBar_FullscreenContent; } }
            private static int _Theme_Holo_Light_NoActionBar_FullscreenContent = default;
            private static bool _Theme_Holo_Light_NoActionBar_FullscreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Light_NoActionBar_Overscan"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Light_NoActionBar_Overscan { get { if (!_Theme_Holo_Light_NoActionBar_OverscanReady) { _Theme_Holo_Light_NoActionBar_OverscanContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Light_NoActionBar_Overscan"); _Theme_Holo_Light_NoActionBar_OverscanReady = true; } return _Theme_Holo_Light_NoActionBar_OverscanContent; } }
            private static int _Theme_Holo_Light_NoActionBar_OverscanContent = default;
            private static bool _Theme_Holo_Light_NoActionBar_OverscanReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Light_NoActionBar_TranslucentDecor"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Light_NoActionBar_TranslucentDecor { get { if (!_Theme_Holo_Light_NoActionBar_TranslucentDecorReady) { _Theme_Holo_Light_NoActionBar_TranslucentDecorContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Light_NoActionBar_TranslucentDecor"); _Theme_Holo_Light_NoActionBar_TranslucentDecorReady = true; } return _Theme_Holo_Light_NoActionBar_TranslucentDecorContent; } }
            private static int _Theme_Holo_Light_NoActionBar_TranslucentDecorContent = default;
            private static bool _Theme_Holo_Light_NoActionBar_TranslucentDecorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Light_Panel"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Light_Panel { get { if (!_Theme_Holo_Light_PanelReady) { _Theme_Holo_Light_PanelContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Light_Panel"); _Theme_Holo_Light_PanelReady = true; } return _Theme_Holo_Light_PanelContent; } }
            private static int _Theme_Holo_Light_PanelContent = default;
            private static bool _Theme_Holo_Light_PanelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_NoActionBar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_NoActionBar { get { if (!_Theme_Holo_NoActionBarReady) { _Theme_Holo_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_NoActionBar"); _Theme_Holo_NoActionBarReady = true; } return _Theme_Holo_NoActionBarContent; } }
            private static int _Theme_Holo_NoActionBarContent = default;
            private static bool _Theme_Holo_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_NoActionBar_Fullscreen"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_NoActionBar_Fullscreen { get { if (!_Theme_Holo_NoActionBar_FullscreenReady) { _Theme_Holo_NoActionBar_FullscreenContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_NoActionBar_Fullscreen"); _Theme_Holo_NoActionBar_FullscreenReady = true; } return _Theme_Holo_NoActionBar_FullscreenContent; } }
            private static int _Theme_Holo_NoActionBar_FullscreenContent = default;
            private static bool _Theme_Holo_NoActionBar_FullscreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_NoActionBar_Overscan"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_NoActionBar_Overscan { get { if (!_Theme_Holo_NoActionBar_OverscanReady) { _Theme_Holo_NoActionBar_OverscanContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_NoActionBar_Overscan"); _Theme_Holo_NoActionBar_OverscanReady = true; } return _Theme_Holo_NoActionBar_OverscanContent; } }
            private static int _Theme_Holo_NoActionBar_OverscanContent = default;
            private static bool _Theme_Holo_NoActionBar_OverscanReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_NoActionBar_TranslucentDecor"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_NoActionBar_TranslucentDecor { get { if (!_Theme_Holo_NoActionBar_TranslucentDecorReady) { _Theme_Holo_NoActionBar_TranslucentDecorContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_NoActionBar_TranslucentDecor"); _Theme_Holo_NoActionBar_TranslucentDecorReady = true; } return _Theme_Holo_NoActionBar_TranslucentDecorContent; } }
            private static int _Theme_Holo_NoActionBar_TranslucentDecorContent = default;
            private static bool _Theme_Holo_NoActionBar_TranslucentDecorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Panel"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Panel { get { if (!_Theme_Holo_PanelReady) { _Theme_Holo_PanelContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Panel"); _Theme_Holo_PanelReady = true; } return _Theme_Holo_PanelContent; } }
            private static int _Theme_Holo_PanelContent = default;
            private static bool _Theme_Holo_PanelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Wallpaper"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Wallpaper { get { if (!_Theme_Holo_WallpaperReady) { _Theme_Holo_WallpaperContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Wallpaper"); _Theme_Holo_WallpaperReady = true; } return _Theme_Holo_WallpaperContent; } }
            private static int _Theme_Holo_WallpaperContent = default;
            private static bool _Theme_Holo_WallpaperReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Holo_Wallpaper_NoTitleBar"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Holo_Wallpaper_NoTitleBar { get { if (!_Theme_Holo_Wallpaper_NoTitleBarReady) { _Theme_Holo_Wallpaper_NoTitleBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Holo_Wallpaper_NoTitleBar"); _Theme_Holo_Wallpaper_NoTitleBarReady = true; } return _Theme_Holo_Wallpaper_NoTitleBarContent; } }
            private static int _Theme_Holo_Wallpaper_NoTitleBarContent = default;
            private static bool _Theme_Holo_Wallpaper_NoTitleBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_InputMethod"/>
            /// </summary>
            public static int Theme_InputMethod { get { if (!_Theme_InputMethodReady) { _Theme_InputMethodContent = SGetField<int>(LocalBridgeClazz, "Theme_InputMethod"); _Theme_InputMethodReady = true; } return _Theme_InputMethodContent; } }
            private static int _Theme_InputMethodContent = default;
            private static bool _Theme_InputMethodReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Light"/>
            /// </summary>
            public static int Theme_Light { get { if (!_Theme_LightReady) { _Theme_LightContent = SGetField<int>(LocalBridgeClazz, "Theme_Light"); _Theme_LightReady = true; } return _Theme_LightContent; } }
            private static int _Theme_LightContent = default;
            private static bool _Theme_LightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Light_NoTitleBar"/>
            /// </summary>
            public static int Theme_Light_NoTitleBar { get { if (!_Theme_Light_NoTitleBarReady) { _Theme_Light_NoTitleBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Light_NoTitleBar"); _Theme_Light_NoTitleBarReady = true; } return _Theme_Light_NoTitleBarContent; } }
            private static int _Theme_Light_NoTitleBarContent = default;
            private static bool _Theme_Light_NoTitleBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Light_NoTitleBar_Fullscreen"/>
            /// </summary>
            public static int Theme_Light_NoTitleBar_Fullscreen { get { if (!_Theme_Light_NoTitleBar_FullscreenReady) { _Theme_Light_NoTitleBar_FullscreenContent = SGetField<int>(LocalBridgeClazz, "Theme_Light_NoTitleBar_Fullscreen"); _Theme_Light_NoTitleBar_FullscreenReady = true; } return _Theme_Light_NoTitleBar_FullscreenContent; } }
            private static int _Theme_Light_NoTitleBar_FullscreenContent = default;
            private static bool _Theme_Light_NoTitleBar_FullscreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Light_Panel"/>
            /// </summary>
            public static int Theme_Light_Panel { get { if (!_Theme_Light_PanelReady) { _Theme_Light_PanelContent = SGetField<int>(LocalBridgeClazz, "Theme_Light_Panel"); _Theme_Light_PanelReady = true; } return _Theme_Light_PanelContent; } }
            private static int _Theme_Light_PanelContent = default;
            private static bool _Theme_Light_PanelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Light_WallpaperSettings"/>
            /// </summary>
            public static int Theme_Light_WallpaperSettings { get { if (!_Theme_Light_WallpaperSettingsReady) { _Theme_Light_WallpaperSettingsContent = SGetField<int>(LocalBridgeClazz, "Theme_Light_WallpaperSettings"); _Theme_Light_WallpaperSettingsReady = true; } return _Theme_Light_WallpaperSettingsContent; } }
            private static int _Theme_Light_WallpaperSettingsContent = default;
            private static bool _Theme_Light_WallpaperSettingsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material"/>
            /// </summary>
            public static int Theme_Material { get { if (!_Theme_MaterialReady) { _Theme_MaterialContent = SGetField<int>(LocalBridgeClazz, "Theme_Material"); _Theme_MaterialReady = true; } return _Theme_MaterialContent; } }
            private static int _Theme_MaterialContent = default;
            private static bool _Theme_MaterialReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Dialog"/>
            /// </summary>
            public static int Theme_Material_Dialog { get { if (!_Theme_Material_DialogReady) { _Theme_Material_DialogContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Dialog"); _Theme_Material_DialogReady = true; } return _Theme_Material_DialogContent; } }
            private static int _Theme_Material_DialogContent = default;
            private static bool _Theme_Material_DialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Dialog_Alert"/>
            /// </summary>
            public static int Theme_Material_Dialog_Alert { get { if (!_Theme_Material_Dialog_AlertReady) { _Theme_Material_Dialog_AlertContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Dialog_Alert"); _Theme_Material_Dialog_AlertReady = true; } return _Theme_Material_Dialog_AlertContent; } }
            private static int _Theme_Material_Dialog_AlertContent = default;
            private static bool _Theme_Material_Dialog_AlertReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Dialog_MinWidth"/>
            /// </summary>
            public static int Theme_Material_Dialog_MinWidth { get { if (!_Theme_Material_Dialog_MinWidthReady) { _Theme_Material_Dialog_MinWidthContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Dialog_MinWidth"); _Theme_Material_Dialog_MinWidthReady = true; } return _Theme_Material_Dialog_MinWidthContent; } }
            private static int _Theme_Material_Dialog_MinWidthContent = default;
            private static bool _Theme_Material_Dialog_MinWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Dialog_NoActionBar"/>
            /// </summary>
            public static int Theme_Material_Dialog_NoActionBar { get { if (!_Theme_Material_Dialog_NoActionBarReady) { _Theme_Material_Dialog_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Dialog_NoActionBar"); _Theme_Material_Dialog_NoActionBarReady = true; } return _Theme_Material_Dialog_NoActionBarContent; } }
            private static int _Theme_Material_Dialog_NoActionBarContent = default;
            private static bool _Theme_Material_Dialog_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Dialog_NoActionBar_MinWidth"/>
            /// </summary>
            public static int Theme_Material_Dialog_NoActionBar_MinWidth { get { if (!_Theme_Material_Dialog_NoActionBar_MinWidthReady) { _Theme_Material_Dialog_NoActionBar_MinWidthContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Dialog_NoActionBar_MinWidth"); _Theme_Material_Dialog_NoActionBar_MinWidthReady = true; } return _Theme_Material_Dialog_NoActionBar_MinWidthContent; } }
            private static int _Theme_Material_Dialog_NoActionBar_MinWidthContent = default;
            private static bool _Theme_Material_Dialog_NoActionBar_MinWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Dialog_Presentation"/>
            /// </summary>
            public static int Theme_Material_Dialog_Presentation { get { if (!_Theme_Material_Dialog_PresentationReady) { _Theme_Material_Dialog_PresentationContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Dialog_Presentation"); _Theme_Material_Dialog_PresentationReady = true; } return _Theme_Material_Dialog_PresentationContent; } }
            private static int _Theme_Material_Dialog_PresentationContent = default;
            private static bool _Theme_Material_Dialog_PresentationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_DialogWhenLarge"/>
            /// </summary>
            public static int Theme_Material_DialogWhenLarge { get { if (!_Theme_Material_DialogWhenLargeReady) { _Theme_Material_DialogWhenLargeContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_DialogWhenLarge"); _Theme_Material_DialogWhenLargeReady = true; } return _Theme_Material_DialogWhenLargeContent; } }
            private static int _Theme_Material_DialogWhenLargeContent = default;
            private static bool _Theme_Material_DialogWhenLargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_DialogWhenLarge_NoActionBar"/>
            /// </summary>
            public static int Theme_Material_DialogWhenLarge_NoActionBar { get { if (!_Theme_Material_DialogWhenLarge_NoActionBarReady) { _Theme_Material_DialogWhenLarge_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_DialogWhenLarge_NoActionBar"); _Theme_Material_DialogWhenLarge_NoActionBarReady = true; } return _Theme_Material_DialogWhenLarge_NoActionBarContent; } }
            private static int _Theme_Material_DialogWhenLarge_NoActionBarContent = default;
            private static bool _Theme_Material_DialogWhenLarge_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_InputMethod"/>
            /// </summary>
            public static int Theme_Material_InputMethod { get { if (!_Theme_Material_InputMethodReady) { _Theme_Material_InputMethodContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_InputMethod"); _Theme_Material_InputMethodReady = true; } return _Theme_Material_InputMethodContent; } }
            private static int _Theme_Material_InputMethodContent = default;
            private static bool _Theme_Material_InputMethodReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light"/>
            /// </summary>
            public static int Theme_Material_Light { get { if (!_Theme_Material_LightReady) { _Theme_Material_LightContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light"); _Theme_Material_LightReady = true; } return _Theme_Material_LightContent; } }
            private static int _Theme_Material_LightContent = default;
            private static bool _Theme_Material_LightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_DarkActionBar"/>
            /// </summary>
            public static int Theme_Material_Light_DarkActionBar { get { if (!_Theme_Material_Light_DarkActionBarReady) { _Theme_Material_Light_DarkActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_DarkActionBar"); _Theme_Material_Light_DarkActionBarReady = true; } return _Theme_Material_Light_DarkActionBarContent; } }
            private static int _Theme_Material_Light_DarkActionBarContent = default;
            private static bool _Theme_Material_Light_DarkActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_Dialog"/>
            /// </summary>
            public static int Theme_Material_Light_Dialog { get { if (!_Theme_Material_Light_DialogReady) { _Theme_Material_Light_DialogContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_Dialog"); _Theme_Material_Light_DialogReady = true; } return _Theme_Material_Light_DialogContent; } }
            private static int _Theme_Material_Light_DialogContent = default;
            private static bool _Theme_Material_Light_DialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_Dialog_Alert"/>
            /// </summary>
            public static int Theme_Material_Light_Dialog_Alert { get { if (!_Theme_Material_Light_Dialog_AlertReady) { _Theme_Material_Light_Dialog_AlertContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_Dialog_Alert"); _Theme_Material_Light_Dialog_AlertReady = true; } return _Theme_Material_Light_Dialog_AlertContent; } }
            private static int _Theme_Material_Light_Dialog_AlertContent = default;
            private static bool _Theme_Material_Light_Dialog_AlertReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_Dialog_MinWidth"/>
            /// </summary>
            public static int Theme_Material_Light_Dialog_MinWidth { get { if (!_Theme_Material_Light_Dialog_MinWidthReady) { _Theme_Material_Light_Dialog_MinWidthContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_Dialog_MinWidth"); _Theme_Material_Light_Dialog_MinWidthReady = true; } return _Theme_Material_Light_Dialog_MinWidthContent; } }
            private static int _Theme_Material_Light_Dialog_MinWidthContent = default;
            private static bool _Theme_Material_Light_Dialog_MinWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_Dialog_NoActionBar"/>
            /// </summary>
            public static int Theme_Material_Light_Dialog_NoActionBar { get { if (!_Theme_Material_Light_Dialog_NoActionBarReady) { _Theme_Material_Light_Dialog_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_Dialog_NoActionBar"); _Theme_Material_Light_Dialog_NoActionBarReady = true; } return _Theme_Material_Light_Dialog_NoActionBarContent; } }
            private static int _Theme_Material_Light_Dialog_NoActionBarContent = default;
            private static bool _Theme_Material_Light_Dialog_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_Dialog_NoActionBar_MinWidth"/>
            /// </summary>
            public static int Theme_Material_Light_Dialog_NoActionBar_MinWidth { get { if (!_Theme_Material_Light_Dialog_NoActionBar_MinWidthReady) { _Theme_Material_Light_Dialog_NoActionBar_MinWidthContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_Dialog_NoActionBar_MinWidth"); _Theme_Material_Light_Dialog_NoActionBar_MinWidthReady = true; } return _Theme_Material_Light_Dialog_NoActionBar_MinWidthContent; } }
            private static int _Theme_Material_Light_Dialog_NoActionBar_MinWidthContent = default;
            private static bool _Theme_Material_Light_Dialog_NoActionBar_MinWidthReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_Dialog_Presentation"/>
            /// </summary>
            public static int Theme_Material_Light_Dialog_Presentation { get { if (!_Theme_Material_Light_Dialog_PresentationReady) { _Theme_Material_Light_Dialog_PresentationContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_Dialog_Presentation"); _Theme_Material_Light_Dialog_PresentationReady = true; } return _Theme_Material_Light_Dialog_PresentationContent; } }
            private static int _Theme_Material_Light_Dialog_PresentationContent = default;
            private static bool _Theme_Material_Light_Dialog_PresentationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_DialogWhenLarge"/>
            /// </summary>
            public static int Theme_Material_Light_DialogWhenLarge { get { if (!_Theme_Material_Light_DialogWhenLargeReady) { _Theme_Material_Light_DialogWhenLargeContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_DialogWhenLarge"); _Theme_Material_Light_DialogWhenLargeReady = true; } return _Theme_Material_Light_DialogWhenLargeContent; } }
            private static int _Theme_Material_Light_DialogWhenLargeContent = default;
            private static bool _Theme_Material_Light_DialogWhenLargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_DialogWhenLarge_DarkActionBar"/>
            /// </summary>
            public static int Theme_Material_Light_DialogWhenLarge_DarkActionBar { get { if (!_Theme_Material_Light_DialogWhenLarge_DarkActionBarReady) { _Theme_Material_Light_DialogWhenLarge_DarkActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_DialogWhenLarge_DarkActionBar"); _Theme_Material_Light_DialogWhenLarge_DarkActionBarReady = true; } return _Theme_Material_Light_DialogWhenLarge_DarkActionBarContent; } }
            private static int _Theme_Material_Light_DialogWhenLarge_DarkActionBarContent = default;
            private static bool _Theme_Material_Light_DialogWhenLarge_DarkActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_DialogWhenLarge_NoActionBar"/>
            /// </summary>
            public static int Theme_Material_Light_DialogWhenLarge_NoActionBar { get { if (!_Theme_Material_Light_DialogWhenLarge_NoActionBarReady) { _Theme_Material_Light_DialogWhenLarge_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_DialogWhenLarge_NoActionBar"); _Theme_Material_Light_DialogWhenLarge_NoActionBarReady = true; } return _Theme_Material_Light_DialogWhenLarge_NoActionBarContent; } }
            private static int _Theme_Material_Light_DialogWhenLarge_NoActionBarContent = default;
            private static bool _Theme_Material_Light_DialogWhenLarge_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_LightStatusBar"/>
            /// </summary>
            public static int Theme_Material_Light_LightStatusBar { get { if (!_Theme_Material_Light_LightStatusBarReady) { _Theme_Material_Light_LightStatusBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_LightStatusBar"); _Theme_Material_Light_LightStatusBarReady = true; } return _Theme_Material_Light_LightStatusBarContent; } }
            private static int _Theme_Material_Light_LightStatusBarContent = default;
            private static bool _Theme_Material_Light_LightStatusBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_NoActionBar"/>
            /// </summary>
            public static int Theme_Material_Light_NoActionBar { get { if (!_Theme_Material_Light_NoActionBarReady) { _Theme_Material_Light_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_NoActionBar"); _Theme_Material_Light_NoActionBarReady = true; } return _Theme_Material_Light_NoActionBarContent; } }
            private static int _Theme_Material_Light_NoActionBarContent = default;
            private static bool _Theme_Material_Light_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_NoActionBar_Fullscreen"/>
            /// </summary>
            public static int Theme_Material_Light_NoActionBar_Fullscreen { get { if (!_Theme_Material_Light_NoActionBar_FullscreenReady) { _Theme_Material_Light_NoActionBar_FullscreenContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_NoActionBar_Fullscreen"); _Theme_Material_Light_NoActionBar_FullscreenReady = true; } return _Theme_Material_Light_NoActionBar_FullscreenContent; } }
            private static int _Theme_Material_Light_NoActionBar_FullscreenContent = default;
            private static bool _Theme_Material_Light_NoActionBar_FullscreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_NoActionBar_Overscan"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Material_Light_NoActionBar_Overscan { get { if (!_Theme_Material_Light_NoActionBar_OverscanReady) { _Theme_Material_Light_NoActionBar_OverscanContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_NoActionBar_Overscan"); _Theme_Material_Light_NoActionBar_OverscanReady = true; } return _Theme_Material_Light_NoActionBar_OverscanContent; } }
            private static int _Theme_Material_Light_NoActionBar_OverscanContent = default;
            private static bool _Theme_Material_Light_NoActionBar_OverscanReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_NoActionBar_TranslucentDecor"/>
            /// </summary>
            public static int Theme_Material_Light_NoActionBar_TranslucentDecor { get { if (!_Theme_Material_Light_NoActionBar_TranslucentDecorReady) { _Theme_Material_Light_NoActionBar_TranslucentDecorContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_NoActionBar_TranslucentDecor"); _Theme_Material_Light_NoActionBar_TranslucentDecorReady = true; } return _Theme_Material_Light_NoActionBar_TranslucentDecorContent; } }
            private static int _Theme_Material_Light_NoActionBar_TranslucentDecorContent = default;
            private static bool _Theme_Material_Light_NoActionBar_TranslucentDecorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_Panel"/>
            /// </summary>
            public static int Theme_Material_Light_Panel { get { if (!_Theme_Material_Light_PanelReady) { _Theme_Material_Light_PanelContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_Panel"); _Theme_Material_Light_PanelReady = true; } return _Theme_Material_Light_PanelContent; } }
            private static int _Theme_Material_Light_PanelContent = default;
            private static bool _Theme_Material_Light_PanelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Light_Voice"/>
            /// </summary>
            public static int Theme_Material_Light_Voice { get { if (!_Theme_Material_Light_VoiceReady) { _Theme_Material_Light_VoiceContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Light_Voice"); _Theme_Material_Light_VoiceReady = true; } return _Theme_Material_Light_VoiceContent; } }
            private static int _Theme_Material_Light_VoiceContent = default;
            private static bool _Theme_Material_Light_VoiceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_NoActionBar"/>
            /// </summary>
            public static int Theme_Material_NoActionBar { get { if (!_Theme_Material_NoActionBarReady) { _Theme_Material_NoActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_NoActionBar"); _Theme_Material_NoActionBarReady = true; } return _Theme_Material_NoActionBarContent; } }
            private static int _Theme_Material_NoActionBarContent = default;
            private static bool _Theme_Material_NoActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_NoActionBar_Fullscreen"/>
            /// </summary>
            public static int Theme_Material_NoActionBar_Fullscreen { get { if (!_Theme_Material_NoActionBar_FullscreenReady) { _Theme_Material_NoActionBar_FullscreenContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_NoActionBar_Fullscreen"); _Theme_Material_NoActionBar_FullscreenReady = true; } return _Theme_Material_NoActionBar_FullscreenContent; } }
            private static int _Theme_Material_NoActionBar_FullscreenContent = default;
            private static bool _Theme_Material_NoActionBar_FullscreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_NoActionBar_Overscan"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Theme_Material_NoActionBar_Overscan { get { if (!_Theme_Material_NoActionBar_OverscanReady) { _Theme_Material_NoActionBar_OverscanContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_NoActionBar_Overscan"); _Theme_Material_NoActionBar_OverscanReady = true; } return _Theme_Material_NoActionBar_OverscanContent; } }
            private static int _Theme_Material_NoActionBar_OverscanContent = default;
            private static bool _Theme_Material_NoActionBar_OverscanReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_NoActionBar_TranslucentDecor"/>
            /// </summary>
            public static int Theme_Material_NoActionBar_TranslucentDecor { get { if (!_Theme_Material_NoActionBar_TranslucentDecorReady) { _Theme_Material_NoActionBar_TranslucentDecorContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_NoActionBar_TranslucentDecor"); _Theme_Material_NoActionBar_TranslucentDecorReady = true; } return _Theme_Material_NoActionBar_TranslucentDecorContent; } }
            private static int _Theme_Material_NoActionBar_TranslucentDecorContent = default;
            private static bool _Theme_Material_NoActionBar_TranslucentDecorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Panel"/>
            /// </summary>
            public static int Theme_Material_Panel { get { if (!_Theme_Material_PanelReady) { _Theme_Material_PanelContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Panel"); _Theme_Material_PanelReady = true; } return _Theme_Material_PanelContent; } }
            private static int _Theme_Material_PanelContent = default;
            private static bool _Theme_Material_PanelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Settings"/>
            /// </summary>
            public static int Theme_Material_Settings { get { if (!_Theme_Material_SettingsReady) { _Theme_Material_SettingsContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Settings"); _Theme_Material_SettingsReady = true; } return _Theme_Material_SettingsContent; } }
            private static int _Theme_Material_SettingsContent = default;
            private static bool _Theme_Material_SettingsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Voice"/>
            /// </summary>
            public static int Theme_Material_Voice { get { if (!_Theme_Material_VoiceReady) { _Theme_Material_VoiceContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Voice"); _Theme_Material_VoiceReady = true; } return _Theme_Material_VoiceContent; } }
            private static int _Theme_Material_VoiceContent = default;
            private static bool _Theme_Material_VoiceReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Wallpaper"/>
            /// </summary>
            public static int Theme_Material_Wallpaper { get { if (!_Theme_Material_WallpaperReady) { _Theme_Material_WallpaperContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Wallpaper"); _Theme_Material_WallpaperReady = true; } return _Theme_Material_WallpaperContent; } }
            private static int _Theme_Material_WallpaperContent = default;
            private static bool _Theme_Material_WallpaperReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Material_Wallpaper_NoTitleBar"/>
            /// </summary>
            public static int Theme_Material_Wallpaper_NoTitleBar { get { if (!_Theme_Material_Wallpaper_NoTitleBarReady) { _Theme_Material_Wallpaper_NoTitleBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Material_Wallpaper_NoTitleBar"); _Theme_Material_Wallpaper_NoTitleBarReady = true; } return _Theme_Material_Wallpaper_NoTitleBarContent; } }
            private static int _Theme_Material_Wallpaper_NoTitleBarContent = default;
            private static bool _Theme_Material_Wallpaper_NoTitleBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_NoDisplay"/>
            /// </summary>
            public static int Theme_NoDisplay { get { if (!_Theme_NoDisplayReady) { _Theme_NoDisplayContent = SGetField<int>(LocalBridgeClazz, "Theme_NoDisplay"); _Theme_NoDisplayReady = true; } return _Theme_NoDisplayContent; } }
            private static int _Theme_NoDisplayContent = default;
            private static bool _Theme_NoDisplayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_NoTitleBar"/>
            /// </summary>
            public static int Theme_NoTitleBar { get { if (!_Theme_NoTitleBarReady) { _Theme_NoTitleBarContent = SGetField<int>(LocalBridgeClazz, "Theme_NoTitleBar"); _Theme_NoTitleBarReady = true; } return _Theme_NoTitleBarContent; } }
            private static int _Theme_NoTitleBarContent = default;
            private static bool _Theme_NoTitleBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_NoTitleBar_Fullscreen"/>
            /// </summary>
            public static int Theme_NoTitleBar_Fullscreen { get { if (!_Theme_NoTitleBar_FullscreenReady) { _Theme_NoTitleBar_FullscreenContent = SGetField<int>(LocalBridgeClazz, "Theme_NoTitleBar_Fullscreen"); _Theme_NoTitleBar_FullscreenReady = true; } return _Theme_NoTitleBar_FullscreenContent; } }
            private static int _Theme_NoTitleBar_FullscreenContent = default;
            private static bool _Theme_NoTitleBar_FullscreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_NoTitleBar_OverlayActionModes"/>
            /// </summary>
            public static int Theme_NoTitleBar_OverlayActionModes { get { if (!_Theme_NoTitleBar_OverlayActionModesReady) { _Theme_NoTitleBar_OverlayActionModesContent = SGetField<int>(LocalBridgeClazz, "Theme_NoTitleBar_OverlayActionModes"); _Theme_NoTitleBar_OverlayActionModesReady = true; } return _Theme_NoTitleBar_OverlayActionModesContent; } }
            private static int _Theme_NoTitleBar_OverlayActionModesContent = default;
            private static bool _Theme_NoTitleBar_OverlayActionModesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Panel"/>
            /// </summary>
            public static int Theme_Panel { get { if (!_Theme_PanelReady) { _Theme_PanelContent = SGetField<int>(LocalBridgeClazz, "Theme_Panel"); _Theme_PanelReady = true; } return _Theme_PanelContent; } }
            private static int _Theme_PanelContent = default;
            private static bool _Theme_PanelReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Translucent"/>
            /// </summary>
            public static int Theme_Translucent { get { if (!_Theme_TranslucentReady) { _Theme_TranslucentContent = SGetField<int>(LocalBridgeClazz, "Theme_Translucent"); _Theme_TranslucentReady = true; } return _Theme_TranslucentContent; } }
            private static int _Theme_TranslucentContent = default;
            private static bool _Theme_TranslucentReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Translucent_NoTitleBar"/>
            /// </summary>
            public static int Theme_Translucent_NoTitleBar { get { if (!_Theme_Translucent_NoTitleBarReady) { _Theme_Translucent_NoTitleBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Translucent_NoTitleBar"); _Theme_Translucent_NoTitleBarReady = true; } return _Theme_Translucent_NoTitleBarContent; } }
            private static int _Theme_Translucent_NoTitleBarContent = default;
            private static bool _Theme_Translucent_NoTitleBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Translucent_NoTitleBar_Fullscreen"/>
            /// </summary>
            public static int Theme_Translucent_NoTitleBar_Fullscreen { get { if (!_Theme_Translucent_NoTitleBar_FullscreenReady) { _Theme_Translucent_NoTitleBar_FullscreenContent = SGetField<int>(LocalBridgeClazz, "Theme_Translucent_NoTitleBar_Fullscreen"); _Theme_Translucent_NoTitleBar_FullscreenReady = true; } return _Theme_Translucent_NoTitleBar_FullscreenContent; } }
            private static int _Theme_Translucent_NoTitleBar_FullscreenContent = default;
            private static bool _Theme_Translucent_NoTitleBar_FullscreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Wallpaper"/>
            /// </summary>
            public static int Theme_Wallpaper { get { if (!_Theme_WallpaperReady) { _Theme_WallpaperContent = SGetField<int>(LocalBridgeClazz, "Theme_Wallpaper"); _Theme_WallpaperReady = true; } return _Theme_WallpaperContent; } }
            private static int _Theme_WallpaperContent = default;
            private static bool _Theme_WallpaperReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Wallpaper_NoTitleBar"/>
            /// </summary>
            public static int Theme_Wallpaper_NoTitleBar { get { if (!_Theme_Wallpaper_NoTitleBarReady) { _Theme_Wallpaper_NoTitleBarContent = SGetField<int>(LocalBridgeClazz, "Theme_Wallpaper_NoTitleBar"); _Theme_Wallpaper_NoTitleBarReady = true; } return _Theme_Wallpaper_NoTitleBarContent; } }
            private static int _Theme_Wallpaper_NoTitleBarContent = default;
            private static bool _Theme_Wallpaper_NoTitleBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_Wallpaper_NoTitleBar_Fullscreen"/>
            /// </summary>
            public static int Theme_Wallpaper_NoTitleBar_Fullscreen { get { if (!_Theme_Wallpaper_NoTitleBar_FullscreenReady) { _Theme_Wallpaper_NoTitleBar_FullscreenContent = SGetField<int>(LocalBridgeClazz, "Theme_Wallpaper_NoTitleBar_Fullscreen"); _Theme_Wallpaper_NoTitleBar_FullscreenReady = true; } return _Theme_Wallpaper_NoTitleBar_FullscreenContent; } }
            private static int _Theme_Wallpaper_NoTitleBar_FullscreenContent = default;
            private static bool _Theme_Wallpaper_NoTitleBar_FullscreenReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_WallpaperSettings"/>
            /// </summary>
            public static int Theme_WallpaperSettings { get { if (!_Theme_WallpaperSettingsReady) { _Theme_WallpaperSettingsContent = SGetField<int>(LocalBridgeClazz, "Theme_WallpaperSettings"); _Theme_WallpaperSettingsReady = true; } return _Theme_WallpaperSettingsContent; } }
            private static int _Theme_WallpaperSettingsContent = default;
            private static bool _Theme_WallpaperSettingsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Theme_WithActionBar"/>
            /// </summary>
            public static int Theme_WithActionBar { get { if (!_Theme_WithActionBarReady) { _Theme_WithActionBarContent = SGetField<int>(LocalBridgeClazz, "Theme_WithActionBar"); _Theme_WithActionBarReady = true; } return _Theme_WithActionBarContent; } }
            private static int _Theme_WithActionBarContent = default;
            private static bool _Theme_WithActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#ThemeOverlay"/>
            /// </summary>
            public static int ThemeOverlay { get { if (!_ThemeOverlayReady) { _ThemeOverlayContent = SGetField<int>(LocalBridgeClazz, "ThemeOverlay"); _ThemeOverlayReady = true; } return _ThemeOverlayContent; } }
            private static int _ThemeOverlayContent = default;
            private static bool _ThemeOverlayReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#ThemeOverlay_DeviceDefault_Accent_DayNight"/>
            /// </summary>
            public static int ThemeOverlay_DeviceDefault_Accent_DayNight { get { if (!_ThemeOverlay_DeviceDefault_Accent_DayNightReady) { _ThemeOverlay_DeviceDefault_Accent_DayNightContent = SGetField<int>(LocalBridgeClazz, "ThemeOverlay_DeviceDefault_Accent_DayNight"); _ThemeOverlay_DeviceDefault_Accent_DayNightReady = true; } return _ThemeOverlay_DeviceDefault_Accent_DayNightContent; } }
            private static int _ThemeOverlay_DeviceDefault_Accent_DayNightContent = default;
            private static bool _ThemeOverlay_DeviceDefault_Accent_DayNightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#ThemeOverlay_Material"/>
            /// </summary>
            public static int ThemeOverlay_Material { get { if (!_ThemeOverlay_MaterialReady) { _ThemeOverlay_MaterialContent = SGetField<int>(LocalBridgeClazz, "ThemeOverlay_Material"); _ThemeOverlay_MaterialReady = true; } return _ThemeOverlay_MaterialContent; } }
            private static int _ThemeOverlay_MaterialContent = default;
            private static bool _ThemeOverlay_MaterialReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#ThemeOverlay_Material_ActionBar"/>
            /// </summary>
            public static int ThemeOverlay_Material_ActionBar { get { if (!_ThemeOverlay_Material_ActionBarReady) { _ThemeOverlay_Material_ActionBarContent = SGetField<int>(LocalBridgeClazz, "ThemeOverlay_Material_ActionBar"); _ThemeOverlay_Material_ActionBarReady = true; } return _ThemeOverlay_Material_ActionBarContent; } }
            private static int _ThemeOverlay_Material_ActionBarContent = default;
            private static bool _ThemeOverlay_Material_ActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#ThemeOverlay_Material_Dark"/>
            /// </summary>
            public static int ThemeOverlay_Material_Dark { get { if (!_ThemeOverlay_Material_DarkReady) { _ThemeOverlay_Material_DarkContent = SGetField<int>(LocalBridgeClazz, "ThemeOverlay_Material_Dark"); _ThemeOverlay_Material_DarkReady = true; } return _ThemeOverlay_Material_DarkContent; } }
            private static int _ThemeOverlay_Material_DarkContent = default;
            private static bool _ThemeOverlay_Material_DarkReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#ThemeOverlay_Material_Dark_ActionBar"/>
            /// </summary>
            public static int ThemeOverlay_Material_Dark_ActionBar { get { if (!_ThemeOverlay_Material_Dark_ActionBarReady) { _ThemeOverlay_Material_Dark_ActionBarContent = SGetField<int>(LocalBridgeClazz, "ThemeOverlay_Material_Dark_ActionBar"); _ThemeOverlay_Material_Dark_ActionBarReady = true; } return _ThemeOverlay_Material_Dark_ActionBarContent; } }
            private static int _ThemeOverlay_Material_Dark_ActionBarContent = default;
            private static bool _ThemeOverlay_Material_Dark_ActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#ThemeOverlay_Material_Dialog"/>
            /// </summary>
            public static int ThemeOverlay_Material_Dialog { get { if (!_ThemeOverlay_Material_DialogReady) { _ThemeOverlay_Material_DialogContent = SGetField<int>(LocalBridgeClazz, "ThemeOverlay_Material_Dialog"); _ThemeOverlay_Material_DialogReady = true; } return _ThemeOverlay_Material_DialogContent; } }
            private static int _ThemeOverlay_Material_DialogContent = default;
            private static bool _ThemeOverlay_Material_DialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#ThemeOverlay_Material_Dialog_Alert"/>
            /// </summary>
            public static int ThemeOverlay_Material_Dialog_Alert { get { if (!_ThemeOverlay_Material_Dialog_AlertReady) { _ThemeOverlay_Material_Dialog_AlertContent = SGetField<int>(LocalBridgeClazz, "ThemeOverlay_Material_Dialog_Alert"); _ThemeOverlay_Material_Dialog_AlertReady = true; } return _ThemeOverlay_Material_Dialog_AlertContent; } }
            private static int _ThemeOverlay_Material_Dialog_AlertContent = default;
            private static bool _ThemeOverlay_Material_Dialog_AlertReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#ThemeOverlay_Material_Light"/>
            /// </summary>
            public static int ThemeOverlay_Material_Light { get { if (!_ThemeOverlay_Material_LightReady) { _ThemeOverlay_Material_LightContent = SGetField<int>(LocalBridgeClazz, "ThemeOverlay_Material_Light"); _ThemeOverlay_Material_LightReady = true; } return _ThemeOverlay_Material_LightContent; } }
            private static int _ThemeOverlay_Material_LightContent = default;
            private static bool _ThemeOverlay_Material_LightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget"/>
            /// </summary>
            public static int Widget { get { if (!_WidgetReady) { _WidgetContent = SGetField<int>(LocalBridgeClazz, "Widget"); _WidgetReady = true; } return _WidgetContent; } }
            private static int _WidgetContent = default;
            private static bool _WidgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_AbsListView"/>
            /// </summary>
            public static int Widget_AbsListView { get { if (!_Widget_AbsListViewReady) { _Widget_AbsListViewContent = SGetField<int>(LocalBridgeClazz, "Widget_AbsListView"); _Widget_AbsListViewReady = true; } return _Widget_AbsListViewContent; } }
            private static int _Widget_AbsListViewContent = default;
            private static bool _Widget_AbsListViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ActionBar"/>
            /// </summary>
            public static int Widget_ActionBar { get { if (!_Widget_ActionBarReady) { _Widget_ActionBarContent = SGetField<int>(LocalBridgeClazz, "Widget_ActionBar"); _Widget_ActionBarReady = true; } return _Widget_ActionBarContent; } }
            private static int _Widget_ActionBarContent = default;
            private static bool _Widget_ActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ActionBar_TabBar"/>
            /// </summary>
            public static int Widget_ActionBar_TabBar { get { if (!_Widget_ActionBar_TabBarReady) { _Widget_ActionBar_TabBarContent = SGetField<int>(LocalBridgeClazz, "Widget_ActionBar_TabBar"); _Widget_ActionBar_TabBarReady = true; } return _Widget_ActionBar_TabBarContent; } }
            private static int _Widget_ActionBar_TabBarContent = default;
            private static bool _Widget_ActionBar_TabBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ActionBar_TabText"/>
            /// </summary>
            public static int Widget_ActionBar_TabText { get { if (!_Widget_ActionBar_TabTextReady) { _Widget_ActionBar_TabTextContent = SGetField<int>(LocalBridgeClazz, "Widget_ActionBar_TabText"); _Widget_ActionBar_TabTextReady = true; } return _Widget_ActionBar_TabTextContent; } }
            private static int _Widget_ActionBar_TabTextContent = default;
            private static bool _Widget_ActionBar_TabTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ActionBar_TabView"/>
            /// </summary>
            public static int Widget_ActionBar_TabView { get { if (!_Widget_ActionBar_TabViewReady) { _Widget_ActionBar_TabViewContent = SGetField<int>(LocalBridgeClazz, "Widget_ActionBar_TabView"); _Widget_ActionBar_TabViewReady = true; } return _Widget_ActionBar_TabViewContent; } }
            private static int _Widget_ActionBar_TabViewContent = default;
            private static bool _Widget_ActionBar_TabViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ActionButton"/>
            /// </summary>
            public static int Widget_ActionButton { get { if (!_Widget_ActionButtonReady) { _Widget_ActionButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_ActionButton"); _Widget_ActionButtonReady = true; } return _Widget_ActionButtonContent; } }
            private static int _Widget_ActionButtonContent = default;
            private static bool _Widget_ActionButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ActionButton_CloseMode"/>
            /// </summary>
            public static int Widget_ActionButton_CloseMode { get { if (!_Widget_ActionButton_CloseModeReady) { _Widget_ActionButton_CloseModeContent = SGetField<int>(LocalBridgeClazz, "Widget_ActionButton_CloseMode"); _Widget_ActionButton_CloseModeReady = true; } return _Widget_ActionButton_CloseModeContent; } }
            private static int _Widget_ActionButton_CloseModeContent = default;
            private static bool _Widget_ActionButton_CloseModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ActionButton_Overflow"/>
            /// </summary>
            public static int Widget_ActionButton_Overflow { get { if (!_Widget_ActionButton_OverflowReady) { _Widget_ActionButton_OverflowContent = SGetField<int>(LocalBridgeClazz, "Widget_ActionButton_Overflow"); _Widget_ActionButton_OverflowReady = true; } return _Widget_ActionButton_OverflowContent; } }
            private static int _Widget_ActionButton_OverflowContent = default;
            private static bool _Widget_ActionButton_OverflowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_AutoCompleteTextView"/>
            /// </summary>
            public static int Widget_AutoCompleteTextView { get { if (!_Widget_AutoCompleteTextViewReady) { _Widget_AutoCompleteTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_AutoCompleteTextView"); _Widget_AutoCompleteTextViewReady = true; } return _Widget_AutoCompleteTextViewContent; } }
            private static int _Widget_AutoCompleteTextViewContent = default;
            private static bool _Widget_AutoCompleteTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Button"/>
            /// </summary>
            public static int Widget_Button { get { if (!_Widget_ButtonReady) { _Widget_ButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Button"); _Widget_ButtonReady = true; } return _Widget_ButtonContent; } }
            private static int _Widget_ButtonContent = default;
            private static bool _Widget_ButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Button_Inset"/>
            /// </summary>
            public static int Widget_Button_Inset { get { if (!_Widget_Button_InsetReady) { _Widget_Button_InsetContent = SGetField<int>(LocalBridgeClazz, "Widget_Button_Inset"); _Widget_Button_InsetReady = true; } return _Widget_Button_InsetContent; } }
            private static int _Widget_Button_InsetContent = default;
            private static bool _Widget_Button_InsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Button_Small"/>
            /// </summary>
            public static int Widget_Button_Small { get { if (!_Widget_Button_SmallReady) { _Widget_Button_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Button_Small"); _Widget_Button_SmallReady = true; } return _Widget_Button_SmallContent; } }
            private static int _Widget_Button_SmallContent = default;
            private static bool _Widget_Button_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Button_Toggle"/>
            /// </summary>
            public static int Widget_Button_Toggle { get { if (!_Widget_Button_ToggleReady) { _Widget_Button_ToggleContent = SGetField<int>(LocalBridgeClazz, "Widget_Button_Toggle"); _Widget_Button_ToggleReady = true; } return _Widget_Button_ToggleContent; } }
            private static int _Widget_Button_ToggleContent = default;
            private static bool _Widget_Button_ToggleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_CalendarView"/>
            /// </summary>
            public static int Widget_CalendarView { get { if (!_Widget_CalendarViewReady) { _Widget_CalendarViewContent = SGetField<int>(LocalBridgeClazz, "Widget_CalendarView"); _Widget_CalendarViewReady = true; } return _Widget_CalendarViewContent; } }
            private static int _Widget_CalendarViewContent = default;
            private static bool _Widget_CalendarViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_CompoundButton"/>
            /// </summary>
            public static int Widget_CompoundButton { get { if (!_Widget_CompoundButtonReady) { _Widget_CompoundButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_CompoundButton"); _Widget_CompoundButtonReady = true; } return _Widget_CompoundButtonContent; } }
            private static int _Widget_CompoundButtonContent = default;
            private static bool _Widget_CompoundButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_CompoundButton_CheckBox"/>
            /// </summary>
            public static int Widget_CompoundButton_CheckBox { get { if (!_Widget_CompoundButton_CheckBoxReady) { _Widget_CompoundButton_CheckBoxContent = SGetField<int>(LocalBridgeClazz, "Widget_CompoundButton_CheckBox"); _Widget_CompoundButton_CheckBoxReady = true; } return _Widget_CompoundButton_CheckBoxContent; } }
            private static int _Widget_CompoundButton_CheckBoxContent = default;
            private static bool _Widget_CompoundButton_CheckBoxReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_CompoundButton_RadioButton"/>
            /// </summary>
            public static int Widget_CompoundButton_RadioButton { get { if (!_Widget_CompoundButton_RadioButtonReady) { _Widget_CompoundButton_RadioButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_CompoundButton_RadioButton"); _Widget_CompoundButton_RadioButtonReady = true; } return _Widget_CompoundButton_RadioButtonContent; } }
            private static int _Widget_CompoundButton_RadioButtonContent = default;
            private static bool _Widget_CompoundButton_RadioButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_CompoundButton_Star"/>
            /// </summary>
            public static int Widget_CompoundButton_Star { get { if (!_Widget_CompoundButton_StarReady) { _Widget_CompoundButton_StarContent = SGetField<int>(LocalBridgeClazz, "Widget_CompoundButton_Star"); _Widget_CompoundButton_StarReady = true; } return _Widget_CompoundButton_StarContent; } }
            private static int _Widget_CompoundButton_StarContent = default;
            private static bool _Widget_CompoundButton_StarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DatePicker"/>
            /// </summary>
            public static int Widget_DatePicker { get { if (!_Widget_DatePickerReady) { _Widget_DatePickerContent = SGetField<int>(LocalBridgeClazz, "Widget_DatePicker"); _Widget_DatePickerReady = true; } return _Widget_DatePickerContent; } }
            private static int _Widget_DatePickerContent = default;
            private static bool _Widget_DatePickerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault"/>
            /// </summary>
            public static int Widget_DeviceDefault { get { if (!_Widget_DeviceDefaultReady) { _Widget_DeviceDefaultContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault"); _Widget_DeviceDefaultReady = true; } return _Widget_DeviceDefaultContent; } }
            private static int _Widget_DeviceDefaultContent = default;
            private static bool _Widget_DeviceDefaultReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ActionBar"/>
            /// </summary>
            public static int Widget_DeviceDefault_ActionBar { get { if (!_Widget_DeviceDefault_ActionBarReady) { _Widget_DeviceDefault_ActionBarContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ActionBar"); _Widget_DeviceDefault_ActionBarReady = true; } return _Widget_DeviceDefault_ActionBarContent; } }
            private static int _Widget_DeviceDefault_ActionBarContent = default;
            private static bool _Widget_DeviceDefault_ActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ActionBar_Solid"/>
            /// </summary>
            public static int Widget_DeviceDefault_ActionBar_Solid { get { if (!_Widget_DeviceDefault_ActionBar_SolidReady) { _Widget_DeviceDefault_ActionBar_SolidContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ActionBar_Solid"); _Widget_DeviceDefault_ActionBar_SolidReady = true; } return _Widget_DeviceDefault_ActionBar_SolidContent; } }
            private static int _Widget_DeviceDefault_ActionBar_SolidContent = default;
            private static bool _Widget_DeviceDefault_ActionBar_SolidReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ActionBar_TabBar"/>
            /// </summary>
            public static int Widget_DeviceDefault_ActionBar_TabBar { get { if (!_Widget_DeviceDefault_ActionBar_TabBarReady) { _Widget_DeviceDefault_ActionBar_TabBarContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ActionBar_TabBar"); _Widget_DeviceDefault_ActionBar_TabBarReady = true; } return _Widget_DeviceDefault_ActionBar_TabBarContent; } }
            private static int _Widget_DeviceDefault_ActionBar_TabBarContent = default;
            private static bool _Widget_DeviceDefault_ActionBar_TabBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ActionBar_TabText"/>
            /// </summary>
            public static int Widget_DeviceDefault_ActionBar_TabText { get { if (!_Widget_DeviceDefault_ActionBar_TabTextReady) { _Widget_DeviceDefault_ActionBar_TabTextContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ActionBar_TabText"); _Widget_DeviceDefault_ActionBar_TabTextReady = true; } return _Widget_DeviceDefault_ActionBar_TabTextContent; } }
            private static int _Widget_DeviceDefault_ActionBar_TabTextContent = default;
            private static bool _Widget_DeviceDefault_ActionBar_TabTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ActionBar_TabView"/>
            /// </summary>
            public static int Widget_DeviceDefault_ActionBar_TabView { get { if (!_Widget_DeviceDefault_ActionBar_TabViewReady) { _Widget_DeviceDefault_ActionBar_TabViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ActionBar_TabView"); _Widget_DeviceDefault_ActionBar_TabViewReady = true; } return _Widget_DeviceDefault_ActionBar_TabViewContent; } }
            private static int _Widget_DeviceDefault_ActionBar_TabViewContent = default;
            private static bool _Widget_DeviceDefault_ActionBar_TabViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ActionButton"/>
            /// </summary>
            public static int Widget_DeviceDefault_ActionButton { get { if (!_Widget_DeviceDefault_ActionButtonReady) { _Widget_DeviceDefault_ActionButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ActionButton"); _Widget_DeviceDefault_ActionButtonReady = true; } return _Widget_DeviceDefault_ActionButtonContent; } }
            private static int _Widget_DeviceDefault_ActionButtonContent = default;
            private static bool _Widget_DeviceDefault_ActionButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ActionButton_CloseMode"/>
            /// </summary>
            public static int Widget_DeviceDefault_ActionButton_CloseMode { get { if (!_Widget_DeviceDefault_ActionButton_CloseModeReady) { _Widget_DeviceDefault_ActionButton_CloseModeContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ActionButton_CloseMode"); _Widget_DeviceDefault_ActionButton_CloseModeReady = true; } return _Widget_DeviceDefault_ActionButton_CloseModeContent; } }
            private static int _Widget_DeviceDefault_ActionButton_CloseModeContent = default;
            private static bool _Widget_DeviceDefault_ActionButton_CloseModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ActionButton_Overflow"/>
            /// </summary>
            public static int Widget_DeviceDefault_ActionButton_Overflow { get { if (!_Widget_DeviceDefault_ActionButton_OverflowReady) { _Widget_DeviceDefault_ActionButton_OverflowContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ActionButton_Overflow"); _Widget_DeviceDefault_ActionButton_OverflowReady = true; } return _Widget_DeviceDefault_ActionButton_OverflowContent; } }
            private static int _Widget_DeviceDefault_ActionButton_OverflowContent = default;
            private static bool _Widget_DeviceDefault_ActionButton_OverflowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ActionButton_TextButton"/>
            /// </summary>
            public static int Widget_DeviceDefault_ActionButton_TextButton { get { if (!_Widget_DeviceDefault_ActionButton_TextButtonReady) { _Widget_DeviceDefault_ActionButton_TextButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ActionButton_TextButton"); _Widget_DeviceDefault_ActionButton_TextButtonReady = true; } return _Widget_DeviceDefault_ActionButton_TextButtonContent; } }
            private static int _Widget_DeviceDefault_ActionButton_TextButtonContent = default;
            private static bool _Widget_DeviceDefault_ActionButton_TextButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ActionMode"/>
            /// </summary>
            public static int Widget_DeviceDefault_ActionMode { get { if (!_Widget_DeviceDefault_ActionModeReady) { _Widget_DeviceDefault_ActionModeContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ActionMode"); _Widget_DeviceDefault_ActionModeReady = true; } return _Widget_DeviceDefault_ActionModeContent; } }
            private static int _Widget_DeviceDefault_ActionModeContent = default;
            private static bool _Widget_DeviceDefault_ActionModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_AutoCompleteTextView"/>
            /// </summary>
            public static int Widget_DeviceDefault_AutoCompleteTextView { get { if (!_Widget_DeviceDefault_AutoCompleteTextViewReady) { _Widget_DeviceDefault_AutoCompleteTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_AutoCompleteTextView"); _Widget_DeviceDefault_AutoCompleteTextViewReady = true; } return _Widget_DeviceDefault_AutoCompleteTextViewContent; } }
            private static int _Widget_DeviceDefault_AutoCompleteTextViewContent = default;
            private static bool _Widget_DeviceDefault_AutoCompleteTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Button"/>
            /// </summary>
            public static int Widget_DeviceDefault_Button { get { if (!_Widget_DeviceDefault_ButtonReady) { _Widget_DeviceDefault_ButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Button"); _Widget_DeviceDefault_ButtonReady = true; } return _Widget_DeviceDefault_ButtonContent; } }
            private static int _Widget_DeviceDefault_ButtonContent = default;
            private static bool _Widget_DeviceDefault_ButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Button_Borderless"/>
            /// </summary>
            public static int Widget_DeviceDefault_Button_Borderless { get { if (!_Widget_DeviceDefault_Button_BorderlessReady) { _Widget_DeviceDefault_Button_BorderlessContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Button_Borderless"); _Widget_DeviceDefault_Button_BorderlessReady = true; } return _Widget_DeviceDefault_Button_BorderlessContent; } }
            private static int _Widget_DeviceDefault_Button_BorderlessContent = default;
            private static bool _Widget_DeviceDefault_Button_BorderlessReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Button_Borderless_Colored"/>
            /// </summary>
            public static int Widget_DeviceDefault_Button_Borderless_Colored { get { if (!_Widget_DeviceDefault_Button_Borderless_ColoredReady) { _Widget_DeviceDefault_Button_Borderless_ColoredContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Button_Borderless_Colored"); _Widget_DeviceDefault_Button_Borderless_ColoredReady = true; } return _Widget_DeviceDefault_Button_Borderless_ColoredContent; } }
            private static int _Widget_DeviceDefault_Button_Borderless_ColoredContent = default;
            private static bool _Widget_DeviceDefault_Button_Borderless_ColoredReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Button_Borderless_Small"/>
            /// </summary>
            public static int Widget_DeviceDefault_Button_Borderless_Small { get { if (!_Widget_DeviceDefault_Button_Borderless_SmallReady) { _Widget_DeviceDefault_Button_Borderless_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Button_Borderless_Small"); _Widget_DeviceDefault_Button_Borderless_SmallReady = true; } return _Widget_DeviceDefault_Button_Borderless_SmallContent; } }
            private static int _Widget_DeviceDefault_Button_Borderless_SmallContent = default;
            private static bool _Widget_DeviceDefault_Button_Borderless_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Button_Colored"/>
            /// </summary>
            public static int Widget_DeviceDefault_Button_Colored { get { if (!_Widget_DeviceDefault_Button_ColoredReady) { _Widget_DeviceDefault_Button_ColoredContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Button_Colored"); _Widget_DeviceDefault_Button_ColoredReady = true; } return _Widget_DeviceDefault_Button_ColoredContent; } }
            private static int _Widget_DeviceDefault_Button_ColoredContent = default;
            private static bool _Widget_DeviceDefault_Button_ColoredReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Button_Inset"/>
            /// </summary>
            public static int Widget_DeviceDefault_Button_Inset { get { if (!_Widget_DeviceDefault_Button_InsetReady) { _Widget_DeviceDefault_Button_InsetContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Button_Inset"); _Widget_DeviceDefault_Button_InsetReady = true; } return _Widget_DeviceDefault_Button_InsetContent; } }
            private static int _Widget_DeviceDefault_Button_InsetContent = default;
            private static bool _Widget_DeviceDefault_Button_InsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Button_Small"/>
            /// </summary>
            public static int Widget_DeviceDefault_Button_Small { get { if (!_Widget_DeviceDefault_Button_SmallReady) { _Widget_DeviceDefault_Button_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Button_Small"); _Widget_DeviceDefault_Button_SmallReady = true; } return _Widget_DeviceDefault_Button_SmallContent; } }
            private static int _Widget_DeviceDefault_Button_SmallContent = default;
            private static bool _Widget_DeviceDefault_Button_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Button_Toggle"/>
            /// </summary>
            public static int Widget_DeviceDefault_Button_Toggle { get { if (!_Widget_DeviceDefault_Button_ToggleReady) { _Widget_DeviceDefault_Button_ToggleContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Button_Toggle"); _Widget_DeviceDefault_Button_ToggleReady = true; } return _Widget_DeviceDefault_Button_ToggleContent; } }
            private static int _Widget_DeviceDefault_Button_ToggleContent = default;
            private static bool _Widget_DeviceDefault_Button_ToggleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_CalendarView"/>
            /// </summary>
            public static int Widget_DeviceDefault_CalendarView { get { if (!_Widget_DeviceDefault_CalendarViewReady) { _Widget_DeviceDefault_CalendarViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_CalendarView"); _Widget_DeviceDefault_CalendarViewReady = true; } return _Widget_DeviceDefault_CalendarViewContent; } }
            private static int _Widget_DeviceDefault_CalendarViewContent = default;
            private static bool _Widget_DeviceDefault_CalendarViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_CheckedTextView"/>
            /// </summary>
            public static int Widget_DeviceDefault_CheckedTextView { get { if (!_Widget_DeviceDefault_CheckedTextViewReady) { _Widget_DeviceDefault_CheckedTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_CheckedTextView"); _Widget_DeviceDefault_CheckedTextViewReady = true; } return _Widget_DeviceDefault_CheckedTextViewContent; } }
            private static int _Widget_DeviceDefault_CheckedTextViewContent = default;
            private static bool _Widget_DeviceDefault_CheckedTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_CompoundButton_CheckBox"/>
            /// </summary>
            public static int Widget_DeviceDefault_CompoundButton_CheckBox { get { if (!_Widget_DeviceDefault_CompoundButton_CheckBoxReady) { _Widget_DeviceDefault_CompoundButton_CheckBoxContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_CompoundButton_CheckBox"); _Widget_DeviceDefault_CompoundButton_CheckBoxReady = true; } return _Widget_DeviceDefault_CompoundButton_CheckBoxContent; } }
            private static int _Widget_DeviceDefault_CompoundButton_CheckBoxContent = default;
            private static bool _Widget_DeviceDefault_CompoundButton_CheckBoxReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_CompoundButton_RadioButton"/>
            /// </summary>
            public static int Widget_DeviceDefault_CompoundButton_RadioButton { get { if (!_Widget_DeviceDefault_CompoundButton_RadioButtonReady) { _Widget_DeviceDefault_CompoundButton_RadioButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_CompoundButton_RadioButton"); _Widget_DeviceDefault_CompoundButton_RadioButtonReady = true; } return _Widget_DeviceDefault_CompoundButton_RadioButtonContent; } }
            private static int _Widget_DeviceDefault_CompoundButton_RadioButtonContent = default;
            private static bool _Widget_DeviceDefault_CompoundButton_RadioButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_CompoundButton_Star"/>
            /// </summary>
            public static int Widget_DeviceDefault_CompoundButton_Star { get { if (!_Widget_DeviceDefault_CompoundButton_StarReady) { _Widget_DeviceDefault_CompoundButton_StarContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_CompoundButton_Star"); _Widget_DeviceDefault_CompoundButton_StarReady = true; } return _Widget_DeviceDefault_CompoundButton_StarContent; } }
            private static int _Widget_DeviceDefault_CompoundButton_StarContent = default;
            private static bool _Widget_DeviceDefault_CompoundButton_StarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_DatePicker"/>
            /// </summary>
            public static int Widget_DeviceDefault_DatePicker { get { if (!_Widget_DeviceDefault_DatePickerReady) { _Widget_DeviceDefault_DatePickerContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_DatePicker"); _Widget_DeviceDefault_DatePickerReady = true; } return _Widget_DeviceDefault_DatePickerContent; } }
            private static int _Widget_DeviceDefault_DatePickerContent = default;
            private static bool _Widget_DeviceDefault_DatePickerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_DropDownItem"/>
            /// </summary>
            public static int Widget_DeviceDefault_DropDownItem { get { if (!_Widget_DeviceDefault_DropDownItemReady) { _Widget_DeviceDefault_DropDownItemContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_DropDownItem"); _Widget_DeviceDefault_DropDownItemReady = true; } return _Widget_DeviceDefault_DropDownItemContent; } }
            private static int _Widget_DeviceDefault_DropDownItemContent = default;
            private static bool _Widget_DeviceDefault_DropDownItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_DropDownItem_Spinner"/>
            /// </summary>
            public static int Widget_DeviceDefault_DropDownItem_Spinner { get { if (!_Widget_DeviceDefault_DropDownItem_SpinnerReady) { _Widget_DeviceDefault_DropDownItem_SpinnerContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_DropDownItem_Spinner"); _Widget_DeviceDefault_DropDownItem_SpinnerReady = true; } return _Widget_DeviceDefault_DropDownItem_SpinnerContent; } }
            private static int _Widget_DeviceDefault_DropDownItem_SpinnerContent = default;
            private static bool _Widget_DeviceDefault_DropDownItem_SpinnerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_EditText"/>
            /// </summary>
            public static int Widget_DeviceDefault_EditText { get { if (!_Widget_DeviceDefault_EditTextReady) { _Widget_DeviceDefault_EditTextContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_EditText"); _Widget_DeviceDefault_EditTextReady = true; } return _Widget_DeviceDefault_EditTextContent; } }
            private static int _Widget_DeviceDefault_EditTextContent = default;
            private static bool _Widget_DeviceDefault_EditTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ExpandableListView"/>
            /// </summary>
            public static int Widget_DeviceDefault_ExpandableListView { get { if (!_Widget_DeviceDefault_ExpandableListViewReady) { _Widget_DeviceDefault_ExpandableListViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ExpandableListView"); _Widget_DeviceDefault_ExpandableListViewReady = true; } return _Widget_DeviceDefault_ExpandableListViewContent; } }
            private static int _Widget_DeviceDefault_ExpandableListViewContent = default;
            private static bool _Widget_DeviceDefault_ExpandableListViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_FastScroll"/>
            /// </summary>
            public static int Widget_DeviceDefault_FastScroll { get { if (!_Widget_DeviceDefault_FastScrollReady) { _Widget_DeviceDefault_FastScrollContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_FastScroll"); _Widget_DeviceDefault_FastScrollReady = true; } return _Widget_DeviceDefault_FastScrollContent; } }
            private static int _Widget_DeviceDefault_FastScrollContent = default;
            private static bool _Widget_DeviceDefault_FastScrollReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_GridView"/>
            /// </summary>
            public static int Widget_DeviceDefault_GridView { get { if (!_Widget_DeviceDefault_GridViewReady) { _Widget_DeviceDefault_GridViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_GridView"); _Widget_DeviceDefault_GridViewReady = true; } return _Widget_DeviceDefault_GridViewContent; } }
            private static int _Widget_DeviceDefault_GridViewContent = default;
            private static bool _Widget_DeviceDefault_GridViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_HorizontalScrollView"/>
            /// </summary>
            public static int Widget_DeviceDefault_HorizontalScrollView { get { if (!_Widget_DeviceDefault_HorizontalScrollViewReady) { _Widget_DeviceDefault_HorizontalScrollViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_HorizontalScrollView"); _Widget_DeviceDefault_HorizontalScrollViewReady = true; } return _Widget_DeviceDefault_HorizontalScrollViewContent; } }
            private static int _Widget_DeviceDefault_HorizontalScrollViewContent = default;
            private static bool _Widget_DeviceDefault_HorizontalScrollViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ImageButton"/>
            /// </summary>
            public static int Widget_DeviceDefault_ImageButton { get { if (!_Widget_DeviceDefault_ImageButtonReady) { _Widget_DeviceDefault_ImageButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ImageButton"); _Widget_DeviceDefault_ImageButtonReady = true; } return _Widget_DeviceDefault_ImageButtonContent; } }
            private static int _Widget_DeviceDefault_ImageButtonContent = default;
            private static bool _Widget_DeviceDefault_ImageButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light { get { if (!_Widget_DeviceDefault_LightReady) { _Widget_DeviceDefault_LightContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light"); _Widget_DeviceDefault_LightReady = true; } return _Widget_DeviceDefault_LightContent; } }
            private static int _Widget_DeviceDefault_LightContent = default;
            private static bool _Widget_DeviceDefault_LightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ActionBar"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ActionBar { get { if (!_Widget_DeviceDefault_Light_ActionBarReady) { _Widget_DeviceDefault_Light_ActionBarContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ActionBar"); _Widget_DeviceDefault_Light_ActionBarReady = true; } return _Widget_DeviceDefault_Light_ActionBarContent; } }
            private static int _Widget_DeviceDefault_Light_ActionBarContent = default;
            private static bool _Widget_DeviceDefault_Light_ActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ActionBar_Solid"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ActionBar_Solid { get { if (!_Widget_DeviceDefault_Light_ActionBar_SolidReady) { _Widget_DeviceDefault_Light_ActionBar_SolidContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ActionBar_Solid"); _Widget_DeviceDefault_Light_ActionBar_SolidReady = true; } return _Widget_DeviceDefault_Light_ActionBar_SolidContent; } }
            private static int _Widget_DeviceDefault_Light_ActionBar_SolidContent = default;
            private static bool _Widget_DeviceDefault_Light_ActionBar_SolidReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ActionBar_Solid_Inverse"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Widget_DeviceDefault_Light_ActionBar_Solid_Inverse { get { if (!_Widget_DeviceDefault_Light_ActionBar_Solid_InverseReady) { _Widget_DeviceDefault_Light_ActionBar_Solid_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ActionBar_Solid_Inverse"); _Widget_DeviceDefault_Light_ActionBar_Solid_InverseReady = true; } return _Widget_DeviceDefault_Light_ActionBar_Solid_InverseContent; } }
            private static int _Widget_DeviceDefault_Light_ActionBar_Solid_InverseContent = default;
            private static bool _Widget_DeviceDefault_Light_ActionBar_Solid_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ActionBar_TabBar"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ActionBar_TabBar { get { if (!_Widget_DeviceDefault_Light_ActionBar_TabBarReady) { _Widget_DeviceDefault_Light_ActionBar_TabBarContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ActionBar_TabBar"); _Widget_DeviceDefault_Light_ActionBar_TabBarReady = true; } return _Widget_DeviceDefault_Light_ActionBar_TabBarContent; } }
            private static int _Widget_DeviceDefault_Light_ActionBar_TabBarContent = default;
            private static bool _Widget_DeviceDefault_Light_ActionBar_TabBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ActionBar_TabBar_Inverse"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Widget_DeviceDefault_Light_ActionBar_TabBar_Inverse { get { if (!_Widget_DeviceDefault_Light_ActionBar_TabBar_InverseReady) { _Widget_DeviceDefault_Light_ActionBar_TabBar_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ActionBar_TabBar_Inverse"); _Widget_DeviceDefault_Light_ActionBar_TabBar_InverseReady = true; } return _Widget_DeviceDefault_Light_ActionBar_TabBar_InverseContent; } }
            private static int _Widget_DeviceDefault_Light_ActionBar_TabBar_InverseContent = default;
            private static bool _Widget_DeviceDefault_Light_ActionBar_TabBar_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ActionBar_TabText"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ActionBar_TabText { get { if (!_Widget_DeviceDefault_Light_ActionBar_TabTextReady) { _Widget_DeviceDefault_Light_ActionBar_TabTextContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ActionBar_TabText"); _Widget_DeviceDefault_Light_ActionBar_TabTextReady = true; } return _Widget_DeviceDefault_Light_ActionBar_TabTextContent; } }
            private static int _Widget_DeviceDefault_Light_ActionBar_TabTextContent = default;
            private static bool _Widget_DeviceDefault_Light_ActionBar_TabTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ActionBar_TabText_Inverse"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Widget_DeviceDefault_Light_ActionBar_TabText_Inverse { get { if (!_Widget_DeviceDefault_Light_ActionBar_TabText_InverseReady) { _Widget_DeviceDefault_Light_ActionBar_TabText_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ActionBar_TabText_Inverse"); _Widget_DeviceDefault_Light_ActionBar_TabText_InverseReady = true; } return _Widget_DeviceDefault_Light_ActionBar_TabText_InverseContent; } }
            private static int _Widget_DeviceDefault_Light_ActionBar_TabText_InverseContent = default;
            private static bool _Widget_DeviceDefault_Light_ActionBar_TabText_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ActionBar_TabView"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ActionBar_TabView { get { if (!_Widget_DeviceDefault_Light_ActionBar_TabViewReady) { _Widget_DeviceDefault_Light_ActionBar_TabViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ActionBar_TabView"); _Widget_DeviceDefault_Light_ActionBar_TabViewReady = true; } return _Widget_DeviceDefault_Light_ActionBar_TabViewContent; } }
            private static int _Widget_DeviceDefault_Light_ActionBar_TabViewContent = default;
            private static bool _Widget_DeviceDefault_Light_ActionBar_TabViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ActionBar_TabView_Inverse"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Widget_DeviceDefault_Light_ActionBar_TabView_Inverse { get { if (!_Widget_DeviceDefault_Light_ActionBar_TabView_InverseReady) { _Widget_DeviceDefault_Light_ActionBar_TabView_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ActionBar_TabView_Inverse"); _Widget_DeviceDefault_Light_ActionBar_TabView_InverseReady = true; } return _Widget_DeviceDefault_Light_ActionBar_TabView_InverseContent; } }
            private static int _Widget_DeviceDefault_Light_ActionBar_TabView_InverseContent = default;
            private static bool _Widget_DeviceDefault_Light_ActionBar_TabView_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ActionButton"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ActionButton { get { if (!_Widget_DeviceDefault_Light_ActionButtonReady) { _Widget_DeviceDefault_Light_ActionButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ActionButton"); _Widget_DeviceDefault_Light_ActionButtonReady = true; } return _Widget_DeviceDefault_Light_ActionButtonContent; } }
            private static int _Widget_DeviceDefault_Light_ActionButtonContent = default;
            private static bool _Widget_DeviceDefault_Light_ActionButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ActionButton_CloseMode"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ActionButton_CloseMode { get { if (!_Widget_DeviceDefault_Light_ActionButton_CloseModeReady) { _Widget_DeviceDefault_Light_ActionButton_CloseModeContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ActionButton_CloseMode"); _Widget_DeviceDefault_Light_ActionButton_CloseModeReady = true; } return _Widget_DeviceDefault_Light_ActionButton_CloseModeContent; } }
            private static int _Widget_DeviceDefault_Light_ActionButton_CloseModeContent = default;
            private static bool _Widget_DeviceDefault_Light_ActionButton_CloseModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ActionButton_Overflow"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ActionButton_Overflow { get { if (!_Widget_DeviceDefault_Light_ActionButton_OverflowReady) { _Widget_DeviceDefault_Light_ActionButton_OverflowContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ActionButton_Overflow"); _Widget_DeviceDefault_Light_ActionButton_OverflowReady = true; } return _Widget_DeviceDefault_Light_ActionButton_OverflowContent; } }
            private static int _Widget_DeviceDefault_Light_ActionButton_OverflowContent = default;
            private static bool _Widget_DeviceDefault_Light_ActionButton_OverflowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ActionMode"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ActionMode { get { if (!_Widget_DeviceDefault_Light_ActionModeReady) { _Widget_DeviceDefault_Light_ActionModeContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ActionMode"); _Widget_DeviceDefault_Light_ActionModeReady = true; } return _Widget_DeviceDefault_Light_ActionModeContent; } }
            private static int _Widget_DeviceDefault_Light_ActionModeContent = default;
            private static bool _Widget_DeviceDefault_Light_ActionModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ActionMode_Inverse"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Widget_DeviceDefault_Light_ActionMode_Inverse { get { if (!_Widget_DeviceDefault_Light_ActionMode_InverseReady) { _Widget_DeviceDefault_Light_ActionMode_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ActionMode_Inverse"); _Widget_DeviceDefault_Light_ActionMode_InverseReady = true; } return _Widget_DeviceDefault_Light_ActionMode_InverseContent; } }
            private static int _Widget_DeviceDefault_Light_ActionMode_InverseContent = default;
            private static bool _Widget_DeviceDefault_Light_ActionMode_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_AutoCompleteTextView"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_AutoCompleteTextView { get { if (!_Widget_DeviceDefault_Light_AutoCompleteTextViewReady) { _Widget_DeviceDefault_Light_AutoCompleteTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_AutoCompleteTextView"); _Widget_DeviceDefault_Light_AutoCompleteTextViewReady = true; } return _Widget_DeviceDefault_Light_AutoCompleteTextViewContent; } }
            private static int _Widget_DeviceDefault_Light_AutoCompleteTextViewContent = default;
            private static bool _Widget_DeviceDefault_Light_AutoCompleteTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_Button"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_Button { get { if (!_Widget_DeviceDefault_Light_ButtonReady) { _Widget_DeviceDefault_Light_ButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_Button"); _Widget_DeviceDefault_Light_ButtonReady = true; } return _Widget_DeviceDefault_Light_ButtonContent; } }
            private static int _Widget_DeviceDefault_Light_ButtonContent = default;
            private static bool _Widget_DeviceDefault_Light_ButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_Button_Borderless_Small"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_Button_Borderless_Small { get { if (!_Widget_DeviceDefault_Light_Button_Borderless_SmallReady) { _Widget_DeviceDefault_Light_Button_Borderless_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_Button_Borderless_Small"); _Widget_DeviceDefault_Light_Button_Borderless_SmallReady = true; } return _Widget_DeviceDefault_Light_Button_Borderless_SmallContent; } }
            private static int _Widget_DeviceDefault_Light_Button_Borderless_SmallContent = default;
            private static bool _Widget_DeviceDefault_Light_Button_Borderless_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_Button_Inset"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_Button_Inset { get { if (!_Widget_DeviceDefault_Light_Button_InsetReady) { _Widget_DeviceDefault_Light_Button_InsetContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_Button_Inset"); _Widget_DeviceDefault_Light_Button_InsetReady = true; } return _Widget_DeviceDefault_Light_Button_InsetContent; } }
            private static int _Widget_DeviceDefault_Light_Button_InsetContent = default;
            private static bool _Widget_DeviceDefault_Light_Button_InsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_Button_Small"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_Button_Small { get { if (!_Widget_DeviceDefault_Light_Button_SmallReady) { _Widget_DeviceDefault_Light_Button_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_Button_Small"); _Widget_DeviceDefault_Light_Button_SmallReady = true; } return _Widget_DeviceDefault_Light_Button_SmallContent; } }
            private static int _Widget_DeviceDefault_Light_Button_SmallContent = default;
            private static bool _Widget_DeviceDefault_Light_Button_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_Button_Toggle"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_Button_Toggle { get { if (!_Widget_DeviceDefault_Light_Button_ToggleReady) { _Widget_DeviceDefault_Light_Button_ToggleContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_Button_Toggle"); _Widget_DeviceDefault_Light_Button_ToggleReady = true; } return _Widget_DeviceDefault_Light_Button_ToggleContent; } }
            private static int _Widget_DeviceDefault_Light_Button_ToggleContent = default;
            private static bool _Widget_DeviceDefault_Light_Button_ToggleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_CalendarView"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_CalendarView { get { if (!_Widget_DeviceDefault_Light_CalendarViewReady) { _Widget_DeviceDefault_Light_CalendarViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_CalendarView"); _Widget_DeviceDefault_Light_CalendarViewReady = true; } return _Widget_DeviceDefault_Light_CalendarViewContent; } }
            private static int _Widget_DeviceDefault_Light_CalendarViewContent = default;
            private static bool _Widget_DeviceDefault_Light_CalendarViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_CheckedTextView"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_CheckedTextView { get { if (!_Widget_DeviceDefault_Light_CheckedTextViewReady) { _Widget_DeviceDefault_Light_CheckedTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_CheckedTextView"); _Widget_DeviceDefault_Light_CheckedTextViewReady = true; } return _Widget_DeviceDefault_Light_CheckedTextViewContent; } }
            private static int _Widget_DeviceDefault_Light_CheckedTextViewContent = default;
            private static bool _Widget_DeviceDefault_Light_CheckedTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_CompoundButton_CheckBox"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_CompoundButton_CheckBox { get { if (!_Widget_DeviceDefault_Light_CompoundButton_CheckBoxReady) { _Widget_DeviceDefault_Light_CompoundButton_CheckBoxContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_CompoundButton_CheckBox"); _Widget_DeviceDefault_Light_CompoundButton_CheckBoxReady = true; } return _Widget_DeviceDefault_Light_CompoundButton_CheckBoxContent; } }
            private static int _Widget_DeviceDefault_Light_CompoundButton_CheckBoxContent = default;
            private static bool _Widget_DeviceDefault_Light_CompoundButton_CheckBoxReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_CompoundButton_RadioButton"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_CompoundButton_RadioButton { get { if (!_Widget_DeviceDefault_Light_CompoundButton_RadioButtonReady) { _Widget_DeviceDefault_Light_CompoundButton_RadioButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_CompoundButton_RadioButton"); _Widget_DeviceDefault_Light_CompoundButton_RadioButtonReady = true; } return _Widget_DeviceDefault_Light_CompoundButton_RadioButtonContent; } }
            private static int _Widget_DeviceDefault_Light_CompoundButton_RadioButtonContent = default;
            private static bool _Widget_DeviceDefault_Light_CompoundButton_RadioButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_CompoundButton_Star"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_CompoundButton_Star { get { if (!_Widget_DeviceDefault_Light_CompoundButton_StarReady) { _Widget_DeviceDefault_Light_CompoundButton_StarContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_CompoundButton_Star"); _Widget_DeviceDefault_Light_CompoundButton_StarReady = true; } return _Widget_DeviceDefault_Light_CompoundButton_StarContent; } }
            private static int _Widget_DeviceDefault_Light_CompoundButton_StarContent = default;
            private static bool _Widget_DeviceDefault_Light_CompoundButton_StarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_DropDownItem"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_DropDownItem { get { if (!_Widget_DeviceDefault_Light_DropDownItemReady) { _Widget_DeviceDefault_Light_DropDownItemContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_DropDownItem"); _Widget_DeviceDefault_Light_DropDownItemReady = true; } return _Widget_DeviceDefault_Light_DropDownItemContent; } }
            private static int _Widget_DeviceDefault_Light_DropDownItemContent = default;
            private static bool _Widget_DeviceDefault_Light_DropDownItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_DropDownItem_Spinner"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_DropDownItem_Spinner { get { if (!_Widget_DeviceDefault_Light_DropDownItem_SpinnerReady) { _Widget_DeviceDefault_Light_DropDownItem_SpinnerContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_DropDownItem_Spinner"); _Widget_DeviceDefault_Light_DropDownItem_SpinnerReady = true; } return _Widget_DeviceDefault_Light_DropDownItem_SpinnerContent; } }
            private static int _Widget_DeviceDefault_Light_DropDownItem_SpinnerContent = default;
            private static bool _Widget_DeviceDefault_Light_DropDownItem_SpinnerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_EditText"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_EditText { get { if (!_Widget_DeviceDefault_Light_EditTextReady) { _Widget_DeviceDefault_Light_EditTextContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_EditText"); _Widget_DeviceDefault_Light_EditTextReady = true; } return _Widget_DeviceDefault_Light_EditTextContent; } }
            private static int _Widget_DeviceDefault_Light_EditTextContent = default;
            private static bool _Widget_DeviceDefault_Light_EditTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ExpandableListView"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ExpandableListView { get { if (!_Widget_DeviceDefault_Light_ExpandableListViewReady) { _Widget_DeviceDefault_Light_ExpandableListViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ExpandableListView"); _Widget_DeviceDefault_Light_ExpandableListViewReady = true; } return _Widget_DeviceDefault_Light_ExpandableListViewContent; } }
            private static int _Widget_DeviceDefault_Light_ExpandableListViewContent = default;
            private static bool _Widget_DeviceDefault_Light_ExpandableListViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_FastScroll"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_FastScroll { get { if (!_Widget_DeviceDefault_Light_FastScrollReady) { _Widget_DeviceDefault_Light_FastScrollContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_FastScroll"); _Widget_DeviceDefault_Light_FastScrollReady = true; } return _Widget_DeviceDefault_Light_FastScrollContent; } }
            private static int _Widget_DeviceDefault_Light_FastScrollContent = default;
            private static bool _Widget_DeviceDefault_Light_FastScrollReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_GridView"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_GridView { get { if (!_Widget_DeviceDefault_Light_GridViewReady) { _Widget_DeviceDefault_Light_GridViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_GridView"); _Widget_DeviceDefault_Light_GridViewReady = true; } return _Widget_DeviceDefault_Light_GridViewContent; } }
            private static int _Widget_DeviceDefault_Light_GridViewContent = default;
            private static bool _Widget_DeviceDefault_Light_GridViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_HorizontalScrollView"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_HorizontalScrollView { get { if (!_Widget_DeviceDefault_Light_HorizontalScrollViewReady) { _Widget_DeviceDefault_Light_HorizontalScrollViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_HorizontalScrollView"); _Widget_DeviceDefault_Light_HorizontalScrollViewReady = true; } return _Widget_DeviceDefault_Light_HorizontalScrollViewContent; } }
            private static int _Widget_DeviceDefault_Light_HorizontalScrollViewContent = default;
            private static bool _Widget_DeviceDefault_Light_HorizontalScrollViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ImageButton"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ImageButton { get { if (!_Widget_DeviceDefault_Light_ImageButtonReady) { _Widget_DeviceDefault_Light_ImageButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ImageButton"); _Widget_DeviceDefault_Light_ImageButtonReady = true; } return _Widget_DeviceDefault_Light_ImageButtonContent; } }
            private static int _Widget_DeviceDefault_Light_ImageButtonContent = default;
            private static bool _Widget_DeviceDefault_Light_ImageButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ListPopupWindow"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ListPopupWindow { get { if (!_Widget_DeviceDefault_Light_ListPopupWindowReady) { _Widget_DeviceDefault_Light_ListPopupWindowContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ListPopupWindow"); _Widget_DeviceDefault_Light_ListPopupWindowReady = true; } return _Widget_DeviceDefault_Light_ListPopupWindowContent; } }
            private static int _Widget_DeviceDefault_Light_ListPopupWindowContent = default;
            private static bool _Widget_DeviceDefault_Light_ListPopupWindowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ListView"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ListView { get { if (!_Widget_DeviceDefault_Light_ListViewReady) { _Widget_DeviceDefault_Light_ListViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ListView"); _Widget_DeviceDefault_Light_ListViewReady = true; } return _Widget_DeviceDefault_Light_ListViewContent; } }
            private static int _Widget_DeviceDefault_Light_ListViewContent = default;
            private static bool _Widget_DeviceDefault_Light_ListViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ListView_DropDown"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ListView_DropDown { get { if (!_Widget_DeviceDefault_Light_ListView_DropDownReady) { _Widget_DeviceDefault_Light_ListView_DropDownContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ListView_DropDown"); _Widget_DeviceDefault_Light_ListView_DropDownReady = true; } return _Widget_DeviceDefault_Light_ListView_DropDownContent; } }
            private static int _Widget_DeviceDefault_Light_ListView_DropDownContent = default;
            private static bool _Widget_DeviceDefault_Light_ListView_DropDownReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_MediaRouteButton"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_MediaRouteButton { get { if (!_Widget_DeviceDefault_Light_MediaRouteButtonReady) { _Widget_DeviceDefault_Light_MediaRouteButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_MediaRouteButton"); _Widget_DeviceDefault_Light_MediaRouteButtonReady = true; } return _Widget_DeviceDefault_Light_MediaRouteButtonContent; } }
            private static int _Widget_DeviceDefault_Light_MediaRouteButtonContent = default;
            private static bool _Widget_DeviceDefault_Light_MediaRouteButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_PopupMenu"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_PopupMenu { get { if (!_Widget_DeviceDefault_Light_PopupMenuReady) { _Widget_DeviceDefault_Light_PopupMenuContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_PopupMenu"); _Widget_DeviceDefault_Light_PopupMenuReady = true; } return _Widget_DeviceDefault_Light_PopupMenuContent; } }
            private static int _Widget_DeviceDefault_Light_PopupMenuContent = default;
            private static bool _Widget_DeviceDefault_Light_PopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_PopupWindow"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_PopupWindow { get { if (!_Widget_DeviceDefault_Light_PopupWindowReady) { _Widget_DeviceDefault_Light_PopupWindowContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_PopupWindow"); _Widget_DeviceDefault_Light_PopupWindowReady = true; } return _Widget_DeviceDefault_Light_PopupWindowContent; } }
            private static int _Widget_DeviceDefault_Light_PopupWindowContent = default;
            private static bool _Widget_DeviceDefault_Light_PopupWindowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ProgressBar"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ProgressBar { get { if (!_Widget_DeviceDefault_Light_ProgressBarReady) { _Widget_DeviceDefault_Light_ProgressBarContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ProgressBar"); _Widget_DeviceDefault_Light_ProgressBarReady = true; } return _Widget_DeviceDefault_Light_ProgressBarContent; } }
            private static int _Widget_DeviceDefault_Light_ProgressBarContent = default;
            private static bool _Widget_DeviceDefault_Light_ProgressBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ProgressBar_Horizontal"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ProgressBar_Horizontal { get { if (!_Widget_DeviceDefault_Light_ProgressBar_HorizontalReady) { _Widget_DeviceDefault_Light_ProgressBar_HorizontalContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ProgressBar_Horizontal"); _Widget_DeviceDefault_Light_ProgressBar_HorizontalReady = true; } return _Widget_DeviceDefault_Light_ProgressBar_HorizontalContent; } }
            private static int _Widget_DeviceDefault_Light_ProgressBar_HorizontalContent = default;
            private static bool _Widget_DeviceDefault_Light_ProgressBar_HorizontalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ProgressBar_Inverse"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ProgressBar_Inverse { get { if (!_Widget_DeviceDefault_Light_ProgressBar_InverseReady) { _Widget_DeviceDefault_Light_ProgressBar_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ProgressBar_Inverse"); _Widget_DeviceDefault_Light_ProgressBar_InverseReady = true; } return _Widget_DeviceDefault_Light_ProgressBar_InverseContent; } }
            private static int _Widget_DeviceDefault_Light_ProgressBar_InverseContent = default;
            private static bool _Widget_DeviceDefault_Light_ProgressBar_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ProgressBar_Large"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ProgressBar_Large { get { if (!_Widget_DeviceDefault_Light_ProgressBar_LargeReady) { _Widget_DeviceDefault_Light_ProgressBar_LargeContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ProgressBar_Large"); _Widget_DeviceDefault_Light_ProgressBar_LargeReady = true; } return _Widget_DeviceDefault_Light_ProgressBar_LargeContent; } }
            private static int _Widget_DeviceDefault_Light_ProgressBar_LargeContent = default;
            private static bool _Widget_DeviceDefault_Light_ProgressBar_LargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ProgressBar_Large_Inverse"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ProgressBar_Large_Inverse { get { if (!_Widget_DeviceDefault_Light_ProgressBar_Large_InverseReady) { _Widget_DeviceDefault_Light_ProgressBar_Large_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ProgressBar_Large_Inverse"); _Widget_DeviceDefault_Light_ProgressBar_Large_InverseReady = true; } return _Widget_DeviceDefault_Light_ProgressBar_Large_InverseContent; } }
            private static int _Widget_DeviceDefault_Light_ProgressBar_Large_InverseContent = default;
            private static bool _Widget_DeviceDefault_Light_ProgressBar_Large_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ProgressBar_Small"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ProgressBar_Small { get { if (!_Widget_DeviceDefault_Light_ProgressBar_SmallReady) { _Widget_DeviceDefault_Light_ProgressBar_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ProgressBar_Small"); _Widget_DeviceDefault_Light_ProgressBar_SmallReady = true; } return _Widget_DeviceDefault_Light_ProgressBar_SmallContent; } }
            private static int _Widget_DeviceDefault_Light_ProgressBar_SmallContent = default;
            private static bool _Widget_DeviceDefault_Light_ProgressBar_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ProgressBar_Small_Inverse"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ProgressBar_Small_Inverse { get { if (!_Widget_DeviceDefault_Light_ProgressBar_Small_InverseReady) { _Widget_DeviceDefault_Light_ProgressBar_Small_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ProgressBar_Small_Inverse"); _Widget_DeviceDefault_Light_ProgressBar_Small_InverseReady = true; } return _Widget_DeviceDefault_Light_ProgressBar_Small_InverseContent; } }
            private static int _Widget_DeviceDefault_Light_ProgressBar_Small_InverseContent = default;
            private static bool _Widget_DeviceDefault_Light_ProgressBar_Small_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ProgressBar_Small_Title"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ProgressBar_Small_Title { get { if (!_Widget_DeviceDefault_Light_ProgressBar_Small_TitleReady) { _Widget_DeviceDefault_Light_ProgressBar_Small_TitleContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ProgressBar_Small_Title"); _Widget_DeviceDefault_Light_ProgressBar_Small_TitleReady = true; } return _Widget_DeviceDefault_Light_ProgressBar_Small_TitleContent; } }
            private static int _Widget_DeviceDefault_Light_ProgressBar_Small_TitleContent = default;
            private static bool _Widget_DeviceDefault_Light_ProgressBar_Small_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_RatingBar"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_RatingBar { get { if (!_Widget_DeviceDefault_Light_RatingBarReady) { _Widget_DeviceDefault_Light_RatingBarContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_RatingBar"); _Widget_DeviceDefault_Light_RatingBarReady = true; } return _Widget_DeviceDefault_Light_RatingBarContent; } }
            private static int _Widget_DeviceDefault_Light_RatingBarContent = default;
            private static bool _Widget_DeviceDefault_Light_RatingBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_RatingBar_Indicator"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_RatingBar_Indicator { get { if (!_Widget_DeviceDefault_Light_RatingBar_IndicatorReady) { _Widget_DeviceDefault_Light_RatingBar_IndicatorContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_RatingBar_Indicator"); _Widget_DeviceDefault_Light_RatingBar_IndicatorReady = true; } return _Widget_DeviceDefault_Light_RatingBar_IndicatorContent; } }
            private static int _Widget_DeviceDefault_Light_RatingBar_IndicatorContent = default;
            private static bool _Widget_DeviceDefault_Light_RatingBar_IndicatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_RatingBar_Small"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_RatingBar_Small { get { if (!_Widget_DeviceDefault_Light_RatingBar_SmallReady) { _Widget_DeviceDefault_Light_RatingBar_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_RatingBar_Small"); _Widget_DeviceDefault_Light_RatingBar_SmallReady = true; } return _Widget_DeviceDefault_Light_RatingBar_SmallContent; } }
            private static int _Widget_DeviceDefault_Light_RatingBar_SmallContent = default;
            private static bool _Widget_DeviceDefault_Light_RatingBar_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_ScrollView"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_ScrollView { get { if (!_Widget_DeviceDefault_Light_ScrollViewReady) { _Widget_DeviceDefault_Light_ScrollViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_ScrollView"); _Widget_DeviceDefault_Light_ScrollViewReady = true; } return _Widget_DeviceDefault_Light_ScrollViewContent; } }
            private static int _Widget_DeviceDefault_Light_ScrollViewContent = default;
            private static bool _Widget_DeviceDefault_Light_ScrollViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_SeekBar"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_SeekBar { get { if (!_Widget_DeviceDefault_Light_SeekBarReady) { _Widget_DeviceDefault_Light_SeekBarContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_SeekBar"); _Widget_DeviceDefault_Light_SeekBarReady = true; } return _Widget_DeviceDefault_Light_SeekBarContent; } }
            private static int _Widget_DeviceDefault_Light_SeekBarContent = default;
            private static bool _Widget_DeviceDefault_Light_SeekBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_Spinner"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_Spinner { get { if (!_Widget_DeviceDefault_Light_SpinnerReady) { _Widget_DeviceDefault_Light_SpinnerContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_Spinner"); _Widget_DeviceDefault_Light_SpinnerReady = true; } return _Widget_DeviceDefault_Light_SpinnerContent; } }
            private static int _Widget_DeviceDefault_Light_SpinnerContent = default;
            private static bool _Widget_DeviceDefault_Light_SpinnerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_StackView"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_StackView { get { if (!_Widget_DeviceDefault_Light_StackViewReady) { _Widget_DeviceDefault_Light_StackViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_StackView"); _Widget_DeviceDefault_Light_StackViewReady = true; } return _Widget_DeviceDefault_Light_StackViewContent; } }
            private static int _Widget_DeviceDefault_Light_StackViewContent = default;
            private static bool _Widget_DeviceDefault_Light_StackViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_Tab"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_Tab { get { if (!_Widget_DeviceDefault_Light_TabReady) { _Widget_DeviceDefault_Light_TabContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_Tab"); _Widget_DeviceDefault_Light_TabReady = true; } return _Widget_DeviceDefault_Light_TabContent; } }
            private static int _Widget_DeviceDefault_Light_TabContent = default;
            private static bool _Widget_DeviceDefault_Light_TabReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_TabWidget"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_TabWidget { get { if (!_Widget_DeviceDefault_Light_TabWidgetReady) { _Widget_DeviceDefault_Light_TabWidgetContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_TabWidget"); _Widget_DeviceDefault_Light_TabWidgetReady = true; } return _Widget_DeviceDefault_Light_TabWidgetContent; } }
            private static int _Widget_DeviceDefault_Light_TabWidgetContent = default;
            private static bool _Widget_DeviceDefault_Light_TabWidgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_TextView"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_TextView { get { if (!_Widget_DeviceDefault_Light_TextViewReady) { _Widget_DeviceDefault_Light_TextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_TextView"); _Widget_DeviceDefault_Light_TextViewReady = true; } return _Widget_DeviceDefault_Light_TextViewContent; } }
            private static int _Widget_DeviceDefault_Light_TextViewContent = default;
            private static bool _Widget_DeviceDefault_Light_TextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_TextView_SpinnerItem"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_TextView_SpinnerItem { get { if (!_Widget_DeviceDefault_Light_TextView_SpinnerItemReady) { _Widget_DeviceDefault_Light_TextView_SpinnerItemContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_TextView_SpinnerItem"); _Widget_DeviceDefault_Light_TextView_SpinnerItemReady = true; } return _Widget_DeviceDefault_Light_TextView_SpinnerItemContent; } }
            private static int _Widget_DeviceDefault_Light_TextView_SpinnerItemContent = default;
            private static bool _Widget_DeviceDefault_Light_TextView_SpinnerItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_WebTextView"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_WebTextView { get { if (!_Widget_DeviceDefault_Light_WebTextViewReady) { _Widget_DeviceDefault_Light_WebTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_WebTextView"); _Widget_DeviceDefault_Light_WebTextViewReady = true; } return _Widget_DeviceDefault_Light_WebTextViewContent; } }
            private static int _Widget_DeviceDefault_Light_WebTextViewContent = default;
            private static bool _Widget_DeviceDefault_Light_WebTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Light_WebView"/>
            /// </summary>
            public static int Widget_DeviceDefault_Light_WebView { get { if (!_Widget_DeviceDefault_Light_WebViewReady) { _Widget_DeviceDefault_Light_WebViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Light_WebView"); _Widget_DeviceDefault_Light_WebViewReady = true; } return _Widget_DeviceDefault_Light_WebViewContent; } }
            private static int _Widget_DeviceDefault_Light_WebViewContent = default;
            private static bool _Widget_DeviceDefault_Light_WebViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ListPopupWindow"/>
            /// </summary>
            public static int Widget_DeviceDefault_ListPopupWindow { get { if (!_Widget_DeviceDefault_ListPopupWindowReady) { _Widget_DeviceDefault_ListPopupWindowContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ListPopupWindow"); _Widget_DeviceDefault_ListPopupWindowReady = true; } return _Widget_DeviceDefault_ListPopupWindowContent; } }
            private static int _Widget_DeviceDefault_ListPopupWindowContent = default;
            private static bool _Widget_DeviceDefault_ListPopupWindowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ListView"/>
            /// </summary>
            public static int Widget_DeviceDefault_ListView { get { if (!_Widget_DeviceDefault_ListViewReady) { _Widget_DeviceDefault_ListViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ListView"); _Widget_DeviceDefault_ListViewReady = true; } return _Widget_DeviceDefault_ListViewContent; } }
            private static int _Widget_DeviceDefault_ListViewContent = default;
            private static bool _Widget_DeviceDefault_ListViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ListView_DropDown"/>
            /// </summary>
            public static int Widget_DeviceDefault_ListView_DropDown { get { if (!_Widget_DeviceDefault_ListView_DropDownReady) { _Widget_DeviceDefault_ListView_DropDownContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ListView_DropDown"); _Widget_DeviceDefault_ListView_DropDownReady = true; } return _Widget_DeviceDefault_ListView_DropDownContent; } }
            private static int _Widget_DeviceDefault_ListView_DropDownContent = default;
            private static bool _Widget_DeviceDefault_ListView_DropDownReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_MediaRouteButton"/>
            /// </summary>
            public static int Widget_DeviceDefault_MediaRouteButton { get { if (!_Widget_DeviceDefault_MediaRouteButtonReady) { _Widget_DeviceDefault_MediaRouteButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_MediaRouteButton"); _Widget_DeviceDefault_MediaRouteButtonReady = true; } return _Widget_DeviceDefault_MediaRouteButtonContent; } }
            private static int _Widget_DeviceDefault_MediaRouteButtonContent = default;
            private static bool _Widget_DeviceDefault_MediaRouteButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_PopupMenu"/>
            /// </summary>
            public static int Widget_DeviceDefault_PopupMenu { get { if (!_Widget_DeviceDefault_PopupMenuReady) { _Widget_DeviceDefault_PopupMenuContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_PopupMenu"); _Widget_DeviceDefault_PopupMenuReady = true; } return _Widget_DeviceDefault_PopupMenuContent; } }
            private static int _Widget_DeviceDefault_PopupMenuContent = default;
            private static bool _Widget_DeviceDefault_PopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_PopupWindow"/>
            /// </summary>
            public static int Widget_DeviceDefault_PopupWindow { get { if (!_Widget_DeviceDefault_PopupWindowReady) { _Widget_DeviceDefault_PopupWindowContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_PopupWindow"); _Widget_DeviceDefault_PopupWindowReady = true; } return _Widget_DeviceDefault_PopupWindowContent; } }
            private static int _Widget_DeviceDefault_PopupWindowContent = default;
            private static bool _Widget_DeviceDefault_PopupWindowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ProgressBar"/>
            /// </summary>
            public static int Widget_DeviceDefault_ProgressBar { get { if (!_Widget_DeviceDefault_ProgressBarReady) { _Widget_DeviceDefault_ProgressBarContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ProgressBar"); _Widget_DeviceDefault_ProgressBarReady = true; } return _Widget_DeviceDefault_ProgressBarContent; } }
            private static int _Widget_DeviceDefault_ProgressBarContent = default;
            private static bool _Widget_DeviceDefault_ProgressBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ProgressBar_Horizontal"/>
            /// </summary>
            public static int Widget_DeviceDefault_ProgressBar_Horizontal { get { if (!_Widget_DeviceDefault_ProgressBar_HorizontalReady) { _Widget_DeviceDefault_ProgressBar_HorizontalContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ProgressBar_Horizontal"); _Widget_DeviceDefault_ProgressBar_HorizontalReady = true; } return _Widget_DeviceDefault_ProgressBar_HorizontalContent; } }
            private static int _Widget_DeviceDefault_ProgressBar_HorizontalContent = default;
            private static bool _Widget_DeviceDefault_ProgressBar_HorizontalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ProgressBar_Large"/>
            /// </summary>
            public static int Widget_DeviceDefault_ProgressBar_Large { get { if (!_Widget_DeviceDefault_ProgressBar_LargeReady) { _Widget_DeviceDefault_ProgressBar_LargeContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ProgressBar_Large"); _Widget_DeviceDefault_ProgressBar_LargeReady = true; } return _Widget_DeviceDefault_ProgressBar_LargeContent; } }
            private static int _Widget_DeviceDefault_ProgressBar_LargeContent = default;
            private static bool _Widget_DeviceDefault_ProgressBar_LargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ProgressBar_Small"/>
            /// </summary>
            public static int Widget_DeviceDefault_ProgressBar_Small { get { if (!_Widget_DeviceDefault_ProgressBar_SmallReady) { _Widget_DeviceDefault_ProgressBar_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ProgressBar_Small"); _Widget_DeviceDefault_ProgressBar_SmallReady = true; } return _Widget_DeviceDefault_ProgressBar_SmallContent; } }
            private static int _Widget_DeviceDefault_ProgressBar_SmallContent = default;
            private static bool _Widget_DeviceDefault_ProgressBar_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ProgressBar_Small_Title"/>
            /// </summary>
            public static int Widget_DeviceDefault_ProgressBar_Small_Title { get { if (!_Widget_DeviceDefault_ProgressBar_Small_TitleReady) { _Widget_DeviceDefault_ProgressBar_Small_TitleContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ProgressBar_Small_Title"); _Widget_DeviceDefault_ProgressBar_Small_TitleReady = true; } return _Widget_DeviceDefault_ProgressBar_Small_TitleContent; } }
            private static int _Widget_DeviceDefault_ProgressBar_Small_TitleContent = default;
            private static bool _Widget_DeviceDefault_ProgressBar_Small_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_RatingBar"/>
            /// </summary>
            public static int Widget_DeviceDefault_RatingBar { get { if (!_Widget_DeviceDefault_RatingBarReady) { _Widget_DeviceDefault_RatingBarContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_RatingBar"); _Widget_DeviceDefault_RatingBarReady = true; } return _Widget_DeviceDefault_RatingBarContent; } }
            private static int _Widget_DeviceDefault_RatingBarContent = default;
            private static bool _Widget_DeviceDefault_RatingBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_RatingBar_Indicator"/>
            /// </summary>
            public static int Widget_DeviceDefault_RatingBar_Indicator { get { if (!_Widget_DeviceDefault_RatingBar_IndicatorReady) { _Widget_DeviceDefault_RatingBar_IndicatorContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_RatingBar_Indicator"); _Widget_DeviceDefault_RatingBar_IndicatorReady = true; } return _Widget_DeviceDefault_RatingBar_IndicatorContent; } }
            private static int _Widget_DeviceDefault_RatingBar_IndicatorContent = default;
            private static bool _Widget_DeviceDefault_RatingBar_IndicatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_RatingBar_Small"/>
            /// </summary>
            public static int Widget_DeviceDefault_RatingBar_Small { get { if (!_Widget_DeviceDefault_RatingBar_SmallReady) { _Widget_DeviceDefault_RatingBar_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_RatingBar_Small"); _Widget_DeviceDefault_RatingBar_SmallReady = true; } return _Widget_DeviceDefault_RatingBar_SmallContent; } }
            private static int _Widget_DeviceDefault_RatingBar_SmallContent = default;
            private static bool _Widget_DeviceDefault_RatingBar_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_ScrollView"/>
            /// </summary>
            public static int Widget_DeviceDefault_ScrollView { get { if (!_Widget_DeviceDefault_ScrollViewReady) { _Widget_DeviceDefault_ScrollViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_ScrollView"); _Widget_DeviceDefault_ScrollViewReady = true; } return _Widget_DeviceDefault_ScrollViewContent; } }
            private static int _Widget_DeviceDefault_ScrollViewContent = default;
            private static bool _Widget_DeviceDefault_ScrollViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_SeekBar"/>
            /// </summary>
            public static int Widget_DeviceDefault_SeekBar { get { if (!_Widget_DeviceDefault_SeekBarReady) { _Widget_DeviceDefault_SeekBarContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_SeekBar"); _Widget_DeviceDefault_SeekBarReady = true; } return _Widget_DeviceDefault_SeekBarContent; } }
            private static int _Widget_DeviceDefault_SeekBarContent = default;
            private static bool _Widget_DeviceDefault_SeekBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Spinner"/>
            /// </summary>
            public static int Widget_DeviceDefault_Spinner { get { if (!_Widget_DeviceDefault_SpinnerReady) { _Widget_DeviceDefault_SpinnerContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Spinner"); _Widget_DeviceDefault_SpinnerReady = true; } return _Widget_DeviceDefault_SpinnerContent; } }
            private static int _Widget_DeviceDefault_SpinnerContent = default;
            private static bool _Widget_DeviceDefault_SpinnerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_StackView"/>
            /// </summary>
            public static int Widget_DeviceDefault_StackView { get { if (!_Widget_DeviceDefault_StackViewReady) { _Widget_DeviceDefault_StackViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_StackView"); _Widget_DeviceDefault_StackViewReady = true; } return _Widget_DeviceDefault_StackViewContent; } }
            private static int _Widget_DeviceDefault_StackViewContent = default;
            private static bool _Widget_DeviceDefault_StackViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_Tab"/>
            /// </summary>
            public static int Widget_DeviceDefault_Tab { get { if (!_Widget_DeviceDefault_TabReady) { _Widget_DeviceDefault_TabContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_Tab"); _Widget_DeviceDefault_TabReady = true; } return _Widget_DeviceDefault_TabContent; } }
            private static int _Widget_DeviceDefault_TabContent = default;
            private static bool _Widget_DeviceDefault_TabReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_TabWidget"/>
            /// </summary>
            public static int Widget_DeviceDefault_TabWidget { get { if (!_Widget_DeviceDefault_TabWidgetReady) { _Widget_DeviceDefault_TabWidgetContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_TabWidget"); _Widget_DeviceDefault_TabWidgetReady = true; } return _Widget_DeviceDefault_TabWidgetContent; } }
            private static int _Widget_DeviceDefault_TabWidgetContent = default;
            private static bool _Widget_DeviceDefault_TabWidgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_TextView"/>
            /// </summary>
            public static int Widget_DeviceDefault_TextView { get { if (!_Widget_DeviceDefault_TextViewReady) { _Widget_DeviceDefault_TextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_TextView"); _Widget_DeviceDefault_TextViewReady = true; } return _Widget_DeviceDefault_TextViewContent; } }
            private static int _Widget_DeviceDefault_TextViewContent = default;
            private static bool _Widget_DeviceDefault_TextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_TextView_SpinnerItem"/>
            /// </summary>
            public static int Widget_DeviceDefault_TextView_SpinnerItem { get { if (!_Widget_DeviceDefault_TextView_SpinnerItemReady) { _Widget_DeviceDefault_TextView_SpinnerItemContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_TextView_SpinnerItem"); _Widget_DeviceDefault_TextView_SpinnerItemReady = true; } return _Widget_DeviceDefault_TextView_SpinnerItemContent; } }
            private static int _Widget_DeviceDefault_TextView_SpinnerItemContent = default;
            private static bool _Widget_DeviceDefault_TextView_SpinnerItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_WebTextView"/>
            /// </summary>
            public static int Widget_DeviceDefault_WebTextView { get { if (!_Widget_DeviceDefault_WebTextViewReady) { _Widget_DeviceDefault_WebTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_WebTextView"); _Widget_DeviceDefault_WebTextViewReady = true; } return _Widget_DeviceDefault_WebTextViewContent; } }
            private static int _Widget_DeviceDefault_WebTextViewContent = default;
            private static bool _Widget_DeviceDefault_WebTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DeviceDefault_WebView"/>
            /// </summary>
            public static int Widget_DeviceDefault_WebView { get { if (!_Widget_DeviceDefault_WebViewReady) { _Widget_DeviceDefault_WebViewContent = SGetField<int>(LocalBridgeClazz, "Widget_DeviceDefault_WebView"); _Widget_DeviceDefault_WebViewReady = true; } return _Widget_DeviceDefault_WebViewContent; } }
            private static int _Widget_DeviceDefault_WebViewContent = default;
            private static bool _Widget_DeviceDefault_WebViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DropDownItem"/>
            /// </summary>
            public static int Widget_DropDownItem { get { if (!_Widget_DropDownItemReady) { _Widget_DropDownItemContent = SGetField<int>(LocalBridgeClazz, "Widget_DropDownItem"); _Widget_DropDownItemReady = true; } return _Widget_DropDownItemContent; } }
            private static int _Widget_DropDownItemContent = default;
            private static bool _Widget_DropDownItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_DropDownItem_Spinner"/>
            /// </summary>
            public static int Widget_DropDownItem_Spinner { get { if (!_Widget_DropDownItem_SpinnerReady) { _Widget_DropDownItem_SpinnerContent = SGetField<int>(LocalBridgeClazz, "Widget_DropDownItem_Spinner"); _Widget_DropDownItem_SpinnerReady = true; } return _Widget_DropDownItem_SpinnerContent; } }
            private static int _Widget_DropDownItem_SpinnerContent = default;
            private static bool _Widget_DropDownItem_SpinnerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_EditText"/>
            /// </summary>
            public static int Widget_EditText { get { if (!_Widget_EditTextReady) { _Widget_EditTextContent = SGetField<int>(LocalBridgeClazz, "Widget_EditText"); _Widget_EditTextReady = true; } return _Widget_EditTextContent; } }
            private static int _Widget_EditTextContent = default;
            private static bool _Widget_EditTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ExpandableListView"/>
            /// </summary>
            public static int Widget_ExpandableListView { get { if (!_Widget_ExpandableListViewReady) { _Widget_ExpandableListViewContent = SGetField<int>(LocalBridgeClazz, "Widget_ExpandableListView"); _Widget_ExpandableListViewReady = true; } return _Widget_ExpandableListViewContent; } }
            private static int _Widget_ExpandableListViewContent = default;
            private static bool _Widget_ExpandableListViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_FastScroll"/>
            /// </summary>
            public static int Widget_FastScroll { get { if (!_Widget_FastScrollReady) { _Widget_FastScrollContent = SGetField<int>(LocalBridgeClazz, "Widget_FastScroll"); _Widget_FastScrollReady = true; } return _Widget_FastScrollContent; } }
            private static int _Widget_FastScrollContent = default;
            private static bool _Widget_FastScrollReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_FragmentBreadCrumbs"/>
            /// </summary>
            public static int Widget_FragmentBreadCrumbs { get { if (!_Widget_FragmentBreadCrumbsReady) { _Widget_FragmentBreadCrumbsContent = SGetField<int>(LocalBridgeClazz, "Widget_FragmentBreadCrumbs"); _Widget_FragmentBreadCrumbsReady = true; } return _Widget_FragmentBreadCrumbsContent; } }
            private static int _Widget_FragmentBreadCrumbsContent = default;
            private static bool _Widget_FragmentBreadCrumbsReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Gallery"/>
            /// </summary>
            public static int Widget_Gallery { get { if (!_Widget_GalleryReady) { _Widget_GalleryContent = SGetField<int>(LocalBridgeClazz, "Widget_Gallery"); _Widget_GalleryReady = true; } return _Widget_GalleryContent; } }
            private static int _Widget_GalleryContent = default;
            private static bool _Widget_GalleryReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_GridView"/>
            /// </summary>
            public static int Widget_GridView { get { if (!_Widget_GridViewReady) { _Widget_GridViewContent = SGetField<int>(LocalBridgeClazz, "Widget_GridView"); _Widget_GridViewReady = true; } return _Widget_GridViewContent; } }
            private static int _Widget_GridViewContent = default;
            private static bool _Widget_GridViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo"/>
            /// </summary>
            public static int Widget_Holo { get { if (!_Widget_HoloReady) { _Widget_HoloContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo"); _Widget_HoloReady = true; } return _Widget_HoloContent; } }
            private static int _Widget_HoloContent = default;
            private static bool _Widget_HoloReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ActionBar"/>
            /// </summary>
            public static int Widget_Holo_ActionBar { get { if (!_Widget_Holo_ActionBarReady) { _Widget_Holo_ActionBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ActionBar"); _Widget_Holo_ActionBarReady = true; } return _Widget_Holo_ActionBarContent; } }
            private static int _Widget_Holo_ActionBarContent = default;
            private static bool _Widget_Holo_ActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ActionBar_Solid"/>
            /// </summary>
            public static int Widget_Holo_ActionBar_Solid { get { if (!_Widget_Holo_ActionBar_SolidReady) { _Widget_Holo_ActionBar_SolidContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ActionBar_Solid"); _Widget_Holo_ActionBar_SolidReady = true; } return _Widget_Holo_ActionBar_SolidContent; } }
            private static int _Widget_Holo_ActionBar_SolidContent = default;
            private static bool _Widget_Holo_ActionBar_SolidReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ActionBar_TabBar"/>
            /// </summary>
            public static int Widget_Holo_ActionBar_TabBar { get { if (!_Widget_Holo_ActionBar_TabBarReady) { _Widget_Holo_ActionBar_TabBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ActionBar_TabBar"); _Widget_Holo_ActionBar_TabBarReady = true; } return _Widget_Holo_ActionBar_TabBarContent; } }
            private static int _Widget_Holo_ActionBar_TabBarContent = default;
            private static bool _Widget_Holo_ActionBar_TabBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ActionBar_TabText"/>
            /// </summary>
            public static int Widget_Holo_ActionBar_TabText { get { if (!_Widget_Holo_ActionBar_TabTextReady) { _Widget_Holo_ActionBar_TabTextContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ActionBar_TabText"); _Widget_Holo_ActionBar_TabTextReady = true; } return _Widget_Holo_ActionBar_TabTextContent; } }
            private static int _Widget_Holo_ActionBar_TabTextContent = default;
            private static bool _Widget_Holo_ActionBar_TabTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ActionBar_TabView"/>
            /// </summary>
            public static int Widget_Holo_ActionBar_TabView { get { if (!_Widget_Holo_ActionBar_TabViewReady) { _Widget_Holo_ActionBar_TabViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ActionBar_TabView"); _Widget_Holo_ActionBar_TabViewReady = true; } return _Widget_Holo_ActionBar_TabViewContent; } }
            private static int _Widget_Holo_ActionBar_TabViewContent = default;
            private static bool _Widget_Holo_ActionBar_TabViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ActionButton"/>
            /// </summary>
            public static int Widget_Holo_ActionButton { get { if (!_Widget_Holo_ActionButtonReady) { _Widget_Holo_ActionButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ActionButton"); _Widget_Holo_ActionButtonReady = true; } return _Widget_Holo_ActionButtonContent; } }
            private static int _Widget_Holo_ActionButtonContent = default;
            private static bool _Widget_Holo_ActionButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ActionButton_CloseMode"/>
            /// </summary>
            public static int Widget_Holo_ActionButton_CloseMode { get { if (!_Widget_Holo_ActionButton_CloseModeReady) { _Widget_Holo_ActionButton_CloseModeContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ActionButton_CloseMode"); _Widget_Holo_ActionButton_CloseModeReady = true; } return _Widget_Holo_ActionButton_CloseModeContent; } }
            private static int _Widget_Holo_ActionButton_CloseModeContent = default;
            private static bool _Widget_Holo_ActionButton_CloseModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ActionButton_Overflow"/>
            /// </summary>
            public static int Widget_Holo_ActionButton_Overflow { get { if (!_Widget_Holo_ActionButton_OverflowReady) { _Widget_Holo_ActionButton_OverflowContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ActionButton_Overflow"); _Widget_Holo_ActionButton_OverflowReady = true; } return _Widget_Holo_ActionButton_OverflowContent; } }
            private static int _Widget_Holo_ActionButton_OverflowContent = default;
            private static bool _Widget_Holo_ActionButton_OverflowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ActionButton_TextButton"/>
            /// </summary>
            public static int Widget_Holo_ActionButton_TextButton { get { if (!_Widget_Holo_ActionButton_TextButtonReady) { _Widget_Holo_ActionButton_TextButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ActionButton_TextButton"); _Widget_Holo_ActionButton_TextButtonReady = true; } return _Widget_Holo_ActionButton_TextButtonContent; } }
            private static int _Widget_Holo_ActionButton_TextButtonContent = default;
            private static bool _Widget_Holo_ActionButton_TextButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ActionMode"/>
            /// </summary>
            public static int Widget_Holo_ActionMode { get { if (!_Widget_Holo_ActionModeReady) { _Widget_Holo_ActionModeContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ActionMode"); _Widget_Holo_ActionModeReady = true; } return _Widget_Holo_ActionModeContent; } }
            private static int _Widget_Holo_ActionModeContent = default;
            private static bool _Widget_Holo_ActionModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_AutoCompleteTextView"/>
            /// </summary>
            public static int Widget_Holo_AutoCompleteTextView { get { if (!_Widget_Holo_AutoCompleteTextViewReady) { _Widget_Holo_AutoCompleteTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_AutoCompleteTextView"); _Widget_Holo_AutoCompleteTextViewReady = true; } return _Widget_Holo_AutoCompleteTextViewContent; } }
            private static int _Widget_Holo_AutoCompleteTextViewContent = default;
            private static bool _Widget_Holo_AutoCompleteTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Button"/>
            /// </summary>
            public static int Widget_Holo_Button { get { if (!_Widget_Holo_ButtonReady) { _Widget_Holo_ButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Button"); _Widget_Holo_ButtonReady = true; } return _Widget_Holo_ButtonContent; } }
            private static int _Widget_Holo_ButtonContent = default;
            private static bool _Widget_Holo_ButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Button_Borderless"/>
            /// </summary>
            public static int Widget_Holo_Button_Borderless { get { if (!_Widget_Holo_Button_BorderlessReady) { _Widget_Holo_Button_BorderlessContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Button_Borderless"); _Widget_Holo_Button_BorderlessReady = true; } return _Widget_Holo_Button_BorderlessContent; } }
            private static int _Widget_Holo_Button_BorderlessContent = default;
            private static bool _Widget_Holo_Button_BorderlessReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Button_Borderless_Small"/>
            /// </summary>
            public static int Widget_Holo_Button_Borderless_Small { get { if (!_Widget_Holo_Button_Borderless_SmallReady) { _Widget_Holo_Button_Borderless_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Button_Borderless_Small"); _Widget_Holo_Button_Borderless_SmallReady = true; } return _Widget_Holo_Button_Borderless_SmallContent; } }
            private static int _Widget_Holo_Button_Borderless_SmallContent = default;
            private static bool _Widget_Holo_Button_Borderless_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Button_Inset"/>
            /// </summary>
            public static int Widget_Holo_Button_Inset { get { if (!_Widget_Holo_Button_InsetReady) { _Widget_Holo_Button_InsetContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Button_Inset"); _Widget_Holo_Button_InsetReady = true; } return _Widget_Holo_Button_InsetContent; } }
            private static int _Widget_Holo_Button_InsetContent = default;
            private static bool _Widget_Holo_Button_InsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Button_Small"/>
            /// </summary>
            public static int Widget_Holo_Button_Small { get { if (!_Widget_Holo_Button_SmallReady) { _Widget_Holo_Button_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Button_Small"); _Widget_Holo_Button_SmallReady = true; } return _Widget_Holo_Button_SmallContent; } }
            private static int _Widget_Holo_Button_SmallContent = default;
            private static bool _Widget_Holo_Button_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Button_Toggle"/>
            /// </summary>
            public static int Widget_Holo_Button_Toggle { get { if (!_Widget_Holo_Button_ToggleReady) { _Widget_Holo_Button_ToggleContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Button_Toggle"); _Widget_Holo_Button_ToggleReady = true; } return _Widget_Holo_Button_ToggleContent; } }
            private static int _Widget_Holo_Button_ToggleContent = default;
            private static bool _Widget_Holo_Button_ToggleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_CalendarView"/>
            /// </summary>
            public static int Widget_Holo_CalendarView { get { if (!_Widget_Holo_CalendarViewReady) { _Widget_Holo_CalendarViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_CalendarView"); _Widget_Holo_CalendarViewReady = true; } return _Widget_Holo_CalendarViewContent; } }
            private static int _Widget_Holo_CalendarViewContent = default;
            private static bool _Widget_Holo_CalendarViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_CheckedTextView"/>
            /// </summary>
            public static int Widget_Holo_CheckedTextView { get { if (!_Widget_Holo_CheckedTextViewReady) { _Widget_Holo_CheckedTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_CheckedTextView"); _Widget_Holo_CheckedTextViewReady = true; } return _Widget_Holo_CheckedTextViewContent; } }
            private static int _Widget_Holo_CheckedTextViewContent = default;
            private static bool _Widget_Holo_CheckedTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_CompoundButton_CheckBox"/>
            /// </summary>
            public static int Widget_Holo_CompoundButton_CheckBox { get { if (!_Widget_Holo_CompoundButton_CheckBoxReady) { _Widget_Holo_CompoundButton_CheckBoxContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_CompoundButton_CheckBox"); _Widget_Holo_CompoundButton_CheckBoxReady = true; } return _Widget_Holo_CompoundButton_CheckBoxContent; } }
            private static int _Widget_Holo_CompoundButton_CheckBoxContent = default;
            private static bool _Widget_Holo_CompoundButton_CheckBoxReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_CompoundButton_RadioButton"/>
            /// </summary>
            public static int Widget_Holo_CompoundButton_RadioButton { get { if (!_Widget_Holo_CompoundButton_RadioButtonReady) { _Widget_Holo_CompoundButton_RadioButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_CompoundButton_RadioButton"); _Widget_Holo_CompoundButton_RadioButtonReady = true; } return _Widget_Holo_CompoundButton_RadioButtonContent; } }
            private static int _Widget_Holo_CompoundButton_RadioButtonContent = default;
            private static bool _Widget_Holo_CompoundButton_RadioButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_CompoundButton_Star"/>
            /// </summary>
            public static int Widget_Holo_CompoundButton_Star { get { if (!_Widget_Holo_CompoundButton_StarReady) { _Widget_Holo_CompoundButton_StarContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_CompoundButton_Star"); _Widget_Holo_CompoundButton_StarReady = true; } return _Widget_Holo_CompoundButton_StarContent; } }
            private static int _Widget_Holo_CompoundButton_StarContent = default;
            private static bool _Widget_Holo_CompoundButton_StarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_DatePicker"/>
            /// </summary>
            public static int Widget_Holo_DatePicker { get { if (!_Widget_Holo_DatePickerReady) { _Widget_Holo_DatePickerContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_DatePicker"); _Widget_Holo_DatePickerReady = true; } return _Widget_Holo_DatePickerContent; } }
            private static int _Widget_Holo_DatePickerContent = default;
            private static bool _Widget_Holo_DatePickerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_DropDownItem"/>
            /// </summary>
            public static int Widget_Holo_DropDownItem { get { if (!_Widget_Holo_DropDownItemReady) { _Widget_Holo_DropDownItemContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_DropDownItem"); _Widget_Holo_DropDownItemReady = true; } return _Widget_Holo_DropDownItemContent; } }
            private static int _Widget_Holo_DropDownItemContent = default;
            private static bool _Widget_Holo_DropDownItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_DropDownItem_Spinner"/>
            /// </summary>
            public static int Widget_Holo_DropDownItem_Spinner { get { if (!_Widget_Holo_DropDownItem_SpinnerReady) { _Widget_Holo_DropDownItem_SpinnerContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_DropDownItem_Spinner"); _Widget_Holo_DropDownItem_SpinnerReady = true; } return _Widget_Holo_DropDownItem_SpinnerContent; } }
            private static int _Widget_Holo_DropDownItem_SpinnerContent = default;
            private static bool _Widget_Holo_DropDownItem_SpinnerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_EditText"/>
            /// </summary>
            public static int Widget_Holo_EditText { get { if (!_Widget_Holo_EditTextReady) { _Widget_Holo_EditTextContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_EditText"); _Widget_Holo_EditTextReady = true; } return _Widget_Holo_EditTextContent; } }
            private static int _Widget_Holo_EditTextContent = default;
            private static bool _Widget_Holo_EditTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ExpandableListView"/>
            /// </summary>
            public static int Widget_Holo_ExpandableListView { get { if (!_Widget_Holo_ExpandableListViewReady) { _Widget_Holo_ExpandableListViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ExpandableListView"); _Widget_Holo_ExpandableListViewReady = true; } return _Widget_Holo_ExpandableListViewContent; } }
            private static int _Widget_Holo_ExpandableListViewContent = default;
            private static bool _Widget_Holo_ExpandableListViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_GridView"/>
            /// </summary>
            public static int Widget_Holo_GridView { get { if (!_Widget_Holo_GridViewReady) { _Widget_Holo_GridViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_GridView"); _Widget_Holo_GridViewReady = true; } return _Widget_Holo_GridViewContent; } }
            private static int _Widget_Holo_GridViewContent = default;
            private static bool _Widget_Holo_GridViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_HorizontalScrollView"/>
            /// </summary>
            public static int Widget_Holo_HorizontalScrollView { get { if (!_Widget_Holo_HorizontalScrollViewReady) { _Widget_Holo_HorizontalScrollViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_HorizontalScrollView"); _Widget_Holo_HorizontalScrollViewReady = true; } return _Widget_Holo_HorizontalScrollViewContent; } }
            private static int _Widget_Holo_HorizontalScrollViewContent = default;
            private static bool _Widget_Holo_HorizontalScrollViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ImageButton"/>
            /// </summary>
            public static int Widget_Holo_ImageButton { get { if (!_Widget_Holo_ImageButtonReady) { _Widget_Holo_ImageButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ImageButton"); _Widget_Holo_ImageButtonReady = true; } return _Widget_Holo_ImageButtonContent; } }
            private static int _Widget_Holo_ImageButtonContent = default;
            private static bool _Widget_Holo_ImageButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light"/>
            /// </summary>
            public static int Widget_Holo_Light { get { if (!_Widget_Holo_LightReady) { _Widget_Holo_LightContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light"); _Widget_Holo_LightReady = true; } return _Widget_Holo_LightContent; } }
            private static int _Widget_Holo_LightContent = default;
            private static bool _Widget_Holo_LightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ActionBar"/>
            /// </summary>
            public static int Widget_Holo_Light_ActionBar { get { if (!_Widget_Holo_Light_ActionBarReady) { _Widget_Holo_Light_ActionBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ActionBar"); _Widget_Holo_Light_ActionBarReady = true; } return _Widget_Holo_Light_ActionBarContent; } }
            private static int _Widget_Holo_Light_ActionBarContent = default;
            private static bool _Widget_Holo_Light_ActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ActionBar_Solid"/>
            /// </summary>
            public static int Widget_Holo_Light_ActionBar_Solid { get { if (!_Widget_Holo_Light_ActionBar_SolidReady) { _Widget_Holo_Light_ActionBar_SolidContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ActionBar_Solid"); _Widget_Holo_Light_ActionBar_SolidReady = true; } return _Widget_Holo_Light_ActionBar_SolidContent; } }
            private static int _Widget_Holo_Light_ActionBar_SolidContent = default;
            private static bool _Widget_Holo_Light_ActionBar_SolidReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ActionBar_Solid_Inverse"/>
            /// </summary>
            public static int Widget_Holo_Light_ActionBar_Solid_Inverse { get { if (!_Widget_Holo_Light_ActionBar_Solid_InverseReady) { _Widget_Holo_Light_ActionBar_Solid_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ActionBar_Solid_Inverse"); _Widget_Holo_Light_ActionBar_Solid_InverseReady = true; } return _Widget_Holo_Light_ActionBar_Solid_InverseContent; } }
            private static int _Widget_Holo_Light_ActionBar_Solid_InverseContent = default;
            private static bool _Widget_Holo_Light_ActionBar_Solid_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ActionBar_TabBar"/>
            /// </summary>
            public static int Widget_Holo_Light_ActionBar_TabBar { get { if (!_Widget_Holo_Light_ActionBar_TabBarReady) { _Widget_Holo_Light_ActionBar_TabBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ActionBar_TabBar"); _Widget_Holo_Light_ActionBar_TabBarReady = true; } return _Widget_Holo_Light_ActionBar_TabBarContent; } }
            private static int _Widget_Holo_Light_ActionBar_TabBarContent = default;
            private static bool _Widget_Holo_Light_ActionBar_TabBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ActionBar_TabBar_Inverse"/>
            /// </summary>
            public static int Widget_Holo_Light_ActionBar_TabBar_Inverse { get { if (!_Widget_Holo_Light_ActionBar_TabBar_InverseReady) { _Widget_Holo_Light_ActionBar_TabBar_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ActionBar_TabBar_Inverse"); _Widget_Holo_Light_ActionBar_TabBar_InverseReady = true; } return _Widget_Holo_Light_ActionBar_TabBar_InverseContent; } }
            private static int _Widget_Holo_Light_ActionBar_TabBar_InverseContent = default;
            private static bool _Widget_Holo_Light_ActionBar_TabBar_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ActionBar_TabText"/>
            /// </summary>
            public static int Widget_Holo_Light_ActionBar_TabText { get { if (!_Widget_Holo_Light_ActionBar_TabTextReady) { _Widget_Holo_Light_ActionBar_TabTextContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ActionBar_TabText"); _Widget_Holo_Light_ActionBar_TabTextReady = true; } return _Widget_Holo_Light_ActionBar_TabTextContent; } }
            private static int _Widget_Holo_Light_ActionBar_TabTextContent = default;
            private static bool _Widget_Holo_Light_ActionBar_TabTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ActionBar_TabText_Inverse"/>
            /// </summary>
            public static int Widget_Holo_Light_ActionBar_TabText_Inverse { get { if (!_Widget_Holo_Light_ActionBar_TabText_InverseReady) { _Widget_Holo_Light_ActionBar_TabText_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ActionBar_TabText_Inverse"); _Widget_Holo_Light_ActionBar_TabText_InverseReady = true; } return _Widget_Holo_Light_ActionBar_TabText_InverseContent; } }
            private static int _Widget_Holo_Light_ActionBar_TabText_InverseContent = default;
            private static bool _Widget_Holo_Light_ActionBar_TabText_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ActionBar_TabView"/>
            /// </summary>
            public static int Widget_Holo_Light_ActionBar_TabView { get { if (!_Widget_Holo_Light_ActionBar_TabViewReady) { _Widget_Holo_Light_ActionBar_TabViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ActionBar_TabView"); _Widget_Holo_Light_ActionBar_TabViewReady = true; } return _Widget_Holo_Light_ActionBar_TabViewContent; } }
            private static int _Widget_Holo_Light_ActionBar_TabViewContent = default;
            private static bool _Widget_Holo_Light_ActionBar_TabViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ActionBar_TabView_Inverse"/>
            /// </summary>
            public static int Widget_Holo_Light_ActionBar_TabView_Inverse { get { if (!_Widget_Holo_Light_ActionBar_TabView_InverseReady) { _Widget_Holo_Light_ActionBar_TabView_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ActionBar_TabView_Inverse"); _Widget_Holo_Light_ActionBar_TabView_InverseReady = true; } return _Widget_Holo_Light_ActionBar_TabView_InverseContent; } }
            private static int _Widget_Holo_Light_ActionBar_TabView_InverseContent = default;
            private static bool _Widget_Holo_Light_ActionBar_TabView_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ActionButton"/>
            /// </summary>
            public static int Widget_Holo_Light_ActionButton { get { if (!_Widget_Holo_Light_ActionButtonReady) { _Widget_Holo_Light_ActionButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ActionButton"); _Widget_Holo_Light_ActionButtonReady = true; } return _Widget_Holo_Light_ActionButtonContent; } }
            private static int _Widget_Holo_Light_ActionButtonContent = default;
            private static bool _Widget_Holo_Light_ActionButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ActionButton_CloseMode"/>
            /// </summary>
            public static int Widget_Holo_Light_ActionButton_CloseMode { get { if (!_Widget_Holo_Light_ActionButton_CloseModeReady) { _Widget_Holo_Light_ActionButton_CloseModeContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ActionButton_CloseMode"); _Widget_Holo_Light_ActionButton_CloseModeReady = true; } return _Widget_Holo_Light_ActionButton_CloseModeContent; } }
            private static int _Widget_Holo_Light_ActionButton_CloseModeContent = default;
            private static bool _Widget_Holo_Light_ActionButton_CloseModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ActionButton_Overflow"/>
            /// </summary>
            public static int Widget_Holo_Light_ActionButton_Overflow { get { if (!_Widget_Holo_Light_ActionButton_OverflowReady) { _Widget_Holo_Light_ActionButton_OverflowContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ActionButton_Overflow"); _Widget_Holo_Light_ActionButton_OverflowReady = true; } return _Widget_Holo_Light_ActionButton_OverflowContent; } }
            private static int _Widget_Holo_Light_ActionButton_OverflowContent = default;
            private static bool _Widget_Holo_Light_ActionButton_OverflowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ActionMode"/>
            /// </summary>
            public static int Widget_Holo_Light_ActionMode { get { if (!_Widget_Holo_Light_ActionModeReady) { _Widget_Holo_Light_ActionModeContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ActionMode"); _Widget_Holo_Light_ActionModeReady = true; } return _Widget_Holo_Light_ActionModeContent; } }
            private static int _Widget_Holo_Light_ActionModeContent = default;
            private static bool _Widget_Holo_Light_ActionModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ActionMode_Inverse"/>
            /// </summary>
            public static int Widget_Holo_Light_ActionMode_Inverse { get { if (!_Widget_Holo_Light_ActionMode_InverseReady) { _Widget_Holo_Light_ActionMode_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ActionMode_Inverse"); _Widget_Holo_Light_ActionMode_InverseReady = true; } return _Widget_Holo_Light_ActionMode_InverseContent; } }
            private static int _Widget_Holo_Light_ActionMode_InverseContent = default;
            private static bool _Widget_Holo_Light_ActionMode_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_AutoCompleteTextView"/>
            /// </summary>
            public static int Widget_Holo_Light_AutoCompleteTextView { get { if (!_Widget_Holo_Light_AutoCompleteTextViewReady) { _Widget_Holo_Light_AutoCompleteTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_AutoCompleteTextView"); _Widget_Holo_Light_AutoCompleteTextViewReady = true; } return _Widget_Holo_Light_AutoCompleteTextViewContent; } }
            private static int _Widget_Holo_Light_AutoCompleteTextViewContent = default;
            private static bool _Widget_Holo_Light_AutoCompleteTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_Button"/>
            /// </summary>
            public static int Widget_Holo_Light_Button { get { if (!_Widget_Holo_Light_ButtonReady) { _Widget_Holo_Light_ButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_Button"); _Widget_Holo_Light_ButtonReady = true; } return _Widget_Holo_Light_ButtonContent; } }
            private static int _Widget_Holo_Light_ButtonContent = default;
            private static bool _Widget_Holo_Light_ButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_Button_Borderless_Small"/>
            /// </summary>
            public static int Widget_Holo_Light_Button_Borderless_Small { get { if (!_Widget_Holo_Light_Button_Borderless_SmallReady) { _Widget_Holo_Light_Button_Borderless_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_Button_Borderless_Small"); _Widget_Holo_Light_Button_Borderless_SmallReady = true; } return _Widget_Holo_Light_Button_Borderless_SmallContent; } }
            private static int _Widget_Holo_Light_Button_Borderless_SmallContent = default;
            private static bool _Widget_Holo_Light_Button_Borderless_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_Button_Inset"/>
            /// </summary>
            public static int Widget_Holo_Light_Button_Inset { get { if (!_Widget_Holo_Light_Button_InsetReady) { _Widget_Holo_Light_Button_InsetContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_Button_Inset"); _Widget_Holo_Light_Button_InsetReady = true; } return _Widget_Holo_Light_Button_InsetContent; } }
            private static int _Widget_Holo_Light_Button_InsetContent = default;
            private static bool _Widget_Holo_Light_Button_InsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_Button_Small"/>
            /// </summary>
            public static int Widget_Holo_Light_Button_Small { get { if (!_Widget_Holo_Light_Button_SmallReady) { _Widget_Holo_Light_Button_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_Button_Small"); _Widget_Holo_Light_Button_SmallReady = true; } return _Widget_Holo_Light_Button_SmallContent; } }
            private static int _Widget_Holo_Light_Button_SmallContent = default;
            private static bool _Widget_Holo_Light_Button_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_Button_Toggle"/>
            /// </summary>
            public static int Widget_Holo_Light_Button_Toggle { get { if (!_Widget_Holo_Light_Button_ToggleReady) { _Widget_Holo_Light_Button_ToggleContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_Button_Toggle"); _Widget_Holo_Light_Button_ToggleReady = true; } return _Widget_Holo_Light_Button_ToggleContent; } }
            private static int _Widget_Holo_Light_Button_ToggleContent = default;
            private static bool _Widget_Holo_Light_Button_ToggleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_CalendarView"/>
            /// </summary>
            public static int Widget_Holo_Light_CalendarView { get { if (!_Widget_Holo_Light_CalendarViewReady) { _Widget_Holo_Light_CalendarViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_CalendarView"); _Widget_Holo_Light_CalendarViewReady = true; } return _Widget_Holo_Light_CalendarViewContent; } }
            private static int _Widget_Holo_Light_CalendarViewContent = default;
            private static bool _Widget_Holo_Light_CalendarViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_CheckedTextView"/>
            /// </summary>
            public static int Widget_Holo_Light_CheckedTextView { get { if (!_Widget_Holo_Light_CheckedTextViewReady) { _Widget_Holo_Light_CheckedTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_CheckedTextView"); _Widget_Holo_Light_CheckedTextViewReady = true; } return _Widget_Holo_Light_CheckedTextViewContent; } }
            private static int _Widget_Holo_Light_CheckedTextViewContent = default;
            private static bool _Widget_Holo_Light_CheckedTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_CompoundButton_CheckBox"/>
            /// </summary>
            public static int Widget_Holo_Light_CompoundButton_CheckBox { get { if (!_Widget_Holo_Light_CompoundButton_CheckBoxReady) { _Widget_Holo_Light_CompoundButton_CheckBoxContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_CompoundButton_CheckBox"); _Widget_Holo_Light_CompoundButton_CheckBoxReady = true; } return _Widget_Holo_Light_CompoundButton_CheckBoxContent; } }
            private static int _Widget_Holo_Light_CompoundButton_CheckBoxContent = default;
            private static bool _Widget_Holo_Light_CompoundButton_CheckBoxReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_CompoundButton_RadioButton"/>
            /// </summary>
            public static int Widget_Holo_Light_CompoundButton_RadioButton { get { if (!_Widget_Holo_Light_CompoundButton_RadioButtonReady) { _Widget_Holo_Light_CompoundButton_RadioButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_CompoundButton_RadioButton"); _Widget_Holo_Light_CompoundButton_RadioButtonReady = true; } return _Widget_Holo_Light_CompoundButton_RadioButtonContent; } }
            private static int _Widget_Holo_Light_CompoundButton_RadioButtonContent = default;
            private static bool _Widget_Holo_Light_CompoundButton_RadioButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_CompoundButton_Star"/>
            /// </summary>
            public static int Widget_Holo_Light_CompoundButton_Star { get { if (!_Widget_Holo_Light_CompoundButton_StarReady) { _Widget_Holo_Light_CompoundButton_StarContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_CompoundButton_Star"); _Widget_Holo_Light_CompoundButton_StarReady = true; } return _Widget_Holo_Light_CompoundButton_StarContent; } }
            private static int _Widget_Holo_Light_CompoundButton_StarContent = default;
            private static bool _Widget_Holo_Light_CompoundButton_StarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_DropDownItem"/>
            /// </summary>
            public static int Widget_Holo_Light_DropDownItem { get { if (!_Widget_Holo_Light_DropDownItemReady) { _Widget_Holo_Light_DropDownItemContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_DropDownItem"); _Widget_Holo_Light_DropDownItemReady = true; } return _Widget_Holo_Light_DropDownItemContent; } }
            private static int _Widget_Holo_Light_DropDownItemContent = default;
            private static bool _Widget_Holo_Light_DropDownItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_DropDownItem_Spinner"/>
            /// </summary>
            public static int Widget_Holo_Light_DropDownItem_Spinner { get { if (!_Widget_Holo_Light_DropDownItem_SpinnerReady) { _Widget_Holo_Light_DropDownItem_SpinnerContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_DropDownItem_Spinner"); _Widget_Holo_Light_DropDownItem_SpinnerReady = true; } return _Widget_Holo_Light_DropDownItem_SpinnerContent; } }
            private static int _Widget_Holo_Light_DropDownItem_SpinnerContent = default;
            private static bool _Widget_Holo_Light_DropDownItem_SpinnerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_EditText"/>
            /// </summary>
            public static int Widget_Holo_Light_EditText { get { if (!_Widget_Holo_Light_EditTextReady) { _Widget_Holo_Light_EditTextContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_EditText"); _Widget_Holo_Light_EditTextReady = true; } return _Widget_Holo_Light_EditTextContent; } }
            private static int _Widget_Holo_Light_EditTextContent = default;
            private static bool _Widget_Holo_Light_EditTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ExpandableListView"/>
            /// </summary>
            public static int Widget_Holo_Light_ExpandableListView { get { if (!_Widget_Holo_Light_ExpandableListViewReady) { _Widget_Holo_Light_ExpandableListViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ExpandableListView"); _Widget_Holo_Light_ExpandableListViewReady = true; } return _Widget_Holo_Light_ExpandableListViewContent; } }
            private static int _Widget_Holo_Light_ExpandableListViewContent = default;
            private static bool _Widget_Holo_Light_ExpandableListViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_GridView"/>
            /// </summary>
            public static int Widget_Holo_Light_GridView { get { if (!_Widget_Holo_Light_GridViewReady) { _Widget_Holo_Light_GridViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_GridView"); _Widget_Holo_Light_GridViewReady = true; } return _Widget_Holo_Light_GridViewContent; } }
            private static int _Widget_Holo_Light_GridViewContent = default;
            private static bool _Widget_Holo_Light_GridViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_HorizontalScrollView"/>
            /// </summary>
            public static int Widget_Holo_Light_HorizontalScrollView { get { if (!_Widget_Holo_Light_HorizontalScrollViewReady) { _Widget_Holo_Light_HorizontalScrollViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_HorizontalScrollView"); _Widget_Holo_Light_HorizontalScrollViewReady = true; } return _Widget_Holo_Light_HorizontalScrollViewContent; } }
            private static int _Widget_Holo_Light_HorizontalScrollViewContent = default;
            private static bool _Widget_Holo_Light_HorizontalScrollViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ImageButton"/>
            /// </summary>
            public static int Widget_Holo_Light_ImageButton { get { if (!_Widget_Holo_Light_ImageButtonReady) { _Widget_Holo_Light_ImageButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ImageButton"); _Widget_Holo_Light_ImageButtonReady = true; } return _Widget_Holo_Light_ImageButtonContent; } }
            private static int _Widget_Holo_Light_ImageButtonContent = default;
            private static bool _Widget_Holo_Light_ImageButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ListPopupWindow"/>
            /// </summary>
            public static int Widget_Holo_Light_ListPopupWindow { get { if (!_Widget_Holo_Light_ListPopupWindowReady) { _Widget_Holo_Light_ListPopupWindowContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ListPopupWindow"); _Widget_Holo_Light_ListPopupWindowReady = true; } return _Widget_Holo_Light_ListPopupWindowContent; } }
            private static int _Widget_Holo_Light_ListPopupWindowContent = default;
            private static bool _Widget_Holo_Light_ListPopupWindowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ListView"/>
            /// </summary>
            public static int Widget_Holo_Light_ListView { get { if (!_Widget_Holo_Light_ListViewReady) { _Widget_Holo_Light_ListViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ListView"); _Widget_Holo_Light_ListViewReady = true; } return _Widget_Holo_Light_ListViewContent; } }
            private static int _Widget_Holo_Light_ListViewContent = default;
            private static bool _Widget_Holo_Light_ListViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ListView_DropDown"/>
            /// </summary>
            public static int Widget_Holo_Light_ListView_DropDown { get { if (!_Widget_Holo_Light_ListView_DropDownReady) { _Widget_Holo_Light_ListView_DropDownContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ListView_DropDown"); _Widget_Holo_Light_ListView_DropDownReady = true; } return _Widget_Holo_Light_ListView_DropDownContent; } }
            private static int _Widget_Holo_Light_ListView_DropDownContent = default;
            private static bool _Widget_Holo_Light_ListView_DropDownReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_MediaRouteButton"/>
            /// </summary>
            public static int Widget_Holo_Light_MediaRouteButton { get { if (!_Widget_Holo_Light_MediaRouteButtonReady) { _Widget_Holo_Light_MediaRouteButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_MediaRouteButton"); _Widget_Holo_Light_MediaRouteButtonReady = true; } return _Widget_Holo_Light_MediaRouteButtonContent; } }
            private static int _Widget_Holo_Light_MediaRouteButtonContent = default;
            private static bool _Widget_Holo_Light_MediaRouteButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_PopupMenu"/>
            /// </summary>
            public static int Widget_Holo_Light_PopupMenu { get { if (!_Widget_Holo_Light_PopupMenuReady) { _Widget_Holo_Light_PopupMenuContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_PopupMenu"); _Widget_Holo_Light_PopupMenuReady = true; } return _Widget_Holo_Light_PopupMenuContent; } }
            private static int _Widget_Holo_Light_PopupMenuContent = default;
            private static bool _Widget_Holo_Light_PopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_PopupWindow"/>
            /// </summary>
            public static int Widget_Holo_Light_PopupWindow { get { if (!_Widget_Holo_Light_PopupWindowReady) { _Widget_Holo_Light_PopupWindowContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_PopupWindow"); _Widget_Holo_Light_PopupWindowReady = true; } return _Widget_Holo_Light_PopupWindowContent; } }
            private static int _Widget_Holo_Light_PopupWindowContent = default;
            private static bool _Widget_Holo_Light_PopupWindowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ProgressBar"/>
            /// </summary>
            public static int Widget_Holo_Light_ProgressBar { get { if (!_Widget_Holo_Light_ProgressBarReady) { _Widget_Holo_Light_ProgressBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ProgressBar"); _Widget_Holo_Light_ProgressBarReady = true; } return _Widget_Holo_Light_ProgressBarContent; } }
            private static int _Widget_Holo_Light_ProgressBarContent = default;
            private static bool _Widget_Holo_Light_ProgressBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ProgressBar_Horizontal"/>
            /// </summary>
            public static int Widget_Holo_Light_ProgressBar_Horizontal { get { if (!_Widget_Holo_Light_ProgressBar_HorizontalReady) { _Widget_Holo_Light_ProgressBar_HorizontalContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ProgressBar_Horizontal"); _Widget_Holo_Light_ProgressBar_HorizontalReady = true; } return _Widget_Holo_Light_ProgressBar_HorizontalContent; } }
            private static int _Widget_Holo_Light_ProgressBar_HorizontalContent = default;
            private static bool _Widget_Holo_Light_ProgressBar_HorizontalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ProgressBar_Inverse"/>
            /// </summary>
            public static int Widget_Holo_Light_ProgressBar_Inverse { get { if (!_Widget_Holo_Light_ProgressBar_InverseReady) { _Widget_Holo_Light_ProgressBar_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ProgressBar_Inverse"); _Widget_Holo_Light_ProgressBar_InverseReady = true; } return _Widget_Holo_Light_ProgressBar_InverseContent; } }
            private static int _Widget_Holo_Light_ProgressBar_InverseContent = default;
            private static bool _Widget_Holo_Light_ProgressBar_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ProgressBar_Large"/>
            /// </summary>
            public static int Widget_Holo_Light_ProgressBar_Large { get { if (!_Widget_Holo_Light_ProgressBar_LargeReady) { _Widget_Holo_Light_ProgressBar_LargeContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ProgressBar_Large"); _Widget_Holo_Light_ProgressBar_LargeReady = true; } return _Widget_Holo_Light_ProgressBar_LargeContent; } }
            private static int _Widget_Holo_Light_ProgressBar_LargeContent = default;
            private static bool _Widget_Holo_Light_ProgressBar_LargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ProgressBar_Large_Inverse"/>
            /// </summary>
            public static int Widget_Holo_Light_ProgressBar_Large_Inverse { get { if (!_Widget_Holo_Light_ProgressBar_Large_InverseReady) { _Widget_Holo_Light_ProgressBar_Large_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ProgressBar_Large_Inverse"); _Widget_Holo_Light_ProgressBar_Large_InverseReady = true; } return _Widget_Holo_Light_ProgressBar_Large_InverseContent; } }
            private static int _Widget_Holo_Light_ProgressBar_Large_InverseContent = default;
            private static bool _Widget_Holo_Light_ProgressBar_Large_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ProgressBar_Small"/>
            /// </summary>
            public static int Widget_Holo_Light_ProgressBar_Small { get { if (!_Widget_Holo_Light_ProgressBar_SmallReady) { _Widget_Holo_Light_ProgressBar_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ProgressBar_Small"); _Widget_Holo_Light_ProgressBar_SmallReady = true; } return _Widget_Holo_Light_ProgressBar_SmallContent; } }
            private static int _Widget_Holo_Light_ProgressBar_SmallContent = default;
            private static bool _Widget_Holo_Light_ProgressBar_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ProgressBar_Small_Inverse"/>
            /// </summary>
            public static int Widget_Holo_Light_ProgressBar_Small_Inverse { get { if (!_Widget_Holo_Light_ProgressBar_Small_InverseReady) { _Widget_Holo_Light_ProgressBar_Small_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ProgressBar_Small_Inverse"); _Widget_Holo_Light_ProgressBar_Small_InverseReady = true; } return _Widget_Holo_Light_ProgressBar_Small_InverseContent; } }
            private static int _Widget_Holo_Light_ProgressBar_Small_InverseContent = default;
            private static bool _Widget_Holo_Light_ProgressBar_Small_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ProgressBar_Small_Title"/>
            /// </summary>
            public static int Widget_Holo_Light_ProgressBar_Small_Title { get { if (!_Widget_Holo_Light_ProgressBar_Small_TitleReady) { _Widget_Holo_Light_ProgressBar_Small_TitleContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ProgressBar_Small_Title"); _Widget_Holo_Light_ProgressBar_Small_TitleReady = true; } return _Widget_Holo_Light_ProgressBar_Small_TitleContent; } }
            private static int _Widget_Holo_Light_ProgressBar_Small_TitleContent = default;
            private static bool _Widget_Holo_Light_ProgressBar_Small_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_RatingBar"/>
            /// </summary>
            public static int Widget_Holo_Light_RatingBar { get { if (!_Widget_Holo_Light_RatingBarReady) { _Widget_Holo_Light_RatingBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_RatingBar"); _Widget_Holo_Light_RatingBarReady = true; } return _Widget_Holo_Light_RatingBarContent; } }
            private static int _Widget_Holo_Light_RatingBarContent = default;
            private static bool _Widget_Holo_Light_RatingBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_RatingBar_Indicator"/>
            /// </summary>
            public static int Widget_Holo_Light_RatingBar_Indicator { get { if (!_Widget_Holo_Light_RatingBar_IndicatorReady) { _Widget_Holo_Light_RatingBar_IndicatorContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_RatingBar_Indicator"); _Widget_Holo_Light_RatingBar_IndicatorReady = true; } return _Widget_Holo_Light_RatingBar_IndicatorContent; } }
            private static int _Widget_Holo_Light_RatingBar_IndicatorContent = default;
            private static bool _Widget_Holo_Light_RatingBar_IndicatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_RatingBar_Small"/>
            /// </summary>
            public static int Widget_Holo_Light_RatingBar_Small { get { if (!_Widget_Holo_Light_RatingBar_SmallReady) { _Widget_Holo_Light_RatingBar_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_RatingBar_Small"); _Widget_Holo_Light_RatingBar_SmallReady = true; } return _Widget_Holo_Light_RatingBar_SmallContent; } }
            private static int _Widget_Holo_Light_RatingBar_SmallContent = default;
            private static bool _Widget_Holo_Light_RatingBar_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_ScrollView"/>
            /// </summary>
            public static int Widget_Holo_Light_ScrollView { get { if (!_Widget_Holo_Light_ScrollViewReady) { _Widget_Holo_Light_ScrollViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_ScrollView"); _Widget_Holo_Light_ScrollViewReady = true; } return _Widget_Holo_Light_ScrollViewContent; } }
            private static int _Widget_Holo_Light_ScrollViewContent = default;
            private static bool _Widget_Holo_Light_ScrollViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_SeekBar"/>
            /// </summary>
            public static int Widget_Holo_Light_SeekBar { get { if (!_Widget_Holo_Light_SeekBarReady) { _Widget_Holo_Light_SeekBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_SeekBar"); _Widget_Holo_Light_SeekBarReady = true; } return _Widget_Holo_Light_SeekBarContent; } }
            private static int _Widget_Holo_Light_SeekBarContent = default;
            private static bool _Widget_Holo_Light_SeekBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_Spinner"/>
            /// </summary>
            public static int Widget_Holo_Light_Spinner { get { if (!_Widget_Holo_Light_SpinnerReady) { _Widget_Holo_Light_SpinnerContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_Spinner"); _Widget_Holo_Light_SpinnerReady = true; } return _Widget_Holo_Light_SpinnerContent; } }
            private static int _Widget_Holo_Light_SpinnerContent = default;
            private static bool _Widget_Holo_Light_SpinnerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_Tab"/>
            /// </summary>
            public static int Widget_Holo_Light_Tab { get { if (!_Widget_Holo_Light_TabReady) { _Widget_Holo_Light_TabContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_Tab"); _Widget_Holo_Light_TabReady = true; } return _Widget_Holo_Light_TabContent; } }
            private static int _Widget_Holo_Light_TabContent = default;
            private static bool _Widget_Holo_Light_TabReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_TabWidget"/>
            /// </summary>
            public static int Widget_Holo_Light_TabWidget { get { if (!_Widget_Holo_Light_TabWidgetReady) { _Widget_Holo_Light_TabWidgetContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_TabWidget"); _Widget_Holo_Light_TabWidgetReady = true; } return _Widget_Holo_Light_TabWidgetContent; } }
            private static int _Widget_Holo_Light_TabWidgetContent = default;
            private static bool _Widget_Holo_Light_TabWidgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_TextView"/>
            /// </summary>
            public static int Widget_Holo_Light_TextView { get { if (!_Widget_Holo_Light_TextViewReady) { _Widget_Holo_Light_TextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_TextView"); _Widget_Holo_Light_TextViewReady = true; } return _Widget_Holo_Light_TextViewContent; } }
            private static int _Widget_Holo_Light_TextViewContent = default;
            private static bool _Widget_Holo_Light_TextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_TextView_SpinnerItem"/>
            /// </summary>
            public static int Widget_Holo_Light_TextView_SpinnerItem { get { if (!_Widget_Holo_Light_TextView_SpinnerItemReady) { _Widget_Holo_Light_TextView_SpinnerItemContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_TextView_SpinnerItem"); _Widget_Holo_Light_TextView_SpinnerItemReady = true; } return _Widget_Holo_Light_TextView_SpinnerItemContent; } }
            private static int _Widget_Holo_Light_TextView_SpinnerItemContent = default;
            private static bool _Widget_Holo_Light_TextView_SpinnerItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_WebTextView"/>
            /// </summary>
            public static int Widget_Holo_Light_WebTextView { get { if (!_Widget_Holo_Light_WebTextViewReady) { _Widget_Holo_Light_WebTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_WebTextView"); _Widget_Holo_Light_WebTextViewReady = true; } return _Widget_Holo_Light_WebTextViewContent; } }
            private static int _Widget_Holo_Light_WebTextViewContent = default;
            private static bool _Widget_Holo_Light_WebTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Light_WebView"/>
            /// </summary>
            public static int Widget_Holo_Light_WebView { get { if (!_Widget_Holo_Light_WebViewReady) { _Widget_Holo_Light_WebViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Light_WebView"); _Widget_Holo_Light_WebViewReady = true; } return _Widget_Holo_Light_WebViewContent; } }
            private static int _Widget_Holo_Light_WebViewContent = default;
            private static bool _Widget_Holo_Light_WebViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ListPopupWindow"/>
            /// </summary>
            public static int Widget_Holo_ListPopupWindow { get { if (!_Widget_Holo_ListPopupWindowReady) { _Widget_Holo_ListPopupWindowContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ListPopupWindow"); _Widget_Holo_ListPopupWindowReady = true; } return _Widget_Holo_ListPopupWindowContent; } }
            private static int _Widget_Holo_ListPopupWindowContent = default;
            private static bool _Widget_Holo_ListPopupWindowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ListView"/>
            /// </summary>
            public static int Widget_Holo_ListView { get { if (!_Widget_Holo_ListViewReady) { _Widget_Holo_ListViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ListView"); _Widget_Holo_ListViewReady = true; } return _Widget_Holo_ListViewContent; } }
            private static int _Widget_Holo_ListViewContent = default;
            private static bool _Widget_Holo_ListViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ListView_DropDown"/>
            /// </summary>
            public static int Widget_Holo_ListView_DropDown { get { if (!_Widget_Holo_ListView_DropDownReady) { _Widget_Holo_ListView_DropDownContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ListView_DropDown"); _Widget_Holo_ListView_DropDownReady = true; } return _Widget_Holo_ListView_DropDownContent; } }
            private static int _Widget_Holo_ListView_DropDownContent = default;
            private static bool _Widget_Holo_ListView_DropDownReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_MediaRouteButton"/>
            /// </summary>
            public static int Widget_Holo_MediaRouteButton { get { if (!_Widget_Holo_MediaRouteButtonReady) { _Widget_Holo_MediaRouteButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_MediaRouteButton"); _Widget_Holo_MediaRouteButtonReady = true; } return _Widget_Holo_MediaRouteButtonContent; } }
            private static int _Widget_Holo_MediaRouteButtonContent = default;
            private static bool _Widget_Holo_MediaRouteButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_PopupMenu"/>
            /// </summary>
            public static int Widget_Holo_PopupMenu { get { if (!_Widget_Holo_PopupMenuReady) { _Widget_Holo_PopupMenuContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_PopupMenu"); _Widget_Holo_PopupMenuReady = true; } return _Widget_Holo_PopupMenuContent; } }
            private static int _Widget_Holo_PopupMenuContent = default;
            private static bool _Widget_Holo_PopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_PopupWindow"/>
            /// </summary>
            public static int Widget_Holo_PopupWindow { get { if (!_Widget_Holo_PopupWindowReady) { _Widget_Holo_PopupWindowContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_PopupWindow"); _Widget_Holo_PopupWindowReady = true; } return _Widget_Holo_PopupWindowContent; } }
            private static int _Widget_Holo_PopupWindowContent = default;
            private static bool _Widget_Holo_PopupWindowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ProgressBar"/>
            /// </summary>
            public static int Widget_Holo_ProgressBar { get { if (!_Widget_Holo_ProgressBarReady) { _Widget_Holo_ProgressBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ProgressBar"); _Widget_Holo_ProgressBarReady = true; } return _Widget_Holo_ProgressBarContent; } }
            private static int _Widget_Holo_ProgressBarContent = default;
            private static bool _Widget_Holo_ProgressBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ProgressBar_Horizontal"/>
            /// </summary>
            public static int Widget_Holo_ProgressBar_Horizontal { get { if (!_Widget_Holo_ProgressBar_HorizontalReady) { _Widget_Holo_ProgressBar_HorizontalContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ProgressBar_Horizontal"); _Widget_Holo_ProgressBar_HorizontalReady = true; } return _Widget_Holo_ProgressBar_HorizontalContent; } }
            private static int _Widget_Holo_ProgressBar_HorizontalContent = default;
            private static bool _Widget_Holo_ProgressBar_HorizontalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ProgressBar_Large"/>
            /// </summary>
            public static int Widget_Holo_ProgressBar_Large { get { if (!_Widget_Holo_ProgressBar_LargeReady) { _Widget_Holo_ProgressBar_LargeContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ProgressBar_Large"); _Widget_Holo_ProgressBar_LargeReady = true; } return _Widget_Holo_ProgressBar_LargeContent; } }
            private static int _Widget_Holo_ProgressBar_LargeContent = default;
            private static bool _Widget_Holo_ProgressBar_LargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ProgressBar_Small"/>
            /// </summary>
            public static int Widget_Holo_ProgressBar_Small { get { if (!_Widget_Holo_ProgressBar_SmallReady) { _Widget_Holo_ProgressBar_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ProgressBar_Small"); _Widget_Holo_ProgressBar_SmallReady = true; } return _Widget_Holo_ProgressBar_SmallContent; } }
            private static int _Widget_Holo_ProgressBar_SmallContent = default;
            private static bool _Widget_Holo_ProgressBar_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ProgressBar_Small_Title"/>
            /// </summary>
            public static int Widget_Holo_ProgressBar_Small_Title { get { if (!_Widget_Holo_ProgressBar_Small_TitleReady) { _Widget_Holo_ProgressBar_Small_TitleContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ProgressBar_Small_Title"); _Widget_Holo_ProgressBar_Small_TitleReady = true; } return _Widget_Holo_ProgressBar_Small_TitleContent; } }
            private static int _Widget_Holo_ProgressBar_Small_TitleContent = default;
            private static bool _Widget_Holo_ProgressBar_Small_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_RatingBar"/>
            /// </summary>
            public static int Widget_Holo_RatingBar { get { if (!_Widget_Holo_RatingBarReady) { _Widget_Holo_RatingBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_RatingBar"); _Widget_Holo_RatingBarReady = true; } return _Widget_Holo_RatingBarContent; } }
            private static int _Widget_Holo_RatingBarContent = default;
            private static bool _Widget_Holo_RatingBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_RatingBar_Indicator"/>
            /// </summary>
            public static int Widget_Holo_RatingBar_Indicator { get { if (!_Widget_Holo_RatingBar_IndicatorReady) { _Widget_Holo_RatingBar_IndicatorContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_RatingBar_Indicator"); _Widget_Holo_RatingBar_IndicatorReady = true; } return _Widget_Holo_RatingBar_IndicatorContent; } }
            private static int _Widget_Holo_RatingBar_IndicatorContent = default;
            private static bool _Widget_Holo_RatingBar_IndicatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_RatingBar_Small"/>
            /// </summary>
            public static int Widget_Holo_RatingBar_Small { get { if (!_Widget_Holo_RatingBar_SmallReady) { _Widget_Holo_RatingBar_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_RatingBar_Small"); _Widget_Holo_RatingBar_SmallReady = true; } return _Widget_Holo_RatingBar_SmallContent; } }
            private static int _Widget_Holo_RatingBar_SmallContent = default;
            private static bool _Widget_Holo_RatingBar_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_ScrollView"/>
            /// </summary>
            public static int Widget_Holo_ScrollView { get { if (!_Widget_Holo_ScrollViewReady) { _Widget_Holo_ScrollViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_ScrollView"); _Widget_Holo_ScrollViewReady = true; } return _Widget_Holo_ScrollViewContent; } }
            private static int _Widget_Holo_ScrollViewContent = default;
            private static bool _Widget_Holo_ScrollViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_SeekBar"/>
            /// </summary>
            public static int Widget_Holo_SeekBar { get { if (!_Widget_Holo_SeekBarReady) { _Widget_Holo_SeekBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_SeekBar"); _Widget_Holo_SeekBarReady = true; } return _Widget_Holo_SeekBarContent; } }
            private static int _Widget_Holo_SeekBarContent = default;
            private static bool _Widget_Holo_SeekBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Spinner"/>
            /// </summary>
            public static int Widget_Holo_Spinner { get { if (!_Widget_Holo_SpinnerReady) { _Widget_Holo_SpinnerContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Spinner"); _Widget_Holo_SpinnerReady = true; } return _Widget_Holo_SpinnerContent; } }
            private static int _Widget_Holo_SpinnerContent = default;
            private static bool _Widget_Holo_SpinnerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_Tab"/>
            /// </summary>
            public static int Widget_Holo_Tab { get { if (!_Widget_Holo_TabReady) { _Widget_Holo_TabContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_Tab"); _Widget_Holo_TabReady = true; } return _Widget_Holo_TabContent; } }
            private static int _Widget_Holo_TabContent = default;
            private static bool _Widget_Holo_TabReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_TabWidget"/>
            /// </summary>
            public static int Widget_Holo_TabWidget { get { if (!_Widget_Holo_TabWidgetReady) { _Widget_Holo_TabWidgetContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_TabWidget"); _Widget_Holo_TabWidgetReady = true; } return _Widget_Holo_TabWidgetContent; } }
            private static int _Widget_Holo_TabWidgetContent = default;
            private static bool _Widget_Holo_TabWidgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_TextView"/>
            /// </summary>
            public static int Widget_Holo_TextView { get { if (!_Widget_Holo_TextViewReady) { _Widget_Holo_TextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_TextView"); _Widget_Holo_TextViewReady = true; } return _Widget_Holo_TextViewContent; } }
            private static int _Widget_Holo_TextViewContent = default;
            private static bool _Widget_Holo_TextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_TextView_SpinnerItem"/>
            /// </summary>
            public static int Widget_Holo_TextView_SpinnerItem { get { if (!_Widget_Holo_TextView_SpinnerItemReady) { _Widget_Holo_TextView_SpinnerItemContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_TextView_SpinnerItem"); _Widget_Holo_TextView_SpinnerItemReady = true; } return _Widget_Holo_TextView_SpinnerItemContent; } }
            private static int _Widget_Holo_TextView_SpinnerItemContent = default;
            private static bool _Widget_Holo_TextView_SpinnerItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_WebTextView"/>
            /// </summary>
            public static int Widget_Holo_WebTextView { get { if (!_Widget_Holo_WebTextViewReady) { _Widget_Holo_WebTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_WebTextView"); _Widget_Holo_WebTextViewReady = true; } return _Widget_Holo_WebTextViewContent; } }
            private static int _Widget_Holo_WebTextViewContent = default;
            private static bool _Widget_Holo_WebTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Holo_WebView"/>
            /// </summary>
            public static int Widget_Holo_WebView { get { if (!_Widget_Holo_WebViewReady) { _Widget_Holo_WebViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Holo_WebView"); _Widget_Holo_WebViewReady = true; } return _Widget_Holo_WebViewContent; } }
            private static int _Widget_Holo_WebViewContent = default;
            private static bool _Widget_Holo_WebViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ImageButton"/>
            /// </summary>
            public static int Widget_ImageButton { get { if (!_Widget_ImageButtonReady) { _Widget_ImageButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_ImageButton"); _Widget_ImageButtonReady = true; } return _Widget_ImageButtonContent; } }
            private static int _Widget_ImageButtonContent = default;
            private static bool _Widget_ImageButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ImageWell"/>
            /// </summary>
            public static int Widget_ImageWell { get { if (!_Widget_ImageWellReady) { _Widget_ImageWellContent = SGetField<int>(LocalBridgeClazz, "Widget_ImageWell"); _Widget_ImageWellReady = true; } return _Widget_ImageWellContent; } }
            private static int _Widget_ImageWellContent = default;
            private static bool _Widget_ImageWellReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_KeyboardView"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int Widget_KeyboardView { get { if (!_Widget_KeyboardViewReady) { _Widget_KeyboardViewContent = SGetField<int>(LocalBridgeClazz, "Widget_KeyboardView"); _Widget_KeyboardViewReady = true; } return _Widget_KeyboardViewContent; } }
            private static int _Widget_KeyboardViewContent = default;
            private static bool _Widget_KeyboardViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ListPopupWindow"/>
            /// </summary>
            public static int Widget_ListPopupWindow { get { if (!_Widget_ListPopupWindowReady) { _Widget_ListPopupWindowContent = SGetField<int>(LocalBridgeClazz, "Widget_ListPopupWindow"); _Widget_ListPopupWindowReady = true; } return _Widget_ListPopupWindowContent; } }
            private static int _Widget_ListPopupWindowContent = default;
            private static bool _Widget_ListPopupWindowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ListView"/>
            /// </summary>
            public static int Widget_ListView { get { if (!_Widget_ListViewReady) { _Widget_ListViewContent = SGetField<int>(LocalBridgeClazz, "Widget_ListView"); _Widget_ListViewReady = true; } return _Widget_ListViewContent; } }
            private static int _Widget_ListViewContent = default;
            private static bool _Widget_ListViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ListView_DropDown"/>
            /// </summary>
            public static int Widget_ListView_DropDown { get { if (!_Widget_ListView_DropDownReady) { _Widget_ListView_DropDownContent = SGetField<int>(LocalBridgeClazz, "Widget_ListView_DropDown"); _Widget_ListView_DropDownReady = true; } return _Widget_ListView_DropDownContent; } }
            private static int _Widget_ListView_DropDownContent = default;
            private static bool _Widget_ListView_DropDownReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ListView_Menu"/>
            /// </summary>
            public static int Widget_ListView_Menu { get { if (!_Widget_ListView_MenuReady) { _Widget_ListView_MenuContent = SGetField<int>(LocalBridgeClazz, "Widget_ListView_Menu"); _Widget_ListView_MenuReady = true; } return _Widget_ListView_MenuContent; } }
            private static int _Widget_ListView_MenuContent = default;
            private static bool _Widget_ListView_MenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ListView_White"/>
            /// </summary>
            public static int Widget_ListView_White { get { if (!_Widget_ListView_WhiteReady) { _Widget_ListView_WhiteContent = SGetField<int>(LocalBridgeClazz, "Widget_ListView_White"); _Widget_ListView_WhiteReady = true; } return _Widget_ListView_WhiteContent; } }
            private static int _Widget_ListView_WhiteContent = default;
            private static bool _Widget_ListView_WhiteReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material"/>
            /// </summary>
            public static int Widget_Material { get { if (!_Widget_MaterialReady) { _Widget_MaterialContent = SGetField<int>(LocalBridgeClazz, "Widget_Material"); _Widget_MaterialReady = true; } return _Widget_MaterialContent; } }
            private static int _Widget_MaterialContent = default;
            private static bool _Widget_MaterialReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ActionBar"/>
            /// </summary>
            public static int Widget_Material_ActionBar { get { if (!_Widget_Material_ActionBarReady) { _Widget_Material_ActionBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ActionBar"); _Widget_Material_ActionBarReady = true; } return _Widget_Material_ActionBarContent; } }
            private static int _Widget_Material_ActionBarContent = default;
            private static bool _Widget_Material_ActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ActionBar_Solid"/>
            /// </summary>
            public static int Widget_Material_ActionBar_Solid { get { if (!_Widget_Material_ActionBar_SolidReady) { _Widget_Material_ActionBar_SolidContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ActionBar_Solid"); _Widget_Material_ActionBar_SolidReady = true; } return _Widget_Material_ActionBar_SolidContent; } }
            private static int _Widget_Material_ActionBar_SolidContent = default;
            private static bool _Widget_Material_ActionBar_SolidReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ActionBar_TabBar"/>
            /// </summary>
            public static int Widget_Material_ActionBar_TabBar { get { if (!_Widget_Material_ActionBar_TabBarReady) { _Widget_Material_ActionBar_TabBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ActionBar_TabBar"); _Widget_Material_ActionBar_TabBarReady = true; } return _Widget_Material_ActionBar_TabBarContent; } }
            private static int _Widget_Material_ActionBar_TabBarContent = default;
            private static bool _Widget_Material_ActionBar_TabBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ActionBar_TabText"/>
            /// </summary>
            public static int Widget_Material_ActionBar_TabText { get { if (!_Widget_Material_ActionBar_TabTextReady) { _Widget_Material_ActionBar_TabTextContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ActionBar_TabText"); _Widget_Material_ActionBar_TabTextReady = true; } return _Widget_Material_ActionBar_TabTextContent; } }
            private static int _Widget_Material_ActionBar_TabTextContent = default;
            private static bool _Widget_Material_ActionBar_TabTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ActionBar_TabView"/>
            /// </summary>
            public static int Widget_Material_ActionBar_TabView { get { if (!_Widget_Material_ActionBar_TabViewReady) { _Widget_Material_ActionBar_TabViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ActionBar_TabView"); _Widget_Material_ActionBar_TabViewReady = true; } return _Widget_Material_ActionBar_TabViewContent; } }
            private static int _Widget_Material_ActionBar_TabViewContent = default;
            private static bool _Widget_Material_ActionBar_TabViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ActionButton"/>
            /// </summary>
            public static int Widget_Material_ActionButton { get { if (!_Widget_Material_ActionButtonReady) { _Widget_Material_ActionButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ActionButton"); _Widget_Material_ActionButtonReady = true; } return _Widget_Material_ActionButtonContent; } }
            private static int _Widget_Material_ActionButtonContent = default;
            private static bool _Widget_Material_ActionButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ActionButton_CloseMode"/>
            /// </summary>
            public static int Widget_Material_ActionButton_CloseMode { get { if (!_Widget_Material_ActionButton_CloseModeReady) { _Widget_Material_ActionButton_CloseModeContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ActionButton_CloseMode"); _Widget_Material_ActionButton_CloseModeReady = true; } return _Widget_Material_ActionButton_CloseModeContent; } }
            private static int _Widget_Material_ActionButton_CloseModeContent = default;
            private static bool _Widget_Material_ActionButton_CloseModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ActionButton_Overflow"/>
            /// </summary>
            public static int Widget_Material_ActionButton_Overflow { get { if (!_Widget_Material_ActionButton_OverflowReady) { _Widget_Material_ActionButton_OverflowContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ActionButton_Overflow"); _Widget_Material_ActionButton_OverflowReady = true; } return _Widget_Material_ActionButton_OverflowContent; } }
            private static int _Widget_Material_ActionButton_OverflowContent = default;
            private static bool _Widget_Material_ActionButton_OverflowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ActionMode"/>
            /// </summary>
            public static int Widget_Material_ActionMode { get { if (!_Widget_Material_ActionModeReady) { _Widget_Material_ActionModeContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ActionMode"); _Widget_Material_ActionModeReady = true; } return _Widget_Material_ActionModeContent; } }
            private static int _Widget_Material_ActionModeContent = default;
            private static bool _Widget_Material_ActionModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_AutoCompleteTextView"/>
            /// </summary>
            public static int Widget_Material_AutoCompleteTextView { get { if (!_Widget_Material_AutoCompleteTextViewReady) { _Widget_Material_AutoCompleteTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_AutoCompleteTextView"); _Widget_Material_AutoCompleteTextViewReady = true; } return _Widget_Material_AutoCompleteTextViewContent; } }
            private static int _Widget_Material_AutoCompleteTextViewContent = default;
            private static bool _Widget_Material_AutoCompleteTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Button"/>
            /// </summary>
            public static int Widget_Material_Button { get { if (!_Widget_Material_ButtonReady) { _Widget_Material_ButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Button"); _Widget_Material_ButtonReady = true; } return _Widget_Material_ButtonContent; } }
            private static int _Widget_Material_ButtonContent = default;
            private static bool _Widget_Material_ButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Button_Borderless"/>
            /// </summary>
            public static int Widget_Material_Button_Borderless { get { if (!_Widget_Material_Button_BorderlessReady) { _Widget_Material_Button_BorderlessContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Button_Borderless"); _Widget_Material_Button_BorderlessReady = true; } return _Widget_Material_Button_BorderlessContent; } }
            private static int _Widget_Material_Button_BorderlessContent = default;
            private static bool _Widget_Material_Button_BorderlessReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Button_Borderless_Colored"/>
            /// </summary>
            public static int Widget_Material_Button_Borderless_Colored { get { if (!_Widget_Material_Button_Borderless_ColoredReady) { _Widget_Material_Button_Borderless_ColoredContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Button_Borderless_Colored"); _Widget_Material_Button_Borderless_ColoredReady = true; } return _Widget_Material_Button_Borderless_ColoredContent; } }
            private static int _Widget_Material_Button_Borderless_ColoredContent = default;
            private static bool _Widget_Material_Button_Borderless_ColoredReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Button_Borderless_Small"/>
            /// </summary>
            public static int Widget_Material_Button_Borderless_Small { get { if (!_Widget_Material_Button_Borderless_SmallReady) { _Widget_Material_Button_Borderless_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Button_Borderless_Small"); _Widget_Material_Button_Borderless_SmallReady = true; } return _Widget_Material_Button_Borderless_SmallContent; } }
            private static int _Widget_Material_Button_Borderless_SmallContent = default;
            private static bool _Widget_Material_Button_Borderless_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Button_Colored"/>
            /// </summary>
            public static int Widget_Material_Button_Colored { get { if (!_Widget_Material_Button_ColoredReady) { _Widget_Material_Button_ColoredContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Button_Colored"); _Widget_Material_Button_ColoredReady = true; } return _Widget_Material_Button_ColoredContent; } }
            private static int _Widget_Material_Button_ColoredContent = default;
            private static bool _Widget_Material_Button_ColoredReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Button_Inset"/>
            /// </summary>
            public static int Widget_Material_Button_Inset { get { if (!_Widget_Material_Button_InsetReady) { _Widget_Material_Button_InsetContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Button_Inset"); _Widget_Material_Button_InsetReady = true; } return _Widget_Material_Button_InsetContent; } }
            private static int _Widget_Material_Button_InsetContent = default;
            private static bool _Widget_Material_Button_InsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Button_Small"/>
            /// </summary>
            public static int Widget_Material_Button_Small { get { if (!_Widget_Material_Button_SmallReady) { _Widget_Material_Button_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Button_Small"); _Widget_Material_Button_SmallReady = true; } return _Widget_Material_Button_SmallContent; } }
            private static int _Widget_Material_Button_SmallContent = default;
            private static bool _Widget_Material_Button_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Button_Toggle"/>
            /// </summary>
            public static int Widget_Material_Button_Toggle { get { if (!_Widget_Material_Button_ToggleReady) { _Widget_Material_Button_ToggleContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Button_Toggle"); _Widget_Material_Button_ToggleReady = true; } return _Widget_Material_Button_ToggleContent; } }
            private static int _Widget_Material_Button_ToggleContent = default;
            private static bool _Widget_Material_Button_ToggleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ButtonBar"/>
            /// </summary>
            public static int Widget_Material_ButtonBar { get { if (!_Widget_Material_ButtonBarReady) { _Widget_Material_ButtonBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ButtonBar"); _Widget_Material_ButtonBarReady = true; } return _Widget_Material_ButtonBarContent; } }
            private static int _Widget_Material_ButtonBarContent = default;
            private static bool _Widget_Material_ButtonBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ButtonBar_AlertDialog"/>
            /// </summary>
            public static int Widget_Material_ButtonBar_AlertDialog { get { if (!_Widget_Material_ButtonBar_AlertDialogReady) { _Widget_Material_ButtonBar_AlertDialogContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ButtonBar_AlertDialog"); _Widget_Material_ButtonBar_AlertDialogReady = true; } return _Widget_Material_ButtonBar_AlertDialogContent; } }
            private static int _Widget_Material_ButtonBar_AlertDialogContent = default;
            private static bool _Widget_Material_ButtonBar_AlertDialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_CalendarView"/>
            /// </summary>
            public static int Widget_Material_CalendarView { get { if (!_Widget_Material_CalendarViewReady) { _Widget_Material_CalendarViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_CalendarView"); _Widget_Material_CalendarViewReady = true; } return _Widget_Material_CalendarViewContent; } }
            private static int _Widget_Material_CalendarViewContent = default;
            private static bool _Widget_Material_CalendarViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_CheckedTextView"/>
            /// </summary>
            public static int Widget_Material_CheckedTextView { get { if (!_Widget_Material_CheckedTextViewReady) { _Widget_Material_CheckedTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_CheckedTextView"); _Widget_Material_CheckedTextViewReady = true; } return _Widget_Material_CheckedTextViewContent; } }
            private static int _Widget_Material_CheckedTextViewContent = default;
            private static bool _Widget_Material_CheckedTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_CompoundButton_CheckBox"/>
            /// </summary>
            public static int Widget_Material_CompoundButton_CheckBox { get { if (!_Widget_Material_CompoundButton_CheckBoxReady) { _Widget_Material_CompoundButton_CheckBoxContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_CompoundButton_CheckBox"); _Widget_Material_CompoundButton_CheckBoxReady = true; } return _Widget_Material_CompoundButton_CheckBoxContent; } }
            private static int _Widget_Material_CompoundButton_CheckBoxContent = default;
            private static bool _Widget_Material_CompoundButton_CheckBoxReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_CompoundButton_RadioButton"/>
            /// </summary>
            public static int Widget_Material_CompoundButton_RadioButton { get { if (!_Widget_Material_CompoundButton_RadioButtonReady) { _Widget_Material_CompoundButton_RadioButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_CompoundButton_RadioButton"); _Widget_Material_CompoundButton_RadioButtonReady = true; } return _Widget_Material_CompoundButton_RadioButtonContent; } }
            private static int _Widget_Material_CompoundButton_RadioButtonContent = default;
            private static bool _Widget_Material_CompoundButton_RadioButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_CompoundButton_Star"/>
            /// </summary>
            public static int Widget_Material_CompoundButton_Star { get { if (!_Widget_Material_CompoundButton_StarReady) { _Widget_Material_CompoundButton_StarContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_CompoundButton_Star"); _Widget_Material_CompoundButton_StarReady = true; } return _Widget_Material_CompoundButton_StarContent; } }
            private static int _Widget_Material_CompoundButton_StarContent = default;
            private static bool _Widget_Material_CompoundButton_StarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_CompoundButton_Switch"/>
            /// </summary>
            public static int Widget_Material_CompoundButton_Switch { get { if (!_Widget_Material_CompoundButton_SwitchReady) { _Widget_Material_CompoundButton_SwitchContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_CompoundButton_Switch"); _Widget_Material_CompoundButton_SwitchReady = true; } return _Widget_Material_CompoundButton_SwitchContent; } }
            private static int _Widget_Material_CompoundButton_SwitchContent = default;
            private static bool _Widget_Material_CompoundButton_SwitchReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_DatePicker"/>
            /// </summary>
            public static int Widget_Material_DatePicker { get { if (!_Widget_Material_DatePickerReady) { _Widget_Material_DatePickerContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_DatePicker"); _Widget_Material_DatePickerReady = true; } return _Widget_Material_DatePickerContent; } }
            private static int _Widget_Material_DatePickerContent = default;
            private static bool _Widget_Material_DatePickerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_DropDownItem"/>
            /// </summary>
            public static int Widget_Material_DropDownItem { get { if (!_Widget_Material_DropDownItemReady) { _Widget_Material_DropDownItemContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_DropDownItem"); _Widget_Material_DropDownItemReady = true; } return _Widget_Material_DropDownItemContent; } }
            private static int _Widget_Material_DropDownItemContent = default;
            private static bool _Widget_Material_DropDownItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_DropDownItem_Spinner"/>
            /// </summary>
            public static int Widget_Material_DropDownItem_Spinner { get { if (!_Widget_Material_DropDownItem_SpinnerReady) { _Widget_Material_DropDownItem_SpinnerContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_DropDownItem_Spinner"); _Widget_Material_DropDownItem_SpinnerReady = true; } return _Widget_Material_DropDownItem_SpinnerContent; } }
            private static int _Widget_Material_DropDownItem_SpinnerContent = default;
            private static bool _Widget_Material_DropDownItem_SpinnerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_EditText"/>
            /// </summary>
            public static int Widget_Material_EditText { get { if (!_Widget_Material_EditTextReady) { _Widget_Material_EditTextContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_EditText"); _Widget_Material_EditTextReady = true; } return _Widget_Material_EditTextContent; } }
            private static int _Widget_Material_EditTextContent = default;
            private static bool _Widget_Material_EditTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ExpandableListView"/>
            /// </summary>
            public static int Widget_Material_ExpandableListView { get { if (!_Widget_Material_ExpandableListViewReady) { _Widget_Material_ExpandableListViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ExpandableListView"); _Widget_Material_ExpandableListViewReady = true; } return _Widget_Material_ExpandableListViewContent; } }
            private static int _Widget_Material_ExpandableListViewContent = default;
            private static bool _Widget_Material_ExpandableListViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_FastScroll"/>
            /// </summary>
            public static int Widget_Material_FastScroll { get { if (!_Widget_Material_FastScrollReady) { _Widget_Material_FastScrollContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_FastScroll"); _Widget_Material_FastScrollReady = true; } return _Widget_Material_FastScrollContent; } }
            private static int _Widget_Material_FastScrollContent = default;
            private static bool _Widget_Material_FastScrollReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_GridView"/>
            /// </summary>
            public static int Widget_Material_GridView { get { if (!_Widget_Material_GridViewReady) { _Widget_Material_GridViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_GridView"); _Widget_Material_GridViewReady = true; } return _Widget_Material_GridViewContent; } }
            private static int _Widget_Material_GridViewContent = default;
            private static bool _Widget_Material_GridViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_HorizontalScrollView"/>
            /// </summary>
            public static int Widget_Material_HorizontalScrollView { get { if (!_Widget_Material_HorizontalScrollViewReady) { _Widget_Material_HorizontalScrollViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_HorizontalScrollView"); _Widget_Material_HorizontalScrollViewReady = true; } return _Widget_Material_HorizontalScrollViewContent; } }
            private static int _Widget_Material_HorizontalScrollViewContent = default;
            private static bool _Widget_Material_HorizontalScrollViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ImageButton"/>
            /// </summary>
            public static int Widget_Material_ImageButton { get { if (!_Widget_Material_ImageButtonReady) { _Widget_Material_ImageButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ImageButton"); _Widget_Material_ImageButtonReady = true; } return _Widget_Material_ImageButtonContent; } }
            private static int _Widget_Material_ImageButtonContent = default;
            private static bool _Widget_Material_ImageButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light"/>
            /// </summary>
            public static int Widget_Material_Light { get { if (!_Widget_Material_LightReady) { _Widget_Material_LightContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light"); _Widget_Material_LightReady = true; } return _Widget_Material_LightContent; } }
            private static int _Widget_Material_LightContent = default;
            private static bool _Widget_Material_LightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ActionBar"/>
            /// </summary>
            public static int Widget_Material_Light_ActionBar { get { if (!_Widget_Material_Light_ActionBarReady) { _Widget_Material_Light_ActionBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ActionBar"); _Widget_Material_Light_ActionBarReady = true; } return _Widget_Material_Light_ActionBarContent; } }
            private static int _Widget_Material_Light_ActionBarContent = default;
            private static bool _Widget_Material_Light_ActionBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ActionBar_Solid"/>
            /// </summary>
            public static int Widget_Material_Light_ActionBar_Solid { get { if (!_Widget_Material_Light_ActionBar_SolidReady) { _Widget_Material_Light_ActionBar_SolidContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ActionBar_Solid"); _Widget_Material_Light_ActionBar_SolidReady = true; } return _Widget_Material_Light_ActionBar_SolidContent; } }
            private static int _Widget_Material_Light_ActionBar_SolidContent = default;
            private static bool _Widget_Material_Light_ActionBar_SolidReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ActionBar_TabBar"/>
            /// </summary>
            public static int Widget_Material_Light_ActionBar_TabBar { get { if (!_Widget_Material_Light_ActionBar_TabBarReady) { _Widget_Material_Light_ActionBar_TabBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ActionBar_TabBar"); _Widget_Material_Light_ActionBar_TabBarReady = true; } return _Widget_Material_Light_ActionBar_TabBarContent; } }
            private static int _Widget_Material_Light_ActionBar_TabBarContent = default;
            private static bool _Widget_Material_Light_ActionBar_TabBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ActionBar_TabText"/>
            /// </summary>
            public static int Widget_Material_Light_ActionBar_TabText { get { if (!_Widget_Material_Light_ActionBar_TabTextReady) { _Widget_Material_Light_ActionBar_TabTextContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ActionBar_TabText"); _Widget_Material_Light_ActionBar_TabTextReady = true; } return _Widget_Material_Light_ActionBar_TabTextContent; } }
            private static int _Widget_Material_Light_ActionBar_TabTextContent = default;
            private static bool _Widget_Material_Light_ActionBar_TabTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ActionBar_TabView"/>
            /// </summary>
            public static int Widget_Material_Light_ActionBar_TabView { get { if (!_Widget_Material_Light_ActionBar_TabViewReady) { _Widget_Material_Light_ActionBar_TabViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ActionBar_TabView"); _Widget_Material_Light_ActionBar_TabViewReady = true; } return _Widget_Material_Light_ActionBar_TabViewContent; } }
            private static int _Widget_Material_Light_ActionBar_TabViewContent = default;
            private static bool _Widget_Material_Light_ActionBar_TabViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ActionButton"/>
            /// </summary>
            public static int Widget_Material_Light_ActionButton { get { if (!_Widget_Material_Light_ActionButtonReady) { _Widget_Material_Light_ActionButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ActionButton"); _Widget_Material_Light_ActionButtonReady = true; } return _Widget_Material_Light_ActionButtonContent; } }
            private static int _Widget_Material_Light_ActionButtonContent = default;
            private static bool _Widget_Material_Light_ActionButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ActionButton_CloseMode"/>
            /// </summary>
            public static int Widget_Material_Light_ActionButton_CloseMode { get { if (!_Widget_Material_Light_ActionButton_CloseModeReady) { _Widget_Material_Light_ActionButton_CloseModeContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ActionButton_CloseMode"); _Widget_Material_Light_ActionButton_CloseModeReady = true; } return _Widget_Material_Light_ActionButton_CloseModeContent; } }
            private static int _Widget_Material_Light_ActionButton_CloseModeContent = default;
            private static bool _Widget_Material_Light_ActionButton_CloseModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ActionButton_Overflow"/>
            /// </summary>
            public static int Widget_Material_Light_ActionButton_Overflow { get { if (!_Widget_Material_Light_ActionButton_OverflowReady) { _Widget_Material_Light_ActionButton_OverflowContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ActionButton_Overflow"); _Widget_Material_Light_ActionButton_OverflowReady = true; } return _Widget_Material_Light_ActionButton_OverflowContent; } }
            private static int _Widget_Material_Light_ActionButton_OverflowContent = default;
            private static bool _Widget_Material_Light_ActionButton_OverflowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ActionMode"/>
            /// </summary>
            public static int Widget_Material_Light_ActionMode { get { if (!_Widget_Material_Light_ActionModeReady) { _Widget_Material_Light_ActionModeContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ActionMode"); _Widget_Material_Light_ActionModeReady = true; } return _Widget_Material_Light_ActionModeContent; } }
            private static int _Widget_Material_Light_ActionModeContent = default;
            private static bool _Widget_Material_Light_ActionModeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_AutoCompleteTextView"/>
            /// </summary>
            public static int Widget_Material_Light_AutoCompleteTextView { get { if (!_Widget_Material_Light_AutoCompleteTextViewReady) { _Widget_Material_Light_AutoCompleteTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_AutoCompleteTextView"); _Widget_Material_Light_AutoCompleteTextViewReady = true; } return _Widget_Material_Light_AutoCompleteTextViewContent; } }
            private static int _Widget_Material_Light_AutoCompleteTextViewContent = default;
            private static bool _Widget_Material_Light_AutoCompleteTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_Button"/>
            /// </summary>
            public static int Widget_Material_Light_Button { get { if (!_Widget_Material_Light_ButtonReady) { _Widget_Material_Light_ButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_Button"); _Widget_Material_Light_ButtonReady = true; } return _Widget_Material_Light_ButtonContent; } }
            private static int _Widget_Material_Light_ButtonContent = default;
            private static bool _Widget_Material_Light_ButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_Button_Borderless"/>
            /// </summary>
            public static int Widget_Material_Light_Button_Borderless { get { if (!_Widget_Material_Light_Button_BorderlessReady) { _Widget_Material_Light_Button_BorderlessContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_Button_Borderless"); _Widget_Material_Light_Button_BorderlessReady = true; } return _Widget_Material_Light_Button_BorderlessContent; } }
            private static int _Widget_Material_Light_Button_BorderlessContent = default;
            private static bool _Widget_Material_Light_Button_BorderlessReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_Button_Borderless_Colored"/>
            /// </summary>
            public static int Widget_Material_Light_Button_Borderless_Colored { get { if (!_Widget_Material_Light_Button_Borderless_ColoredReady) { _Widget_Material_Light_Button_Borderless_ColoredContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_Button_Borderless_Colored"); _Widget_Material_Light_Button_Borderless_ColoredReady = true; } return _Widget_Material_Light_Button_Borderless_ColoredContent; } }
            private static int _Widget_Material_Light_Button_Borderless_ColoredContent = default;
            private static bool _Widget_Material_Light_Button_Borderless_ColoredReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_Button_Borderless_Small"/>
            /// </summary>
            public static int Widget_Material_Light_Button_Borderless_Small { get { if (!_Widget_Material_Light_Button_Borderless_SmallReady) { _Widget_Material_Light_Button_Borderless_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_Button_Borderless_Small"); _Widget_Material_Light_Button_Borderless_SmallReady = true; } return _Widget_Material_Light_Button_Borderless_SmallContent; } }
            private static int _Widget_Material_Light_Button_Borderless_SmallContent = default;
            private static bool _Widget_Material_Light_Button_Borderless_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_Button_Inset"/>
            /// </summary>
            public static int Widget_Material_Light_Button_Inset { get { if (!_Widget_Material_Light_Button_InsetReady) { _Widget_Material_Light_Button_InsetContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_Button_Inset"); _Widget_Material_Light_Button_InsetReady = true; } return _Widget_Material_Light_Button_InsetContent; } }
            private static int _Widget_Material_Light_Button_InsetContent = default;
            private static bool _Widget_Material_Light_Button_InsetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_Button_Small"/>
            /// </summary>
            public static int Widget_Material_Light_Button_Small { get { if (!_Widget_Material_Light_Button_SmallReady) { _Widget_Material_Light_Button_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_Button_Small"); _Widget_Material_Light_Button_SmallReady = true; } return _Widget_Material_Light_Button_SmallContent; } }
            private static int _Widget_Material_Light_Button_SmallContent = default;
            private static bool _Widget_Material_Light_Button_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_Button_Toggle"/>
            /// </summary>
            public static int Widget_Material_Light_Button_Toggle { get { if (!_Widget_Material_Light_Button_ToggleReady) { _Widget_Material_Light_Button_ToggleContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_Button_Toggle"); _Widget_Material_Light_Button_ToggleReady = true; } return _Widget_Material_Light_Button_ToggleContent; } }
            private static int _Widget_Material_Light_Button_ToggleContent = default;
            private static bool _Widget_Material_Light_Button_ToggleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ButtonBar"/>
            /// </summary>
            public static int Widget_Material_Light_ButtonBar { get { if (!_Widget_Material_Light_ButtonBarReady) { _Widget_Material_Light_ButtonBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ButtonBar"); _Widget_Material_Light_ButtonBarReady = true; } return _Widget_Material_Light_ButtonBarContent; } }
            private static int _Widget_Material_Light_ButtonBarContent = default;
            private static bool _Widget_Material_Light_ButtonBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ButtonBar_AlertDialog"/>
            /// </summary>
            public static int Widget_Material_Light_ButtonBar_AlertDialog { get { if (!_Widget_Material_Light_ButtonBar_AlertDialogReady) { _Widget_Material_Light_ButtonBar_AlertDialogContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ButtonBar_AlertDialog"); _Widget_Material_Light_ButtonBar_AlertDialogReady = true; } return _Widget_Material_Light_ButtonBar_AlertDialogContent; } }
            private static int _Widget_Material_Light_ButtonBar_AlertDialogContent = default;
            private static bool _Widget_Material_Light_ButtonBar_AlertDialogReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_CalendarView"/>
            /// </summary>
            public static int Widget_Material_Light_CalendarView { get { if (!_Widget_Material_Light_CalendarViewReady) { _Widget_Material_Light_CalendarViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_CalendarView"); _Widget_Material_Light_CalendarViewReady = true; } return _Widget_Material_Light_CalendarViewContent; } }
            private static int _Widget_Material_Light_CalendarViewContent = default;
            private static bool _Widget_Material_Light_CalendarViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_CheckedTextView"/>
            /// </summary>
            public static int Widget_Material_Light_CheckedTextView { get { if (!_Widget_Material_Light_CheckedTextViewReady) { _Widget_Material_Light_CheckedTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_CheckedTextView"); _Widget_Material_Light_CheckedTextViewReady = true; } return _Widget_Material_Light_CheckedTextViewContent; } }
            private static int _Widget_Material_Light_CheckedTextViewContent = default;
            private static bool _Widget_Material_Light_CheckedTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_CompoundButton_CheckBox"/>
            /// </summary>
            public static int Widget_Material_Light_CompoundButton_CheckBox { get { if (!_Widget_Material_Light_CompoundButton_CheckBoxReady) { _Widget_Material_Light_CompoundButton_CheckBoxContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_CompoundButton_CheckBox"); _Widget_Material_Light_CompoundButton_CheckBoxReady = true; } return _Widget_Material_Light_CompoundButton_CheckBoxContent; } }
            private static int _Widget_Material_Light_CompoundButton_CheckBoxContent = default;
            private static bool _Widget_Material_Light_CompoundButton_CheckBoxReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_CompoundButton_RadioButton"/>
            /// </summary>
            public static int Widget_Material_Light_CompoundButton_RadioButton { get { if (!_Widget_Material_Light_CompoundButton_RadioButtonReady) { _Widget_Material_Light_CompoundButton_RadioButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_CompoundButton_RadioButton"); _Widget_Material_Light_CompoundButton_RadioButtonReady = true; } return _Widget_Material_Light_CompoundButton_RadioButtonContent; } }
            private static int _Widget_Material_Light_CompoundButton_RadioButtonContent = default;
            private static bool _Widget_Material_Light_CompoundButton_RadioButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_CompoundButton_Star"/>
            /// </summary>
            public static int Widget_Material_Light_CompoundButton_Star { get { if (!_Widget_Material_Light_CompoundButton_StarReady) { _Widget_Material_Light_CompoundButton_StarContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_CompoundButton_Star"); _Widget_Material_Light_CompoundButton_StarReady = true; } return _Widget_Material_Light_CompoundButton_StarContent; } }
            private static int _Widget_Material_Light_CompoundButton_StarContent = default;
            private static bool _Widget_Material_Light_CompoundButton_StarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_CompoundButton_Switch"/>
            /// </summary>
            public static int Widget_Material_Light_CompoundButton_Switch { get { if (!_Widget_Material_Light_CompoundButton_SwitchReady) { _Widget_Material_Light_CompoundButton_SwitchContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_CompoundButton_Switch"); _Widget_Material_Light_CompoundButton_SwitchReady = true; } return _Widget_Material_Light_CompoundButton_SwitchContent; } }
            private static int _Widget_Material_Light_CompoundButton_SwitchContent = default;
            private static bool _Widget_Material_Light_CompoundButton_SwitchReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_DatePicker"/>
            /// </summary>
            public static int Widget_Material_Light_DatePicker { get { if (!_Widget_Material_Light_DatePickerReady) { _Widget_Material_Light_DatePickerContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_DatePicker"); _Widget_Material_Light_DatePickerReady = true; } return _Widget_Material_Light_DatePickerContent; } }
            private static int _Widget_Material_Light_DatePickerContent = default;
            private static bool _Widget_Material_Light_DatePickerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_DropDownItem"/>
            /// </summary>
            public static int Widget_Material_Light_DropDownItem { get { if (!_Widget_Material_Light_DropDownItemReady) { _Widget_Material_Light_DropDownItemContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_DropDownItem"); _Widget_Material_Light_DropDownItemReady = true; } return _Widget_Material_Light_DropDownItemContent; } }
            private static int _Widget_Material_Light_DropDownItemContent = default;
            private static bool _Widget_Material_Light_DropDownItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_DropDownItem_Spinner"/>
            /// </summary>
            public static int Widget_Material_Light_DropDownItem_Spinner { get { if (!_Widget_Material_Light_DropDownItem_SpinnerReady) { _Widget_Material_Light_DropDownItem_SpinnerContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_DropDownItem_Spinner"); _Widget_Material_Light_DropDownItem_SpinnerReady = true; } return _Widget_Material_Light_DropDownItem_SpinnerContent; } }
            private static int _Widget_Material_Light_DropDownItem_SpinnerContent = default;
            private static bool _Widget_Material_Light_DropDownItem_SpinnerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_EditText"/>
            /// </summary>
            public static int Widget_Material_Light_EditText { get { if (!_Widget_Material_Light_EditTextReady) { _Widget_Material_Light_EditTextContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_EditText"); _Widget_Material_Light_EditTextReady = true; } return _Widget_Material_Light_EditTextContent; } }
            private static int _Widget_Material_Light_EditTextContent = default;
            private static bool _Widget_Material_Light_EditTextReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ExpandableListView"/>
            /// </summary>
            public static int Widget_Material_Light_ExpandableListView { get { if (!_Widget_Material_Light_ExpandableListViewReady) { _Widget_Material_Light_ExpandableListViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ExpandableListView"); _Widget_Material_Light_ExpandableListViewReady = true; } return _Widget_Material_Light_ExpandableListViewContent; } }
            private static int _Widget_Material_Light_ExpandableListViewContent = default;
            private static bool _Widget_Material_Light_ExpandableListViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_FastScroll"/>
            /// </summary>
            public static int Widget_Material_Light_FastScroll { get { if (!_Widget_Material_Light_FastScrollReady) { _Widget_Material_Light_FastScrollContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_FastScroll"); _Widget_Material_Light_FastScrollReady = true; } return _Widget_Material_Light_FastScrollContent; } }
            private static int _Widget_Material_Light_FastScrollContent = default;
            private static bool _Widget_Material_Light_FastScrollReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_GridView"/>
            /// </summary>
            public static int Widget_Material_Light_GridView { get { if (!_Widget_Material_Light_GridViewReady) { _Widget_Material_Light_GridViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_GridView"); _Widget_Material_Light_GridViewReady = true; } return _Widget_Material_Light_GridViewContent; } }
            private static int _Widget_Material_Light_GridViewContent = default;
            private static bool _Widget_Material_Light_GridViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_HorizontalScrollView"/>
            /// </summary>
            public static int Widget_Material_Light_HorizontalScrollView { get { if (!_Widget_Material_Light_HorizontalScrollViewReady) { _Widget_Material_Light_HorizontalScrollViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_HorizontalScrollView"); _Widget_Material_Light_HorizontalScrollViewReady = true; } return _Widget_Material_Light_HorizontalScrollViewContent; } }
            private static int _Widget_Material_Light_HorizontalScrollViewContent = default;
            private static bool _Widget_Material_Light_HorizontalScrollViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ImageButton"/>
            /// </summary>
            public static int Widget_Material_Light_ImageButton { get { if (!_Widget_Material_Light_ImageButtonReady) { _Widget_Material_Light_ImageButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ImageButton"); _Widget_Material_Light_ImageButtonReady = true; } return _Widget_Material_Light_ImageButtonContent; } }
            private static int _Widget_Material_Light_ImageButtonContent = default;
            private static bool _Widget_Material_Light_ImageButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ListPopupWindow"/>
            /// </summary>
            public static int Widget_Material_Light_ListPopupWindow { get { if (!_Widget_Material_Light_ListPopupWindowReady) { _Widget_Material_Light_ListPopupWindowContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ListPopupWindow"); _Widget_Material_Light_ListPopupWindowReady = true; } return _Widget_Material_Light_ListPopupWindowContent; } }
            private static int _Widget_Material_Light_ListPopupWindowContent = default;
            private static bool _Widget_Material_Light_ListPopupWindowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ListView"/>
            /// </summary>
            public static int Widget_Material_Light_ListView { get { if (!_Widget_Material_Light_ListViewReady) { _Widget_Material_Light_ListViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ListView"); _Widget_Material_Light_ListViewReady = true; } return _Widget_Material_Light_ListViewContent; } }
            private static int _Widget_Material_Light_ListViewContent = default;
            private static bool _Widget_Material_Light_ListViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ListView_DropDown"/>
            /// </summary>
            public static int Widget_Material_Light_ListView_DropDown { get { if (!_Widget_Material_Light_ListView_DropDownReady) { _Widget_Material_Light_ListView_DropDownContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ListView_DropDown"); _Widget_Material_Light_ListView_DropDownReady = true; } return _Widget_Material_Light_ListView_DropDownContent; } }
            private static int _Widget_Material_Light_ListView_DropDownContent = default;
            private static bool _Widget_Material_Light_ListView_DropDownReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_MediaRouteButton"/>
            /// </summary>
            public static int Widget_Material_Light_MediaRouteButton { get { if (!_Widget_Material_Light_MediaRouteButtonReady) { _Widget_Material_Light_MediaRouteButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_MediaRouteButton"); _Widget_Material_Light_MediaRouteButtonReady = true; } return _Widget_Material_Light_MediaRouteButtonContent; } }
            private static int _Widget_Material_Light_MediaRouteButtonContent = default;
            private static bool _Widget_Material_Light_MediaRouteButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_NumberPicker"/>
            /// </summary>
            public static int Widget_Material_Light_NumberPicker { get { if (!_Widget_Material_Light_NumberPickerReady) { _Widget_Material_Light_NumberPickerContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_NumberPicker"); _Widget_Material_Light_NumberPickerReady = true; } return _Widget_Material_Light_NumberPickerContent; } }
            private static int _Widget_Material_Light_NumberPickerContent = default;
            private static bool _Widget_Material_Light_NumberPickerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_PopupMenu"/>
            /// </summary>
            public static int Widget_Material_Light_PopupMenu { get { if (!_Widget_Material_Light_PopupMenuReady) { _Widget_Material_Light_PopupMenuContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_PopupMenu"); _Widget_Material_Light_PopupMenuReady = true; } return _Widget_Material_Light_PopupMenuContent; } }
            private static int _Widget_Material_Light_PopupMenuContent = default;
            private static bool _Widget_Material_Light_PopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_PopupMenu_Overflow"/>
            /// </summary>
            public static int Widget_Material_Light_PopupMenu_Overflow { get { if (!_Widget_Material_Light_PopupMenu_OverflowReady) { _Widget_Material_Light_PopupMenu_OverflowContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_PopupMenu_Overflow"); _Widget_Material_Light_PopupMenu_OverflowReady = true; } return _Widget_Material_Light_PopupMenu_OverflowContent; } }
            private static int _Widget_Material_Light_PopupMenu_OverflowContent = default;
            private static bool _Widget_Material_Light_PopupMenu_OverflowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_PopupWindow"/>
            /// </summary>
            public static int Widget_Material_Light_PopupWindow { get { if (!_Widget_Material_Light_PopupWindowReady) { _Widget_Material_Light_PopupWindowContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_PopupWindow"); _Widget_Material_Light_PopupWindowReady = true; } return _Widget_Material_Light_PopupWindowContent; } }
            private static int _Widget_Material_Light_PopupWindowContent = default;
            private static bool _Widget_Material_Light_PopupWindowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ProgressBar"/>
            /// </summary>
            public static int Widget_Material_Light_ProgressBar { get { if (!_Widget_Material_Light_ProgressBarReady) { _Widget_Material_Light_ProgressBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ProgressBar"); _Widget_Material_Light_ProgressBarReady = true; } return _Widget_Material_Light_ProgressBarContent; } }
            private static int _Widget_Material_Light_ProgressBarContent = default;
            private static bool _Widget_Material_Light_ProgressBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ProgressBar_Horizontal"/>
            /// </summary>
            public static int Widget_Material_Light_ProgressBar_Horizontal { get { if (!_Widget_Material_Light_ProgressBar_HorizontalReady) { _Widget_Material_Light_ProgressBar_HorizontalContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ProgressBar_Horizontal"); _Widget_Material_Light_ProgressBar_HorizontalReady = true; } return _Widget_Material_Light_ProgressBar_HorizontalContent; } }
            private static int _Widget_Material_Light_ProgressBar_HorizontalContent = default;
            private static bool _Widget_Material_Light_ProgressBar_HorizontalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ProgressBar_Inverse"/>
            /// </summary>
            public static int Widget_Material_Light_ProgressBar_Inverse { get { if (!_Widget_Material_Light_ProgressBar_InverseReady) { _Widget_Material_Light_ProgressBar_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ProgressBar_Inverse"); _Widget_Material_Light_ProgressBar_InverseReady = true; } return _Widget_Material_Light_ProgressBar_InverseContent; } }
            private static int _Widget_Material_Light_ProgressBar_InverseContent = default;
            private static bool _Widget_Material_Light_ProgressBar_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ProgressBar_Large"/>
            /// </summary>
            public static int Widget_Material_Light_ProgressBar_Large { get { if (!_Widget_Material_Light_ProgressBar_LargeReady) { _Widget_Material_Light_ProgressBar_LargeContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ProgressBar_Large"); _Widget_Material_Light_ProgressBar_LargeReady = true; } return _Widget_Material_Light_ProgressBar_LargeContent; } }
            private static int _Widget_Material_Light_ProgressBar_LargeContent = default;
            private static bool _Widget_Material_Light_ProgressBar_LargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ProgressBar_Large_Inverse"/>
            /// </summary>
            public static int Widget_Material_Light_ProgressBar_Large_Inverse { get { if (!_Widget_Material_Light_ProgressBar_Large_InverseReady) { _Widget_Material_Light_ProgressBar_Large_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ProgressBar_Large_Inverse"); _Widget_Material_Light_ProgressBar_Large_InverseReady = true; } return _Widget_Material_Light_ProgressBar_Large_InverseContent; } }
            private static int _Widget_Material_Light_ProgressBar_Large_InverseContent = default;
            private static bool _Widget_Material_Light_ProgressBar_Large_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ProgressBar_Small"/>
            /// </summary>
            public static int Widget_Material_Light_ProgressBar_Small { get { if (!_Widget_Material_Light_ProgressBar_SmallReady) { _Widget_Material_Light_ProgressBar_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ProgressBar_Small"); _Widget_Material_Light_ProgressBar_SmallReady = true; } return _Widget_Material_Light_ProgressBar_SmallContent; } }
            private static int _Widget_Material_Light_ProgressBar_SmallContent = default;
            private static bool _Widget_Material_Light_ProgressBar_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ProgressBar_Small_Inverse"/>
            /// </summary>
            public static int Widget_Material_Light_ProgressBar_Small_Inverse { get { if (!_Widget_Material_Light_ProgressBar_Small_InverseReady) { _Widget_Material_Light_ProgressBar_Small_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ProgressBar_Small_Inverse"); _Widget_Material_Light_ProgressBar_Small_InverseReady = true; } return _Widget_Material_Light_ProgressBar_Small_InverseContent; } }
            private static int _Widget_Material_Light_ProgressBar_Small_InverseContent = default;
            private static bool _Widget_Material_Light_ProgressBar_Small_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ProgressBar_Small_Title"/>
            /// </summary>
            public static int Widget_Material_Light_ProgressBar_Small_Title { get { if (!_Widget_Material_Light_ProgressBar_Small_TitleReady) { _Widget_Material_Light_ProgressBar_Small_TitleContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ProgressBar_Small_Title"); _Widget_Material_Light_ProgressBar_Small_TitleReady = true; } return _Widget_Material_Light_ProgressBar_Small_TitleContent; } }
            private static int _Widget_Material_Light_ProgressBar_Small_TitleContent = default;
            private static bool _Widget_Material_Light_ProgressBar_Small_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_RatingBar"/>
            /// </summary>
            public static int Widget_Material_Light_RatingBar { get { if (!_Widget_Material_Light_RatingBarReady) { _Widget_Material_Light_RatingBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_RatingBar"); _Widget_Material_Light_RatingBarReady = true; } return _Widget_Material_Light_RatingBarContent; } }
            private static int _Widget_Material_Light_RatingBarContent = default;
            private static bool _Widget_Material_Light_RatingBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_RatingBar_Indicator"/>
            /// </summary>
            public static int Widget_Material_Light_RatingBar_Indicator { get { if (!_Widget_Material_Light_RatingBar_IndicatorReady) { _Widget_Material_Light_RatingBar_IndicatorContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_RatingBar_Indicator"); _Widget_Material_Light_RatingBar_IndicatorReady = true; } return _Widget_Material_Light_RatingBar_IndicatorContent; } }
            private static int _Widget_Material_Light_RatingBar_IndicatorContent = default;
            private static bool _Widget_Material_Light_RatingBar_IndicatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_RatingBar_Small"/>
            /// </summary>
            public static int Widget_Material_Light_RatingBar_Small { get { if (!_Widget_Material_Light_RatingBar_SmallReady) { _Widget_Material_Light_RatingBar_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_RatingBar_Small"); _Widget_Material_Light_RatingBar_SmallReady = true; } return _Widget_Material_Light_RatingBar_SmallContent; } }
            private static int _Widget_Material_Light_RatingBar_SmallContent = default;
            private static bool _Widget_Material_Light_RatingBar_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_ScrollView"/>
            /// </summary>
            public static int Widget_Material_Light_ScrollView { get { if (!_Widget_Material_Light_ScrollViewReady) { _Widget_Material_Light_ScrollViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_ScrollView"); _Widget_Material_Light_ScrollViewReady = true; } return _Widget_Material_Light_ScrollViewContent; } }
            private static int _Widget_Material_Light_ScrollViewContent = default;
            private static bool _Widget_Material_Light_ScrollViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_SearchView"/>
            /// </summary>
            public static int Widget_Material_Light_SearchView { get { if (!_Widget_Material_Light_SearchViewReady) { _Widget_Material_Light_SearchViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_SearchView"); _Widget_Material_Light_SearchViewReady = true; } return _Widget_Material_Light_SearchViewContent; } }
            private static int _Widget_Material_Light_SearchViewContent = default;
            private static bool _Widget_Material_Light_SearchViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_SeekBar"/>
            /// </summary>
            public static int Widget_Material_Light_SeekBar { get { if (!_Widget_Material_Light_SeekBarReady) { _Widget_Material_Light_SeekBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_SeekBar"); _Widget_Material_Light_SeekBarReady = true; } return _Widget_Material_Light_SeekBarContent; } }
            private static int _Widget_Material_Light_SeekBarContent = default;
            private static bool _Widget_Material_Light_SeekBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_SegmentedButton"/>
            /// </summary>
            public static int Widget_Material_Light_SegmentedButton { get { if (!_Widget_Material_Light_SegmentedButtonReady) { _Widget_Material_Light_SegmentedButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_SegmentedButton"); _Widget_Material_Light_SegmentedButtonReady = true; } return _Widget_Material_Light_SegmentedButtonContent; } }
            private static int _Widget_Material_Light_SegmentedButtonContent = default;
            private static bool _Widget_Material_Light_SegmentedButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_Spinner"/>
            /// </summary>
            public static int Widget_Material_Light_Spinner { get { if (!_Widget_Material_Light_SpinnerReady) { _Widget_Material_Light_SpinnerContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_Spinner"); _Widget_Material_Light_SpinnerReady = true; } return _Widget_Material_Light_SpinnerContent; } }
            private static int _Widget_Material_Light_SpinnerContent = default;
            private static bool _Widget_Material_Light_SpinnerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_Spinner_Underlined"/>
            /// </summary>
            public static int Widget_Material_Light_Spinner_Underlined { get { if (!_Widget_Material_Light_Spinner_UnderlinedReady) { _Widget_Material_Light_Spinner_UnderlinedContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_Spinner_Underlined"); _Widget_Material_Light_Spinner_UnderlinedReady = true; } return _Widget_Material_Light_Spinner_UnderlinedContent; } }
            private static int _Widget_Material_Light_Spinner_UnderlinedContent = default;
            private static bool _Widget_Material_Light_Spinner_UnderlinedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_StackView"/>
            /// </summary>
            public static int Widget_Material_Light_StackView { get { if (!_Widget_Material_Light_StackViewReady) { _Widget_Material_Light_StackViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_StackView"); _Widget_Material_Light_StackViewReady = true; } return _Widget_Material_Light_StackViewContent; } }
            private static int _Widget_Material_Light_StackViewContent = default;
            private static bool _Widget_Material_Light_StackViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_Tab"/>
            /// </summary>
            public static int Widget_Material_Light_Tab { get { if (!_Widget_Material_Light_TabReady) { _Widget_Material_Light_TabContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_Tab"); _Widget_Material_Light_TabReady = true; } return _Widget_Material_Light_TabContent; } }
            private static int _Widget_Material_Light_TabContent = default;
            private static bool _Widget_Material_Light_TabReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_TabWidget"/>
            /// </summary>
            public static int Widget_Material_Light_TabWidget { get { if (!_Widget_Material_Light_TabWidgetReady) { _Widget_Material_Light_TabWidgetContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_TabWidget"); _Widget_Material_Light_TabWidgetReady = true; } return _Widget_Material_Light_TabWidgetContent; } }
            private static int _Widget_Material_Light_TabWidgetContent = default;
            private static bool _Widget_Material_Light_TabWidgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_TextView"/>
            /// </summary>
            public static int Widget_Material_Light_TextView { get { if (!_Widget_Material_Light_TextViewReady) { _Widget_Material_Light_TextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_TextView"); _Widget_Material_Light_TextViewReady = true; } return _Widget_Material_Light_TextViewContent; } }
            private static int _Widget_Material_Light_TextViewContent = default;
            private static bool _Widget_Material_Light_TextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_TextView_SpinnerItem"/>
            /// </summary>
            public static int Widget_Material_Light_TextView_SpinnerItem { get { if (!_Widget_Material_Light_TextView_SpinnerItemReady) { _Widget_Material_Light_TextView_SpinnerItemContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_TextView_SpinnerItem"); _Widget_Material_Light_TextView_SpinnerItemReady = true; } return _Widget_Material_Light_TextView_SpinnerItemContent; } }
            private static int _Widget_Material_Light_TextView_SpinnerItemContent = default;
            private static bool _Widget_Material_Light_TextView_SpinnerItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_TimePicker"/>
            /// </summary>
            public static int Widget_Material_Light_TimePicker { get { if (!_Widget_Material_Light_TimePickerReady) { _Widget_Material_Light_TimePickerContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_TimePicker"); _Widget_Material_Light_TimePickerReady = true; } return _Widget_Material_Light_TimePickerContent; } }
            private static int _Widget_Material_Light_TimePickerContent = default;
            private static bool _Widget_Material_Light_TimePickerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_WebTextView"/>
            /// </summary>
            public static int Widget_Material_Light_WebTextView { get { if (!_Widget_Material_Light_WebTextViewReady) { _Widget_Material_Light_WebTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_WebTextView"); _Widget_Material_Light_WebTextViewReady = true; } return _Widget_Material_Light_WebTextViewContent; } }
            private static int _Widget_Material_Light_WebTextViewContent = default;
            private static bool _Widget_Material_Light_WebTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Light_WebView"/>
            /// </summary>
            public static int Widget_Material_Light_WebView { get { if (!_Widget_Material_Light_WebViewReady) { _Widget_Material_Light_WebViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Light_WebView"); _Widget_Material_Light_WebViewReady = true; } return _Widget_Material_Light_WebViewContent; } }
            private static int _Widget_Material_Light_WebViewContent = default;
            private static bool _Widget_Material_Light_WebViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ListPopupWindow"/>
            /// </summary>
            public static int Widget_Material_ListPopupWindow { get { if (!_Widget_Material_ListPopupWindowReady) { _Widget_Material_ListPopupWindowContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ListPopupWindow"); _Widget_Material_ListPopupWindowReady = true; } return _Widget_Material_ListPopupWindowContent; } }
            private static int _Widget_Material_ListPopupWindowContent = default;
            private static bool _Widget_Material_ListPopupWindowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ListView"/>
            /// </summary>
            public static int Widget_Material_ListView { get { if (!_Widget_Material_ListViewReady) { _Widget_Material_ListViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ListView"); _Widget_Material_ListViewReady = true; } return _Widget_Material_ListViewContent; } }
            private static int _Widget_Material_ListViewContent = default;
            private static bool _Widget_Material_ListViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ListView_DropDown"/>
            /// </summary>
            public static int Widget_Material_ListView_DropDown { get { if (!_Widget_Material_ListView_DropDownReady) { _Widget_Material_ListView_DropDownContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ListView_DropDown"); _Widget_Material_ListView_DropDownReady = true; } return _Widget_Material_ListView_DropDownContent; } }
            private static int _Widget_Material_ListView_DropDownContent = default;
            private static bool _Widget_Material_ListView_DropDownReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_MediaRouteButton"/>
            /// </summary>
            public static int Widget_Material_MediaRouteButton { get { if (!_Widget_Material_MediaRouteButtonReady) { _Widget_Material_MediaRouteButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_MediaRouteButton"); _Widget_Material_MediaRouteButtonReady = true; } return _Widget_Material_MediaRouteButtonContent; } }
            private static int _Widget_Material_MediaRouteButtonContent = default;
            private static bool _Widget_Material_MediaRouteButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_NumberPicker"/>
            /// </summary>
            public static int Widget_Material_NumberPicker { get { if (!_Widget_Material_NumberPickerReady) { _Widget_Material_NumberPickerContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_NumberPicker"); _Widget_Material_NumberPickerReady = true; } return _Widget_Material_NumberPickerContent; } }
            private static int _Widget_Material_NumberPickerContent = default;
            private static bool _Widget_Material_NumberPickerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_PopupMenu"/>
            /// </summary>
            public static int Widget_Material_PopupMenu { get { if (!_Widget_Material_PopupMenuReady) { _Widget_Material_PopupMenuContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_PopupMenu"); _Widget_Material_PopupMenuReady = true; } return _Widget_Material_PopupMenuContent; } }
            private static int _Widget_Material_PopupMenuContent = default;
            private static bool _Widget_Material_PopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_PopupMenu_Overflow"/>
            /// </summary>
            public static int Widget_Material_PopupMenu_Overflow { get { if (!_Widget_Material_PopupMenu_OverflowReady) { _Widget_Material_PopupMenu_OverflowContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_PopupMenu_Overflow"); _Widget_Material_PopupMenu_OverflowReady = true; } return _Widget_Material_PopupMenu_OverflowContent; } }
            private static int _Widget_Material_PopupMenu_OverflowContent = default;
            private static bool _Widget_Material_PopupMenu_OverflowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_PopupWindow"/>
            /// </summary>
            public static int Widget_Material_PopupWindow { get { if (!_Widget_Material_PopupWindowReady) { _Widget_Material_PopupWindowContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_PopupWindow"); _Widget_Material_PopupWindowReady = true; } return _Widget_Material_PopupWindowContent; } }
            private static int _Widget_Material_PopupWindowContent = default;
            private static bool _Widget_Material_PopupWindowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ProgressBar"/>
            /// </summary>
            public static int Widget_Material_ProgressBar { get { if (!_Widget_Material_ProgressBarReady) { _Widget_Material_ProgressBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ProgressBar"); _Widget_Material_ProgressBarReady = true; } return _Widget_Material_ProgressBarContent; } }
            private static int _Widget_Material_ProgressBarContent = default;
            private static bool _Widget_Material_ProgressBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ProgressBar_Horizontal"/>
            /// </summary>
            public static int Widget_Material_ProgressBar_Horizontal { get { if (!_Widget_Material_ProgressBar_HorizontalReady) { _Widget_Material_ProgressBar_HorizontalContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ProgressBar_Horizontal"); _Widget_Material_ProgressBar_HorizontalReady = true; } return _Widget_Material_ProgressBar_HorizontalContent; } }
            private static int _Widget_Material_ProgressBar_HorizontalContent = default;
            private static bool _Widget_Material_ProgressBar_HorizontalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ProgressBar_Large"/>
            /// </summary>
            public static int Widget_Material_ProgressBar_Large { get { if (!_Widget_Material_ProgressBar_LargeReady) { _Widget_Material_ProgressBar_LargeContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ProgressBar_Large"); _Widget_Material_ProgressBar_LargeReady = true; } return _Widget_Material_ProgressBar_LargeContent; } }
            private static int _Widget_Material_ProgressBar_LargeContent = default;
            private static bool _Widget_Material_ProgressBar_LargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ProgressBar_Small"/>
            /// </summary>
            public static int Widget_Material_ProgressBar_Small { get { if (!_Widget_Material_ProgressBar_SmallReady) { _Widget_Material_ProgressBar_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ProgressBar_Small"); _Widget_Material_ProgressBar_SmallReady = true; } return _Widget_Material_ProgressBar_SmallContent; } }
            private static int _Widget_Material_ProgressBar_SmallContent = default;
            private static bool _Widget_Material_ProgressBar_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ProgressBar_Small_Title"/>
            /// </summary>
            public static int Widget_Material_ProgressBar_Small_Title { get { if (!_Widget_Material_ProgressBar_Small_TitleReady) { _Widget_Material_ProgressBar_Small_TitleContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ProgressBar_Small_Title"); _Widget_Material_ProgressBar_Small_TitleReady = true; } return _Widget_Material_ProgressBar_Small_TitleContent; } }
            private static int _Widget_Material_ProgressBar_Small_TitleContent = default;
            private static bool _Widget_Material_ProgressBar_Small_TitleReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_RatingBar"/>
            /// </summary>
            public static int Widget_Material_RatingBar { get { if (!_Widget_Material_RatingBarReady) { _Widget_Material_RatingBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_RatingBar"); _Widget_Material_RatingBarReady = true; } return _Widget_Material_RatingBarContent; } }
            private static int _Widget_Material_RatingBarContent = default;
            private static bool _Widget_Material_RatingBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_RatingBar_Indicator"/>
            /// </summary>
            public static int Widget_Material_RatingBar_Indicator { get { if (!_Widget_Material_RatingBar_IndicatorReady) { _Widget_Material_RatingBar_IndicatorContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_RatingBar_Indicator"); _Widget_Material_RatingBar_IndicatorReady = true; } return _Widget_Material_RatingBar_IndicatorContent; } }
            private static int _Widget_Material_RatingBar_IndicatorContent = default;
            private static bool _Widget_Material_RatingBar_IndicatorReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_RatingBar_Small"/>
            /// </summary>
            public static int Widget_Material_RatingBar_Small { get { if (!_Widget_Material_RatingBar_SmallReady) { _Widget_Material_RatingBar_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_RatingBar_Small"); _Widget_Material_RatingBar_SmallReady = true; } return _Widget_Material_RatingBar_SmallContent; } }
            private static int _Widget_Material_RatingBar_SmallContent = default;
            private static bool _Widget_Material_RatingBar_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_ScrollView"/>
            /// </summary>
            public static int Widget_Material_ScrollView { get { if (!_Widget_Material_ScrollViewReady) { _Widget_Material_ScrollViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_ScrollView"); _Widget_Material_ScrollViewReady = true; } return _Widget_Material_ScrollViewContent; } }
            private static int _Widget_Material_ScrollViewContent = default;
            private static bool _Widget_Material_ScrollViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_SearchView"/>
            /// </summary>
            public static int Widget_Material_SearchView { get { if (!_Widget_Material_SearchViewReady) { _Widget_Material_SearchViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_SearchView"); _Widget_Material_SearchViewReady = true; } return _Widget_Material_SearchViewContent; } }
            private static int _Widget_Material_SearchViewContent = default;
            private static bool _Widget_Material_SearchViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_SeekBar"/>
            /// </summary>
            public static int Widget_Material_SeekBar { get { if (!_Widget_Material_SeekBarReady) { _Widget_Material_SeekBarContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_SeekBar"); _Widget_Material_SeekBarReady = true; } return _Widget_Material_SeekBarContent; } }
            private static int _Widget_Material_SeekBarContent = default;
            private static bool _Widget_Material_SeekBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_SeekBar_Discrete"/>
            /// </summary>
            public static int Widget_Material_SeekBar_Discrete { get { if (!_Widget_Material_SeekBar_DiscreteReady) { _Widget_Material_SeekBar_DiscreteContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_SeekBar_Discrete"); _Widget_Material_SeekBar_DiscreteReady = true; } return _Widget_Material_SeekBar_DiscreteContent; } }
            private static int _Widget_Material_SeekBar_DiscreteContent = default;
            private static bool _Widget_Material_SeekBar_DiscreteReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_SegmentedButton"/>
            /// </summary>
            public static int Widget_Material_SegmentedButton { get { if (!_Widget_Material_SegmentedButtonReady) { _Widget_Material_SegmentedButtonContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_SegmentedButton"); _Widget_Material_SegmentedButtonReady = true; } return _Widget_Material_SegmentedButtonContent; } }
            private static int _Widget_Material_SegmentedButtonContent = default;
            private static bool _Widget_Material_SegmentedButtonReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Spinner"/>
            /// </summary>
            public static int Widget_Material_Spinner { get { if (!_Widget_Material_SpinnerReady) { _Widget_Material_SpinnerContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Spinner"); _Widget_Material_SpinnerReady = true; } return _Widget_Material_SpinnerContent; } }
            private static int _Widget_Material_SpinnerContent = default;
            private static bool _Widget_Material_SpinnerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Spinner_Underlined"/>
            /// </summary>
            public static int Widget_Material_Spinner_Underlined { get { if (!_Widget_Material_Spinner_UnderlinedReady) { _Widget_Material_Spinner_UnderlinedContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Spinner_Underlined"); _Widget_Material_Spinner_UnderlinedReady = true; } return _Widget_Material_Spinner_UnderlinedContent; } }
            private static int _Widget_Material_Spinner_UnderlinedContent = default;
            private static bool _Widget_Material_Spinner_UnderlinedReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_StackView"/>
            /// </summary>
            public static int Widget_Material_StackView { get { if (!_Widget_Material_StackViewReady) { _Widget_Material_StackViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_StackView"); _Widget_Material_StackViewReady = true; } return _Widget_Material_StackViewContent; } }
            private static int _Widget_Material_StackViewContent = default;
            private static bool _Widget_Material_StackViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Tab"/>
            /// </summary>
            public static int Widget_Material_Tab { get { if (!_Widget_Material_TabReady) { _Widget_Material_TabContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Tab"); _Widget_Material_TabReady = true; } return _Widget_Material_TabContent; } }
            private static int _Widget_Material_TabContent = default;
            private static bool _Widget_Material_TabReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_TabWidget"/>
            /// </summary>
            public static int Widget_Material_TabWidget { get { if (!_Widget_Material_TabWidgetReady) { _Widget_Material_TabWidgetContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_TabWidget"); _Widget_Material_TabWidgetReady = true; } return _Widget_Material_TabWidgetContent; } }
            private static int _Widget_Material_TabWidgetContent = default;
            private static bool _Widget_Material_TabWidgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_TextView"/>
            /// </summary>
            public static int Widget_Material_TextView { get { if (!_Widget_Material_TextViewReady) { _Widget_Material_TextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_TextView"); _Widget_Material_TextViewReady = true; } return _Widget_Material_TextViewContent; } }
            private static int _Widget_Material_TextViewContent = default;
            private static bool _Widget_Material_TextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_TextView_SpinnerItem"/>
            /// </summary>
            public static int Widget_Material_TextView_SpinnerItem { get { if (!_Widget_Material_TextView_SpinnerItemReady) { _Widget_Material_TextView_SpinnerItemContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_TextView_SpinnerItem"); _Widget_Material_TextView_SpinnerItemReady = true; } return _Widget_Material_TextView_SpinnerItemContent; } }
            private static int _Widget_Material_TextView_SpinnerItemContent = default;
            private static bool _Widget_Material_TextView_SpinnerItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_TimePicker"/>
            /// </summary>
            public static int Widget_Material_TimePicker { get { if (!_Widget_Material_TimePickerReady) { _Widget_Material_TimePickerContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_TimePicker"); _Widget_Material_TimePickerReady = true; } return _Widget_Material_TimePickerContent; } }
            private static int _Widget_Material_TimePickerContent = default;
            private static bool _Widget_Material_TimePickerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Toolbar"/>
            /// </summary>
            public static int Widget_Material_Toolbar { get { if (!_Widget_Material_ToolbarReady) { _Widget_Material_ToolbarContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Toolbar"); _Widget_Material_ToolbarReady = true; } return _Widget_Material_ToolbarContent; } }
            private static int _Widget_Material_ToolbarContent = default;
            private static bool _Widget_Material_ToolbarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_Toolbar_Button_Navigation"/>
            /// </summary>
            public static int Widget_Material_Toolbar_Button_Navigation { get { if (!_Widget_Material_Toolbar_Button_NavigationReady) { _Widget_Material_Toolbar_Button_NavigationContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_Toolbar_Button_Navigation"); _Widget_Material_Toolbar_Button_NavigationReady = true; } return _Widget_Material_Toolbar_Button_NavigationContent; } }
            private static int _Widget_Material_Toolbar_Button_NavigationContent = default;
            private static bool _Widget_Material_Toolbar_Button_NavigationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_WebTextView"/>
            /// </summary>
            public static int Widget_Material_WebTextView { get { if (!_Widget_Material_WebTextViewReady) { _Widget_Material_WebTextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_WebTextView"); _Widget_Material_WebTextViewReady = true; } return _Widget_Material_WebTextViewContent; } }
            private static int _Widget_Material_WebTextViewContent = default;
            private static bool _Widget_Material_WebTextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Material_WebView"/>
            /// </summary>
            public static int Widget_Material_WebView { get { if (!_Widget_Material_WebViewReady) { _Widget_Material_WebViewContent = SGetField<int>(LocalBridgeClazz, "Widget_Material_WebView"); _Widget_Material_WebViewReady = true; } return _Widget_Material_WebViewContent; } }
            private static int _Widget_Material_WebViewContent = default;
            private static bool _Widget_Material_WebViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_PopupMenu"/>
            /// </summary>
            public static int Widget_PopupMenu { get { if (!_Widget_PopupMenuReady) { _Widget_PopupMenuContent = SGetField<int>(LocalBridgeClazz, "Widget_PopupMenu"); _Widget_PopupMenuReady = true; } return _Widget_PopupMenuContent; } }
            private static int _Widget_PopupMenuContent = default;
            private static bool _Widget_PopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_PopupWindow"/>
            /// </summary>
            public static int Widget_PopupWindow { get { if (!_Widget_PopupWindowReady) { _Widget_PopupWindowContent = SGetField<int>(LocalBridgeClazz, "Widget_PopupWindow"); _Widget_PopupWindowReady = true; } return _Widget_PopupWindowContent; } }
            private static int _Widget_PopupWindowContent = default;
            private static bool _Widget_PopupWindowReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ProgressBar"/>
            /// </summary>
            public static int Widget_ProgressBar { get { if (!_Widget_ProgressBarReady) { _Widget_ProgressBarContent = SGetField<int>(LocalBridgeClazz, "Widget_ProgressBar"); _Widget_ProgressBarReady = true; } return _Widget_ProgressBarContent; } }
            private static int _Widget_ProgressBarContent = default;
            private static bool _Widget_ProgressBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ProgressBar_Horizontal"/>
            /// </summary>
            public static int Widget_ProgressBar_Horizontal { get { if (!_Widget_ProgressBar_HorizontalReady) { _Widget_ProgressBar_HorizontalContent = SGetField<int>(LocalBridgeClazz, "Widget_ProgressBar_Horizontal"); _Widget_ProgressBar_HorizontalReady = true; } return _Widget_ProgressBar_HorizontalContent; } }
            private static int _Widget_ProgressBar_HorizontalContent = default;
            private static bool _Widget_ProgressBar_HorizontalReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ProgressBar_Inverse"/>
            /// </summary>
            public static int Widget_ProgressBar_Inverse { get { if (!_Widget_ProgressBar_InverseReady) { _Widget_ProgressBar_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_ProgressBar_Inverse"); _Widget_ProgressBar_InverseReady = true; } return _Widget_ProgressBar_InverseContent; } }
            private static int _Widget_ProgressBar_InverseContent = default;
            private static bool _Widget_ProgressBar_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ProgressBar_Large"/>
            /// </summary>
            public static int Widget_ProgressBar_Large { get { if (!_Widget_ProgressBar_LargeReady) { _Widget_ProgressBar_LargeContent = SGetField<int>(LocalBridgeClazz, "Widget_ProgressBar_Large"); _Widget_ProgressBar_LargeReady = true; } return _Widget_ProgressBar_LargeContent; } }
            private static int _Widget_ProgressBar_LargeContent = default;
            private static bool _Widget_ProgressBar_LargeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ProgressBar_Large_Inverse"/>
            /// </summary>
            public static int Widget_ProgressBar_Large_Inverse { get { if (!_Widget_ProgressBar_Large_InverseReady) { _Widget_ProgressBar_Large_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_ProgressBar_Large_Inverse"); _Widget_ProgressBar_Large_InverseReady = true; } return _Widget_ProgressBar_Large_InverseContent; } }
            private static int _Widget_ProgressBar_Large_InverseContent = default;
            private static bool _Widget_ProgressBar_Large_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ProgressBar_Small"/>
            /// </summary>
            public static int Widget_ProgressBar_Small { get { if (!_Widget_ProgressBar_SmallReady) { _Widget_ProgressBar_SmallContent = SGetField<int>(LocalBridgeClazz, "Widget_ProgressBar_Small"); _Widget_ProgressBar_SmallReady = true; } return _Widget_ProgressBar_SmallContent; } }
            private static int _Widget_ProgressBar_SmallContent = default;
            private static bool _Widget_ProgressBar_SmallReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ProgressBar_Small_Inverse"/>
            /// </summary>
            public static int Widget_ProgressBar_Small_Inverse { get { if (!_Widget_ProgressBar_Small_InverseReady) { _Widget_ProgressBar_Small_InverseContent = SGetField<int>(LocalBridgeClazz, "Widget_ProgressBar_Small_Inverse"); _Widget_ProgressBar_Small_InverseReady = true; } return _Widget_ProgressBar_Small_InverseContent; } }
            private static int _Widget_ProgressBar_Small_InverseContent = default;
            private static bool _Widget_ProgressBar_Small_InverseReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_RatingBar"/>
            /// </summary>
            public static int Widget_RatingBar { get { if (!_Widget_RatingBarReady) { _Widget_RatingBarContent = SGetField<int>(LocalBridgeClazz, "Widget_RatingBar"); _Widget_RatingBarReady = true; } return _Widget_RatingBarContent; } }
            private static int _Widget_RatingBarContent = default;
            private static bool _Widget_RatingBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_ScrollView"/>
            /// </summary>
            public static int Widget_ScrollView { get { if (!_Widget_ScrollViewReady) { _Widget_ScrollViewContent = SGetField<int>(LocalBridgeClazz, "Widget_ScrollView"); _Widget_ScrollViewReady = true; } return _Widget_ScrollViewContent; } }
            private static int _Widget_ScrollViewContent = default;
            private static bool _Widget_ScrollViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_SeekBar"/>
            /// </summary>
            public static int Widget_SeekBar { get { if (!_Widget_SeekBarReady) { _Widget_SeekBarContent = SGetField<int>(LocalBridgeClazz, "Widget_SeekBar"); _Widget_SeekBarReady = true; } return _Widget_SeekBarContent; } }
            private static int _Widget_SeekBarContent = default;
            private static bool _Widget_SeekBarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Spinner"/>
            /// </summary>
            public static int Widget_Spinner { get { if (!_Widget_SpinnerReady) { _Widget_SpinnerContent = SGetField<int>(LocalBridgeClazz, "Widget_Spinner"); _Widget_SpinnerReady = true; } return _Widget_SpinnerContent; } }
            private static int _Widget_SpinnerContent = default;
            private static bool _Widget_SpinnerReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Spinner_DropDown"/>
            /// </summary>
            public static int Widget_Spinner_DropDown { get { if (!_Widget_Spinner_DropDownReady) { _Widget_Spinner_DropDownContent = SGetField<int>(LocalBridgeClazz, "Widget_Spinner_DropDown"); _Widget_Spinner_DropDownReady = true; } return _Widget_Spinner_DropDownContent; } }
            private static int _Widget_Spinner_DropDownContent = default;
            private static bool _Widget_Spinner_DropDownReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_StackView"/>
            /// </summary>
            public static int Widget_StackView { get { if (!_Widget_StackViewReady) { _Widget_StackViewContent = SGetField<int>(LocalBridgeClazz, "Widget_StackView"); _Widget_StackViewReady = true; } return _Widget_StackViewContent; } }
            private static int _Widget_StackViewContent = default;
            private static bool _Widget_StackViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_TabWidget"/>
            /// </summary>
            public static int Widget_TabWidget { get { if (!_Widget_TabWidgetReady) { _Widget_TabWidgetContent = SGetField<int>(LocalBridgeClazz, "Widget_TabWidget"); _Widget_TabWidgetReady = true; } return _Widget_TabWidgetContent; } }
            private static int _Widget_TabWidgetContent = default;
            private static bool _Widget_TabWidgetReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_TextView"/>
            /// </summary>
            public static int Widget_TextView { get { if (!_Widget_TextViewReady) { _Widget_TextViewContent = SGetField<int>(LocalBridgeClazz, "Widget_TextView"); _Widget_TextViewReady = true; } return _Widget_TextViewContent; } }
            private static int _Widget_TextViewContent = default;
            private static bool _Widget_TextViewReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_TextView_PopupMenu"/>
            /// </summary>
            public static int Widget_TextView_PopupMenu { get { if (!_Widget_TextView_PopupMenuReady) { _Widget_TextView_PopupMenuContent = SGetField<int>(LocalBridgeClazz, "Widget_TextView_PopupMenu"); _Widget_TextView_PopupMenuReady = true; } return _Widget_TextView_PopupMenuContent; } }
            private static int _Widget_TextView_PopupMenuContent = default;
            private static bool _Widget_TextView_PopupMenuReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_TextView_SpinnerItem"/>
            /// </summary>
            public static int Widget_TextView_SpinnerItem { get { if (!_Widget_TextView_SpinnerItemReady) { _Widget_TextView_SpinnerItemContent = SGetField<int>(LocalBridgeClazz, "Widget_TextView_SpinnerItem"); _Widget_TextView_SpinnerItemReady = true; } return _Widget_TextView_SpinnerItemContent; } }
            private static int _Widget_TextView_SpinnerItemContent = default;
            private static bool _Widget_TextView_SpinnerItemReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Toolbar"/>
            /// </summary>
            public static int Widget_Toolbar { get { if (!_Widget_ToolbarReady) { _Widget_ToolbarContent = SGetField<int>(LocalBridgeClazz, "Widget_Toolbar"); _Widget_ToolbarReady = true; } return _Widget_ToolbarContent; } }
            private static int _Widget_ToolbarContent = default;
            private static bool _Widget_ToolbarReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_Toolbar_Button_Navigation"/>
            /// </summary>
            public static int Widget_Toolbar_Button_Navigation { get { if (!_Widget_Toolbar_Button_NavigationReady) { _Widget_Toolbar_Button_NavigationContent = SGetField<int>(LocalBridgeClazz, "Widget_Toolbar_Button_Navigation"); _Widget_Toolbar_Button_NavigationReady = true; } return _Widget_Toolbar_Button_NavigationContent; } }
            private static int _Widget_Toolbar_Button_NavigationContent = default;
            private static bool _Widget_Toolbar_Button_NavigationReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.style.html#Widget_WebView"/>
            /// </summary>
            public static int Widget_WebView { get { if (!_Widget_WebViewReady) { _Widget_WebViewContent = SGetField<int>(LocalBridgeClazz, "Widget_WebView"); _Widget_WebViewReady = true; } return _Widget_WebViewContent; } }
            private static int _Widget_WebViewContent = default;
            private static bool _Widget_WebViewReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region transition
        public partial class transition
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.transition.html#explode"/>
            /// </summary>
            public static int explode { get { if (!_explodeReady) { _explodeContent = SGetField<int>(LocalBridgeClazz, "explode"); _explodeReady = true; } return _explodeContent; } }
            private static int _explodeContent = default;
            private static bool _explodeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.transition.html#fade"/>
            /// </summary>
            public static int fade { get { if (!_fadeReady) { _fadeContent = SGetField<int>(LocalBridgeClazz, "fade"); _fadeReady = true; } return _fadeContent; } }
            private static int _fadeContent = default;
            private static bool _fadeReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.transition.html#move"/>
            /// </summary>
            public static int move { get { if (!_moveReady) { _moveContent = SGetField<int>(LocalBridgeClazz, "move"); _moveReady = true; } return _moveContent; } }
            private static int _moveContent = default;
            private static bool _moveReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.transition.html#no_transition"/>
            /// </summary>
            public static int no_transition { get { if (!_no_transitionReady) { _no_transitionContent = SGetField<int>(LocalBridgeClazz, "no_transition"); _no_transitionReady = true; } return _no_transitionContent; } }
            private static int _no_transitionContent = default;
            private static bool _no_transitionReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.transition.html#slide_bottom"/>
            /// </summary>
            public static int slide_bottom { get { if (!_slide_bottomReady) { _slide_bottomContent = SGetField<int>(LocalBridgeClazz, "slide_bottom"); _slide_bottomReady = true; } return _slide_bottomContent; } }
            private static int _slide_bottomContent = default;
            private static bool _slide_bottomReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.transition.html#slide_left"/>
            /// </summary>
            public static int slide_left { get { if (!_slide_leftReady) { _slide_leftContent = SGetField<int>(LocalBridgeClazz, "slide_left"); _slide_leftReady = true; } return _slide_leftContent; } }
            private static int _slide_leftContent = default;
            private static bool _slide_leftReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.transition.html#slide_right"/>
            /// </summary>
            public static int slide_right { get { if (!_slide_rightReady) { _slide_rightContent = SGetField<int>(LocalBridgeClazz, "slide_right"); _slide_rightReady = true; } return _slide_rightContent; } }
            private static int _slide_rightContent = default;
            private static bool _slide_rightReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/R.transition.html#slide_top"/>
            /// </summary>
            public static int slide_top { get { if (!_slide_topReady) { _slide_topContent = SGetField<int>(LocalBridgeClazz, "slide_top"); _slide_topReady = true; } return _slide_topContent; } }
            private static int _slide_topContent = default;
            private static bool _slide_topReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region xml
        public partial class xml
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
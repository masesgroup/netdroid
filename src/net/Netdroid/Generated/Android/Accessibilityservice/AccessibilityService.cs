/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Accessibilityservice
{
    #region AccessibilityService
    public partial class AccessibilityService
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#ERROR_TAKE_SCREENSHOT_INTERNAL_ERROR"/>
        /// </summary>
        public static int ERROR_TAKE_SCREENSHOT_INTERNAL_ERROR { get { if (!_ERROR_TAKE_SCREENSHOT_INTERNAL_ERRORReady) { _ERROR_TAKE_SCREENSHOT_INTERNAL_ERRORContent = SGetField<int>(LocalBridgeClazz, "ERROR_TAKE_SCREENSHOT_INTERNAL_ERROR"); _ERROR_TAKE_SCREENSHOT_INTERNAL_ERRORReady = true; } return _ERROR_TAKE_SCREENSHOT_INTERNAL_ERRORContent; } }
        private static int _ERROR_TAKE_SCREENSHOT_INTERNAL_ERRORContent = default;
        private static bool _ERROR_TAKE_SCREENSHOT_INTERNAL_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#ERROR_TAKE_SCREENSHOT_INTERVAL_TIME_SHORT"/>
        /// </summary>
        public static int ERROR_TAKE_SCREENSHOT_INTERVAL_TIME_SHORT { get { if (!_ERROR_TAKE_SCREENSHOT_INTERVAL_TIME_SHORTReady) { _ERROR_TAKE_SCREENSHOT_INTERVAL_TIME_SHORTContent = SGetField<int>(LocalBridgeClazz, "ERROR_TAKE_SCREENSHOT_INTERVAL_TIME_SHORT"); _ERROR_TAKE_SCREENSHOT_INTERVAL_TIME_SHORTReady = true; } return _ERROR_TAKE_SCREENSHOT_INTERVAL_TIME_SHORTContent; } }
        private static int _ERROR_TAKE_SCREENSHOT_INTERVAL_TIME_SHORTContent = default;
        private static bool _ERROR_TAKE_SCREENSHOT_INTERVAL_TIME_SHORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#ERROR_TAKE_SCREENSHOT_INVALID_DISPLAY"/>
        /// </summary>
        public static int ERROR_TAKE_SCREENSHOT_INVALID_DISPLAY { get { if (!_ERROR_TAKE_SCREENSHOT_INVALID_DISPLAYReady) { _ERROR_TAKE_SCREENSHOT_INVALID_DISPLAYContent = SGetField<int>(LocalBridgeClazz, "ERROR_TAKE_SCREENSHOT_INVALID_DISPLAY"); _ERROR_TAKE_SCREENSHOT_INVALID_DISPLAYReady = true; } return _ERROR_TAKE_SCREENSHOT_INVALID_DISPLAYContent; } }
        private static int _ERROR_TAKE_SCREENSHOT_INVALID_DISPLAYContent = default;
        private static bool _ERROR_TAKE_SCREENSHOT_INVALID_DISPLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#ERROR_TAKE_SCREENSHOT_INVALID_WINDOW"/>
        /// </summary>
        public static int ERROR_TAKE_SCREENSHOT_INVALID_WINDOW { get { if (!_ERROR_TAKE_SCREENSHOT_INVALID_WINDOWReady) { _ERROR_TAKE_SCREENSHOT_INVALID_WINDOWContent = SGetField<int>(LocalBridgeClazz, "ERROR_TAKE_SCREENSHOT_INVALID_WINDOW"); _ERROR_TAKE_SCREENSHOT_INVALID_WINDOWReady = true; } return _ERROR_TAKE_SCREENSHOT_INVALID_WINDOWContent; } }
        private static int _ERROR_TAKE_SCREENSHOT_INVALID_WINDOWContent = default;
        private static bool _ERROR_TAKE_SCREENSHOT_INVALID_WINDOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#ERROR_TAKE_SCREENSHOT_NO_ACCESSIBILITY_ACCESS"/>
        /// </summary>
        public static int ERROR_TAKE_SCREENSHOT_NO_ACCESSIBILITY_ACCESS { get { if (!_ERROR_TAKE_SCREENSHOT_NO_ACCESSIBILITY_ACCESSReady) { _ERROR_TAKE_SCREENSHOT_NO_ACCESSIBILITY_ACCESSContent = SGetField<int>(LocalBridgeClazz, "ERROR_TAKE_SCREENSHOT_NO_ACCESSIBILITY_ACCESS"); _ERROR_TAKE_SCREENSHOT_NO_ACCESSIBILITY_ACCESSReady = true; } return _ERROR_TAKE_SCREENSHOT_NO_ACCESSIBILITY_ACCESSContent; } }
        private static int _ERROR_TAKE_SCREENSHOT_NO_ACCESSIBILITY_ACCESSContent = default;
        private static bool _ERROR_TAKE_SCREENSHOT_NO_ACCESSIBILITY_ACCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#ERROR_TAKE_SCREENSHOT_SECURE_WINDOW"/>
        /// </summary>
        public static int ERROR_TAKE_SCREENSHOT_SECURE_WINDOW { get { if (!_ERROR_TAKE_SCREENSHOT_SECURE_WINDOWReady) { _ERROR_TAKE_SCREENSHOT_SECURE_WINDOWContent = SGetField<int>(LocalBridgeClazz, "ERROR_TAKE_SCREENSHOT_SECURE_WINDOW"); _ERROR_TAKE_SCREENSHOT_SECURE_WINDOWReady = true; } return _ERROR_TAKE_SCREENSHOT_SECURE_WINDOWContent; } }
        private static int _ERROR_TAKE_SCREENSHOT_SECURE_WINDOWContent = default;
        private static bool _ERROR_TAKE_SCREENSHOT_SECURE_WINDOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_2_FINGER_DOUBLE_TAP"/>
        /// </summary>
        public static int GESTURE_2_FINGER_DOUBLE_TAP { get { if (!_GESTURE_2_FINGER_DOUBLE_TAPReady) { _GESTURE_2_FINGER_DOUBLE_TAPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_2_FINGER_DOUBLE_TAP"); _GESTURE_2_FINGER_DOUBLE_TAPReady = true; } return _GESTURE_2_FINGER_DOUBLE_TAPContent; } }
        private static int _GESTURE_2_FINGER_DOUBLE_TAPContent = default;
        private static bool _GESTURE_2_FINGER_DOUBLE_TAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_2_FINGER_DOUBLE_TAP_AND_HOLD"/>
        /// </summary>
        public static int GESTURE_2_FINGER_DOUBLE_TAP_AND_HOLD { get { if (!_GESTURE_2_FINGER_DOUBLE_TAP_AND_HOLDReady) { _GESTURE_2_FINGER_DOUBLE_TAP_AND_HOLDContent = SGetField<int>(LocalBridgeClazz, "GESTURE_2_FINGER_DOUBLE_TAP_AND_HOLD"); _GESTURE_2_FINGER_DOUBLE_TAP_AND_HOLDReady = true; } return _GESTURE_2_FINGER_DOUBLE_TAP_AND_HOLDContent; } }
        private static int _GESTURE_2_FINGER_DOUBLE_TAP_AND_HOLDContent = default;
        private static bool _GESTURE_2_FINGER_DOUBLE_TAP_AND_HOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_2_FINGER_SINGLE_TAP"/>
        /// </summary>
        public static int GESTURE_2_FINGER_SINGLE_TAP { get { if (!_GESTURE_2_FINGER_SINGLE_TAPReady) { _GESTURE_2_FINGER_SINGLE_TAPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_2_FINGER_SINGLE_TAP"); _GESTURE_2_FINGER_SINGLE_TAPReady = true; } return _GESTURE_2_FINGER_SINGLE_TAPContent; } }
        private static int _GESTURE_2_FINGER_SINGLE_TAPContent = default;
        private static bool _GESTURE_2_FINGER_SINGLE_TAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_2_FINGER_SWIPE_DOWN"/>
        /// </summary>
        public static int GESTURE_2_FINGER_SWIPE_DOWN { get { if (!_GESTURE_2_FINGER_SWIPE_DOWNReady) { _GESTURE_2_FINGER_SWIPE_DOWNContent = SGetField<int>(LocalBridgeClazz, "GESTURE_2_FINGER_SWIPE_DOWN"); _GESTURE_2_FINGER_SWIPE_DOWNReady = true; } return _GESTURE_2_FINGER_SWIPE_DOWNContent; } }
        private static int _GESTURE_2_FINGER_SWIPE_DOWNContent = default;
        private static bool _GESTURE_2_FINGER_SWIPE_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_2_FINGER_SWIPE_LEFT"/>
        /// </summary>
        public static int GESTURE_2_FINGER_SWIPE_LEFT { get { if (!_GESTURE_2_FINGER_SWIPE_LEFTReady) { _GESTURE_2_FINGER_SWIPE_LEFTContent = SGetField<int>(LocalBridgeClazz, "GESTURE_2_FINGER_SWIPE_LEFT"); _GESTURE_2_FINGER_SWIPE_LEFTReady = true; } return _GESTURE_2_FINGER_SWIPE_LEFTContent; } }
        private static int _GESTURE_2_FINGER_SWIPE_LEFTContent = default;
        private static bool _GESTURE_2_FINGER_SWIPE_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_2_FINGER_SWIPE_RIGHT"/>
        /// </summary>
        public static int GESTURE_2_FINGER_SWIPE_RIGHT { get { if (!_GESTURE_2_FINGER_SWIPE_RIGHTReady) { _GESTURE_2_FINGER_SWIPE_RIGHTContent = SGetField<int>(LocalBridgeClazz, "GESTURE_2_FINGER_SWIPE_RIGHT"); _GESTURE_2_FINGER_SWIPE_RIGHTReady = true; } return _GESTURE_2_FINGER_SWIPE_RIGHTContent; } }
        private static int _GESTURE_2_FINGER_SWIPE_RIGHTContent = default;
        private static bool _GESTURE_2_FINGER_SWIPE_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_2_FINGER_SWIPE_UP"/>
        /// </summary>
        public static int GESTURE_2_FINGER_SWIPE_UP { get { if (!_GESTURE_2_FINGER_SWIPE_UPReady) { _GESTURE_2_FINGER_SWIPE_UPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_2_FINGER_SWIPE_UP"); _GESTURE_2_FINGER_SWIPE_UPReady = true; } return _GESTURE_2_FINGER_SWIPE_UPContent; } }
        private static int _GESTURE_2_FINGER_SWIPE_UPContent = default;
        private static bool _GESTURE_2_FINGER_SWIPE_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_2_FINGER_TRIPLE_TAP"/>
        /// </summary>
        public static int GESTURE_2_FINGER_TRIPLE_TAP { get { if (!_GESTURE_2_FINGER_TRIPLE_TAPReady) { _GESTURE_2_FINGER_TRIPLE_TAPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_2_FINGER_TRIPLE_TAP"); _GESTURE_2_FINGER_TRIPLE_TAPReady = true; } return _GESTURE_2_FINGER_TRIPLE_TAPContent; } }
        private static int _GESTURE_2_FINGER_TRIPLE_TAPContent = default;
        private static bool _GESTURE_2_FINGER_TRIPLE_TAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_2_FINGER_TRIPLE_TAP_AND_HOLD"/>
        /// </summary>
        public static int GESTURE_2_FINGER_TRIPLE_TAP_AND_HOLD { get { if (!_GESTURE_2_FINGER_TRIPLE_TAP_AND_HOLDReady) { _GESTURE_2_FINGER_TRIPLE_TAP_AND_HOLDContent = SGetField<int>(LocalBridgeClazz, "GESTURE_2_FINGER_TRIPLE_TAP_AND_HOLD"); _GESTURE_2_FINGER_TRIPLE_TAP_AND_HOLDReady = true; } return _GESTURE_2_FINGER_TRIPLE_TAP_AND_HOLDContent; } }
        private static int _GESTURE_2_FINGER_TRIPLE_TAP_AND_HOLDContent = default;
        private static bool _GESTURE_2_FINGER_TRIPLE_TAP_AND_HOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_3_FINGER_DOUBLE_TAP"/>
        /// </summary>
        public static int GESTURE_3_FINGER_DOUBLE_TAP { get { if (!_GESTURE_3_FINGER_DOUBLE_TAPReady) { _GESTURE_3_FINGER_DOUBLE_TAPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_3_FINGER_DOUBLE_TAP"); _GESTURE_3_FINGER_DOUBLE_TAPReady = true; } return _GESTURE_3_FINGER_DOUBLE_TAPContent; } }
        private static int _GESTURE_3_FINGER_DOUBLE_TAPContent = default;
        private static bool _GESTURE_3_FINGER_DOUBLE_TAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_3_FINGER_DOUBLE_TAP_AND_HOLD"/>
        /// </summary>
        public static int GESTURE_3_FINGER_DOUBLE_TAP_AND_HOLD { get { if (!_GESTURE_3_FINGER_DOUBLE_TAP_AND_HOLDReady) { _GESTURE_3_FINGER_DOUBLE_TAP_AND_HOLDContent = SGetField<int>(LocalBridgeClazz, "GESTURE_3_FINGER_DOUBLE_TAP_AND_HOLD"); _GESTURE_3_FINGER_DOUBLE_TAP_AND_HOLDReady = true; } return _GESTURE_3_FINGER_DOUBLE_TAP_AND_HOLDContent; } }
        private static int _GESTURE_3_FINGER_DOUBLE_TAP_AND_HOLDContent = default;
        private static bool _GESTURE_3_FINGER_DOUBLE_TAP_AND_HOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_3_FINGER_SINGLE_TAP"/>
        /// </summary>
        public static int GESTURE_3_FINGER_SINGLE_TAP { get { if (!_GESTURE_3_FINGER_SINGLE_TAPReady) { _GESTURE_3_FINGER_SINGLE_TAPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_3_FINGER_SINGLE_TAP"); _GESTURE_3_FINGER_SINGLE_TAPReady = true; } return _GESTURE_3_FINGER_SINGLE_TAPContent; } }
        private static int _GESTURE_3_FINGER_SINGLE_TAPContent = default;
        private static bool _GESTURE_3_FINGER_SINGLE_TAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_3_FINGER_SINGLE_TAP_AND_HOLD"/>
        /// </summary>
        public static int GESTURE_3_FINGER_SINGLE_TAP_AND_HOLD { get { if (!_GESTURE_3_FINGER_SINGLE_TAP_AND_HOLDReady) { _GESTURE_3_FINGER_SINGLE_TAP_AND_HOLDContent = SGetField<int>(LocalBridgeClazz, "GESTURE_3_FINGER_SINGLE_TAP_AND_HOLD"); _GESTURE_3_FINGER_SINGLE_TAP_AND_HOLDReady = true; } return _GESTURE_3_FINGER_SINGLE_TAP_AND_HOLDContent; } }
        private static int _GESTURE_3_FINGER_SINGLE_TAP_AND_HOLDContent = default;
        private static bool _GESTURE_3_FINGER_SINGLE_TAP_AND_HOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_3_FINGER_SWIPE_DOWN"/>
        /// </summary>
        public static int GESTURE_3_FINGER_SWIPE_DOWN { get { if (!_GESTURE_3_FINGER_SWIPE_DOWNReady) { _GESTURE_3_FINGER_SWIPE_DOWNContent = SGetField<int>(LocalBridgeClazz, "GESTURE_3_FINGER_SWIPE_DOWN"); _GESTURE_3_FINGER_SWIPE_DOWNReady = true; } return _GESTURE_3_FINGER_SWIPE_DOWNContent; } }
        private static int _GESTURE_3_FINGER_SWIPE_DOWNContent = default;
        private static bool _GESTURE_3_FINGER_SWIPE_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_3_FINGER_SWIPE_LEFT"/>
        /// </summary>
        public static int GESTURE_3_FINGER_SWIPE_LEFT { get { if (!_GESTURE_3_FINGER_SWIPE_LEFTReady) { _GESTURE_3_FINGER_SWIPE_LEFTContent = SGetField<int>(LocalBridgeClazz, "GESTURE_3_FINGER_SWIPE_LEFT"); _GESTURE_3_FINGER_SWIPE_LEFTReady = true; } return _GESTURE_3_FINGER_SWIPE_LEFTContent; } }
        private static int _GESTURE_3_FINGER_SWIPE_LEFTContent = default;
        private static bool _GESTURE_3_FINGER_SWIPE_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_3_FINGER_SWIPE_RIGHT"/>
        /// </summary>
        public static int GESTURE_3_FINGER_SWIPE_RIGHT { get { if (!_GESTURE_3_FINGER_SWIPE_RIGHTReady) { _GESTURE_3_FINGER_SWIPE_RIGHTContent = SGetField<int>(LocalBridgeClazz, "GESTURE_3_FINGER_SWIPE_RIGHT"); _GESTURE_3_FINGER_SWIPE_RIGHTReady = true; } return _GESTURE_3_FINGER_SWIPE_RIGHTContent; } }
        private static int _GESTURE_3_FINGER_SWIPE_RIGHTContent = default;
        private static bool _GESTURE_3_FINGER_SWIPE_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_3_FINGER_SWIPE_UP"/>
        /// </summary>
        public static int GESTURE_3_FINGER_SWIPE_UP { get { if (!_GESTURE_3_FINGER_SWIPE_UPReady) { _GESTURE_3_FINGER_SWIPE_UPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_3_FINGER_SWIPE_UP"); _GESTURE_3_FINGER_SWIPE_UPReady = true; } return _GESTURE_3_FINGER_SWIPE_UPContent; } }
        private static int _GESTURE_3_FINGER_SWIPE_UPContent = default;
        private static bool _GESTURE_3_FINGER_SWIPE_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_3_FINGER_TRIPLE_TAP"/>
        /// </summary>
        public static int GESTURE_3_FINGER_TRIPLE_TAP { get { if (!_GESTURE_3_FINGER_TRIPLE_TAPReady) { _GESTURE_3_FINGER_TRIPLE_TAPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_3_FINGER_TRIPLE_TAP"); _GESTURE_3_FINGER_TRIPLE_TAPReady = true; } return _GESTURE_3_FINGER_TRIPLE_TAPContent; } }
        private static int _GESTURE_3_FINGER_TRIPLE_TAPContent = default;
        private static bool _GESTURE_3_FINGER_TRIPLE_TAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_3_FINGER_TRIPLE_TAP_AND_HOLD"/>
        /// </summary>
        public static int GESTURE_3_FINGER_TRIPLE_TAP_AND_HOLD { get { if (!_GESTURE_3_FINGER_TRIPLE_TAP_AND_HOLDReady) { _GESTURE_3_FINGER_TRIPLE_TAP_AND_HOLDContent = SGetField<int>(LocalBridgeClazz, "GESTURE_3_FINGER_TRIPLE_TAP_AND_HOLD"); _GESTURE_3_FINGER_TRIPLE_TAP_AND_HOLDReady = true; } return _GESTURE_3_FINGER_TRIPLE_TAP_AND_HOLDContent; } }
        private static int _GESTURE_3_FINGER_TRIPLE_TAP_AND_HOLDContent = default;
        private static bool _GESTURE_3_FINGER_TRIPLE_TAP_AND_HOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_4_FINGER_DOUBLE_TAP"/>
        /// </summary>
        public static int GESTURE_4_FINGER_DOUBLE_TAP { get { if (!_GESTURE_4_FINGER_DOUBLE_TAPReady) { _GESTURE_4_FINGER_DOUBLE_TAPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_4_FINGER_DOUBLE_TAP"); _GESTURE_4_FINGER_DOUBLE_TAPReady = true; } return _GESTURE_4_FINGER_DOUBLE_TAPContent; } }
        private static int _GESTURE_4_FINGER_DOUBLE_TAPContent = default;
        private static bool _GESTURE_4_FINGER_DOUBLE_TAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_4_FINGER_DOUBLE_TAP_AND_HOLD"/>
        /// </summary>
        public static int GESTURE_4_FINGER_DOUBLE_TAP_AND_HOLD { get { if (!_GESTURE_4_FINGER_DOUBLE_TAP_AND_HOLDReady) { _GESTURE_4_FINGER_DOUBLE_TAP_AND_HOLDContent = SGetField<int>(LocalBridgeClazz, "GESTURE_4_FINGER_DOUBLE_TAP_AND_HOLD"); _GESTURE_4_FINGER_DOUBLE_TAP_AND_HOLDReady = true; } return _GESTURE_4_FINGER_DOUBLE_TAP_AND_HOLDContent; } }
        private static int _GESTURE_4_FINGER_DOUBLE_TAP_AND_HOLDContent = default;
        private static bool _GESTURE_4_FINGER_DOUBLE_TAP_AND_HOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_4_FINGER_SINGLE_TAP"/>
        /// </summary>
        public static int GESTURE_4_FINGER_SINGLE_TAP { get { if (!_GESTURE_4_FINGER_SINGLE_TAPReady) { _GESTURE_4_FINGER_SINGLE_TAPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_4_FINGER_SINGLE_TAP"); _GESTURE_4_FINGER_SINGLE_TAPReady = true; } return _GESTURE_4_FINGER_SINGLE_TAPContent; } }
        private static int _GESTURE_4_FINGER_SINGLE_TAPContent = default;
        private static bool _GESTURE_4_FINGER_SINGLE_TAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_4_FINGER_SWIPE_DOWN"/>
        /// </summary>
        public static int GESTURE_4_FINGER_SWIPE_DOWN { get { if (!_GESTURE_4_FINGER_SWIPE_DOWNReady) { _GESTURE_4_FINGER_SWIPE_DOWNContent = SGetField<int>(LocalBridgeClazz, "GESTURE_4_FINGER_SWIPE_DOWN"); _GESTURE_4_FINGER_SWIPE_DOWNReady = true; } return _GESTURE_4_FINGER_SWIPE_DOWNContent; } }
        private static int _GESTURE_4_FINGER_SWIPE_DOWNContent = default;
        private static bool _GESTURE_4_FINGER_SWIPE_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_4_FINGER_SWIPE_LEFT"/>
        /// </summary>
        public static int GESTURE_4_FINGER_SWIPE_LEFT { get { if (!_GESTURE_4_FINGER_SWIPE_LEFTReady) { _GESTURE_4_FINGER_SWIPE_LEFTContent = SGetField<int>(LocalBridgeClazz, "GESTURE_4_FINGER_SWIPE_LEFT"); _GESTURE_4_FINGER_SWIPE_LEFTReady = true; } return _GESTURE_4_FINGER_SWIPE_LEFTContent; } }
        private static int _GESTURE_4_FINGER_SWIPE_LEFTContent = default;
        private static bool _GESTURE_4_FINGER_SWIPE_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_4_FINGER_SWIPE_RIGHT"/>
        /// </summary>
        public static int GESTURE_4_FINGER_SWIPE_RIGHT { get { if (!_GESTURE_4_FINGER_SWIPE_RIGHTReady) { _GESTURE_4_FINGER_SWIPE_RIGHTContent = SGetField<int>(LocalBridgeClazz, "GESTURE_4_FINGER_SWIPE_RIGHT"); _GESTURE_4_FINGER_SWIPE_RIGHTReady = true; } return _GESTURE_4_FINGER_SWIPE_RIGHTContent; } }
        private static int _GESTURE_4_FINGER_SWIPE_RIGHTContent = default;
        private static bool _GESTURE_4_FINGER_SWIPE_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_4_FINGER_SWIPE_UP"/>
        /// </summary>
        public static int GESTURE_4_FINGER_SWIPE_UP { get { if (!_GESTURE_4_FINGER_SWIPE_UPReady) { _GESTURE_4_FINGER_SWIPE_UPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_4_FINGER_SWIPE_UP"); _GESTURE_4_FINGER_SWIPE_UPReady = true; } return _GESTURE_4_FINGER_SWIPE_UPContent; } }
        private static int _GESTURE_4_FINGER_SWIPE_UPContent = default;
        private static bool _GESTURE_4_FINGER_SWIPE_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_4_FINGER_TRIPLE_TAP"/>
        /// </summary>
        public static int GESTURE_4_FINGER_TRIPLE_TAP { get { if (!_GESTURE_4_FINGER_TRIPLE_TAPReady) { _GESTURE_4_FINGER_TRIPLE_TAPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_4_FINGER_TRIPLE_TAP"); _GESTURE_4_FINGER_TRIPLE_TAPReady = true; } return _GESTURE_4_FINGER_TRIPLE_TAPContent; } }
        private static int _GESTURE_4_FINGER_TRIPLE_TAPContent = default;
        private static bool _GESTURE_4_FINGER_TRIPLE_TAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_DOUBLE_TAP"/>
        /// </summary>
        public static int GESTURE_DOUBLE_TAP { get { if (!_GESTURE_DOUBLE_TAPReady) { _GESTURE_DOUBLE_TAPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_DOUBLE_TAP"); _GESTURE_DOUBLE_TAPReady = true; } return _GESTURE_DOUBLE_TAPContent; } }
        private static int _GESTURE_DOUBLE_TAPContent = default;
        private static bool _GESTURE_DOUBLE_TAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_DOUBLE_TAP_AND_HOLD"/>
        /// </summary>
        public static int GESTURE_DOUBLE_TAP_AND_HOLD { get { if (!_GESTURE_DOUBLE_TAP_AND_HOLDReady) { _GESTURE_DOUBLE_TAP_AND_HOLDContent = SGetField<int>(LocalBridgeClazz, "GESTURE_DOUBLE_TAP_AND_HOLD"); _GESTURE_DOUBLE_TAP_AND_HOLDReady = true; } return _GESTURE_DOUBLE_TAP_AND_HOLDContent; } }
        private static int _GESTURE_DOUBLE_TAP_AND_HOLDContent = default;
        private static bool _GESTURE_DOUBLE_TAP_AND_HOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_DOWN"/>
        /// </summary>
        public static int GESTURE_SWIPE_DOWN { get { if (!_GESTURE_SWIPE_DOWNReady) { _GESTURE_SWIPE_DOWNContent = SGetField<int>(LocalBridgeClazz, "GESTURE_SWIPE_DOWN"); _GESTURE_SWIPE_DOWNReady = true; } return _GESTURE_SWIPE_DOWNContent; } }
        private static int _GESTURE_SWIPE_DOWNContent = default;
        private static bool _GESTURE_SWIPE_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_DOWN_AND_LEFT"/>
        /// </summary>
        public static int GESTURE_SWIPE_DOWN_AND_LEFT { get { if (!_GESTURE_SWIPE_DOWN_AND_LEFTReady) { _GESTURE_SWIPE_DOWN_AND_LEFTContent = SGetField<int>(LocalBridgeClazz, "GESTURE_SWIPE_DOWN_AND_LEFT"); _GESTURE_SWIPE_DOWN_AND_LEFTReady = true; } return _GESTURE_SWIPE_DOWN_AND_LEFTContent; } }
        private static int _GESTURE_SWIPE_DOWN_AND_LEFTContent = default;
        private static bool _GESTURE_SWIPE_DOWN_AND_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_DOWN_AND_RIGHT"/>
        /// </summary>
        public static int GESTURE_SWIPE_DOWN_AND_RIGHT { get { if (!_GESTURE_SWIPE_DOWN_AND_RIGHTReady) { _GESTURE_SWIPE_DOWN_AND_RIGHTContent = SGetField<int>(LocalBridgeClazz, "GESTURE_SWIPE_DOWN_AND_RIGHT"); _GESTURE_SWIPE_DOWN_AND_RIGHTReady = true; } return _GESTURE_SWIPE_DOWN_AND_RIGHTContent; } }
        private static int _GESTURE_SWIPE_DOWN_AND_RIGHTContent = default;
        private static bool _GESTURE_SWIPE_DOWN_AND_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_DOWN_AND_UP"/>
        /// </summary>
        public static int GESTURE_SWIPE_DOWN_AND_UP { get { if (!_GESTURE_SWIPE_DOWN_AND_UPReady) { _GESTURE_SWIPE_DOWN_AND_UPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_SWIPE_DOWN_AND_UP"); _GESTURE_SWIPE_DOWN_AND_UPReady = true; } return _GESTURE_SWIPE_DOWN_AND_UPContent; } }
        private static int _GESTURE_SWIPE_DOWN_AND_UPContent = default;
        private static bool _GESTURE_SWIPE_DOWN_AND_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_LEFT"/>
        /// </summary>
        public static int GESTURE_SWIPE_LEFT { get { if (!_GESTURE_SWIPE_LEFTReady) { _GESTURE_SWIPE_LEFTContent = SGetField<int>(LocalBridgeClazz, "GESTURE_SWIPE_LEFT"); _GESTURE_SWIPE_LEFTReady = true; } return _GESTURE_SWIPE_LEFTContent; } }
        private static int _GESTURE_SWIPE_LEFTContent = default;
        private static bool _GESTURE_SWIPE_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_LEFT_AND_DOWN"/>
        /// </summary>
        public static int GESTURE_SWIPE_LEFT_AND_DOWN { get { if (!_GESTURE_SWIPE_LEFT_AND_DOWNReady) { _GESTURE_SWIPE_LEFT_AND_DOWNContent = SGetField<int>(LocalBridgeClazz, "GESTURE_SWIPE_LEFT_AND_DOWN"); _GESTURE_SWIPE_LEFT_AND_DOWNReady = true; } return _GESTURE_SWIPE_LEFT_AND_DOWNContent; } }
        private static int _GESTURE_SWIPE_LEFT_AND_DOWNContent = default;
        private static bool _GESTURE_SWIPE_LEFT_AND_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_LEFT_AND_RIGHT"/>
        /// </summary>
        public static int GESTURE_SWIPE_LEFT_AND_RIGHT { get { if (!_GESTURE_SWIPE_LEFT_AND_RIGHTReady) { _GESTURE_SWIPE_LEFT_AND_RIGHTContent = SGetField<int>(LocalBridgeClazz, "GESTURE_SWIPE_LEFT_AND_RIGHT"); _GESTURE_SWIPE_LEFT_AND_RIGHTReady = true; } return _GESTURE_SWIPE_LEFT_AND_RIGHTContent; } }
        private static int _GESTURE_SWIPE_LEFT_AND_RIGHTContent = default;
        private static bool _GESTURE_SWIPE_LEFT_AND_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_LEFT_AND_UP"/>
        /// </summary>
        public static int GESTURE_SWIPE_LEFT_AND_UP { get { if (!_GESTURE_SWIPE_LEFT_AND_UPReady) { _GESTURE_SWIPE_LEFT_AND_UPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_SWIPE_LEFT_AND_UP"); _GESTURE_SWIPE_LEFT_AND_UPReady = true; } return _GESTURE_SWIPE_LEFT_AND_UPContent; } }
        private static int _GESTURE_SWIPE_LEFT_AND_UPContent = default;
        private static bool _GESTURE_SWIPE_LEFT_AND_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_RIGHT"/>
        /// </summary>
        public static int GESTURE_SWIPE_RIGHT { get { if (!_GESTURE_SWIPE_RIGHTReady) { _GESTURE_SWIPE_RIGHTContent = SGetField<int>(LocalBridgeClazz, "GESTURE_SWIPE_RIGHT"); _GESTURE_SWIPE_RIGHTReady = true; } return _GESTURE_SWIPE_RIGHTContent; } }
        private static int _GESTURE_SWIPE_RIGHTContent = default;
        private static bool _GESTURE_SWIPE_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_RIGHT_AND_DOWN"/>
        /// </summary>
        public static int GESTURE_SWIPE_RIGHT_AND_DOWN { get { if (!_GESTURE_SWIPE_RIGHT_AND_DOWNReady) { _GESTURE_SWIPE_RIGHT_AND_DOWNContent = SGetField<int>(LocalBridgeClazz, "GESTURE_SWIPE_RIGHT_AND_DOWN"); _GESTURE_SWIPE_RIGHT_AND_DOWNReady = true; } return _GESTURE_SWIPE_RIGHT_AND_DOWNContent; } }
        private static int _GESTURE_SWIPE_RIGHT_AND_DOWNContent = default;
        private static bool _GESTURE_SWIPE_RIGHT_AND_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_RIGHT_AND_LEFT"/>
        /// </summary>
        public static int GESTURE_SWIPE_RIGHT_AND_LEFT { get { if (!_GESTURE_SWIPE_RIGHT_AND_LEFTReady) { _GESTURE_SWIPE_RIGHT_AND_LEFTContent = SGetField<int>(LocalBridgeClazz, "GESTURE_SWIPE_RIGHT_AND_LEFT"); _GESTURE_SWIPE_RIGHT_AND_LEFTReady = true; } return _GESTURE_SWIPE_RIGHT_AND_LEFTContent; } }
        private static int _GESTURE_SWIPE_RIGHT_AND_LEFTContent = default;
        private static bool _GESTURE_SWIPE_RIGHT_AND_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_RIGHT_AND_UP"/>
        /// </summary>
        public static int GESTURE_SWIPE_RIGHT_AND_UP { get { if (!_GESTURE_SWIPE_RIGHT_AND_UPReady) { _GESTURE_SWIPE_RIGHT_AND_UPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_SWIPE_RIGHT_AND_UP"); _GESTURE_SWIPE_RIGHT_AND_UPReady = true; } return _GESTURE_SWIPE_RIGHT_AND_UPContent; } }
        private static int _GESTURE_SWIPE_RIGHT_AND_UPContent = default;
        private static bool _GESTURE_SWIPE_RIGHT_AND_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_UP"/>
        /// </summary>
        public static int GESTURE_SWIPE_UP { get { if (!_GESTURE_SWIPE_UPReady) { _GESTURE_SWIPE_UPContent = SGetField<int>(LocalBridgeClazz, "GESTURE_SWIPE_UP"); _GESTURE_SWIPE_UPReady = true; } return _GESTURE_SWIPE_UPContent; } }
        private static int _GESTURE_SWIPE_UPContent = default;
        private static bool _GESTURE_SWIPE_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_UP_AND_DOWN"/>
        /// </summary>
        public static int GESTURE_SWIPE_UP_AND_DOWN { get { if (!_GESTURE_SWIPE_UP_AND_DOWNReady) { _GESTURE_SWIPE_UP_AND_DOWNContent = SGetField<int>(LocalBridgeClazz, "GESTURE_SWIPE_UP_AND_DOWN"); _GESTURE_SWIPE_UP_AND_DOWNReady = true; } return _GESTURE_SWIPE_UP_AND_DOWNContent; } }
        private static int _GESTURE_SWIPE_UP_AND_DOWNContent = default;
        private static bool _GESTURE_SWIPE_UP_AND_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_UP_AND_LEFT"/>
        /// </summary>
        public static int GESTURE_SWIPE_UP_AND_LEFT { get { if (!_GESTURE_SWIPE_UP_AND_LEFTReady) { _GESTURE_SWIPE_UP_AND_LEFTContent = SGetField<int>(LocalBridgeClazz, "GESTURE_SWIPE_UP_AND_LEFT"); _GESTURE_SWIPE_UP_AND_LEFTReady = true; } return _GESTURE_SWIPE_UP_AND_LEFTContent; } }
        private static int _GESTURE_SWIPE_UP_AND_LEFTContent = default;
        private static bool _GESTURE_SWIPE_UP_AND_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_UP_AND_RIGHT"/>
        /// </summary>
        public static int GESTURE_SWIPE_UP_AND_RIGHT { get { if (!_GESTURE_SWIPE_UP_AND_RIGHTReady) { _GESTURE_SWIPE_UP_AND_RIGHTContent = SGetField<int>(LocalBridgeClazz, "GESTURE_SWIPE_UP_AND_RIGHT"); _GESTURE_SWIPE_UP_AND_RIGHTReady = true; } return _GESTURE_SWIPE_UP_AND_RIGHTContent; } }
        private static int _GESTURE_SWIPE_UP_AND_RIGHTContent = default;
        private static bool _GESTURE_SWIPE_UP_AND_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_UNKNOWN"/>
        /// </summary>
        public static int GESTURE_UNKNOWN { get { if (!_GESTURE_UNKNOWNReady) { _GESTURE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "GESTURE_UNKNOWN"); _GESTURE_UNKNOWNReady = true; } return _GESTURE_UNKNOWNContent; } }
        private static int _GESTURE_UNKNOWNContent = default;
        private static bool _GESTURE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_ACCESSIBILITY_ALL_APPS"/>
        /// </summary>
        public static int GLOBAL_ACTION_ACCESSIBILITY_ALL_APPS { get { if (!_GLOBAL_ACTION_ACCESSIBILITY_ALL_APPSReady) { _GLOBAL_ACTION_ACCESSIBILITY_ALL_APPSContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_ACCESSIBILITY_ALL_APPS"); _GLOBAL_ACTION_ACCESSIBILITY_ALL_APPSReady = true; } return _GLOBAL_ACTION_ACCESSIBILITY_ALL_APPSContent; } }
        private static int _GLOBAL_ACTION_ACCESSIBILITY_ALL_APPSContent = default;
        private static bool _GLOBAL_ACTION_ACCESSIBILITY_ALL_APPSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_ACCESSIBILITY_BUTTON"/>
        /// </summary>
        public static int GLOBAL_ACTION_ACCESSIBILITY_BUTTON { get { if (!_GLOBAL_ACTION_ACCESSIBILITY_BUTTONReady) { _GLOBAL_ACTION_ACCESSIBILITY_BUTTONContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_ACCESSIBILITY_BUTTON"); _GLOBAL_ACTION_ACCESSIBILITY_BUTTONReady = true; } return _GLOBAL_ACTION_ACCESSIBILITY_BUTTONContent; } }
        private static int _GLOBAL_ACTION_ACCESSIBILITY_BUTTONContent = default;
        private static bool _GLOBAL_ACTION_ACCESSIBILITY_BUTTONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_ACCESSIBILITY_BUTTON_CHOOSER"/>
        /// </summary>
        public static int GLOBAL_ACTION_ACCESSIBILITY_BUTTON_CHOOSER { get { if (!_GLOBAL_ACTION_ACCESSIBILITY_BUTTON_CHOOSERReady) { _GLOBAL_ACTION_ACCESSIBILITY_BUTTON_CHOOSERContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_ACCESSIBILITY_BUTTON_CHOOSER"); _GLOBAL_ACTION_ACCESSIBILITY_BUTTON_CHOOSERReady = true; } return _GLOBAL_ACTION_ACCESSIBILITY_BUTTON_CHOOSERContent; } }
        private static int _GLOBAL_ACTION_ACCESSIBILITY_BUTTON_CHOOSERContent = default;
        private static bool _GLOBAL_ACTION_ACCESSIBILITY_BUTTON_CHOOSERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_ACCESSIBILITY_SHORTCUT"/>
        /// </summary>
        public static int GLOBAL_ACTION_ACCESSIBILITY_SHORTCUT { get { if (!_GLOBAL_ACTION_ACCESSIBILITY_SHORTCUTReady) { _GLOBAL_ACTION_ACCESSIBILITY_SHORTCUTContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_ACCESSIBILITY_SHORTCUT"); _GLOBAL_ACTION_ACCESSIBILITY_SHORTCUTReady = true; } return _GLOBAL_ACTION_ACCESSIBILITY_SHORTCUTContent; } }
        private static int _GLOBAL_ACTION_ACCESSIBILITY_SHORTCUTContent = default;
        private static bool _GLOBAL_ACTION_ACCESSIBILITY_SHORTCUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_BACK"/>
        /// </summary>
        public static int GLOBAL_ACTION_BACK { get { if (!_GLOBAL_ACTION_BACKReady) { _GLOBAL_ACTION_BACKContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_BACK"); _GLOBAL_ACTION_BACKReady = true; } return _GLOBAL_ACTION_BACKContent; } }
        private static int _GLOBAL_ACTION_BACKContent = default;
        private static bool _GLOBAL_ACTION_BACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_DISMISS_NOTIFICATION_SHADE"/>
        /// </summary>
        public static int GLOBAL_ACTION_DISMISS_NOTIFICATION_SHADE { get { if (!_GLOBAL_ACTION_DISMISS_NOTIFICATION_SHADEReady) { _GLOBAL_ACTION_DISMISS_NOTIFICATION_SHADEContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_DISMISS_NOTIFICATION_SHADE"); _GLOBAL_ACTION_DISMISS_NOTIFICATION_SHADEReady = true; } return _GLOBAL_ACTION_DISMISS_NOTIFICATION_SHADEContent; } }
        private static int _GLOBAL_ACTION_DISMISS_NOTIFICATION_SHADEContent = default;
        private static bool _GLOBAL_ACTION_DISMISS_NOTIFICATION_SHADEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_DPAD_CENTER"/>
        /// </summary>
        public static int GLOBAL_ACTION_DPAD_CENTER { get { if (!_GLOBAL_ACTION_DPAD_CENTERReady) { _GLOBAL_ACTION_DPAD_CENTERContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_DPAD_CENTER"); _GLOBAL_ACTION_DPAD_CENTERReady = true; } return _GLOBAL_ACTION_DPAD_CENTERContent; } }
        private static int _GLOBAL_ACTION_DPAD_CENTERContent = default;
        private static bool _GLOBAL_ACTION_DPAD_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_DPAD_DOWN"/>
        /// </summary>
        public static int GLOBAL_ACTION_DPAD_DOWN { get { if (!_GLOBAL_ACTION_DPAD_DOWNReady) { _GLOBAL_ACTION_DPAD_DOWNContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_DPAD_DOWN"); _GLOBAL_ACTION_DPAD_DOWNReady = true; } return _GLOBAL_ACTION_DPAD_DOWNContent; } }
        private static int _GLOBAL_ACTION_DPAD_DOWNContent = default;
        private static bool _GLOBAL_ACTION_DPAD_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_DPAD_LEFT"/>
        /// </summary>
        public static int GLOBAL_ACTION_DPAD_LEFT { get { if (!_GLOBAL_ACTION_DPAD_LEFTReady) { _GLOBAL_ACTION_DPAD_LEFTContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_DPAD_LEFT"); _GLOBAL_ACTION_DPAD_LEFTReady = true; } return _GLOBAL_ACTION_DPAD_LEFTContent; } }
        private static int _GLOBAL_ACTION_DPAD_LEFTContent = default;
        private static bool _GLOBAL_ACTION_DPAD_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_DPAD_RIGHT"/>
        /// </summary>
        public static int GLOBAL_ACTION_DPAD_RIGHT { get { if (!_GLOBAL_ACTION_DPAD_RIGHTReady) { _GLOBAL_ACTION_DPAD_RIGHTContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_DPAD_RIGHT"); _GLOBAL_ACTION_DPAD_RIGHTReady = true; } return _GLOBAL_ACTION_DPAD_RIGHTContent; } }
        private static int _GLOBAL_ACTION_DPAD_RIGHTContent = default;
        private static bool _GLOBAL_ACTION_DPAD_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_DPAD_UP"/>
        /// </summary>
        public static int GLOBAL_ACTION_DPAD_UP { get { if (!_GLOBAL_ACTION_DPAD_UPReady) { _GLOBAL_ACTION_DPAD_UPContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_DPAD_UP"); _GLOBAL_ACTION_DPAD_UPReady = true; } return _GLOBAL_ACTION_DPAD_UPContent; } }
        private static int _GLOBAL_ACTION_DPAD_UPContent = default;
        private static bool _GLOBAL_ACTION_DPAD_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_HOME"/>
        /// </summary>
        public static int GLOBAL_ACTION_HOME { get { if (!_GLOBAL_ACTION_HOMEReady) { _GLOBAL_ACTION_HOMEContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_HOME"); _GLOBAL_ACTION_HOMEReady = true; } return _GLOBAL_ACTION_HOMEContent; } }
        private static int _GLOBAL_ACTION_HOMEContent = default;
        private static bool _GLOBAL_ACTION_HOMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_KEYCODE_HEADSETHOOK"/>
        /// </summary>
        public static int GLOBAL_ACTION_KEYCODE_HEADSETHOOK { get { if (!_GLOBAL_ACTION_KEYCODE_HEADSETHOOKReady) { _GLOBAL_ACTION_KEYCODE_HEADSETHOOKContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_KEYCODE_HEADSETHOOK"); _GLOBAL_ACTION_KEYCODE_HEADSETHOOKReady = true; } return _GLOBAL_ACTION_KEYCODE_HEADSETHOOKContent; } }
        private static int _GLOBAL_ACTION_KEYCODE_HEADSETHOOKContent = default;
        private static bool _GLOBAL_ACTION_KEYCODE_HEADSETHOOKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_LOCK_SCREEN"/>
        /// </summary>
        public static int GLOBAL_ACTION_LOCK_SCREEN { get { if (!_GLOBAL_ACTION_LOCK_SCREENReady) { _GLOBAL_ACTION_LOCK_SCREENContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_LOCK_SCREEN"); _GLOBAL_ACTION_LOCK_SCREENReady = true; } return _GLOBAL_ACTION_LOCK_SCREENContent; } }
        private static int _GLOBAL_ACTION_LOCK_SCREENContent = default;
        private static bool _GLOBAL_ACTION_LOCK_SCREENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_NOTIFICATIONS"/>
        /// </summary>
        public static int GLOBAL_ACTION_NOTIFICATIONS { get { if (!_GLOBAL_ACTION_NOTIFICATIONSReady) { _GLOBAL_ACTION_NOTIFICATIONSContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_NOTIFICATIONS"); _GLOBAL_ACTION_NOTIFICATIONSReady = true; } return _GLOBAL_ACTION_NOTIFICATIONSContent; } }
        private static int _GLOBAL_ACTION_NOTIFICATIONSContent = default;
        private static bool _GLOBAL_ACTION_NOTIFICATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_POWER_DIALOG"/>
        /// </summary>
        public static int GLOBAL_ACTION_POWER_DIALOG { get { if (!_GLOBAL_ACTION_POWER_DIALOGReady) { _GLOBAL_ACTION_POWER_DIALOGContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_POWER_DIALOG"); _GLOBAL_ACTION_POWER_DIALOGReady = true; } return _GLOBAL_ACTION_POWER_DIALOGContent; } }
        private static int _GLOBAL_ACTION_POWER_DIALOGContent = default;
        private static bool _GLOBAL_ACTION_POWER_DIALOGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_QUICK_SETTINGS"/>
        /// </summary>
        public static int GLOBAL_ACTION_QUICK_SETTINGS { get { if (!_GLOBAL_ACTION_QUICK_SETTINGSReady) { _GLOBAL_ACTION_QUICK_SETTINGSContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_QUICK_SETTINGS"); _GLOBAL_ACTION_QUICK_SETTINGSReady = true; } return _GLOBAL_ACTION_QUICK_SETTINGSContent; } }
        private static int _GLOBAL_ACTION_QUICK_SETTINGSContent = default;
        private static bool _GLOBAL_ACTION_QUICK_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_RECENTS"/>
        /// </summary>
        public static int GLOBAL_ACTION_RECENTS { get { if (!_GLOBAL_ACTION_RECENTSReady) { _GLOBAL_ACTION_RECENTSContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_RECENTS"); _GLOBAL_ACTION_RECENTSReady = true; } return _GLOBAL_ACTION_RECENTSContent; } }
        private static int _GLOBAL_ACTION_RECENTSContent = default;
        private static bool _GLOBAL_ACTION_RECENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_TAKE_SCREENSHOT"/>
        /// </summary>
        public static int GLOBAL_ACTION_TAKE_SCREENSHOT { get { if (!_GLOBAL_ACTION_TAKE_SCREENSHOTReady) { _GLOBAL_ACTION_TAKE_SCREENSHOTContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_TAKE_SCREENSHOT"); _GLOBAL_ACTION_TAKE_SCREENSHOTReady = true; } return _GLOBAL_ACTION_TAKE_SCREENSHOTContent; } }
        private static int _GLOBAL_ACTION_TAKE_SCREENSHOTContent = default;
        private static bool _GLOBAL_ACTION_TAKE_SCREENSHOTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN"/>
        /// </summary>
        public static int GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN { get { if (!_GLOBAL_ACTION_TOGGLE_SPLIT_SCREENReady) { _GLOBAL_ACTION_TOGGLE_SPLIT_SCREENContent = SGetField<int>(LocalBridgeClazz, "GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN"); _GLOBAL_ACTION_TOGGLE_SPLIT_SCREENReady = true; } return _GLOBAL_ACTION_TOGGLE_SPLIT_SCREENContent; } }
        private static int _GLOBAL_ACTION_TOGGLE_SPLIT_SCREENContent = default;
        private static bool _GLOBAL_ACTION_TOGGLE_SPLIT_SCREENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#SHOW_MODE_AUTO"/>
        /// </summary>
        public static int SHOW_MODE_AUTO { get { if (!_SHOW_MODE_AUTOReady) { _SHOW_MODE_AUTOContent = SGetField<int>(LocalBridgeClazz, "SHOW_MODE_AUTO"); _SHOW_MODE_AUTOReady = true; } return _SHOW_MODE_AUTOContent; } }
        private static int _SHOW_MODE_AUTOContent = default;
        private static bool _SHOW_MODE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#SHOW_MODE_HIDDEN"/>
        /// </summary>
        public static int SHOW_MODE_HIDDEN { get { if (!_SHOW_MODE_HIDDENReady) { _SHOW_MODE_HIDDENContent = SGetField<int>(LocalBridgeClazz, "SHOW_MODE_HIDDEN"); _SHOW_MODE_HIDDENReady = true; } return _SHOW_MODE_HIDDENContent; } }
        private static int _SHOW_MODE_HIDDENContent = default;
        private static bool _SHOW_MODE_HIDDENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#SHOW_MODE_IGNORE_HARD_KEYBOARD"/>
        /// </summary>
        public static int SHOW_MODE_IGNORE_HARD_KEYBOARD { get { if (!_SHOW_MODE_IGNORE_HARD_KEYBOARDReady) { _SHOW_MODE_IGNORE_HARD_KEYBOARDContent = SGetField<int>(LocalBridgeClazz, "SHOW_MODE_IGNORE_HARD_KEYBOARD"); _SHOW_MODE_IGNORE_HARD_KEYBOARDReady = true; } return _SHOW_MODE_IGNORE_HARD_KEYBOARDContent; } }
        private static int _SHOW_MODE_IGNORE_HARD_KEYBOARDContent = default;
        private static bool _SHOW_MODE_IGNORE_HARD_KEYBOARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#SERVICE_INTERFACE"/>
        /// </summary>
        public static Java.Lang.String SERVICE_INTERFACE { get { if (!_SERVICE_INTERFACEReady) { _SERVICE_INTERFACEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SERVICE_INTERFACE"); _SERVICE_INTERFACEReady = true; } return _SERVICE_INTERFACEContent; } }
        private static Java.Lang.String _SERVICE_INTERFACEContent = default;
        private static bool _SERVICE_INTERFACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#SERVICE_META_DATA"/>
        /// </summary>
        public static Java.Lang.String SERVICE_META_DATA { get { if (!_SERVICE_META_DATAReady) { _SERVICE_META_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SERVICE_META_DATA"); _SERVICE_META_DATAReady = true; } return _SERVICE_META_DATAContent; } }
        private static Java.Lang.String _SERVICE_META_DATAContent = default;
        private static bool _SERVICE_META_DATAReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityEvent"/></param>
        public void OnAccessibilityEvent(Android.View.Accessibility.AccessibilityEvent arg0)
        {
            IExecuteWithSignature("onAccessibilityEvent", "(Landroid/view/accessibility/AccessibilityEvent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#onInterrupt()"/>
        /// </summary>
        public void OnInterrupt()
        {
            IExecuteWithSignature("onInterrupt", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#onCreateInputMethod()"/>
        /// </summary>
        /// <returns><see cref="Android.Accessibilityservice.InputMethod"/></returns>
        public Android.Accessibilityservice.InputMethod OnCreateInputMethod()
        {
            return IExecuteWithSignature<Android.Accessibilityservice.InputMethod>("onCreateInputMethod", "()Landroid/accessibilityservice/InputMethod;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#findFocus(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo FindFocus(int arg0)
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>("findFocus", "(I)Landroid/view/accessibility/AccessibilityNodeInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getRootInActiveWindow()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo GetRootInActiveWindow()
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>("getRootInActiveWindow", "()Landroid/view/accessibility/AccessibilityNodeInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getRootInActiveWindow(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo GetRootInActiveWindow(int arg0)
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>("getRootInActiveWindow", "(I)Landroid/view/accessibility/AccessibilityNodeInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#clearCache()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool ClearCache()
        {
            return IExecuteWithSignature<bool>("clearCache", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#clearCachedSubtree(android.view.accessibility.AccessibilityNodeInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ClearCachedSubtree(Android.View.Accessibility.AccessibilityNodeInfo arg0)
        {
            return IExecuteWithSignature<bool>("clearCachedSubtree", "(Landroid/view/accessibility/AccessibilityNodeInfo;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#isCacheEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsCacheEnabled()
        {
            return IExecuteWithSignature<bool>("isCacheEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#isNodeInCache(android.view.accessibility.AccessibilityNodeInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsNodeInCache(Android.View.Accessibility.AccessibilityNodeInfo arg0)
        {
            return IExecuteWithSignature<bool>("isNodeInCache", "(Landroid/view/accessibility/AccessibilityNodeInfo;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#onGesture(android.accessibilityservice.AccessibilityGestureEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Accessibilityservice.AccessibilityGestureEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnGesture(Android.Accessibilityservice.AccessibilityGestureEvent arg0)
        {
            return IExecuteWithSignature<bool>("onGesture", "(Landroid/accessibilityservice/AccessibilityGestureEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#setCacheEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetCacheEnabled(bool arg0)
        {
            return IExecuteWithSignature<bool>("setCacheEnabled", "(Z)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getAccessibilityButtonController()"/>
        /// </summary>
        /// <returns><see cref="Android.Accessibilityservice.AccessibilityButtonController"/></returns>
        public Android.Accessibilityservice.AccessibilityButtonController GetAccessibilityButtonController()
        {
            return IExecuteWithSignature<Android.Accessibilityservice.AccessibilityButtonController>("getAccessibilityButtonController", "()Landroid/accessibilityservice/AccessibilityButtonController;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getAccessibilityButtonController(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Accessibilityservice.AccessibilityButtonController"/></returns>
        public Android.Accessibilityservice.AccessibilityButtonController GetAccessibilityButtonController(int arg0)
        {
            return IExecuteWithSignature<Android.Accessibilityservice.AccessibilityButtonController>("getAccessibilityButtonController", "(I)Landroid/accessibilityservice/AccessibilityButtonController;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getMagnificationController()"/>
        /// </summary>
        /// <returns><see cref="Android.Accessibilityservice.AccessibilityService.MagnificationController"/></returns>
        public Android.Accessibilityservice.AccessibilityService.MagnificationController GetMagnificationController()
        {
            return IExecuteWithSignature<Android.Accessibilityservice.AccessibilityService.MagnificationController>("getMagnificationController", "()Landroid/accessibilityservice/AccessibilityService$MagnificationController;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getSoftKeyboardController()"/>
        /// </summary>
        /// <returns><see cref="Android.Accessibilityservice.AccessibilityService.SoftKeyboardController"/></returns>
        public Android.Accessibilityservice.AccessibilityService.SoftKeyboardController GetSoftKeyboardController()
        {
            return IExecuteWithSignature<Android.Accessibilityservice.AccessibilityService.SoftKeyboardController>("getSoftKeyboardController", "()Landroid/accessibilityservice/AccessibilityService$SoftKeyboardController;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getServiceInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.Accessibilityservice.AccessibilityServiceInfo"/></returns>
        public Android.Accessibilityservice.AccessibilityServiceInfo GetServiceInfo()
        {
            return IExecuteWithSignature<Android.Accessibilityservice.AccessibilityServiceInfo>("getServiceInfo", "()Landroid/accessibilityservice/AccessibilityServiceInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getBrailleDisplayController()"/>
        /// </summary>
        /// <returns><see cref="Android.Accessibilityservice.BrailleDisplayController"/></returns>
        public Android.Accessibilityservice.BrailleDisplayController GetBrailleDisplayController()
        {
            return IExecuteWithSignature<Android.Accessibilityservice.BrailleDisplayController>("getBrailleDisplayController", "()Landroid/accessibilityservice/BrailleDisplayController;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getFingerprintGestureController()"/>
        /// </summary>
        /// <returns><see cref="Android.Accessibilityservice.FingerprintGestureController"/></returns>
        public Android.Accessibilityservice.FingerprintGestureController GetFingerprintGestureController()
        {
            return IExecuteWithSignature<Android.Accessibilityservice.FingerprintGestureController>("getFingerprintGestureController", "()Landroid/accessibilityservice/FingerprintGestureController;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getInputMethod()"/>
        /// </summary>
        /// <returns><see cref="Android.Accessibilityservice.InputMethod"/></returns>
        public Android.Accessibilityservice.InputMethod GetInputMethod()
        {
            return IExecuteWithSignature<Android.Accessibilityservice.InputMethod>("getInputMethod", "()Landroid/accessibilityservice/InputMethod;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getTouchInteractionController(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Accessibilityservice.TouchInteractionController"/></returns>
        public Android.Accessibilityservice.TouchInteractionController GetTouchInteractionController(int arg0)
        {
            return IExecuteWithSignature<Android.Accessibilityservice.TouchInteractionController>("getTouchInteractionController", "(I)Landroid/accessibilityservice/TouchInteractionController;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getWindowsOnAllDisplays()"/>
        /// </summary>
        /// <returns><see cref="Android.Util.SparseArray"/></returns>
        public Android.Util.SparseArray<Java.Util.List<Android.View.Accessibility.AccessibilityWindowInfo>> GetWindowsOnAllDisplays()
        {
            return IExecuteWithSignature<Android.Util.SparseArray<Java.Util.List<Android.View.Accessibility.AccessibilityWindowInfo>>>("getWindowsOnAllDisplays", "()Landroid/util/SparseArray;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#dispatchGesture(android.accessibilityservice.GestureDescription,android.accessibilityservice.AccessibilityService.GestureResultCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Accessibilityservice.GestureDescription"/></param>
        /// <param name="arg1"><see cref="Android.Accessibilityservice.AccessibilityService.GestureResultCallback"/></param>
        /// <param name="arg2"><see cref="Android.Os.Handler"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchGesture(Android.Accessibilityservice.GestureDescription arg0, Android.Accessibilityservice.AccessibilityService.GestureResultCallback arg1, Android.Os.Handler arg2)
        {
            return IExecute<bool>("dispatchGesture", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#performGlobalAction(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PerformGlobalAction(int arg0)
        {
            return IExecuteWithSignature<bool>("performGlobalAction", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getSystemActions()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction> GetSystemActions()
        {
            return IExecuteWithSignature<Java.Util.List<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>>("getSystemActions", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#disableSelf()"/>
        /// </summary>
        public void DisableSelf()
        {
            IExecuteWithSignature("disableSelf", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Accessibilityservice.AccessibilityServiceInfo"/></param>
        public void SetServiceInfo(Android.Accessibilityservice.AccessibilityServiceInfo arg0)
        {
            IExecuteWithSignature("setServiceInfo", "(Landroid/accessibilityservice/AccessibilityServiceInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getWindows()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.View.Accessibility.AccessibilityWindowInfo> GetWindows()
        {
            return IExecuteWithSignature<Java.Util.List<Android.View.Accessibility.AccessibilityWindowInfo>>("getWindows", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#attachAccessibilityOverlayToDisplay(int,android.view.SurfaceControl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.View.SurfaceControl"/></param>
        public void AttachAccessibilityOverlayToDisplay(int arg0, Android.View.SurfaceControl arg1)
        {
            IExecute("attachAccessibilityOverlayToDisplay", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#attachAccessibilityOverlayToWindow(int,android.view.SurfaceControl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.View.SurfaceControl"/></param>
        public void AttachAccessibilityOverlayToWindow(int arg0, Android.View.SurfaceControl arg1)
        {
            IExecute("attachAccessibilityOverlayToWindow", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#onMotionEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        public void OnMotionEvent(Android.View.MotionEvent arg0)
        {
            IExecuteWithSignature("onMotionEvent", "(Landroid/view/MotionEvent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#onSystemActionsChanged()"/>
        /// </summary>
        public void OnSystemActionsChanged()
        {
            IExecuteWithSignature("onSystemActionsChanged", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#setAccessibilityFocusAppearance(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetAccessibilityFocusAppearance(int arg0, int arg1)
        {
            IExecute("setAccessibilityFocusAppearance", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#setAnimationScale(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetAnimationScale(float arg0)
        {
            IExecuteWithSignature("setAnimationScale", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#setGestureDetectionPassthroughRegion(int,android.graphics.Region)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Region"/></param>
        public void SetGestureDetectionPassthroughRegion(int arg0, Android.Graphics.Region arg1)
        {
            IExecute("setGestureDetectionPassthroughRegion", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#setTouchExplorationPassthroughRegion(int,android.graphics.Region)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Region"/></param>
        public void SetTouchExplorationPassthroughRegion(int arg0, Android.Graphics.Region arg1)
        {
            IExecute("setTouchExplorationPassthroughRegion", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#takeScreenshot(int,java.util.concurrent.Executor,android.accessibilityservice.AccessibilityService.TakeScreenshotCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Accessibilityservice.AccessibilityService.TakeScreenshotCallback"/></param>
        public void TakeScreenshot(int arg0, Java.Util.Concurrent.Executor arg1, Android.Accessibilityservice.AccessibilityService.TakeScreenshotCallback arg2)
        {
            IExecute("takeScreenshot", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#takeScreenshotOfWindow(int,java.util.concurrent.Executor,android.accessibilityservice.AccessibilityService.TakeScreenshotCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Accessibilityservice.AccessibilityService.TakeScreenshotCallback"/></param>
        public void TakeScreenshotOfWindow(int arg0, Java.Util.Concurrent.Executor arg1, Android.Accessibilityservice.AccessibilityService.TakeScreenshotCallback arg2)
        {
            IExecute("takeScreenshotOfWindow", arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes
        #region GestureResultCallback
        public partial class GestureResultCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.GestureResultCallback.html#onCancelled(android.accessibilityservice.GestureDescription)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Accessibilityservice.GestureDescription"/></param>
            public void OnCancelled(Android.Accessibilityservice.GestureDescription arg0)
            {
                IExecuteWithSignature("onCancelled", "(Landroid/accessibilityservice/GestureDescription;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.GestureResultCallback.html#onCompleted(android.accessibilityservice.GestureDescription)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Accessibilityservice.GestureDescription"/></param>
            public void OnCompleted(Android.Accessibilityservice.GestureDescription arg0)
            {
                IExecuteWithSignature("onCompleted", "(Landroid/accessibilityservice/GestureDescription;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MagnificationController
        public partial class MagnificationController
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#getMagnificationConfig()"/>
            /// </summary>
            /// <returns><see cref="Android.Accessibilityservice.MagnificationConfig"/></returns>
            public Android.Accessibilityservice.MagnificationConfig GetMagnificationConfig()
            {
                return IExecuteWithSignature<Android.Accessibilityservice.MagnificationConfig>("getMagnificationConfig", "()Landroid/accessibilityservice/MagnificationConfig;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#getCurrentMagnificationRegion()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Region"/></returns>
            public Android.Graphics.Region GetCurrentMagnificationRegion()
            {
                return IExecuteWithSignature<Android.Graphics.Region>("getCurrentMagnificationRegion", "()Landroid/graphics/Region;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#getMagnificationRegion()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Region"/></returns>
            [global::System.Obsolete()]
            public Android.Graphics.Region GetMagnificationRegion()
            {
                return IExecuteWithSignature<Android.Graphics.Region>("getMagnificationRegion", "()Landroid/graphics/Region;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#removeListener(android.accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool RemoveListener(Android.Accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener arg0)
            {
                return IExecuteWithSignature<bool>("removeListener", "(Landroid/accessibilityservice/AccessibilityService$MagnificationController$OnMagnificationChangedListener;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#reset(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool Reset(bool arg0)
            {
                return IExecuteWithSignature<bool>("reset", "(Z)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#resetCurrentMagnification(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool ResetCurrentMagnification(bool arg0)
            {
                return IExecuteWithSignature<bool>("resetCurrentMagnification", "(Z)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#setCenter(float,float,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="bool"/></param>
            /// <returns><see cref="bool"/></returns>
            [global::System.Obsolete()]
            public bool SetCenter(float arg0, float arg1, bool arg2)
            {
                return IExecute<bool>("setCenter", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#setMagnificationConfig(android.accessibilityservice.MagnificationConfig,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Accessibilityservice.MagnificationConfig"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool SetMagnificationConfig(Android.Accessibilityservice.MagnificationConfig arg0, bool arg1)
            {
                return IExecute<bool>("setMagnificationConfig", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#setScale(float,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            /// <returns><see cref="bool"/></returns>
            [global::System.Obsolete()]
            public bool SetScale(float arg0, bool arg1)
            {
                return IExecute<bool>("setScale", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#getCenterX()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            [global::System.Obsolete()]
            public float GetCenterX()
            {
                return IExecuteWithSignature<float>("getCenterX", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#getCenterY()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            [global::System.Obsolete()]
            public float GetCenterY()
            {
                return IExecuteWithSignature<float>("getCenterY", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#getScale()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            [global::System.Obsolete()]
            public float GetScale()
            {
                return IExecuteWithSignature<float>("getScale", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#addListener(android.accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener,android.os.Handler)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener"/></param>
            /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
            public void AddListener(Android.Accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener arg0, Android.Os.Handler arg1)
            {
                IExecute("addListener", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#addListener(android.accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener"/></param>
            public void AddListener(Android.Accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener arg0)
            {
                IExecuteWithSignature("addListener", "(Landroid/accessibilityservice/AccessibilityService$MagnificationController$OnMagnificationChangedListener;)V", arg0);
            }

            #endregion

            #region Nested classes
            #region OnMagnificationChangedListener
            public partial class OnMagnificationChangedListener
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// Handlers initializer for <see cref="OnMagnificationChangedListener"/>
                /// </summary>
                protected virtual void InitializeHandlers()
                {
                    AddEventHandler("onMagnificationChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Accessibilityservice.AccessibilityService.MagnificationController>>>(OnMagnificationChangedEventHandler));
                    AddEventHandler("onMagnificationChanged3", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Accessibilityservice.AccessibilityService.MagnificationController>>>(OnMagnificationChanged3EventHandler));

                }

                /// <summary>
                /// Handler for <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.OnMagnificationChangedListener.html#onMagnificationChanged(android.accessibilityservice.AccessibilityService.MagnificationController,android.graphics.Region,float,float,float)"/>
                /// </summary>
                /// <remarks>If <see cref="OnOnMagnificationChanged"/> has a value it takes precedence over corresponding class method</remarks>
                public global::System.Action<Android.Accessibilityservice.AccessibilityService.MagnificationController, Android.Graphics.Region, float, float, float> OnOnMagnificationChanged { get; set; } = null;

                void OnMagnificationChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Accessibilityservice.AccessibilityService.MagnificationController>> data)
                {
                    var methodToExecute = (OnOnMagnificationChanged != null) ? OnOnMagnificationChanged : OnMagnificationChanged;
                    methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Graphics.Region>(0), data.EventData.GetAt<float>(1), data.EventData.GetAt<float>(2), data.EventData.GetAt<float>(3));
                }

                /// <summary>
                /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.OnMagnificationChangedListener.html#onMagnificationChanged(android.accessibilityservice.AccessibilityService.MagnificationController,android.graphics.Region,float,float,float)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Accessibilityservice.AccessibilityService.MagnificationController"/></param>
                /// <param name="arg1"><see cref="Android.Graphics.Region"/></param>
                /// <param name="arg2"><see cref="float"/></param>
                /// <param name="arg3"><see cref="float"/></param>
                /// <param name="arg4"><see cref="float"/></param>
                [global::System.Obsolete()]
                public virtual void OnMagnificationChanged(Android.Accessibilityservice.AccessibilityService.MagnificationController arg0, Android.Graphics.Region arg1, float arg2, float arg3, float arg4)
                {
                    
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.OnMagnificationChangedListener.html#onMagnificationChanged(android.accessibilityservice.AccessibilityService.MagnificationController,android.graphics.Region,android.accessibilityservice.MagnificationConfig)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Accessibilityservice.AccessibilityService.MagnificationController"/></param>
                /// <param name="arg1"><see cref="Android.Graphics.Region"/></param>
                /// <param name="arg2"><see cref="Android.Accessibilityservice.MagnificationConfig"/></param>
                /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
                public void OnMagnificationChangedDefault(Android.Accessibilityservice.AccessibilityService.MagnificationController arg0, Android.Graphics.Region arg1, Android.Accessibilityservice.MagnificationConfig arg2)
                {
                    IExecute("onMagnificationChangedDefault", arg0, arg1, arg2);
                }

                /// <summary>
                /// Handler for <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.OnMagnificationChangedListener.html#onMagnificationChanged(android.accessibilityservice.AccessibilityService.MagnificationController,android.graphics.Region,android.accessibilityservice.MagnificationConfig)"/>
                /// </summary>
                /// <remarks>If <see cref="OnOnMagnificationChanged3"/> has a value it takes precedence over corresponding class method</remarks>
                public global::System.Action<Android.Accessibilityservice.AccessibilityService.MagnificationController, Android.Graphics.Region, Android.Accessibilityservice.MagnificationConfig> OnOnMagnificationChanged3 { get; set; } = null;

                void OnMagnificationChanged3EventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Accessibilityservice.AccessibilityService.MagnificationController>> data)
                {
                    var methodToExecute = (OnOnMagnificationChanged3 != null) ? OnOnMagnificationChanged3 : OnMagnificationChanged;
                    methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Graphics.Region>(0), data.EventData.GetAt<Android.Accessibilityservice.MagnificationConfig>(1));
                }

                /// <summary>
                /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.OnMagnificationChangedListener.html#onMagnificationChanged(android.accessibilityservice.AccessibilityService.MagnificationController,android.graphics.Region,android.accessibilityservice.MagnificationConfig)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Accessibilityservice.AccessibilityService.MagnificationController"/></param>
                /// <param name="arg1"><see cref="Android.Graphics.Region"/></param>
                /// <param name="arg2"><see cref="Android.Accessibilityservice.MagnificationConfig"/></param>
                /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnMagnificationChangedDefault"/>; override the method to implement a different behavior</remarks>
                public virtual void OnMagnificationChanged(Android.Accessibilityservice.AccessibilityService.MagnificationController arg0, Android.Graphics.Region arg1, Android.Accessibilityservice.MagnificationConfig arg2)
                {
                    OnMagnificationChangedDefault(arg0, arg1, arg2);
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region OnMagnificationChangedListenerDirect
            public partial class OnMagnificationChangedListenerDirect
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.OnMagnificationChangedListener.html#onMagnificationChanged(android.accessibilityservice.AccessibilityService.MagnificationController,android.graphics.Region,float,float,float)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Accessibilityservice.AccessibilityService.MagnificationController"/></param>
                /// <param name="arg1"><see cref="Android.Graphics.Region"/></param>
                /// <param name="arg2"><see cref="float"/></param>
                /// <param name="arg3"><see cref="float"/></param>
                /// <param name="arg4"><see cref="float"/></param>
                [global::System.Obsolete()]
                public override void OnMagnificationChanged(Android.Accessibilityservice.AccessibilityService.MagnificationController arg0, Android.Graphics.Region arg1, float arg2, float arg3, float arg4)
                {
                    IExecute("onMagnificationChanged", arg0, arg1, arg2, arg3, arg4);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.OnMagnificationChangedListener.html#onMagnificationChanged(android.accessibilityservice.AccessibilityService.MagnificationController,android.graphics.Region,android.accessibilityservice.MagnificationConfig)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Accessibilityservice.AccessibilityService.MagnificationController"/></param>
                /// <param name="arg1"><see cref="Android.Graphics.Region"/></param>
                /// <param name="arg2"><see cref="Android.Accessibilityservice.MagnificationConfig"/></param>
                public override void OnMagnificationChanged(Android.Accessibilityservice.AccessibilityService.MagnificationController arg0, Android.Graphics.Region arg1, Android.Accessibilityservice.MagnificationConfig arg2)
                {
                    IExecute("onMagnificationChanged", arg0, arg1, arg2);
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ScreenshotResult
        public partial class ScreenshotResult
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.ScreenshotResult.html#getColorSpace()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.ColorSpace"/></returns>
            public Android.Graphics.ColorSpace GetColorSpace()
            {
                return IExecuteWithSignature<Android.Graphics.ColorSpace>("getColorSpace", "()Landroid/graphics/ColorSpace;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.ScreenshotResult.html#getHardwareBuffer()"/>
            /// </summary>
            /// <returns><see cref="Android.Hardware.HardwareBuffer"/></returns>
            public Android.Hardware.HardwareBuffer GetHardwareBuffer()
            {
                return IExecuteWithSignature<Android.Hardware.HardwareBuffer>("getHardwareBuffer", "()Landroid/hardware/HardwareBuffer;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.ScreenshotResult.html#getTimestamp()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetTimestamp()
            {
                return IExecuteWithSignature<long>("getTimestamp", "()J");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SoftKeyboardController
        public partial class SoftKeyboardController
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.html#ENABLE_IME_FAIL_BY_ADMIN"/>
            /// </summary>
            public static int ENABLE_IME_FAIL_BY_ADMIN { get { if (!_ENABLE_IME_FAIL_BY_ADMINReady) { _ENABLE_IME_FAIL_BY_ADMINContent = SGetField<int>(LocalBridgeClazz, "ENABLE_IME_FAIL_BY_ADMIN"); _ENABLE_IME_FAIL_BY_ADMINReady = true; } return _ENABLE_IME_FAIL_BY_ADMINContent; } }
            private static int _ENABLE_IME_FAIL_BY_ADMINContent = default;
            private static bool _ENABLE_IME_FAIL_BY_ADMINReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.html#ENABLE_IME_FAIL_UNKNOWN"/>
            /// </summary>
            public static int ENABLE_IME_FAIL_UNKNOWN { get { if (!_ENABLE_IME_FAIL_UNKNOWNReady) { _ENABLE_IME_FAIL_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "ENABLE_IME_FAIL_UNKNOWN"); _ENABLE_IME_FAIL_UNKNOWNReady = true; } return _ENABLE_IME_FAIL_UNKNOWNContent; } }
            private static int _ENABLE_IME_FAIL_UNKNOWNContent = default;
            private static bool _ENABLE_IME_FAIL_UNKNOWNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.html#ENABLE_IME_SUCCESS"/>
            /// </summary>
            public static int ENABLE_IME_SUCCESS { get { if (!_ENABLE_IME_SUCCESSReady) { _ENABLE_IME_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "ENABLE_IME_SUCCESS"); _ENABLE_IME_SUCCESSReady = true; } return _ENABLE_IME_SUCCESSContent; } }
            private static int _ENABLE_IME_SUCCESSContent = default;
            private static bool _ENABLE_IME_SUCCESSReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.html#removeOnShowModeChangedListener(android.accessibilityservice.AccessibilityService.SoftKeyboardController.OnShowModeChangedListener)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Accessibilityservice.AccessibilityService.SoftKeyboardController.OnShowModeChangedListener"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool RemoveOnShowModeChangedListener(Android.Accessibilityservice.AccessibilityService.SoftKeyboardController.OnShowModeChangedListener arg0)
            {
                return IExecuteWithSignature<bool>("removeOnShowModeChangedListener", "(Landroid/accessibilityservice/AccessibilityService$SoftKeyboardController$OnShowModeChangedListener;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.html#setShowMode(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool SetShowMode(int arg0)
            {
                return IExecuteWithSignature<bool>("setShowMode", "(I)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.html#switchToInputMethod(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool SwitchToInputMethod(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<bool>("switchToInputMethod", "(Ljava/lang/String;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.html#getShowMode()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetShowMode()
            {
                return IExecuteWithSignature<int>("getShowMode", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.html#setInputMethodEnabled(java.lang.String,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            /// <returns><see cref="int"/></returns>
            /// <exception cref="Java.Lang.SecurityException"/>
            public int SetInputMethodEnabled(Java.Lang.String arg0, bool arg1)
            {
                return IExecute<int>("setInputMethodEnabled", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.html#addOnShowModeChangedListener(android.accessibilityservice.AccessibilityService.SoftKeyboardController.OnShowModeChangedListener,android.os.Handler)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Accessibilityservice.AccessibilityService.SoftKeyboardController.OnShowModeChangedListener"/></param>
            /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
            public void AddOnShowModeChangedListener(Android.Accessibilityservice.AccessibilityService.SoftKeyboardController.OnShowModeChangedListener arg0, Android.Os.Handler arg1)
            {
                IExecute("addOnShowModeChangedListener", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.html#addOnShowModeChangedListener(android.accessibilityservice.AccessibilityService.SoftKeyboardController.OnShowModeChangedListener)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Accessibilityservice.AccessibilityService.SoftKeyboardController.OnShowModeChangedListener"/></param>
            public void AddOnShowModeChangedListener(Android.Accessibilityservice.AccessibilityService.SoftKeyboardController.OnShowModeChangedListener arg0)
            {
                IExecuteWithSignature("addOnShowModeChangedListener", "(Landroid/accessibilityservice/AccessibilityService$SoftKeyboardController$OnShowModeChangedListener;)V", arg0);
            }

            #endregion

            #region Nested classes
            #region OnShowModeChangedListener
            public partial class OnShowModeChangedListener
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// Handlers initializer for <see cref="OnShowModeChangedListener"/>
                /// </summary>
                protected virtual void InitializeHandlers()
                {
                    AddEventHandler("onShowModeChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Accessibilityservice.AccessibilityService.SoftKeyboardController>>>(OnShowModeChangedEventHandler));

                }

                /// <summary>
                /// Handler for <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.OnShowModeChangedListener.html#onShowModeChanged(android.accessibilityservice.AccessibilityService.SoftKeyboardController,int)"/>
                /// </summary>
                /// <remarks>If <see cref="OnOnShowModeChanged"/> has a value it takes precedence over corresponding class method</remarks>
                public global::System.Action<Android.Accessibilityservice.AccessibilityService.SoftKeyboardController, int> OnOnShowModeChanged { get; set; } = null;

                void OnShowModeChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Accessibilityservice.AccessibilityService.SoftKeyboardController>> data)
                {
                    var methodToExecute = (OnOnShowModeChanged != null) ? OnOnShowModeChanged : OnShowModeChanged;
                    methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
                }

                /// <summary>
                /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.OnShowModeChangedListener.html#onShowModeChanged(android.accessibilityservice.AccessibilityService.SoftKeyboardController,int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Accessibilityservice.AccessibilityService.SoftKeyboardController"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                public virtual void OnShowModeChanged(Android.Accessibilityservice.AccessibilityService.SoftKeyboardController arg0, int arg1)
                {
                    
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region OnShowModeChangedListenerDirect
            public partial class OnShowModeChangedListenerDirect
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.SoftKeyboardController.OnShowModeChangedListener.html#onShowModeChanged(android.accessibilityservice.AccessibilityService.SoftKeyboardController,int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Accessibilityservice.AccessibilityService.SoftKeyboardController"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                public override void OnShowModeChanged(Android.Accessibilityservice.AccessibilityService.SoftKeyboardController arg0, int arg1)
                {
                    IExecute("onShowModeChanged", arg0, arg1);
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TakeScreenshotCallback
        public partial class TakeScreenshotCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.TakeScreenshotCallback.html#onFailure(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnFailure(int arg0)
            {
                IExecuteWithSignature("onFailure", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.TakeScreenshotCallback.html#onSuccess(android.accessibilityservice.AccessibilityService.ScreenshotResult)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Accessibilityservice.AccessibilityService.ScreenshotResult"/></param>
            public void OnSuccess(Android.Accessibilityservice.AccessibilityService.ScreenshotResult arg0)
            {
                IExecuteWithSignature("onSuccess", "(Landroid/accessibilityservice/AccessibilityService$ScreenshotResult;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
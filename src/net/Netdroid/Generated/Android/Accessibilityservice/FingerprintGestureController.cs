/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Accessibilityservice
{
    #region FingerprintGestureController declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html"/>
    /// </summary>
    public partial class FingerprintGestureController : MASES.JCOBridge.C2JBridge.JVMBridgeBase<FingerprintGestureController>
    {
        const string _bridgeClassName = "android.accessibilityservice.FingerprintGestureController";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public FingerprintGestureController() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public FingerprintGestureController(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region FingerprintGestureCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.FingerprintGestureCallback.html"/>
        /// </summary>
        public partial class FingerprintGestureCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<FingerprintGestureCallback>
        {
            const string _bridgeClassName = "android.accessibilityservice.FingerprintGestureController$FingerprintGestureCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("FingerprintGestureCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public FingerprintGestureCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("FingerprintGestureCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public FingerprintGestureCallback(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region FingerprintGestureController implementation
    public partial class FingerprintGestureController
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html#FINGERPRINT_GESTURE_SWIPE_DOWN"/>
        /// </summary>
        public static int FINGERPRINT_GESTURE_SWIPE_DOWN { get { if (!_FINGERPRINT_GESTURE_SWIPE_DOWNReady) { _FINGERPRINT_GESTURE_SWIPE_DOWNContent = SGetField<int>(LocalBridgeClazz, "FINGERPRINT_GESTURE_SWIPE_DOWN"); _FINGERPRINT_GESTURE_SWIPE_DOWNReady = true; } return _FINGERPRINT_GESTURE_SWIPE_DOWNContent; } }
        private static int _FINGERPRINT_GESTURE_SWIPE_DOWNContent = default;
        private static bool _FINGERPRINT_GESTURE_SWIPE_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html#FINGERPRINT_GESTURE_SWIPE_LEFT"/>
        /// </summary>
        public static int FINGERPRINT_GESTURE_SWIPE_LEFT { get { if (!_FINGERPRINT_GESTURE_SWIPE_LEFTReady) { _FINGERPRINT_GESTURE_SWIPE_LEFTContent = SGetField<int>(LocalBridgeClazz, "FINGERPRINT_GESTURE_SWIPE_LEFT"); _FINGERPRINT_GESTURE_SWIPE_LEFTReady = true; } return _FINGERPRINT_GESTURE_SWIPE_LEFTContent; } }
        private static int _FINGERPRINT_GESTURE_SWIPE_LEFTContent = default;
        private static bool _FINGERPRINT_GESTURE_SWIPE_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html#FINGERPRINT_GESTURE_SWIPE_RIGHT"/>
        /// </summary>
        public static int FINGERPRINT_GESTURE_SWIPE_RIGHT { get { if (!_FINGERPRINT_GESTURE_SWIPE_RIGHTReady) { _FINGERPRINT_GESTURE_SWIPE_RIGHTContent = SGetField<int>(LocalBridgeClazz, "FINGERPRINT_GESTURE_SWIPE_RIGHT"); _FINGERPRINT_GESTURE_SWIPE_RIGHTReady = true; } return _FINGERPRINT_GESTURE_SWIPE_RIGHTContent; } }
        private static int _FINGERPRINT_GESTURE_SWIPE_RIGHTContent = default;
        private static bool _FINGERPRINT_GESTURE_SWIPE_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html#FINGERPRINT_GESTURE_SWIPE_UP"/>
        /// </summary>
        public static int FINGERPRINT_GESTURE_SWIPE_UP { get { if (!_FINGERPRINT_GESTURE_SWIPE_UPReady) { _FINGERPRINT_GESTURE_SWIPE_UPContent = SGetField<int>(LocalBridgeClazz, "FINGERPRINT_GESTURE_SWIPE_UP"); _FINGERPRINT_GESTURE_SWIPE_UPReady = true; } return _FINGERPRINT_GESTURE_SWIPE_UPContent; } }
        private static int _FINGERPRINT_GESTURE_SWIPE_UPContent = default;
        private static bool _FINGERPRINT_GESTURE_SWIPE_UPReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html#isGestureDetectionAvailable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsGestureDetectionAvailable()
        {
            return IExecuteWithSignature<bool>("isGestureDetectionAvailable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html#registerFingerprintGestureCallback(android.accessibilityservice.FingerprintGestureController.FingerprintGestureCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Accessibilityservice.FingerprintGestureController.FingerprintGestureCallback"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void RegisterFingerprintGestureCallback(Android.Accessibilityservice.FingerprintGestureController.FingerprintGestureCallback arg0, Android.Os.Handler arg1)
        {
            IExecute("registerFingerprintGestureCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html#unregisterFingerprintGestureCallback(android.accessibilityservice.FingerprintGestureController.FingerprintGestureCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Accessibilityservice.FingerprintGestureController.FingerprintGestureCallback"/></param>
        public void UnregisterFingerprintGestureCallback(Android.Accessibilityservice.FingerprintGestureController.FingerprintGestureCallback arg0)
        {
            IExecuteWithSignature("unregisterFingerprintGestureCallback", "(Landroid/accessibilityservice/FingerprintGestureController$FingerprintGestureCallback;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region FingerprintGestureCallback implementation
        public partial class FingerprintGestureCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.FingerprintGestureCallback.html#onGestureDetected(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void OnGestureDetected(int arg0)
            {
                IExecuteWithSignature("onGestureDetected", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.FingerprintGestureCallback.html#onGestureDetectionAvailabilityChanged(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void OnGestureDetectionAvailabilityChanged(bool arg0)
            {
                IExecuteWithSignature("onGestureDetectionAvailabilityChanged", "(Z)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
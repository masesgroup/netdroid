/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Telephony
{
    #region TelephonyDisplayInfo
    public partial class TelephonyDisplayInfo
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyDisplayInfo.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyDisplayInfo.html#OVERRIDE_NETWORK_TYPE_LTE_ADVANCED_PRO"/>
        /// </summary>
        public static int OVERRIDE_NETWORK_TYPE_LTE_ADVANCED_PRO { get { if (!_OVERRIDE_NETWORK_TYPE_LTE_ADVANCED_PROReady) { _OVERRIDE_NETWORK_TYPE_LTE_ADVANCED_PROContent = SGetField<int>(LocalBridgeClazz, "OVERRIDE_NETWORK_TYPE_LTE_ADVANCED_PRO"); _OVERRIDE_NETWORK_TYPE_LTE_ADVANCED_PROReady = true; } return _OVERRIDE_NETWORK_TYPE_LTE_ADVANCED_PROContent; } }
        private static int _OVERRIDE_NETWORK_TYPE_LTE_ADVANCED_PROContent = default;
        private static bool _OVERRIDE_NETWORK_TYPE_LTE_ADVANCED_PROReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyDisplayInfo.html#OVERRIDE_NETWORK_TYPE_LTE_CA"/>
        /// </summary>
        public static int OVERRIDE_NETWORK_TYPE_LTE_CA { get { if (!_OVERRIDE_NETWORK_TYPE_LTE_CAReady) { _OVERRIDE_NETWORK_TYPE_LTE_CAContent = SGetField<int>(LocalBridgeClazz, "OVERRIDE_NETWORK_TYPE_LTE_CA"); _OVERRIDE_NETWORK_TYPE_LTE_CAReady = true; } return _OVERRIDE_NETWORK_TYPE_LTE_CAContent; } }
        private static int _OVERRIDE_NETWORK_TYPE_LTE_CAContent = default;
        private static bool _OVERRIDE_NETWORK_TYPE_LTE_CAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyDisplayInfo.html#OVERRIDE_NETWORK_TYPE_NONE"/>
        /// </summary>
        public static int OVERRIDE_NETWORK_TYPE_NONE { get { if (!_OVERRIDE_NETWORK_TYPE_NONEReady) { _OVERRIDE_NETWORK_TYPE_NONEContent = SGetField<int>(LocalBridgeClazz, "OVERRIDE_NETWORK_TYPE_NONE"); _OVERRIDE_NETWORK_TYPE_NONEReady = true; } return _OVERRIDE_NETWORK_TYPE_NONEContent; } }
        private static int _OVERRIDE_NETWORK_TYPE_NONEContent = default;
        private static bool _OVERRIDE_NETWORK_TYPE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyDisplayInfo.html#OVERRIDE_NETWORK_TYPE_NR_ADVANCED"/>
        /// </summary>
        public static int OVERRIDE_NETWORK_TYPE_NR_ADVANCED { get { if (!_OVERRIDE_NETWORK_TYPE_NR_ADVANCEDReady) { _OVERRIDE_NETWORK_TYPE_NR_ADVANCEDContent = SGetField<int>(LocalBridgeClazz, "OVERRIDE_NETWORK_TYPE_NR_ADVANCED"); _OVERRIDE_NETWORK_TYPE_NR_ADVANCEDReady = true; } return _OVERRIDE_NETWORK_TYPE_NR_ADVANCEDContent; } }
        private static int _OVERRIDE_NETWORK_TYPE_NR_ADVANCEDContent = default;
        private static bool _OVERRIDE_NETWORK_TYPE_NR_ADVANCEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyDisplayInfo.html#OVERRIDE_NETWORK_TYPE_NR_NSA"/>
        /// </summary>
        public static int OVERRIDE_NETWORK_TYPE_NR_NSA { get { if (!_OVERRIDE_NETWORK_TYPE_NR_NSAReady) { _OVERRIDE_NETWORK_TYPE_NR_NSAContent = SGetField<int>(LocalBridgeClazz, "OVERRIDE_NETWORK_TYPE_NR_NSA"); _OVERRIDE_NETWORK_TYPE_NR_NSAReady = true; } return _OVERRIDE_NETWORK_TYPE_NR_NSAContent; } }
        private static int _OVERRIDE_NETWORK_TYPE_NR_NSAContent = default;
        private static bool _OVERRIDE_NETWORK_TYPE_NR_NSAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyDisplayInfo.html#OVERRIDE_NETWORK_TYPE_NR_NSA_MMWAVE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int OVERRIDE_NETWORK_TYPE_NR_NSA_MMWAVE { get { if (!_OVERRIDE_NETWORK_TYPE_NR_NSA_MMWAVEReady) { _OVERRIDE_NETWORK_TYPE_NR_NSA_MMWAVEContent = SGetField<int>(LocalBridgeClazz, "OVERRIDE_NETWORK_TYPE_NR_NSA_MMWAVE"); _OVERRIDE_NETWORK_TYPE_NR_NSA_MMWAVEReady = true; } return _OVERRIDE_NETWORK_TYPE_NR_NSA_MMWAVEContent; } }
        private static int _OVERRIDE_NETWORK_TYPE_NR_NSA_MMWAVEContent = default;
        private static bool _OVERRIDE_NETWORK_TYPE_NR_NSA_MMWAVEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyDisplayInfo.html#isRoaming()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsRoaming()
        {
            return IExecuteWithSignature<bool>("isRoaming", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyDisplayInfo.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyDisplayInfo.html#getNetworkType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNetworkType()
        {
            return IExecuteWithSignature<int>("getNetworkType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyDisplayInfo.html#getOverrideNetworkType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetOverrideNetworkType()
        {
            return IExecuteWithSignature<int>("getOverrideNetworkType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyDisplayInfo.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
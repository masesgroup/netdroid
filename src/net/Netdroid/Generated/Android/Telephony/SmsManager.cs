/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Telephony
{
    #region SmsManager
    public partial class SmsManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_CONFIGURATION_ERROR"/>
        /// </summary>
        public static int MMS_ERROR_CONFIGURATION_ERROR { get { if (!_MMS_ERROR_CONFIGURATION_ERRORReady) { _MMS_ERROR_CONFIGURATION_ERRORContent = SGetField<int>(LocalBridgeClazz, "MMS_ERROR_CONFIGURATION_ERROR"); _MMS_ERROR_CONFIGURATION_ERRORReady = true; } return _MMS_ERROR_CONFIGURATION_ERRORContent; } }
        private static int _MMS_ERROR_CONFIGURATION_ERRORContent = default;
        private static bool _MMS_ERROR_CONFIGURATION_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_DATA_DISABLED"/>
        /// </summary>
        public static int MMS_ERROR_DATA_DISABLED { get { if (!_MMS_ERROR_DATA_DISABLEDReady) { _MMS_ERROR_DATA_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "MMS_ERROR_DATA_DISABLED"); _MMS_ERROR_DATA_DISABLEDReady = true; } return _MMS_ERROR_DATA_DISABLEDContent; } }
        private static int _MMS_ERROR_DATA_DISABLEDContent = default;
        private static bool _MMS_ERROR_DATA_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_HTTP_FAILURE"/>
        /// </summary>
        public static int MMS_ERROR_HTTP_FAILURE { get { if (!_MMS_ERROR_HTTP_FAILUREReady) { _MMS_ERROR_HTTP_FAILUREContent = SGetField<int>(LocalBridgeClazz, "MMS_ERROR_HTTP_FAILURE"); _MMS_ERROR_HTTP_FAILUREReady = true; } return _MMS_ERROR_HTTP_FAILUREContent; } }
        private static int _MMS_ERROR_HTTP_FAILUREContent = default;
        private static bool _MMS_ERROR_HTTP_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_INACTIVE_SUBSCRIPTION"/>
        /// </summary>
        public static int MMS_ERROR_INACTIVE_SUBSCRIPTION { get { if (!_MMS_ERROR_INACTIVE_SUBSCRIPTIONReady) { _MMS_ERROR_INACTIVE_SUBSCRIPTIONContent = SGetField<int>(LocalBridgeClazz, "MMS_ERROR_INACTIVE_SUBSCRIPTION"); _MMS_ERROR_INACTIVE_SUBSCRIPTIONReady = true; } return _MMS_ERROR_INACTIVE_SUBSCRIPTIONContent; } }
        private static int _MMS_ERROR_INACTIVE_SUBSCRIPTIONContent = default;
        private static bool _MMS_ERROR_INACTIVE_SUBSCRIPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_INVALID_APN"/>
        /// </summary>
        public static int MMS_ERROR_INVALID_APN { get { if (!_MMS_ERROR_INVALID_APNReady) { _MMS_ERROR_INVALID_APNContent = SGetField<int>(LocalBridgeClazz, "MMS_ERROR_INVALID_APN"); _MMS_ERROR_INVALID_APNReady = true; } return _MMS_ERROR_INVALID_APNContent; } }
        private static int _MMS_ERROR_INVALID_APNContent = default;
        private static bool _MMS_ERROR_INVALID_APNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_INVALID_SUBSCRIPTION_ID"/>
        /// </summary>
        public static int MMS_ERROR_INVALID_SUBSCRIPTION_ID { get { if (!_MMS_ERROR_INVALID_SUBSCRIPTION_IDReady) { _MMS_ERROR_INVALID_SUBSCRIPTION_IDContent = SGetField<int>(LocalBridgeClazz, "MMS_ERROR_INVALID_SUBSCRIPTION_ID"); _MMS_ERROR_INVALID_SUBSCRIPTION_IDReady = true; } return _MMS_ERROR_INVALID_SUBSCRIPTION_IDContent; } }
        private static int _MMS_ERROR_INVALID_SUBSCRIPTION_IDContent = default;
        private static bool _MMS_ERROR_INVALID_SUBSCRIPTION_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_IO_ERROR"/>
        /// </summary>
        public static int MMS_ERROR_IO_ERROR { get { if (!_MMS_ERROR_IO_ERRORReady) { _MMS_ERROR_IO_ERRORContent = SGetField<int>(LocalBridgeClazz, "MMS_ERROR_IO_ERROR"); _MMS_ERROR_IO_ERRORReady = true; } return _MMS_ERROR_IO_ERRORContent; } }
        private static int _MMS_ERROR_IO_ERRORContent = default;
        private static bool _MMS_ERROR_IO_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_NO_DATA_NETWORK"/>
        /// </summary>
        public static int MMS_ERROR_NO_DATA_NETWORK { get { if (!_MMS_ERROR_NO_DATA_NETWORKReady) { _MMS_ERROR_NO_DATA_NETWORKContent = SGetField<int>(LocalBridgeClazz, "MMS_ERROR_NO_DATA_NETWORK"); _MMS_ERROR_NO_DATA_NETWORKReady = true; } return _MMS_ERROR_NO_DATA_NETWORKContent; } }
        private static int _MMS_ERROR_NO_DATA_NETWORKContent = default;
        private static bool _MMS_ERROR_NO_DATA_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_RETRY"/>
        /// </summary>
        public static int MMS_ERROR_RETRY { get { if (!_MMS_ERROR_RETRYReady) { _MMS_ERROR_RETRYContent = SGetField<int>(LocalBridgeClazz, "MMS_ERROR_RETRY"); _MMS_ERROR_RETRYReady = true; } return _MMS_ERROR_RETRYContent; } }
        private static int _MMS_ERROR_RETRYContent = default;
        private static bool _MMS_ERROR_RETRYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_UNABLE_CONNECT_MMS"/>
        /// </summary>
        public static int MMS_ERROR_UNABLE_CONNECT_MMS { get { if (!_MMS_ERROR_UNABLE_CONNECT_MMSReady) { _MMS_ERROR_UNABLE_CONNECT_MMSContent = SGetField<int>(LocalBridgeClazz, "MMS_ERROR_UNABLE_CONNECT_MMS"); _MMS_ERROR_UNABLE_CONNECT_MMSReady = true; } return _MMS_ERROR_UNABLE_CONNECT_MMSContent; } }
        private static int _MMS_ERROR_UNABLE_CONNECT_MMSContent = default;
        private static bool _MMS_ERROR_UNABLE_CONNECT_MMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_ERROR_UNSPECIFIED"/>
        /// </summary>
        public static int MMS_ERROR_UNSPECIFIED { get { if (!_MMS_ERROR_UNSPECIFIEDReady) { _MMS_ERROR_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "MMS_ERROR_UNSPECIFIED"); _MMS_ERROR_UNSPECIFIEDReady = true; } return _MMS_ERROR_UNSPECIFIEDContent; } }
        private static int _MMS_ERROR_UNSPECIFIEDContent = default;
        private static bool _MMS_ERROR_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_BLUETOOTH_DISCONNECTED"/>
        /// </summary>
        public static int RESULT_BLUETOOTH_DISCONNECTED { get { if (!_RESULT_BLUETOOTH_DISCONNECTEDReady) { _RESULT_BLUETOOTH_DISCONNECTEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_BLUETOOTH_DISCONNECTED"); _RESULT_BLUETOOTH_DISCONNECTEDReady = true; } return _RESULT_BLUETOOTH_DISCONNECTEDContent; } }
        private static int _RESULT_BLUETOOTH_DISCONNECTEDContent = default;
        private static bool _RESULT_BLUETOOTH_DISCONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_CANCELLED"/>
        /// </summary>
        public static int RESULT_CANCELLED { get { if (!_RESULT_CANCELLEDReady) { _RESULT_CANCELLEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_CANCELLED"); _RESULT_CANCELLEDReady = true; } return _RESULT_CANCELLEDContent; } }
        private static int _RESULT_CANCELLEDContent = default;
        private static bool _RESULT_CANCELLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ENCODING_ERROR"/>
        /// </summary>
        public static int RESULT_ENCODING_ERROR { get { if (!_RESULT_ENCODING_ERRORReady) { _RESULT_ENCODING_ERRORContent = SGetField<int>(LocalBridgeClazz, "RESULT_ENCODING_ERROR"); _RESULT_ENCODING_ERRORReady = true; } return _RESULT_ENCODING_ERRORContent; } }
        private static int _RESULT_ENCODING_ERRORContent = default;
        private static bool _RESULT_ENCODING_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ERROR_FDN_CHECK_FAILURE"/>
        /// </summary>
        public static int RESULT_ERROR_FDN_CHECK_FAILURE { get { if (!_RESULT_ERROR_FDN_CHECK_FAILUREReady) { _RESULT_ERROR_FDN_CHECK_FAILUREContent = SGetField<int>(LocalBridgeClazz, "RESULT_ERROR_FDN_CHECK_FAILURE"); _RESULT_ERROR_FDN_CHECK_FAILUREReady = true; } return _RESULT_ERROR_FDN_CHECK_FAILUREContent; } }
        private static int _RESULT_ERROR_FDN_CHECK_FAILUREContent = default;
        private static bool _RESULT_ERROR_FDN_CHECK_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ERROR_GENERIC_FAILURE"/>
        /// </summary>
        public static int RESULT_ERROR_GENERIC_FAILURE { get { if (!_RESULT_ERROR_GENERIC_FAILUREReady) { _RESULT_ERROR_GENERIC_FAILUREContent = SGetField<int>(LocalBridgeClazz, "RESULT_ERROR_GENERIC_FAILURE"); _RESULT_ERROR_GENERIC_FAILUREReady = true; } return _RESULT_ERROR_GENERIC_FAILUREContent; } }
        private static int _RESULT_ERROR_GENERIC_FAILUREContent = default;
        private static bool _RESULT_ERROR_GENERIC_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ERROR_LIMIT_EXCEEDED"/>
        /// </summary>
        public static int RESULT_ERROR_LIMIT_EXCEEDED { get { if (!_RESULT_ERROR_LIMIT_EXCEEDEDReady) { _RESULT_ERROR_LIMIT_EXCEEDEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_ERROR_LIMIT_EXCEEDED"); _RESULT_ERROR_LIMIT_EXCEEDEDReady = true; } return _RESULT_ERROR_LIMIT_EXCEEDEDContent; } }
        private static int _RESULT_ERROR_LIMIT_EXCEEDEDContent = default;
        private static bool _RESULT_ERROR_LIMIT_EXCEEDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ERROR_NO_SERVICE"/>
        /// </summary>
        public static int RESULT_ERROR_NO_SERVICE { get { if (!_RESULT_ERROR_NO_SERVICEReady) { _RESULT_ERROR_NO_SERVICEContent = SGetField<int>(LocalBridgeClazz, "RESULT_ERROR_NO_SERVICE"); _RESULT_ERROR_NO_SERVICEReady = true; } return _RESULT_ERROR_NO_SERVICEContent; } }
        private static int _RESULT_ERROR_NO_SERVICEContent = default;
        private static bool _RESULT_ERROR_NO_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ERROR_NONE"/>
        /// </summary>
        public static int RESULT_ERROR_NONE { get { if (!_RESULT_ERROR_NONEReady) { _RESULT_ERROR_NONEContent = SGetField<int>(LocalBridgeClazz, "RESULT_ERROR_NONE"); _RESULT_ERROR_NONEReady = true; } return _RESULT_ERROR_NONEContent; } }
        private static int _RESULT_ERROR_NONEContent = default;
        private static bool _RESULT_ERROR_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ERROR_NULL_PDU"/>
        /// </summary>
        public static int RESULT_ERROR_NULL_PDU { get { if (!_RESULT_ERROR_NULL_PDUReady) { _RESULT_ERROR_NULL_PDUContent = SGetField<int>(LocalBridgeClazz, "RESULT_ERROR_NULL_PDU"); _RESULT_ERROR_NULL_PDUReady = true; } return _RESULT_ERROR_NULL_PDUContent; } }
        private static int _RESULT_ERROR_NULL_PDUContent = default;
        private static bool _RESULT_ERROR_NULL_PDUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ERROR_RADIO_OFF"/>
        /// </summary>
        public static int RESULT_ERROR_RADIO_OFF { get { if (!_RESULT_ERROR_RADIO_OFFReady) { _RESULT_ERROR_RADIO_OFFContent = SGetField<int>(LocalBridgeClazz, "RESULT_ERROR_RADIO_OFF"); _RESULT_ERROR_RADIO_OFFReady = true; } return _RESULT_ERROR_RADIO_OFFContent; } }
        private static int _RESULT_ERROR_RADIO_OFFContent = default;
        private static bool _RESULT_ERROR_RADIO_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ERROR_SHORT_CODE_NEVER_ALLOWED"/>
        /// </summary>
        public static int RESULT_ERROR_SHORT_CODE_NEVER_ALLOWED { get { if (!_RESULT_ERROR_SHORT_CODE_NEVER_ALLOWEDReady) { _RESULT_ERROR_SHORT_CODE_NEVER_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_ERROR_SHORT_CODE_NEVER_ALLOWED"); _RESULT_ERROR_SHORT_CODE_NEVER_ALLOWEDReady = true; } return _RESULT_ERROR_SHORT_CODE_NEVER_ALLOWEDContent; } }
        private static int _RESULT_ERROR_SHORT_CODE_NEVER_ALLOWEDContent = default;
        private static bool _RESULT_ERROR_SHORT_CODE_NEVER_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_ERROR_SHORT_CODE_NOT_ALLOWED"/>
        /// </summary>
        public static int RESULT_ERROR_SHORT_CODE_NOT_ALLOWED { get { if (!_RESULT_ERROR_SHORT_CODE_NOT_ALLOWEDReady) { _RESULT_ERROR_SHORT_CODE_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_ERROR_SHORT_CODE_NOT_ALLOWED"); _RESULT_ERROR_SHORT_CODE_NOT_ALLOWEDReady = true; } return _RESULT_ERROR_SHORT_CODE_NOT_ALLOWEDContent; } }
        private static int _RESULT_ERROR_SHORT_CODE_NOT_ALLOWEDContent = default;
        private static bool _RESULT_ERROR_SHORT_CODE_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_INTERNAL_ERROR"/>
        /// </summary>
        public static int RESULT_INTERNAL_ERROR { get { if (!_RESULT_INTERNAL_ERRORReady) { _RESULT_INTERNAL_ERRORContent = SGetField<int>(LocalBridgeClazz, "RESULT_INTERNAL_ERROR"); _RESULT_INTERNAL_ERRORReady = true; } return _RESULT_INTERNAL_ERRORContent; } }
        private static int _RESULT_INTERNAL_ERRORContent = default;
        private static bool _RESULT_INTERNAL_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_INVALID_ARGUMENTS"/>
        /// </summary>
        public static int RESULT_INVALID_ARGUMENTS { get { if (!_RESULT_INVALID_ARGUMENTSReady) { _RESULT_INVALID_ARGUMENTSContent = SGetField<int>(LocalBridgeClazz, "RESULT_INVALID_ARGUMENTS"); _RESULT_INVALID_ARGUMENTSReady = true; } return _RESULT_INVALID_ARGUMENTSContent; } }
        private static int _RESULT_INVALID_ARGUMENTSContent = default;
        private static bool _RESULT_INVALID_ARGUMENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_INVALID_BLUETOOTH_ADDRESS"/>
        /// </summary>
        public static int RESULT_INVALID_BLUETOOTH_ADDRESS { get { if (!_RESULT_INVALID_BLUETOOTH_ADDRESSReady) { _RESULT_INVALID_BLUETOOTH_ADDRESSContent = SGetField<int>(LocalBridgeClazz, "RESULT_INVALID_BLUETOOTH_ADDRESS"); _RESULT_INVALID_BLUETOOTH_ADDRESSReady = true; } return _RESULT_INVALID_BLUETOOTH_ADDRESSContent; } }
        private static int _RESULT_INVALID_BLUETOOTH_ADDRESSContent = default;
        private static bool _RESULT_INVALID_BLUETOOTH_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_INVALID_SMS_FORMAT"/>
        /// </summary>
        public static int RESULT_INVALID_SMS_FORMAT { get { if (!_RESULT_INVALID_SMS_FORMATReady) { _RESULT_INVALID_SMS_FORMATContent = SGetField<int>(LocalBridgeClazz, "RESULT_INVALID_SMS_FORMAT"); _RESULT_INVALID_SMS_FORMATReady = true; } return _RESULT_INVALID_SMS_FORMATContent; } }
        private static int _RESULT_INVALID_SMS_FORMATContent = default;
        private static bool _RESULT_INVALID_SMS_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_INVALID_SMSC_ADDRESS"/>
        /// </summary>
        public static int RESULT_INVALID_SMSC_ADDRESS { get { if (!_RESULT_INVALID_SMSC_ADDRESSReady) { _RESULT_INVALID_SMSC_ADDRESSContent = SGetField<int>(LocalBridgeClazz, "RESULT_INVALID_SMSC_ADDRESS"); _RESULT_INVALID_SMSC_ADDRESSReady = true; } return _RESULT_INVALID_SMSC_ADDRESSContent; } }
        private static int _RESULT_INVALID_SMSC_ADDRESSContent = default;
        private static bool _RESULT_INVALID_SMSC_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_INVALID_STATE"/>
        /// </summary>
        public static int RESULT_INVALID_STATE { get { if (!_RESULT_INVALID_STATEReady) { _RESULT_INVALID_STATEContent = SGetField<int>(LocalBridgeClazz, "RESULT_INVALID_STATE"); _RESULT_INVALID_STATEReady = true; } return _RESULT_INVALID_STATEContent; } }
        private static int _RESULT_INVALID_STATEContent = default;
        private static bool _RESULT_INVALID_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_MODEM_ERROR"/>
        /// </summary>
        public static int RESULT_MODEM_ERROR { get { if (!_RESULT_MODEM_ERRORReady) { _RESULT_MODEM_ERRORContent = SGetField<int>(LocalBridgeClazz, "RESULT_MODEM_ERROR"); _RESULT_MODEM_ERRORReady = true; } return _RESULT_MODEM_ERRORContent; } }
        private static int _RESULT_MODEM_ERRORContent = default;
        private static bool _RESULT_MODEM_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_NETWORK_ERROR"/>
        /// </summary>
        public static int RESULT_NETWORK_ERROR { get { if (!_RESULT_NETWORK_ERRORReady) { _RESULT_NETWORK_ERRORContent = SGetField<int>(LocalBridgeClazz, "RESULT_NETWORK_ERROR"); _RESULT_NETWORK_ERRORReady = true; } return _RESULT_NETWORK_ERRORContent; } }
        private static int _RESULT_NETWORK_ERRORContent = default;
        private static bool _RESULT_NETWORK_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_NETWORK_REJECT"/>
        /// </summary>
        public static int RESULT_NETWORK_REJECT { get { if (!_RESULT_NETWORK_REJECTReady) { _RESULT_NETWORK_REJECTContent = SGetField<int>(LocalBridgeClazz, "RESULT_NETWORK_REJECT"); _RESULT_NETWORK_REJECTReady = true; } return _RESULT_NETWORK_REJECTContent; } }
        private static int _RESULT_NETWORK_REJECTContent = default;
        private static bool _RESULT_NETWORK_REJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_NO_BLUETOOTH_SERVICE"/>
        /// </summary>
        public static int RESULT_NO_BLUETOOTH_SERVICE { get { if (!_RESULT_NO_BLUETOOTH_SERVICEReady) { _RESULT_NO_BLUETOOTH_SERVICEContent = SGetField<int>(LocalBridgeClazz, "RESULT_NO_BLUETOOTH_SERVICE"); _RESULT_NO_BLUETOOTH_SERVICEReady = true; } return _RESULT_NO_BLUETOOTH_SERVICEContent; } }
        private static int _RESULT_NO_BLUETOOTH_SERVICEContent = default;
        private static bool _RESULT_NO_BLUETOOTH_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_NO_DEFAULT_SMS_APP"/>
        /// </summary>
        public static int RESULT_NO_DEFAULT_SMS_APP { get { if (!_RESULT_NO_DEFAULT_SMS_APPReady) { _RESULT_NO_DEFAULT_SMS_APPContent = SGetField<int>(LocalBridgeClazz, "RESULT_NO_DEFAULT_SMS_APP"); _RESULT_NO_DEFAULT_SMS_APPReady = true; } return _RESULT_NO_DEFAULT_SMS_APPContent; } }
        private static int _RESULT_NO_DEFAULT_SMS_APPContent = default;
        private static bool _RESULT_NO_DEFAULT_SMS_APPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_NO_MEMORY"/>
        /// </summary>
        public static int RESULT_NO_MEMORY { get { if (!_RESULT_NO_MEMORYReady) { _RESULT_NO_MEMORYContent = SGetField<int>(LocalBridgeClazz, "RESULT_NO_MEMORY"); _RESULT_NO_MEMORYReady = true; } return _RESULT_NO_MEMORYContent; } }
        private static int _RESULT_NO_MEMORYContent = default;
        private static bool _RESULT_NO_MEMORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_NO_RESOURCES"/>
        /// </summary>
        public static int RESULT_NO_RESOURCES { get { if (!_RESULT_NO_RESOURCESReady) { _RESULT_NO_RESOURCESContent = SGetField<int>(LocalBridgeClazz, "RESULT_NO_RESOURCES"); _RESULT_NO_RESOURCESReady = true; } return _RESULT_NO_RESOURCESContent; } }
        private static int _RESULT_NO_RESOURCESContent = default;
        private static bool _RESULT_NO_RESOURCESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_OPERATION_NOT_ALLOWED"/>
        /// </summary>
        public static int RESULT_OPERATION_NOT_ALLOWED { get { if (!_RESULT_OPERATION_NOT_ALLOWEDReady) { _RESULT_OPERATION_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_OPERATION_NOT_ALLOWED"); _RESULT_OPERATION_NOT_ALLOWEDReady = true; } return _RESULT_OPERATION_NOT_ALLOWEDContent; } }
        private static int _RESULT_OPERATION_NOT_ALLOWEDContent = default;
        private static bool _RESULT_OPERATION_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RADIO_NOT_AVAILABLE"/>
        /// </summary>
        public static int RESULT_RADIO_NOT_AVAILABLE { get { if (!_RESULT_RADIO_NOT_AVAILABLEReady) { _RESULT_RADIO_NOT_AVAILABLEContent = SGetField<int>(LocalBridgeClazz, "RESULT_RADIO_NOT_AVAILABLE"); _RESULT_RADIO_NOT_AVAILABLEReady = true; } return _RESULT_RADIO_NOT_AVAILABLEContent; } }
        private static int _RESULT_RADIO_NOT_AVAILABLEContent = default;
        private static bool _RESULT_RADIO_NOT_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RECEIVE_DISPATCH_FAILURE"/>
        /// </summary>
        public static int RESULT_RECEIVE_DISPATCH_FAILURE { get { if (!_RESULT_RECEIVE_DISPATCH_FAILUREReady) { _RESULT_RECEIVE_DISPATCH_FAILUREContent = SGetField<int>(LocalBridgeClazz, "RESULT_RECEIVE_DISPATCH_FAILURE"); _RESULT_RECEIVE_DISPATCH_FAILUREReady = true; } return _RESULT_RECEIVE_DISPATCH_FAILUREContent; } }
        private static int _RESULT_RECEIVE_DISPATCH_FAILUREContent = default;
        private static bool _RESULT_RECEIVE_DISPATCH_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RECEIVE_INJECTED_NULL_PDU"/>
        /// </summary>
        public static int RESULT_RECEIVE_INJECTED_NULL_PDU { get { if (!_RESULT_RECEIVE_INJECTED_NULL_PDUReady) { _RESULT_RECEIVE_INJECTED_NULL_PDUContent = SGetField<int>(LocalBridgeClazz, "RESULT_RECEIVE_INJECTED_NULL_PDU"); _RESULT_RECEIVE_INJECTED_NULL_PDUReady = true; } return _RESULT_RECEIVE_INJECTED_NULL_PDUContent; } }
        private static int _RESULT_RECEIVE_INJECTED_NULL_PDUContent = default;
        private static bool _RESULT_RECEIVE_INJECTED_NULL_PDUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RECEIVE_NULL_MESSAGE_FROM_RIL"/>
        /// </summary>
        public static int RESULT_RECEIVE_NULL_MESSAGE_FROM_RIL { get { if (!_RESULT_RECEIVE_NULL_MESSAGE_FROM_RILReady) { _RESULT_RECEIVE_NULL_MESSAGE_FROM_RILContent = SGetField<int>(LocalBridgeClazz, "RESULT_RECEIVE_NULL_MESSAGE_FROM_RIL"); _RESULT_RECEIVE_NULL_MESSAGE_FROM_RILReady = true; } return _RESULT_RECEIVE_NULL_MESSAGE_FROM_RILContent; } }
        private static int _RESULT_RECEIVE_NULL_MESSAGE_FROM_RILContent = default;
        private static bool _RESULT_RECEIVE_NULL_MESSAGE_FROM_RILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RECEIVE_RUNTIME_EXCEPTION"/>
        /// </summary>
        public static int RESULT_RECEIVE_RUNTIME_EXCEPTION { get { if (!_RESULT_RECEIVE_RUNTIME_EXCEPTIONReady) { _RESULT_RECEIVE_RUNTIME_EXCEPTIONContent = SGetField<int>(LocalBridgeClazz, "RESULT_RECEIVE_RUNTIME_EXCEPTION"); _RESULT_RECEIVE_RUNTIME_EXCEPTIONReady = true; } return _RESULT_RECEIVE_RUNTIME_EXCEPTIONContent; } }
        private static int _RESULT_RECEIVE_RUNTIME_EXCEPTIONContent = default;
        private static bool _RESULT_RECEIVE_RUNTIME_EXCEPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RECEIVE_SQL_EXCEPTION"/>
        /// </summary>
        public static int RESULT_RECEIVE_SQL_EXCEPTION { get { if (!_RESULT_RECEIVE_SQL_EXCEPTIONReady) { _RESULT_RECEIVE_SQL_EXCEPTIONContent = SGetField<int>(LocalBridgeClazz, "RESULT_RECEIVE_SQL_EXCEPTION"); _RESULT_RECEIVE_SQL_EXCEPTIONReady = true; } return _RESULT_RECEIVE_SQL_EXCEPTIONContent; } }
        private static int _RESULT_RECEIVE_SQL_EXCEPTIONContent = default;
        private static bool _RESULT_RECEIVE_SQL_EXCEPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RECEIVE_URI_EXCEPTION"/>
        /// </summary>
        public static int RESULT_RECEIVE_URI_EXCEPTION { get { if (!_RESULT_RECEIVE_URI_EXCEPTIONReady) { _RESULT_RECEIVE_URI_EXCEPTIONContent = SGetField<int>(LocalBridgeClazz, "RESULT_RECEIVE_URI_EXCEPTION"); _RESULT_RECEIVE_URI_EXCEPTIONReady = true; } return _RESULT_RECEIVE_URI_EXCEPTIONContent; } }
        private static int _RESULT_RECEIVE_URI_EXCEPTIONContent = default;
        private static bool _RESULT_RECEIVE_URI_EXCEPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RECEIVE_WHILE_ENCRYPTED"/>
        /// </summary>
        public static int RESULT_RECEIVE_WHILE_ENCRYPTED { get { if (!_RESULT_RECEIVE_WHILE_ENCRYPTEDReady) { _RESULT_RECEIVE_WHILE_ENCRYPTEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_RECEIVE_WHILE_ENCRYPTED"); _RESULT_RECEIVE_WHILE_ENCRYPTEDReady = true; } return _RESULT_RECEIVE_WHILE_ENCRYPTEDContent; } }
        private static int _RESULT_RECEIVE_WHILE_ENCRYPTEDContent = default;
        private static bool _RESULT_RECEIVE_WHILE_ENCRYPTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_REMOTE_EXCEPTION"/>
        /// </summary>
        public static int RESULT_REMOTE_EXCEPTION { get { if (!_RESULT_REMOTE_EXCEPTIONReady) { _RESULT_REMOTE_EXCEPTIONContent = SGetField<int>(LocalBridgeClazz, "RESULT_REMOTE_EXCEPTION"); _RESULT_REMOTE_EXCEPTIONReady = true; } return _RESULT_REMOTE_EXCEPTIONContent; } }
        private static int _RESULT_REMOTE_EXCEPTIONContent = default;
        private static bool _RESULT_REMOTE_EXCEPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_REQUEST_NOT_SUPPORTED"/>
        /// </summary>
        public static int RESULT_REQUEST_NOT_SUPPORTED { get { if (!_RESULT_REQUEST_NOT_SUPPORTEDReady) { _RESULT_REQUEST_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_REQUEST_NOT_SUPPORTED"); _RESULT_REQUEST_NOT_SUPPORTEDReady = true; } return _RESULT_REQUEST_NOT_SUPPORTEDContent; } }
        private static int _RESULT_REQUEST_NOT_SUPPORTEDContent = default;
        private static bool _RESULT_REQUEST_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_ABORTED"/>
        /// </summary>
        public static int RESULT_RIL_ABORTED { get { if (!_RESULT_RIL_ABORTEDReady) { _RESULT_RIL_ABORTEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_ABORTED"); _RESULT_RIL_ABORTEDReady = true; } return _RESULT_RIL_ABORTEDContent; } }
        private static int _RESULT_RIL_ABORTEDContent = default;
        private static bool _RESULT_RIL_ABORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_ACCESS_BARRED"/>
        /// </summary>
        public static int RESULT_RIL_ACCESS_BARRED { get { if (!_RESULT_RIL_ACCESS_BARREDReady) { _RESULT_RIL_ACCESS_BARREDContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_ACCESS_BARRED"); _RESULT_RIL_ACCESS_BARREDReady = true; } return _RESULT_RIL_ACCESS_BARREDContent; } }
        private static int _RESULT_RIL_ACCESS_BARREDContent = default;
        private static bool _RESULT_RIL_ACCESS_BARREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_BLOCKED_DUE_TO_CALL"/>
        /// </summary>
        public static int RESULT_RIL_BLOCKED_DUE_TO_CALL { get { if (!_RESULT_RIL_BLOCKED_DUE_TO_CALLReady) { _RESULT_RIL_BLOCKED_DUE_TO_CALLContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_BLOCKED_DUE_TO_CALL"); _RESULT_RIL_BLOCKED_DUE_TO_CALLReady = true; } return _RESULT_RIL_BLOCKED_DUE_TO_CALLContent; } }
        private static int _RESULT_RIL_BLOCKED_DUE_TO_CALLContent = default;
        private static bool _RESULT_RIL_BLOCKED_DUE_TO_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_CANCELLED"/>
        /// </summary>
        public static int RESULT_RIL_CANCELLED { get { if (!_RESULT_RIL_CANCELLEDReady) { _RESULT_RIL_CANCELLEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_CANCELLED"); _RESULT_RIL_CANCELLEDReady = true; } return _RESULT_RIL_CANCELLEDContent; } }
        private static int _RESULT_RIL_CANCELLEDContent = default;
        private static bool _RESULT_RIL_CANCELLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_DEVICE_IN_USE"/>
        /// </summary>
        public static int RESULT_RIL_DEVICE_IN_USE { get { if (!_RESULT_RIL_DEVICE_IN_USEReady) { _RESULT_RIL_DEVICE_IN_USEContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_DEVICE_IN_USE"); _RESULT_RIL_DEVICE_IN_USEReady = true; } return _RESULT_RIL_DEVICE_IN_USEContent; } }
        private static int _RESULT_RIL_DEVICE_IN_USEContent = default;
        private static bool _RESULT_RIL_DEVICE_IN_USEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_ENCODING_ERR"/>
        /// </summary>
        public static int RESULT_RIL_ENCODING_ERR { get { if (!_RESULT_RIL_ENCODING_ERRReady) { _RESULT_RIL_ENCODING_ERRContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_ENCODING_ERR"); _RESULT_RIL_ENCODING_ERRReady = true; } return _RESULT_RIL_ENCODING_ERRContent; } }
        private static int _RESULT_RIL_ENCODING_ERRContent = default;
        private static bool _RESULT_RIL_ENCODING_ERRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_GENERIC_ERROR"/>
        /// </summary>
        public static int RESULT_RIL_GENERIC_ERROR { get { if (!_RESULT_RIL_GENERIC_ERRORReady) { _RESULT_RIL_GENERIC_ERRORContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_GENERIC_ERROR"); _RESULT_RIL_GENERIC_ERRORReady = true; } return _RESULT_RIL_GENERIC_ERRORContent; } }
        private static int _RESULT_RIL_GENERIC_ERRORContent = default;
        private static bool _RESULT_RIL_GENERIC_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_INTERNAL_ERR"/>
        /// </summary>
        public static int RESULT_RIL_INTERNAL_ERR { get { if (!_RESULT_RIL_INTERNAL_ERRReady) { _RESULT_RIL_INTERNAL_ERRContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_INTERNAL_ERR"); _RESULT_RIL_INTERNAL_ERRReady = true; } return _RESULT_RIL_INTERNAL_ERRContent; } }
        private static int _RESULT_RIL_INTERNAL_ERRContent = default;
        private static bool _RESULT_RIL_INTERNAL_ERRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_INVALID_ARGUMENTS"/>
        /// </summary>
        public static int RESULT_RIL_INVALID_ARGUMENTS { get { if (!_RESULT_RIL_INVALID_ARGUMENTSReady) { _RESULT_RIL_INVALID_ARGUMENTSContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_INVALID_ARGUMENTS"); _RESULT_RIL_INVALID_ARGUMENTSReady = true; } return _RESULT_RIL_INVALID_ARGUMENTSContent; } }
        private static int _RESULT_RIL_INVALID_ARGUMENTSContent = default;
        private static bool _RESULT_RIL_INVALID_ARGUMENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_INVALID_MODEM_STATE"/>
        /// </summary>
        public static int RESULT_RIL_INVALID_MODEM_STATE { get { if (!_RESULT_RIL_INVALID_MODEM_STATEReady) { _RESULT_RIL_INVALID_MODEM_STATEContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_INVALID_MODEM_STATE"); _RESULT_RIL_INVALID_MODEM_STATEReady = true; } return _RESULT_RIL_INVALID_MODEM_STATEContent; } }
        private static int _RESULT_RIL_INVALID_MODEM_STATEContent = default;
        private static bool _RESULT_RIL_INVALID_MODEM_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_INVALID_RESPONSE"/>
        /// </summary>
        public static int RESULT_RIL_INVALID_RESPONSE { get { if (!_RESULT_RIL_INVALID_RESPONSEReady) { _RESULT_RIL_INVALID_RESPONSEContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_INVALID_RESPONSE"); _RESULT_RIL_INVALID_RESPONSEReady = true; } return _RESULT_RIL_INVALID_RESPONSEContent; } }
        private static int _RESULT_RIL_INVALID_RESPONSEContent = default;
        private static bool _RESULT_RIL_INVALID_RESPONSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_INVALID_SIM_STATE"/>
        /// </summary>
        public static int RESULT_RIL_INVALID_SIM_STATE { get { if (!_RESULT_RIL_INVALID_SIM_STATEReady) { _RESULT_RIL_INVALID_SIM_STATEContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_INVALID_SIM_STATE"); _RESULT_RIL_INVALID_SIM_STATEReady = true; } return _RESULT_RIL_INVALID_SIM_STATEContent; } }
        private static int _RESULT_RIL_INVALID_SIM_STATEContent = default;
        private static bool _RESULT_RIL_INVALID_SIM_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_INVALID_SMS_FORMAT"/>
        /// </summary>
        public static int RESULT_RIL_INVALID_SMS_FORMAT { get { if (!_RESULT_RIL_INVALID_SMS_FORMATReady) { _RESULT_RIL_INVALID_SMS_FORMATContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_INVALID_SMS_FORMAT"); _RESULT_RIL_INVALID_SMS_FORMATReady = true; } return _RESULT_RIL_INVALID_SMS_FORMATContent; } }
        private static int _RESULT_RIL_INVALID_SMS_FORMATContent = default;
        private static bool _RESULT_RIL_INVALID_SMS_FORMATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_INVALID_SMSC_ADDRESS"/>
        /// </summary>
        public static int RESULT_RIL_INVALID_SMSC_ADDRESS { get { if (!_RESULT_RIL_INVALID_SMSC_ADDRESSReady) { _RESULT_RIL_INVALID_SMSC_ADDRESSContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_INVALID_SMSC_ADDRESS"); _RESULT_RIL_INVALID_SMSC_ADDRESSReady = true; } return _RESULT_RIL_INVALID_SMSC_ADDRESSContent; } }
        private static int _RESULT_RIL_INVALID_SMSC_ADDRESSContent = default;
        private static bool _RESULT_RIL_INVALID_SMSC_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_INVALID_STATE"/>
        /// </summary>
        public static int RESULT_RIL_INVALID_STATE { get { if (!_RESULT_RIL_INVALID_STATEReady) { _RESULT_RIL_INVALID_STATEContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_INVALID_STATE"); _RESULT_RIL_INVALID_STATEReady = true; } return _RESULT_RIL_INVALID_STATEContent; } }
        private static int _RESULT_RIL_INVALID_STATEContent = default;
        private static bool _RESULT_RIL_INVALID_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_MODEM_ERR"/>
        /// </summary>
        public static int RESULT_RIL_MODEM_ERR { get { if (!_RESULT_RIL_MODEM_ERRReady) { _RESULT_RIL_MODEM_ERRContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_MODEM_ERR"); _RESULT_RIL_MODEM_ERRReady = true; } return _RESULT_RIL_MODEM_ERRContent; } }
        private static int _RESULT_RIL_MODEM_ERRContent = default;
        private static bool _RESULT_RIL_MODEM_ERRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_NETWORK_ERR"/>
        /// </summary>
        public static int RESULT_RIL_NETWORK_ERR { get { if (!_RESULT_RIL_NETWORK_ERRReady) { _RESULT_RIL_NETWORK_ERRContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_NETWORK_ERR"); _RESULT_RIL_NETWORK_ERRReady = true; } return _RESULT_RIL_NETWORK_ERRContent; } }
        private static int _RESULT_RIL_NETWORK_ERRContent = default;
        private static bool _RESULT_RIL_NETWORK_ERRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_NETWORK_NOT_READY"/>
        /// </summary>
        public static int RESULT_RIL_NETWORK_NOT_READY { get { if (!_RESULT_RIL_NETWORK_NOT_READYReady) { _RESULT_RIL_NETWORK_NOT_READYContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_NETWORK_NOT_READY"); _RESULT_RIL_NETWORK_NOT_READYReady = true; } return _RESULT_RIL_NETWORK_NOT_READYContent; } }
        private static int _RESULT_RIL_NETWORK_NOT_READYContent = default;
        private static bool _RESULT_RIL_NETWORK_NOT_READYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_NETWORK_REJECT"/>
        /// </summary>
        public static int RESULT_RIL_NETWORK_REJECT { get { if (!_RESULT_RIL_NETWORK_REJECTReady) { _RESULT_RIL_NETWORK_REJECTContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_NETWORK_REJECT"); _RESULT_RIL_NETWORK_REJECTReady = true; } return _RESULT_RIL_NETWORK_REJECTContent; } }
        private static int _RESULT_RIL_NETWORK_REJECTContent = default;
        private static bool _RESULT_RIL_NETWORK_REJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_NO_MEMORY"/>
        /// </summary>
        public static int RESULT_RIL_NO_MEMORY { get { if (!_RESULT_RIL_NO_MEMORYReady) { _RESULT_RIL_NO_MEMORYContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_NO_MEMORY"); _RESULT_RIL_NO_MEMORYReady = true; } return _RESULT_RIL_NO_MEMORYContent; } }
        private static int _RESULT_RIL_NO_MEMORYContent = default;
        private static bool _RESULT_RIL_NO_MEMORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_NO_NETWORK_FOUND"/>
        /// </summary>
        public static int RESULT_RIL_NO_NETWORK_FOUND { get { if (!_RESULT_RIL_NO_NETWORK_FOUNDReady) { _RESULT_RIL_NO_NETWORK_FOUNDContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_NO_NETWORK_FOUND"); _RESULT_RIL_NO_NETWORK_FOUNDReady = true; } return _RESULT_RIL_NO_NETWORK_FOUNDContent; } }
        private static int _RESULT_RIL_NO_NETWORK_FOUNDContent = default;
        private static bool _RESULT_RIL_NO_NETWORK_FOUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_NO_RESOURCES"/>
        /// </summary>
        public static int RESULT_RIL_NO_RESOURCES { get { if (!_RESULT_RIL_NO_RESOURCESReady) { _RESULT_RIL_NO_RESOURCESContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_NO_RESOURCES"); _RESULT_RIL_NO_RESOURCESReady = true; } return _RESULT_RIL_NO_RESOURCESContent; } }
        private static int _RESULT_RIL_NO_RESOURCESContent = default;
        private static bool _RESULT_RIL_NO_RESOURCESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_NO_SMS_TO_ACK"/>
        /// </summary>
        public static int RESULT_RIL_NO_SMS_TO_ACK { get { if (!_RESULT_RIL_NO_SMS_TO_ACKReady) { _RESULT_RIL_NO_SMS_TO_ACKContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_NO_SMS_TO_ACK"); _RESULT_RIL_NO_SMS_TO_ACKReady = true; } return _RESULT_RIL_NO_SMS_TO_ACKContent; } }
        private static int _RESULT_RIL_NO_SMS_TO_ACKContent = default;
        private static bool _RESULT_RIL_NO_SMS_TO_ACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_NO_SUBSCRIPTION"/>
        /// </summary>
        public static int RESULT_RIL_NO_SUBSCRIPTION { get { if (!_RESULT_RIL_NO_SUBSCRIPTIONReady) { _RESULT_RIL_NO_SUBSCRIPTIONContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_NO_SUBSCRIPTION"); _RESULT_RIL_NO_SUBSCRIPTIONReady = true; } return _RESULT_RIL_NO_SUBSCRIPTIONContent; } }
        private static int _RESULT_RIL_NO_SUBSCRIPTIONContent = default;
        private static bool _RESULT_RIL_NO_SUBSCRIPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_OPERATION_NOT_ALLOWED"/>
        /// </summary>
        public static int RESULT_RIL_OPERATION_NOT_ALLOWED { get { if (!_RESULT_RIL_OPERATION_NOT_ALLOWEDReady) { _RESULT_RIL_OPERATION_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_OPERATION_NOT_ALLOWED"); _RESULT_RIL_OPERATION_NOT_ALLOWEDReady = true; } return _RESULT_RIL_OPERATION_NOT_ALLOWEDContent; } }
        private static int _RESULT_RIL_OPERATION_NOT_ALLOWEDContent = default;
        private static bool _RESULT_RIL_OPERATION_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_RADIO_NOT_AVAILABLE"/>
        /// </summary>
        public static int RESULT_RIL_RADIO_NOT_AVAILABLE { get { if (!_RESULT_RIL_RADIO_NOT_AVAILABLEReady) { _RESULT_RIL_RADIO_NOT_AVAILABLEContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_RADIO_NOT_AVAILABLE"); _RESULT_RIL_RADIO_NOT_AVAILABLEReady = true; } return _RESULT_RIL_RADIO_NOT_AVAILABLEContent; } }
        private static int _RESULT_RIL_RADIO_NOT_AVAILABLEContent = default;
        private static bool _RESULT_RIL_RADIO_NOT_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_REQUEST_NOT_SUPPORTED"/>
        /// </summary>
        public static int RESULT_RIL_REQUEST_NOT_SUPPORTED { get { if (!_RESULT_RIL_REQUEST_NOT_SUPPORTEDReady) { _RESULT_RIL_REQUEST_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_REQUEST_NOT_SUPPORTED"); _RESULT_RIL_REQUEST_NOT_SUPPORTEDReady = true; } return _RESULT_RIL_REQUEST_NOT_SUPPORTEDContent; } }
        private static int _RESULT_RIL_REQUEST_NOT_SUPPORTEDContent = default;
        private static bool _RESULT_RIL_REQUEST_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_REQUEST_RATE_LIMITED"/>
        /// </summary>
        public static int RESULT_RIL_REQUEST_RATE_LIMITED { get { if (!_RESULT_RIL_REQUEST_RATE_LIMITEDReady) { _RESULT_RIL_REQUEST_RATE_LIMITEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_REQUEST_RATE_LIMITED"); _RESULT_RIL_REQUEST_RATE_LIMITEDReady = true; } return _RESULT_RIL_REQUEST_RATE_LIMITEDContent; } }
        private static int _RESULT_RIL_REQUEST_RATE_LIMITEDContent = default;
        private static bool _RESULT_RIL_REQUEST_RATE_LIMITEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_SIM_ABSENT"/>
        /// </summary>
        public static int RESULT_RIL_SIM_ABSENT { get { if (!_RESULT_RIL_SIM_ABSENTReady) { _RESULT_RIL_SIM_ABSENTContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_SIM_ABSENT"); _RESULT_RIL_SIM_ABSENTReady = true; } return _RESULT_RIL_SIM_ABSENTContent; } }
        private static int _RESULT_RIL_SIM_ABSENTContent = default;
        private static bool _RESULT_RIL_SIM_ABSENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_SIM_BUSY"/>
        /// </summary>
        public static int RESULT_RIL_SIM_BUSY { get { if (!_RESULT_RIL_SIM_BUSYReady) { _RESULT_RIL_SIM_BUSYContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_SIM_BUSY"); _RESULT_RIL_SIM_BUSYReady = true; } return _RESULT_RIL_SIM_BUSYContent; } }
        private static int _RESULT_RIL_SIM_BUSYContent = default;
        private static bool _RESULT_RIL_SIM_BUSYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_SIM_ERROR"/>
        /// </summary>
        public static int RESULT_RIL_SIM_ERROR { get { if (!_RESULT_RIL_SIM_ERRORReady) { _RESULT_RIL_SIM_ERRORContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_SIM_ERROR"); _RESULT_RIL_SIM_ERRORReady = true; } return _RESULT_RIL_SIM_ERRORContent; } }
        private static int _RESULT_RIL_SIM_ERRORContent = default;
        private static bool _RESULT_RIL_SIM_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_SIM_FULL"/>
        /// </summary>
        public static int RESULT_RIL_SIM_FULL { get { if (!_RESULT_RIL_SIM_FULLReady) { _RESULT_RIL_SIM_FULLContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_SIM_FULL"); _RESULT_RIL_SIM_FULLReady = true; } return _RESULT_RIL_SIM_FULLContent; } }
        private static int _RESULT_RIL_SIM_FULLContent = default;
        private static bool _RESULT_RIL_SIM_FULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_SIM_PIN2"/>
        /// </summary>
        public static int RESULT_RIL_SIM_PIN2 { get { if (!_RESULT_RIL_SIM_PIN2Ready) { _RESULT_RIL_SIM_PIN2Content = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_SIM_PIN2"); _RESULT_RIL_SIM_PIN2Ready = true; } return _RESULT_RIL_SIM_PIN2Content; } }
        private static int _RESULT_RIL_SIM_PIN2Content = default;
        private static bool _RESULT_RIL_SIM_PIN2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_SIM_PUK2"/>
        /// </summary>
        public static int RESULT_RIL_SIM_PUK2 { get { if (!_RESULT_RIL_SIM_PUK2Ready) { _RESULT_RIL_SIM_PUK2Content = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_SIM_PUK2"); _RESULT_RIL_SIM_PUK2Ready = true; } return _RESULT_RIL_SIM_PUK2Content; } }
        private static int _RESULT_RIL_SIM_PUK2Content = default;
        private static bool _RESULT_RIL_SIM_PUK2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_SIMULTANEOUS_SMS_AND_CALL_NOT_ALLOWED"/>
        /// </summary>
        public static int RESULT_RIL_SIMULTANEOUS_SMS_AND_CALL_NOT_ALLOWED { get { if (!_RESULT_RIL_SIMULTANEOUS_SMS_AND_CALL_NOT_ALLOWEDReady) { _RESULT_RIL_SIMULTANEOUS_SMS_AND_CALL_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_SIMULTANEOUS_SMS_AND_CALL_NOT_ALLOWED"); _RESULT_RIL_SIMULTANEOUS_SMS_AND_CALL_NOT_ALLOWEDReady = true; } return _RESULT_RIL_SIMULTANEOUS_SMS_AND_CALL_NOT_ALLOWEDContent; } }
        private static int _RESULT_RIL_SIMULTANEOUS_SMS_AND_CALL_NOT_ALLOWEDContent = default;
        private static bool _RESULT_RIL_SIMULTANEOUS_SMS_AND_CALL_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_SMS_SEND_FAIL_RETRY"/>
        /// </summary>
        public static int RESULT_RIL_SMS_SEND_FAIL_RETRY { get { if (!_RESULT_RIL_SMS_SEND_FAIL_RETRYReady) { _RESULT_RIL_SMS_SEND_FAIL_RETRYContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_SMS_SEND_FAIL_RETRY"); _RESULT_RIL_SMS_SEND_FAIL_RETRYReady = true; } return _RESULT_RIL_SMS_SEND_FAIL_RETRYContent; } }
        private static int _RESULT_RIL_SMS_SEND_FAIL_RETRYContent = default;
        private static bool _RESULT_RIL_SMS_SEND_FAIL_RETRYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_SUBSCRIPTION_NOT_AVAILABLE"/>
        /// </summary>
        public static int RESULT_RIL_SUBSCRIPTION_NOT_AVAILABLE { get { if (!_RESULT_RIL_SUBSCRIPTION_NOT_AVAILABLEReady) { _RESULT_RIL_SUBSCRIPTION_NOT_AVAILABLEContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_SUBSCRIPTION_NOT_AVAILABLE"); _RESULT_RIL_SUBSCRIPTION_NOT_AVAILABLEReady = true; } return _RESULT_RIL_SUBSCRIPTION_NOT_AVAILABLEContent; } }
        private static int _RESULT_RIL_SUBSCRIPTION_NOT_AVAILABLEContent = default;
        private static bool _RESULT_RIL_SUBSCRIPTION_NOT_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_RIL_SYSTEM_ERR"/>
        /// </summary>
        public static int RESULT_RIL_SYSTEM_ERR { get { if (!_RESULT_RIL_SYSTEM_ERRReady) { _RESULT_RIL_SYSTEM_ERRContent = SGetField<int>(LocalBridgeClazz, "RESULT_RIL_SYSTEM_ERR"); _RESULT_RIL_SYSTEM_ERRReady = true; } return _RESULT_RIL_SYSTEM_ERRContent; } }
        private static int _RESULT_RIL_SYSTEM_ERRContent = default;
        private static bool _RESULT_RIL_SYSTEM_ERRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_SMS_BLOCKED_DURING_EMERGENCY"/>
        /// </summary>
        public static int RESULT_SMS_BLOCKED_DURING_EMERGENCY { get { if (!_RESULT_SMS_BLOCKED_DURING_EMERGENCYReady) { _RESULT_SMS_BLOCKED_DURING_EMERGENCYContent = SGetField<int>(LocalBridgeClazz, "RESULT_SMS_BLOCKED_DURING_EMERGENCY"); _RESULT_SMS_BLOCKED_DURING_EMERGENCYReady = true; } return _RESULT_SMS_BLOCKED_DURING_EMERGENCYContent; } }
        private static int _RESULT_SMS_BLOCKED_DURING_EMERGENCYContent = default;
        private static bool _RESULT_SMS_BLOCKED_DURING_EMERGENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_SMS_SEND_RETRY_FAILED"/>
        /// </summary>
        public static int RESULT_SMS_SEND_RETRY_FAILED { get { if (!_RESULT_SMS_SEND_RETRY_FAILEDReady) { _RESULT_SMS_SEND_RETRY_FAILEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_SMS_SEND_RETRY_FAILED"); _RESULT_SMS_SEND_RETRY_FAILEDReady = true; } return _RESULT_SMS_SEND_RETRY_FAILEDContent; } }
        private static int _RESULT_SMS_SEND_RETRY_FAILEDContent = default;
        private static bool _RESULT_SMS_SEND_RETRY_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_SYSTEM_ERROR"/>
        /// </summary>
        public static int RESULT_SYSTEM_ERROR { get { if (!_RESULT_SYSTEM_ERRORReady) { _RESULT_SYSTEM_ERRORContent = SGetField<int>(LocalBridgeClazz, "RESULT_SYSTEM_ERROR"); _RESULT_SYSTEM_ERRORReady = true; } return _RESULT_SYSTEM_ERRORContent; } }
        private static int _RESULT_SYSTEM_ERRORContent = default;
        private static bool _RESULT_SYSTEM_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_UNEXPECTED_EVENT_STOP_SENDING"/>
        /// </summary>
        public static int RESULT_UNEXPECTED_EVENT_STOP_SENDING { get { if (!_RESULT_UNEXPECTED_EVENT_STOP_SENDINGReady) { _RESULT_UNEXPECTED_EVENT_STOP_SENDINGContent = SGetField<int>(LocalBridgeClazz, "RESULT_UNEXPECTED_EVENT_STOP_SENDING"); _RESULT_UNEXPECTED_EVENT_STOP_SENDINGReady = true; } return _RESULT_UNEXPECTED_EVENT_STOP_SENDINGContent; } }
        private static int _RESULT_UNEXPECTED_EVENT_STOP_SENDINGContent = default;
        private static bool _RESULT_UNEXPECTED_EVENT_STOP_SENDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#RESULT_USER_NOT_ALLOWED"/>
        /// </summary>
        public static int RESULT_USER_NOT_ALLOWED { get { if (!_RESULT_USER_NOT_ALLOWEDReady) { _RESULT_USER_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "RESULT_USER_NOT_ALLOWED"); _RESULT_USER_NOT_ALLOWEDReady = true; } return _RESULT_USER_NOT_ALLOWEDContent; } }
        private static int _RESULT_USER_NOT_ALLOWEDContent = default;
        private static bool _RESULT_USER_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_CALL_BARRING"/>
        /// </summary>
        public static int SMS_RP_CAUSE_CALL_BARRING { get { if (!_SMS_RP_CAUSE_CALL_BARRINGReady) { _SMS_RP_CAUSE_CALL_BARRINGContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_CALL_BARRING"); _SMS_RP_CAUSE_CALL_BARRINGReady = true; } return _SMS_RP_CAUSE_CALL_BARRINGContent; } }
        private static int _SMS_RP_CAUSE_CALL_BARRINGContent = default;
        private static bool _SMS_RP_CAUSE_CALL_BARRINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_CONGESTION"/>
        /// </summary>
        public static int SMS_RP_CAUSE_CONGESTION { get { if (!_SMS_RP_CAUSE_CONGESTIONReady) { _SMS_RP_CAUSE_CONGESTIONContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_CONGESTION"); _SMS_RP_CAUSE_CONGESTIONReady = true; } return _SMS_RP_CAUSE_CONGESTIONContent; } }
        private static int _SMS_RP_CAUSE_CONGESTIONContent = default;
        private static bool _SMS_RP_CAUSE_CONGESTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_DESTINATION_OUT_OF_ORDER"/>
        /// </summary>
        public static int SMS_RP_CAUSE_DESTINATION_OUT_OF_ORDER { get { if (!_SMS_RP_CAUSE_DESTINATION_OUT_OF_ORDERReady) { _SMS_RP_CAUSE_DESTINATION_OUT_OF_ORDERContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_DESTINATION_OUT_OF_ORDER"); _SMS_RP_CAUSE_DESTINATION_OUT_OF_ORDERReady = true; } return _SMS_RP_CAUSE_DESTINATION_OUT_OF_ORDERContent; } }
        private static int _SMS_RP_CAUSE_DESTINATION_OUT_OF_ORDERContent = default;
        private static bool _SMS_RP_CAUSE_DESTINATION_OUT_OF_ORDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_FACILITY_NOT_IMPLEMENTED"/>
        /// </summary>
        public static int SMS_RP_CAUSE_FACILITY_NOT_IMPLEMENTED { get { if (!_SMS_RP_CAUSE_FACILITY_NOT_IMPLEMENTEDReady) { _SMS_RP_CAUSE_FACILITY_NOT_IMPLEMENTEDContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_FACILITY_NOT_IMPLEMENTED"); _SMS_RP_CAUSE_FACILITY_NOT_IMPLEMENTEDReady = true; } return _SMS_RP_CAUSE_FACILITY_NOT_IMPLEMENTEDContent; } }
        private static int _SMS_RP_CAUSE_FACILITY_NOT_IMPLEMENTEDContent = default;
        private static bool _SMS_RP_CAUSE_FACILITY_NOT_IMPLEMENTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_FACILITY_NOT_SUBSCRIBED"/>
        /// </summary>
        public static int SMS_RP_CAUSE_FACILITY_NOT_SUBSCRIBED { get { if (!_SMS_RP_CAUSE_FACILITY_NOT_SUBSCRIBEDReady) { _SMS_RP_CAUSE_FACILITY_NOT_SUBSCRIBEDContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_FACILITY_NOT_SUBSCRIBED"); _SMS_RP_CAUSE_FACILITY_NOT_SUBSCRIBEDReady = true; } return _SMS_RP_CAUSE_FACILITY_NOT_SUBSCRIBEDContent; } }
        private static int _SMS_RP_CAUSE_FACILITY_NOT_SUBSCRIBEDContent = default;
        private static bool _SMS_RP_CAUSE_FACILITY_NOT_SUBSCRIBEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_FACILITY_REJECTED"/>
        /// </summary>
        public static int SMS_RP_CAUSE_FACILITY_REJECTED { get { if (!_SMS_RP_CAUSE_FACILITY_REJECTEDReady) { _SMS_RP_CAUSE_FACILITY_REJECTEDContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_FACILITY_REJECTED"); _SMS_RP_CAUSE_FACILITY_REJECTEDReady = true; } return _SMS_RP_CAUSE_FACILITY_REJECTEDContent; } }
        private static int _SMS_RP_CAUSE_FACILITY_REJECTEDContent = default;
        private static bool _SMS_RP_CAUSE_FACILITY_REJECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_INFORMATION_ELEMENT_NON_EXISTENT"/>
        /// </summary>
        public static int SMS_RP_CAUSE_INFORMATION_ELEMENT_NON_EXISTENT { get { if (!_SMS_RP_CAUSE_INFORMATION_ELEMENT_NON_EXISTENTReady) { _SMS_RP_CAUSE_INFORMATION_ELEMENT_NON_EXISTENTContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_INFORMATION_ELEMENT_NON_EXISTENT"); _SMS_RP_CAUSE_INFORMATION_ELEMENT_NON_EXISTENTReady = true; } return _SMS_RP_CAUSE_INFORMATION_ELEMENT_NON_EXISTENTContent; } }
        private static int _SMS_RP_CAUSE_INFORMATION_ELEMENT_NON_EXISTENTContent = default;
        private static bool _SMS_RP_CAUSE_INFORMATION_ELEMENT_NON_EXISTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_INTERWORKING_UNSPECIFIED"/>
        /// </summary>
        public static int SMS_RP_CAUSE_INTERWORKING_UNSPECIFIED { get { if (!_SMS_RP_CAUSE_INTERWORKING_UNSPECIFIEDReady) { _SMS_RP_CAUSE_INTERWORKING_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_INTERWORKING_UNSPECIFIED"); _SMS_RP_CAUSE_INTERWORKING_UNSPECIFIEDReady = true; } return _SMS_RP_CAUSE_INTERWORKING_UNSPECIFIEDContent; } }
        private static int _SMS_RP_CAUSE_INTERWORKING_UNSPECIFIEDContent = default;
        private static bool _SMS_RP_CAUSE_INTERWORKING_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_INVALID_MANDATORY_INFORMATION"/>
        /// </summary>
        public static int SMS_RP_CAUSE_INVALID_MANDATORY_INFORMATION { get { if (!_SMS_RP_CAUSE_INVALID_MANDATORY_INFORMATIONReady) { _SMS_RP_CAUSE_INVALID_MANDATORY_INFORMATIONContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_INVALID_MANDATORY_INFORMATION"); _SMS_RP_CAUSE_INVALID_MANDATORY_INFORMATIONReady = true; } return _SMS_RP_CAUSE_INVALID_MANDATORY_INFORMATIONContent; } }
        private static int _SMS_RP_CAUSE_INVALID_MANDATORY_INFORMATIONContent = default;
        private static bool _SMS_RP_CAUSE_INVALID_MANDATORY_INFORMATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_INVALID_MESSAGE_REFERENCE_VALUE"/>
        /// </summary>
        public static int SMS_RP_CAUSE_INVALID_MESSAGE_REFERENCE_VALUE { get { if (!_SMS_RP_CAUSE_INVALID_MESSAGE_REFERENCE_VALUEReady) { _SMS_RP_CAUSE_INVALID_MESSAGE_REFERENCE_VALUEContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_INVALID_MESSAGE_REFERENCE_VALUE"); _SMS_RP_CAUSE_INVALID_MESSAGE_REFERENCE_VALUEReady = true; } return _SMS_RP_CAUSE_INVALID_MESSAGE_REFERENCE_VALUEContent; } }
        private static int _SMS_RP_CAUSE_INVALID_MESSAGE_REFERENCE_VALUEContent = default;
        private static bool _SMS_RP_CAUSE_INVALID_MESSAGE_REFERENCE_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_MESSAGE_INCOMPATIBLE_WITH_PROTOCOL_STATE"/>
        /// </summary>
        public static int SMS_RP_CAUSE_MESSAGE_INCOMPATIBLE_WITH_PROTOCOL_STATE { get { if (!_SMS_RP_CAUSE_MESSAGE_INCOMPATIBLE_WITH_PROTOCOL_STATEReady) { _SMS_RP_CAUSE_MESSAGE_INCOMPATIBLE_WITH_PROTOCOL_STATEContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_MESSAGE_INCOMPATIBLE_WITH_PROTOCOL_STATE"); _SMS_RP_CAUSE_MESSAGE_INCOMPATIBLE_WITH_PROTOCOL_STATEReady = true; } return _SMS_RP_CAUSE_MESSAGE_INCOMPATIBLE_WITH_PROTOCOL_STATEContent; } }
        private static int _SMS_RP_CAUSE_MESSAGE_INCOMPATIBLE_WITH_PROTOCOL_STATEContent = default;
        private static bool _SMS_RP_CAUSE_MESSAGE_INCOMPATIBLE_WITH_PROTOCOL_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_MESSAGE_TYPE_NON_EXISTENT"/>
        /// </summary>
        public static int SMS_RP_CAUSE_MESSAGE_TYPE_NON_EXISTENT { get { if (!_SMS_RP_CAUSE_MESSAGE_TYPE_NON_EXISTENTReady) { _SMS_RP_CAUSE_MESSAGE_TYPE_NON_EXISTENTContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_MESSAGE_TYPE_NON_EXISTENT"); _SMS_RP_CAUSE_MESSAGE_TYPE_NON_EXISTENTReady = true; } return _SMS_RP_CAUSE_MESSAGE_TYPE_NON_EXISTENTContent; } }
        private static int _SMS_RP_CAUSE_MESSAGE_TYPE_NON_EXISTENTContent = default;
        private static bool _SMS_RP_CAUSE_MESSAGE_TYPE_NON_EXISTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_NETWORK_OUT_OF_ORDER"/>
        /// </summary>
        public static int SMS_RP_CAUSE_NETWORK_OUT_OF_ORDER { get { if (!_SMS_RP_CAUSE_NETWORK_OUT_OF_ORDERReady) { _SMS_RP_CAUSE_NETWORK_OUT_OF_ORDERContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_NETWORK_OUT_OF_ORDER"); _SMS_RP_CAUSE_NETWORK_OUT_OF_ORDERReady = true; } return _SMS_RP_CAUSE_NETWORK_OUT_OF_ORDERContent; } }
        private static int _SMS_RP_CAUSE_NETWORK_OUT_OF_ORDERContent = default;
        private static bool _SMS_RP_CAUSE_NETWORK_OUT_OF_ORDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_OPERATOR_DETERMINED_BARRING"/>
        /// </summary>
        public static int SMS_RP_CAUSE_OPERATOR_DETERMINED_BARRING { get { if (!_SMS_RP_CAUSE_OPERATOR_DETERMINED_BARRINGReady) { _SMS_RP_CAUSE_OPERATOR_DETERMINED_BARRINGContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_OPERATOR_DETERMINED_BARRING"); _SMS_RP_CAUSE_OPERATOR_DETERMINED_BARRINGReady = true; } return _SMS_RP_CAUSE_OPERATOR_DETERMINED_BARRINGContent; } }
        private static int _SMS_RP_CAUSE_OPERATOR_DETERMINED_BARRINGContent = default;
        private static bool _SMS_RP_CAUSE_OPERATOR_DETERMINED_BARRINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_PROTOCOL_ERROR"/>
        /// </summary>
        public static int SMS_RP_CAUSE_PROTOCOL_ERROR { get { if (!_SMS_RP_CAUSE_PROTOCOL_ERRORReady) { _SMS_RP_CAUSE_PROTOCOL_ERRORContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_PROTOCOL_ERROR"); _SMS_RP_CAUSE_PROTOCOL_ERRORReady = true; } return _SMS_RP_CAUSE_PROTOCOL_ERRORContent; } }
        private static int _SMS_RP_CAUSE_PROTOCOL_ERRORContent = default;
        private static bool _SMS_RP_CAUSE_PROTOCOL_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_RESERVED"/>
        /// </summary>
        public static int SMS_RP_CAUSE_RESERVED { get { if (!_SMS_RP_CAUSE_RESERVEDReady) { _SMS_RP_CAUSE_RESERVEDContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_RESERVED"); _SMS_RP_CAUSE_RESERVEDReady = true; } return _SMS_RP_CAUSE_RESERVEDContent; } }
        private static int _SMS_RP_CAUSE_RESERVEDContent = default;
        private static bool _SMS_RP_CAUSE_RESERVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_RESOURCES_UNAVAILABLE"/>
        /// </summary>
        public static int SMS_RP_CAUSE_RESOURCES_UNAVAILABLE { get { if (!_SMS_RP_CAUSE_RESOURCES_UNAVAILABLEReady) { _SMS_RP_CAUSE_RESOURCES_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_RESOURCES_UNAVAILABLE"); _SMS_RP_CAUSE_RESOURCES_UNAVAILABLEReady = true; } return _SMS_RP_CAUSE_RESOURCES_UNAVAILABLEContent; } }
        private static int _SMS_RP_CAUSE_RESOURCES_UNAVAILABLEContent = default;
        private static bool _SMS_RP_CAUSE_RESOURCES_UNAVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_SEMANTICALLY_INCORRECT_MESSAGE"/>
        /// </summary>
        public static int SMS_RP_CAUSE_SEMANTICALLY_INCORRECT_MESSAGE { get { if (!_SMS_RP_CAUSE_SEMANTICALLY_INCORRECT_MESSAGEReady) { _SMS_RP_CAUSE_SEMANTICALLY_INCORRECT_MESSAGEContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_SEMANTICALLY_INCORRECT_MESSAGE"); _SMS_RP_CAUSE_SEMANTICALLY_INCORRECT_MESSAGEReady = true; } return _SMS_RP_CAUSE_SEMANTICALLY_INCORRECT_MESSAGEContent; } }
        private static int _SMS_RP_CAUSE_SEMANTICALLY_INCORRECT_MESSAGEContent = default;
        private static bool _SMS_RP_CAUSE_SEMANTICALLY_INCORRECT_MESSAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_SHORT_MESSAGE_TRANSFER_REJECTED"/>
        /// </summary>
        public static int SMS_RP_CAUSE_SHORT_MESSAGE_TRANSFER_REJECTED { get { if (!_SMS_RP_CAUSE_SHORT_MESSAGE_TRANSFER_REJECTEDReady) { _SMS_RP_CAUSE_SHORT_MESSAGE_TRANSFER_REJECTEDContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_SHORT_MESSAGE_TRANSFER_REJECTED"); _SMS_RP_CAUSE_SHORT_MESSAGE_TRANSFER_REJECTEDReady = true; } return _SMS_RP_CAUSE_SHORT_MESSAGE_TRANSFER_REJECTEDContent; } }
        private static int _SMS_RP_CAUSE_SHORT_MESSAGE_TRANSFER_REJECTEDContent = default;
        private static bool _SMS_RP_CAUSE_SHORT_MESSAGE_TRANSFER_REJECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_TEMPORARY_FAILURE"/>
        /// </summary>
        public static int SMS_RP_CAUSE_TEMPORARY_FAILURE { get { if (!_SMS_RP_CAUSE_TEMPORARY_FAILUREReady) { _SMS_RP_CAUSE_TEMPORARY_FAILUREContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_TEMPORARY_FAILURE"); _SMS_RP_CAUSE_TEMPORARY_FAILUREReady = true; } return _SMS_RP_CAUSE_TEMPORARY_FAILUREContent; } }
        private static int _SMS_RP_CAUSE_TEMPORARY_FAILUREContent = default;
        private static bool _SMS_RP_CAUSE_TEMPORARY_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_UNALLOCATED_NUMBER"/>
        /// </summary>
        public static int SMS_RP_CAUSE_UNALLOCATED_NUMBER { get { if (!_SMS_RP_CAUSE_UNALLOCATED_NUMBERReady) { _SMS_RP_CAUSE_UNALLOCATED_NUMBERContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_UNALLOCATED_NUMBER"); _SMS_RP_CAUSE_UNALLOCATED_NUMBERReady = true; } return _SMS_RP_CAUSE_UNALLOCATED_NUMBERContent; } }
        private static int _SMS_RP_CAUSE_UNALLOCATED_NUMBERContent = default;
        private static bool _SMS_RP_CAUSE_UNALLOCATED_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_UNIDENTIFIED_SUBSCRIBER"/>
        /// </summary>
        public static int SMS_RP_CAUSE_UNIDENTIFIED_SUBSCRIBER { get { if (!_SMS_RP_CAUSE_UNIDENTIFIED_SUBSCRIBERReady) { _SMS_RP_CAUSE_UNIDENTIFIED_SUBSCRIBERContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_UNIDENTIFIED_SUBSCRIBER"); _SMS_RP_CAUSE_UNIDENTIFIED_SUBSCRIBERReady = true; } return _SMS_RP_CAUSE_UNIDENTIFIED_SUBSCRIBERContent; } }
        private static int _SMS_RP_CAUSE_UNIDENTIFIED_SUBSCRIBERContent = default;
        private static bool _SMS_RP_CAUSE_UNIDENTIFIED_SUBSCRIBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#SMS_RP_CAUSE_UNKNOWN_SUBSCRIBER"/>
        /// </summary>
        public static int SMS_RP_CAUSE_UNKNOWN_SUBSCRIBER { get { if (!_SMS_RP_CAUSE_UNKNOWN_SUBSCRIBERReady) { _SMS_RP_CAUSE_UNKNOWN_SUBSCRIBERContent = SGetField<int>(LocalBridgeClazz, "SMS_RP_CAUSE_UNKNOWN_SUBSCRIBER"); _SMS_RP_CAUSE_UNKNOWN_SUBSCRIBERReady = true; } return _SMS_RP_CAUSE_UNKNOWN_SUBSCRIBERContent; } }
        private static int _SMS_RP_CAUSE_UNKNOWN_SUBSCRIBERContent = default;
        private static bool _SMS_RP_CAUSE_UNKNOWN_SUBSCRIBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#STATUS_ON_ICC_FREE"/>
        /// </summary>
        public static int STATUS_ON_ICC_FREE { get { if (!_STATUS_ON_ICC_FREEReady) { _STATUS_ON_ICC_FREEContent = SGetField<int>(LocalBridgeClazz, "STATUS_ON_ICC_FREE"); _STATUS_ON_ICC_FREEReady = true; } return _STATUS_ON_ICC_FREEContent; } }
        private static int _STATUS_ON_ICC_FREEContent = default;
        private static bool _STATUS_ON_ICC_FREEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#STATUS_ON_ICC_READ"/>
        /// </summary>
        public static int STATUS_ON_ICC_READ { get { if (!_STATUS_ON_ICC_READReady) { _STATUS_ON_ICC_READContent = SGetField<int>(LocalBridgeClazz, "STATUS_ON_ICC_READ"); _STATUS_ON_ICC_READReady = true; } return _STATUS_ON_ICC_READContent; } }
        private static int _STATUS_ON_ICC_READContent = default;
        private static bool _STATUS_ON_ICC_READReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#STATUS_ON_ICC_SENT"/>
        /// </summary>
        public static int STATUS_ON_ICC_SENT { get { if (!_STATUS_ON_ICC_SENTReady) { _STATUS_ON_ICC_SENTContent = SGetField<int>(LocalBridgeClazz, "STATUS_ON_ICC_SENT"); _STATUS_ON_ICC_SENTReady = true; } return _STATUS_ON_ICC_SENTContent; } }
        private static int _STATUS_ON_ICC_SENTContent = default;
        private static bool _STATUS_ON_ICC_SENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#STATUS_ON_ICC_UNREAD"/>
        /// </summary>
        public static int STATUS_ON_ICC_UNREAD { get { if (!_STATUS_ON_ICC_UNREADReady) { _STATUS_ON_ICC_UNREADContent = SGetField<int>(LocalBridgeClazz, "STATUS_ON_ICC_UNREAD"); _STATUS_ON_ICC_UNREADReady = true; } return _STATUS_ON_ICC_UNREADContent; } }
        private static int _STATUS_ON_ICC_UNREADContent = default;
        private static bool _STATUS_ON_ICC_UNREADReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#STATUS_ON_ICC_UNSENT"/>
        /// </summary>
        public static int STATUS_ON_ICC_UNSENT { get { if (!_STATUS_ON_ICC_UNSENTReady) { _STATUS_ON_ICC_UNSENTContent = SGetField<int>(LocalBridgeClazz, "STATUS_ON_ICC_UNSENT"); _STATUS_ON_ICC_UNSENTReady = true; } return _STATUS_ON_ICC_UNSENTContent; } }
        private static int _STATUS_ON_ICC_UNSENTContent = default;
        private static bool _STATUS_ON_ICC_UNSENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#EXTRA_MMS_DATA"/>
        /// </summary>
        public static Java.Lang.String EXTRA_MMS_DATA { get { if (!_EXTRA_MMS_DATAReady) { _EXTRA_MMS_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MMS_DATA"); _EXTRA_MMS_DATAReady = true; } return _EXTRA_MMS_DATAContent; } }
        private static Java.Lang.String _EXTRA_MMS_DATAContent = default;
        private static bool _EXTRA_MMS_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#EXTRA_MMS_HTTP_STATUS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_MMS_HTTP_STATUS { get { if (!_EXTRA_MMS_HTTP_STATUSReady) { _EXTRA_MMS_HTTP_STATUSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MMS_HTTP_STATUS"); _EXTRA_MMS_HTTP_STATUSReady = true; } return _EXTRA_MMS_HTTP_STATUSContent; } }
        private static Java.Lang.String _EXTRA_MMS_HTTP_STATUSContent = default;
        private static bool _EXTRA_MMS_HTTP_STATUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_ALIAS_ENABLED"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_ALIAS_ENABLED { get { if (!_MMS_CONFIG_ALIAS_ENABLEDReady) { _MMS_CONFIG_ALIAS_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_ALIAS_ENABLED"); _MMS_CONFIG_ALIAS_ENABLEDReady = true; } return _MMS_CONFIG_ALIAS_ENABLEDContent; } }
        private static Java.Lang.String _MMS_CONFIG_ALIAS_ENABLEDContent = default;
        private static bool _MMS_CONFIG_ALIAS_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_ALIAS_MAX_CHARS"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_ALIAS_MAX_CHARS { get { if (!_MMS_CONFIG_ALIAS_MAX_CHARSReady) { _MMS_CONFIG_ALIAS_MAX_CHARSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_ALIAS_MAX_CHARS"); _MMS_CONFIG_ALIAS_MAX_CHARSReady = true; } return _MMS_CONFIG_ALIAS_MAX_CHARSContent; } }
        private static Java.Lang.String _MMS_CONFIG_ALIAS_MAX_CHARSContent = default;
        private static bool _MMS_CONFIG_ALIAS_MAX_CHARSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_ALIAS_MIN_CHARS"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_ALIAS_MIN_CHARS { get { if (!_MMS_CONFIG_ALIAS_MIN_CHARSReady) { _MMS_CONFIG_ALIAS_MIN_CHARSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_ALIAS_MIN_CHARS"); _MMS_CONFIG_ALIAS_MIN_CHARSReady = true; } return _MMS_CONFIG_ALIAS_MIN_CHARSContent; } }
        private static Java.Lang.String _MMS_CONFIG_ALIAS_MIN_CHARSContent = default;
        private static bool _MMS_CONFIG_ALIAS_MIN_CHARSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_ALLOW_ATTACH_AUDIO"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_ALLOW_ATTACH_AUDIO { get { if (!_MMS_CONFIG_ALLOW_ATTACH_AUDIOReady) { _MMS_CONFIG_ALLOW_ATTACH_AUDIOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_ALLOW_ATTACH_AUDIO"); _MMS_CONFIG_ALLOW_ATTACH_AUDIOReady = true; } return _MMS_CONFIG_ALLOW_ATTACH_AUDIOContent; } }
        private static Java.Lang.String _MMS_CONFIG_ALLOW_ATTACH_AUDIOContent = default;
        private static bool _MMS_CONFIG_ALLOW_ATTACH_AUDIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_APPEND_TRANSACTION_ID"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_APPEND_TRANSACTION_ID { get { if (!_MMS_CONFIG_APPEND_TRANSACTION_IDReady) { _MMS_CONFIG_APPEND_TRANSACTION_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_APPEND_TRANSACTION_ID"); _MMS_CONFIG_APPEND_TRANSACTION_IDReady = true; } return _MMS_CONFIG_APPEND_TRANSACTION_IDContent; } }
        private static Java.Lang.String _MMS_CONFIG_APPEND_TRANSACTION_IDContent = default;
        private static bool _MMS_CONFIG_APPEND_TRANSACTION_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_EMAIL_GATEWAY_NUMBER"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_EMAIL_GATEWAY_NUMBER { get { if (!_MMS_CONFIG_EMAIL_GATEWAY_NUMBERReady) { _MMS_CONFIG_EMAIL_GATEWAY_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_EMAIL_GATEWAY_NUMBER"); _MMS_CONFIG_EMAIL_GATEWAY_NUMBERReady = true; } return _MMS_CONFIG_EMAIL_GATEWAY_NUMBERContent; } }
        private static Java.Lang.String _MMS_CONFIG_EMAIL_GATEWAY_NUMBERContent = default;
        private static bool _MMS_CONFIG_EMAIL_GATEWAY_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_GROUP_MMS_ENABLED"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_GROUP_MMS_ENABLED { get { if (!_MMS_CONFIG_GROUP_MMS_ENABLEDReady) { _MMS_CONFIG_GROUP_MMS_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_GROUP_MMS_ENABLED"); _MMS_CONFIG_GROUP_MMS_ENABLEDReady = true; } return _MMS_CONFIG_GROUP_MMS_ENABLEDContent; } }
        private static Java.Lang.String _MMS_CONFIG_GROUP_MMS_ENABLEDContent = default;
        private static bool _MMS_CONFIG_GROUP_MMS_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_HTTP_PARAMS"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_HTTP_PARAMS { get { if (!_MMS_CONFIG_HTTP_PARAMSReady) { _MMS_CONFIG_HTTP_PARAMSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_HTTP_PARAMS"); _MMS_CONFIG_HTTP_PARAMSReady = true; } return _MMS_CONFIG_HTTP_PARAMSContent; } }
        private static Java.Lang.String _MMS_CONFIG_HTTP_PARAMSContent = default;
        private static bool _MMS_CONFIG_HTTP_PARAMSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_HTTP_SOCKET_TIMEOUT"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_HTTP_SOCKET_TIMEOUT { get { if (!_MMS_CONFIG_HTTP_SOCKET_TIMEOUTReady) { _MMS_CONFIG_HTTP_SOCKET_TIMEOUTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_HTTP_SOCKET_TIMEOUT"); _MMS_CONFIG_HTTP_SOCKET_TIMEOUTReady = true; } return _MMS_CONFIG_HTTP_SOCKET_TIMEOUTContent; } }
        private static Java.Lang.String _MMS_CONFIG_HTTP_SOCKET_TIMEOUTContent = default;
        private static bool _MMS_CONFIG_HTTP_SOCKET_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_MAX_IMAGE_HEIGHT"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_MAX_IMAGE_HEIGHT { get { if (!_MMS_CONFIG_MAX_IMAGE_HEIGHTReady) { _MMS_CONFIG_MAX_IMAGE_HEIGHTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_MAX_IMAGE_HEIGHT"); _MMS_CONFIG_MAX_IMAGE_HEIGHTReady = true; } return _MMS_CONFIG_MAX_IMAGE_HEIGHTContent; } }
        private static Java.Lang.String _MMS_CONFIG_MAX_IMAGE_HEIGHTContent = default;
        private static bool _MMS_CONFIG_MAX_IMAGE_HEIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_MAX_IMAGE_WIDTH"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_MAX_IMAGE_WIDTH { get { if (!_MMS_CONFIG_MAX_IMAGE_WIDTHReady) { _MMS_CONFIG_MAX_IMAGE_WIDTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_MAX_IMAGE_WIDTH"); _MMS_CONFIG_MAX_IMAGE_WIDTHReady = true; } return _MMS_CONFIG_MAX_IMAGE_WIDTHContent; } }
        private static Java.Lang.String _MMS_CONFIG_MAX_IMAGE_WIDTHContent = default;
        private static bool _MMS_CONFIG_MAX_IMAGE_WIDTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_MAX_MESSAGE_SIZE"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_MAX_MESSAGE_SIZE { get { if (!_MMS_CONFIG_MAX_MESSAGE_SIZEReady) { _MMS_CONFIG_MAX_MESSAGE_SIZEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_MAX_MESSAGE_SIZE"); _MMS_CONFIG_MAX_MESSAGE_SIZEReady = true; } return _MMS_CONFIG_MAX_MESSAGE_SIZEContent; } }
        private static Java.Lang.String _MMS_CONFIG_MAX_MESSAGE_SIZEContent = default;
        private static bool _MMS_CONFIG_MAX_MESSAGE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_MESSAGE_TEXT_MAX_SIZE"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_MESSAGE_TEXT_MAX_SIZE { get { if (!_MMS_CONFIG_MESSAGE_TEXT_MAX_SIZEReady) { _MMS_CONFIG_MESSAGE_TEXT_MAX_SIZEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_MESSAGE_TEXT_MAX_SIZE"); _MMS_CONFIG_MESSAGE_TEXT_MAX_SIZEReady = true; } return _MMS_CONFIG_MESSAGE_TEXT_MAX_SIZEContent; } }
        private static Java.Lang.String _MMS_CONFIG_MESSAGE_TEXT_MAX_SIZEContent = default;
        private static bool _MMS_CONFIG_MESSAGE_TEXT_MAX_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLED"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLED { get { if (!_MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLEDReady) { _MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLED"); _MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLEDReady = true; } return _MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLEDContent; } }
        private static Java.Lang.String _MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLEDContent = default;
        private static bool _MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_MMS_ENABLED"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_MMS_ENABLED { get { if (!_MMS_CONFIG_MMS_ENABLEDReady) { _MMS_CONFIG_MMS_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_MMS_ENABLED"); _MMS_CONFIG_MMS_ENABLEDReady = true; } return _MMS_CONFIG_MMS_ENABLEDContent; } }
        private static Java.Lang.String _MMS_CONFIG_MMS_ENABLEDContent = default;
        private static bool _MMS_CONFIG_MMS_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_MMS_READ_REPORT_ENABLED"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_MMS_READ_REPORT_ENABLED { get { if (!_MMS_CONFIG_MMS_READ_REPORT_ENABLEDReady) { _MMS_CONFIG_MMS_READ_REPORT_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_MMS_READ_REPORT_ENABLED"); _MMS_CONFIG_MMS_READ_REPORT_ENABLEDReady = true; } return _MMS_CONFIG_MMS_READ_REPORT_ENABLEDContent; } }
        private static Java.Lang.String _MMS_CONFIG_MMS_READ_REPORT_ENABLEDContent = default;
        private static bool _MMS_CONFIG_MMS_READ_REPORT_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_MULTIPART_SMS_ENABLED"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_MULTIPART_SMS_ENABLED { get { if (!_MMS_CONFIG_MULTIPART_SMS_ENABLEDReady) { _MMS_CONFIG_MULTIPART_SMS_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_MULTIPART_SMS_ENABLED"); _MMS_CONFIG_MULTIPART_SMS_ENABLEDReady = true; } return _MMS_CONFIG_MULTIPART_SMS_ENABLEDContent; } }
        private static Java.Lang.String _MMS_CONFIG_MULTIPART_SMS_ENABLEDContent = default;
        private static bool _MMS_CONFIG_MULTIPART_SMS_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_NAI_SUFFIX"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_NAI_SUFFIX { get { if (!_MMS_CONFIG_NAI_SUFFIXReady) { _MMS_CONFIG_NAI_SUFFIXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_NAI_SUFFIX"); _MMS_CONFIG_NAI_SUFFIXReady = true; } return _MMS_CONFIG_NAI_SUFFIXContent; } }
        private static Java.Lang.String _MMS_CONFIG_NAI_SUFFIXContent = default;
        private static bool _MMS_CONFIG_NAI_SUFFIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLED"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLED { get { if (!_MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLEDReady) { _MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLED"); _MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLEDReady = true; } return _MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLEDContent; } }
        private static Java.Lang.String _MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLEDContent = default;
        private static bool _MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_RECIPIENT_LIMIT"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_RECIPIENT_LIMIT { get { if (!_MMS_CONFIG_RECIPIENT_LIMITReady) { _MMS_CONFIG_RECIPIENT_LIMITContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_RECIPIENT_LIMIT"); _MMS_CONFIG_RECIPIENT_LIMITReady = true; } return _MMS_CONFIG_RECIPIENT_LIMITContent; } }
        private static Java.Lang.String _MMS_CONFIG_RECIPIENT_LIMITContent = default;
        private static bool _MMS_CONFIG_RECIPIENT_LIMITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGES"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGES { get { if (!_MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGESReady) { _MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGES"); _MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGESReady = true; } return _MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGESContent; } }
        private static Java.Lang.String _MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGESContent = default;
        private static bool _MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_SHOW_CELL_BROADCAST_APP_LINKS"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_SHOW_CELL_BROADCAST_APP_LINKS { get { if (!_MMS_CONFIG_SHOW_CELL_BROADCAST_APP_LINKSReady) { _MMS_CONFIG_SHOW_CELL_BROADCAST_APP_LINKSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_SHOW_CELL_BROADCAST_APP_LINKS"); _MMS_CONFIG_SHOW_CELL_BROADCAST_APP_LINKSReady = true; } return _MMS_CONFIG_SHOW_CELL_BROADCAST_APP_LINKSContent; } }
        private static Java.Lang.String _MMS_CONFIG_SHOW_CELL_BROADCAST_APP_LINKSContent = default;
        private static bool _MMS_CONFIG_SHOW_CELL_BROADCAST_APP_LINKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLED"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLED { get { if (!_MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLEDReady) { _MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLED"); _MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLEDReady = true; } return _MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLEDContent; } }
        private static Java.Lang.String _MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLEDContent = default;
        private static bool _MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLD"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLD { get { if (!_MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLDReady) { _MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLD"); _MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLDReady = true; } return _MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLDContent; } }
        private static Java.Lang.String _MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLDContent = default;
        private static bool _MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLD"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLD { get { if (!_MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLDReady) { _MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLD"); _MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLDReady = true; } return _MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLDContent; } }
        private static Java.Lang.String _MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLDContent = default;
        private static bool _MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_SUBJECT_MAX_LENGTH"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_SUBJECT_MAX_LENGTH { get { if (!_MMS_CONFIG_SUBJECT_MAX_LENGTHReady) { _MMS_CONFIG_SUBJECT_MAX_LENGTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_SUBJECT_MAX_LENGTH"); _MMS_CONFIG_SUBJECT_MAX_LENGTHReady = true; } return _MMS_CONFIG_SUBJECT_MAX_LENGTHContent; } }
        private static Java.Lang.String _MMS_CONFIG_SUBJECT_MAX_LENGTHContent = default;
        private static bool _MMS_CONFIG_SUBJECT_MAX_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_SUPPORT_HTTP_CHARSET_HEADER"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_SUPPORT_HTTP_CHARSET_HEADER { get { if (!_MMS_CONFIG_SUPPORT_HTTP_CHARSET_HEADERReady) { _MMS_CONFIG_SUPPORT_HTTP_CHARSET_HEADERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_SUPPORT_HTTP_CHARSET_HEADER"); _MMS_CONFIG_SUPPORT_HTTP_CHARSET_HEADERReady = true; } return _MMS_CONFIG_SUPPORT_HTTP_CHARSET_HEADERContent; } }
        private static Java.Lang.String _MMS_CONFIG_SUPPORT_HTTP_CHARSET_HEADERContent = default;
        private static bool _MMS_CONFIG_SUPPORT_HTTP_CHARSET_HEADERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITION"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITION { get { if (!_MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITIONReady) { _MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITION"); _MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITIONReady = true; } return _MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITIONContent; } }
        private static Java.Lang.String _MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITIONContent = default;
        private static bool _MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_UA_PROF_TAG_NAME"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_UA_PROF_TAG_NAME { get { if (!_MMS_CONFIG_UA_PROF_TAG_NAMEReady) { _MMS_CONFIG_UA_PROF_TAG_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_UA_PROF_TAG_NAME"); _MMS_CONFIG_UA_PROF_TAG_NAMEReady = true; } return _MMS_CONFIG_UA_PROF_TAG_NAMEContent; } }
        private static Java.Lang.String _MMS_CONFIG_UA_PROF_TAG_NAMEContent = default;
        private static bool _MMS_CONFIG_UA_PROF_TAG_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_UA_PROF_URL"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_UA_PROF_URL { get { if (!_MMS_CONFIG_UA_PROF_URLReady) { _MMS_CONFIG_UA_PROF_URLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_UA_PROF_URL"); _MMS_CONFIG_UA_PROF_URLReady = true; } return _MMS_CONFIG_UA_PROF_URLContent; } }
        private static Java.Lang.String _MMS_CONFIG_UA_PROF_URLContent = default;
        private static bool _MMS_CONFIG_UA_PROF_URLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#MMS_CONFIG_USER_AGENT"/>
        /// </summary>
        public static Java.Lang.String MMS_CONFIG_USER_AGENT { get { if (!_MMS_CONFIG_USER_AGENTReady) { _MMS_CONFIG_USER_AGENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MMS_CONFIG_USER_AGENT"); _MMS_CONFIG_USER_AGENTReady = true; } return _MMS_CONFIG_USER_AGENTContent; } }
        private static Java.Lang.String _MMS_CONFIG_USER_AGENTContent = default;
        private static bool _MMS_CONFIG_USER_AGENTReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#getDefaultSmsSubscriptionId()"/> 
        /// </summary>
        public static int DefaultSmsSubscriptionId
        {
            get { return SExecuteWithSignature<int>(LocalBridgeClazz, "getDefaultSmsSubscriptionId", "()I"); }
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#getCarrierConfigValues()"/> 
        /// </summary>
        public Android.Os.Bundle CarrierConfigValues
        {
            get { return IExecuteWithSignature<Android.Os.Bundle>("getCarrierConfigValues", "()Landroid/os/Bundle;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#getSmscAddress()"/> 
        /// </summary>
        public Java.Lang.String SmscAddress
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getSmscAddress", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#getSmsCapacityOnIcc()"/> 
        /// </summary>
        public int SmsCapacityOnIcc
        {
            get { return IExecuteWithSignature<int>("getSmsCapacityOnIcc", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#getSubscriptionId()"/> 
        /// </summary>
        public int SubscriptionId
        {
            get { return IExecuteWithSignature<int>("getSubscriptionId", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#createForSubscriptionId(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Telephony.SmsManager"/></returns>
        public Android.Telephony.SmsManager CreateForSubscriptionId(int arg0)
        {
            return IExecuteWithSignature<Android.Telephony.SmsManager>("createForSubscriptionId", "(I)Landroid/telephony/SmsManager;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#setSmscAddress(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetSmscAddress(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("setSmscAddress", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#createAppSpecificSmsToken(android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.App.PendingIntent"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String CreateAppSpecificSmsToken(Android.App.PendingIntent arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("createAppSpecificSmsToken", "(Landroid/app/PendingIntent;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#createAppSpecificSmsTokenWithPackageInfo(java.lang.String,android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.App.PendingIntent"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String CreateAppSpecificSmsTokenWithPackageInfo(Java.Lang.String arg0, Android.App.PendingIntent arg1)
        {
            return IExecute<Java.Lang.String>("createAppSpecificSmsTokenWithPackageInfo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#divideMessage(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.ArrayList"/></returns>
        public Java.Util.ArrayList<Java.Lang.String> DivideMessage(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Util.ArrayList<Java.Lang.String>>("divideMessage", "(Ljava/lang/String;)Ljava/util/ArrayList;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg3"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg4"><see cref="Android.App.PendingIntent"/></param>
        /// <param name="arg5"><see cref="long"/></param>
        public void DownloadMultimediaMessage(Android.Content.Context arg0, Java.Lang.String arg1, Android.Net.Uri arg2, Android.Os.Bundle arg3, Android.App.PendingIntent arg4, long arg5)
        {
            IExecute("downloadMultimediaMessage", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg3"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg4"><see cref="Android.App.PendingIntent"/></param>
        public void DownloadMultimediaMessage(Android.Content.Context arg0, Java.Lang.String arg1, Android.Net.Uri arg2, Android.Os.Bundle arg3, Android.App.PendingIntent arg4)
        {
            IExecute("downloadMultimediaMessage", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#getSmsMessagesForFinancialApp(android.os.Bundle,java.util.concurrent.Executor,android.telephony.SmsManager.FinancialSmsCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Telephony.SmsManager.FinancialSmsCallback"/></param>
        public void GetSmsMessagesForFinancialApp(Android.Os.Bundle arg0, Java.Util.Concurrent.Executor arg1, Android.Telephony.SmsManager.FinancialSmsCallback arg2)
        {
            IExecute("getSmsMessagesForFinancialApp", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#injectSmsPdu(byte[],java.lang.String,android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.App.PendingIntent"/></param>
        public void InjectSmsPdu(byte[] arg0, Java.Lang.String arg1, Android.App.PendingIntent arg2)
        {
            IExecute("injectSmsPdu", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        /// <param name="arg3"><see cref="byte"/></param>
        /// <param name="arg4"><see cref="Android.App.PendingIntent"/></param>
        /// <param name="arg5"><see cref="Android.App.PendingIntent"/></param>
        public void SendDataMessage(Java.Lang.String arg0, Java.Lang.String arg1, short arg2, byte[] arg3, Android.App.PendingIntent arg4, Android.App.PendingIntent arg5)
        {
            IExecute("sendDataMessage", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#sendMultimediaMessage(android.content.Context,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg4"><see cref="Android.App.PendingIntent"/></param>
        /// <param name="arg5"><see cref="long"/></param>
        public void SendMultimediaMessage(Android.Content.Context arg0, Android.Net.Uri arg1, Java.Lang.String arg2, Android.Os.Bundle arg3, Android.App.PendingIntent arg4, long arg5)
        {
            IExecute("sendMultimediaMessage", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#sendMultimediaMessage(android.content.Context,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg4"><see cref="Android.App.PendingIntent"/></param>
        public void SendMultimediaMessage(Android.Content.Context arg0, Android.Net.Uri arg1, Java.Lang.String arg2, Android.Os.Bundle arg3, Android.App.PendingIntent arg4)
        {
            IExecute("sendMultimediaMessage", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Util.ArrayList"/></param>
        /// <param name="arg3"><see cref="Java.Util.ArrayList"/></param>
        /// <param name="arg4"><see cref="Java.Util.ArrayList"/></param>
        public void SendMultipartTextMessage(Java.Lang.String arg0, Java.Lang.String arg1, Java.Util.ArrayList<Java.Lang.String> arg2, Java.Util.ArrayList<Android.App.PendingIntent> arg3, Java.Util.ArrayList<Android.App.PendingIntent> arg4)
        {
            IExecute("sendMultipartTextMessage", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Util.List"/></param>
        /// <param name="arg3"><see cref="Java.Util.List"/></param>
        /// <param name="arg4"><see cref="Java.Util.List"/></param>
        /// <param name="arg5"><see cref="Java.Lang.String"/></param>
        /// <param name="arg6"><see cref="Java.Lang.String"/></param>
        public void SendMultipartTextMessage(Java.Lang.String arg0, Java.Lang.String arg1, Java.Util.List<Java.Lang.String> arg2, Java.Util.List<Android.App.PendingIntent> arg3, Java.Util.List<Android.App.PendingIntent> arg4, Java.Lang.String arg5, Java.Lang.String arg6)
        {
            IExecute("sendMultipartTextMessage", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Util.List"/></param>
        /// <param name="arg3"><see cref="Java.Util.List"/></param>
        /// <param name="arg4"><see cref="Java.Util.List"/></param>
        /// <param name="arg5"><see cref="long"/></param>
        public void SendMultipartTextMessage(Java.Lang.String arg0, Java.Lang.String arg1, Java.Util.List<Java.Lang.String> arg2, Java.Util.List<Android.App.PendingIntent> arg3, Java.Util.List<Android.App.PendingIntent> arg4, long arg5)
        {
            IExecute("sendMultipartTextMessage", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Android.App.PendingIntent"/></param>
        /// <param name="arg4"><see cref="Android.App.PendingIntent"/></param>
        /// <param name="arg5"><see cref="long"/></param>
        public void SendTextMessage(Java.Lang.String arg0, Java.Lang.String arg1, Java.Lang.String arg2, Android.App.PendingIntent arg3, Android.App.PendingIntent arg4, long arg5)
        {
            IExecute("sendTextMessage", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Android.App.PendingIntent"/></param>
        /// <param name="arg4"><see cref="Android.App.PendingIntent"/></param>
        public void SendTextMessage(Java.Lang.String arg0, Java.Lang.String arg1, Java.Lang.String arg2, Android.App.PendingIntent arg3, Android.App.PendingIntent arg4)
        {
            IExecute("sendTextMessage", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.html#sendTextMessageWithoutPersisting(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Android.App.PendingIntent"/></param>
        /// <param name="arg4"><see cref="Android.App.PendingIntent"/></param>
        public void SendTextMessageWithoutPersisting(Java.Lang.String arg0, Java.Lang.String arg1, Java.Lang.String arg2, Android.App.PendingIntent arg3, Android.App.PendingIntent arg4)
        {
            IExecute("sendTextMessageWithoutPersisting", arg0, arg1, arg2, arg3, arg4);
        }

        #endregion

        #region Nested classes
        #region FinancialSmsCallback
        public partial class FinancialSmsCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/SmsManager.FinancialSmsCallback.html#onFinancialSmsMessages(android.database.CursorWindow)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Database.CursorWindow"/></param>
            public void OnFinancialSmsMessages(Android.Database.CursorWindow arg0)
            {
                IExecuteWithSignature("onFinancialSmsMessages", "(Landroid/database/CursorWindow;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
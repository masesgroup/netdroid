/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Telephony.Mbms
{
    #region MbmsErrors
    public partial class MbmsErrors
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.html#ERROR_MIDDLEWARE_LOST"/>
        /// </summary>
        public static int ERROR_MIDDLEWARE_LOST { get { if (!_ERROR_MIDDLEWARE_LOSTReady) { _ERROR_MIDDLEWARE_LOSTContent = SGetField<int>(LocalBridgeClazz, "ERROR_MIDDLEWARE_LOST"); _ERROR_MIDDLEWARE_LOSTReady = true; } return _ERROR_MIDDLEWARE_LOSTContent; } }
        private static int _ERROR_MIDDLEWARE_LOSTContent = default;
        private static bool _ERROR_MIDDLEWARE_LOSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.html#ERROR_MIDDLEWARE_NOT_BOUND"/>
        /// </summary>
        public static int ERROR_MIDDLEWARE_NOT_BOUND { get { if (!_ERROR_MIDDLEWARE_NOT_BOUNDReady) { _ERROR_MIDDLEWARE_NOT_BOUNDContent = SGetField<int>(LocalBridgeClazz, "ERROR_MIDDLEWARE_NOT_BOUND"); _ERROR_MIDDLEWARE_NOT_BOUNDReady = true; } return _ERROR_MIDDLEWARE_NOT_BOUNDContent; } }
        private static int _ERROR_MIDDLEWARE_NOT_BOUNDContent = default;
        private static bool _ERROR_MIDDLEWARE_NOT_BOUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.html#ERROR_NO_UNIQUE_MIDDLEWARE"/>
        /// </summary>
        public static int ERROR_NO_UNIQUE_MIDDLEWARE { get { if (!_ERROR_NO_UNIQUE_MIDDLEWAREReady) { _ERROR_NO_UNIQUE_MIDDLEWAREContent = SGetField<int>(LocalBridgeClazz, "ERROR_NO_UNIQUE_MIDDLEWARE"); _ERROR_NO_UNIQUE_MIDDLEWAREReady = true; } return _ERROR_NO_UNIQUE_MIDDLEWAREContent; } }
        private static int _ERROR_NO_UNIQUE_MIDDLEWAREContent = default;
        private static bool _ERROR_NO_UNIQUE_MIDDLEWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.html#SUCCESS"/>
        /// </summary>
        public static int SUCCESS { get { if (!_SUCCESSReady) { _SUCCESSContent = SGetField<int>(LocalBridgeClazz, "SUCCESS"); _SUCCESSReady = true; } return _SUCCESSContent; } }
        private static int _SUCCESSContent = default;
        private static bool _SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.html#UNKNOWN"/>
        /// </summary>
        public static int UNKNOWN { get { if (!_UNKNOWNReady) { _UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "UNKNOWN"); _UNKNOWNReady = true; } return _UNKNOWNContent; } }
        private static int _UNKNOWNContent = default;
        private static bool _UNKNOWNReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region DownloadErrors
        public partial class DownloadErrors
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.DownloadErrors.html#ERROR_CANNOT_CHANGE_TEMP_FILE_ROOT"/>
            /// </summary>
            public static int ERROR_CANNOT_CHANGE_TEMP_FILE_ROOT { get { if (!_ERROR_CANNOT_CHANGE_TEMP_FILE_ROOTReady) { _ERROR_CANNOT_CHANGE_TEMP_FILE_ROOTContent = SGetField<int>(LocalBridgeClazz, "ERROR_CANNOT_CHANGE_TEMP_FILE_ROOT"); _ERROR_CANNOT_CHANGE_TEMP_FILE_ROOTReady = true; } return _ERROR_CANNOT_CHANGE_TEMP_FILE_ROOTContent; } }
            private static int _ERROR_CANNOT_CHANGE_TEMP_FILE_ROOTContent = default;
            private static bool _ERROR_CANNOT_CHANGE_TEMP_FILE_ROOTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.DownloadErrors.html#ERROR_MALFORMED_SERVICE_ANNOUNCEMENT"/>
            /// </summary>
            public static int ERROR_MALFORMED_SERVICE_ANNOUNCEMENT { get { if (!_ERROR_MALFORMED_SERVICE_ANNOUNCEMENTReady) { _ERROR_MALFORMED_SERVICE_ANNOUNCEMENTContent = SGetField<int>(LocalBridgeClazz, "ERROR_MALFORMED_SERVICE_ANNOUNCEMENT"); _ERROR_MALFORMED_SERVICE_ANNOUNCEMENTReady = true; } return _ERROR_MALFORMED_SERVICE_ANNOUNCEMENTContent; } }
            private static int _ERROR_MALFORMED_SERVICE_ANNOUNCEMENTContent = default;
            private static bool _ERROR_MALFORMED_SERVICE_ANNOUNCEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.DownloadErrors.html#ERROR_UNKNOWN_DOWNLOAD_REQUEST"/>
            /// </summary>
            public static int ERROR_UNKNOWN_DOWNLOAD_REQUEST { get { if (!_ERROR_UNKNOWN_DOWNLOAD_REQUESTReady) { _ERROR_UNKNOWN_DOWNLOAD_REQUESTContent = SGetField<int>(LocalBridgeClazz, "ERROR_UNKNOWN_DOWNLOAD_REQUEST"); _ERROR_UNKNOWN_DOWNLOAD_REQUESTReady = true; } return _ERROR_UNKNOWN_DOWNLOAD_REQUESTContent; } }
            private static int _ERROR_UNKNOWN_DOWNLOAD_REQUESTContent = default;
            private static bool _ERROR_UNKNOWN_DOWNLOAD_REQUESTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.DownloadErrors.html#ERROR_UNKNOWN_FILE_INFO"/>
            /// </summary>
            public static int ERROR_UNKNOWN_FILE_INFO { get { if (!_ERROR_UNKNOWN_FILE_INFOReady) { _ERROR_UNKNOWN_FILE_INFOContent = SGetField<int>(LocalBridgeClazz, "ERROR_UNKNOWN_FILE_INFO"); _ERROR_UNKNOWN_FILE_INFOReady = true; } return _ERROR_UNKNOWN_FILE_INFOContent; } }
            private static int _ERROR_UNKNOWN_FILE_INFOContent = default;
            private static bool _ERROR_UNKNOWN_FILE_INFOReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region GeneralErrors
        public partial class GeneralErrors
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.GeneralErrors.html#ERROR_CARRIER_CHANGE_NOT_ALLOWED"/>
            /// </summary>
            public static int ERROR_CARRIER_CHANGE_NOT_ALLOWED { get { if (!_ERROR_CARRIER_CHANGE_NOT_ALLOWEDReady) { _ERROR_CARRIER_CHANGE_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "ERROR_CARRIER_CHANGE_NOT_ALLOWED"); _ERROR_CARRIER_CHANGE_NOT_ALLOWEDReady = true; } return _ERROR_CARRIER_CHANGE_NOT_ALLOWEDContent; } }
            private static int _ERROR_CARRIER_CHANGE_NOT_ALLOWEDContent = default;
            private static bool _ERROR_CARRIER_CHANGE_NOT_ALLOWEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.GeneralErrors.html#ERROR_IN_E911"/>
            /// </summary>
            public static int ERROR_IN_E911 { get { if (!_ERROR_IN_E911Ready) { _ERROR_IN_E911Content = SGetField<int>(LocalBridgeClazz, "ERROR_IN_E911"); _ERROR_IN_E911Ready = true; } return _ERROR_IN_E911Content; } }
            private static int _ERROR_IN_E911Content = default;
            private static bool _ERROR_IN_E911Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.GeneralErrors.html#ERROR_MIDDLEWARE_NOT_YET_READY"/>
            /// </summary>
            public static int ERROR_MIDDLEWARE_NOT_YET_READY { get { if (!_ERROR_MIDDLEWARE_NOT_YET_READYReady) { _ERROR_MIDDLEWARE_NOT_YET_READYContent = SGetField<int>(LocalBridgeClazz, "ERROR_MIDDLEWARE_NOT_YET_READY"); _ERROR_MIDDLEWARE_NOT_YET_READYReady = true; } return _ERROR_MIDDLEWARE_NOT_YET_READYContent; } }
            private static int _ERROR_MIDDLEWARE_NOT_YET_READYContent = default;
            private static bool _ERROR_MIDDLEWARE_NOT_YET_READYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.GeneralErrors.html#ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLE"/>
            /// </summary>
            public static int ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLE { get { if (!_ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLEReady) { _ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLE"); _ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLEReady = true; } return _ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLEContent; } }
            private static int _ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLEContent = default;
            private static bool _ERROR_MIDDLEWARE_TEMPORARILY_UNAVAILABLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.GeneralErrors.html#ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTE"/>
            /// </summary>
            public static int ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTE { get { if (!_ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTEReady) { _ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTEContent = SGetField<int>(LocalBridgeClazz, "ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTE"); _ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTEReady = true; } return _ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTEContent; } }
            private static int _ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTEContent = default;
            private static bool _ERROR_NOT_CONNECTED_TO_HOME_CARRIER_LTEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.GeneralErrors.html#ERROR_OUT_OF_MEMORY"/>
            /// </summary>
            public static int ERROR_OUT_OF_MEMORY { get { if (!_ERROR_OUT_OF_MEMORYReady) { _ERROR_OUT_OF_MEMORYContent = SGetField<int>(LocalBridgeClazz, "ERROR_OUT_OF_MEMORY"); _ERROR_OUT_OF_MEMORYReady = true; } return _ERROR_OUT_OF_MEMORYContent; } }
            private static int _ERROR_OUT_OF_MEMORYContent = default;
            private static bool _ERROR_OUT_OF_MEMORYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.GeneralErrors.html#ERROR_UNABLE_TO_READ_SIM"/>
            /// </summary>
            public static int ERROR_UNABLE_TO_READ_SIM { get { if (!_ERROR_UNABLE_TO_READ_SIMReady) { _ERROR_UNABLE_TO_READ_SIMContent = SGetField<int>(LocalBridgeClazz, "ERROR_UNABLE_TO_READ_SIM"); _ERROR_UNABLE_TO_READ_SIMReady = true; } return _ERROR_UNABLE_TO_READ_SIMContent; } }
            private static int _ERROR_UNABLE_TO_READ_SIMContent = default;
            private static bool _ERROR_UNABLE_TO_READ_SIMReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region GroupCallErrors
        public partial class GroupCallErrors
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.GroupCallErrors.html#ERROR_DUPLICATE_START_GROUP_CALL"/>
            /// </summary>
            public static int ERROR_DUPLICATE_START_GROUP_CALL { get { if (!_ERROR_DUPLICATE_START_GROUP_CALLReady) { _ERROR_DUPLICATE_START_GROUP_CALLContent = SGetField<int>(LocalBridgeClazz, "ERROR_DUPLICATE_START_GROUP_CALL"); _ERROR_DUPLICATE_START_GROUP_CALLReady = true; } return _ERROR_DUPLICATE_START_GROUP_CALLContent; } }
            private static int _ERROR_DUPLICATE_START_GROUP_CALLContent = default;
            private static bool _ERROR_DUPLICATE_START_GROUP_CALLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.GroupCallErrors.html#ERROR_UNABLE_TO_START_SERVICE"/>
            /// </summary>
            public static int ERROR_UNABLE_TO_START_SERVICE { get { if (!_ERROR_UNABLE_TO_START_SERVICEReady) { _ERROR_UNABLE_TO_START_SERVICEContent = SGetField<int>(LocalBridgeClazz, "ERROR_UNABLE_TO_START_SERVICE"); _ERROR_UNABLE_TO_START_SERVICEReady = true; } return _ERROR_UNABLE_TO_START_SERVICEContent; } }
            private static int _ERROR_UNABLE_TO_START_SERVICEContent = default;
            private static bool _ERROR_UNABLE_TO_START_SERVICEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region InitializationErrors
        public partial class InitializationErrors
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.InitializationErrors.html#ERROR_APP_PERMISSIONS_NOT_GRANTED"/>
            /// </summary>
            public static int ERROR_APP_PERMISSIONS_NOT_GRANTED { get { if (!_ERROR_APP_PERMISSIONS_NOT_GRANTEDReady) { _ERROR_APP_PERMISSIONS_NOT_GRANTEDContent = SGetField<int>(LocalBridgeClazz, "ERROR_APP_PERMISSIONS_NOT_GRANTED"); _ERROR_APP_PERMISSIONS_NOT_GRANTEDReady = true; } return _ERROR_APP_PERMISSIONS_NOT_GRANTEDContent; } }
            private static int _ERROR_APP_PERMISSIONS_NOT_GRANTEDContent = default;
            private static bool _ERROR_APP_PERMISSIONS_NOT_GRANTEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.InitializationErrors.html#ERROR_DUPLICATE_INITIALIZE"/>
            /// </summary>
            public static int ERROR_DUPLICATE_INITIALIZE { get { if (!_ERROR_DUPLICATE_INITIALIZEReady) { _ERROR_DUPLICATE_INITIALIZEContent = SGetField<int>(LocalBridgeClazz, "ERROR_DUPLICATE_INITIALIZE"); _ERROR_DUPLICATE_INITIALIZEReady = true; } return _ERROR_DUPLICATE_INITIALIZEContent; } }
            private static int _ERROR_DUPLICATE_INITIALIZEContent = default;
            private static bool _ERROR_DUPLICATE_INITIALIZEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.InitializationErrors.html#ERROR_UNABLE_TO_INITIALIZE"/>
            /// </summary>
            public static int ERROR_UNABLE_TO_INITIALIZE { get { if (!_ERROR_UNABLE_TO_INITIALIZEReady) { _ERROR_UNABLE_TO_INITIALIZEContent = SGetField<int>(LocalBridgeClazz, "ERROR_UNABLE_TO_INITIALIZE"); _ERROR_UNABLE_TO_INITIALIZEReady = true; } return _ERROR_UNABLE_TO_INITIALIZEContent; } }
            private static int _ERROR_UNABLE_TO_INITIALIZEContent = default;
            private static bool _ERROR_UNABLE_TO_INITIALIZEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region StreamingErrors
        public partial class StreamingErrors
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.StreamingErrors.html#ERROR_CONCURRENT_SERVICE_LIMIT_REACHED"/>
            /// </summary>
            public static int ERROR_CONCURRENT_SERVICE_LIMIT_REACHED { get { if (!_ERROR_CONCURRENT_SERVICE_LIMIT_REACHEDReady) { _ERROR_CONCURRENT_SERVICE_LIMIT_REACHEDContent = SGetField<int>(LocalBridgeClazz, "ERROR_CONCURRENT_SERVICE_LIMIT_REACHED"); _ERROR_CONCURRENT_SERVICE_LIMIT_REACHEDReady = true; } return _ERROR_CONCURRENT_SERVICE_LIMIT_REACHEDContent; } }
            private static int _ERROR_CONCURRENT_SERVICE_LIMIT_REACHEDContent = default;
            private static bool _ERROR_CONCURRENT_SERVICE_LIMIT_REACHEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.StreamingErrors.html#ERROR_DUPLICATE_START_STREAM"/>
            /// </summary>
            public static int ERROR_DUPLICATE_START_STREAM { get { if (!_ERROR_DUPLICATE_START_STREAMReady) { _ERROR_DUPLICATE_START_STREAMContent = SGetField<int>(LocalBridgeClazz, "ERROR_DUPLICATE_START_STREAM"); _ERROR_DUPLICATE_START_STREAMReady = true; } return _ERROR_DUPLICATE_START_STREAMContent; } }
            private static int _ERROR_DUPLICATE_START_STREAMContent = default;
            private static bool _ERROR_DUPLICATE_START_STREAMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/mbms/MbmsErrors.StreamingErrors.html#ERROR_UNABLE_TO_START_SERVICE"/>
            /// </summary>
            public static int ERROR_UNABLE_TO_START_SERVICE { get { if (!_ERROR_UNABLE_TO_START_SERVICEReady) { _ERROR_UNABLE_TO_START_SERVICEContent = SGetField<int>(LocalBridgeClazz, "ERROR_UNABLE_TO_START_SERVICE"); _ERROR_UNABLE_TO_START_SERVICEReady = true; } return _ERROR_UNABLE_TO_START_SERVICEContent; } }
            private static int _ERROR_UNABLE_TO_START_SERVICEContent = default;
            private static bool _ERROR_UNABLE_TO_START_SERVICEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
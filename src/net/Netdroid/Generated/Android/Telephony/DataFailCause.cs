/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Telephony
{
    #region DataFailCause
    public partial class DataFailCause
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ACCESS_ATTEMPT_ALREADY_IN_PROGRESS"/>
        /// </summary>
        public static int ACCESS_ATTEMPT_ALREADY_IN_PROGRESS { get { if (!_ACCESS_ATTEMPT_ALREADY_IN_PROGRESSReady) { _ACCESS_ATTEMPT_ALREADY_IN_PROGRESSContent = SGetField<int>(LocalBridgeClazz, "ACCESS_ATTEMPT_ALREADY_IN_PROGRESS"); _ACCESS_ATTEMPT_ALREADY_IN_PROGRESSReady = true; } return _ACCESS_ATTEMPT_ALREADY_IN_PROGRESSContent; } }
        private static int _ACCESS_ATTEMPT_ALREADY_IN_PROGRESSContent = default;
        private static bool _ACCESS_ATTEMPT_ALREADY_IN_PROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ACCESS_BLOCK"/>
        /// </summary>
        public static int ACCESS_BLOCK { get { if (!_ACCESS_BLOCKReady) { _ACCESS_BLOCKContent = SGetField<int>(LocalBridgeClazz, "ACCESS_BLOCK"); _ACCESS_BLOCKReady = true; } return _ACCESS_BLOCKContent; } }
        private static int _ACCESS_BLOCKContent = default;
        private static bool _ACCESS_BLOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ACCESS_BLOCK_ALL"/>
        /// </summary>
        public static int ACCESS_BLOCK_ALL { get { if (!_ACCESS_BLOCK_ALLReady) { _ACCESS_BLOCK_ALLContent = SGetField<int>(LocalBridgeClazz, "ACCESS_BLOCK_ALL"); _ACCESS_BLOCK_ALLReady = true; } return _ACCESS_BLOCK_ALLContent; } }
        private static int _ACCESS_BLOCK_ALLContent = default;
        private static bool _ACCESS_BLOCK_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ACCESS_CLASS_DSAC_REJECTION"/>
        /// </summary>
        public static int ACCESS_CLASS_DSAC_REJECTION { get { if (!_ACCESS_CLASS_DSAC_REJECTIONReady) { _ACCESS_CLASS_DSAC_REJECTIONContent = SGetField<int>(LocalBridgeClazz, "ACCESS_CLASS_DSAC_REJECTION"); _ACCESS_CLASS_DSAC_REJECTIONReady = true; } return _ACCESS_CLASS_DSAC_REJECTIONContent; } }
        private static int _ACCESS_CLASS_DSAC_REJECTIONContent = default;
        private static bool _ACCESS_CLASS_DSAC_REJECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ACCESS_CONTROL_LIST_CHECK_FAILURE"/>
        /// </summary>
        public static int ACCESS_CONTROL_LIST_CHECK_FAILURE { get { if (!_ACCESS_CONTROL_LIST_CHECK_FAILUREReady) { _ACCESS_CONTROL_LIST_CHECK_FAILUREContent = SGetField<int>(LocalBridgeClazz, "ACCESS_CONTROL_LIST_CHECK_FAILURE"); _ACCESS_CONTROL_LIST_CHECK_FAILUREReady = true; } return _ACCESS_CONTROL_LIST_CHECK_FAILUREContent; } }
        private static int _ACCESS_CONTROL_LIST_CHECK_FAILUREContent = default;
        private static bool _ACCESS_CONTROL_LIST_CHECK_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ACTIVATION_REJECT_GGSN"/>
        /// </summary>
        public static int ACTIVATION_REJECT_GGSN { get { if (!_ACTIVATION_REJECT_GGSNReady) { _ACTIVATION_REJECT_GGSNContent = SGetField<int>(LocalBridgeClazz, "ACTIVATION_REJECT_GGSN"); _ACTIVATION_REJECT_GGSNReady = true; } return _ACTIVATION_REJECT_GGSNContent; } }
        private static int _ACTIVATION_REJECT_GGSNContent = default;
        private static bool _ACTIVATION_REJECT_GGSNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ACTIVATION_REJECT_UNSPECIFIED"/>
        /// </summary>
        public static int ACTIVATION_REJECT_UNSPECIFIED { get { if (!_ACTIVATION_REJECT_UNSPECIFIEDReady) { _ACTIVATION_REJECT_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "ACTIVATION_REJECT_UNSPECIFIED"); _ACTIVATION_REJECT_UNSPECIFIEDReady = true; } return _ACTIVATION_REJECT_UNSPECIFIEDContent; } }
        private static int _ACTIVATION_REJECT_UNSPECIFIEDContent = default;
        private static bool _ACTIVATION_REJECT_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ACTIVATION_REJECTED_BCM_VIOLATION"/>
        /// </summary>
        public static int ACTIVATION_REJECTED_BCM_VIOLATION { get { if (!_ACTIVATION_REJECTED_BCM_VIOLATIONReady) { _ACTIVATION_REJECTED_BCM_VIOLATIONContent = SGetField<int>(LocalBridgeClazz, "ACTIVATION_REJECTED_BCM_VIOLATION"); _ACTIVATION_REJECTED_BCM_VIOLATIONReady = true; } return _ACTIVATION_REJECTED_BCM_VIOLATIONContent; } }
        private static int _ACTIVATION_REJECTED_BCM_VIOLATIONContent = default;
        private static bool _ACTIVATION_REJECTED_BCM_VIOLATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ACTIVE_PDP_CONTEXT_MAX_NUMBER_REACHED"/>
        /// </summary>
        public static int ACTIVE_PDP_CONTEXT_MAX_NUMBER_REACHED { get { if (!_ACTIVE_PDP_CONTEXT_MAX_NUMBER_REACHEDReady) { _ACTIVE_PDP_CONTEXT_MAX_NUMBER_REACHEDContent = SGetField<int>(LocalBridgeClazz, "ACTIVE_PDP_CONTEXT_MAX_NUMBER_REACHED"); _ACTIVE_PDP_CONTEXT_MAX_NUMBER_REACHEDReady = true; } return _ACTIVE_PDP_CONTEXT_MAX_NUMBER_REACHEDContent; } }
        private static int _ACTIVE_PDP_CONTEXT_MAX_NUMBER_REACHEDContent = default;
        private static bool _ACTIVE_PDP_CONTEXT_MAX_NUMBER_REACHEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ALL_MATCHING_RULES_FAILED"/>
        /// </summary>
        public static int ALL_MATCHING_RULES_FAILED { get { if (!_ALL_MATCHING_RULES_FAILEDReady) { _ALL_MATCHING_RULES_FAILEDContent = SGetField<int>(LocalBridgeClazz, "ALL_MATCHING_RULES_FAILED"); _ALL_MATCHING_RULES_FAILEDReady = true; } return _ALL_MATCHING_RULES_FAILEDContent; } }
        private static int _ALL_MATCHING_RULES_FAILEDContent = default;
        private static bool _ALL_MATCHING_RULES_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#APN_DISABLED"/>
        /// </summary>
        public static int APN_DISABLED { get { if (!_APN_DISABLEDReady) { _APN_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "APN_DISABLED"); _APN_DISABLEDReady = true; } return _APN_DISABLEDContent; } }
        private static int _APN_DISABLEDContent = default;
        private static bool _APN_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#APN_DISALLOWED_ON_ROAMING"/>
        /// </summary>
        public static int APN_DISALLOWED_ON_ROAMING { get { if (!_APN_DISALLOWED_ON_ROAMINGReady) { _APN_DISALLOWED_ON_ROAMINGContent = SGetField<int>(LocalBridgeClazz, "APN_DISALLOWED_ON_ROAMING"); _APN_DISALLOWED_ON_ROAMINGReady = true; } return _APN_DISALLOWED_ON_ROAMINGContent; } }
        private static int _APN_DISALLOWED_ON_ROAMINGContent = default;
        private static bool _APN_DISALLOWED_ON_ROAMINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#APN_MISMATCH"/>
        /// </summary>
        public static int APN_MISMATCH { get { if (!_APN_MISMATCHReady) { _APN_MISMATCHContent = SGetField<int>(LocalBridgeClazz, "APN_MISMATCH"); _APN_MISMATCHReady = true; } return _APN_MISMATCHContent; } }
        private static int _APN_MISMATCHContent = default;
        private static bool _APN_MISMATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#APN_PARAMETERS_CHANGED"/>
        /// </summary>
        public static int APN_PARAMETERS_CHANGED { get { if (!_APN_PARAMETERS_CHANGEDReady) { _APN_PARAMETERS_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "APN_PARAMETERS_CHANGED"); _APN_PARAMETERS_CHANGEDReady = true; } return _APN_PARAMETERS_CHANGEDContent; } }
        private static int _APN_PARAMETERS_CHANGEDContent = default;
        private static bool _APN_PARAMETERS_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#APN_PENDING_HANDOVER"/>
        /// </summary>
        public static int APN_PENDING_HANDOVER { get { if (!_APN_PENDING_HANDOVERReady) { _APN_PENDING_HANDOVERContent = SGetField<int>(LocalBridgeClazz, "APN_PENDING_HANDOVER"); _APN_PENDING_HANDOVERReady = true; } return _APN_PENDING_HANDOVERContent; } }
        private static int _APN_PENDING_HANDOVERContent = default;
        private static bool _APN_PENDING_HANDOVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#APN_TYPE_CONFLICT"/>
        /// </summary>
        public static int APN_TYPE_CONFLICT { get { if (!_APN_TYPE_CONFLICTReady) { _APN_TYPE_CONFLICTContent = SGetField<int>(LocalBridgeClazz, "APN_TYPE_CONFLICT"); _APN_TYPE_CONFLICTReady = true; } return _APN_TYPE_CONFLICTContent; } }
        private static int _APN_TYPE_CONFLICTContent = default;
        private static bool _APN_TYPE_CONFLICTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#AUTH_FAILURE_ON_EMERGENCY_CALL"/>
        /// </summary>
        public static int AUTH_FAILURE_ON_EMERGENCY_CALL { get { if (!_AUTH_FAILURE_ON_EMERGENCY_CALLReady) { _AUTH_FAILURE_ON_EMERGENCY_CALLContent = SGetField<int>(LocalBridgeClazz, "AUTH_FAILURE_ON_EMERGENCY_CALL"); _AUTH_FAILURE_ON_EMERGENCY_CALLReady = true; } return _AUTH_FAILURE_ON_EMERGENCY_CALLContent; } }
        private static int _AUTH_FAILURE_ON_EMERGENCY_CALLContent = default;
        private static bool _AUTH_FAILURE_ON_EMERGENCY_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#BEARER_HANDLING_NOT_SUPPORTED"/>
        /// </summary>
        public static int BEARER_HANDLING_NOT_SUPPORTED { get { if (!_BEARER_HANDLING_NOT_SUPPORTEDReady) { _BEARER_HANDLING_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "BEARER_HANDLING_NOT_SUPPORTED"); _BEARER_HANDLING_NOT_SUPPORTEDReady = true; } return _BEARER_HANDLING_NOT_SUPPORTEDContent; } }
        private static int _BEARER_HANDLING_NOT_SUPPORTEDContent = default;
        private static bool _BEARER_HANDLING_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CALL_DISALLOWED_IN_ROAMING"/>
        /// </summary>
        public static int CALL_DISALLOWED_IN_ROAMING { get { if (!_CALL_DISALLOWED_IN_ROAMINGReady) { _CALL_DISALLOWED_IN_ROAMINGContent = SGetField<int>(LocalBridgeClazz, "CALL_DISALLOWED_IN_ROAMING"); _CALL_DISALLOWED_IN_ROAMINGReady = true; } return _CALL_DISALLOWED_IN_ROAMINGContent; } }
        private static int _CALL_DISALLOWED_IN_ROAMINGContent = default;
        private static bool _CALL_DISALLOWED_IN_ROAMINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CALL_PREEMPT_BY_EMERGENCY_APN"/>
        /// </summary>
        public static int CALL_PREEMPT_BY_EMERGENCY_APN { get { if (!_CALL_PREEMPT_BY_EMERGENCY_APNReady) { _CALL_PREEMPT_BY_EMERGENCY_APNContent = SGetField<int>(LocalBridgeClazz, "CALL_PREEMPT_BY_EMERGENCY_APN"); _CALL_PREEMPT_BY_EMERGENCY_APNReady = true; } return _CALL_PREEMPT_BY_EMERGENCY_APNContent; } }
        private static int _CALL_PREEMPT_BY_EMERGENCY_APNContent = default;
        private static bool _CALL_PREEMPT_BY_EMERGENCY_APNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CANNOT_ENCODE_OTA_MESSAGE"/>
        /// </summary>
        public static int CANNOT_ENCODE_OTA_MESSAGE { get { if (!_CANNOT_ENCODE_OTA_MESSAGEReady) { _CANNOT_ENCODE_OTA_MESSAGEContent = SGetField<int>(LocalBridgeClazz, "CANNOT_ENCODE_OTA_MESSAGE"); _CANNOT_ENCODE_OTA_MESSAGEReady = true; } return _CANNOT_ENCODE_OTA_MESSAGEContent; } }
        private static int _CANNOT_ENCODE_OTA_MESSAGEContent = default;
        private static bool _CANNOT_ENCODE_OTA_MESSAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CDMA_ALERT_STOP"/>
        /// </summary>
        public static int CDMA_ALERT_STOP { get { if (!_CDMA_ALERT_STOPReady) { _CDMA_ALERT_STOPContent = SGetField<int>(LocalBridgeClazz, "CDMA_ALERT_STOP"); _CDMA_ALERT_STOPReady = true; } return _CDMA_ALERT_STOPContent; } }
        private static int _CDMA_ALERT_STOPContent = default;
        private static bool _CDMA_ALERT_STOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CDMA_INCOMING_CALL"/>
        /// </summary>
        public static int CDMA_INCOMING_CALL { get { if (!_CDMA_INCOMING_CALLReady) { _CDMA_INCOMING_CALLContent = SGetField<int>(LocalBridgeClazz, "CDMA_INCOMING_CALL"); _CDMA_INCOMING_CALLReady = true; } return _CDMA_INCOMING_CALLContent; } }
        private static int _CDMA_INCOMING_CALLContent = default;
        private static bool _CDMA_INCOMING_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CDMA_INTERCEPT"/>
        /// </summary>
        public static int CDMA_INTERCEPT { get { if (!_CDMA_INTERCEPTReady) { _CDMA_INTERCEPTContent = SGetField<int>(LocalBridgeClazz, "CDMA_INTERCEPT"); _CDMA_INTERCEPTReady = true; } return _CDMA_INTERCEPTContent; } }
        private static int _CDMA_INTERCEPTContent = default;
        private static bool _CDMA_INTERCEPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CDMA_LOCK"/>
        /// </summary>
        public static int CDMA_LOCK { get { if (!_CDMA_LOCKReady) { _CDMA_LOCKContent = SGetField<int>(LocalBridgeClazz, "CDMA_LOCK"); _CDMA_LOCKReady = true; } return _CDMA_LOCKContent; } }
        private static int _CDMA_LOCKContent = default;
        private static bool _CDMA_LOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CDMA_RELEASE_DUE_TO_SO_REJECTION"/>
        /// </summary>
        public static int CDMA_RELEASE_DUE_TO_SO_REJECTION { get { if (!_CDMA_RELEASE_DUE_TO_SO_REJECTIONReady) { _CDMA_RELEASE_DUE_TO_SO_REJECTIONContent = SGetField<int>(LocalBridgeClazz, "CDMA_RELEASE_DUE_TO_SO_REJECTION"); _CDMA_RELEASE_DUE_TO_SO_REJECTIONReady = true; } return _CDMA_RELEASE_DUE_TO_SO_REJECTIONContent; } }
        private static int _CDMA_RELEASE_DUE_TO_SO_REJECTIONContent = default;
        private static bool _CDMA_RELEASE_DUE_TO_SO_REJECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CDMA_REORDER"/>
        /// </summary>
        public static int CDMA_REORDER { get { if (!_CDMA_REORDERReady) { _CDMA_REORDERContent = SGetField<int>(LocalBridgeClazz, "CDMA_REORDER"); _CDMA_REORDERReady = true; } return _CDMA_REORDERContent; } }
        private static int _CDMA_REORDERContent = default;
        private static bool _CDMA_REORDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CDMA_RETRY_ORDER"/>
        /// </summary>
        public static int CDMA_RETRY_ORDER { get { if (!_CDMA_RETRY_ORDERReady) { _CDMA_RETRY_ORDERContent = SGetField<int>(LocalBridgeClazz, "CDMA_RETRY_ORDER"); _CDMA_RETRY_ORDERReady = true; } return _CDMA_RETRY_ORDERContent; } }
        private static int _CDMA_RETRY_ORDERContent = default;
        private static bool _CDMA_RETRY_ORDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CHANNEL_ACQUISITION_FAILURE"/>
        /// </summary>
        public static int CHANNEL_ACQUISITION_FAILURE { get { if (!_CHANNEL_ACQUISITION_FAILUREReady) { _CHANNEL_ACQUISITION_FAILUREContent = SGetField<int>(LocalBridgeClazz, "CHANNEL_ACQUISITION_FAILURE"); _CHANNEL_ACQUISITION_FAILUREReady = true; } return _CHANNEL_ACQUISITION_FAILUREContent; } }
        private static int _CHANNEL_ACQUISITION_FAILUREContent = default;
        private static bool _CHANNEL_ACQUISITION_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CLOSE_IN_PROGRESS"/>
        /// </summary>
        public static int CLOSE_IN_PROGRESS { get { if (!_CLOSE_IN_PROGRESSReady) { _CLOSE_IN_PROGRESSContent = SGetField<int>(LocalBridgeClazz, "CLOSE_IN_PROGRESS"); _CLOSE_IN_PROGRESSReady = true; } return _CLOSE_IN_PROGRESSContent; } }
        private static int _CLOSE_IN_PROGRESSContent = default;
        private static bool _CLOSE_IN_PROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#COLLISION_WITH_NETWORK_INITIATED_REQUEST"/>
        /// </summary>
        public static int COLLISION_WITH_NETWORK_INITIATED_REQUEST { get { if (!_COLLISION_WITH_NETWORK_INITIATED_REQUESTReady) { _COLLISION_WITH_NETWORK_INITIATED_REQUESTContent = SGetField<int>(LocalBridgeClazz, "COLLISION_WITH_NETWORK_INITIATED_REQUEST"); _COLLISION_WITH_NETWORK_INITIATED_REQUESTReady = true; } return _COLLISION_WITH_NETWORK_INITIATED_REQUESTContent; } }
        private static int _COLLISION_WITH_NETWORK_INITIATED_REQUESTContent = default;
        private static bool _COLLISION_WITH_NETWORK_INITIATED_REQUESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#COMPANION_IFACE_IN_USE"/>
        /// </summary>
        public static int COMPANION_IFACE_IN_USE { get { if (!_COMPANION_IFACE_IN_USEReady) { _COMPANION_IFACE_IN_USEContent = SGetField<int>(LocalBridgeClazz, "COMPANION_IFACE_IN_USE"); _COMPANION_IFACE_IN_USEReady = true; } return _COMPANION_IFACE_IN_USEContent; } }
        private static int _COMPANION_IFACE_IN_USEContent = default;
        private static bool _COMPANION_IFACE_IN_USEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CONCURRENT_SERVICE_NOT_SUPPORTED_BY_BASE_STATION"/>
        /// </summary>
        public static int CONCURRENT_SERVICE_NOT_SUPPORTED_BY_BASE_STATION { get { if (!_CONCURRENT_SERVICE_NOT_SUPPORTED_BY_BASE_STATIONReady) { _CONCURRENT_SERVICE_NOT_SUPPORTED_BY_BASE_STATIONContent = SGetField<int>(LocalBridgeClazz, "CONCURRENT_SERVICE_NOT_SUPPORTED_BY_BASE_STATION"); _CONCURRENT_SERVICE_NOT_SUPPORTED_BY_BASE_STATIONReady = true; } return _CONCURRENT_SERVICE_NOT_SUPPORTED_BY_BASE_STATIONContent; } }
        private static int _CONCURRENT_SERVICE_NOT_SUPPORTED_BY_BASE_STATIONContent = default;
        private static bool _CONCURRENT_SERVICE_NOT_SUPPORTED_BY_BASE_STATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CONCURRENT_SERVICES_INCOMPATIBLE"/>
        /// </summary>
        public static int CONCURRENT_SERVICES_INCOMPATIBLE { get { if (!_CONCURRENT_SERVICES_INCOMPATIBLEReady) { _CONCURRENT_SERVICES_INCOMPATIBLEContent = SGetField<int>(LocalBridgeClazz, "CONCURRENT_SERVICES_INCOMPATIBLE"); _CONCURRENT_SERVICES_INCOMPATIBLEReady = true; } return _CONCURRENT_SERVICES_INCOMPATIBLEContent; } }
        private static int _CONCURRENT_SERVICES_INCOMPATIBLEContent = default;
        private static bool _CONCURRENT_SERVICES_INCOMPATIBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CONCURRENT_SERVICES_NOT_ALLOWED"/>
        /// </summary>
        public static int CONCURRENT_SERVICES_NOT_ALLOWED { get { if (!_CONCURRENT_SERVICES_NOT_ALLOWEDReady) { _CONCURRENT_SERVICES_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "CONCURRENT_SERVICES_NOT_ALLOWED"); _CONCURRENT_SERVICES_NOT_ALLOWEDReady = true; } return _CONCURRENT_SERVICES_NOT_ALLOWEDContent; } }
        private static int _CONCURRENT_SERVICES_NOT_ALLOWEDContent = default;
        private static bool _CONCURRENT_SERVICES_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CONDITIONAL_IE_ERROR"/>
        /// </summary>
        public static int CONDITIONAL_IE_ERROR { get { if (!_CONDITIONAL_IE_ERRORReady) { _CONDITIONAL_IE_ERRORContent = SGetField<int>(LocalBridgeClazz, "CONDITIONAL_IE_ERROR"); _CONDITIONAL_IE_ERRORReady = true; } return _CONDITIONAL_IE_ERRORContent; } }
        private static int _CONDITIONAL_IE_ERRORContent = default;
        private static bool _CONDITIONAL_IE_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CONGESTION"/>
        /// </summary>
        public static int CONGESTION { get { if (!_CONGESTIONReady) { _CONGESTIONContent = SGetField<int>(LocalBridgeClazz, "CONGESTION"); _CONGESTIONReady = true; } return _CONGESTIONContent; } }
        private static int _CONGESTIONContent = default;
        private static bool _CONGESTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CONNECTION_RELEASED"/>
        /// </summary>
        public static int CONNECTION_RELEASED { get { if (!_CONNECTION_RELEASEDReady) { _CONNECTION_RELEASEDContent = SGetField<int>(LocalBridgeClazz, "CONNECTION_RELEASED"); _CONNECTION_RELEASEDReady = true; } return _CONNECTION_RELEASEDContent; } }
        private static int _CONNECTION_RELEASEDContent = default;
        private static bool _CONNECTION_RELEASEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CS_DOMAIN_NOT_AVAILABLE"/>
        /// </summary>
        public static int CS_DOMAIN_NOT_AVAILABLE { get { if (!_CS_DOMAIN_NOT_AVAILABLEReady) { _CS_DOMAIN_NOT_AVAILABLEContent = SGetField<int>(LocalBridgeClazz, "CS_DOMAIN_NOT_AVAILABLE"); _CS_DOMAIN_NOT_AVAILABLEReady = true; } return _CS_DOMAIN_NOT_AVAILABLEContent; } }
        private static int _CS_DOMAIN_NOT_AVAILABLEContent = default;
        private static bool _CS_DOMAIN_NOT_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#CS_FALLBACK_CALL_ESTABLISHMENT_NOT_ALLOWED"/>
        /// </summary>
        public static int CS_FALLBACK_CALL_ESTABLISHMENT_NOT_ALLOWED { get { if (!_CS_FALLBACK_CALL_ESTABLISHMENT_NOT_ALLOWEDReady) { _CS_FALLBACK_CALL_ESTABLISHMENT_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "CS_FALLBACK_CALL_ESTABLISHMENT_NOT_ALLOWED"); _CS_FALLBACK_CALL_ESTABLISHMENT_NOT_ALLOWEDReady = true; } return _CS_FALLBACK_CALL_ESTABLISHMENT_NOT_ALLOWEDContent; } }
        private static int _CS_FALLBACK_CALL_ESTABLISHMENT_NOT_ALLOWEDContent = default;
        private static bool _CS_FALLBACK_CALL_ESTABLISHMENT_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#DATA_PLAN_EXPIRED"/>
        /// </summary>
        public static int DATA_PLAN_EXPIRED { get { if (!_DATA_PLAN_EXPIREDReady) { _DATA_PLAN_EXPIREDContent = SGetField<int>(LocalBridgeClazz, "DATA_PLAN_EXPIRED"); _DATA_PLAN_EXPIREDReady = true; } return _DATA_PLAN_EXPIREDContent; } }
        private static int _DATA_PLAN_EXPIREDContent = default;
        private static bool _DATA_PLAN_EXPIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#DATA_ROAMING_SETTINGS_DISABLED"/>
        /// </summary>
        public static int DATA_ROAMING_SETTINGS_DISABLED { get { if (!_DATA_ROAMING_SETTINGS_DISABLEDReady) { _DATA_ROAMING_SETTINGS_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "DATA_ROAMING_SETTINGS_DISABLED"); _DATA_ROAMING_SETTINGS_DISABLEDReady = true; } return _DATA_ROAMING_SETTINGS_DISABLEDContent; } }
        private static int _DATA_ROAMING_SETTINGS_DISABLEDContent = default;
        private static bool _DATA_ROAMING_SETTINGS_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#DATA_SETTINGS_DISABLED"/>
        /// </summary>
        public static int DATA_SETTINGS_DISABLED { get { if (!_DATA_SETTINGS_DISABLEDReady) { _DATA_SETTINGS_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "DATA_SETTINGS_DISABLED"); _DATA_SETTINGS_DISABLEDReady = true; } return _DATA_SETTINGS_DISABLEDContent; } }
        private static int _DATA_SETTINGS_DISABLEDContent = default;
        private static bool _DATA_SETTINGS_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#DBM_OR_SMS_IN_PROGRESS"/>
        /// </summary>
        public static int DBM_OR_SMS_IN_PROGRESS { get { if (!_DBM_OR_SMS_IN_PROGRESSReady) { _DBM_OR_SMS_IN_PROGRESSContent = SGetField<int>(LocalBridgeClazz, "DBM_OR_SMS_IN_PROGRESS"); _DBM_OR_SMS_IN_PROGRESSReady = true; } return _DBM_OR_SMS_IN_PROGRESSContent; } }
        private static int _DBM_OR_SMS_IN_PROGRESSContent = default;
        private static bool _DBM_OR_SMS_IN_PROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#DDS_SWITCH_IN_PROGRESS"/>
        /// </summary>
        public static int DDS_SWITCH_IN_PROGRESS { get { if (!_DDS_SWITCH_IN_PROGRESSReady) { _DDS_SWITCH_IN_PROGRESSContent = SGetField<int>(LocalBridgeClazz, "DDS_SWITCH_IN_PROGRESS"); _DDS_SWITCH_IN_PROGRESSReady = true; } return _DDS_SWITCH_IN_PROGRESSContent; } }
        private static int _DDS_SWITCH_IN_PROGRESSContent = default;
        private static bool _DDS_SWITCH_IN_PROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#DDS_SWITCHED"/>
        /// </summary>
        public static int DDS_SWITCHED { get { if (!_DDS_SWITCHEDReady) { _DDS_SWITCHEDContent = SGetField<int>(LocalBridgeClazz, "DDS_SWITCHED"); _DDS_SWITCHEDReady = true; } return _DDS_SWITCHEDContent; } }
        private static int _DDS_SWITCHEDContent = default;
        private static bool _DDS_SWITCHEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#DRB_RELEASED_BY_RRC"/>
        /// </summary>
        public static int DRB_RELEASED_BY_RRC { get { if (!_DRB_RELEASED_BY_RRCReady) { _DRB_RELEASED_BY_RRCContent = SGetField<int>(LocalBridgeClazz, "DRB_RELEASED_BY_RRC"); _DRB_RELEASED_BY_RRCReady = true; } return _DRB_RELEASED_BY_RRCContent; } }
        private static int _DRB_RELEASED_BY_RRCContent = default;
        private static bool _DRB_RELEASED_BY_RRCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#DS_EXPLICIT_DEACTIVATION"/>
        /// </summary>
        public static int DS_EXPLICIT_DEACTIVATION { get { if (!_DS_EXPLICIT_DEACTIVATIONReady) { _DS_EXPLICIT_DEACTIVATIONContent = SGetField<int>(LocalBridgeClazz, "DS_EXPLICIT_DEACTIVATION"); _DS_EXPLICIT_DEACTIVATIONReady = true; } return _DS_EXPLICIT_DEACTIVATIONContent; } }
        private static int _DS_EXPLICIT_DEACTIVATIONContent = default;
        private static bool _DS_EXPLICIT_DEACTIVATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#DUAL_SWITCH"/>
        /// </summary>
        public static int DUAL_SWITCH { get { if (!_DUAL_SWITCHReady) { _DUAL_SWITCHContent = SGetField<int>(LocalBridgeClazz, "DUAL_SWITCH"); _DUAL_SWITCHReady = true; } return _DUAL_SWITCHContent; } }
        private static int _DUAL_SWITCHContent = default;
        private static bool _DUAL_SWITCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#DUN_CALL_DISALLOWED"/>
        /// </summary>
        public static int DUN_CALL_DISALLOWED { get { if (!_DUN_CALL_DISALLOWEDReady) { _DUN_CALL_DISALLOWEDContent = SGetField<int>(LocalBridgeClazz, "DUN_CALL_DISALLOWED"); _DUN_CALL_DISALLOWEDReady = true; } return _DUN_CALL_DISALLOWEDContent; } }
        private static int _DUN_CALL_DISALLOWEDContent = default;
        private static bool _DUN_CALL_DISALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#DUPLICATE_BEARER_ID"/>
        /// </summary>
        public static int DUPLICATE_BEARER_ID { get { if (!_DUPLICATE_BEARER_IDReady) { _DUPLICATE_BEARER_IDContent = SGetField<int>(LocalBridgeClazz, "DUPLICATE_BEARER_ID"); _DUPLICATE_BEARER_IDReady = true; } return _DUPLICATE_BEARER_IDContent; } }
        private static int _DUPLICATE_BEARER_IDContent = default;
        private static bool _DUPLICATE_BEARER_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EHRPD_TO_HRPD_FALLBACK"/>
        /// </summary>
        public static int EHRPD_TO_HRPD_FALLBACK { get { if (!_EHRPD_TO_HRPD_FALLBACKReady) { _EHRPD_TO_HRPD_FALLBACKContent = SGetField<int>(LocalBridgeClazz, "EHRPD_TO_HRPD_FALLBACK"); _EHRPD_TO_HRPD_FALLBACKReady = true; } return _EHRPD_TO_HRPD_FALLBACKContent; } }
        private static int _EHRPD_TO_HRPD_FALLBACKContent = default;
        private static bool _EHRPD_TO_HRPD_FALLBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EMBMS_NOT_ENABLED"/>
        /// </summary>
        public static int EMBMS_NOT_ENABLED { get { if (!_EMBMS_NOT_ENABLEDReady) { _EMBMS_NOT_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "EMBMS_NOT_ENABLED"); _EMBMS_NOT_ENABLEDReady = true; } return _EMBMS_NOT_ENABLEDContent; } }
        private static int _EMBMS_NOT_ENABLEDContent = default;
        private static bool _EMBMS_NOT_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EMBMS_REGULAR_DEACTIVATION"/>
        /// </summary>
        public static int EMBMS_REGULAR_DEACTIVATION { get { if (!_EMBMS_REGULAR_DEACTIVATIONReady) { _EMBMS_REGULAR_DEACTIVATIONContent = SGetField<int>(LocalBridgeClazz, "EMBMS_REGULAR_DEACTIVATION"); _EMBMS_REGULAR_DEACTIVATIONReady = true; } return _EMBMS_REGULAR_DEACTIVATIONContent; } }
        private static int _EMBMS_REGULAR_DEACTIVATIONContent = default;
        private static bool _EMBMS_REGULAR_DEACTIVATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EMERGENCY_IFACE_ONLY"/>
        /// </summary>
        public static int EMERGENCY_IFACE_ONLY { get { if (!_EMERGENCY_IFACE_ONLYReady) { _EMERGENCY_IFACE_ONLYContent = SGetField<int>(LocalBridgeClazz, "EMERGENCY_IFACE_ONLY"); _EMERGENCY_IFACE_ONLYReady = true; } return _EMERGENCY_IFACE_ONLYContent; } }
        private static int _EMERGENCY_IFACE_ONLYContent = default;
        private static bool _EMERGENCY_IFACE_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EMERGENCY_MODE"/>
        /// </summary>
        public static int EMERGENCY_MODE { get { if (!_EMERGENCY_MODEReady) { _EMERGENCY_MODEContent = SGetField<int>(LocalBridgeClazz, "EMERGENCY_MODE"); _EMERGENCY_MODEReady = true; } return _EMERGENCY_MODEContent; } }
        private static int _EMERGENCY_MODEContent = default;
        private static bool _EMERGENCY_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EMM_ACCESS_BARRED"/>
        /// </summary>
        public static int EMM_ACCESS_BARRED { get { if (!_EMM_ACCESS_BARREDReady) { _EMM_ACCESS_BARREDContent = SGetField<int>(LocalBridgeClazz, "EMM_ACCESS_BARRED"); _EMM_ACCESS_BARREDReady = true; } return _EMM_ACCESS_BARREDContent; } }
        private static int _EMM_ACCESS_BARREDContent = default;
        private static bool _EMM_ACCESS_BARREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EMM_ACCESS_BARRED_INFINITE_RETRY"/>
        /// </summary>
        public static int EMM_ACCESS_BARRED_INFINITE_RETRY { get { if (!_EMM_ACCESS_BARRED_INFINITE_RETRYReady) { _EMM_ACCESS_BARRED_INFINITE_RETRYContent = SGetField<int>(LocalBridgeClazz, "EMM_ACCESS_BARRED_INFINITE_RETRY"); _EMM_ACCESS_BARRED_INFINITE_RETRYReady = true; } return _EMM_ACCESS_BARRED_INFINITE_RETRYContent; } }
        private static int _EMM_ACCESS_BARRED_INFINITE_RETRYContent = default;
        private static bool _EMM_ACCESS_BARRED_INFINITE_RETRYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EMM_ATTACH_FAILED"/>
        /// </summary>
        public static int EMM_ATTACH_FAILED { get { if (!_EMM_ATTACH_FAILEDReady) { _EMM_ATTACH_FAILEDContent = SGetField<int>(LocalBridgeClazz, "EMM_ATTACH_FAILED"); _EMM_ATTACH_FAILEDReady = true; } return _EMM_ATTACH_FAILEDContent; } }
        private static int _EMM_ATTACH_FAILEDContent = default;
        private static bool _EMM_ATTACH_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EMM_ATTACH_STARTED"/>
        /// </summary>
        public static int EMM_ATTACH_STARTED { get { if (!_EMM_ATTACH_STARTEDReady) { _EMM_ATTACH_STARTEDContent = SGetField<int>(LocalBridgeClazz, "EMM_ATTACH_STARTED"); _EMM_ATTACH_STARTEDReady = true; } return _EMM_ATTACH_STARTEDContent; } }
        private static int _EMM_ATTACH_STARTEDContent = default;
        private static bool _EMM_ATTACH_STARTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EMM_DETACHED"/>
        /// </summary>
        public static int EMM_DETACHED { get { if (!_EMM_DETACHEDReady) { _EMM_DETACHEDContent = SGetField<int>(LocalBridgeClazz, "EMM_DETACHED"); _EMM_DETACHEDReady = true; } return _EMM_DETACHEDContent; } }
        private static int _EMM_DETACHEDContent = default;
        private static bool _EMM_DETACHEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EMM_T3417_EXPIRED"/>
        /// </summary>
        public static int EMM_T3417_EXPIRED { get { if (!_EMM_T3417_EXPIREDReady) { _EMM_T3417_EXPIREDContent = SGetField<int>(LocalBridgeClazz, "EMM_T3417_EXPIRED"); _EMM_T3417_EXPIREDReady = true; } return _EMM_T3417_EXPIREDContent; } }
        private static int _EMM_T3417_EXPIREDContent = default;
        private static bool _EMM_T3417_EXPIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EMM_T3417_EXT_EXPIRED"/>
        /// </summary>
        public static int EMM_T3417_EXT_EXPIRED { get { if (!_EMM_T3417_EXT_EXPIREDReady) { _EMM_T3417_EXT_EXPIREDContent = SGetField<int>(LocalBridgeClazz, "EMM_T3417_EXT_EXPIRED"); _EMM_T3417_EXT_EXPIREDReady = true; } return _EMM_T3417_EXT_EXPIREDContent; } }
        private static int _EMM_T3417_EXT_EXPIREDContent = default;
        private static bool _EMM_T3417_EXT_EXPIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EPS_SERVICES_AND_NON_EPS_SERVICES_NOT_ALLOWED"/>
        /// </summary>
        public static int EPS_SERVICES_AND_NON_EPS_SERVICES_NOT_ALLOWED { get { if (!_EPS_SERVICES_AND_NON_EPS_SERVICES_NOT_ALLOWEDReady) { _EPS_SERVICES_AND_NON_EPS_SERVICES_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "EPS_SERVICES_AND_NON_EPS_SERVICES_NOT_ALLOWED"); _EPS_SERVICES_AND_NON_EPS_SERVICES_NOT_ALLOWEDReady = true; } return _EPS_SERVICES_AND_NON_EPS_SERVICES_NOT_ALLOWEDContent; } }
        private static int _EPS_SERVICES_AND_NON_EPS_SERVICES_NOT_ALLOWEDContent = default;
        private static bool _EPS_SERVICES_AND_NON_EPS_SERVICES_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EPS_SERVICES_NOT_ALLOWED_IN_PLMN"/>
        /// </summary>
        public static int EPS_SERVICES_NOT_ALLOWED_IN_PLMN { get { if (!_EPS_SERVICES_NOT_ALLOWED_IN_PLMNReady) { _EPS_SERVICES_NOT_ALLOWED_IN_PLMNContent = SGetField<int>(LocalBridgeClazz, "EPS_SERVICES_NOT_ALLOWED_IN_PLMN"); _EPS_SERVICES_NOT_ALLOWED_IN_PLMNReady = true; } return _EPS_SERVICES_NOT_ALLOWED_IN_PLMNContent; } }
        private static int _EPS_SERVICES_NOT_ALLOWED_IN_PLMNContent = default;
        private static bool _EPS_SERVICES_NOT_ALLOWED_IN_PLMNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ERROR_UNSPECIFIED"/>
        /// </summary>
        public static int ERROR_UNSPECIFIED { get { if (!_ERROR_UNSPECIFIEDReady) { _ERROR_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "ERROR_UNSPECIFIED"); _ERROR_UNSPECIFIEDReady = true; } return _ERROR_UNSPECIFIEDContent; } }
        private static int _ERROR_UNSPECIFIEDContent = default;
        private static bool _ERROR_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ESM_BAD_OTA_MESSAGE"/>
        /// </summary>
        public static int ESM_BAD_OTA_MESSAGE { get { if (!_ESM_BAD_OTA_MESSAGEReady) { _ESM_BAD_OTA_MESSAGEContent = SGetField<int>(LocalBridgeClazz, "ESM_BAD_OTA_MESSAGE"); _ESM_BAD_OTA_MESSAGEReady = true; } return _ESM_BAD_OTA_MESSAGEContent; } }
        private static int _ESM_BAD_OTA_MESSAGEContent = default;
        private static bool _ESM_BAD_OTA_MESSAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ESM_BEARER_DEACTIVATED_TO_SYNC_WITH_NETWORK"/>
        /// </summary>
        public static int ESM_BEARER_DEACTIVATED_TO_SYNC_WITH_NETWORK { get { if (!_ESM_BEARER_DEACTIVATED_TO_SYNC_WITH_NETWORKReady) { _ESM_BEARER_DEACTIVATED_TO_SYNC_WITH_NETWORKContent = SGetField<int>(LocalBridgeClazz, "ESM_BEARER_DEACTIVATED_TO_SYNC_WITH_NETWORK"); _ESM_BEARER_DEACTIVATED_TO_SYNC_WITH_NETWORKReady = true; } return _ESM_BEARER_DEACTIVATED_TO_SYNC_WITH_NETWORKContent; } }
        private static int _ESM_BEARER_DEACTIVATED_TO_SYNC_WITH_NETWORKContent = default;
        private static bool _ESM_BEARER_DEACTIVATED_TO_SYNC_WITH_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ESM_COLLISION_SCENARIOS"/>
        /// </summary>
        public static int ESM_COLLISION_SCENARIOS { get { if (!_ESM_COLLISION_SCENARIOSReady) { _ESM_COLLISION_SCENARIOSContent = SGetField<int>(LocalBridgeClazz, "ESM_COLLISION_SCENARIOS"); _ESM_COLLISION_SCENARIOSReady = true; } return _ESM_COLLISION_SCENARIOSContent; } }
        private static int _ESM_COLLISION_SCENARIOSContent = default;
        private static bool _ESM_COLLISION_SCENARIOSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ESM_CONTEXT_TRANSFERRED_DUE_TO_IRAT"/>
        /// </summary>
        public static int ESM_CONTEXT_TRANSFERRED_DUE_TO_IRAT { get { if (!_ESM_CONTEXT_TRANSFERRED_DUE_TO_IRATReady) { _ESM_CONTEXT_TRANSFERRED_DUE_TO_IRATContent = SGetField<int>(LocalBridgeClazz, "ESM_CONTEXT_TRANSFERRED_DUE_TO_IRAT"); _ESM_CONTEXT_TRANSFERRED_DUE_TO_IRATReady = true; } return _ESM_CONTEXT_TRANSFERRED_DUE_TO_IRATContent; } }
        private static int _ESM_CONTEXT_TRANSFERRED_DUE_TO_IRATContent = default;
        private static bool _ESM_CONTEXT_TRANSFERRED_DUE_TO_IRATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ESM_DOWNLOAD_SERVER_REJECTED_THE_CALL"/>
        /// </summary>
        public static int ESM_DOWNLOAD_SERVER_REJECTED_THE_CALL { get { if (!_ESM_DOWNLOAD_SERVER_REJECTED_THE_CALLReady) { _ESM_DOWNLOAD_SERVER_REJECTED_THE_CALLContent = SGetField<int>(LocalBridgeClazz, "ESM_DOWNLOAD_SERVER_REJECTED_THE_CALL"); _ESM_DOWNLOAD_SERVER_REJECTED_THE_CALLReady = true; } return _ESM_DOWNLOAD_SERVER_REJECTED_THE_CALLContent; } }
        private static int _ESM_DOWNLOAD_SERVER_REJECTED_THE_CALLContent = default;
        private static bool _ESM_DOWNLOAD_SERVER_REJECTED_THE_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ESM_FAILURE"/>
        /// </summary>
        public static int ESM_FAILURE { get { if (!_ESM_FAILUREReady) { _ESM_FAILUREContent = SGetField<int>(LocalBridgeClazz, "ESM_FAILURE"); _ESM_FAILUREReady = true; } return _ESM_FAILUREContent; } }
        private static int _ESM_FAILUREContent = default;
        private static bool _ESM_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ESM_INFO_NOT_RECEIVED"/>
        /// </summary>
        public static int ESM_INFO_NOT_RECEIVED { get { if (!_ESM_INFO_NOT_RECEIVEDReady) { _ESM_INFO_NOT_RECEIVEDContent = SGetField<int>(LocalBridgeClazz, "ESM_INFO_NOT_RECEIVED"); _ESM_INFO_NOT_RECEIVEDReady = true; } return _ESM_INFO_NOT_RECEIVEDContent; } }
        private static int _ESM_INFO_NOT_RECEIVEDContent = default;
        private static bool _ESM_INFO_NOT_RECEIVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ESM_LOCAL_CAUSE_NONE"/>
        /// </summary>
        public static int ESM_LOCAL_CAUSE_NONE { get { if (!_ESM_LOCAL_CAUSE_NONEReady) { _ESM_LOCAL_CAUSE_NONEContent = SGetField<int>(LocalBridgeClazz, "ESM_LOCAL_CAUSE_NONE"); _ESM_LOCAL_CAUSE_NONEReady = true; } return _ESM_LOCAL_CAUSE_NONEContent; } }
        private static int _ESM_LOCAL_CAUSE_NONEContent = default;
        private static bool _ESM_LOCAL_CAUSE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ESM_NW_ACTIVATED_DED_BEARER_WITH_ID_OF_DEF_BEARER"/>
        /// </summary>
        public static int ESM_NW_ACTIVATED_DED_BEARER_WITH_ID_OF_DEF_BEARER { get { if (!_ESM_NW_ACTIVATED_DED_BEARER_WITH_ID_OF_DEF_BEARERReady) { _ESM_NW_ACTIVATED_DED_BEARER_WITH_ID_OF_DEF_BEARERContent = SGetField<int>(LocalBridgeClazz, "ESM_NW_ACTIVATED_DED_BEARER_WITH_ID_OF_DEF_BEARER"); _ESM_NW_ACTIVATED_DED_BEARER_WITH_ID_OF_DEF_BEARERReady = true; } return _ESM_NW_ACTIVATED_DED_BEARER_WITH_ID_OF_DEF_BEARERContent; } }
        private static int _ESM_NW_ACTIVATED_DED_BEARER_WITH_ID_OF_DEF_BEARERContent = default;
        private static bool _ESM_NW_ACTIVATED_DED_BEARER_WITH_ID_OF_DEF_BEARERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ESM_PROCEDURE_TIME_OUT"/>
        /// </summary>
        public static int ESM_PROCEDURE_TIME_OUT { get { if (!_ESM_PROCEDURE_TIME_OUTReady) { _ESM_PROCEDURE_TIME_OUTContent = SGetField<int>(LocalBridgeClazz, "ESM_PROCEDURE_TIME_OUT"); _ESM_PROCEDURE_TIME_OUTReady = true; } return _ESM_PROCEDURE_TIME_OUTContent; } }
        private static int _ESM_PROCEDURE_TIME_OUTContent = default;
        private static bool _ESM_PROCEDURE_TIME_OUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ESM_UNKNOWN_EPS_BEARER_CONTEXT"/>
        /// </summary>
        public static int ESM_UNKNOWN_EPS_BEARER_CONTEXT { get { if (!_ESM_UNKNOWN_EPS_BEARER_CONTEXTReady) { _ESM_UNKNOWN_EPS_BEARER_CONTEXTContent = SGetField<int>(LocalBridgeClazz, "ESM_UNKNOWN_EPS_BEARER_CONTEXT"); _ESM_UNKNOWN_EPS_BEARER_CONTEXTReady = true; } return _ESM_UNKNOWN_EPS_BEARER_CONTEXTContent; } }
        private static int _ESM_UNKNOWN_EPS_BEARER_CONTEXTContent = default;
        private static bool _ESM_UNKNOWN_EPS_BEARER_CONTEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EVDO_CONNECTION_DENY_BY_BILLING_OR_AUTHENTICATION_FAILURE"/>
        /// </summary>
        public static int EVDO_CONNECTION_DENY_BY_BILLING_OR_AUTHENTICATION_FAILURE { get { if (!_EVDO_CONNECTION_DENY_BY_BILLING_OR_AUTHENTICATION_FAILUREReady) { _EVDO_CONNECTION_DENY_BY_BILLING_OR_AUTHENTICATION_FAILUREContent = SGetField<int>(LocalBridgeClazz, "EVDO_CONNECTION_DENY_BY_BILLING_OR_AUTHENTICATION_FAILURE"); _EVDO_CONNECTION_DENY_BY_BILLING_OR_AUTHENTICATION_FAILUREReady = true; } return _EVDO_CONNECTION_DENY_BY_BILLING_OR_AUTHENTICATION_FAILUREContent; } }
        private static int _EVDO_CONNECTION_DENY_BY_BILLING_OR_AUTHENTICATION_FAILUREContent = default;
        private static bool _EVDO_CONNECTION_DENY_BY_BILLING_OR_AUTHENTICATION_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EVDO_CONNECTION_DENY_BY_GENERAL_OR_NETWORK_BUSY"/>
        /// </summary>
        public static int EVDO_CONNECTION_DENY_BY_GENERAL_OR_NETWORK_BUSY { get { if (!_EVDO_CONNECTION_DENY_BY_GENERAL_OR_NETWORK_BUSYReady) { _EVDO_CONNECTION_DENY_BY_GENERAL_OR_NETWORK_BUSYContent = SGetField<int>(LocalBridgeClazz, "EVDO_CONNECTION_DENY_BY_GENERAL_OR_NETWORK_BUSY"); _EVDO_CONNECTION_DENY_BY_GENERAL_OR_NETWORK_BUSYReady = true; } return _EVDO_CONNECTION_DENY_BY_GENERAL_OR_NETWORK_BUSYContent; } }
        private static int _EVDO_CONNECTION_DENY_BY_GENERAL_OR_NETWORK_BUSYContent = default;
        private static bool _EVDO_CONNECTION_DENY_BY_GENERAL_OR_NETWORK_BUSYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EVDO_HDR_CHANGED"/>
        /// </summary>
        public static int EVDO_HDR_CHANGED { get { if (!_EVDO_HDR_CHANGEDReady) { _EVDO_HDR_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "EVDO_HDR_CHANGED"); _EVDO_HDR_CHANGEDReady = true; } return _EVDO_HDR_CHANGEDContent; } }
        private static int _EVDO_HDR_CHANGEDContent = default;
        private static bool _EVDO_HDR_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EVDO_HDR_CONNECTION_SETUP_TIMEOUT"/>
        /// </summary>
        public static int EVDO_HDR_CONNECTION_SETUP_TIMEOUT { get { if (!_EVDO_HDR_CONNECTION_SETUP_TIMEOUTReady) { _EVDO_HDR_CONNECTION_SETUP_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "EVDO_HDR_CONNECTION_SETUP_TIMEOUT"); _EVDO_HDR_CONNECTION_SETUP_TIMEOUTReady = true; } return _EVDO_HDR_CONNECTION_SETUP_TIMEOUTContent; } }
        private static int _EVDO_HDR_CONNECTION_SETUP_TIMEOUTContent = default;
        private static bool _EVDO_HDR_CONNECTION_SETUP_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EVDO_HDR_EXITED"/>
        /// </summary>
        public static int EVDO_HDR_EXITED { get { if (!_EVDO_HDR_EXITEDReady) { _EVDO_HDR_EXITEDContent = SGetField<int>(LocalBridgeClazz, "EVDO_HDR_EXITED"); _EVDO_HDR_EXITEDReady = true; } return _EVDO_HDR_EXITEDContent; } }
        private static int _EVDO_HDR_EXITEDContent = default;
        private static bool _EVDO_HDR_EXITEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EVDO_HDR_NO_SESSION"/>
        /// </summary>
        public static int EVDO_HDR_NO_SESSION { get { if (!_EVDO_HDR_NO_SESSIONReady) { _EVDO_HDR_NO_SESSIONContent = SGetField<int>(LocalBridgeClazz, "EVDO_HDR_NO_SESSION"); _EVDO_HDR_NO_SESSIONReady = true; } return _EVDO_HDR_NO_SESSIONContent; } }
        private static int _EVDO_HDR_NO_SESSIONContent = default;
        private static bool _EVDO_HDR_NO_SESSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#EVDO_USING_GPS_FIX_INSTEAD_OF_HDR_CALL"/>
        /// </summary>
        public static int EVDO_USING_GPS_FIX_INSTEAD_OF_HDR_CALL { get { if (!_EVDO_USING_GPS_FIX_INSTEAD_OF_HDR_CALLReady) { _EVDO_USING_GPS_FIX_INSTEAD_OF_HDR_CALLContent = SGetField<int>(LocalBridgeClazz, "EVDO_USING_GPS_FIX_INSTEAD_OF_HDR_CALL"); _EVDO_USING_GPS_FIX_INSTEAD_OF_HDR_CALLReady = true; } return _EVDO_USING_GPS_FIX_INSTEAD_OF_HDR_CALLContent; } }
        private static int _EVDO_USING_GPS_FIX_INSTEAD_OF_HDR_CALLContent = default;
        private static bool _EVDO_USING_GPS_FIX_INSTEAD_OF_HDR_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#FADE"/>
        /// </summary>
        public static int FADE { get { if (!_FADEReady) { _FADEContent = SGetField<int>(LocalBridgeClazz, "FADE"); _FADEReady = true; } return _FADEContent; } }
        private static int _FADEContent = default;
        private static bool _FADEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#FAILED_TO_ACQUIRE_COLOCATED_HDR"/>
        /// </summary>
        public static int FAILED_TO_ACQUIRE_COLOCATED_HDR { get { if (!_FAILED_TO_ACQUIRE_COLOCATED_HDRReady) { _FAILED_TO_ACQUIRE_COLOCATED_HDRContent = SGetField<int>(LocalBridgeClazz, "FAILED_TO_ACQUIRE_COLOCATED_HDR"); _FAILED_TO_ACQUIRE_COLOCATED_HDRReady = true; } return _FAILED_TO_ACQUIRE_COLOCATED_HDRContent; } }
        private static int _FAILED_TO_ACQUIRE_COLOCATED_HDRContent = default;
        private static bool _FAILED_TO_ACQUIRE_COLOCATED_HDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#FEATURE_NOT_SUPP"/>
        /// </summary>
        public static int FEATURE_NOT_SUPP { get { if (!_FEATURE_NOT_SUPPReady) { _FEATURE_NOT_SUPPContent = SGetField<int>(LocalBridgeClazz, "FEATURE_NOT_SUPP"); _FEATURE_NOT_SUPPReady = true; } return _FEATURE_NOT_SUPPContent; } }
        private static int _FEATURE_NOT_SUPPContent = default;
        private static bool _FEATURE_NOT_SUPPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#FILTER_SEMANTIC_ERROR"/>
        /// </summary>
        public static int FILTER_SEMANTIC_ERROR { get { if (!_FILTER_SEMANTIC_ERRORReady) { _FILTER_SEMANTIC_ERRORContent = SGetField<int>(LocalBridgeClazz, "FILTER_SEMANTIC_ERROR"); _FILTER_SEMANTIC_ERRORReady = true; } return _FILTER_SEMANTIC_ERRORContent; } }
        private static int _FILTER_SEMANTIC_ERRORContent = default;
        private static bool _FILTER_SEMANTIC_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#FILTER_SYTAX_ERROR"/>
        /// </summary>
        public static int FILTER_SYTAX_ERROR { get { if (!_FILTER_SYTAX_ERRORReady) { _FILTER_SYTAX_ERRORContent = SGetField<int>(LocalBridgeClazz, "FILTER_SYTAX_ERROR"); _FILTER_SYTAX_ERRORReady = true; } return _FILTER_SYTAX_ERRORContent; } }
        private static int _FILTER_SYTAX_ERRORContent = default;
        private static bool _FILTER_SYTAX_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#FORBIDDEN_APN_NAME"/>
        /// </summary>
        public static int FORBIDDEN_APN_NAME { get { if (!_FORBIDDEN_APN_NAMEReady) { _FORBIDDEN_APN_NAMEContent = SGetField<int>(LocalBridgeClazz, "FORBIDDEN_APN_NAME"); _FORBIDDEN_APN_NAMEReady = true; } return _FORBIDDEN_APN_NAMEContent; } }
        private static int _FORBIDDEN_APN_NAMEContent = default;
        private static bool _FORBIDDEN_APN_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#GPRS_REGISTRATION_FAIL"/>
        /// </summary>
        public static int GPRS_REGISTRATION_FAIL { get { if (!_GPRS_REGISTRATION_FAILReady) { _GPRS_REGISTRATION_FAILContent = SGetField<int>(LocalBridgeClazz, "GPRS_REGISTRATION_FAIL"); _GPRS_REGISTRATION_FAILReady = true; } return _GPRS_REGISTRATION_FAILContent; } }
        private static int _GPRS_REGISTRATION_FAILContent = default;
        private static bool _GPRS_REGISTRATION_FAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#GPRS_SERVICES_AND_NON_GPRS_SERVICES_NOT_ALLOWED"/>
        /// </summary>
        public static int GPRS_SERVICES_AND_NON_GPRS_SERVICES_NOT_ALLOWED { get { if (!_GPRS_SERVICES_AND_NON_GPRS_SERVICES_NOT_ALLOWEDReady) { _GPRS_SERVICES_AND_NON_GPRS_SERVICES_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "GPRS_SERVICES_AND_NON_GPRS_SERVICES_NOT_ALLOWED"); _GPRS_SERVICES_AND_NON_GPRS_SERVICES_NOT_ALLOWEDReady = true; } return _GPRS_SERVICES_AND_NON_GPRS_SERVICES_NOT_ALLOWEDContent; } }
        private static int _GPRS_SERVICES_AND_NON_GPRS_SERVICES_NOT_ALLOWEDContent = default;
        private static bool _GPRS_SERVICES_AND_NON_GPRS_SERVICES_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#GPRS_SERVICES_NOT_ALLOWED"/>
        /// </summary>
        public static int GPRS_SERVICES_NOT_ALLOWED { get { if (!_GPRS_SERVICES_NOT_ALLOWEDReady) { _GPRS_SERVICES_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "GPRS_SERVICES_NOT_ALLOWED"); _GPRS_SERVICES_NOT_ALLOWEDReady = true; } return _GPRS_SERVICES_NOT_ALLOWEDContent; } }
        private static int _GPRS_SERVICES_NOT_ALLOWEDContent = default;
        private static bool _GPRS_SERVICES_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#GPRS_SERVICES_NOT_ALLOWED_IN_THIS_PLMN"/>
        /// </summary>
        public static int GPRS_SERVICES_NOT_ALLOWED_IN_THIS_PLMN { get { if (!_GPRS_SERVICES_NOT_ALLOWED_IN_THIS_PLMNReady) { _GPRS_SERVICES_NOT_ALLOWED_IN_THIS_PLMNContent = SGetField<int>(LocalBridgeClazz, "GPRS_SERVICES_NOT_ALLOWED_IN_THIS_PLMN"); _GPRS_SERVICES_NOT_ALLOWED_IN_THIS_PLMNReady = true; } return _GPRS_SERVICES_NOT_ALLOWED_IN_THIS_PLMNContent; } }
        private static int _GPRS_SERVICES_NOT_ALLOWED_IN_THIS_PLMNContent = default;
        private static bool _GPRS_SERVICES_NOT_ALLOWED_IN_THIS_PLMNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#HANDOFF_PREFERENCE_CHANGED"/>
        /// </summary>
        public static int HANDOFF_PREFERENCE_CHANGED { get { if (!_HANDOFF_PREFERENCE_CHANGEDReady) { _HANDOFF_PREFERENCE_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "HANDOFF_PREFERENCE_CHANGED"); _HANDOFF_PREFERENCE_CHANGEDReady = true; } return _HANDOFF_PREFERENCE_CHANGEDContent; } }
        private static int _HANDOFF_PREFERENCE_CHANGEDContent = default;
        private static bool _HANDOFF_PREFERENCE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#HDR_ACCESS_FAILURE"/>
        /// </summary>
        public static int HDR_ACCESS_FAILURE { get { if (!_HDR_ACCESS_FAILUREReady) { _HDR_ACCESS_FAILUREContent = SGetField<int>(LocalBridgeClazz, "HDR_ACCESS_FAILURE"); _HDR_ACCESS_FAILUREReady = true; } return _HDR_ACCESS_FAILUREContent; } }
        private static int _HDR_ACCESS_FAILUREContent = default;
        private static bool _HDR_ACCESS_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#HDR_FADE"/>
        /// </summary>
        public static int HDR_FADE { get { if (!_HDR_FADEReady) { _HDR_FADEContent = SGetField<int>(LocalBridgeClazz, "HDR_FADE"); _HDR_FADEReady = true; } return _HDR_FADEContent; } }
        private static int _HDR_FADEContent = default;
        private static bool _HDR_FADEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#HDR_NO_LOCK_GRANTED"/>
        /// </summary>
        public static int HDR_NO_LOCK_GRANTED { get { if (!_HDR_NO_LOCK_GRANTEDReady) { _HDR_NO_LOCK_GRANTEDContent = SGetField<int>(LocalBridgeClazz, "HDR_NO_LOCK_GRANTED"); _HDR_NO_LOCK_GRANTEDReady = true; } return _HDR_NO_LOCK_GRANTEDContent; } }
        private static int _HDR_NO_LOCK_GRANTEDContent = default;
        private static bool _HDR_NO_LOCK_GRANTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IFACE_AND_POL_FAMILY_MISMATCH"/>
        /// </summary>
        public static int IFACE_AND_POL_FAMILY_MISMATCH { get { if (!_IFACE_AND_POL_FAMILY_MISMATCHReady) { _IFACE_AND_POL_FAMILY_MISMATCHContent = SGetField<int>(LocalBridgeClazz, "IFACE_AND_POL_FAMILY_MISMATCH"); _IFACE_AND_POL_FAMILY_MISMATCHReady = true; } return _IFACE_AND_POL_FAMILY_MISMATCHContent; } }
        private static int _IFACE_AND_POL_FAMILY_MISMATCHContent = default;
        private static bool _IFACE_AND_POL_FAMILY_MISMATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IFACE_MISMATCH"/>
        /// </summary>
        public static int IFACE_MISMATCH { get { if (!_IFACE_MISMATCHReady) { _IFACE_MISMATCHContent = SGetField<int>(LocalBridgeClazz, "IFACE_MISMATCH"); _IFACE_MISMATCHReady = true; } return _IFACE_MISMATCHContent; } }
        private static int _IFACE_MISMATCHContent = default;
        private static bool _IFACE_MISMATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ILLEGAL_ME"/>
        /// </summary>
        public static int ILLEGAL_ME { get { if (!_ILLEGAL_MEReady) { _ILLEGAL_MEContent = SGetField<int>(LocalBridgeClazz, "ILLEGAL_ME"); _ILLEGAL_MEReady = true; } return _ILLEGAL_MEContent; } }
        private static int _ILLEGAL_MEContent = default;
        private static bool _ILLEGAL_MEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ILLEGAL_MS"/>
        /// </summary>
        public static int ILLEGAL_MS { get { if (!_ILLEGAL_MSReady) { _ILLEGAL_MSContent = SGetField<int>(LocalBridgeClazz, "ILLEGAL_MS"); _ILLEGAL_MSReady = true; } return _ILLEGAL_MSContent; } }
        private static int _ILLEGAL_MSContent = default;
        private static bool _ILLEGAL_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IMEI_NOT_ACCEPTED"/>
        /// </summary>
        public static int IMEI_NOT_ACCEPTED { get { if (!_IMEI_NOT_ACCEPTEDReady) { _IMEI_NOT_ACCEPTEDContent = SGetField<int>(LocalBridgeClazz, "IMEI_NOT_ACCEPTED"); _IMEI_NOT_ACCEPTEDReady = true; } return _IMEI_NOT_ACCEPTEDContent; } }
        private static int _IMEI_NOT_ACCEPTEDContent = default;
        private static bool _IMEI_NOT_ACCEPTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IMPLICITLY_DETACHED"/>
        /// </summary>
        public static int IMPLICITLY_DETACHED { get { if (!_IMPLICITLY_DETACHEDReady) { _IMPLICITLY_DETACHEDContent = SGetField<int>(LocalBridgeClazz, "IMPLICITLY_DETACHED"); _IMPLICITLY_DETACHEDReady = true; } return _IMPLICITLY_DETACHEDContent; } }
        private static int _IMPLICITLY_DETACHEDContent = default;
        private static bool _IMPLICITLY_DETACHEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IMSI_UNKNOWN_IN_HOME_SUBSCRIBER_SERVER"/>
        /// </summary>
        public static int IMSI_UNKNOWN_IN_HOME_SUBSCRIBER_SERVER { get { if (!_IMSI_UNKNOWN_IN_HOME_SUBSCRIBER_SERVERReady) { _IMSI_UNKNOWN_IN_HOME_SUBSCRIBER_SERVERContent = SGetField<int>(LocalBridgeClazz, "IMSI_UNKNOWN_IN_HOME_SUBSCRIBER_SERVER"); _IMSI_UNKNOWN_IN_HOME_SUBSCRIBER_SERVERReady = true; } return _IMSI_UNKNOWN_IN_HOME_SUBSCRIBER_SERVERContent; } }
        private static int _IMSI_UNKNOWN_IN_HOME_SUBSCRIBER_SERVERContent = default;
        private static bool _IMSI_UNKNOWN_IN_HOME_SUBSCRIBER_SERVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#INCOMING_CALL_REJECTED"/>
        /// </summary>
        public static int INCOMING_CALL_REJECTED { get { if (!_INCOMING_CALL_REJECTEDReady) { _INCOMING_CALL_REJECTEDContent = SGetField<int>(LocalBridgeClazz, "INCOMING_CALL_REJECTED"); _INCOMING_CALL_REJECTEDReady = true; } return _INCOMING_CALL_REJECTEDContent; } }
        private static int _INCOMING_CALL_REJECTEDContent = default;
        private static bool _INCOMING_CALL_REJECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#INSUFFICIENT_RESOURCES"/>
        /// </summary>
        public static int INSUFFICIENT_RESOURCES { get { if (!_INSUFFICIENT_RESOURCESReady) { _INSUFFICIENT_RESOURCESContent = SGetField<int>(LocalBridgeClazz, "INSUFFICIENT_RESOURCES"); _INSUFFICIENT_RESOURCESReady = true; } return _INSUFFICIENT_RESOURCESContent; } }
        private static int _INSUFFICIENT_RESOURCESContent = default;
        private static bool _INSUFFICIENT_RESOURCESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#INTERFACE_IN_USE"/>
        /// </summary>
        public static int INTERFACE_IN_USE { get { if (!_INTERFACE_IN_USEReady) { _INTERFACE_IN_USEContent = SGetField<int>(LocalBridgeClazz, "INTERFACE_IN_USE"); _INTERFACE_IN_USEReady = true; } return _INTERFACE_IN_USEContent; } }
        private static int _INTERFACE_IN_USEContent = default;
        private static bool _INTERFACE_IN_USEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN"/>
        /// </summary>
        public static int INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN { get { if (!_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APNReady) { _INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APNContent = SGetField<int>(LocalBridgeClazz, "INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN"); _INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APNReady = true; } return _INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APNContent; } }
        private static int _INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APNContent = default;
        private static bool _INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#INTERNAL_EPC_NONEPC_TRANSITION"/>
        /// </summary>
        public static int INTERNAL_EPC_NONEPC_TRANSITION { get { if (!_INTERNAL_EPC_NONEPC_TRANSITIONReady) { _INTERNAL_EPC_NONEPC_TRANSITIONContent = SGetField<int>(LocalBridgeClazz, "INTERNAL_EPC_NONEPC_TRANSITION"); _INTERNAL_EPC_NONEPC_TRANSITIONReady = true; } return _INTERNAL_EPC_NONEPC_TRANSITIONContent; } }
        private static int _INTERNAL_EPC_NONEPC_TRANSITIONContent = default;
        private static bool _INTERNAL_EPC_NONEPC_TRANSITIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#INVALID_CONNECTION_ID"/>
        /// </summary>
        public static int INVALID_CONNECTION_ID { get { if (!_INVALID_CONNECTION_IDReady) { _INVALID_CONNECTION_IDContent = SGetField<int>(LocalBridgeClazz, "INVALID_CONNECTION_ID"); _INVALID_CONNECTION_IDReady = true; } return _INVALID_CONNECTION_IDContent; } }
        private static int _INVALID_CONNECTION_IDContent = default;
        private static bool _INVALID_CONNECTION_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#INVALID_DNS_ADDR"/>
        /// </summary>
        public static int INVALID_DNS_ADDR { get { if (!_INVALID_DNS_ADDRReady) { _INVALID_DNS_ADDRContent = SGetField<int>(LocalBridgeClazz, "INVALID_DNS_ADDR"); _INVALID_DNS_ADDRReady = true; } return _INVALID_DNS_ADDRContent; } }
        private static int _INVALID_DNS_ADDRContent = default;
        private static bool _INVALID_DNS_ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#INVALID_EMM_STATE"/>
        /// </summary>
        public static int INVALID_EMM_STATE { get { if (!_INVALID_EMM_STATEReady) { _INVALID_EMM_STATEContent = SGetField<int>(LocalBridgeClazz, "INVALID_EMM_STATE"); _INVALID_EMM_STATEReady = true; } return _INVALID_EMM_STATEContent; } }
        private static int _INVALID_EMM_STATEContent = default;
        private static bool _INVALID_EMM_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#INVALID_MANDATORY_INFO"/>
        /// </summary>
        public static int INVALID_MANDATORY_INFO { get { if (!_INVALID_MANDATORY_INFOReady) { _INVALID_MANDATORY_INFOContent = SGetField<int>(LocalBridgeClazz, "INVALID_MANDATORY_INFO"); _INVALID_MANDATORY_INFOReady = true; } return _INVALID_MANDATORY_INFOContent; } }
        private static int _INVALID_MANDATORY_INFOContent = default;
        private static bool _INVALID_MANDATORY_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#INVALID_MODE"/>
        /// </summary>
        public static int INVALID_MODE { get { if (!_INVALID_MODEReady) { _INVALID_MODEContent = SGetField<int>(LocalBridgeClazz, "INVALID_MODE"); _INVALID_MODEReady = true; } return _INVALID_MODEContent; } }
        private static int _INVALID_MODEContent = default;
        private static bool _INVALID_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#INVALID_PCSCF_ADDR"/>
        /// </summary>
        public static int INVALID_PCSCF_ADDR { get { if (!_INVALID_PCSCF_ADDRReady) { _INVALID_PCSCF_ADDRContent = SGetField<int>(LocalBridgeClazz, "INVALID_PCSCF_ADDR"); _INVALID_PCSCF_ADDRReady = true; } return _INVALID_PCSCF_ADDRContent; } }
        private static int _INVALID_PCSCF_ADDRContent = default;
        private static bool _INVALID_PCSCF_ADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#INVALID_PCSCF_OR_DNS_ADDRESS"/>
        /// </summary>
        public static int INVALID_PCSCF_OR_DNS_ADDRESS { get { if (!_INVALID_PCSCF_OR_DNS_ADDRESSReady) { _INVALID_PCSCF_OR_DNS_ADDRESSContent = SGetField<int>(LocalBridgeClazz, "INVALID_PCSCF_OR_DNS_ADDRESS"); _INVALID_PCSCF_OR_DNS_ADDRESSReady = true; } return _INVALID_PCSCF_OR_DNS_ADDRESSContent; } }
        private static int _INVALID_PCSCF_OR_DNS_ADDRESSContent = default;
        private static bool _INVALID_PCSCF_OR_DNS_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#INVALID_PRIMARY_NSAPI"/>
        /// </summary>
        public static int INVALID_PRIMARY_NSAPI { get { if (!_INVALID_PRIMARY_NSAPIReady) { _INVALID_PRIMARY_NSAPIContent = SGetField<int>(LocalBridgeClazz, "INVALID_PRIMARY_NSAPI"); _INVALID_PRIMARY_NSAPIReady = true; } return _INVALID_PRIMARY_NSAPIContent; } }
        private static int _INVALID_PRIMARY_NSAPIContent = default;
        private static bool _INVALID_PRIMARY_NSAPIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#INVALID_SIM_STATE"/>
        /// </summary>
        public static int INVALID_SIM_STATE { get { if (!_INVALID_SIM_STATEReady) { _INVALID_SIM_STATEContent = SGetField<int>(LocalBridgeClazz, "INVALID_SIM_STATE"); _INVALID_SIM_STATEReady = true; } return _INVALID_SIM_STATEContent; } }
        private static int _INVALID_SIM_STATEContent = default;
        private static bool _INVALID_SIM_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#INVALID_TRANSACTION_ID"/>
        /// </summary>
        public static int INVALID_TRANSACTION_ID { get { if (!_INVALID_TRANSACTION_IDReady) { _INVALID_TRANSACTION_IDContent = SGetField<int>(LocalBridgeClazz, "INVALID_TRANSACTION_ID"); _INVALID_TRANSACTION_IDReady = true; } return _INVALID_TRANSACTION_IDContent; } }
        private static int _INVALID_TRANSACTION_IDContent = default;
        private static bool _INVALID_TRANSACTION_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IP_ADDRESS_MISMATCH"/>
        /// </summary>
        public static int IP_ADDRESS_MISMATCH { get { if (!_IP_ADDRESS_MISMATCHReady) { _IP_ADDRESS_MISMATCHContent = SGetField<int>(LocalBridgeClazz, "IP_ADDRESS_MISMATCH"); _IP_ADDRESS_MISMATCHReady = true; } return _IP_ADDRESS_MISMATCHContent; } }
        private static int _IP_ADDRESS_MISMATCHContent = default;
        private static bool _IP_ADDRESS_MISMATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IP_VERSION_MISMATCH"/>
        /// </summary>
        public static int IP_VERSION_MISMATCH { get { if (!_IP_VERSION_MISMATCHReady) { _IP_VERSION_MISMATCHContent = SGetField<int>(LocalBridgeClazz, "IP_VERSION_MISMATCH"); _IP_VERSION_MISMATCHReady = true; } return _IP_VERSION_MISMATCHContent; } }
        private static int _IP_VERSION_MISMATCHContent = default;
        private static bool _IP_VERSION_MISMATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IPV6_ADDRESS_TRANSFER_FAILED"/>
        /// </summary>
        public static int IPV6_ADDRESS_TRANSFER_FAILED { get { if (!_IPV6_ADDRESS_TRANSFER_FAILEDReady) { _IPV6_ADDRESS_TRANSFER_FAILEDContent = SGetField<int>(LocalBridgeClazz, "IPV6_ADDRESS_TRANSFER_FAILED"); _IPV6_ADDRESS_TRANSFER_FAILEDReady = true; } return _IPV6_ADDRESS_TRANSFER_FAILEDContent; } }
        private static int _IPV6_ADDRESS_TRANSFER_FAILEDContent = default;
        private static bool _IPV6_ADDRESS_TRANSFER_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IPV6_PREFIX_UNAVAILABLE"/>
        /// </summary>
        public static int IPV6_PREFIX_UNAVAILABLE { get { if (!_IPV6_PREFIX_UNAVAILABLEReady) { _IPV6_PREFIX_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "IPV6_PREFIX_UNAVAILABLE"); _IPV6_PREFIX_UNAVAILABLEReady = true; } return _IPV6_PREFIX_UNAVAILABLEContent; } }
        private static int _IPV6_PREFIX_UNAVAILABLEContent = default;
        private static bool _IPV6_PREFIX_UNAVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IRAT_HANDOVER_FAILED"/>
        /// </summary>
        public static int IRAT_HANDOVER_FAILED { get { if (!_IRAT_HANDOVER_FAILEDReady) { _IRAT_HANDOVER_FAILEDContent = SGetField<int>(LocalBridgeClazz, "IRAT_HANDOVER_FAILED"); _IRAT_HANDOVER_FAILEDReady = true; } return _IRAT_HANDOVER_FAILEDContent; } }
        private static int _IRAT_HANDOVER_FAILEDContent = default;
        private static bool _IRAT_HANDOVER_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IS707B_MAX_ACCESS_PROBES"/>
        /// </summary>
        public static int IS707B_MAX_ACCESS_PROBES { get { if (!_IS707B_MAX_ACCESS_PROBESReady) { _IS707B_MAX_ACCESS_PROBESContent = SGetField<int>(LocalBridgeClazz, "IS707B_MAX_ACCESS_PROBES"); _IS707B_MAX_ACCESS_PROBESReady = true; } return _IS707B_MAX_ACCESS_PROBESContent; } }
        private static int _IS707B_MAX_ACCESS_PROBESContent = default;
        private static bool _IS707B_MAX_ACCESS_PROBESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_AUTHORIZATION_REJECTED"/>
        /// </summary>
        public static int IWLAN_AUTHORIZATION_REJECTED { get { if (!_IWLAN_AUTHORIZATION_REJECTEDReady) { _IWLAN_AUTHORIZATION_REJECTEDContent = SGetField<int>(LocalBridgeClazz, "IWLAN_AUTHORIZATION_REJECTED"); _IWLAN_AUTHORIZATION_REJECTEDReady = true; } return _IWLAN_AUTHORIZATION_REJECTEDContent; } }
        private static int _IWLAN_AUTHORIZATION_REJECTEDContent = default;
        private static bool _IWLAN_AUTHORIZATION_REJECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_CONGESTION"/>
        /// </summary>
        public static int IWLAN_CONGESTION { get { if (!_IWLAN_CONGESTIONReady) { _IWLAN_CONGESTIONContent = SGetField<int>(LocalBridgeClazz, "IWLAN_CONGESTION"); _IWLAN_CONGESTIONReady = true; } return _IWLAN_CONGESTIONContent; } }
        private static int _IWLAN_CONGESTIONContent = default;
        private static bool _IWLAN_CONGESTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_DNS_RESOLUTION_NAME_FAILURE"/>
        /// </summary>
        public static int IWLAN_DNS_RESOLUTION_NAME_FAILURE { get { if (!_IWLAN_DNS_RESOLUTION_NAME_FAILUREReady) { _IWLAN_DNS_RESOLUTION_NAME_FAILUREContent = SGetField<int>(LocalBridgeClazz, "IWLAN_DNS_RESOLUTION_NAME_FAILURE"); _IWLAN_DNS_RESOLUTION_NAME_FAILUREReady = true; } return _IWLAN_DNS_RESOLUTION_NAME_FAILUREContent; } }
        private static int _IWLAN_DNS_RESOLUTION_NAME_FAILUREContent = default;
        private static bool _IWLAN_DNS_RESOLUTION_NAME_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_DNS_RESOLUTION_TIMEOUT"/>
        /// </summary>
        public static int IWLAN_DNS_RESOLUTION_TIMEOUT { get { if (!_IWLAN_DNS_RESOLUTION_TIMEOUTReady) { _IWLAN_DNS_RESOLUTION_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "IWLAN_DNS_RESOLUTION_TIMEOUT"); _IWLAN_DNS_RESOLUTION_TIMEOUTReady = true; } return _IWLAN_DNS_RESOLUTION_TIMEOUTContent; } }
        private static int _IWLAN_DNS_RESOLUTION_TIMEOUTContent = default;
        private static bool _IWLAN_DNS_RESOLUTION_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_IKEV2_AUTH_FAILURE"/>
        /// </summary>
        public static int IWLAN_IKEV2_AUTH_FAILURE { get { if (!_IWLAN_IKEV2_AUTH_FAILUREReady) { _IWLAN_IKEV2_AUTH_FAILUREContent = SGetField<int>(LocalBridgeClazz, "IWLAN_IKEV2_AUTH_FAILURE"); _IWLAN_IKEV2_AUTH_FAILUREReady = true; } return _IWLAN_IKEV2_AUTH_FAILUREContent; } }
        private static int _IWLAN_IKEV2_AUTH_FAILUREContent = default;
        private static bool _IWLAN_IKEV2_AUTH_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_IKEV2_CERT_INVALID"/>
        /// </summary>
        public static int IWLAN_IKEV2_CERT_INVALID { get { if (!_IWLAN_IKEV2_CERT_INVALIDReady) { _IWLAN_IKEV2_CERT_INVALIDContent = SGetField<int>(LocalBridgeClazz, "IWLAN_IKEV2_CERT_INVALID"); _IWLAN_IKEV2_CERT_INVALIDReady = true; } return _IWLAN_IKEV2_CERT_INVALIDContent; } }
        private static int _IWLAN_IKEV2_CERT_INVALIDContent = default;
        private static bool _IWLAN_IKEV2_CERT_INVALIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_IKEV2_CONFIG_FAILURE"/>
        /// </summary>
        public static int IWLAN_IKEV2_CONFIG_FAILURE { get { if (!_IWLAN_IKEV2_CONFIG_FAILUREReady) { _IWLAN_IKEV2_CONFIG_FAILUREContent = SGetField<int>(LocalBridgeClazz, "IWLAN_IKEV2_CONFIG_FAILURE"); _IWLAN_IKEV2_CONFIG_FAILUREReady = true; } return _IWLAN_IKEV2_CONFIG_FAILUREContent; } }
        private static int _IWLAN_IKEV2_CONFIG_FAILUREContent = default;
        private static bool _IWLAN_IKEV2_CONFIG_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_IKEV2_MSG_TIMEOUT"/>
        /// </summary>
        public static int IWLAN_IKEV2_MSG_TIMEOUT { get { if (!_IWLAN_IKEV2_MSG_TIMEOUTReady) { _IWLAN_IKEV2_MSG_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "IWLAN_IKEV2_MSG_TIMEOUT"); _IWLAN_IKEV2_MSG_TIMEOUTReady = true; } return _IWLAN_IKEV2_MSG_TIMEOUTContent; } }
        private static int _IWLAN_IKEV2_MSG_TIMEOUTContent = default;
        private static bool _IWLAN_IKEV2_MSG_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_ILLEGAL_ME"/>
        /// </summary>
        public static int IWLAN_ILLEGAL_ME { get { if (!_IWLAN_ILLEGAL_MEReady) { _IWLAN_ILLEGAL_MEContent = SGetField<int>(LocalBridgeClazz, "IWLAN_ILLEGAL_ME"); _IWLAN_ILLEGAL_MEReady = true; } return _IWLAN_ILLEGAL_MEContent; } }
        private static int _IWLAN_ILLEGAL_MEContent = default;
        private static bool _IWLAN_ILLEGAL_MEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_IMEI_NOT_ACCEPTED"/>
        /// </summary>
        public static int IWLAN_IMEI_NOT_ACCEPTED { get { if (!_IWLAN_IMEI_NOT_ACCEPTEDReady) { _IWLAN_IMEI_NOT_ACCEPTEDContent = SGetField<int>(LocalBridgeClazz, "IWLAN_IMEI_NOT_ACCEPTED"); _IWLAN_IMEI_NOT_ACCEPTEDReady = true; } return _IWLAN_IMEI_NOT_ACCEPTEDContent; } }
        private static int _IWLAN_IMEI_NOT_ACCEPTEDContent = default;
        private static bool _IWLAN_IMEI_NOT_ACCEPTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_MAX_CONNECTION_REACHED"/>
        /// </summary>
        public static int IWLAN_MAX_CONNECTION_REACHED { get { if (!_IWLAN_MAX_CONNECTION_REACHEDReady) { _IWLAN_MAX_CONNECTION_REACHEDContent = SGetField<int>(LocalBridgeClazz, "IWLAN_MAX_CONNECTION_REACHED"); _IWLAN_MAX_CONNECTION_REACHEDReady = true; } return _IWLAN_MAX_CONNECTION_REACHEDContent; } }
        private static int _IWLAN_MAX_CONNECTION_REACHEDContent = default;
        private static bool _IWLAN_MAX_CONNECTION_REACHEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_NETWORK_FAILURE"/>
        /// </summary>
        public static int IWLAN_NETWORK_FAILURE { get { if (!_IWLAN_NETWORK_FAILUREReady) { _IWLAN_NETWORK_FAILUREContent = SGetField<int>(LocalBridgeClazz, "IWLAN_NETWORK_FAILURE"); _IWLAN_NETWORK_FAILUREReady = true; } return _IWLAN_NETWORK_FAILUREContent; } }
        private static int _IWLAN_NETWORK_FAILUREContent = default;
        private static bool _IWLAN_NETWORK_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_NO_APN_SUBSCRIPTION"/>
        /// </summary>
        public static int IWLAN_NO_APN_SUBSCRIPTION { get { if (!_IWLAN_NO_APN_SUBSCRIPTIONReady) { _IWLAN_NO_APN_SUBSCRIPTIONContent = SGetField<int>(LocalBridgeClazz, "IWLAN_NO_APN_SUBSCRIPTION"); _IWLAN_NO_APN_SUBSCRIPTIONReady = true; } return _IWLAN_NO_APN_SUBSCRIPTIONContent; } }
        private static int _IWLAN_NO_APN_SUBSCRIPTIONContent = default;
        private static bool _IWLAN_NO_APN_SUBSCRIPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_NON_3GPP_ACCESS_TO_EPC_NOT_ALLOWED"/>
        /// </summary>
        public static int IWLAN_NON_3GPP_ACCESS_TO_EPC_NOT_ALLOWED { get { if (!_IWLAN_NON_3GPP_ACCESS_TO_EPC_NOT_ALLOWEDReady) { _IWLAN_NON_3GPP_ACCESS_TO_EPC_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "IWLAN_NON_3GPP_ACCESS_TO_EPC_NOT_ALLOWED"); _IWLAN_NON_3GPP_ACCESS_TO_EPC_NOT_ALLOWEDReady = true; } return _IWLAN_NON_3GPP_ACCESS_TO_EPC_NOT_ALLOWEDContent; } }
        private static int _IWLAN_NON_3GPP_ACCESS_TO_EPC_NOT_ALLOWEDContent = default;
        private static bool _IWLAN_NON_3GPP_ACCESS_TO_EPC_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_PDN_CONNECTION_REJECTION"/>
        /// </summary>
        public static int IWLAN_PDN_CONNECTION_REJECTION { get { if (!_IWLAN_PDN_CONNECTION_REJECTIONReady) { _IWLAN_PDN_CONNECTION_REJECTIONContent = SGetField<int>(LocalBridgeClazz, "IWLAN_PDN_CONNECTION_REJECTION"); _IWLAN_PDN_CONNECTION_REJECTIONReady = true; } return _IWLAN_PDN_CONNECTION_REJECTIONContent; } }
        private static int _IWLAN_PDN_CONNECTION_REJECTIONContent = default;
        private static bool _IWLAN_PDN_CONNECTION_REJECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_PLMN_NOT_ALLOWED"/>
        /// </summary>
        public static int IWLAN_PLMN_NOT_ALLOWED { get { if (!_IWLAN_PLMN_NOT_ALLOWEDReady) { _IWLAN_PLMN_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "IWLAN_PLMN_NOT_ALLOWED"); _IWLAN_PLMN_NOT_ALLOWEDReady = true; } return _IWLAN_PLMN_NOT_ALLOWEDContent; } }
        private static int _IWLAN_PLMN_NOT_ALLOWEDContent = default;
        private static bool _IWLAN_PLMN_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_RAT_TYPE_NOT_ALLOWED"/>
        /// </summary>
        public static int IWLAN_RAT_TYPE_NOT_ALLOWED { get { if (!_IWLAN_RAT_TYPE_NOT_ALLOWEDReady) { _IWLAN_RAT_TYPE_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "IWLAN_RAT_TYPE_NOT_ALLOWED"); _IWLAN_RAT_TYPE_NOT_ALLOWEDReady = true; } return _IWLAN_RAT_TYPE_NOT_ALLOWEDContent; } }
        private static int _IWLAN_RAT_TYPE_NOT_ALLOWEDContent = default;
        private static bool _IWLAN_RAT_TYPE_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_SEMANTIC_ERROR_IN_THE_TFT_OPERATION"/>
        /// </summary>
        public static int IWLAN_SEMANTIC_ERROR_IN_THE_TFT_OPERATION { get { if (!_IWLAN_SEMANTIC_ERROR_IN_THE_TFT_OPERATIONReady) { _IWLAN_SEMANTIC_ERROR_IN_THE_TFT_OPERATIONContent = SGetField<int>(LocalBridgeClazz, "IWLAN_SEMANTIC_ERROR_IN_THE_TFT_OPERATION"); _IWLAN_SEMANTIC_ERROR_IN_THE_TFT_OPERATIONReady = true; } return _IWLAN_SEMANTIC_ERROR_IN_THE_TFT_OPERATIONContent; } }
        private static int _IWLAN_SEMANTIC_ERROR_IN_THE_TFT_OPERATIONContent = default;
        private static bool _IWLAN_SEMANTIC_ERROR_IN_THE_TFT_OPERATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_SEMANTIC_ERRORS_IN_PACKET_FILTERS"/>
        /// </summary>
        public static int IWLAN_SEMANTIC_ERRORS_IN_PACKET_FILTERS { get { if (!_IWLAN_SEMANTIC_ERRORS_IN_PACKET_FILTERSReady) { _IWLAN_SEMANTIC_ERRORS_IN_PACKET_FILTERSContent = SGetField<int>(LocalBridgeClazz, "IWLAN_SEMANTIC_ERRORS_IN_PACKET_FILTERS"); _IWLAN_SEMANTIC_ERRORS_IN_PACKET_FILTERSReady = true; } return _IWLAN_SEMANTIC_ERRORS_IN_PACKET_FILTERSContent; } }
        private static int _IWLAN_SEMANTIC_ERRORS_IN_PACKET_FILTERSContent = default;
        private static bool _IWLAN_SEMANTIC_ERRORS_IN_PACKET_FILTERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_SYNTACTICAL_ERROR_IN_THE_TFT_OPERATION"/>
        /// </summary>
        public static int IWLAN_SYNTACTICAL_ERROR_IN_THE_TFT_OPERATION { get { if (!_IWLAN_SYNTACTICAL_ERROR_IN_THE_TFT_OPERATIONReady) { _IWLAN_SYNTACTICAL_ERROR_IN_THE_TFT_OPERATIONContent = SGetField<int>(LocalBridgeClazz, "IWLAN_SYNTACTICAL_ERROR_IN_THE_TFT_OPERATION"); _IWLAN_SYNTACTICAL_ERROR_IN_THE_TFT_OPERATIONReady = true; } return _IWLAN_SYNTACTICAL_ERROR_IN_THE_TFT_OPERATIONContent; } }
        private static int _IWLAN_SYNTACTICAL_ERROR_IN_THE_TFT_OPERATIONContent = default;
        private static bool _IWLAN_SYNTACTICAL_ERROR_IN_THE_TFT_OPERATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_SYNTACTICAL_ERRORS_IN_PACKET_FILTERS"/>
        /// </summary>
        public static int IWLAN_SYNTACTICAL_ERRORS_IN_PACKET_FILTERS { get { if (!_IWLAN_SYNTACTICAL_ERRORS_IN_PACKET_FILTERSReady) { _IWLAN_SYNTACTICAL_ERRORS_IN_PACKET_FILTERSContent = SGetField<int>(LocalBridgeClazz, "IWLAN_SYNTACTICAL_ERRORS_IN_PACKET_FILTERS"); _IWLAN_SYNTACTICAL_ERRORS_IN_PACKET_FILTERSReady = true; } return _IWLAN_SYNTACTICAL_ERRORS_IN_PACKET_FILTERSContent; } }
        private static int _IWLAN_SYNTACTICAL_ERRORS_IN_PACKET_FILTERSContent = default;
        private static bool _IWLAN_SYNTACTICAL_ERRORS_IN_PACKET_FILTERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_TUNNEL_NOT_FOUND"/>
        /// </summary>
        public static int IWLAN_TUNNEL_NOT_FOUND { get { if (!_IWLAN_TUNNEL_NOT_FOUNDReady) { _IWLAN_TUNNEL_NOT_FOUNDContent = SGetField<int>(LocalBridgeClazz, "IWLAN_TUNNEL_NOT_FOUND"); _IWLAN_TUNNEL_NOT_FOUNDReady = true; } return _IWLAN_TUNNEL_NOT_FOUNDContent; } }
        private static int _IWLAN_TUNNEL_NOT_FOUNDContent = default;
        private static bool _IWLAN_TUNNEL_NOT_FOUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_UNAUTHENTICATED_EMERGENCY_NOT_SUPPORTED"/>
        /// </summary>
        public static int IWLAN_UNAUTHENTICATED_EMERGENCY_NOT_SUPPORTED { get { if (!_IWLAN_UNAUTHENTICATED_EMERGENCY_NOT_SUPPORTEDReady) { _IWLAN_UNAUTHENTICATED_EMERGENCY_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "IWLAN_UNAUTHENTICATED_EMERGENCY_NOT_SUPPORTED"); _IWLAN_UNAUTHENTICATED_EMERGENCY_NOT_SUPPORTEDReady = true; } return _IWLAN_UNAUTHENTICATED_EMERGENCY_NOT_SUPPORTEDContent; } }
        private static int _IWLAN_UNAUTHENTICATED_EMERGENCY_NOT_SUPPORTEDContent = default;
        private static bool _IWLAN_UNAUTHENTICATED_EMERGENCY_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#IWLAN_USER_UNKNOWN"/>
        /// </summary>
        public static int IWLAN_USER_UNKNOWN { get { if (!_IWLAN_USER_UNKNOWNReady) { _IWLAN_USER_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "IWLAN_USER_UNKNOWN"); _IWLAN_USER_UNKNOWNReady = true; } return _IWLAN_USER_UNKNOWNContent; } }
        private static int _IWLAN_USER_UNKNOWNContent = default;
        private static bool _IWLAN_USER_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#LIMITED_TO_IPV4"/>
        /// </summary>
        public static int LIMITED_TO_IPV4 { get { if (!_LIMITED_TO_IPV4Ready) { _LIMITED_TO_IPV4Content = SGetField<int>(LocalBridgeClazz, "LIMITED_TO_IPV4"); _LIMITED_TO_IPV4Ready = true; } return _LIMITED_TO_IPV4Content; } }
        private static int _LIMITED_TO_IPV4Content = default;
        private static bool _LIMITED_TO_IPV4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#LIMITED_TO_IPV6"/>
        /// </summary>
        public static int LIMITED_TO_IPV6 { get { if (!_LIMITED_TO_IPV6Ready) { _LIMITED_TO_IPV6Content = SGetField<int>(LocalBridgeClazz, "LIMITED_TO_IPV6"); _LIMITED_TO_IPV6Ready = true; } return _LIMITED_TO_IPV6Content; } }
        private static int _LIMITED_TO_IPV6Content = default;
        private static bool _LIMITED_TO_IPV6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#LLC_SNDCP"/>
        /// </summary>
        public static int LLC_SNDCP { get { if (!_LLC_SNDCPReady) { _LLC_SNDCPContent = SGetField<int>(LocalBridgeClazz, "LLC_SNDCP"); _LLC_SNDCPReady = true; } return _LLC_SNDCPContent; } }
        private static int _LLC_SNDCPContent = default;
        private static bool _LLC_SNDCPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#LOCAL_END"/>
        /// </summary>
        public static int LOCAL_END { get { if (!_LOCAL_ENDReady) { _LOCAL_ENDContent = SGetField<int>(LocalBridgeClazz, "LOCAL_END"); _LOCAL_ENDReady = true; } return _LOCAL_ENDContent; } }
        private static int _LOCAL_ENDContent = default;
        private static bool _LOCAL_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#LOCATION_AREA_NOT_ALLOWED"/>
        /// </summary>
        public static int LOCATION_AREA_NOT_ALLOWED { get { if (!_LOCATION_AREA_NOT_ALLOWEDReady) { _LOCATION_AREA_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "LOCATION_AREA_NOT_ALLOWED"); _LOCATION_AREA_NOT_ALLOWEDReady = true; } return _LOCATION_AREA_NOT_ALLOWEDContent; } }
        private static int _LOCATION_AREA_NOT_ALLOWEDContent = default;
        private static bool _LOCATION_AREA_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#LOST_CONNECTION"/>
        /// </summary>
        public static int LOST_CONNECTION { get { if (!_LOST_CONNECTIONReady) { _LOST_CONNECTIONContent = SGetField<int>(LocalBridgeClazz, "LOST_CONNECTION"); _LOST_CONNECTIONReady = true; } return _LOST_CONNECTIONContent; } }
        private static int _LOST_CONNECTIONContent = default;
        private static bool _LOST_CONNECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#LOW_POWER_MODE_OR_POWERING_DOWN"/>
        /// </summary>
        public static int LOW_POWER_MODE_OR_POWERING_DOWN { get { if (!_LOW_POWER_MODE_OR_POWERING_DOWNReady) { _LOW_POWER_MODE_OR_POWERING_DOWNContent = SGetField<int>(LocalBridgeClazz, "LOW_POWER_MODE_OR_POWERING_DOWN"); _LOW_POWER_MODE_OR_POWERING_DOWNReady = true; } return _LOW_POWER_MODE_OR_POWERING_DOWNContent; } }
        private static int _LOW_POWER_MODE_OR_POWERING_DOWNContent = default;
        private static bool _LOW_POWER_MODE_OR_POWERING_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#LOWER_LAYER_REGISTRATION_FAILURE"/>
        /// </summary>
        public static int LOWER_LAYER_REGISTRATION_FAILURE { get { if (!_LOWER_LAYER_REGISTRATION_FAILUREReady) { _LOWER_LAYER_REGISTRATION_FAILUREContent = SGetField<int>(LocalBridgeClazz, "LOWER_LAYER_REGISTRATION_FAILURE"); _LOWER_LAYER_REGISTRATION_FAILUREReady = true; } return _LOWER_LAYER_REGISTRATION_FAILUREContent; } }
        private static int _LOWER_LAYER_REGISTRATION_FAILUREContent = default;
        private static bool _LOWER_LAYER_REGISTRATION_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#LTE_NAS_SERVICE_REQUEST_FAILED"/>
        /// </summary>
        public static int LTE_NAS_SERVICE_REQUEST_FAILED { get { if (!_LTE_NAS_SERVICE_REQUEST_FAILEDReady) { _LTE_NAS_SERVICE_REQUEST_FAILEDContent = SGetField<int>(LocalBridgeClazz, "LTE_NAS_SERVICE_REQUEST_FAILED"); _LTE_NAS_SERVICE_REQUEST_FAILEDReady = true; } return _LTE_NAS_SERVICE_REQUEST_FAILEDContent; } }
        private static int _LTE_NAS_SERVICE_REQUEST_FAILEDContent = default;
        private static bool _LTE_NAS_SERVICE_REQUEST_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#LTE_THROTTLING_NOT_REQUIRED"/>
        /// </summary>
        public static int LTE_THROTTLING_NOT_REQUIRED { get { if (!_LTE_THROTTLING_NOT_REQUIREDReady) { _LTE_THROTTLING_NOT_REQUIREDContent = SGetField<int>(LocalBridgeClazz, "LTE_THROTTLING_NOT_REQUIRED"); _LTE_THROTTLING_NOT_REQUIREDReady = true; } return _LTE_THROTTLING_NOT_REQUIREDContent; } }
        private static int _LTE_THROTTLING_NOT_REQUIREDContent = default;
        private static bool _LTE_THROTTLING_NOT_REQUIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MAC_FAILURE"/>
        /// </summary>
        public static int MAC_FAILURE { get { if (!_MAC_FAILUREReady) { _MAC_FAILUREContent = SGetField<int>(LocalBridgeClazz, "MAC_FAILURE"); _MAC_FAILUREReady = true; } return _MAC_FAILUREContent; } }
        private static int _MAC_FAILUREContent = default;
        private static bool _MAC_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MATCH_ALL_RULE_NOT_ALLOWED"/>
        /// </summary>
        public static int MATCH_ALL_RULE_NOT_ALLOWED { get { if (!_MATCH_ALL_RULE_NOT_ALLOWEDReady) { _MATCH_ALL_RULE_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "MATCH_ALL_RULE_NOT_ALLOWED"); _MATCH_ALL_RULE_NOT_ALLOWEDReady = true; } return _MATCH_ALL_RULE_NOT_ALLOWEDContent; } }
        private static int _MATCH_ALL_RULE_NOT_ALLOWEDContent = default;
        private static bool _MATCH_ALL_RULE_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MAX_ACCESS_PROBE"/>
        /// </summary>
        public static int MAX_ACCESS_PROBE { get { if (!_MAX_ACCESS_PROBEReady) { _MAX_ACCESS_PROBEContent = SGetField<int>(LocalBridgeClazz, "MAX_ACCESS_PROBE"); _MAX_ACCESS_PROBEReady = true; } return _MAX_ACCESS_PROBEContent; } }
        private static int _MAX_ACCESS_PROBEContent = default;
        private static bool _MAX_ACCESS_PROBEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MAX_IPV4_CONNECTIONS"/>
        /// </summary>
        public static int MAX_IPV4_CONNECTIONS { get { if (!_MAX_IPV4_CONNECTIONSReady) { _MAX_IPV4_CONNECTIONSContent = SGetField<int>(LocalBridgeClazz, "MAX_IPV4_CONNECTIONS"); _MAX_IPV4_CONNECTIONSReady = true; } return _MAX_IPV4_CONNECTIONSContent; } }
        private static int _MAX_IPV4_CONNECTIONSContent = default;
        private static bool _MAX_IPV4_CONNECTIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MAX_IPV6_CONNECTIONS"/>
        /// </summary>
        public static int MAX_IPV6_CONNECTIONS { get { if (!_MAX_IPV6_CONNECTIONSReady) { _MAX_IPV6_CONNECTIONSContent = SGetField<int>(LocalBridgeClazz, "MAX_IPV6_CONNECTIONS"); _MAX_IPV6_CONNECTIONSReady = true; } return _MAX_IPV6_CONNECTIONSContent; } }
        private static int _MAX_IPV6_CONNECTIONSContent = default;
        private static bool _MAX_IPV6_CONNECTIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MAX_PPP_INACTIVITY_TIMER_EXPIRED"/>
        /// </summary>
        public static int MAX_PPP_INACTIVITY_TIMER_EXPIRED { get { if (!_MAX_PPP_INACTIVITY_TIMER_EXPIREDReady) { _MAX_PPP_INACTIVITY_TIMER_EXPIREDContent = SGetField<int>(LocalBridgeClazz, "MAX_PPP_INACTIVITY_TIMER_EXPIRED"); _MAX_PPP_INACTIVITY_TIMER_EXPIREDReady = true; } return _MAX_PPP_INACTIVITY_TIMER_EXPIREDContent; } }
        private static int _MAX_PPP_INACTIVITY_TIMER_EXPIREDContent = default;
        private static bool _MAX_PPP_INACTIVITY_TIMER_EXPIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MAXIMIUM_NSAPIS_EXCEEDED"/>
        /// </summary>
        public static int MAXIMIUM_NSAPIS_EXCEEDED { get { if (!_MAXIMIUM_NSAPIS_EXCEEDEDReady) { _MAXIMIUM_NSAPIS_EXCEEDEDContent = SGetField<int>(LocalBridgeClazz, "MAXIMIUM_NSAPIS_EXCEEDED"); _MAXIMIUM_NSAPIS_EXCEEDEDReady = true; } return _MAXIMIUM_NSAPIS_EXCEEDEDContent; } }
        private static int _MAXIMIUM_NSAPIS_EXCEEDEDContent = default;
        private static bool _MAXIMIUM_NSAPIS_EXCEEDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MAXINUM_SIZE_OF_L2_MESSAGE_EXCEEDED"/>
        /// </summary>
        public static int MAXINUM_SIZE_OF_L2_MESSAGE_EXCEEDED { get { if (!_MAXINUM_SIZE_OF_L2_MESSAGE_EXCEEDEDReady) { _MAXINUM_SIZE_OF_L2_MESSAGE_EXCEEDEDContent = SGetField<int>(LocalBridgeClazz, "MAXINUM_SIZE_OF_L2_MESSAGE_EXCEEDED"); _MAXINUM_SIZE_OF_L2_MESSAGE_EXCEEDEDReady = true; } return _MAXINUM_SIZE_OF_L2_MESSAGE_EXCEEDEDContent; } }
        private static int _MAXINUM_SIZE_OF_L2_MESSAGE_EXCEEDEDContent = default;
        private static bool _MAXINUM_SIZE_OF_L2_MESSAGE_EXCEEDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MESSAGE_INCORRECT_SEMANTIC"/>
        /// </summary>
        public static int MESSAGE_INCORRECT_SEMANTIC { get { if (!_MESSAGE_INCORRECT_SEMANTICReady) { _MESSAGE_INCORRECT_SEMANTICContent = SGetField<int>(LocalBridgeClazz, "MESSAGE_INCORRECT_SEMANTIC"); _MESSAGE_INCORRECT_SEMANTICReady = true; } return _MESSAGE_INCORRECT_SEMANTICContent; } }
        private static int _MESSAGE_INCORRECT_SEMANTICContent = default;
        private static bool _MESSAGE_INCORRECT_SEMANTICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MESSAGE_TYPE_UNSUPPORTED"/>
        /// </summary>
        public static int MESSAGE_TYPE_UNSUPPORTED { get { if (!_MESSAGE_TYPE_UNSUPPORTEDReady) { _MESSAGE_TYPE_UNSUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "MESSAGE_TYPE_UNSUPPORTED"); _MESSAGE_TYPE_UNSUPPORTEDReady = true; } return _MESSAGE_TYPE_UNSUPPORTEDContent; } }
        private static int _MESSAGE_TYPE_UNSUPPORTEDContent = default;
        private static bool _MESSAGE_TYPE_UNSUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_CONFIG_FAILURE"/>
        /// </summary>
        public static int MIP_CONFIG_FAILURE { get { if (!_MIP_CONFIG_FAILUREReady) { _MIP_CONFIG_FAILUREContent = SGetField<int>(LocalBridgeClazz, "MIP_CONFIG_FAILURE"); _MIP_CONFIG_FAILUREReady = true; } return _MIP_CONFIG_FAILUREContent; } }
        private static int _MIP_CONFIG_FAILUREContent = default;
        private static bool _MIP_CONFIG_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_ADMIN_PROHIBITED"/>
        /// </summary>
        public static int MIP_FA_ADMIN_PROHIBITED { get { if (!_MIP_FA_ADMIN_PROHIBITEDReady) { _MIP_FA_ADMIN_PROHIBITEDContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_ADMIN_PROHIBITED"); _MIP_FA_ADMIN_PROHIBITEDReady = true; } return _MIP_FA_ADMIN_PROHIBITEDContent; } }
        private static int _MIP_FA_ADMIN_PROHIBITEDContent = default;
        private static bool _MIP_FA_ADMIN_PROHIBITEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_DELIVERY_STYLE_NOT_SUPPORTED"/>
        /// </summary>
        public static int MIP_FA_DELIVERY_STYLE_NOT_SUPPORTED { get { if (!_MIP_FA_DELIVERY_STYLE_NOT_SUPPORTEDReady) { _MIP_FA_DELIVERY_STYLE_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_DELIVERY_STYLE_NOT_SUPPORTED"); _MIP_FA_DELIVERY_STYLE_NOT_SUPPORTEDReady = true; } return _MIP_FA_DELIVERY_STYLE_NOT_SUPPORTEDContent; } }
        private static int _MIP_FA_DELIVERY_STYLE_NOT_SUPPORTEDContent = default;
        private static bool _MIP_FA_DELIVERY_STYLE_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_ENCAPSULATION_UNAVAILABLE"/>
        /// </summary>
        public static int MIP_FA_ENCAPSULATION_UNAVAILABLE { get { if (!_MIP_FA_ENCAPSULATION_UNAVAILABLEReady) { _MIP_FA_ENCAPSULATION_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_ENCAPSULATION_UNAVAILABLE"); _MIP_FA_ENCAPSULATION_UNAVAILABLEReady = true; } return _MIP_FA_ENCAPSULATION_UNAVAILABLEContent; } }
        private static int _MIP_FA_ENCAPSULATION_UNAVAILABLEContent = default;
        private static bool _MIP_FA_ENCAPSULATION_UNAVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_HOME_AGENT_AUTHENTICATION_FAILURE"/>
        /// </summary>
        public static int MIP_FA_HOME_AGENT_AUTHENTICATION_FAILURE { get { if (!_MIP_FA_HOME_AGENT_AUTHENTICATION_FAILUREReady) { _MIP_FA_HOME_AGENT_AUTHENTICATION_FAILUREContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_HOME_AGENT_AUTHENTICATION_FAILURE"); _MIP_FA_HOME_AGENT_AUTHENTICATION_FAILUREReady = true; } return _MIP_FA_HOME_AGENT_AUTHENTICATION_FAILUREContent; } }
        private static int _MIP_FA_HOME_AGENT_AUTHENTICATION_FAILUREContent = default;
        private static bool _MIP_FA_HOME_AGENT_AUTHENTICATION_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_INSUFFICIENT_RESOURCES"/>
        /// </summary>
        public static int MIP_FA_INSUFFICIENT_RESOURCES { get { if (!_MIP_FA_INSUFFICIENT_RESOURCESReady) { _MIP_FA_INSUFFICIENT_RESOURCESContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_INSUFFICIENT_RESOURCES"); _MIP_FA_INSUFFICIENT_RESOURCESReady = true; } return _MIP_FA_INSUFFICIENT_RESOURCESContent; } }
        private static int _MIP_FA_INSUFFICIENT_RESOURCESContent = default;
        private static bool _MIP_FA_INSUFFICIENT_RESOURCESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_MALFORMED_REPLY"/>
        /// </summary>
        public static int MIP_FA_MALFORMED_REPLY { get { if (!_MIP_FA_MALFORMED_REPLYReady) { _MIP_FA_MALFORMED_REPLYContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_MALFORMED_REPLY"); _MIP_FA_MALFORMED_REPLYReady = true; } return _MIP_FA_MALFORMED_REPLYContent; } }
        private static int _MIP_FA_MALFORMED_REPLYContent = default;
        private static bool _MIP_FA_MALFORMED_REPLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_MALFORMED_REQUEST"/>
        /// </summary>
        public static int MIP_FA_MALFORMED_REQUEST { get { if (!_MIP_FA_MALFORMED_REQUESTReady) { _MIP_FA_MALFORMED_REQUESTContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_MALFORMED_REQUEST"); _MIP_FA_MALFORMED_REQUESTReady = true; } return _MIP_FA_MALFORMED_REQUESTContent; } }
        private static int _MIP_FA_MALFORMED_REQUESTContent = default;
        private static bool _MIP_FA_MALFORMED_REQUESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_MISSING_CHALLENGE"/>
        /// </summary>
        public static int MIP_FA_MISSING_CHALLENGE { get { if (!_MIP_FA_MISSING_CHALLENGEReady) { _MIP_FA_MISSING_CHALLENGEContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_MISSING_CHALLENGE"); _MIP_FA_MISSING_CHALLENGEReady = true; } return _MIP_FA_MISSING_CHALLENGEContent; } }
        private static int _MIP_FA_MISSING_CHALLENGEContent = default;
        private static bool _MIP_FA_MISSING_CHALLENGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_MISSING_HOME_ADDRESS"/>
        /// </summary>
        public static int MIP_FA_MISSING_HOME_ADDRESS { get { if (!_MIP_FA_MISSING_HOME_ADDRESSReady) { _MIP_FA_MISSING_HOME_ADDRESSContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_MISSING_HOME_ADDRESS"); _MIP_FA_MISSING_HOME_ADDRESSReady = true; } return _MIP_FA_MISSING_HOME_ADDRESSContent; } }
        private static int _MIP_FA_MISSING_HOME_ADDRESSContent = default;
        private static bool _MIP_FA_MISSING_HOME_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_MISSING_HOME_AGENT"/>
        /// </summary>
        public static int MIP_FA_MISSING_HOME_AGENT { get { if (!_MIP_FA_MISSING_HOME_AGENTReady) { _MIP_FA_MISSING_HOME_AGENTContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_MISSING_HOME_AGENT"); _MIP_FA_MISSING_HOME_AGENTReady = true; } return _MIP_FA_MISSING_HOME_AGENTContent; } }
        private static int _MIP_FA_MISSING_HOME_AGENTContent = default;
        private static bool _MIP_FA_MISSING_HOME_AGENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_MISSING_NAI"/>
        /// </summary>
        public static int MIP_FA_MISSING_NAI { get { if (!_MIP_FA_MISSING_NAIReady) { _MIP_FA_MISSING_NAIContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_MISSING_NAI"); _MIP_FA_MISSING_NAIReady = true; } return _MIP_FA_MISSING_NAIContent; } }
        private static int _MIP_FA_MISSING_NAIContent = default;
        private static bool _MIP_FA_MISSING_NAIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_MOBILE_NODE_AUTHENTICATION_FAILURE"/>
        /// </summary>
        public static int MIP_FA_MOBILE_NODE_AUTHENTICATION_FAILURE { get { if (!_MIP_FA_MOBILE_NODE_AUTHENTICATION_FAILUREReady) { _MIP_FA_MOBILE_NODE_AUTHENTICATION_FAILUREContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_MOBILE_NODE_AUTHENTICATION_FAILURE"); _MIP_FA_MOBILE_NODE_AUTHENTICATION_FAILUREReady = true; } return _MIP_FA_MOBILE_NODE_AUTHENTICATION_FAILUREContent; } }
        private static int _MIP_FA_MOBILE_NODE_AUTHENTICATION_FAILUREContent = default;
        private static bool _MIP_FA_MOBILE_NODE_AUTHENTICATION_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_REASON_UNSPECIFIED"/>
        /// </summary>
        public static int MIP_FA_REASON_UNSPECIFIED { get { if (!_MIP_FA_REASON_UNSPECIFIEDReady) { _MIP_FA_REASON_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_REASON_UNSPECIFIED"); _MIP_FA_REASON_UNSPECIFIEDReady = true; } return _MIP_FA_REASON_UNSPECIFIEDContent; } }
        private static int _MIP_FA_REASON_UNSPECIFIEDContent = default;
        private static bool _MIP_FA_REASON_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_REQUESTED_LIFETIME_TOO_LONG"/>
        /// </summary>
        public static int MIP_FA_REQUESTED_LIFETIME_TOO_LONG { get { if (!_MIP_FA_REQUESTED_LIFETIME_TOO_LONGReady) { _MIP_FA_REQUESTED_LIFETIME_TOO_LONGContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_REQUESTED_LIFETIME_TOO_LONG"); _MIP_FA_REQUESTED_LIFETIME_TOO_LONGReady = true; } return _MIP_FA_REQUESTED_LIFETIME_TOO_LONGContent; } }
        private static int _MIP_FA_REQUESTED_LIFETIME_TOO_LONGContent = default;
        private static bool _MIP_FA_REQUESTED_LIFETIME_TOO_LONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_REVERSE_TUNNEL_IS_MANDATORY"/>
        /// </summary>
        public static int MIP_FA_REVERSE_TUNNEL_IS_MANDATORY { get { if (!_MIP_FA_REVERSE_TUNNEL_IS_MANDATORYReady) { _MIP_FA_REVERSE_TUNNEL_IS_MANDATORYContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_REVERSE_TUNNEL_IS_MANDATORY"); _MIP_FA_REVERSE_TUNNEL_IS_MANDATORYReady = true; } return _MIP_FA_REVERSE_TUNNEL_IS_MANDATORYContent; } }
        private static int _MIP_FA_REVERSE_TUNNEL_IS_MANDATORYContent = default;
        private static bool _MIP_FA_REVERSE_TUNNEL_IS_MANDATORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_REVERSE_TUNNEL_UNAVAILABLE"/>
        /// </summary>
        public static int MIP_FA_REVERSE_TUNNEL_UNAVAILABLE { get { if (!_MIP_FA_REVERSE_TUNNEL_UNAVAILABLEReady) { _MIP_FA_REVERSE_TUNNEL_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_REVERSE_TUNNEL_UNAVAILABLE"); _MIP_FA_REVERSE_TUNNEL_UNAVAILABLEReady = true; } return _MIP_FA_REVERSE_TUNNEL_UNAVAILABLEContent; } }
        private static int _MIP_FA_REVERSE_TUNNEL_UNAVAILABLEContent = default;
        private static bool _MIP_FA_REVERSE_TUNNEL_UNAVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_STALE_CHALLENGE"/>
        /// </summary>
        public static int MIP_FA_STALE_CHALLENGE { get { if (!_MIP_FA_STALE_CHALLENGEReady) { _MIP_FA_STALE_CHALLENGEContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_STALE_CHALLENGE"); _MIP_FA_STALE_CHALLENGEReady = true; } return _MIP_FA_STALE_CHALLENGEContent; } }
        private static int _MIP_FA_STALE_CHALLENGEContent = default;
        private static bool _MIP_FA_STALE_CHALLENGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_UNKNOWN_CHALLENGE"/>
        /// </summary>
        public static int MIP_FA_UNKNOWN_CHALLENGE { get { if (!_MIP_FA_UNKNOWN_CHALLENGEReady) { _MIP_FA_UNKNOWN_CHALLENGEContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_UNKNOWN_CHALLENGE"); _MIP_FA_UNKNOWN_CHALLENGEReady = true; } return _MIP_FA_UNKNOWN_CHALLENGEContent; } }
        private static int _MIP_FA_UNKNOWN_CHALLENGEContent = default;
        private static bool _MIP_FA_UNKNOWN_CHALLENGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_FA_VJ_HEADER_COMPRESSION_UNAVAILABLE"/>
        /// </summary>
        public static int MIP_FA_VJ_HEADER_COMPRESSION_UNAVAILABLE { get { if (!_MIP_FA_VJ_HEADER_COMPRESSION_UNAVAILABLEReady) { _MIP_FA_VJ_HEADER_COMPRESSION_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "MIP_FA_VJ_HEADER_COMPRESSION_UNAVAILABLE"); _MIP_FA_VJ_HEADER_COMPRESSION_UNAVAILABLEReady = true; } return _MIP_FA_VJ_HEADER_COMPRESSION_UNAVAILABLEContent; } }
        private static int _MIP_FA_VJ_HEADER_COMPRESSION_UNAVAILABLEContent = default;
        private static bool _MIP_FA_VJ_HEADER_COMPRESSION_UNAVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_HA_ADMIN_PROHIBITED"/>
        /// </summary>
        public static int MIP_HA_ADMIN_PROHIBITED { get { if (!_MIP_HA_ADMIN_PROHIBITEDReady) { _MIP_HA_ADMIN_PROHIBITEDContent = SGetField<int>(LocalBridgeClazz, "MIP_HA_ADMIN_PROHIBITED"); _MIP_HA_ADMIN_PROHIBITEDReady = true; } return _MIP_HA_ADMIN_PROHIBITEDContent; } }
        private static int _MIP_HA_ADMIN_PROHIBITEDContent = default;
        private static bool _MIP_HA_ADMIN_PROHIBITEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_HA_ENCAPSULATION_UNAVAILABLE"/>
        /// </summary>
        public static int MIP_HA_ENCAPSULATION_UNAVAILABLE { get { if (!_MIP_HA_ENCAPSULATION_UNAVAILABLEReady) { _MIP_HA_ENCAPSULATION_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "MIP_HA_ENCAPSULATION_UNAVAILABLE"); _MIP_HA_ENCAPSULATION_UNAVAILABLEReady = true; } return _MIP_HA_ENCAPSULATION_UNAVAILABLEContent; } }
        private static int _MIP_HA_ENCAPSULATION_UNAVAILABLEContent = default;
        private static bool _MIP_HA_ENCAPSULATION_UNAVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_HA_FOREIGN_AGENT_AUTHENTICATION_FAILURE"/>
        /// </summary>
        public static int MIP_HA_FOREIGN_AGENT_AUTHENTICATION_FAILURE { get { if (!_MIP_HA_FOREIGN_AGENT_AUTHENTICATION_FAILUREReady) { _MIP_HA_FOREIGN_AGENT_AUTHENTICATION_FAILUREContent = SGetField<int>(LocalBridgeClazz, "MIP_HA_FOREIGN_AGENT_AUTHENTICATION_FAILURE"); _MIP_HA_FOREIGN_AGENT_AUTHENTICATION_FAILUREReady = true; } return _MIP_HA_FOREIGN_AGENT_AUTHENTICATION_FAILUREContent; } }
        private static int _MIP_HA_FOREIGN_AGENT_AUTHENTICATION_FAILUREContent = default;
        private static bool _MIP_HA_FOREIGN_AGENT_AUTHENTICATION_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_HA_INSUFFICIENT_RESOURCES"/>
        /// </summary>
        public static int MIP_HA_INSUFFICIENT_RESOURCES { get { if (!_MIP_HA_INSUFFICIENT_RESOURCESReady) { _MIP_HA_INSUFFICIENT_RESOURCESContent = SGetField<int>(LocalBridgeClazz, "MIP_HA_INSUFFICIENT_RESOURCES"); _MIP_HA_INSUFFICIENT_RESOURCESReady = true; } return _MIP_HA_INSUFFICIENT_RESOURCESContent; } }
        private static int _MIP_HA_INSUFFICIENT_RESOURCESContent = default;
        private static bool _MIP_HA_INSUFFICIENT_RESOURCESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_HA_MALFORMED_REQUEST"/>
        /// </summary>
        public static int MIP_HA_MALFORMED_REQUEST { get { if (!_MIP_HA_MALFORMED_REQUESTReady) { _MIP_HA_MALFORMED_REQUESTContent = SGetField<int>(LocalBridgeClazz, "MIP_HA_MALFORMED_REQUEST"); _MIP_HA_MALFORMED_REQUESTReady = true; } return _MIP_HA_MALFORMED_REQUESTContent; } }
        private static int _MIP_HA_MALFORMED_REQUESTContent = default;
        private static bool _MIP_HA_MALFORMED_REQUESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_HA_MOBILE_NODE_AUTHENTICATION_FAILURE"/>
        /// </summary>
        public static int MIP_HA_MOBILE_NODE_AUTHENTICATION_FAILURE { get { if (!_MIP_HA_MOBILE_NODE_AUTHENTICATION_FAILUREReady) { _MIP_HA_MOBILE_NODE_AUTHENTICATION_FAILUREContent = SGetField<int>(LocalBridgeClazz, "MIP_HA_MOBILE_NODE_AUTHENTICATION_FAILURE"); _MIP_HA_MOBILE_NODE_AUTHENTICATION_FAILUREReady = true; } return _MIP_HA_MOBILE_NODE_AUTHENTICATION_FAILUREContent; } }
        private static int _MIP_HA_MOBILE_NODE_AUTHENTICATION_FAILUREContent = default;
        private static bool _MIP_HA_MOBILE_NODE_AUTHENTICATION_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_HA_REASON_UNSPECIFIED"/>
        /// </summary>
        public static int MIP_HA_REASON_UNSPECIFIED { get { if (!_MIP_HA_REASON_UNSPECIFIEDReady) { _MIP_HA_REASON_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "MIP_HA_REASON_UNSPECIFIED"); _MIP_HA_REASON_UNSPECIFIEDReady = true; } return _MIP_HA_REASON_UNSPECIFIEDContent; } }
        private static int _MIP_HA_REASON_UNSPECIFIEDContent = default;
        private static bool _MIP_HA_REASON_UNSPECIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_HA_REGISTRATION_ID_MISMATCH"/>
        /// </summary>
        public static int MIP_HA_REGISTRATION_ID_MISMATCH { get { if (!_MIP_HA_REGISTRATION_ID_MISMATCHReady) { _MIP_HA_REGISTRATION_ID_MISMATCHContent = SGetField<int>(LocalBridgeClazz, "MIP_HA_REGISTRATION_ID_MISMATCH"); _MIP_HA_REGISTRATION_ID_MISMATCHReady = true; } return _MIP_HA_REGISTRATION_ID_MISMATCHContent; } }
        private static int _MIP_HA_REGISTRATION_ID_MISMATCHContent = default;
        private static bool _MIP_HA_REGISTRATION_ID_MISMATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_HA_REVERSE_TUNNEL_IS_MANDATORY"/>
        /// </summary>
        public static int MIP_HA_REVERSE_TUNNEL_IS_MANDATORY { get { if (!_MIP_HA_REVERSE_TUNNEL_IS_MANDATORYReady) { _MIP_HA_REVERSE_TUNNEL_IS_MANDATORYContent = SGetField<int>(LocalBridgeClazz, "MIP_HA_REVERSE_TUNNEL_IS_MANDATORY"); _MIP_HA_REVERSE_TUNNEL_IS_MANDATORYReady = true; } return _MIP_HA_REVERSE_TUNNEL_IS_MANDATORYContent; } }
        private static int _MIP_HA_REVERSE_TUNNEL_IS_MANDATORYContent = default;
        private static bool _MIP_HA_REVERSE_TUNNEL_IS_MANDATORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_HA_REVERSE_TUNNEL_UNAVAILABLE"/>
        /// </summary>
        public static int MIP_HA_REVERSE_TUNNEL_UNAVAILABLE { get { if (!_MIP_HA_REVERSE_TUNNEL_UNAVAILABLEReady) { _MIP_HA_REVERSE_TUNNEL_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "MIP_HA_REVERSE_TUNNEL_UNAVAILABLE"); _MIP_HA_REVERSE_TUNNEL_UNAVAILABLEReady = true; } return _MIP_HA_REVERSE_TUNNEL_UNAVAILABLEContent; } }
        private static int _MIP_HA_REVERSE_TUNNEL_UNAVAILABLEContent = default;
        private static bool _MIP_HA_REVERSE_TUNNEL_UNAVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MIP_HA_UNKNOWN_HOME_AGENT_ADDRESS"/>
        /// </summary>
        public static int MIP_HA_UNKNOWN_HOME_AGENT_ADDRESS { get { if (!_MIP_HA_UNKNOWN_HOME_AGENT_ADDRESSReady) { _MIP_HA_UNKNOWN_HOME_AGENT_ADDRESSContent = SGetField<int>(LocalBridgeClazz, "MIP_HA_UNKNOWN_HOME_AGENT_ADDRESS"); _MIP_HA_UNKNOWN_HOME_AGENT_ADDRESSReady = true; } return _MIP_HA_UNKNOWN_HOME_AGENT_ADDRESSContent; } }
        private static int _MIP_HA_UNKNOWN_HOME_AGENT_ADDRESSContent = default;
        private static bool _MIP_HA_UNKNOWN_HOME_AGENT_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MISSING_UNKNOWN_APN"/>
        /// </summary>
        public static int MISSING_UNKNOWN_APN { get { if (!_MISSING_UNKNOWN_APNReady) { _MISSING_UNKNOWN_APNContent = SGetField<int>(LocalBridgeClazz, "MISSING_UNKNOWN_APN"); _MISSING_UNKNOWN_APNReady = true; } return _MISSING_UNKNOWN_APNContent; } }
        private static int _MISSING_UNKNOWN_APNContent = default;
        private static bool _MISSING_UNKNOWN_APNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MODEM_APP_PREEMPTED"/>
        /// </summary>
        public static int MODEM_APP_PREEMPTED { get { if (!_MODEM_APP_PREEMPTEDReady) { _MODEM_APP_PREEMPTEDContent = SGetField<int>(LocalBridgeClazz, "MODEM_APP_PREEMPTED"); _MODEM_APP_PREEMPTEDReady = true; } return _MODEM_APP_PREEMPTEDContent; } }
        private static int _MODEM_APP_PREEMPTEDContent = default;
        private static bool _MODEM_APP_PREEMPTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MODEM_RESTART"/>
        /// </summary>
        public static int MODEM_RESTART { get { if (!_MODEM_RESTARTReady) { _MODEM_RESTARTContent = SGetField<int>(LocalBridgeClazz, "MODEM_RESTART"); _MODEM_RESTARTReady = true; } return _MODEM_RESTARTContent; } }
        private static int _MODEM_RESTARTContent = default;
        private static bool _MODEM_RESTARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MS_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORK"/>
        /// </summary>
        public static int MS_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORK { get { if (!_MS_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORKReady) { _MS_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORKContent = SGetField<int>(LocalBridgeClazz, "MS_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORK"); _MS_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORKReady = true; } return _MS_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORKContent; } }
        private static int _MS_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORKContent = default;
        private static bool _MS_IDENTITY_CANNOT_BE_DERIVED_BY_THE_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MSC_TEMPORARILY_NOT_REACHABLE"/>
        /// </summary>
        public static int MSC_TEMPORARILY_NOT_REACHABLE { get { if (!_MSC_TEMPORARILY_NOT_REACHABLEReady) { _MSC_TEMPORARILY_NOT_REACHABLEContent = SGetField<int>(LocalBridgeClazz, "MSC_TEMPORARILY_NOT_REACHABLE"); _MSC_TEMPORARILY_NOT_REACHABLEReady = true; } return _MSC_TEMPORARILY_NOT_REACHABLEContent; } }
        private static int _MSC_TEMPORARILY_NOT_REACHABLEContent = default;
        private static bool _MSC_TEMPORARILY_NOT_REACHABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE"/>
        /// </summary>
        public static int MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE { get { if (!_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLEReady) { _MSG_AND_PROTOCOL_STATE_UNCOMPATIBLEContent = SGetField<int>(LocalBridgeClazz, "MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE"); _MSG_AND_PROTOCOL_STATE_UNCOMPATIBLEReady = true; } return _MSG_AND_PROTOCOL_STATE_UNCOMPATIBLEContent; } }
        private static int _MSG_AND_PROTOCOL_STATE_UNCOMPATIBLEContent = default;
        private static bool _MSG_AND_PROTOCOL_STATE_UNCOMPATIBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MSG_TYPE_NONCOMPATIBLE_STATE"/>
        /// </summary>
        public static int MSG_TYPE_NONCOMPATIBLE_STATE { get { if (!_MSG_TYPE_NONCOMPATIBLE_STATEReady) { _MSG_TYPE_NONCOMPATIBLE_STATEContent = SGetField<int>(LocalBridgeClazz, "MSG_TYPE_NONCOMPATIBLE_STATE"); _MSG_TYPE_NONCOMPATIBLE_STATEReady = true; } return _MSG_TYPE_NONCOMPATIBLE_STATEContent; } }
        private static int _MSG_TYPE_NONCOMPATIBLE_STATEContent = default;
        private static bool _MSG_TYPE_NONCOMPATIBLE_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED"/>
        /// </summary>
        public static int MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED { get { if (!_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWEDReady) { _MULTI_CONN_TO_SAME_PDN_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED"); _MULTI_CONN_TO_SAME_PDN_NOT_ALLOWEDReady = true; } return _MULTI_CONN_TO_SAME_PDN_NOT_ALLOWEDContent; } }
        private static int _MULTI_CONN_TO_SAME_PDN_NOT_ALLOWEDContent = default;
        private static bool _MULTI_CONN_TO_SAME_PDN_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#MULTIPLE_PDP_CALL_NOT_ALLOWED"/>
        /// </summary>
        public static int MULTIPLE_PDP_CALL_NOT_ALLOWED { get { if (!_MULTIPLE_PDP_CALL_NOT_ALLOWEDReady) { _MULTIPLE_PDP_CALL_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "MULTIPLE_PDP_CALL_NOT_ALLOWED"); _MULTIPLE_PDP_CALL_NOT_ALLOWEDReady = true; } return _MULTIPLE_PDP_CALL_NOT_ALLOWEDContent; } }
        private static int _MULTIPLE_PDP_CALL_NOT_ALLOWEDContent = default;
        private static bool _MULTIPLE_PDP_CALL_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NAS_LAYER_FAILURE"/>
        /// </summary>
        public static int NAS_LAYER_FAILURE { get { if (!_NAS_LAYER_FAILUREReady) { _NAS_LAYER_FAILUREContent = SGetField<int>(LocalBridgeClazz, "NAS_LAYER_FAILURE"); _NAS_LAYER_FAILUREReady = true; } return _NAS_LAYER_FAILUREContent; } }
        private static int _NAS_LAYER_FAILUREContent = default;
        private static bool _NAS_LAYER_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NAS_REQUEST_REJECTED_BY_NETWORK"/>
        /// </summary>
        public static int NAS_REQUEST_REJECTED_BY_NETWORK { get { if (!_NAS_REQUEST_REJECTED_BY_NETWORKReady) { _NAS_REQUEST_REJECTED_BY_NETWORKContent = SGetField<int>(LocalBridgeClazz, "NAS_REQUEST_REJECTED_BY_NETWORK"); _NAS_REQUEST_REJECTED_BY_NETWORKReady = true; } return _NAS_REQUEST_REJECTED_BY_NETWORKContent; } }
        private static int _NAS_REQUEST_REJECTED_BY_NETWORKContent = default;
        private static bool _NAS_REQUEST_REJECTED_BY_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NAS_SIGNALLING"/>
        /// </summary>
        public static int NAS_SIGNALLING { get { if (!_NAS_SIGNALLINGReady) { _NAS_SIGNALLINGContent = SGetField<int>(LocalBridgeClazz, "NAS_SIGNALLING"); _NAS_SIGNALLINGReady = true; } return _NAS_SIGNALLINGContent; } }
        private static int _NAS_SIGNALLINGContent = default;
        private static bool _NAS_SIGNALLINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NETWORK_FAILURE"/>
        /// </summary>
        public static int NETWORK_FAILURE { get { if (!_NETWORK_FAILUREReady) { _NETWORK_FAILUREContent = SGetField<int>(LocalBridgeClazz, "NETWORK_FAILURE"); _NETWORK_FAILUREReady = true; } return _NETWORK_FAILUREContent; } }
        private static int _NETWORK_FAILUREContent = default;
        private static bool _NETWORK_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NETWORK_INITIATED_DETACH_NO_AUTO_REATTACH"/>
        /// </summary>
        public static int NETWORK_INITIATED_DETACH_NO_AUTO_REATTACH { get { if (!_NETWORK_INITIATED_DETACH_NO_AUTO_REATTACHReady) { _NETWORK_INITIATED_DETACH_NO_AUTO_REATTACHContent = SGetField<int>(LocalBridgeClazz, "NETWORK_INITIATED_DETACH_NO_AUTO_REATTACH"); _NETWORK_INITIATED_DETACH_NO_AUTO_REATTACHReady = true; } return _NETWORK_INITIATED_DETACH_NO_AUTO_REATTACHContent; } }
        private static int _NETWORK_INITIATED_DETACH_NO_AUTO_REATTACHContent = default;
        private static bool _NETWORK_INITIATED_DETACH_NO_AUTO_REATTACHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NETWORK_INITIATED_DETACH_WITH_AUTO_REATTACH"/>
        /// </summary>
        public static int NETWORK_INITIATED_DETACH_WITH_AUTO_REATTACH { get { if (!_NETWORK_INITIATED_DETACH_WITH_AUTO_REATTACHReady) { _NETWORK_INITIATED_DETACH_WITH_AUTO_REATTACHContent = SGetField<int>(LocalBridgeClazz, "NETWORK_INITIATED_DETACH_WITH_AUTO_REATTACH"); _NETWORK_INITIATED_DETACH_WITH_AUTO_REATTACHReady = true; } return _NETWORK_INITIATED_DETACH_WITH_AUTO_REATTACHContent; } }
        private static int _NETWORK_INITIATED_DETACH_WITH_AUTO_REATTACHContent = default;
        private static bool _NETWORK_INITIATED_DETACH_WITH_AUTO_REATTACHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NETWORK_INITIATED_TERMINATION"/>
        /// </summary>
        public static int NETWORK_INITIATED_TERMINATION { get { if (!_NETWORK_INITIATED_TERMINATIONReady) { _NETWORK_INITIATED_TERMINATIONContent = SGetField<int>(LocalBridgeClazz, "NETWORK_INITIATED_TERMINATION"); _NETWORK_INITIATED_TERMINATIONReady = true; } return _NETWORK_INITIATED_TERMINATIONContent; } }
        private static int _NETWORK_INITIATED_TERMINATIONContent = default;
        private static bool _NETWORK_INITIATED_TERMINATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NO_CDMA_SERVICE"/>
        /// </summary>
        public static int NO_CDMA_SERVICE { get { if (!_NO_CDMA_SERVICEReady) { _NO_CDMA_SERVICEContent = SGetField<int>(LocalBridgeClazz, "NO_CDMA_SERVICE"); _NO_CDMA_SERVICEReady = true; } return _NO_CDMA_SERVICEContent; } }
        private static int _NO_CDMA_SERVICEContent = default;
        private static bool _NO_CDMA_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NO_COLLOCATED_HDR"/>
        /// </summary>
        public static int NO_COLLOCATED_HDR { get { if (!_NO_COLLOCATED_HDRReady) { _NO_COLLOCATED_HDRContent = SGetField<int>(LocalBridgeClazz, "NO_COLLOCATED_HDR"); _NO_COLLOCATED_HDRReady = true; } return _NO_COLLOCATED_HDRContent; } }
        private static int _NO_COLLOCATED_HDRContent = default;
        private static bool _NO_COLLOCATED_HDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NO_EPS_BEARER_CONTEXT_ACTIVATED"/>
        /// </summary>
        public static int NO_EPS_BEARER_CONTEXT_ACTIVATED { get { if (!_NO_EPS_BEARER_CONTEXT_ACTIVATEDReady) { _NO_EPS_BEARER_CONTEXT_ACTIVATEDContent = SGetField<int>(LocalBridgeClazz, "NO_EPS_BEARER_CONTEXT_ACTIVATED"); _NO_EPS_BEARER_CONTEXT_ACTIVATEDReady = true; } return _NO_EPS_BEARER_CONTEXT_ACTIVATEDContent; } }
        private static int _NO_EPS_BEARER_CONTEXT_ACTIVATEDContent = default;
        private static bool _NO_EPS_BEARER_CONTEXT_ACTIVATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NO_GPRS_CONTEXT"/>
        /// </summary>
        public static int NO_GPRS_CONTEXT { get { if (!_NO_GPRS_CONTEXTReady) { _NO_GPRS_CONTEXTContent = SGetField<int>(LocalBridgeClazz, "NO_GPRS_CONTEXT"); _NO_GPRS_CONTEXTReady = true; } return _NO_GPRS_CONTEXTContent; } }
        private static int _NO_GPRS_CONTEXTContent = default;
        private static bool _NO_GPRS_CONTEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NO_HYBRID_HDR_SERVICE"/>
        /// </summary>
        public static int NO_HYBRID_HDR_SERVICE { get { if (!_NO_HYBRID_HDR_SERVICEReady) { _NO_HYBRID_HDR_SERVICEContent = SGetField<int>(LocalBridgeClazz, "NO_HYBRID_HDR_SERVICE"); _NO_HYBRID_HDR_SERVICEReady = true; } return _NO_HYBRID_HDR_SERVICEContent; } }
        private static int _NO_HYBRID_HDR_SERVICEContent = default;
        private static bool _NO_HYBRID_HDR_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NO_PDP_CONTEXT_ACTIVATED"/>
        /// </summary>
        public static int NO_PDP_CONTEXT_ACTIVATED { get { if (!_NO_PDP_CONTEXT_ACTIVATEDReady) { _NO_PDP_CONTEXT_ACTIVATEDContent = SGetField<int>(LocalBridgeClazz, "NO_PDP_CONTEXT_ACTIVATED"); _NO_PDP_CONTEXT_ACTIVATEDReady = true; } return _NO_PDP_CONTEXT_ACTIVATEDContent; } }
        private static int _NO_PDP_CONTEXT_ACTIVATEDContent = default;
        private static bool _NO_PDP_CONTEXT_ACTIVATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NO_RESPONSE_FROM_BASE_STATION"/>
        /// </summary>
        public static int NO_RESPONSE_FROM_BASE_STATION { get { if (!_NO_RESPONSE_FROM_BASE_STATIONReady) { _NO_RESPONSE_FROM_BASE_STATIONContent = SGetField<int>(LocalBridgeClazz, "NO_RESPONSE_FROM_BASE_STATION"); _NO_RESPONSE_FROM_BASE_STATIONReady = true; } return _NO_RESPONSE_FROM_BASE_STATIONContent; } }
        private static int _NO_RESPONSE_FROM_BASE_STATIONContent = default;
        private static bool _NO_RESPONSE_FROM_BASE_STATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NO_SERVICE"/>
        /// </summary>
        public static int NO_SERVICE { get { if (!_NO_SERVICEReady) { _NO_SERVICEContent = SGetField<int>(LocalBridgeClazz, "NO_SERVICE"); _NO_SERVICEReady = true; } return _NO_SERVICEContent; } }
        private static int _NO_SERVICEContent = default;
        private static bool _NO_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NO_SERVICE_ON_GATEWAY"/>
        /// </summary>
        public static int NO_SERVICE_ON_GATEWAY { get { if (!_NO_SERVICE_ON_GATEWAYReady) { _NO_SERVICE_ON_GATEWAYContent = SGetField<int>(LocalBridgeClazz, "NO_SERVICE_ON_GATEWAY"); _NO_SERVICE_ON_GATEWAYReady = true; } return _NO_SERVICE_ON_GATEWAYContent; } }
        private static int _NO_SERVICE_ON_GATEWAYContent = default;
        private static bool _NO_SERVICE_ON_GATEWAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NON_IP_NOT_SUPPORTED"/>
        /// </summary>
        public static int NON_IP_NOT_SUPPORTED { get { if (!_NON_IP_NOT_SUPPORTEDReady) { _NON_IP_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "NON_IP_NOT_SUPPORTED"); _NON_IP_NOT_SUPPORTEDReady = true; } return _NON_IP_NOT_SUPPORTEDContent; } }
        private static int _NON_IP_NOT_SUPPORTEDContent = default;
        private static bool _NON_IP_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NONE"/>
        /// </summary>
        public static int NONE { get { if (!_NONEReady) { _NONEContent = SGetField<int>(LocalBridgeClazz, "NONE"); _NONEReady = true; } return _NONEContent; } }
        private static int _NONEContent = default;
        private static bool _NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NORMAL_RELEASE"/>
        /// </summary>
        public static int NORMAL_RELEASE { get { if (!_NORMAL_RELEASEReady) { _NORMAL_RELEASEContent = SGetField<int>(LocalBridgeClazz, "NORMAL_RELEASE"); _NORMAL_RELEASEReady = true; } return _NORMAL_RELEASEContent; } }
        private static int _NORMAL_RELEASEContent = default;
        private static bool _NORMAL_RELEASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NSAPI_IN_USE"/>
        /// </summary>
        public static int NSAPI_IN_USE { get { if (!_NSAPI_IN_USEReady) { _NSAPI_IN_USEContent = SGetField<int>(LocalBridgeClazz, "NSAPI_IN_USE"); _NSAPI_IN_USEReady = true; } return _NSAPI_IN_USEContent; } }
        private static int _NSAPI_IN_USEContent = default;
        private static bool _NSAPI_IN_USEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#NULL_APN_DISALLOWED"/>
        /// </summary>
        public static int NULL_APN_DISALLOWED { get { if (!_NULL_APN_DISALLOWEDReady) { _NULL_APN_DISALLOWEDContent = SGetField<int>(LocalBridgeClazz, "NULL_APN_DISALLOWED"); _NULL_APN_DISALLOWEDReady = true; } return _NULL_APN_DISALLOWEDContent; } }
        private static int _NULL_APN_DISALLOWEDContent = default;
        private static bool _NULL_APN_DISALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OEM_DCFAILCAUSE_1"/>
        /// </summary>
        public static int OEM_DCFAILCAUSE_1 { get { if (!_OEM_DCFAILCAUSE_1Ready) { _OEM_DCFAILCAUSE_1Content = SGetField<int>(LocalBridgeClazz, "OEM_DCFAILCAUSE_1"); _OEM_DCFAILCAUSE_1Ready = true; } return _OEM_DCFAILCAUSE_1Content; } }
        private static int _OEM_DCFAILCAUSE_1Content = default;
        private static bool _OEM_DCFAILCAUSE_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OEM_DCFAILCAUSE_10"/>
        /// </summary>
        public static int OEM_DCFAILCAUSE_10 { get { if (!_OEM_DCFAILCAUSE_10Ready) { _OEM_DCFAILCAUSE_10Content = SGetField<int>(LocalBridgeClazz, "OEM_DCFAILCAUSE_10"); _OEM_DCFAILCAUSE_10Ready = true; } return _OEM_DCFAILCAUSE_10Content; } }
        private static int _OEM_DCFAILCAUSE_10Content = default;
        private static bool _OEM_DCFAILCAUSE_10Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OEM_DCFAILCAUSE_11"/>
        /// </summary>
        public static int OEM_DCFAILCAUSE_11 { get { if (!_OEM_DCFAILCAUSE_11Ready) { _OEM_DCFAILCAUSE_11Content = SGetField<int>(LocalBridgeClazz, "OEM_DCFAILCAUSE_11"); _OEM_DCFAILCAUSE_11Ready = true; } return _OEM_DCFAILCAUSE_11Content; } }
        private static int _OEM_DCFAILCAUSE_11Content = default;
        private static bool _OEM_DCFAILCAUSE_11Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OEM_DCFAILCAUSE_12"/>
        /// </summary>
        public static int OEM_DCFAILCAUSE_12 { get { if (!_OEM_DCFAILCAUSE_12Ready) { _OEM_DCFAILCAUSE_12Content = SGetField<int>(LocalBridgeClazz, "OEM_DCFAILCAUSE_12"); _OEM_DCFAILCAUSE_12Ready = true; } return _OEM_DCFAILCAUSE_12Content; } }
        private static int _OEM_DCFAILCAUSE_12Content = default;
        private static bool _OEM_DCFAILCAUSE_12Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OEM_DCFAILCAUSE_13"/>
        /// </summary>
        public static int OEM_DCFAILCAUSE_13 { get { if (!_OEM_DCFAILCAUSE_13Ready) { _OEM_DCFAILCAUSE_13Content = SGetField<int>(LocalBridgeClazz, "OEM_DCFAILCAUSE_13"); _OEM_DCFAILCAUSE_13Ready = true; } return _OEM_DCFAILCAUSE_13Content; } }
        private static int _OEM_DCFAILCAUSE_13Content = default;
        private static bool _OEM_DCFAILCAUSE_13Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OEM_DCFAILCAUSE_14"/>
        /// </summary>
        public static int OEM_DCFAILCAUSE_14 { get { if (!_OEM_DCFAILCAUSE_14Ready) { _OEM_DCFAILCAUSE_14Content = SGetField<int>(LocalBridgeClazz, "OEM_DCFAILCAUSE_14"); _OEM_DCFAILCAUSE_14Ready = true; } return _OEM_DCFAILCAUSE_14Content; } }
        private static int _OEM_DCFAILCAUSE_14Content = default;
        private static bool _OEM_DCFAILCAUSE_14Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OEM_DCFAILCAUSE_15"/>
        /// </summary>
        public static int OEM_DCFAILCAUSE_15 { get { if (!_OEM_DCFAILCAUSE_15Ready) { _OEM_DCFAILCAUSE_15Content = SGetField<int>(LocalBridgeClazz, "OEM_DCFAILCAUSE_15"); _OEM_DCFAILCAUSE_15Ready = true; } return _OEM_DCFAILCAUSE_15Content; } }
        private static int _OEM_DCFAILCAUSE_15Content = default;
        private static bool _OEM_DCFAILCAUSE_15Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OEM_DCFAILCAUSE_2"/>
        /// </summary>
        public static int OEM_DCFAILCAUSE_2 { get { if (!_OEM_DCFAILCAUSE_2Ready) { _OEM_DCFAILCAUSE_2Content = SGetField<int>(LocalBridgeClazz, "OEM_DCFAILCAUSE_2"); _OEM_DCFAILCAUSE_2Ready = true; } return _OEM_DCFAILCAUSE_2Content; } }
        private static int _OEM_DCFAILCAUSE_2Content = default;
        private static bool _OEM_DCFAILCAUSE_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OEM_DCFAILCAUSE_3"/>
        /// </summary>
        public static int OEM_DCFAILCAUSE_3 { get { if (!_OEM_DCFAILCAUSE_3Ready) { _OEM_DCFAILCAUSE_3Content = SGetField<int>(LocalBridgeClazz, "OEM_DCFAILCAUSE_3"); _OEM_DCFAILCAUSE_3Ready = true; } return _OEM_DCFAILCAUSE_3Content; } }
        private static int _OEM_DCFAILCAUSE_3Content = default;
        private static bool _OEM_DCFAILCAUSE_3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OEM_DCFAILCAUSE_4"/>
        /// </summary>
        public static int OEM_DCFAILCAUSE_4 { get { if (!_OEM_DCFAILCAUSE_4Ready) { _OEM_DCFAILCAUSE_4Content = SGetField<int>(LocalBridgeClazz, "OEM_DCFAILCAUSE_4"); _OEM_DCFAILCAUSE_4Ready = true; } return _OEM_DCFAILCAUSE_4Content; } }
        private static int _OEM_DCFAILCAUSE_4Content = default;
        private static bool _OEM_DCFAILCAUSE_4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OEM_DCFAILCAUSE_5"/>
        /// </summary>
        public static int OEM_DCFAILCAUSE_5 { get { if (!_OEM_DCFAILCAUSE_5Ready) { _OEM_DCFAILCAUSE_5Content = SGetField<int>(LocalBridgeClazz, "OEM_DCFAILCAUSE_5"); _OEM_DCFAILCAUSE_5Ready = true; } return _OEM_DCFAILCAUSE_5Content; } }
        private static int _OEM_DCFAILCAUSE_5Content = default;
        private static bool _OEM_DCFAILCAUSE_5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OEM_DCFAILCAUSE_6"/>
        /// </summary>
        public static int OEM_DCFAILCAUSE_6 { get { if (!_OEM_DCFAILCAUSE_6Ready) { _OEM_DCFAILCAUSE_6Content = SGetField<int>(LocalBridgeClazz, "OEM_DCFAILCAUSE_6"); _OEM_DCFAILCAUSE_6Ready = true; } return _OEM_DCFAILCAUSE_6Content; } }
        private static int _OEM_DCFAILCAUSE_6Content = default;
        private static bool _OEM_DCFAILCAUSE_6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OEM_DCFAILCAUSE_7"/>
        /// </summary>
        public static int OEM_DCFAILCAUSE_7 { get { if (!_OEM_DCFAILCAUSE_7Ready) { _OEM_DCFAILCAUSE_7Content = SGetField<int>(LocalBridgeClazz, "OEM_DCFAILCAUSE_7"); _OEM_DCFAILCAUSE_7Ready = true; } return _OEM_DCFAILCAUSE_7Content; } }
        private static int _OEM_DCFAILCAUSE_7Content = default;
        private static bool _OEM_DCFAILCAUSE_7Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OEM_DCFAILCAUSE_8"/>
        /// </summary>
        public static int OEM_DCFAILCAUSE_8 { get { if (!_OEM_DCFAILCAUSE_8Ready) { _OEM_DCFAILCAUSE_8Content = SGetField<int>(LocalBridgeClazz, "OEM_DCFAILCAUSE_8"); _OEM_DCFAILCAUSE_8Ready = true; } return _OEM_DCFAILCAUSE_8Content; } }
        private static int _OEM_DCFAILCAUSE_8Content = default;
        private static bool _OEM_DCFAILCAUSE_8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OEM_DCFAILCAUSE_9"/>
        /// </summary>
        public static int OEM_DCFAILCAUSE_9 { get { if (!_OEM_DCFAILCAUSE_9Ready) { _OEM_DCFAILCAUSE_9Content = SGetField<int>(LocalBridgeClazz, "OEM_DCFAILCAUSE_9"); _OEM_DCFAILCAUSE_9Ready = true; } return _OEM_DCFAILCAUSE_9Content; } }
        private static int _OEM_DCFAILCAUSE_9Content = default;
        private static bool _OEM_DCFAILCAUSE_9Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ONLY_IPV4_ALLOWED"/>
        /// </summary>
        public static int ONLY_IPV4_ALLOWED { get { if (!_ONLY_IPV4_ALLOWEDReady) { _ONLY_IPV4_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "ONLY_IPV4_ALLOWED"); _ONLY_IPV4_ALLOWEDReady = true; } return _ONLY_IPV4_ALLOWEDContent; } }
        private static int _ONLY_IPV4_ALLOWEDContent = default;
        private static bool _ONLY_IPV4_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ONLY_IPV4V6_ALLOWED"/>
        /// </summary>
        public static int ONLY_IPV4V6_ALLOWED { get { if (!_ONLY_IPV4V6_ALLOWEDReady) { _ONLY_IPV4V6_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "ONLY_IPV4V6_ALLOWED"); _ONLY_IPV4V6_ALLOWEDReady = true; } return _ONLY_IPV4V6_ALLOWEDContent; } }
        private static int _ONLY_IPV4V6_ALLOWEDContent = default;
        private static bool _ONLY_IPV4V6_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ONLY_IPV6_ALLOWED"/>
        /// </summary>
        public static int ONLY_IPV6_ALLOWED { get { if (!_ONLY_IPV6_ALLOWEDReady) { _ONLY_IPV6_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "ONLY_IPV6_ALLOWED"); _ONLY_IPV6_ALLOWEDReady = true; } return _ONLY_IPV6_ALLOWEDContent; } }
        private static int _ONLY_IPV6_ALLOWEDContent = default;
        private static bool _ONLY_IPV6_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ONLY_NON_IP_ALLOWED"/>
        /// </summary>
        public static int ONLY_NON_IP_ALLOWED { get { if (!_ONLY_NON_IP_ALLOWEDReady) { _ONLY_NON_IP_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "ONLY_NON_IP_ALLOWED"); _ONLY_NON_IP_ALLOWEDReady = true; } return _ONLY_NON_IP_ALLOWEDContent; } }
        private static int _ONLY_NON_IP_ALLOWEDContent = default;
        private static bool _ONLY_NON_IP_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#ONLY_SINGLE_BEARER_ALLOWED"/>
        /// </summary>
        public static int ONLY_SINGLE_BEARER_ALLOWED { get { if (!_ONLY_SINGLE_BEARER_ALLOWEDReady) { _ONLY_SINGLE_BEARER_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "ONLY_SINGLE_BEARER_ALLOWED"); _ONLY_SINGLE_BEARER_ALLOWEDReady = true; } return _ONLY_SINGLE_BEARER_ALLOWEDContent; } }
        private static int _ONLY_SINGLE_BEARER_ALLOWEDContent = default;
        private static bool _ONLY_SINGLE_BEARER_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OPERATOR_BARRED"/>
        /// </summary>
        public static int OPERATOR_BARRED { get { if (!_OPERATOR_BARREDReady) { _OPERATOR_BARREDContent = SGetField<int>(LocalBridgeClazz, "OPERATOR_BARRED"); _OPERATOR_BARREDReady = true; } return _OPERATOR_BARREDContent; } }
        private static int _OPERATOR_BARREDContent = default;
        private static bool _OPERATOR_BARREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#OTASP_COMMIT_IN_PROGRESS"/>
        /// </summary>
        public static int OTASP_COMMIT_IN_PROGRESS { get { if (!_OTASP_COMMIT_IN_PROGRESSReady) { _OTASP_COMMIT_IN_PROGRESSContent = SGetField<int>(LocalBridgeClazz, "OTASP_COMMIT_IN_PROGRESS"); _OTASP_COMMIT_IN_PROGRESSReady = true; } return _OTASP_COMMIT_IN_PROGRESSContent; } }
        private static int _OTASP_COMMIT_IN_PROGRESSContent = default;
        private static bool _OTASP_COMMIT_IN_PROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDN_CONN_DOES_NOT_EXIST"/>
        /// </summary>
        public static int PDN_CONN_DOES_NOT_EXIST { get { if (!_PDN_CONN_DOES_NOT_EXISTReady) { _PDN_CONN_DOES_NOT_EXISTContent = SGetField<int>(LocalBridgeClazz, "PDN_CONN_DOES_NOT_EXIST"); _PDN_CONN_DOES_NOT_EXISTReady = true; } return _PDN_CONN_DOES_NOT_EXISTContent; } }
        private static int _PDN_CONN_DOES_NOT_EXISTContent = default;
        private static bool _PDN_CONN_DOES_NOT_EXISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDN_INACTIVITY_TIMER_EXPIRED"/>
        /// </summary>
        public static int PDN_INACTIVITY_TIMER_EXPIRED { get { if (!_PDN_INACTIVITY_TIMER_EXPIREDReady) { _PDN_INACTIVITY_TIMER_EXPIREDContent = SGetField<int>(LocalBridgeClazz, "PDN_INACTIVITY_TIMER_EXPIRED"); _PDN_INACTIVITY_TIMER_EXPIREDReady = true; } return _PDN_INACTIVITY_TIMER_EXPIREDContent; } }
        private static int _PDN_INACTIVITY_TIMER_EXPIREDContent = default;
        private static bool _PDN_INACTIVITY_TIMER_EXPIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDN_IPV4_CALL_DISALLOWED"/>
        /// </summary>
        public static int PDN_IPV4_CALL_DISALLOWED { get { if (!_PDN_IPV4_CALL_DISALLOWEDReady) { _PDN_IPV4_CALL_DISALLOWEDContent = SGetField<int>(LocalBridgeClazz, "PDN_IPV4_CALL_DISALLOWED"); _PDN_IPV4_CALL_DISALLOWEDReady = true; } return _PDN_IPV4_CALL_DISALLOWEDContent; } }
        private static int _PDN_IPV4_CALL_DISALLOWEDContent = default;
        private static bool _PDN_IPV4_CALL_DISALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDN_IPV4_CALL_THROTTLED"/>
        /// </summary>
        public static int PDN_IPV4_CALL_THROTTLED { get { if (!_PDN_IPV4_CALL_THROTTLEDReady) { _PDN_IPV4_CALL_THROTTLEDContent = SGetField<int>(LocalBridgeClazz, "PDN_IPV4_CALL_THROTTLED"); _PDN_IPV4_CALL_THROTTLEDReady = true; } return _PDN_IPV4_CALL_THROTTLEDContent; } }
        private static int _PDN_IPV4_CALL_THROTTLEDContent = default;
        private static bool _PDN_IPV4_CALL_THROTTLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDN_IPV6_CALL_DISALLOWED"/>
        /// </summary>
        public static int PDN_IPV6_CALL_DISALLOWED { get { if (!_PDN_IPV6_CALL_DISALLOWEDReady) { _PDN_IPV6_CALL_DISALLOWEDContent = SGetField<int>(LocalBridgeClazz, "PDN_IPV6_CALL_DISALLOWED"); _PDN_IPV6_CALL_DISALLOWEDReady = true; } return _PDN_IPV6_CALL_DISALLOWEDContent; } }
        private static int _PDN_IPV6_CALL_DISALLOWEDContent = default;
        private static bool _PDN_IPV6_CALL_DISALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDN_IPV6_CALL_THROTTLED"/>
        /// </summary>
        public static int PDN_IPV6_CALL_THROTTLED { get { if (!_PDN_IPV6_CALL_THROTTLEDReady) { _PDN_IPV6_CALL_THROTTLEDContent = SGetField<int>(LocalBridgeClazz, "PDN_IPV6_CALL_THROTTLED"); _PDN_IPV6_CALL_THROTTLEDReady = true; } return _PDN_IPV6_CALL_THROTTLEDContent; } }
        private static int _PDN_IPV6_CALL_THROTTLEDContent = default;
        private static bool _PDN_IPV6_CALL_THROTTLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDN_NON_IP_CALL_DISALLOWED"/>
        /// </summary>
        public static int PDN_NON_IP_CALL_DISALLOWED { get { if (!_PDN_NON_IP_CALL_DISALLOWEDReady) { _PDN_NON_IP_CALL_DISALLOWEDContent = SGetField<int>(LocalBridgeClazz, "PDN_NON_IP_CALL_DISALLOWED"); _PDN_NON_IP_CALL_DISALLOWEDReady = true; } return _PDN_NON_IP_CALL_DISALLOWEDContent; } }
        private static int _PDN_NON_IP_CALL_DISALLOWEDContent = default;
        private static bool _PDN_NON_IP_CALL_DISALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDN_NON_IP_CALL_THROTTLED"/>
        /// </summary>
        public static int PDN_NON_IP_CALL_THROTTLED { get { if (!_PDN_NON_IP_CALL_THROTTLEDReady) { _PDN_NON_IP_CALL_THROTTLEDContent = SGetField<int>(LocalBridgeClazz, "PDN_NON_IP_CALL_THROTTLED"); _PDN_NON_IP_CALL_THROTTLEDReady = true; } return _PDN_NON_IP_CALL_THROTTLEDContent; } }
        private static int _PDN_NON_IP_CALL_THROTTLEDContent = default;
        private static bool _PDN_NON_IP_CALL_THROTTLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDP_ACTIVATE_MAX_RETRY_FAILED"/>
        /// </summary>
        public static int PDP_ACTIVATE_MAX_RETRY_FAILED { get { if (!_PDP_ACTIVATE_MAX_RETRY_FAILEDReady) { _PDP_ACTIVATE_MAX_RETRY_FAILEDContent = SGetField<int>(LocalBridgeClazz, "PDP_ACTIVATE_MAX_RETRY_FAILED"); _PDP_ACTIVATE_MAX_RETRY_FAILEDReady = true; } return _PDP_ACTIVATE_MAX_RETRY_FAILEDContent; } }
        private static int _PDP_ACTIVATE_MAX_RETRY_FAILEDContent = default;
        private static bool _PDP_ACTIVATE_MAX_RETRY_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDP_DUPLICATE"/>
        /// </summary>
        public static int PDP_DUPLICATE { get { if (!_PDP_DUPLICATEReady) { _PDP_DUPLICATEContent = SGetField<int>(LocalBridgeClazz, "PDP_DUPLICATE"); _PDP_DUPLICATEReady = true; } return _PDP_DUPLICATEContent; } }
        private static int _PDP_DUPLICATEContent = default;
        private static bool _PDP_DUPLICATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDP_ESTABLISH_TIMEOUT_EXPIRED"/>
        /// </summary>
        public static int PDP_ESTABLISH_TIMEOUT_EXPIRED { get { if (!_PDP_ESTABLISH_TIMEOUT_EXPIREDReady) { _PDP_ESTABLISH_TIMEOUT_EXPIREDContent = SGetField<int>(LocalBridgeClazz, "PDP_ESTABLISH_TIMEOUT_EXPIRED"); _PDP_ESTABLISH_TIMEOUT_EXPIREDReady = true; } return _PDP_ESTABLISH_TIMEOUT_EXPIREDContent; } }
        private static int _PDP_ESTABLISH_TIMEOUT_EXPIREDContent = default;
        private static bool _PDP_ESTABLISH_TIMEOUT_EXPIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDP_INACTIVE_TIMEOUT_EXPIRED"/>
        /// </summary>
        public static int PDP_INACTIVE_TIMEOUT_EXPIRED { get { if (!_PDP_INACTIVE_TIMEOUT_EXPIREDReady) { _PDP_INACTIVE_TIMEOUT_EXPIREDContent = SGetField<int>(LocalBridgeClazz, "PDP_INACTIVE_TIMEOUT_EXPIRED"); _PDP_INACTIVE_TIMEOUT_EXPIREDReady = true; } return _PDP_INACTIVE_TIMEOUT_EXPIREDContent; } }
        private static int _PDP_INACTIVE_TIMEOUT_EXPIREDContent = default;
        private static bool _PDP_INACTIVE_TIMEOUT_EXPIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDP_LOWERLAYER_ERROR"/>
        /// </summary>
        public static int PDP_LOWERLAYER_ERROR { get { if (!_PDP_LOWERLAYER_ERRORReady) { _PDP_LOWERLAYER_ERRORContent = SGetField<int>(LocalBridgeClazz, "PDP_LOWERLAYER_ERROR"); _PDP_LOWERLAYER_ERRORReady = true; } return _PDP_LOWERLAYER_ERRORContent; } }
        private static int _PDP_LOWERLAYER_ERRORContent = default;
        private static bool _PDP_LOWERLAYER_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDP_MODIFY_COLLISION"/>
        /// </summary>
        public static int PDP_MODIFY_COLLISION { get { if (!_PDP_MODIFY_COLLISIONReady) { _PDP_MODIFY_COLLISIONContent = SGetField<int>(LocalBridgeClazz, "PDP_MODIFY_COLLISION"); _PDP_MODIFY_COLLISIONReady = true; } return _PDP_MODIFY_COLLISIONContent; } }
        private static int _PDP_MODIFY_COLLISIONContent = default;
        private static bool _PDP_MODIFY_COLLISIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDP_MODIFY_TIMEOUT_EXPIRED"/>
        /// </summary>
        public static int PDP_MODIFY_TIMEOUT_EXPIRED { get { if (!_PDP_MODIFY_TIMEOUT_EXPIREDReady) { _PDP_MODIFY_TIMEOUT_EXPIREDContent = SGetField<int>(LocalBridgeClazz, "PDP_MODIFY_TIMEOUT_EXPIRED"); _PDP_MODIFY_TIMEOUT_EXPIREDReady = true; } return _PDP_MODIFY_TIMEOUT_EXPIREDContent; } }
        private static int _PDP_MODIFY_TIMEOUT_EXPIREDContent = default;
        private static bool _PDP_MODIFY_TIMEOUT_EXPIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDP_PPP_NOT_SUPPORTED"/>
        /// </summary>
        public static int PDP_PPP_NOT_SUPPORTED { get { if (!_PDP_PPP_NOT_SUPPORTEDReady) { _PDP_PPP_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "PDP_PPP_NOT_SUPPORTED"); _PDP_PPP_NOT_SUPPORTEDReady = true; } return _PDP_PPP_NOT_SUPPORTEDContent; } }
        private static int _PDP_PPP_NOT_SUPPORTEDContent = default;
        private static bool _PDP_PPP_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PDP_WITHOUT_ACTIVE_TFT"/>
        /// </summary>
        public static int PDP_WITHOUT_ACTIVE_TFT { get { if (!_PDP_WITHOUT_ACTIVE_TFTReady) { _PDP_WITHOUT_ACTIVE_TFTContent = SGetField<int>(LocalBridgeClazz, "PDP_WITHOUT_ACTIVE_TFT"); _PDP_WITHOUT_ACTIVE_TFTReady = true; } return _PDP_WITHOUT_ACTIVE_TFTContent; } }
        private static int _PDP_WITHOUT_ACTIVE_TFTContent = default;
        private static bool _PDP_WITHOUT_ACTIVE_TFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PHONE_IN_USE"/>
        /// </summary>
        public static int PHONE_IN_USE { get { if (!_PHONE_IN_USEReady) { _PHONE_IN_USEContent = SGetField<int>(LocalBridgeClazz, "PHONE_IN_USE"); _PHONE_IN_USEReady = true; } return _PHONE_IN_USEContent; } }
        private static int _PHONE_IN_USEContent = default;
        private static bool _PHONE_IN_USEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PHYSICAL_LINK_CLOSE_IN_PROGRESS"/>
        /// </summary>
        public static int PHYSICAL_LINK_CLOSE_IN_PROGRESS { get { if (!_PHYSICAL_LINK_CLOSE_IN_PROGRESSReady) { _PHYSICAL_LINK_CLOSE_IN_PROGRESSContent = SGetField<int>(LocalBridgeClazz, "PHYSICAL_LINK_CLOSE_IN_PROGRESS"); _PHYSICAL_LINK_CLOSE_IN_PROGRESSReady = true; } return _PHYSICAL_LINK_CLOSE_IN_PROGRESSContent; } }
        private static int _PHYSICAL_LINK_CLOSE_IN_PROGRESSContent = default;
        private static bool _PHYSICAL_LINK_CLOSE_IN_PROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PLMN_NOT_ALLOWED"/>
        /// </summary>
        public static int PLMN_NOT_ALLOWED { get { if (!_PLMN_NOT_ALLOWEDReady) { _PLMN_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "PLMN_NOT_ALLOWED"); _PLMN_NOT_ALLOWEDReady = true; } return _PLMN_NOT_ALLOWEDContent; } }
        private static int _PLMN_NOT_ALLOWEDContent = default;
        private static bool _PLMN_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PPP_AUTH_FAILURE"/>
        /// </summary>
        public static int PPP_AUTH_FAILURE { get { if (!_PPP_AUTH_FAILUREReady) { _PPP_AUTH_FAILUREContent = SGetField<int>(LocalBridgeClazz, "PPP_AUTH_FAILURE"); _PPP_AUTH_FAILUREReady = true; } return _PPP_AUTH_FAILUREContent; } }
        private static int _PPP_AUTH_FAILUREContent = default;
        private static bool _PPP_AUTH_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PPP_CHAP_FAILURE"/>
        /// </summary>
        public static int PPP_CHAP_FAILURE { get { if (!_PPP_CHAP_FAILUREReady) { _PPP_CHAP_FAILUREContent = SGetField<int>(LocalBridgeClazz, "PPP_CHAP_FAILURE"); _PPP_CHAP_FAILUREReady = true; } return _PPP_CHAP_FAILUREContent; } }
        private static int _PPP_CHAP_FAILUREContent = default;
        private static bool _PPP_CHAP_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PPP_CLOSE_IN_PROGRESS"/>
        /// </summary>
        public static int PPP_CLOSE_IN_PROGRESS { get { if (!_PPP_CLOSE_IN_PROGRESSReady) { _PPP_CLOSE_IN_PROGRESSContent = SGetField<int>(LocalBridgeClazz, "PPP_CLOSE_IN_PROGRESS"); _PPP_CLOSE_IN_PROGRESSReady = true; } return _PPP_CLOSE_IN_PROGRESSContent; } }
        private static int _PPP_CLOSE_IN_PROGRESSContent = default;
        private static bool _PPP_CLOSE_IN_PROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PPP_OPTION_MISMATCH"/>
        /// </summary>
        public static int PPP_OPTION_MISMATCH { get { if (!_PPP_OPTION_MISMATCHReady) { _PPP_OPTION_MISMATCHContent = SGetField<int>(LocalBridgeClazz, "PPP_OPTION_MISMATCH"); _PPP_OPTION_MISMATCHReady = true; } return _PPP_OPTION_MISMATCHContent; } }
        private static int _PPP_OPTION_MISMATCHContent = default;
        private static bool _PPP_OPTION_MISMATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PPP_PAP_FAILURE"/>
        /// </summary>
        public static int PPP_PAP_FAILURE { get { if (!_PPP_PAP_FAILUREReady) { _PPP_PAP_FAILUREContent = SGetField<int>(LocalBridgeClazz, "PPP_PAP_FAILURE"); _PPP_PAP_FAILUREReady = true; } return _PPP_PAP_FAILUREContent; } }
        private static int _PPP_PAP_FAILUREContent = default;
        private static bool _PPP_PAP_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PPP_TIMEOUT"/>
        /// </summary>
        public static int PPP_TIMEOUT { get { if (!_PPP_TIMEOUTReady) { _PPP_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "PPP_TIMEOUT"); _PPP_TIMEOUTReady = true; } return _PPP_TIMEOUTContent; } }
        private static int _PPP_TIMEOUTContent = default;
        private static bool _PPP_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PREF_RADIO_TECH_CHANGED"/>
        /// </summary>
        public static int PREF_RADIO_TECH_CHANGED { get { if (!_PREF_RADIO_TECH_CHANGEDReady) { _PREF_RADIO_TECH_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "PREF_RADIO_TECH_CHANGED"); _PREF_RADIO_TECH_CHANGEDReady = true; } return _PREF_RADIO_TECH_CHANGEDContent; } }
        private static int _PREF_RADIO_TECH_CHANGEDContent = default;
        private static bool _PREF_RADIO_TECH_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PROFILE_BEARER_INCOMPATIBLE"/>
        /// </summary>
        public static int PROFILE_BEARER_INCOMPATIBLE { get { if (!_PROFILE_BEARER_INCOMPATIBLEReady) { _PROFILE_BEARER_INCOMPATIBLEContent = SGetField<int>(LocalBridgeClazz, "PROFILE_BEARER_INCOMPATIBLE"); _PROFILE_BEARER_INCOMPATIBLEReady = true; } return _PROFILE_BEARER_INCOMPATIBLEContent; } }
        private static int _PROFILE_BEARER_INCOMPATIBLEContent = default;
        private static bool _PROFILE_BEARER_INCOMPATIBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#PROTOCOL_ERRORS"/>
        /// </summary>
        public static int PROTOCOL_ERRORS { get { if (!_PROTOCOL_ERRORSReady) { _PROTOCOL_ERRORSContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_ERRORS"); _PROTOCOL_ERRORSReady = true; } return _PROTOCOL_ERRORSContent; } }
        private static int _PROTOCOL_ERRORSContent = default;
        private static bool _PROTOCOL_ERRORSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#QOS_NOT_ACCEPTED"/>
        /// </summary>
        public static int QOS_NOT_ACCEPTED { get { if (!_QOS_NOT_ACCEPTEDReady) { _QOS_NOT_ACCEPTEDContent = SGetField<int>(LocalBridgeClazz, "QOS_NOT_ACCEPTED"); _QOS_NOT_ACCEPTEDReady = true; } return _QOS_NOT_ACCEPTEDContent; } }
        private static int _QOS_NOT_ACCEPTEDContent = default;
        private static bool _QOS_NOT_ACCEPTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RADIO_ACCESS_BEARER_FAILURE"/>
        /// </summary>
        public static int RADIO_ACCESS_BEARER_FAILURE { get { if (!_RADIO_ACCESS_BEARER_FAILUREReady) { _RADIO_ACCESS_BEARER_FAILUREContent = SGetField<int>(LocalBridgeClazz, "RADIO_ACCESS_BEARER_FAILURE"); _RADIO_ACCESS_BEARER_FAILUREReady = true; } return _RADIO_ACCESS_BEARER_FAILUREContent; } }
        private static int _RADIO_ACCESS_BEARER_FAILUREContent = default;
        private static bool _RADIO_ACCESS_BEARER_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RADIO_ACCESS_BEARER_SETUP_FAILURE"/>
        /// </summary>
        public static int RADIO_ACCESS_BEARER_SETUP_FAILURE { get { if (!_RADIO_ACCESS_BEARER_SETUP_FAILUREReady) { _RADIO_ACCESS_BEARER_SETUP_FAILUREContent = SGetField<int>(LocalBridgeClazz, "RADIO_ACCESS_BEARER_SETUP_FAILURE"); _RADIO_ACCESS_BEARER_SETUP_FAILUREReady = true; } return _RADIO_ACCESS_BEARER_SETUP_FAILUREContent; } }
        private static int _RADIO_ACCESS_BEARER_SETUP_FAILUREContent = default;
        private static bool _RADIO_ACCESS_BEARER_SETUP_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RADIO_NOT_AVAILABLE"/>
        /// </summary>
        public static int RADIO_NOT_AVAILABLE { get { if (!_RADIO_NOT_AVAILABLEReady) { _RADIO_NOT_AVAILABLEContent = SGetField<int>(LocalBridgeClazz, "RADIO_NOT_AVAILABLE"); _RADIO_NOT_AVAILABLEReady = true; } return _RADIO_NOT_AVAILABLEContent; } }
        private static int _RADIO_NOT_AVAILABLEContent = default;
        private static bool _RADIO_NOT_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RADIO_POWER_OFF"/>
        /// </summary>
        public static int RADIO_POWER_OFF { get { if (!_RADIO_POWER_OFFReady) { _RADIO_POWER_OFFContent = SGetField<int>(LocalBridgeClazz, "RADIO_POWER_OFF"); _RADIO_POWER_OFFReady = true; } return _RADIO_POWER_OFFContent; } }
        private static int _RADIO_POWER_OFFContent = default;
        private static bool _RADIO_POWER_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#REDIRECTION_OR_HANDOFF_IN_PROGRESS"/>
        /// </summary>
        public static int REDIRECTION_OR_HANDOFF_IN_PROGRESS { get { if (!_REDIRECTION_OR_HANDOFF_IN_PROGRESSReady) { _REDIRECTION_OR_HANDOFF_IN_PROGRESSContent = SGetField<int>(LocalBridgeClazz, "REDIRECTION_OR_HANDOFF_IN_PROGRESS"); _REDIRECTION_OR_HANDOFF_IN_PROGRESSReady = true; } return _REDIRECTION_OR_HANDOFF_IN_PROGRESSContent; } }
        private static int _REDIRECTION_OR_HANDOFF_IN_PROGRESSContent = default;
        private static bool _REDIRECTION_OR_HANDOFF_IN_PROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#REGISTRATION_FAIL"/>
        /// </summary>
        public static int REGISTRATION_FAIL { get { if (!_REGISTRATION_FAILReady) { _REGISTRATION_FAILContent = SGetField<int>(LocalBridgeClazz, "REGISTRATION_FAIL"); _REGISTRATION_FAILReady = true; } return _REGISTRATION_FAILContent; } }
        private static int _REGISTRATION_FAILContent = default;
        private static bool _REGISTRATION_FAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#REGULAR_DEACTIVATION"/>
        /// </summary>
        public static int REGULAR_DEACTIVATION { get { if (!_REGULAR_DEACTIVATIONReady) { _REGULAR_DEACTIVATIONContent = SGetField<int>(LocalBridgeClazz, "REGULAR_DEACTIVATION"); _REGULAR_DEACTIVATIONReady = true; } return _REGULAR_DEACTIVATIONContent; } }
        private static int _REGULAR_DEACTIVATIONContent = default;
        private static bool _REGULAR_DEACTIVATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#REJECTED_BY_BASE_STATION"/>
        /// </summary>
        public static int REJECTED_BY_BASE_STATION { get { if (!_REJECTED_BY_BASE_STATIONReady) { _REJECTED_BY_BASE_STATIONContent = SGetField<int>(LocalBridgeClazz, "REJECTED_BY_BASE_STATION"); _REJECTED_BY_BASE_STATIONReady = true; } return _REJECTED_BY_BASE_STATIONContent; } }
        private static int _REJECTED_BY_BASE_STATIONContent = default;
        private static bool _REJECTED_BY_BASE_STATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_ABORT_REQUEST"/>
        /// </summary>
        public static int RRC_CONNECTION_ABORT_REQUEST { get { if (!_RRC_CONNECTION_ABORT_REQUESTReady) { _RRC_CONNECTION_ABORT_REQUESTContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_ABORT_REQUEST"); _RRC_CONNECTION_ABORT_REQUESTReady = true; } return _RRC_CONNECTION_ABORT_REQUESTContent; } }
        private static int _RRC_CONNECTION_ABORT_REQUESTContent = default;
        private static bool _RRC_CONNECTION_ABORT_REQUESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_ABORTED_AFTER_HANDOVER"/>
        /// </summary>
        public static int RRC_CONNECTION_ABORTED_AFTER_HANDOVER { get { if (!_RRC_CONNECTION_ABORTED_AFTER_HANDOVERReady) { _RRC_CONNECTION_ABORTED_AFTER_HANDOVERContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_ABORTED_AFTER_HANDOVER"); _RRC_CONNECTION_ABORTED_AFTER_HANDOVERReady = true; } return _RRC_CONNECTION_ABORTED_AFTER_HANDOVERContent; } }
        private static int _RRC_CONNECTION_ABORTED_AFTER_HANDOVERContent = default;
        private static bool _RRC_CONNECTION_ABORTED_AFTER_HANDOVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_ABORTED_AFTER_IRAT_CELL_CHANGE"/>
        /// </summary>
        public static int RRC_CONNECTION_ABORTED_AFTER_IRAT_CELL_CHANGE { get { if (!_RRC_CONNECTION_ABORTED_AFTER_IRAT_CELL_CHANGEReady) { _RRC_CONNECTION_ABORTED_AFTER_IRAT_CELL_CHANGEContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_ABORTED_AFTER_IRAT_CELL_CHANGE"); _RRC_CONNECTION_ABORTED_AFTER_IRAT_CELL_CHANGEReady = true; } return _RRC_CONNECTION_ABORTED_AFTER_IRAT_CELL_CHANGEContent; } }
        private static int _RRC_CONNECTION_ABORTED_AFTER_IRAT_CELL_CHANGEContent = default;
        private static bool _RRC_CONNECTION_ABORTED_AFTER_IRAT_CELL_CHANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_ABORTED_DUE_TO_IRAT_CHANGE"/>
        /// </summary>
        public static int RRC_CONNECTION_ABORTED_DUE_TO_IRAT_CHANGE { get { if (!_RRC_CONNECTION_ABORTED_DUE_TO_IRAT_CHANGEReady) { _RRC_CONNECTION_ABORTED_DUE_TO_IRAT_CHANGEContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_ABORTED_DUE_TO_IRAT_CHANGE"); _RRC_CONNECTION_ABORTED_DUE_TO_IRAT_CHANGEReady = true; } return _RRC_CONNECTION_ABORTED_DUE_TO_IRAT_CHANGEContent; } }
        private static int _RRC_CONNECTION_ABORTED_DUE_TO_IRAT_CHANGEContent = default;
        private static bool _RRC_CONNECTION_ABORTED_DUE_TO_IRAT_CHANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_ABORTED_DURING_IRAT_CELL_CHANGE"/>
        /// </summary>
        public static int RRC_CONNECTION_ABORTED_DURING_IRAT_CELL_CHANGE { get { if (!_RRC_CONNECTION_ABORTED_DURING_IRAT_CELL_CHANGEReady) { _RRC_CONNECTION_ABORTED_DURING_IRAT_CELL_CHANGEContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_ABORTED_DURING_IRAT_CELL_CHANGE"); _RRC_CONNECTION_ABORTED_DURING_IRAT_CELL_CHANGEReady = true; } return _RRC_CONNECTION_ABORTED_DURING_IRAT_CELL_CHANGEContent; } }
        private static int _RRC_CONNECTION_ABORTED_DURING_IRAT_CELL_CHANGEContent = default;
        private static bool _RRC_CONNECTION_ABORTED_DURING_IRAT_CELL_CHANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_ACCESS_BARRED"/>
        /// </summary>
        public static int RRC_CONNECTION_ACCESS_BARRED { get { if (!_RRC_CONNECTION_ACCESS_BARREDReady) { _RRC_CONNECTION_ACCESS_BARREDContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_ACCESS_BARRED"); _RRC_CONNECTION_ACCESS_BARREDReady = true; } return _RRC_CONNECTION_ACCESS_BARREDContent; } }
        private static int _RRC_CONNECTION_ACCESS_BARREDContent = default;
        private static bool _RRC_CONNECTION_ACCESS_BARREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_ACCESS_STRATUM_FAILURE"/>
        /// </summary>
        public static int RRC_CONNECTION_ACCESS_STRATUM_FAILURE { get { if (!_RRC_CONNECTION_ACCESS_STRATUM_FAILUREReady) { _RRC_CONNECTION_ACCESS_STRATUM_FAILUREContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_ACCESS_STRATUM_FAILURE"); _RRC_CONNECTION_ACCESS_STRATUM_FAILUREReady = true; } return _RRC_CONNECTION_ACCESS_STRATUM_FAILUREContent; } }
        private static int _RRC_CONNECTION_ACCESS_STRATUM_FAILUREContent = default;
        private static bool _RRC_CONNECTION_ACCESS_STRATUM_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_ANOTHER_PROCEDURE_IN_PROGRESS"/>
        /// </summary>
        public static int RRC_CONNECTION_ANOTHER_PROCEDURE_IN_PROGRESS { get { if (!_RRC_CONNECTION_ANOTHER_PROCEDURE_IN_PROGRESSReady) { _RRC_CONNECTION_ANOTHER_PROCEDURE_IN_PROGRESSContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_ANOTHER_PROCEDURE_IN_PROGRESS"); _RRC_CONNECTION_ANOTHER_PROCEDURE_IN_PROGRESSReady = true; } return _RRC_CONNECTION_ANOTHER_PROCEDURE_IN_PROGRESSContent; } }
        private static int _RRC_CONNECTION_ANOTHER_PROCEDURE_IN_PROGRESSContent = default;
        private static bool _RRC_CONNECTION_ANOTHER_PROCEDURE_IN_PROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_CELL_NOT_CAMPED"/>
        /// </summary>
        public static int RRC_CONNECTION_CELL_NOT_CAMPED { get { if (!_RRC_CONNECTION_CELL_NOT_CAMPEDReady) { _RRC_CONNECTION_CELL_NOT_CAMPEDContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_CELL_NOT_CAMPED"); _RRC_CONNECTION_CELL_NOT_CAMPEDReady = true; } return _RRC_CONNECTION_CELL_NOT_CAMPEDContent; } }
        private static int _RRC_CONNECTION_CELL_NOT_CAMPEDContent = default;
        private static bool _RRC_CONNECTION_CELL_NOT_CAMPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_CELL_RESELECTION"/>
        /// </summary>
        public static int RRC_CONNECTION_CELL_RESELECTION { get { if (!_RRC_CONNECTION_CELL_RESELECTIONReady) { _RRC_CONNECTION_CELL_RESELECTIONContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_CELL_RESELECTION"); _RRC_CONNECTION_CELL_RESELECTIONReady = true; } return _RRC_CONNECTION_CELL_RESELECTIONContent; } }
        private static int _RRC_CONNECTION_CELL_RESELECTIONContent = default;
        private static bool _RRC_CONNECTION_CELL_RESELECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_CONFIG_FAILURE"/>
        /// </summary>
        public static int RRC_CONNECTION_CONFIG_FAILURE { get { if (!_RRC_CONNECTION_CONFIG_FAILUREReady) { _RRC_CONNECTION_CONFIG_FAILUREContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_CONFIG_FAILURE"); _RRC_CONNECTION_CONFIG_FAILUREReady = true; } return _RRC_CONNECTION_CONFIG_FAILUREContent; } }
        private static int _RRC_CONNECTION_CONFIG_FAILUREContent = default;
        private static bool _RRC_CONNECTION_CONFIG_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_INVALID_REQUEST"/>
        /// </summary>
        public static int RRC_CONNECTION_INVALID_REQUEST { get { if (!_RRC_CONNECTION_INVALID_REQUESTReady) { _RRC_CONNECTION_INVALID_REQUESTContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_INVALID_REQUEST"); _RRC_CONNECTION_INVALID_REQUESTReady = true; } return _RRC_CONNECTION_INVALID_REQUESTContent; } }
        private static int _RRC_CONNECTION_INVALID_REQUESTContent = default;
        private static bool _RRC_CONNECTION_INVALID_REQUESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_LINK_FAILURE"/>
        /// </summary>
        public static int RRC_CONNECTION_LINK_FAILURE { get { if (!_RRC_CONNECTION_LINK_FAILUREReady) { _RRC_CONNECTION_LINK_FAILUREContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_LINK_FAILURE"); _RRC_CONNECTION_LINK_FAILUREReady = true; } return _RRC_CONNECTION_LINK_FAILUREContent; } }
        private static int _RRC_CONNECTION_LINK_FAILUREContent = default;
        private static bool _RRC_CONNECTION_LINK_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_NORMAL_RELEASE"/>
        /// </summary>
        public static int RRC_CONNECTION_NORMAL_RELEASE { get { if (!_RRC_CONNECTION_NORMAL_RELEASEReady) { _RRC_CONNECTION_NORMAL_RELEASEContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_NORMAL_RELEASE"); _RRC_CONNECTION_NORMAL_RELEASEReady = true; } return _RRC_CONNECTION_NORMAL_RELEASEContent; } }
        private static int _RRC_CONNECTION_NORMAL_RELEASEContent = default;
        private static bool _RRC_CONNECTION_NORMAL_RELEASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_OUT_OF_SERVICE_DURING_CELL_REGISTER"/>
        /// </summary>
        public static int RRC_CONNECTION_OUT_OF_SERVICE_DURING_CELL_REGISTER { get { if (!_RRC_CONNECTION_OUT_OF_SERVICE_DURING_CELL_REGISTERReady) { _RRC_CONNECTION_OUT_OF_SERVICE_DURING_CELL_REGISTERContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_OUT_OF_SERVICE_DURING_CELL_REGISTER"); _RRC_CONNECTION_OUT_OF_SERVICE_DURING_CELL_REGISTERReady = true; } return _RRC_CONNECTION_OUT_OF_SERVICE_DURING_CELL_REGISTERContent; } }
        private static int _RRC_CONNECTION_OUT_OF_SERVICE_DURING_CELL_REGISTERContent = default;
        private static bool _RRC_CONNECTION_OUT_OF_SERVICE_DURING_CELL_REGISTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_RADIO_LINK_FAILURE"/>
        /// </summary>
        public static int RRC_CONNECTION_RADIO_LINK_FAILURE { get { if (!_RRC_CONNECTION_RADIO_LINK_FAILUREReady) { _RRC_CONNECTION_RADIO_LINK_FAILUREContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_RADIO_LINK_FAILURE"); _RRC_CONNECTION_RADIO_LINK_FAILUREReady = true; } return _RRC_CONNECTION_RADIO_LINK_FAILUREContent; } }
        private static int _RRC_CONNECTION_RADIO_LINK_FAILUREContent = default;
        private static bool _RRC_CONNECTION_RADIO_LINK_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_REESTABLISHMENT_FAILURE"/>
        /// </summary>
        public static int RRC_CONNECTION_REESTABLISHMENT_FAILURE { get { if (!_RRC_CONNECTION_REESTABLISHMENT_FAILUREReady) { _RRC_CONNECTION_REESTABLISHMENT_FAILUREContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_REESTABLISHMENT_FAILURE"); _RRC_CONNECTION_REESTABLISHMENT_FAILUREReady = true; } return _RRC_CONNECTION_REESTABLISHMENT_FAILUREContent; } }
        private static int _RRC_CONNECTION_REESTABLISHMENT_FAILUREContent = default;
        private static bool _RRC_CONNECTION_REESTABLISHMENT_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_REJECT_BY_NETWORK"/>
        /// </summary>
        public static int RRC_CONNECTION_REJECT_BY_NETWORK { get { if (!_RRC_CONNECTION_REJECT_BY_NETWORKReady) { _RRC_CONNECTION_REJECT_BY_NETWORKContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_REJECT_BY_NETWORK"); _RRC_CONNECTION_REJECT_BY_NETWORKReady = true; } return _RRC_CONNECTION_REJECT_BY_NETWORKContent; } }
        private static int _RRC_CONNECTION_REJECT_BY_NETWORKContent = default;
        private static bool _RRC_CONNECTION_REJECT_BY_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_RELEASED_SECURITY_NOT_ACTIVE"/>
        /// </summary>
        public static int RRC_CONNECTION_RELEASED_SECURITY_NOT_ACTIVE { get { if (!_RRC_CONNECTION_RELEASED_SECURITY_NOT_ACTIVEReady) { _RRC_CONNECTION_RELEASED_SECURITY_NOT_ACTIVEContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_RELEASED_SECURITY_NOT_ACTIVE"); _RRC_CONNECTION_RELEASED_SECURITY_NOT_ACTIVEReady = true; } return _RRC_CONNECTION_RELEASED_SECURITY_NOT_ACTIVEContent; } }
        private static int _RRC_CONNECTION_RELEASED_SECURITY_NOT_ACTIVEContent = default;
        private static bool _RRC_CONNECTION_RELEASED_SECURITY_NOT_ACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_RF_UNAVAILABLE"/>
        /// </summary>
        public static int RRC_CONNECTION_RF_UNAVAILABLE { get { if (!_RRC_CONNECTION_RF_UNAVAILABLEReady) { _RRC_CONNECTION_RF_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_RF_UNAVAILABLE"); _RRC_CONNECTION_RF_UNAVAILABLEReady = true; } return _RRC_CONNECTION_RF_UNAVAILABLEContent; } }
        private static int _RRC_CONNECTION_RF_UNAVAILABLEContent = default;
        private static bool _RRC_CONNECTION_RF_UNAVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_SYSTEM_INFORMATION_BLOCK_READ_ERROR"/>
        /// </summary>
        public static int RRC_CONNECTION_SYSTEM_INFORMATION_BLOCK_READ_ERROR { get { if (!_RRC_CONNECTION_SYSTEM_INFORMATION_BLOCK_READ_ERRORReady) { _RRC_CONNECTION_SYSTEM_INFORMATION_BLOCK_READ_ERRORContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_SYSTEM_INFORMATION_BLOCK_READ_ERROR"); _RRC_CONNECTION_SYSTEM_INFORMATION_BLOCK_READ_ERRORReady = true; } return _RRC_CONNECTION_SYSTEM_INFORMATION_BLOCK_READ_ERRORContent; } }
        private static int _RRC_CONNECTION_SYSTEM_INFORMATION_BLOCK_READ_ERRORContent = default;
        private static bool _RRC_CONNECTION_SYSTEM_INFORMATION_BLOCK_READ_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_SYSTEM_INTERVAL_FAILURE"/>
        /// </summary>
        public static int RRC_CONNECTION_SYSTEM_INTERVAL_FAILURE { get { if (!_RRC_CONNECTION_SYSTEM_INTERVAL_FAILUREReady) { _RRC_CONNECTION_SYSTEM_INTERVAL_FAILUREContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_SYSTEM_INTERVAL_FAILURE"); _RRC_CONNECTION_SYSTEM_INTERVAL_FAILUREReady = true; } return _RRC_CONNECTION_SYSTEM_INTERVAL_FAILUREContent; } }
        private static int _RRC_CONNECTION_SYSTEM_INTERVAL_FAILUREContent = default;
        private static bool _RRC_CONNECTION_SYSTEM_INTERVAL_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_TIMER_EXPIRED"/>
        /// </summary>
        public static int RRC_CONNECTION_TIMER_EXPIRED { get { if (!_RRC_CONNECTION_TIMER_EXPIREDReady) { _RRC_CONNECTION_TIMER_EXPIREDContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_TIMER_EXPIRED"); _RRC_CONNECTION_TIMER_EXPIREDReady = true; } return _RRC_CONNECTION_TIMER_EXPIREDContent; } }
        private static int _RRC_CONNECTION_TIMER_EXPIREDContent = default;
        private static bool _RRC_CONNECTION_TIMER_EXPIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_CONNECTION_TRACKING_AREA_ID_CHANGED"/>
        /// </summary>
        public static int RRC_CONNECTION_TRACKING_AREA_ID_CHANGED { get { if (!_RRC_CONNECTION_TRACKING_AREA_ID_CHANGEDReady) { _RRC_CONNECTION_TRACKING_AREA_ID_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "RRC_CONNECTION_TRACKING_AREA_ID_CHANGED"); _RRC_CONNECTION_TRACKING_AREA_ID_CHANGEDReady = true; } return _RRC_CONNECTION_TRACKING_AREA_ID_CHANGEDContent; } }
        private static int _RRC_CONNECTION_TRACKING_AREA_ID_CHANGEDContent = default;
        private static bool _RRC_CONNECTION_TRACKING_AREA_ID_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_UPLINK_CONNECTION_RELEASE"/>
        /// </summary>
        public static int RRC_UPLINK_CONNECTION_RELEASE { get { if (!_RRC_UPLINK_CONNECTION_RELEASEReady) { _RRC_UPLINK_CONNECTION_RELEASEContent = SGetField<int>(LocalBridgeClazz, "RRC_UPLINK_CONNECTION_RELEASE"); _RRC_UPLINK_CONNECTION_RELEASEReady = true; } return _RRC_UPLINK_CONNECTION_RELEASEContent; } }
        private static int _RRC_UPLINK_CONNECTION_RELEASEContent = default;
        private static bool _RRC_UPLINK_CONNECTION_RELEASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_UPLINK_DATA_TRANSMISSION_FAILURE"/>
        /// </summary>
        public static int RRC_UPLINK_DATA_TRANSMISSION_FAILURE { get { if (!_RRC_UPLINK_DATA_TRANSMISSION_FAILUREReady) { _RRC_UPLINK_DATA_TRANSMISSION_FAILUREContent = SGetField<int>(LocalBridgeClazz, "RRC_UPLINK_DATA_TRANSMISSION_FAILURE"); _RRC_UPLINK_DATA_TRANSMISSION_FAILUREReady = true; } return _RRC_UPLINK_DATA_TRANSMISSION_FAILUREContent; } }
        private static int _RRC_UPLINK_DATA_TRANSMISSION_FAILUREContent = default;
        private static bool _RRC_UPLINK_DATA_TRANSMISSION_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_UPLINK_DELIVERY_FAILED_DUE_TO_HANDOVER"/>
        /// </summary>
        public static int RRC_UPLINK_DELIVERY_FAILED_DUE_TO_HANDOVER { get { if (!_RRC_UPLINK_DELIVERY_FAILED_DUE_TO_HANDOVERReady) { _RRC_UPLINK_DELIVERY_FAILED_DUE_TO_HANDOVERContent = SGetField<int>(LocalBridgeClazz, "RRC_UPLINK_DELIVERY_FAILED_DUE_TO_HANDOVER"); _RRC_UPLINK_DELIVERY_FAILED_DUE_TO_HANDOVERReady = true; } return _RRC_UPLINK_DELIVERY_FAILED_DUE_TO_HANDOVERContent; } }
        private static int _RRC_UPLINK_DELIVERY_FAILED_DUE_TO_HANDOVERContent = default;
        private static bool _RRC_UPLINK_DELIVERY_FAILED_DUE_TO_HANDOVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_UPLINK_ERROR_REQUEST_FROM_NAS"/>
        /// </summary>
        public static int RRC_UPLINK_ERROR_REQUEST_FROM_NAS { get { if (!_RRC_UPLINK_ERROR_REQUEST_FROM_NASReady) { _RRC_UPLINK_ERROR_REQUEST_FROM_NASContent = SGetField<int>(LocalBridgeClazz, "RRC_UPLINK_ERROR_REQUEST_FROM_NAS"); _RRC_UPLINK_ERROR_REQUEST_FROM_NASReady = true; } return _RRC_UPLINK_ERROR_REQUEST_FROM_NASContent; } }
        private static int _RRC_UPLINK_ERROR_REQUEST_FROM_NASContent = default;
        private static bool _RRC_UPLINK_ERROR_REQUEST_FROM_NASReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RRC_UPLINK_RADIO_LINK_FAILURE"/>
        /// </summary>
        public static int RRC_UPLINK_RADIO_LINK_FAILURE { get { if (!_RRC_UPLINK_RADIO_LINK_FAILUREReady) { _RRC_UPLINK_RADIO_LINK_FAILUREContent = SGetField<int>(LocalBridgeClazz, "RRC_UPLINK_RADIO_LINK_FAILURE"); _RRC_UPLINK_RADIO_LINK_FAILUREReady = true; } return _RRC_UPLINK_RADIO_LINK_FAILUREContent; } }
        private static int _RRC_UPLINK_RADIO_LINK_FAILUREContent = default;
        private static bool _RRC_UPLINK_RADIO_LINK_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#RUIM_NOT_PRESENT"/>
        /// </summary>
        public static int RUIM_NOT_PRESENT { get { if (!_RUIM_NOT_PRESENTReady) { _RUIM_NOT_PRESENTContent = SGetField<int>(LocalBridgeClazz, "RUIM_NOT_PRESENT"); _RUIM_NOT_PRESENTReady = true; } return _RUIM_NOT_PRESENTContent; } }
        private static int _RUIM_NOT_PRESENTContent = default;
        private static bool _RUIM_NOT_PRESENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#SECURITY_MODE_REJECTED"/>
        /// </summary>
        public static int SECURITY_MODE_REJECTED { get { if (!_SECURITY_MODE_REJECTEDReady) { _SECURITY_MODE_REJECTEDContent = SGetField<int>(LocalBridgeClazz, "SECURITY_MODE_REJECTED"); _SECURITY_MODE_REJECTEDReady = true; } return _SECURITY_MODE_REJECTEDContent; } }
        private static int _SECURITY_MODE_REJECTEDContent = default;
        private static bool _SECURITY_MODE_REJECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#SERVICE_NOT_ALLOWED_ON_PLMN"/>
        /// </summary>
        public static int SERVICE_NOT_ALLOWED_ON_PLMN { get { if (!_SERVICE_NOT_ALLOWED_ON_PLMNReady) { _SERVICE_NOT_ALLOWED_ON_PLMNContent = SGetField<int>(LocalBridgeClazz, "SERVICE_NOT_ALLOWED_ON_PLMN"); _SERVICE_NOT_ALLOWED_ON_PLMNReady = true; } return _SERVICE_NOT_ALLOWED_ON_PLMNContent; } }
        private static int _SERVICE_NOT_ALLOWED_ON_PLMNContent = default;
        private static bool _SERVICE_NOT_ALLOWED_ON_PLMNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#SERVICE_OPTION_NOT_SUBSCRIBED"/>
        /// </summary>
        public static int SERVICE_OPTION_NOT_SUBSCRIBED { get { if (!_SERVICE_OPTION_NOT_SUBSCRIBEDReady) { _SERVICE_OPTION_NOT_SUBSCRIBEDContent = SGetField<int>(LocalBridgeClazz, "SERVICE_OPTION_NOT_SUBSCRIBED"); _SERVICE_OPTION_NOT_SUBSCRIBEDReady = true; } return _SERVICE_OPTION_NOT_SUBSCRIBEDContent; } }
        private static int _SERVICE_OPTION_NOT_SUBSCRIBEDContent = default;
        private static bool _SERVICE_OPTION_NOT_SUBSCRIBEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#SERVICE_OPTION_NOT_SUPPORTED"/>
        /// </summary>
        public static int SERVICE_OPTION_NOT_SUPPORTED { get { if (!_SERVICE_OPTION_NOT_SUPPORTEDReady) { _SERVICE_OPTION_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "SERVICE_OPTION_NOT_SUPPORTED"); _SERVICE_OPTION_NOT_SUPPORTEDReady = true; } return _SERVICE_OPTION_NOT_SUPPORTEDContent; } }
        private static int _SERVICE_OPTION_NOT_SUPPORTEDContent = default;
        private static bool _SERVICE_OPTION_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#SERVICE_OPTION_OUT_OF_ORDER"/>
        /// </summary>
        public static int SERVICE_OPTION_OUT_OF_ORDER { get { if (!_SERVICE_OPTION_OUT_OF_ORDERReady) { _SERVICE_OPTION_OUT_OF_ORDERContent = SGetField<int>(LocalBridgeClazz, "SERVICE_OPTION_OUT_OF_ORDER"); _SERVICE_OPTION_OUT_OF_ORDERReady = true; } return _SERVICE_OPTION_OUT_OF_ORDERContent; } }
        private static int _SERVICE_OPTION_OUT_OF_ORDERContent = default;
        private static bool _SERVICE_OPTION_OUT_OF_ORDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#SIGNAL_LOST"/>
        /// </summary>
        public static int SIGNAL_LOST { get { if (!_SIGNAL_LOSTReady) { _SIGNAL_LOSTContent = SGetField<int>(LocalBridgeClazz, "SIGNAL_LOST"); _SIGNAL_LOSTReady = true; } return _SIGNAL_LOSTContent; } }
        private static int _SIGNAL_LOSTContent = default;
        private static bool _SIGNAL_LOSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#SIM_CARD_CHANGED"/>
        /// </summary>
        public static int SIM_CARD_CHANGED { get { if (!_SIM_CARD_CHANGEDReady) { _SIM_CARD_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "SIM_CARD_CHANGED"); _SIM_CARD_CHANGEDReady = true; } return _SIM_CARD_CHANGEDContent; } }
        private static int _SIM_CARD_CHANGEDContent = default;
        private static bool _SIM_CARD_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#SLICE_REJECTED"/>
        /// </summary>
        public static int SLICE_REJECTED { get { if (!_SLICE_REJECTEDReady) { _SLICE_REJECTEDContent = SGetField<int>(LocalBridgeClazz, "SLICE_REJECTED"); _SLICE_REJECTEDReady = true; } return _SLICE_REJECTEDContent; } }
        private static int _SLICE_REJECTEDContent = default;
        private static bool _SLICE_REJECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#SYNCHRONIZATION_FAILURE"/>
        /// </summary>
        public static int SYNCHRONIZATION_FAILURE { get { if (!_SYNCHRONIZATION_FAILUREReady) { _SYNCHRONIZATION_FAILUREContent = SGetField<int>(LocalBridgeClazz, "SYNCHRONIZATION_FAILURE"); _SYNCHRONIZATION_FAILUREReady = true; } return _SYNCHRONIZATION_FAILUREContent; } }
        private static int _SYNCHRONIZATION_FAILUREContent = default;
        private static bool _SYNCHRONIZATION_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#TEST_LOOPBACK_REGULAR_DEACTIVATION"/>
        /// </summary>
        public static int TEST_LOOPBACK_REGULAR_DEACTIVATION { get { if (!_TEST_LOOPBACK_REGULAR_DEACTIVATIONReady) { _TEST_LOOPBACK_REGULAR_DEACTIVATIONContent = SGetField<int>(LocalBridgeClazz, "TEST_LOOPBACK_REGULAR_DEACTIVATION"); _TEST_LOOPBACK_REGULAR_DEACTIVATIONReady = true; } return _TEST_LOOPBACK_REGULAR_DEACTIVATIONContent; } }
        private static int _TEST_LOOPBACK_REGULAR_DEACTIVATIONContent = default;
        private static bool _TEST_LOOPBACK_REGULAR_DEACTIVATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#TETHERED_CALL_ACTIVE"/>
        /// </summary>
        public static int TETHERED_CALL_ACTIVE { get { if (!_TETHERED_CALL_ACTIVEReady) { _TETHERED_CALL_ACTIVEContent = SGetField<int>(LocalBridgeClazz, "TETHERED_CALL_ACTIVE"); _TETHERED_CALL_ACTIVEReady = true; } return _TETHERED_CALL_ACTIVEContent; } }
        private static int _TETHERED_CALL_ACTIVEContent = default;
        private static bool _TETHERED_CALL_ACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#TFT_SEMANTIC_ERROR"/>
        /// </summary>
        public static int TFT_SEMANTIC_ERROR { get { if (!_TFT_SEMANTIC_ERRORReady) { _TFT_SEMANTIC_ERRORContent = SGetField<int>(LocalBridgeClazz, "TFT_SEMANTIC_ERROR"); _TFT_SEMANTIC_ERRORReady = true; } return _TFT_SEMANTIC_ERRORContent; } }
        private static int _TFT_SEMANTIC_ERRORContent = default;
        private static bool _TFT_SEMANTIC_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#TFT_SYTAX_ERROR"/>
        /// </summary>
        public static int TFT_SYTAX_ERROR { get { if (!_TFT_SYTAX_ERRORReady) { _TFT_SYTAX_ERRORContent = SGetField<int>(LocalBridgeClazz, "TFT_SYTAX_ERROR"); _TFT_SYTAX_ERRORReady = true; } return _TFT_SYTAX_ERRORContent; } }
        private static int _TFT_SYTAX_ERRORContent = default;
        private static bool _TFT_SYTAX_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#THERMAL_EMERGENCY"/>
        /// </summary>
        public static int THERMAL_EMERGENCY { get { if (!_THERMAL_EMERGENCYReady) { _THERMAL_EMERGENCYContent = SGetField<int>(LocalBridgeClazz, "THERMAL_EMERGENCY"); _THERMAL_EMERGENCYReady = true; } return _THERMAL_EMERGENCYContent; } }
        private static int _THERMAL_EMERGENCYContent = default;
        private static bool _THERMAL_EMERGENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#THERMAL_MITIGATION"/>
        /// </summary>
        public static int THERMAL_MITIGATION { get { if (!_THERMAL_MITIGATIONReady) { _THERMAL_MITIGATIONContent = SGetField<int>(LocalBridgeClazz, "THERMAL_MITIGATION"); _THERMAL_MITIGATIONReady = true; } return _THERMAL_MITIGATIONContent; } }
        private static int _THERMAL_MITIGATIONContent = default;
        private static bool _THERMAL_MITIGATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#TRAT_SWAP_FAILED"/>
        /// </summary>
        public static int TRAT_SWAP_FAILED { get { if (!_TRAT_SWAP_FAILEDReady) { _TRAT_SWAP_FAILEDContent = SGetField<int>(LocalBridgeClazz, "TRAT_SWAP_FAILED"); _TRAT_SWAP_FAILEDReady = true; } return _TRAT_SWAP_FAILEDContent; } }
        private static int _TRAT_SWAP_FAILEDContent = default;
        private static bool _TRAT_SWAP_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#UE_INITIATED_DETACH_OR_DISCONNECT"/>
        /// </summary>
        public static int UE_INITIATED_DETACH_OR_DISCONNECT { get { if (!_UE_INITIATED_DETACH_OR_DISCONNECTReady) { _UE_INITIATED_DETACH_OR_DISCONNECTContent = SGetField<int>(LocalBridgeClazz, "UE_INITIATED_DETACH_OR_DISCONNECT"); _UE_INITIATED_DETACH_OR_DISCONNECTReady = true; } return _UE_INITIATED_DETACH_OR_DISCONNECTContent; } }
        private static int _UE_INITIATED_DETACH_OR_DISCONNECTContent = default;
        private static bool _UE_INITIATED_DETACH_OR_DISCONNECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#UE_IS_ENTERING_POWERSAVE_MODE"/>
        /// </summary>
        public static int UE_IS_ENTERING_POWERSAVE_MODE { get { if (!_UE_IS_ENTERING_POWERSAVE_MODEReady) { _UE_IS_ENTERING_POWERSAVE_MODEContent = SGetField<int>(LocalBridgeClazz, "UE_IS_ENTERING_POWERSAVE_MODE"); _UE_IS_ENTERING_POWERSAVE_MODEReady = true; } return _UE_IS_ENTERING_POWERSAVE_MODEContent; } }
        private static int _UE_IS_ENTERING_POWERSAVE_MODEContent = default;
        private static bool _UE_IS_ENTERING_POWERSAVE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#UE_RAT_CHANGE"/>
        /// </summary>
        public static int UE_RAT_CHANGE { get { if (!_UE_RAT_CHANGEReady) { _UE_RAT_CHANGEContent = SGetField<int>(LocalBridgeClazz, "UE_RAT_CHANGE"); _UE_RAT_CHANGEReady = true; } return _UE_RAT_CHANGEContent; } }
        private static int _UE_RAT_CHANGEContent = default;
        private static bool _UE_RAT_CHANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#UE_SECURITY_CAPABILITIES_MISMATCH"/>
        /// </summary>
        public static int UE_SECURITY_CAPABILITIES_MISMATCH { get { if (!_UE_SECURITY_CAPABILITIES_MISMATCHReady) { _UE_SECURITY_CAPABILITIES_MISMATCHContent = SGetField<int>(LocalBridgeClazz, "UE_SECURITY_CAPABILITIES_MISMATCH"); _UE_SECURITY_CAPABILITIES_MISMATCHReady = true; } return _UE_SECURITY_CAPABILITIES_MISMATCHContent; } }
        private static int _UE_SECURITY_CAPABILITIES_MISMATCHContent = default;
        private static bool _UE_SECURITY_CAPABILITIES_MISMATCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#UMTS_HANDOVER_TO_IWLAN"/>
        /// </summary>
        public static int UMTS_HANDOVER_TO_IWLAN { get { if (!_UMTS_HANDOVER_TO_IWLANReady) { _UMTS_HANDOVER_TO_IWLANContent = SGetField<int>(LocalBridgeClazz, "UMTS_HANDOVER_TO_IWLAN"); _UMTS_HANDOVER_TO_IWLANReady = true; } return _UMTS_HANDOVER_TO_IWLANContent; } }
        private static int _UMTS_HANDOVER_TO_IWLANContent = default;
        private static bool _UMTS_HANDOVER_TO_IWLANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#UMTS_REACTIVATION_REQ"/>
        /// </summary>
        public static int UMTS_REACTIVATION_REQ { get { if (!_UMTS_REACTIVATION_REQReady) { _UMTS_REACTIVATION_REQContent = SGetField<int>(LocalBridgeClazz, "UMTS_REACTIVATION_REQ"); _UMTS_REACTIVATION_REQReady = true; } return _UMTS_REACTIVATION_REQContent; } }
        private static int _UMTS_REACTIVATION_REQContent = default;
        private static bool _UMTS_REACTIVATION_REQReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#UNACCEPTABLE_NETWORK_PARAMETER"/>
        /// </summary>
        public static int UNACCEPTABLE_NETWORK_PARAMETER { get { if (!_UNACCEPTABLE_NETWORK_PARAMETERReady) { _UNACCEPTABLE_NETWORK_PARAMETERContent = SGetField<int>(LocalBridgeClazz, "UNACCEPTABLE_NETWORK_PARAMETER"); _UNACCEPTABLE_NETWORK_PARAMETERReady = true; } return _UNACCEPTABLE_NETWORK_PARAMETERContent; } }
        private static int _UNACCEPTABLE_NETWORK_PARAMETERContent = default;
        private static bool _UNACCEPTABLE_NETWORK_PARAMETERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#UNACCEPTABLE_NON_EPS_AUTHENTICATION"/>
        /// </summary>
        public static int UNACCEPTABLE_NON_EPS_AUTHENTICATION { get { if (!_UNACCEPTABLE_NON_EPS_AUTHENTICATIONReady) { _UNACCEPTABLE_NON_EPS_AUTHENTICATIONContent = SGetField<int>(LocalBridgeClazz, "UNACCEPTABLE_NON_EPS_AUTHENTICATION"); _UNACCEPTABLE_NON_EPS_AUTHENTICATIONReady = true; } return _UNACCEPTABLE_NON_EPS_AUTHENTICATIONContent; } }
        private static int _UNACCEPTABLE_NON_EPS_AUTHENTICATIONContent = default;
        private static bool _UNACCEPTABLE_NON_EPS_AUTHENTICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#UNKNOWN"/>
        /// </summary>
        public static int UNKNOWN { get { if (!_UNKNOWNReady) { _UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "UNKNOWN"); _UNKNOWNReady = true; } return _UNKNOWNContent; } }
        private static int _UNKNOWNContent = default;
        private static bool _UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#UNKNOWN_INFO_ELEMENT"/>
        /// </summary>
        public static int UNKNOWN_INFO_ELEMENT { get { if (!_UNKNOWN_INFO_ELEMENTReady) { _UNKNOWN_INFO_ELEMENTContent = SGetField<int>(LocalBridgeClazz, "UNKNOWN_INFO_ELEMENT"); _UNKNOWN_INFO_ELEMENTReady = true; } return _UNKNOWN_INFO_ELEMENTContent; } }
        private static int _UNKNOWN_INFO_ELEMENTContent = default;
        private static bool _UNKNOWN_INFO_ELEMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#UNKNOWN_PDP_ADDRESS_TYPE"/>
        /// </summary>
        public static int UNKNOWN_PDP_ADDRESS_TYPE { get { if (!_UNKNOWN_PDP_ADDRESS_TYPEReady) { _UNKNOWN_PDP_ADDRESS_TYPEContent = SGetField<int>(LocalBridgeClazz, "UNKNOWN_PDP_ADDRESS_TYPE"); _UNKNOWN_PDP_ADDRESS_TYPEReady = true; } return _UNKNOWN_PDP_ADDRESS_TYPEContent; } }
        private static int _UNKNOWN_PDP_ADDRESS_TYPEContent = default;
        private static bool _UNKNOWN_PDP_ADDRESS_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#UNKNOWN_PDP_CONTEXT"/>
        /// </summary>
        public static int UNKNOWN_PDP_CONTEXT { get { if (!_UNKNOWN_PDP_CONTEXTReady) { _UNKNOWN_PDP_CONTEXTContent = SGetField<int>(LocalBridgeClazz, "UNKNOWN_PDP_CONTEXT"); _UNKNOWN_PDP_CONTEXTReady = true; } return _UNKNOWN_PDP_CONTEXTContent; } }
        private static int _UNKNOWN_PDP_CONTEXTContent = default;
        private static bool _UNKNOWN_PDP_CONTEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#UNPREFERRED_RAT"/>
        /// </summary>
        public static int UNPREFERRED_RAT { get { if (!_UNPREFERRED_RATReady) { _UNPREFERRED_RATContent = SGetField<int>(LocalBridgeClazz, "UNPREFERRED_RAT"); _UNPREFERRED_RATReady = true; } return _UNPREFERRED_RATContent; } }
        private static int _UNPREFERRED_RATContent = default;
        private static bool _UNPREFERRED_RATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#UNSUPPORTED_1X_PREV"/>
        /// </summary>
        public static int UNSUPPORTED_1X_PREV { get { if (!_UNSUPPORTED_1X_PREVReady) { _UNSUPPORTED_1X_PREVContent = SGetField<int>(LocalBridgeClazz, "UNSUPPORTED_1X_PREV"); _UNSUPPORTED_1X_PREVReady = true; } return _UNSUPPORTED_1X_PREVContent; } }
        private static int _UNSUPPORTED_1X_PREVContent = default;
        private static bool _UNSUPPORTED_1X_PREVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#UNSUPPORTED_APN_IN_CURRENT_PLMN"/>
        /// </summary>
        public static int UNSUPPORTED_APN_IN_CURRENT_PLMN { get { if (!_UNSUPPORTED_APN_IN_CURRENT_PLMNReady) { _UNSUPPORTED_APN_IN_CURRENT_PLMNContent = SGetField<int>(LocalBridgeClazz, "UNSUPPORTED_APN_IN_CURRENT_PLMN"); _UNSUPPORTED_APN_IN_CURRENT_PLMNReady = true; } return _UNSUPPORTED_APN_IN_CURRENT_PLMNContent; } }
        private static int _UNSUPPORTED_APN_IN_CURRENT_PLMNContent = default;
        private static bool _UNSUPPORTED_APN_IN_CURRENT_PLMNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#UNSUPPORTED_QCI_VALUE"/>
        /// </summary>
        public static int UNSUPPORTED_QCI_VALUE { get { if (!_UNSUPPORTED_QCI_VALUEReady) { _UNSUPPORTED_QCI_VALUEContent = SGetField<int>(LocalBridgeClazz, "UNSUPPORTED_QCI_VALUE"); _UNSUPPORTED_QCI_VALUEReady = true; } return _UNSUPPORTED_QCI_VALUEContent; } }
        private static int _UNSUPPORTED_QCI_VALUEContent = default;
        private static bool _UNSUPPORTED_QCI_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#USER_AUTHENTICATION"/>
        /// </summary>
        public static int USER_AUTHENTICATION { get { if (!_USER_AUTHENTICATIONReady) { _USER_AUTHENTICATIONContent = SGetField<int>(LocalBridgeClazz, "USER_AUTHENTICATION"); _USER_AUTHENTICATIONReady = true; } return _USER_AUTHENTICATIONContent; } }
        private static int _USER_AUTHENTICATIONContent = default;
        private static bool _USER_AUTHENTICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#VSNCP_ADMINISTRATIVELY_PROHIBITED"/>
        /// </summary>
        public static int VSNCP_ADMINISTRATIVELY_PROHIBITED { get { if (!_VSNCP_ADMINISTRATIVELY_PROHIBITEDReady) { _VSNCP_ADMINISTRATIVELY_PROHIBITEDContent = SGetField<int>(LocalBridgeClazz, "VSNCP_ADMINISTRATIVELY_PROHIBITED"); _VSNCP_ADMINISTRATIVELY_PROHIBITEDReady = true; } return _VSNCP_ADMINISTRATIVELY_PROHIBITEDContent; } }
        private static int _VSNCP_ADMINISTRATIVELY_PROHIBITEDContent = default;
        private static bool _VSNCP_ADMINISTRATIVELY_PROHIBITEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#VSNCP_APN_UNAUTHORIZED"/>
        /// </summary>
        public static int VSNCP_APN_UNAUTHORIZED { get { if (!_VSNCP_APN_UNAUTHORIZEDReady) { _VSNCP_APN_UNAUTHORIZEDContent = SGetField<int>(LocalBridgeClazz, "VSNCP_APN_UNAUTHORIZED"); _VSNCP_APN_UNAUTHORIZEDReady = true; } return _VSNCP_APN_UNAUTHORIZEDContent; } }
        private static int _VSNCP_APN_UNAUTHORIZEDContent = default;
        private static bool _VSNCP_APN_UNAUTHORIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#VSNCP_GEN_ERROR"/>
        /// </summary>
        public static int VSNCP_GEN_ERROR { get { if (!_VSNCP_GEN_ERRORReady) { _VSNCP_GEN_ERRORContent = SGetField<int>(LocalBridgeClazz, "VSNCP_GEN_ERROR"); _VSNCP_GEN_ERRORReady = true; } return _VSNCP_GEN_ERRORContent; } }
        private static int _VSNCP_GEN_ERRORContent = default;
        private static bool _VSNCP_GEN_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#VSNCP_INSUFFICIENT_PARAMETERS"/>
        /// </summary>
        public static int VSNCP_INSUFFICIENT_PARAMETERS { get { if (!_VSNCP_INSUFFICIENT_PARAMETERSReady) { _VSNCP_INSUFFICIENT_PARAMETERSContent = SGetField<int>(LocalBridgeClazz, "VSNCP_INSUFFICIENT_PARAMETERS"); _VSNCP_INSUFFICIENT_PARAMETERSReady = true; } return _VSNCP_INSUFFICIENT_PARAMETERSContent; } }
        private static int _VSNCP_INSUFFICIENT_PARAMETERSContent = default;
        private static bool _VSNCP_INSUFFICIENT_PARAMETERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#VSNCP_NO_PDN_GATEWAY_ADDRESS"/>
        /// </summary>
        public static int VSNCP_NO_PDN_GATEWAY_ADDRESS { get { if (!_VSNCP_NO_PDN_GATEWAY_ADDRESSReady) { _VSNCP_NO_PDN_GATEWAY_ADDRESSContent = SGetField<int>(LocalBridgeClazz, "VSNCP_NO_PDN_GATEWAY_ADDRESS"); _VSNCP_NO_PDN_GATEWAY_ADDRESSReady = true; } return _VSNCP_NO_PDN_GATEWAY_ADDRESSContent; } }
        private static int _VSNCP_NO_PDN_GATEWAY_ADDRESSContent = default;
        private static bool _VSNCP_NO_PDN_GATEWAY_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#VSNCP_PDN_EXISTS_FOR_THIS_APN"/>
        /// </summary>
        public static int VSNCP_PDN_EXISTS_FOR_THIS_APN { get { if (!_VSNCP_PDN_EXISTS_FOR_THIS_APNReady) { _VSNCP_PDN_EXISTS_FOR_THIS_APNContent = SGetField<int>(LocalBridgeClazz, "VSNCP_PDN_EXISTS_FOR_THIS_APN"); _VSNCP_PDN_EXISTS_FOR_THIS_APNReady = true; } return _VSNCP_PDN_EXISTS_FOR_THIS_APNContent; } }
        private static int _VSNCP_PDN_EXISTS_FOR_THIS_APNContent = default;
        private static bool _VSNCP_PDN_EXISTS_FOR_THIS_APNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#VSNCP_PDN_GATEWAY_REJECT"/>
        /// </summary>
        public static int VSNCP_PDN_GATEWAY_REJECT { get { if (!_VSNCP_PDN_GATEWAY_REJECTReady) { _VSNCP_PDN_GATEWAY_REJECTContent = SGetField<int>(LocalBridgeClazz, "VSNCP_PDN_GATEWAY_REJECT"); _VSNCP_PDN_GATEWAY_REJECTReady = true; } return _VSNCP_PDN_GATEWAY_REJECTContent; } }
        private static int _VSNCP_PDN_GATEWAY_REJECTContent = default;
        private static bool _VSNCP_PDN_GATEWAY_REJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#VSNCP_PDN_GATEWAY_UNREACHABLE"/>
        /// </summary>
        public static int VSNCP_PDN_GATEWAY_UNREACHABLE { get { if (!_VSNCP_PDN_GATEWAY_UNREACHABLEReady) { _VSNCP_PDN_GATEWAY_UNREACHABLEContent = SGetField<int>(LocalBridgeClazz, "VSNCP_PDN_GATEWAY_UNREACHABLE"); _VSNCP_PDN_GATEWAY_UNREACHABLEReady = true; } return _VSNCP_PDN_GATEWAY_UNREACHABLEContent; } }
        private static int _VSNCP_PDN_GATEWAY_UNREACHABLEContent = default;
        private static bool _VSNCP_PDN_GATEWAY_UNREACHABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#VSNCP_PDN_ID_IN_USE"/>
        /// </summary>
        public static int VSNCP_PDN_ID_IN_USE { get { if (!_VSNCP_PDN_ID_IN_USEReady) { _VSNCP_PDN_ID_IN_USEContent = SGetField<int>(LocalBridgeClazz, "VSNCP_PDN_ID_IN_USE"); _VSNCP_PDN_ID_IN_USEReady = true; } return _VSNCP_PDN_ID_IN_USEContent; } }
        private static int _VSNCP_PDN_ID_IN_USEContent = default;
        private static bool _VSNCP_PDN_ID_IN_USEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#VSNCP_PDN_LIMIT_EXCEEDED"/>
        /// </summary>
        public static int VSNCP_PDN_LIMIT_EXCEEDED { get { if (!_VSNCP_PDN_LIMIT_EXCEEDEDReady) { _VSNCP_PDN_LIMIT_EXCEEDEDContent = SGetField<int>(LocalBridgeClazz, "VSNCP_PDN_LIMIT_EXCEEDED"); _VSNCP_PDN_LIMIT_EXCEEDEDReady = true; } return _VSNCP_PDN_LIMIT_EXCEEDEDContent; } }
        private static int _VSNCP_PDN_LIMIT_EXCEEDEDContent = default;
        private static bool _VSNCP_PDN_LIMIT_EXCEEDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#VSNCP_RECONNECT_NOT_ALLOWED"/>
        /// </summary>
        public static int VSNCP_RECONNECT_NOT_ALLOWED { get { if (!_VSNCP_RECONNECT_NOT_ALLOWEDReady) { _VSNCP_RECONNECT_NOT_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "VSNCP_RECONNECT_NOT_ALLOWED"); _VSNCP_RECONNECT_NOT_ALLOWEDReady = true; } return _VSNCP_RECONNECT_NOT_ALLOWEDContent; } }
        private static int _VSNCP_RECONNECT_NOT_ALLOWEDContent = default;
        private static bool _VSNCP_RECONNECT_NOT_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#VSNCP_RESOURCE_UNAVAILABLE"/>
        /// </summary>
        public static int VSNCP_RESOURCE_UNAVAILABLE { get { if (!_VSNCP_RESOURCE_UNAVAILABLEReady) { _VSNCP_RESOURCE_UNAVAILABLEContent = SGetField<int>(LocalBridgeClazz, "VSNCP_RESOURCE_UNAVAILABLE"); _VSNCP_RESOURCE_UNAVAILABLEReady = true; } return _VSNCP_RESOURCE_UNAVAILABLEContent; } }
        private static int _VSNCP_RESOURCE_UNAVAILABLEContent = default;
        private static bool _VSNCP_RESOURCE_UNAVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#VSNCP_SUBSCRIBER_LIMITATION"/>
        /// </summary>
        public static int VSNCP_SUBSCRIBER_LIMITATION { get { if (!_VSNCP_SUBSCRIBER_LIMITATIONReady) { _VSNCP_SUBSCRIBER_LIMITATIONContent = SGetField<int>(LocalBridgeClazz, "VSNCP_SUBSCRIBER_LIMITATION"); _VSNCP_SUBSCRIBER_LIMITATIONReady = true; } return _VSNCP_SUBSCRIBER_LIMITATIONContent; } }
        private static int _VSNCP_SUBSCRIBER_LIMITATIONContent = default;
        private static bool _VSNCP_SUBSCRIBER_LIMITATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/DataFailCause.html#VSNCP_TIMEOUT"/>
        /// </summary>
        public static int VSNCP_TIMEOUT { get { if (!_VSNCP_TIMEOUTReady) { _VSNCP_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "VSNCP_TIMEOUT"); _VSNCP_TIMEOUTReady = true; } return _VSNCP_TIMEOUTContent; } }
        private static int _VSNCP_TIMEOUTContent = default;
        private static bool _VSNCP_TIMEOUTReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
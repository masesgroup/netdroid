/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Telephony
{
    #region TelephonyManager
    public partial class TelephonyManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ALLOWED_NETWORK_TYPES_REASON_CARRIER"/>
        /// </summary>
        public static int ALLOWED_NETWORK_TYPES_REASON_CARRIER { get { if (!_ALLOWED_NETWORK_TYPES_REASON_CARRIERReady) { _ALLOWED_NETWORK_TYPES_REASON_CARRIERContent = SGetField<int>(LocalBridgeClazz, "ALLOWED_NETWORK_TYPES_REASON_CARRIER"); _ALLOWED_NETWORK_TYPES_REASON_CARRIERReady = true; } return _ALLOWED_NETWORK_TYPES_REASON_CARRIERContent; } }
        private static int _ALLOWED_NETWORK_TYPES_REASON_CARRIERContent = default;
        private static bool _ALLOWED_NETWORK_TYPES_REASON_CARRIERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ALLOWED_NETWORK_TYPES_REASON_USER"/>
        /// </summary>
        public static int ALLOWED_NETWORK_TYPES_REASON_USER { get { if (!_ALLOWED_NETWORK_TYPES_REASON_USERReady) { _ALLOWED_NETWORK_TYPES_REASON_USERContent = SGetField<int>(LocalBridgeClazz, "ALLOWED_NETWORK_TYPES_REASON_USER"); _ALLOWED_NETWORK_TYPES_REASON_USERReady = true; } return _ALLOWED_NETWORK_TYPES_REASON_USERContent; } }
        private static int _ALLOWED_NETWORK_TYPES_REASON_USERContent = default;
        private static bool _ALLOWED_NETWORK_TYPES_REASON_USERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#APPTYPE_CSIM"/>
        /// </summary>
        public static int APPTYPE_CSIM { get { if (!_APPTYPE_CSIMReady) { _APPTYPE_CSIMContent = SGetField<int>(LocalBridgeClazz, "APPTYPE_CSIM"); _APPTYPE_CSIMReady = true; } return _APPTYPE_CSIMContent; } }
        private static int _APPTYPE_CSIMContent = default;
        private static bool _APPTYPE_CSIMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#APPTYPE_ISIM"/>
        /// </summary>
        public static int APPTYPE_ISIM { get { if (!_APPTYPE_ISIMReady) { _APPTYPE_ISIMContent = SGetField<int>(LocalBridgeClazz, "APPTYPE_ISIM"); _APPTYPE_ISIMReady = true; } return _APPTYPE_ISIMContent; } }
        private static int _APPTYPE_ISIMContent = default;
        private static bool _APPTYPE_ISIMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#APPTYPE_RUIM"/>
        /// </summary>
        public static int APPTYPE_RUIM { get { if (!_APPTYPE_RUIMReady) { _APPTYPE_RUIMContent = SGetField<int>(LocalBridgeClazz, "APPTYPE_RUIM"); _APPTYPE_RUIMReady = true; } return _APPTYPE_RUIMContent; } }
        private static int _APPTYPE_RUIMContent = default;
        private static bool _APPTYPE_RUIMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#APPTYPE_SIM"/>
        /// </summary>
        public static int APPTYPE_SIM { get { if (!_APPTYPE_SIMReady) { _APPTYPE_SIMContent = SGetField<int>(LocalBridgeClazz, "APPTYPE_SIM"); _APPTYPE_SIMReady = true; } return _APPTYPE_SIMContent; } }
        private static int _APPTYPE_SIMContent = default;
        private static bool _APPTYPE_SIMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#APPTYPE_UNKNOWN"/>
        /// </summary>
        public static int APPTYPE_UNKNOWN { get { if (!_APPTYPE_UNKNOWNReady) { _APPTYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "APPTYPE_UNKNOWN"); _APPTYPE_UNKNOWNReady = true; } return _APPTYPE_UNKNOWNContent; } }
        private static int _APPTYPE_UNKNOWNContent = default;
        private static bool _APPTYPE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#APPTYPE_USIM"/>
        /// </summary>
        public static int APPTYPE_USIM { get { if (!_APPTYPE_USIMReady) { _APPTYPE_USIMContent = SGetField<int>(LocalBridgeClazz, "APPTYPE_USIM"); _APPTYPE_USIMReady = true; } return _APPTYPE_USIMContent; } }
        private static int _APPTYPE_USIMContent = default;
        private static bool _APPTYPE_USIMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#AUTHTYPE_EAP_AKA"/>
        /// </summary>
        public static int AUTHTYPE_EAP_AKA { get { if (!_AUTHTYPE_EAP_AKAReady) { _AUTHTYPE_EAP_AKAContent = SGetField<int>(LocalBridgeClazz, "AUTHTYPE_EAP_AKA"); _AUTHTYPE_EAP_AKAReady = true; } return _AUTHTYPE_EAP_AKAContent; } }
        private static int _AUTHTYPE_EAP_AKAContent = default;
        private static bool _AUTHTYPE_EAP_AKAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#AUTHTYPE_EAP_SIM"/>
        /// </summary>
        public static int AUTHTYPE_EAP_SIM { get { if (!_AUTHTYPE_EAP_SIMReady) { _AUTHTYPE_EAP_SIMContent = SGetField<int>(LocalBridgeClazz, "AUTHTYPE_EAP_SIM"); _AUTHTYPE_EAP_SIMReady = true; } return _AUTHTYPE_EAP_SIMContent; } }
        private static int _AUTHTYPE_EAP_SIMContent = default;
        private static bool _AUTHTYPE_EAP_SIMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#AUTHTYPE_GBA_BOOTSTRAP"/>
        /// </summary>
        public static int AUTHTYPE_GBA_BOOTSTRAP { get { if (!_AUTHTYPE_GBA_BOOTSTRAPReady) { _AUTHTYPE_GBA_BOOTSTRAPContent = SGetField<int>(LocalBridgeClazz, "AUTHTYPE_GBA_BOOTSTRAP"); _AUTHTYPE_GBA_BOOTSTRAPReady = true; } return _AUTHTYPE_GBA_BOOTSTRAPContent; } }
        private static int _AUTHTYPE_GBA_BOOTSTRAPContent = default;
        private static bool _AUTHTYPE_GBA_BOOTSTRAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#AUTHTYPE_GBA_NAF_KEY_EXTERNAL"/>
        /// </summary>
        public static int AUTHTYPE_GBA_NAF_KEY_EXTERNAL { get { if (!_AUTHTYPE_GBA_NAF_KEY_EXTERNALReady) { _AUTHTYPE_GBA_NAF_KEY_EXTERNALContent = SGetField<int>(LocalBridgeClazz, "AUTHTYPE_GBA_NAF_KEY_EXTERNAL"); _AUTHTYPE_GBA_NAF_KEY_EXTERNALReady = true; } return _AUTHTYPE_GBA_NAF_KEY_EXTERNALContent; } }
        private static int _AUTHTYPE_GBA_NAF_KEY_EXTERNALContent = default;
        private static bool _AUTHTYPE_GBA_NAF_KEY_EXTERNALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#CALL_COMPOSER_STATUS_BUSINESS_ONLY"/>
        /// </summary>
        public static int CALL_COMPOSER_STATUS_BUSINESS_ONLY { get { if (!_CALL_COMPOSER_STATUS_BUSINESS_ONLYReady) { _CALL_COMPOSER_STATUS_BUSINESS_ONLYContent = SGetField<int>(LocalBridgeClazz, "CALL_COMPOSER_STATUS_BUSINESS_ONLY"); _CALL_COMPOSER_STATUS_BUSINESS_ONLYReady = true; } return _CALL_COMPOSER_STATUS_BUSINESS_ONLYContent; } }
        private static int _CALL_COMPOSER_STATUS_BUSINESS_ONLYContent = default;
        private static bool _CALL_COMPOSER_STATUS_BUSINESS_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#CALL_COMPOSER_STATUS_OFF"/>
        /// </summary>
        public static int CALL_COMPOSER_STATUS_OFF { get { if (!_CALL_COMPOSER_STATUS_OFFReady) { _CALL_COMPOSER_STATUS_OFFContent = SGetField<int>(LocalBridgeClazz, "CALL_COMPOSER_STATUS_OFF"); _CALL_COMPOSER_STATUS_OFFReady = true; } return _CALL_COMPOSER_STATUS_OFFContent; } }
        private static int _CALL_COMPOSER_STATUS_OFFContent = default;
        private static bool _CALL_COMPOSER_STATUS_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#CALL_COMPOSER_STATUS_ON"/>
        /// </summary>
        public static int CALL_COMPOSER_STATUS_ON { get { if (!_CALL_COMPOSER_STATUS_ONReady) { _CALL_COMPOSER_STATUS_ONContent = SGetField<int>(LocalBridgeClazz, "CALL_COMPOSER_STATUS_ON"); _CALL_COMPOSER_STATUS_ONReady = true; } return _CALL_COMPOSER_STATUS_ONContent; } }
        private static int _CALL_COMPOSER_STATUS_ONContent = default;
        private static bool _CALL_COMPOSER_STATUS_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#CALL_STATE_IDLE"/>
        /// </summary>
        public static int CALL_STATE_IDLE { get { if (!_CALL_STATE_IDLEReady) { _CALL_STATE_IDLEContent = SGetField<int>(LocalBridgeClazz, "CALL_STATE_IDLE"); _CALL_STATE_IDLEReady = true; } return _CALL_STATE_IDLEContent; } }
        private static int _CALL_STATE_IDLEContent = default;
        private static bool _CALL_STATE_IDLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#CALL_STATE_OFFHOOK"/>
        /// </summary>
        public static int CALL_STATE_OFFHOOK { get { if (!_CALL_STATE_OFFHOOKReady) { _CALL_STATE_OFFHOOKContent = SGetField<int>(LocalBridgeClazz, "CALL_STATE_OFFHOOK"); _CALL_STATE_OFFHOOKReady = true; } return _CALL_STATE_OFFHOOKContent; } }
        private static int _CALL_STATE_OFFHOOKContent = default;
        private static bool _CALL_STATE_OFFHOOKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#CALL_STATE_RINGING"/>
        /// </summary>
        public static int CALL_STATE_RINGING { get { if (!_CALL_STATE_RINGINGReady) { _CALL_STATE_RINGINGContent = SGetField<int>(LocalBridgeClazz, "CALL_STATE_RINGING"); _CALL_STATE_RINGINGReady = true; } return _CALL_STATE_RINGINGContent; } }
        private static int _CALL_STATE_RINGINGContent = default;
        private static bool _CALL_STATE_RINGINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#CARRIER_RESTRICTION_STATUS_NOT_RESTRICTED"/>
        /// </summary>
        public static int CARRIER_RESTRICTION_STATUS_NOT_RESTRICTED { get { if (!_CARRIER_RESTRICTION_STATUS_NOT_RESTRICTEDReady) { _CARRIER_RESTRICTION_STATUS_NOT_RESTRICTEDContent = SGetField<int>(LocalBridgeClazz, "CARRIER_RESTRICTION_STATUS_NOT_RESTRICTED"); _CARRIER_RESTRICTION_STATUS_NOT_RESTRICTEDReady = true; } return _CARRIER_RESTRICTION_STATUS_NOT_RESTRICTEDContent; } }
        private static int _CARRIER_RESTRICTION_STATUS_NOT_RESTRICTEDContent = default;
        private static bool _CARRIER_RESTRICTION_STATUS_NOT_RESTRICTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#CARRIER_RESTRICTION_STATUS_RESTRICTED"/>
        /// </summary>
        public static int CARRIER_RESTRICTION_STATUS_RESTRICTED { get { if (!_CARRIER_RESTRICTION_STATUS_RESTRICTEDReady) { _CARRIER_RESTRICTION_STATUS_RESTRICTEDContent = SGetField<int>(LocalBridgeClazz, "CARRIER_RESTRICTION_STATUS_RESTRICTED"); _CARRIER_RESTRICTION_STATUS_RESTRICTEDReady = true; } return _CARRIER_RESTRICTION_STATUS_RESTRICTEDContent; } }
        private static int _CARRIER_RESTRICTION_STATUS_RESTRICTEDContent = default;
        private static bool _CARRIER_RESTRICTION_STATUS_RESTRICTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#CARRIER_RESTRICTION_STATUS_RESTRICTED_TO_CALLER"/>
        /// </summary>
        public static int CARRIER_RESTRICTION_STATUS_RESTRICTED_TO_CALLER { get { if (!_CARRIER_RESTRICTION_STATUS_RESTRICTED_TO_CALLERReady) { _CARRIER_RESTRICTION_STATUS_RESTRICTED_TO_CALLERContent = SGetField<int>(LocalBridgeClazz, "CARRIER_RESTRICTION_STATUS_RESTRICTED_TO_CALLER"); _CARRIER_RESTRICTION_STATUS_RESTRICTED_TO_CALLERReady = true; } return _CARRIER_RESTRICTION_STATUS_RESTRICTED_TO_CALLERContent; } }
        private static int _CARRIER_RESTRICTION_STATUS_RESTRICTED_TO_CALLERContent = default;
        private static bool _CARRIER_RESTRICTION_STATUS_RESTRICTED_TO_CALLERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#CARRIER_RESTRICTION_STATUS_UNKNOWN"/>
        /// </summary>
        public static int CARRIER_RESTRICTION_STATUS_UNKNOWN { get { if (!_CARRIER_RESTRICTION_STATUS_UNKNOWNReady) { _CARRIER_RESTRICTION_STATUS_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "CARRIER_RESTRICTION_STATUS_UNKNOWN"); _CARRIER_RESTRICTION_STATUS_UNKNOWNReady = true; } return _CARRIER_RESTRICTION_STATUS_UNKNOWNContent; } }
        private static int _CARRIER_RESTRICTION_STATUS_UNKNOWNContent = default;
        private static bool _CARRIER_RESTRICTION_STATUS_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#CDMA_ROAMING_MODE_AFFILIATED"/>
        /// </summary>
        public static int CDMA_ROAMING_MODE_AFFILIATED { get { if (!_CDMA_ROAMING_MODE_AFFILIATEDReady) { _CDMA_ROAMING_MODE_AFFILIATEDContent = SGetField<int>(LocalBridgeClazz, "CDMA_ROAMING_MODE_AFFILIATED"); _CDMA_ROAMING_MODE_AFFILIATEDReady = true; } return _CDMA_ROAMING_MODE_AFFILIATEDContent; } }
        private static int _CDMA_ROAMING_MODE_AFFILIATEDContent = default;
        private static bool _CDMA_ROAMING_MODE_AFFILIATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#CDMA_ROAMING_MODE_ANY"/>
        /// </summary>
        public static int CDMA_ROAMING_MODE_ANY { get { if (!_CDMA_ROAMING_MODE_ANYReady) { _CDMA_ROAMING_MODE_ANYContent = SGetField<int>(LocalBridgeClazz, "CDMA_ROAMING_MODE_ANY"); _CDMA_ROAMING_MODE_ANYReady = true; } return _CDMA_ROAMING_MODE_ANYContent; } }
        private static int _CDMA_ROAMING_MODE_ANYContent = default;
        private static bool _CDMA_ROAMING_MODE_ANYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#CDMA_ROAMING_MODE_HOME"/>
        /// </summary>
        public static int CDMA_ROAMING_MODE_HOME { get { if (!_CDMA_ROAMING_MODE_HOMEReady) { _CDMA_ROAMING_MODE_HOMEContent = SGetField<int>(LocalBridgeClazz, "CDMA_ROAMING_MODE_HOME"); _CDMA_ROAMING_MODE_HOMEReady = true; } return _CDMA_ROAMING_MODE_HOMEContent; } }
        private static int _CDMA_ROAMING_MODE_HOMEContent = default;
        private static bool _CDMA_ROAMING_MODE_HOMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#CDMA_ROAMING_MODE_RADIO_DEFAULT"/>
        /// </summary>
        public static int CDMA_ROAMING_MODE_RADIO_DEFAULT { get { if (!_CDMA_ROAMING_MODE_RADIO_DEFAULTReady) { _CDMA_ROAMING_MODE_RADIO_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "CDMA_ROAMING_MODE_RADIO_DEFAULT"); _CDMA_ROAMING_MODE_RADIO_DEFAULTReady = true; } return _CDMA_ROAMING_MODE_RADIO_DEFAULTContent; } }
        private static int _CDMA_ROAMING_MODE_RADIO_DEFAULTContent = default;
        private static bool _CDMA_ROAMING_MODE_RADIO_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_ACTIVITY_DORMANT"/>
        /// </summary>
        public static int DATA_ACTIVITY_DORMANT { get { if (!_DATA_ACTIVITY_DORMANTReady) { _DATA_ACTIVITY_DORMANTContent = SGetField<int>(LocalBridgeClazz, "DATA_ACTIVITY_DORMANT"); _DATA_ACTIVITY_DORMANTReady = true; } return _DATA_ACTIVITY_DORMANTContent; } }
        private static int _DATA_ACTIVITY_DORMANTContent = default;
        private static bool _DATA_ACTIVITY_DORMANTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_ACTIVITY_IN"/>
        /// </summary>
        public static int DATA_ACTIVITY_IN { get { if (!_DATA_ACTIVITY_INReady) { _DATA_ACTIVITY_INContent = SGetField<int>(LocalBridgeClazz, "DATA_ACTIVITY_IN"); _DATA_ACTIVITY_INReady = true; } return _DATA_ACTIVITY_INContent; } }
        private static int _DATA_ACTIVITY_INContent = default;
        private static bool _DATA_ACTIVITY_INReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_ACTIVITY_INOUT"/>
        /// </summary>
        public static int DATA_ACTIVITY_INOUT { get { if (!_DATA_ACTIVITY_INOUTReady) { _DATA_ACTIVITY_INOUTContent = SGetField<int>(LocalBridgeClazz, "DATA_ACTIVITY_INOUT"); _DATA_ACTIVITY_INOUTReady = true; } return _DATA_ACTIVITY_INOUTContent; } }
        private static int _DATA_ACTIVITY_INOUTContent = default;
        private static bool _DATA_ACTIVITY_INOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_ACTIVITY_NONE"/>
        /// </summary>
        public static int DATA_ACTIVITY_NONE { get { if (!_DATA_ACTIVITY_NONEReady) { _DATA_ACTIVITY_NONEContent = SGetField<int>(LocalBridgeClazz, "DATA_ACTIVITY_NONE"); _DATA_ACTIVITY_NONEReady = true; } return _DATA_ACTIVITY_NONEContent; } }
        private static int _DATA_ACTIVITY_NONEContent = default;
        private static bool _DATA_ACTIVITY_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_ACTIVITY_OUT"/>
        /// </summary>
        public static int DATA_ACTIVITY_OUT { get { if (!_DATA_ACTIVITY_OUTReady) { _DATA_ACTIVITY_OUTContent = SGetField<int>(LocalBridgeClazz, "DATA_ACTIVITY_OUT"); _DATA_ACTIVITY_OUTReady = true; } return _DATA_ACTIVITY_OUTContent; } }
        private static int _DATA_ACTIVITY_OUTContent = default;
        private static bool _DATA_ACTIVITY_OUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_CONNECTED"/>
        /// </summary>
        public static int DATA_CONNECTED { get { if (!_DATA_CONNECTEDReady) { _DATA_CONNECTEDContent = SGetField<int>(LocalBridgeClazz, "DATA_CONNECTED"); _DATA_CONNECTEDReady = true; } return _DATA_CONNECTEDContent; } }
        private static int _DATA_CONNECTEDContent = default;
        private static bool _DATA_CONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_CONNECTING"/>
        /// </summary>
        public static int DATA_CONNECTING { get { if (!_DATA_CONNECTINGReady) { _DATA_CONNECTINGContent = SGetField<int>(LocalBridgeClazz, "DATA_CONNECTING"); _DATA_CONNECTINGReady = true; } return _DATA_CONNECTINGContent; } }
        private static int _DATA_CONNECTINGContent = default;
        private static bool _DATA_CONNECTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_DISCONNECTED"/>
        /// </summary>
        public static int DATA_DISCONNECTED { get { if (!_DATA_DISCONNECTEDReady) { _DATA_DISCONNECTEDContent = SGetField<int>(LocalBridgeClazz, "DATA_DISCONNECTED"); _DATA_DISCONNECTEDReady = true; } return _DATA_DISCONNECTEDContent; } }
        private static int _DATA_DISCONNECTEDContent = default;
        private static bool _DATA_DISCONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_DISCONNECTING"/>
        /// </summary>
        public static int DATA_DISCONNECTING { get { if (!_DATA_DISCONNECTINGReady) { _DATA_DISCONNECTINGContent = SGetField<int>(LocalBridgeClazz, "DATA_DISCONNECTING"); _DATA_DISCONNECTINGReady = true; } return _DATA_DISCONNECTINGContent; } }
        private static int _DATA_DISCONNECTINGContent = default;
        private static bool _DATA_DISCONNECTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_ENABLED_REASON_CARRIER"/>
        /// </summary>
        public static int DATA_ENABLED_REASON_CARRIER { get { if (!_DATA_ENABLED_REASON_CARRIERReady) { _DATA_ENABLED_REASON_CARRIERContent = SGetField<int>(LocalBridgeClazz, "DATA_ENABLED_REASON_CARRIER"); _DATA_ENABLED_REASON_CARRIERReady = true; } return _DATA_ENABLED_REASON_CARRIERContent; } }
        private static int _DATA_ENABLED_REASON_CARRIERContent = default;
        private static bool _DATA_ENABLED_REASON_CARRIERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_ENABLED_REASON_OVERRIDE"/>
        /// </summary>
        public static int DATA_ENABLED_REASON_OVERRIDE { get { if (!_DATA_ENABLED_REASON_OVERRIDEReady) { _DATA_ENABLED_REASON_OVERRIDEContent = SGetField<int>(LocalBridgeClazz, "DATA_ENABLED_REASON_OVERRIDE"); _DATA_ENABLED_REASON_OVERRIDEReady = true; } return _DATA_ENABLED_REASON_OVERRIDEContent; } }
        private static int _DATA_ENABLED_REASON_OVERRIDEContent = default;
        private static bool _DATA_ENABLED_REASON_OVERRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_ENABLED_REASON_POLICY"/>
        /// </summary>
        public static int DATA_ENABLED_REASON_POLICY { get { if (!_DATA_ENABLED_REASON_POLICYReady) { _DATA_ENABLED_REASON_POLICYContent = SGetField<int>(LocalBridgeClazz, "DATA_ENABLED_REASON_POLICY"); _DATA_ENABLED_REASON_POLICYReady = true; } return _DATA_ENABLED_REASON_POLICYContent; } }
        private static int _DATA_ENABLED_REASON_POLICYContent = default;
        private static bool _DATA_ENABLED_REASON_POLICYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_ENABLED_REASON_THERMAL"/>
        /// </summary>
        public static int DATA_ENABLED_REASON_THERMAL { get { if (!_DATA_ENABLED_REASON_THERMALReady) { _DATA_ENABLED_REASON_THERMALContent = SGetField<int>(LocalBridgeClazz, "DATA_ENABLED_REASON_THERMAL"); _DATA_ENABLED_REASON_THERMALReady = true; } return _DATA_ENABLED_REASON_THERMALContent; } }
        private static int _DATA_ENABLED_REASON_THERMALContent = default;
        private static bool _DATA_ENABLED_REASON_THERMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_ENABLED_REASON_UNKNOWN"/>
        /// </summary>
        public static int DATA_ENABLED_REASON_UNKNOWN { get { if (!_DATA_ENABLED_REASON_UNKNOWNReady) { _DATA_ENABLED_REASON_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "DATA_ENABLED_REASON_UNKNOWN"); _DATA_ENABLED_REASON_UNKNOWNReady = true; } return _DATA_ENABLED_REASON_UNKNOWNContent; } }
        private static int _DATA_ENABLED_REASON_UNKNOWNContent = default;
        private static bool _DATA_ENABLED_REASON_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_ENABLED_REASON_USER"/>
        /// </summary>
        public static int DATA_ENABLED_REASON_USER { get { if (!_DATA_ENABLED_REASON_USERReady) { _DATA_ENABLED_REASON_USERContent = SGetField<int>(LocalBridgeClazz, "DATA_ENABLED_REASON_USER"); _DATA_ENABLED_REASON_USERReady = true; } return _DATA_ENABLED_REASON_USERContent; } }
        private static int _DATA_ENABLED_REASON_USERContent = default;
        private static bool _DATA_ENABLED_REASON_USERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_HANDOVER_IN_PROGRESS"/>
        /// </summary>
        public static int DATA_HANDOVER_IN_PROGRESS { get { if (!_DATA_HANDOVER_IN_PROGRESSReady) { _DATA_HANDOVER_IN_PROGRESSContent = SGetField<int>(LocalBridgeClazz, "DATA_HANDOVER_IN_PROGRESS"); _DATA_HANDOVER_IN_PROGRESSReady = true; } return _DATA_HANDOVER_IN_PROGRESSContent; } }
        private static int _DATA_HANDOVER_IN_PROGRESSContent = default;
        private static bool _DATA_HANDOVER_IN_PROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_SUSPENDED"/>
        /// </summary>
        public static int DATA_SUSPENDED { get { if (!_DATA_SUSPENDEDReady) { _DATA_SUSPENDEDContent = SGetField<int>(LocalBridgeClazz, "DATA_SUSPENDED"); _DATA_SUSPENDEDReady = true; } return _DATA_SUSPENDEDContent; } }
        private static int _DATA_SUSPENDEDContent = default;
        private static bool _DATA_SUSPENDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DATA_UNKNOWN"/>
        /// </summary>
        public static int DATA_UNKNOWN { get { if (!_DATA_UNKNOWNReady) { _DATA_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "DATA_UNKNOWN"); _DATA_UNKNOWNReady = true; } return _DATA_UNKNOWNContent; } }
        private static int _DATA_UNKNOWNContent = default;
        private static bool _DATA_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#DEFAULT_PORT_INDEX"/>
        /// </summary>
        public static int DEFAULT_PORT_INDEX { get { if (!_DEFAULT_PORT_INDEXReady) { _DEFAULT_PORT_INDEXContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_PORT_INDEX"); _DEFAULT_PORT_INDEXReady = true; } return _DEFAULT_PORT_INDEXContent; } }
        private static int _DEFAULT_PORT_INDEXContent = default;
        private static bool _DEFAULT_PORT_INDEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ERI_FLASH"/>
        /// </summary>
        public static int ERI_FLASH { get { if (!_ERI_FLASHReady) { _ERI_FLASHContent = SGetField<int>(LocalBridgeClazz, "ERI_FLASH"); _ERI_FLASHReady = true; } return _ERI_FLASHContent; } }
        private static int _ERI_FLASHContent = default;
        private static bool _ERI_FLASHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ERI_OFF"/>
        /// </summary>
        public static int ERI_OFF { get { if (!_ERI_OFFReady) { _ERI_OFFContent = SGetField<int>(LocalBridgeClazz, "ERI_OFF"); _ERI_OFFReady = true; } return _ERI_OFFContent; } }
        private static int _ERI_OFFContent = default;
        private static bool _ERI_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ERI_ON"/>
        /// </summary>
        public static int ERI_ON { get { if (!_ERI_ONReady) { _ERI_ONContent = SGetField<int>(LocalBridgeClazz, "ERI_ON"); _ERI_ONReady = true; } return _ERI_ONContent; } }
        private static int _ERI_ONContent = default;
        private static bool _ERI_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#INCLUDE_LOCATION_DATA_COARSE"/>
        /// </summary>
        public static int INCLUDE_LOCATION_DATA_COARSE { get { if (!_INCLUDE_LOCATION_DATA_COARSEReady) { _INCLUDE_LOCATION_DATA_COARSEContent = SGetField<int>(LocalBridgeClazz, "INCLUDE_LOCATION_DATA_COARSE"); _INCLUDE_LOCATION_DATA_COARSEReady = true; } return _INCLUDE_LOCATION_DATA_COARSEContent; } }
        private static int _INCLUDE_LOCATION_DATA_COARSEContent = default;
        private static bool _INCLUDE_LOCATION_DATA_COARSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#INCLUDE_LOCATION_DATA_FINE"/>
        /// </summary>
        public static int INCLUDE_LOCATION_DATA_FINE { get { if (!_INCLUDE_LOCATION_DATA_FINEReady) { _INCLUDE_LOCATION_DATA_FINEContent = SGetField<int>(LocalBridgeClazz, "INCLUDE_LOCATION_DATA_FINE"); _INCLUDE_LOCATION_DATA_FINEReady = true; } return _INCLUDE_LOCATION_DATA_FINEContent; } }
        private static int _INCLUDE_LOCATION_DATA_FINEContent = default;
        private static bool _INCLUDE_LOCATION_DATA_FINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#INCLUDE_LOCATION_DATA_NONE"/>
        /// </summary>
        public static int INCLUDE_LOCATION_DATA_NONE { get { if (!_INCLUDE_LOCATION_DATA_NONEReady) { _INCLUDE_LOCATION_DATA_NONEContent = SGetField<int>(LocalBridgeClazz, "INCLUDE_LOCATION_DATA_NONE"); _INCLUDE_LOCATION_DATA_NONEReady = true; } return _INCLUDE_LOCATION_DATA_NONEContent; } }
        private static int _INCLUDE_LOCATION_DATA_NONEContent = default;
        private static bool _INCLUDE_LOCATION_DATA_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#MULTISIM_ALLOWED"/>
        /// </summary>
        public static int MULTISIM_ALLOWED { get { if (!_MULTISIM_ALLOWEDReady) { _MULTISIM_ALLOWEDContent = SGetField<int>(LocalBridgeClazz, "MULTISIM_ALLOWED"); _MULTISIM_ALLOWEDReady = true; } return _MULTISIM_ALLOWEDContent; } }
        private static int _MULTISIM_ALLOWEDContent = default;
        private static bool _MULTISIM_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#MULTISIM_NOT_SUPPORTED_BY_CARRIER"/>
        /// </summary>
        public static int MULTISIM_NOT_SUPPORTED_BY_CARRIER { get { if (!_MULTISIM_NOT_SUPPORTED_BY_CARRIERReady) { _MULTISIM_NOT_SUPPORTED_BY_CARRIERContent = SGetField<int>(LocalBridgeClazz, "MULTISIM_NOT_SUPPORTED_BY_CARRIER"); _MULTISIM_NOT_SUPPORTED_BY_CARRIERReady = true; } return _MULTISIM_NOT_SUPPORTED_BY_CARRIERContent; } }
        private static int _MULTISIM_NOT_SUPPORTED_BY_CARRIERContent = default;
        private static bool _MULTISIM_NOT_SUPPORTED_BY_CARRIERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#MULTISIM_NOT_SUPPORTED_BY_HARDWARE"/>
        /// </summary>
        public static int MULTISIM_NOT_SUPPORTED_BY_HARDWARE { get { if (!_MULTISIM_NOT_SUPPORTED_BY_HARDWAREReady) { _MULTISIM_NOT_SUPPORTED_BY_HARDWAREContent = SGetField<int>(LocalBridgeClazz, "MULTISIM_NOT_SUPPORTED_BY_HARDWARE"); _MULTISIM_NOT_SUPPORTED_BY_HARDWAREReady = true; } return _MULTISIM_NOT_SUPPORTED_BY_HARDWAREContent; } }
        private static int _MULTISIM_NOT_SUPPORTED_BY_HARDWAREContent = default;
        private static bool _MULTISIM_NOT_SUPPORTED_BY_HARDWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_SELECTION_MODE_AUTO"/>
        /// </summary>
        public static int NETWORK_SELECTION_MODE_AUTO { get { if (!_NETWORK_SELECTION_MODE_AUTOReady) { _NETWORK_SELECTION_MODE_AUTOContent = SGetField<int>(LocalBridgeClazz, "NETWORK_SELECTION_MODE_AUTO"); _NETWORK_SELECTION_MODE_AUTOReady = true; } return _NETWORK_SELECTION_MODE_AUTOContent; } }
        private static int _NETWORK_SELECTION_MODE_AUTOContent = default;
        private static bool _NETWORK_SELECTION_MODE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_SELECTION_MODE_MANUAL"/>
        /// </summary>
        public static int NETWORK_SELECTION_MODE_MANUAL { get { if (!_NETWORK_SELECTION_MODE_MANUALReady) { _NETWORK_SELECTION_MODE_MANUALContent = SGetField<int>(LocalBridgeClazz, "NETWORK_SELECTION_MODE_MANUAL"); _NETWORK_SELECTION_MODE_MANUALReady = true; } return _NETWORK_SELECTION_MODE_MANUALContent; } }
        private static int _NETWORK_SELECTION_MODE_MANUALContent = default;
        private static bool _NETWORK_SELECTION_MODE_MANUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_SELECTION_MODE_UNKNOWN"/>
        /// </summary>
        public static int NETWORK_SELECTION_MODE_UNKNOWN { get { if (!_NETWORK_SELECTION_MODE_UNKNOWNReady) { _NETWORK_SELECTION_MODE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "NETWORK_SELECTION_MODE_UNKNOWN"); _NETWORK_SELECTION_MODE_UNKNOWNReady = true; } return _NETWORK_SELECTION_MODE_UNKNOWNContent; } }
        private static int _NETWORK_SELECTION_MODE_UNKNOWNContent = default;
        private static bool _NETWORK_SELECTION_MODE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_1xRTT"/>
        /// </summary>
        public static int NETWORK_TYPE_1xRTT { get { if (!_NETWORK_TYPE_1xRTTReady) { _NETWORK_TYPE_1xRTTContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_1xRTT"); _NETWORK_TYPE_1xRTTReady = true; } return _NETWORK_TYPE_1xRTTContent; } }
        private static int _NETWORK_TYPE_1xRTTContent = default;
        private static bool _NETWORK_TYPE_1xRTTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_CDMA"/>
        /// </summary>
        public static int NETWORK_TYPE_CDMA { get { if (!_NETWORK_TYPE_CDMAReady) { _NETWORK_TYPE_CDMAContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_CDMA"); _NETWORK_TYPE_CDMAReady = true; } return _NETWORK_TYPE_CDMAContent; } }
        private static int _NETWORK_TYPE_CDMAContent = default;
        private static bool _NETWORK_TYPE_CDMAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_EDGE"/>
        /// </summary>
        public static int NETWORK_TYPE_EDGE { get { if (!_NETWORK_TYPE_EDGEReady) { _NETWORK_TYPE_EDGEContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_EDGE"); _NETWORK_TYPE_EDGEReady = true; } return _NETWORK_TYPE_EDGEContent; } }
        private static int _NETWORK_TYPE_EDGEContent = default;
        private static bool _NETWORK_TYPE_EDGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_EHRPD"/>
        /// </summary>
        public static int NETWORK_TYPE_EHRPD { get { if (!_NETWORK_TYPE_EHRPDReady) { _NETWORK_TYPE_EHRPDContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_EHRPD"); _NETWORK_TYPE_EHRPDReady = true; } return _NETWORK_TYPE_EHRPDContent; } }
        private static int _NETWORK_TYPE_EHRPDContent = default;
        private static bool _NETWORK_TYPE_EHRPDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_EVDO_0"/>
        /// </summary>
        public static int NETWORK_TYPE_EVDO_0 { get { if (!_NETWORK_TYPE_EVDO_0Ready) { _NETWORK_TYPE_EVDO_0Content = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_EVDO_0"); _NETWORK_TYPE_EVDO_0Ready = true; } return _NETWORK_TYPE_EVDO_0Content; } }
        private static int _NETWORK_TYPE_EVDO_0Content = default;
        private static bool _NETWORK_TYPE_EVDO_0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_EVDO_A"/>
        /// </summary>
        public static int NETWORK_TYPE_EVDO_A { get { if (!_NETWORK_TYPE_EVDO_AReady) { _NETWORK_TYPE_EVDO_AContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_EVDO_A"); _NETWORK_TYPE_EVDO_AReady = true; } return _NETWORK_TYPE_EVDO_AContent; } }
        private static int _NETWORK_TYPE_EVDO_AContent = default;
        private static bool _NETWORK_TYPE_EVDO_AReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_EVDO_B"/>
        /// </summary>
        public static int NETWORK_TYPE_EVDO_B { get { if (!_NETWORK_TYPE_EVDO_BReady) { _NETWORK_TYPE_EVDO_BContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_EVDO_B"); _NETWORK_TYPE_EVDO_BReady = true; } return _NETWORK_TYPE_EVDO_BContent; } }
        private static int _NETWORK_TYPE_EVDO_BContent = default;
        private static bool _NETWORK_TYPE_EVDO_BReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_GPRS"/>
        /// </summary>
        public static int NETWORK_TYPE_GPRS { get { if (!_NETWORK_TYPE_GPRSReady) { _NETWORK_TYPE_GPRSContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_GPRS"); _NETWORK_TYPE_GPRSReady = true; } return _NETWORK_TYPE_GPRSContent; } }
        private static int _NETWORK_TYPE_GPRSContent = default;
        private static bool _NETWORK_TYPE_GPRSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_GSM"/>
        /// </summary>
        public static int NETWORK_TYPE_GSM { get { if (!_NETWORK_TYPE_GSMReady) { _NETWORK_TYPE_GSMContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_GSM"); _NETWORK_TYPE_GSMReady = true; } return _NETWORK_TYPE_GSMContent; } }
        private static int _NETWORK_TYPE_GSMContent = default;
        private static bool _NETWORK_TYPE_GSMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_HSDPA"/>
        /// </summary>
        public static int NETWORK_TYPE_HSDPA { get { if (!_NETWORK_TYPE_HSDPAReady) { _NETWORK_TYPE_HSDPAContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_HSDPA"); _NETWORK_TYPE_HSDPAReady = true; } return _NETWORK_TYPE_HSDPAContent; } }
        private static int _NETWORK_TYPE_HSDPAContent = default;
        private static bool _NETWORK_TYPE_HSDPAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_HSPA"/>
        /// </summary>
        public static int NETWORK_TYPE_HSPA { get { if (!_NETWORK_TYPE_HSPAReady) { _NETWORK_TYPE_HSPAContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_HSPA"); _NETWORK_TYPE_HSPAReady = true; } return _NETWORK_TYPE_HSPAContent; } }
        private static int _NETWORK_TYPE_HSPAContent = default;
        private static bool _NETWORK_TYPE_HSPAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_HSPAP"/>
        /// </summary>
        public static int NETWORK_TYPE_HSPAP { get { if (!_NETWORK_TYPE_HSPAPReady) { _NETWORK_TYPE_HSPAPContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_HSPAP"); _NETWORK_TYPE_HSPAPReady = true; } return _NETWORK_TYPE_HSPAPContent; } }
        private static int _NETWORK_TYPE_HSPAPContent = default;
        private static bool _NETWORK_TYPE_HSPAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_HSUPA"/>
        /// </summary>
        public static int NETWORK_TYPE_HSUPA { get { if (!_NETWORK_TYPE_HSUPAReady) { _NETWORK_TYPE_HSUPAContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_HSUPA"); _NETWORK_TYPE_HSUPAReady = true; } return _NETWORK_TYPE_HSUPAContent; } }
        private static int _NETWORK_TYPE_HSUPAContent = default;
        private static bool _NETWORK_TYPE_HSUPAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_IDEN"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int NETWORK_TYPE_IDEN { get { if (!_NETWORK_TYPE_IDENReady) { _NETWORK_TYPE_IDENContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_IDEN"); _NETWORK_TYPE_IDENReady = true; } return _NETWORK_TYPE_IDENContent; } }
        private static int _NETWORK_TYPE_IDENContent = default;
        private static bool _NETWORK_TYPE_IDENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_IWLAN"/>
        /// </summary>
        public static int NETWORK_TYPE_IWLAN { get { if (!_NETWORK_TYPE_IWLANReady) { _NETWORK_TYPE_IWLANContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_IWLAN"); _NETWORK_TYPE_IWLANReady = true; } return _NETWORK_TYPE_IWLANContent; } }
        private static int _NETWORK_TYPE_IWLANContent = default;
        private static bool _NETWORK_TYPE_IWLANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_LTE"/>
        /// </summary>
        public static int NETWORK_TYPE_LTE { get { if (!_NETWORK_TYPE_LTEReady) { _NETWORK_TYPE_LTEContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_LTE"); _NETWORK_TYPE_LTEReady = true; } return _NETWORK_TYPE_LTEContent; } }
        private static int _NETWORK_TYPE_LTEContent = default;
        private static bool _NETWORK_TYPE_LTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_NR"/>
        /// </summary>
        public static int NETWORK_TYPE_NR { get { if (!_NETWORK_TYPE_NRReady) { _NETWORK_TYPE_NRContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_NR"); _NETWORK_TYPE_NRReady = true; } return _NETWORK_TYPE_NRContent; } }
        private static int _NETWORK_TYPE_NRContent = default;
        private static bool _NETWORK_TYPE_NRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_TD_SCDMA"/>
        /// </summary>
        public static int NETWORK_TYPE_TD_SCDMA { get { if (!_NETWORK_TYPE_TD_SCDMAReady) { _NETWORK_TYPE_TD_SCDMAContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_TD_SCDMA"); _NETWORK_TYPE_TD_SCDMAReady = true; } return _NETWORK_TYPE_TD_SCDMAContent; } }
        private static int _NETWORK_TYPE_TD_SCDMAContent = default;
        private static bool _NETWORK_TYPE_TD_SCDMAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_UMTS"/>
        /// </summary>
        public static int NETWORK_TYPE_UMTS { get { if (!_NETWORK_TYPE_UMTSReady) { _NETWORK_TYPE_UMTSContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_UMTS"); _NETWORK_TYPE_UMTSReady = true; } return _NETWORK_TYPE_UMTSContent; } }
        private static int _NETWORK_TYPE_UMTSContent = default;
        private static bool _NETWORK_TYPE_UMTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_UNKNOWN"/>
        /// </summary>
        public static int NETWORK_TYPE_UNKNOWN { get { if (!_NETWORK_TYPE_UNKNOWNReady) { _NETWORK_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "NETWORK_TYPE_UNKNOWN"); _NETWORK_TYPE_UNKNOWNReady = true; } return _NETWORK_TYPE_UNKNOWNContent; } }
        private static int _NETWORK_TYPE_UNKNOWNContent = default;
        private static bool _NETWORK_TYPE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PHONE_TYPE_CDMA"/>
        /// </summary>
        public static int PHONE_TYPE_CDMA { get { if (!_PHONE_TYPE_CDMAReady) { _PHONE_TYPE_CDMAContent = SGetField<int>(LocalBridgeClazz, "PHONE_TYPE_CDMA"); _PHONE_TYPE_CDMAReady = true; } return _PHONE_TYPE_CDMAContent; } }
        private static int _PHONE_TYPE_CDMAContent = default;
        private static bool _PHONE_TYPE_CDMAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PHONE_TYPE_GSM"/>
        /// </summary>
        public static int PHONE_TYPE_GSM { get { if (!_PHONE_TYPE_GSMReady) { _PHONE_TYPE_GSMContent = SGetField<int>(LocalBridgeClazz, "PHONE_TYPE_GSM"); _PHONE_TYPE_GSMReady = true; } return _PHONE_TYPE_GSMContent; } }
        private static int _PHONE_TYPE_GSMContent = default;
        private static bool _PHONE_TYPE_GSMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PHONE_TYPE_NONE"/>
        /// </summary>
        public static int PHONE_TYPE_NONE { get { if (!_PHONE_TYPE_NONEReady) { _PHONE_TYPE_NONEContent = SGetField<int>(LocalBridgeClazz, "PHONE_TYPE_NONE"); _PHONE_TYPE_NONEReady = true; } return _PHONE_TYPE_NONEContent; } }
        private static int _PHONE_TYPE_NONEContent = default;
        private static bool _PHONE_TYPE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PHONE_TYPE_SIP"/>
        /// </summary>
        public static int PHONE_TYPE_SIP { get { if (!_PHONE_TYPE_SIPReady) { _PHONE_TYPE_SIPContent = SGetField<int>(LocalBridgeClazz, "PHONE_TYPE_SIP"); _PHONE_TYPE_SIPReady = true; } return _PHONE_TYPE_SIPContent; } }
        private static int _PHONE_TYPE_SIPContent = default;
        private static bool _PHONE_TYPE_SIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PREMIUM_CAPABILITY_PRIORITIZE_LATENCY"/>
        /// </summary>
        public static int PREMIUM_CAPABILITY_PRIORITIZE_LATENCY { get { if (!_PREMIUM_CAPABILITY_PRIORITIZE_LATENCYReady) { _PREMIUM_CAPABILITY_PRIORITIZE_LATENCYContent = SGetField<int>(LocalBridgeClazz, "PREMIUM_CAPABILITY_PRIORITIZE_LATENCY"); _PREMIUM_CAPABILITY_PRIORITIZE_LATENCYReady = true; } return _PREMIUM_CAPABILITY_PRIORITIZE_LATENCYContent; } }
        private static int _PREMIUM_CAPABILITY_PRIORITIZE_LATENCYContent = default;
        private static bool _PREMIUM_CAPABILITY_PRIORITIZE_LATENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_IN_PROGRESS"/>
        /// </summary>
        public static int PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_IN_PROGRESS { get { if (!_PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_IN_PROGRESSReady) { _PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_IN_PROGRESSContent = SGetField<int>(LocalBridgeClazz, "PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_IN_PROGRESS"); _PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_IN_PROGRESSReady = true; } return _PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_IN_PROGRESSContent; } }
        private static int _PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_IN_PROGRESSContent = default;
        private static bool _PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_IN_PROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_PURCHASED"/>
        /// </summary>
        public static int PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_PURCHASED { get { if (!_PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_PURCHASEDReady) { _PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_PURCHASEDContent = SGetField<int>(LocalBridgeClazz, "PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_PURCHASED"); _PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_PURCHASEDReady = true; } return _PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_PURCHASEDContent; } }
        private static int _PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_PURCHASEDContent = default;
        private static bool _PURCHASE_PREMIUM_CAPABILITY_RESULT_ALREADY_PURCHASEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_DISABLED"/>
        /// </summary>
        public static int PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_DISABLED { get { if (!_PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_DISABLEDReady) { _PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_DISABLED"); _PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_DISABLEDReady = true; } return _PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_DISABLEDContent; } }
        private static int _PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_DISABLEDContent = default;
        private static bool _PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_ERROR"/>
        /// </summary>
        public static int PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_ERROR { get { if (!_PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_ERRORReady) { _PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_ERRORContent = SGetField<int>(LocalBridgeClazz, "PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_ERROR"); _PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_ERRORReady = true; } return _PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_ERRORContent; } }
        private static int _PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_ERRORContent = default;
        private static bool _PURCHASE_PREMIUM_CAPABILITY_RESULT_CARRIER_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PURCHASE_PREMIUM_CAPABILITY_RESULT_ENTITLEMENT_CHECK_FAILED"/>
        /// </summary>
        public static int PURCHASE_PREMIUM_CAPABILITY_RESULT_ENTITLEMENT_CHECK_FAILED { get { if (!_PURCHASE_PREMIUM_CAPABILITY_RESULT_ENTITLEMENT_CHECK_FAILEDReady) { _PURCHASE_PREMIUM_CAPABILITY_RESULT_ENTITLEMENT_CHECK_FAILEDContent = SGetField<int>(LocalBridgeClazz, "PURCHASE_PREMIUM_CAPABILITY_RESULT_ENTITLEMENT_CHECK_FAILED"); _PURCHASE_PREMIUM_CAPABILITY_RESULT_ENTITLEMENT_CHECK_FAILEDReady = true; } return _PURCHASE_PREMIUM_CAPABILITY_RESULT_ENTITLEMENT_CHECK_FAILEDContent; } }
        private static int _PURCHASE_PREMIUM_CAPABILITY_RESULT_ENTITLEMENT_CHECK_FAILEDContent = default;
        private static bool _PURCHASE_PREMIUM_CAPABILITY_RESULT_ENTITLEMENT_CHECK_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PURCHASE_PREMIUM_CAPABILITY_RESULT_FEATURE_NOT_SUPPORTED"/>
        /// </summary>
        public static int PURCHASE_PREMIUM_CAPABILITY_RESULT_FEATURE_NOT_SUPPORTED { get { if (!_PURCHASE_PREMIUM_CAPABILITY_RESULT_FEATURE_NOT_SUPPORTEDReady) { _PURCHASE_PREMIUM_CAPABILITY_RESULT_FEATURE_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "PURCHASE_PREMIUM_CAPABILITY_RESULT_FEATURE_NOT_SUPPORTED"); _PURCHASE_PREMIUM_CAPABILITY_RESULT_FEATURE_NOT_SUPPORTEDReady = true; } return _PURCHASE_PREMIUM_CAPABILITY_RESULT_FEATURE_NOT_SUPPORTEDContent; } }
        private static int _PURCHASE_PREMIUM_CAPABILITY_RESULT_FEATURE_NOT_SUPPORTEDContent = default;
        private static bool _PURCHASE_PREMIUM_CAPABILITY_RESULT_FEATURE_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PURCHASE_PREMIUM_CAPABILITY_RESULT_NETWORK_NOT_AVAILABLE"/>
        /// </summary>
        public static int PURCHASE_PREMIUM_CAPABILITY_RESULT_NETWORK_NOT_AVAILABLE { get { if (!_PURCHASE_PREMIUM_CAPABILITY_RESULT_NETWORK_NOT_AVAILABLEReady) { _PURCHASE_PREMIUM_CAPABILITY_RESULT_NETWORK_NOT_AVAILABLEContent = SGetField<int>(LocalBridgeClazz, "PURCHASE_PREMIUM_CAPABILITY_RESULT_NETWORK_NOT_AVAILABLE"); _PURCHASE_PREMIUM_CAPABILITY_RESULT_NETWORK_NOT_AVAILABLEReady = true; } return _PURCHASE_PREMIUM_CAPABILITY_RESULT_NETWORK_NOT_AVAILABLEContent; } }
        private static int _PURCHASE_PREMIUM_CAPABILITY_RESULT_NETWORK_NOT_AVAILABLEContent = default;
        private static bool _PURCHASE_PREMIUM_CAPABILITY_RESULT_NETWORK_NOT_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_DEFAULT_DATA_SUBSCRIPTION"/>
        /// </summary>
        public static int PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_DEFAULT_DATA_SUBSCRIPTION { get { if (!_PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_DEFAULT_DATA_SUBSCRIPTIONReady) { _PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_DEFAULT_DATA_SUBSCRIPTIONContent = SGetField<int>(LocalBridgeClazz, "PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_DEFAULT_DATA_SUBSCRIPTION"); _PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_DEFAULT_DATA_SUBSCRIPTIONReady = true; } return _PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_DEFAULT_DATA_SUBSCRIPTIONContent; } }
        private static int _PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_DEFAULT_DATA_SUBSCRIPTIONContent = default;
        private static bool _PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_DEFAULT_DATA_SUBSCRIPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_FOREGROUND"/>
        /// </summary>
        public static int PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_FOREGROUND { get { if (!_PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_FOREGROUNDReady) { _PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_FOREGROUNDContent = SGetField<int>(LocalBridgeClazz, "PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_FOREGROUND"); _PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_FOREGROUNDReady = true; } return _PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_FOREGROUNDContent; } }
        private static int _PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_FOREGROUNDContent = default;
        private static bool _PURCHASE_PREMIUM_CAPABILITY_RESULT_NOT_FOREGROUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PURCHASE_PREMIUM_CAPABILITY_RESULT_PENDING_NETWORK_SETUP"/>
        /// </summary>
        public static int PURCHASE_PREMIUM_CAPABILITY_RESULT_PENDING_NETWORK_SETUP { get { if (!_PURCHASE_PREMIUM_CAPABILITY_RESULT_PENDING_NETWORK_SETUPReady) { _PURCHASE_PREMIUM_CAPABILITY_RESULT_PENDING_NETWORK_SETUPContent = SGetField<int>(LocalBridgeClazz, "PURCHASE_PREMIUM_CAPABILITY_RESULT_PENDING_NETWORK_SETUP"); _PURCHASE_PREMIUM_CAPABILITY_RESULT_PENDING_NETWORK_SETUPReady = true; } return _PURCHASE_PREMIUM_CAPABILITY_RESULT_PENDING_NETWORK_SETUPContent; } }
        private static int _PURCHASE_PREMIUM_CAPABILITY_RESULT_PENDING_NETWORK_SETUPContent = default;
        private static bool _PURCHASE_PREMIUM_CAPABILITY_RESULT_PENDING_NETWORK_SETUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PURCHASE_PREMIUM_CAPABILITY_RESULT_REQUEST_FAILED"/>
        /// </summary>
        public static int PURCHASE_PREMIUM_CAPABILITY_RESULT_REQUEST_FAILED { get { if (!_PURCHASE_PREMIUM_CAPABILITY_RESULT_REQUEST_FAILEDReady) { _PURCHASE_PREMIUM_CAPABILITY_RESULT_REQUEST_FAILEDContent = SGetField<int>(LocalBridgeClazz, "PURCHASE_PREMIUM_CAPABILITY_RESULT_REQUEST_FAILED"); _PURCHASE_PREMIUM_CAPABILITY_RESULT_REQUEST_FAILEDReady = true; } return _PURCHASE_PREMIUM_CAPABILITY_RESULT_REQUEST_FAILEDContent; } }
        private static int _PURCHASE_PREMIUM_CAPABILITY_RESULT_REQUEST_FAILEDContent = default;
        private static bool _PURCHASE_PREMIUM_CAPABILITY_RESULT_REQUEST_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PURCHASE_PREMIUM_CAPABILITY_RESULT_SUCCESS"/>
        /// </summary>
        public static int PURCHASE_PREMIUM_CAPABILITY_RESULT_SUCCESS { get { if (!_PURCHASE_PREMIUM_CAPABILITY_RESULT_SUCCESSReady) { _PURCHASE_PREMIUM_CAPABILITY_RESULT_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "PURCHASE_PREMIUM_CAPABILITY_RESULT_SUCCESS"); _PURCHASE_PREMIUM_CAPABILITY_RESULT_SUCCESSReady = true; } return _PURCHASE_PREMIUM_CAPABILITY_RESULT_SUCCESSContent; } }
        private static int _PURCHASE_PREMIUM_CAPABILITY_RESULT_SUCCESSContent = default;
        private static bool _PURCHASE_PREMIUM_CAPABILITY_RESULT_SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PURCHASE_PREMIUM_CAPABILITY_RESULT_THROTTLED"/>
        /// </summary>
        public static int PURCHASE_PREMIUM_CAPABILITY_RESULT_THROTTLED { get { if (!_PURCHASE_PREMIUM_CAPABILITY_RESULT_THROTTLEDReady) { _PURCHASE_PREMIUM_CAPABILITY_RESULT_THROTTLEDContent = SGetField<int>(LocalBridgeClazz, "PURCHASE_PREMIUM_CAPABILITY_RESULT_THROTTLED"); _PURCHASE_PREMIUM_CAPABILITY_RESULT_THROTTLEDReady = true; } return _PURCHASE_PREMIUM_CAPABILITY_RESULT_THROTTLEDContent; } }
        private static int _PURCHASE_PREMIUM_CAPABILITY_RESULT_THROTTLEDContent = default;
        private static bool _PURCHASE_PREMIUM_CAPABILITY_RESULT_THROTTLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PURCHASE_PREMIUM_CAPABILITY_RESULT_TIMEOUT"/>
        /// </summary>
        public static int PURCHASE_PREMIUM_CAPABILITY_RESULT_TIMEOUT { get { if (!_PURCHASE_PREMIUM_CAPABILITY_RESULT_TIMEOUTReady) { _PURCHASE_PREMIUM_CAPABILITY_RESULT_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "PURCHASE_PREMIUM_CAPABILITY_RESULT_TIMEOUT"); _PURCHASE_PREMIUM_CAPABILITY_RESULT_TIMEOUTReady = true; } return _PURCHASE_PREMIUM_CAPABILITY_RESULT_TIMEOUTContent; } }
        private static int _PURCHASE_PREMIUM_CAPABILITY_RESULT_TIMEOUTContent = default;
        private static bool _PURCHASE_PREMIUM_CAPABILITY_RESULT_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_CANCELED"/>
        /// </summary>
        public static int PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_CANCELED { get { if (!_PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_CANCELEDReady) { _PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_CANCELEDContent = SGetField<int>(LocalBridgeClazz, "PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_CANCELED"); _PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_CANCELEDReady = true; } return _PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_CANCELEDContent; } }
        private static int _PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_CANCELEDContent = default;
        private static bool _PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_CANCELEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_DISABLED"/>
        /// </summary>
        public static int PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_DISABLED { get { if (!_PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_DISABLEDReady) { _PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_DISABLED"); _PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_DISABLEDReady = true; } return _PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_DISABLEDContent; } }
        private static int _PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_DISABLEDContent = default;
        private static bool _PURCHASE_PREMIUM_CAPABILITY_RESULT_USER_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTION"/>
        /// </summary>
        public static int SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTION { get { if (!_SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTIONReady) { _SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTIONContent = SGetField<int>(LocalBridgeClazz, "SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTION"); _SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTIONReady = true; } return _SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTIONContent; } }
        private static int _SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTIONContent = default;
        private static bool _SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#SET_OPPORTUNISTIC_SUB_NO_OPPORTUNISTIC_SUB_AVAILABLE"/>
        /// </summary>
        public static int SET_OPPORTUNISTIC_SUB_NO_OPPORTUNISTIC_SUB_AVAILABLE { get { if (!_SET_OPPORTUNISTIC_SUB_NO_OPPORTUNISTIC_SUB_AVAILABLEReady) { _SET_OPPORTUNISTIC_SUB_NO_OPPORTUNISTIC_SUB_AVAILABLEContent = SGetField<int>(LocalBridgeClazz, "SET_OPPORTUNISTIC_SUB_NO_OPPORTUNISTIC_SUB_AVAILABLE"); _SET_OPPORTUNISTIC_SUB_NO_OPPORTUNISTIC_SUB_AVAILABLEReady = true; } return _SET_OPPORTUNISTIC_SUB_NO_OPPORTUNISTIC_SUB_AVAILABLEContent; } }
        private static int _SET_OPPORTUNISTIC_SUB_NO_OPPORTUNISTIC_SUB_AVAILABLEContent = default;
        private static bool _SET_OPPORTUNISTIC_SUB_NO_OPPORTUNISTIC_SUB_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#SET_OPPORTUNISTIC_SUB_REMOTE_SERVICE_EXCEPTION"/>
        /// </summary>
        public static int SET_OPPORTUNISTIC_SUB_REMOTE_SERVICE_EXCEPTION { get { if (!_SET_OPPORTUNISTIC_SUB_REMOTE_SERVICE_EXCEPTIONReady) { _SET_OPPORTUNISTIC_SUB_REMOTE_SERVICE_EXCEPTIONContent = SGetField<int>(LocalBridgeClazz, "SET_OPPORTUNISTIC_SUB_REMOTE_SERVICE_EXCEPTION"); _SET_OPPORTUNISTIC_SUB_REMOTE_SERVICE_EXCEPTIONReady = true; } return _SET_OPPORTUNISTIC_SUB_REMOTE_SERVICE_EXCEPTIONContent; } }
        private static int _SET_OPPORTUNISTIC_SUB_REMOTE_SERVICE_EXCEPTIONContent = default;
        private static bool _SET_OPPORTUNISTIC_SUB_REMOTE_SERVICE_EXCEPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#SET_OPPORTUNISTIC_SUB_SUCCESS"/>
        /// </summary>
        public static int SET_OPPORTUNISTIC_SUB_SUCCESS { get { if (!_SET_OPPORTUNISTIC_SUB_SUCCESSReady) { _SET_OPPORTUNISTIC_SUB_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "SET_OPPORTUNISTIC_SUB_SUCCESS"); _SET_OPPORTUNISTIC_SUB_SUCCESSReady = true; } return _SET_OPPORTUNISTIC_SUB_SUCCESSContent; } }
        private static int _SET_OPPORTUNISTIC_SUB_SUCCESSContent = default;
        private static bool _SET_OPPORTUNISTIC_SUB_SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#SET_OPPORTUNISTIC_SUB_VALIDATION_FAILED"/>
        /// </summary>
        public static int SET_OPPORTUNISTIC_SUB_VALIDATION_FAILED { get { if (!_SET_OPPORTUNISTIC_SUB_VALIDATION_FAILEDReady) { _SET_OPPORTUNISTIC_SUB_VALIDATION_FAILEDContent = SGetField<int>(LocalBridgeClazz, "SET_OPPORTUNISTIC_SUB_VALIDATION_FAILED"); _SET_OPPORTUNISTIC_SUB_VALIDATION_FAILEDReady = true; } return _SET_OPPORTUNISTIC_SUB_VALIDATION_FAILEDContent; } }
        private static int _SET_OPPORTUNISTIC_SUB_VALIDATION_FAILEDContent = default;
        private static bool _SET_OPPORTUNISTIC_SUB_VALIDATION_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_ABSENT"/>
        /// </summary>
        public static int SIM_STATE_ABSENT { get { if (!_SIM_STATE_ABSENTReady) { _SIM_STATE_ABSENTContent = SGetField<int>(LocalBridgeClazz, "SIM_STATE_ABSENT"); _SIM_STATE_ABSENTReady = true; } return _SIM_STATE_ABSENTContent; } }
        private static int _SIM_STATE_ABSENTContent = default;
        private static bool _SIM_STATE_ABSENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_CARD_IO_ERROR"/>
        /// </summary>
        public static int SIM_STATE_CARD_IO_ERROR { get { if (!_SIM_STATE_CARD_IO_ERRORReady) { _SIM_STATE_CARD_IO_ERRORContent = SGetField<int>(LocalBridgeClazz, "SIM_STATE_CARD_IO_ERROR"); _SIM_STATE_CARD_IO_ERRORReady = true; } return _SIM_STATE_CARD_IO_ERRORContent; } }
        private static int _SIM_STATE_CARD_IO_ERRORContent = default;
        private static bool _SIM_STATE_CARD_IO_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_CARD_RESTRICTED"/>
        /// </summary>
        public static int SIM_STATE_CARD_RESTRICTED { get { if (!_SIM_STATE_CARD_RESTRICTEDReady) { _SIM_STATE_CARD_RESTRICTEDContent = SGetField<int>(LocalBridgeClazz, "SIM_STATE_CARD_RESTRICTED"); _SIM_STATE_CARD_RESTRICTEDReady = true; } return _SIM_STATE_CARD_RESTRICTEDContent; } }
        private static int _SIM_STATE_CARD_RESTRICTEDContent = default;
        private static bool _SIM_STATE_CARD_RESTRICTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_NETWORK_LOCKED"/>
        /// </summary>
        public static int SIM_STATE_NETWORK_LOCKED { get { if (!_SIM_STATE_NETWORK_LOCKEDReady) { _SIM_STATE_NETWORK_LOCKEDContent = SGetField<int>(LocalBridgeClazz, "SIM_STATE_NETWORK_LOCKED"); _SIM_STATE_NETWORK_LOCKEDReady = true; } return _SIM_STATE_NETWORK_LOCKEDContent; } }
        private static int _SIM_STATE_NETWORK_LOCKEDContent = default;
        private static bool _SIM_STATE_NETWORK_LOCKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_NOT_READY"/>
        /// </summary>
        public static int SIM_STATE_NOT_READY { get { if (!_SIM_STATE_NOT_READYReady) { _SIM_STATE_NOT_READYContent = SGetField<int>(LocalBridgeClazz, "SIM_STATE_NOT_READY"); _SIM_STATE_NOT_READYReady = true; } return _SIM_STATE_NOT_READYContent; } }
        private static int _SIM_STATE_NOT_READYContent = default;
        private static bool _SIM_STATE_NOT_READYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_PERM_DISABLED"/>
        /// </summary>
        public static int SIM_STATE_PERM_DISABLED { get { if (!_SIM_STATE_PERM_DISABLEDReady) { _SIM_STATE_PERM_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "SIM_STATE_PERM_DISABLED"); _SIM_STATE_PERM_DISABLEDReady = true; } return _SIM_STATE_PERM_DISABLEDContent; } }
        private static int _SIM_STATE_PERM_DISABLEDContent = default;
        private static bool _SIM_STATE_PERM_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_PIN_REQUIRED"/>
        /// </summary>
        public static int SIM_STATE_PIN_REQUIRED { get { if (!_SIM_STATE_PIN_REQUIREDReady) { _SIM_STATE_PIN_REQUIREDContent = SGetField<int>(LocalBridgeClazz, "SIM_STATE_PIN_REQUIRED"); _SIM_STATE_PIN_REQUIREDReady = true; } return _SIM_STATE_PIN_REQUIREDContent; } }
        private static int _SIM_STATE_PIN_REQUIREDContent = default;
        private static bool _SIM_STATE_PIN_REQUIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_PUK_REQUIRED"/>
        /// </summary>
        public static int SIM_STATE_PUK_REQUIRED { get { if (!_SIM_STATE_PUK_REQUIREDReady) { _SIM_STATE_PUK_REQUIREDContent = SGetField<int>(LocalBridgeClazz, "SIM_STATE_PUK_REQUIRED"); _SIM_STATE_PUK_REQUIREDReady = true; } return _SIM_STATE_PUK_REQUIREDContent; } }
        private static int _SIM_STATE_PUK_REQUIREDContent = default;
        private static bool _SIM_STATE_PUK_REQUIREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_READY"/>
        /// </summary>
        public static int SIM_STATE_READY { get { if (!_SIM_STATE_READYReady) { _SIM_STATE_READYContent = SGetField<int>(LocalBridgeClazz, "SIM_STATE_READY"); _SIM_STATE_READYReady = true; } return _SIM_STATE_READYContent; } }
        private static int _SIM_STATE_READYContent = default;
        private static bool _SIM_STATE_READYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_UNKNOWN"/>
        /// </summary>
        public static int SIM_STATE_UNKNOWN { get { if (!_SIM_STATE_UNKNOWNReady) { _SIM_STATE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "SIM_STATE_UNKNOWN"); _SIM_STATE_UNKNOWNReady = true; } return _SIM_STATE_UNKNOWNContent; } }
        private static int _SIM_STATE_UNKNOWNContent = default;
        private static bool _SIM_STATE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#UNINITIALIZED_CARD_ID"/>
        /// </summary>
        public static int UNINITIALIZED_CARD_ID { get { if (!_UNINITIALIZED_CARD_IDReady) { _UNINITIALIZED_CARD_IDContent = SGetField<int>(LocalBridgeClazz, "UNINITIALIZED_CARD_ID"); _UNINITIALIZED_CARD_IDReady = true; } return _UNINITIALIZED_CARD_IDContent; } }
        private static int _UNINITIALIZED_CARD_IDContent = default;
        private static bool _UNINITIALIZED_CARD_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#UNKNOWN_CARRIER_ID"/>
        /// </summary>
        public static int UNKNOWN_CARRIER_ID { get { if (!_UNKNOWN_CARRIER_IDReady) { _UNKNOWN_CARRIER_IDContent = SGetField<int>(LocalBridgeClazz, "UNKNOWN_CARRIER_ID"); _UNKNOWN_CARRIER_IDReady = true; } return _UNKNOWN_CARRIER_IDContent; } }
        private static int _UNKNOWN_CARRIER_IDContent = default;
        private static bool _UNKNOWN_CARRIER_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#UNSUPPORTED_CARD_ID"/>
        /// </summary>
        public static int UNSUPPORTED_CARD_ID { get { if (!_UNSUPPORTED_CARD_IDReady) { _UNSUPPORTED_CARD_IDContent = SGetField<int>(LocalBridgeClazz, "UNSUPPORTED_CARD_ID"); _UNSUPPORTED_CARD_IDReady = true; } return _UNSUPPORTED_CARD_IDContent; } }
        private static int _UNSUPPORTED_CARD_IDContent = default;
        private static bool _UNSUPPORTED_CARD_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#UPDATE_AVAILABLE_NETWORKS_ABORTED"/>
        /// </summary>
        public static int UPDATE_AVAILABLE_NETWORKS_ABORTED { get { if (!_UPDATE_AVAILABLE_NETWORKS_ABORTEDReady) { _UPDATE_AVAILABLE_NETWORKS_ABORTEDContent = SGetField<int>(LocalBridgeClazz, "UPDATE_AVAILABLE_NETWORKS_ABORTED"); _UPDATE_AVAILABLE_NETWORKS_ABORTEDReady = true; } return _UPDATE_AVAILABLE_NETWORKS_ABORTEDContent; } }
        private static int _UPDATE_AVAILABLE_NETWORKS_ABORTEDContent = default;
        private static bool _UPDATE_AVAILABLE_NETWORKS_ABORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#UPDATE_AVAILABLE_NETWORKS_DISABLE_MODEM_FAIL"/>
        /// </summary>
        public static int UPDATE_AVAILABLE_NETWORKS_DISABLE_MODEM_FAIL { get { if (!_UPDATE_AVAILABLE_NETWORKS_DISABLE_MODEM_FAILReady) { _UPDATE_AVAILABLE_NETWORKS_DISABLE_MODEM_FAILContent = SGetField<int>(LocalBridgeClazz, "UPDATE_AVAILABLE_NETWORKS_DISABLE_MODEM_FAIL"); _UPDATE_AVAILABLE_NETWORKS_DISABLE_MODEM_FAILReady = true; } return _UPDATE_AVAILABLE_NETWORKS_DISABLE_MODEM_FAILContent; } }
        private static int _UPDATE_AVAILABLE_NETWORKS_DISABLE_MODEM_FAILContent = default;
        private static bool _UPDATE_AVAILABLE_NETWORKS_DISABLE_MODEM_FAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#UPDATE_AVAILABLE_NETWORKS_ENABLE_MODEM_FAIL"/>
        /// </summary>
        public static int UPDATE_AVAILABLE_NETWORKS_ENABLE_MODEM_FAIL { get { if (!_UPDATE_AVAILABLE_NETWORKS_ENABLE_MODEM_FAILReady) { _UPDATE_AVAILABLE_NETWORKS_ENABLE_MODEM_FAILContent = SGetField<int>(LocalBridgeClazz, "UPDATE_AVAILABLE_NETWORKS_ENABLE_MODEM_FAIL"); _UPDATE_AVAILABLE_NETWORKS_ENABLE_MODEM_FAILReady = true; } return _UPDATE_AVAILABLE_NETWORKS_ENABLE_MODEM_FAILContent; } }
        private static int _UPDATE_AVAILABLE_NETWORKS_ENABLE_MODEM_FAILContent = default;
        private static bool _UPDATE_AVAILABLE_NETWORKS_ENABLE_MODEM_FAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTS"/>
        /// </summary>
        public static int UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTS { get { if (!_UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTSReady) { _UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTSContent = SGetField<int>(LocalBridgeClazz, "UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTS"); _UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTSReady = true; } return _UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTSContent; } }
        private static int _UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTSContent = default;
        private static bool _UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#UPDATE_AVAILABLE_NETWORKS_MULTIPLE_NETWORKS_NOT_SUPPORTED"/>
        /// </summary>
        public static int UPDATE_AVAILABLE_NETWORKS_MULTIPLE_NETWORKS_NOT_SUPPORTED { get { if (!_UPDATE_AVAILABLE_NETWORKS_MULTIPLE_NETWORKS_NOT_SUPPORTEDReady) { _UPDATE_AVAILABLE_NETWORKS_MULTIPLE_NETWORKS_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "UPDATE_AVAILABLE_NETWORKS_MULTIPLE_NETWORKS_NOT_SUPPORTED"); _UPDATE_AVAILABLE_NETWORKS_MULTIPLE_NETWORKS_NOT_SUPPORTEDReady = true; } return _UPDATE_AVAILABLE_NETWORKS_MULTIPLE_NETWORKS_NOT_SUPPORTEDContent; } }
        private static int _UPDATE_AVAILABLE_NETWORKS_MULTIPLE_NETWORKS_NOT_SUPPORTEDContent = default;
        private static bool _UPDATE_AVAILABLE_NETWORKS_MULTIPLE_NETWORKS_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGE"/>
        /// </summary>
        public static int UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGE { get { if (!_UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGEReady) { _UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGEContent = SGetField<int>(LocalBridgeClazz, "UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGE"); _UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGEReady = true; } return _UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGEContent; } }
        private static int _UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGEContent = default;
        private static bool _UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#UPDATE_AVAILABLE_NETWORKS_NO_OPPORTUNISTIC_SUB_AVAILABLE"/>
        /// </summary>
        public static int UPDATE_AVAILABLE_NETWORKS_NO_OPPORTUNISTIC_SUB_AVAILABLE { get { if (!_UPDATE_AVAILABLE_NETWORKS_NO_OPPORTUNISTIC_SUB_AVAILABLEReady) { _UPDATE_AVAILABLE_NETWORKS_NO_OPPORTUNISTIC_SUB_AVAILABLEContent = SGetField<int>(LocalBridgeClazz, "UPDATE_AVAILABLE_NETWORKS_NO_OPPORTUNISTIC_SUB_AVAILABLE"); _UPDATE_AVAILABLE_NETWORKS_NO_OPPORTUNISTIC_SUB_AVAILABLEReady = true; } return _UPDATE_AVAILABLE_NETWORKS_NO_OPPORTUNISTIC_SUB_AVAILABLEContent; } }
        private static int _UPDATE_AVAILABLE_NETWORKS_NO_OPPORTUNISTIC_SUB_AVAILABLEContent = default;
        private static bool _UPDATE_AVAILABLE_NETWORKS_NO_OPPORTUNISTIC_SUB_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#UPDATE_AVAILABLE_NETWORKS_REMOTE_SERVICE_EXCEPTION"/>
        /// </summary>
        public static int UPDATE_AVAILABLE_NETWORKS_REMOTE_SERVICE_EXCEPTION { get { if (!_UPDATE_AVAILABLE_NETWORKS_REMOTE_SERVICE_EXCEPTIONReady) { _UPDATE_AVAILABLE_NETWORKS_REMOTE_SERVICE_EXCEPTIONContent = SGetField<int>(LocalBridgeClazz, "UPDATE_AVAILABLE_NETWORKS_REMOTE_SERVICE_EXCEPTION"); _UPDATE_AVAILABLE_NETWORKS_REMOTE_SERVICE_EXCEPTIONReady = true; } return _UPDATE_AVAILABLE_NETWORKS_REMOTE_SERVICE_EXCEPTIONContent; } }
        private static int _UPDATE_AVAILABLE_NETWORKS_REMOTE_SERVICE_EXCEPTIONContent = default;
        private static bool _UPDATE_AVAILABLE_NETWORKS_REMOTE_SERVICE_EXCEPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#UPDATE_AVAILABLE_NETWORKS_SERVICE_IS_DISABLED"/>
        /// </summary>
        public static int UPDATE_AVAILABLE_NETWORKS_SERVICE_IS_DISABLED { get { if (!_UPDATE_AVAILABLE_NETWORKS_SERVICE_IS_DISABLEDReady) { _UPDATE_AVAILABLE_NETWORKS_SERVICE_IS_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "UPDATE_AVAILABLE_NETWORKS_SERVICE_IS_DISABLED"); _UPDATE_AVAILABLE_NETWORKS_SERVICE_IS_DISABLEDReady = true; } return _UPDATE_AVAILABLE_NETWORKS_SERVICE_IS_DISABLEDContent; } }
        private static int _UPDATE_AVAILABLE_NETWORKS_SERVICE_IS_DISABLEDContent = default;
        private static bool _UPDATE_AVAILABLE_NETWORKS_SERVICE_IS_DISABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#UPDATE_AVAILABLE_NETWORKS_SUCCESS"/>
        /// </summary>
        public static int UPDATE_AVAILABLE_NETWORKS_SUCCESS { get { if (!_UPDATE_AVAILABLE_NETWORKS_SUCCESSReady) { _UPDATE_AVAILABLE_NETWORKS_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "UPDATE_AVAILABLE_NETWORKS_SUCCESS"); _UPDATE_AVAILABLE_NETWORKS_SUCCESSReady = true; } return _UPDATE_AVAILABLE_NETWORKS_SUCCESSContent; } }
        private static int _UPDATE_AVAILABLE_NETWORKS_SUCCESSContent = default;
        private static bool _UPDATE_AVAILABLE_NETWORKS_SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILURE"/>
        /// </summary>
        public static int UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILURE { get { if (!_UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILUREReady) { _UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILUREContent = SGetField<int>(LocalBridgeClazz, "UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILURE"); _UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILUREReady = true; } return _UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILUREContent; } }
        private static int _UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILUREContent = default;
        private static bool _UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#USSD_ERROR_SERVICE_UNAVAIL"/>
        /// </summary>
        public static int USSD_ERROR_SERVICE_UNAVAIL { get { if (!_USSD_ERROR_SERVICE_UNAVAILReady) { _USSD_ERROR_SERVICE_UNAVAILContent = SGetField<int>(LocalBridgeClazz, "USSD_ERROR_SERVICE_UNAVAIL"); _USSD_ERROR_SERVICE_UNAVAILReady = true; } return _USSD_ERROR_SERVICE_UNAVAILContent; } }
        private static int _USSD_ERROR_SERVICE_UNAVAILContent = default;
        private static bool _USSD_ERROR_SERVICE_UNAVAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#USSD_RETURN_FAILURE"/>
        /// </summary>
        public static int USSD_RETURN_FAILURE { get { if (!_USSD_RETURN_FAILUREReady) { _USSD_RETURN_FAILUREContent = SGetField<int>(LocalBridgeClazz, "USSD_RETURN_FAILURE"); _USSD_RETURN_FAILUREReady = true; } return _USSD_RETURN_FAILUREContent; } }
        private static int _USSD_RETURN_FAILUREContent = default;
        private static bool _USSD_RETURN_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_CARRIER_MESSAGING_CLIENT_SERVICE"/>
        /// </summary>
        public static Java.Lang.String ACTION_CARRIER_MESSAGING_CLIENT_SERVICE { get { if (!_ACTION_CARRIER_MESSAGING_CLIENT_SERVICEReady) { _ACTION_CARRIER_MESSAGING_CLIENT_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CARRIER_MESSAGING_CLIENT_SERVICE"); _ACTION_CARRIER_MESSAGING_CLIENT_SERVICEReady = true; } return _ACTION_CARRIER_MESSAGING_CLIENT_SERVICEContent; } }
        private static Java.Lang.String _ACTION_CARRIER_MESSAGING_CLIENT_SERVICEContent = default;
        private static bool _ACTION_CARRIER_MESSAGING_CLIENT_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_CARRIER_SIGNAL_DEFAULT_NETWORK_AVAILABLE"/>
        /// </summary>
        public static Java.Lang.String ACTION_CARRIER_SIGNAL_DEFAULT_NETWORK_AVAILABLE { get { if (!_ACTION_CARRIER_SIGNAL_DEFAULT_NETWORK_AVAILABLEReady) { _ACTION_CARRIER_SIGNAL_DEFAULT_NETWORK_AVAILABLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CARRIER_SIGNAL_DEFAULT_NETWORK_AVAILABLE"); _ACTION_CARRIER_SIGNAL_DEFAULT_NETWORK_AVAILABLEReady = true; } return _ACTION_CARRIER_SIGNAL_DEFAULT_NETWORK_AVAILABLEContent; } }
        private static Java.Lang.String _ACTION_CARRIER_SIGNAL_DEFAULT_NETWORK_AVAILABLEContent = default;
        private static bool _ACTION_CARRIER_SIGNAL_DEFAULT_NETWORK_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_CARRIER_SIGNAL_PCO_VALUE"/>
        /// </summary>
        public static Java.Lang.String ACTION_CARRIER_SIGNAL_PCO_VALUE { get { if (!_ACTION_CARRIER_SIGNAL_PCO_VALUEReady) { _ACTION_CARRIER_SIGNAL_PCO_VALUEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CARRIER_SIGNAL_PCO_VALUE"); _ACTION_CARRIER_SIGNAL_PCO_VALUEReady = true; } return _ACTION_CARRIER_SIGNAL_PCO_VALUEContent; } }
        private static Java.Lang.String _ACTION_CARRIER_SIGNAL_PCO_VALUEContent = default;
        private static bool _ACTION_CARRIER_SIGNAL_PCO_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_CARRIER_SIGNAL_REDIRECTED"/>
        /// </summary>
        public static Java.Lang.String ACTION_CARRIER_SIGNAL_REDIRECTED { get { if (!_ACTION_CARRIER_SIGNAL_REDIRECTEDReady) { _ACTION_CARRIER_SIGNAL_REDIRECTEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CARRIER_SIGNAL_REDIRECTED"); _ACTION_CARRIER_SIGNAL_REDIRECTEDReady = true; } return _ACTION_CARRIER_SIGNAL_REDIRECTEDContent; } }
        private static Java.Lang.String _ACTION_CARRIER_SIGNAL_REDIRECTEDContent = default;
        private static bool _ACTION_CARRIER_SIGNAL_REDIRECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_CARRIER_SIGNAL_REQUEST_NETWORK_FAILED"/>
        /// </summary>
        public static Java.Lang.String ACTION_CARRIER_SIGNAL_REQUEST_NETWORK_FAILED { get { if (!_ACTION_CARRIER_SIGNAL_REQUEST_NETWORK_FAILEDReady) { _ACTION_CARRIER_SIGNAL_REQUEST_NETWORK_FAILEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CARRIER_SIGNAL_REQUEST_NETWORK_FAILED"); _ACTION_CARRIER_SIGNAL_REQUEST_NETWORK_FAILEDReady = true; } return _ACTION_CARRIER_SIGNAL_REQUEST_NETWORK_FAILEDContent; } }
        private static Java.Lang.String _ACTION_CARRIER_SIGNAL_REQUEST_NETWORK_FAILEDContent = default;
        private static bool _ACTION_CARRIER_SIGNAL_REQUEST_NETWORK_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_CARRIER_SIGNAL_RESET"/>
        /// </summary>
        public static Java.Lang.String ACTION_CARRIER_SIGNAL_RESET { get { if (!_ACTION_CARRIER_SIGNAL_RESETReady) { _ACTION_CARRIER_SIGNAL_RESETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CARRIER_SIGNAL_RESET"); _ACTION_CARRIER_SIGNAL_RESETReady = true; } return _ACTION_CARRIER_SIGNAL_RESETContent; } }
        private static Java.Lang.String _ACTION_CARRIER_SIGNAL_RESETContent = default;
        private static bool _ACTION_CARRIER_SIGNAL_RESETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_CONFIGURE_VOICEMAIL"/>
        /// </summary>
        public static Java.Lang.String ACTION_CONFIGURE_VOICEMAIL { get { if (!_ACTION_CONFIGURE_VOICEMAILReady) { _ACTION_CONFIGURE_VOICEMAILContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CONFIGURE_VOICEMAIL"); _ACTION_CONFIGURE_VOICEMAILReady = true; } return _ACTION_CONFIGURE_VOICEMAILContent; } }
        private static Java.Lang.String _ACTION_CONFIGURE_VOICEMAILContent = default;
        private static bool _ACTION_CONFIGURE_VOICEMAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_MULTI_SIM_CONFIG_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_MULTI_SIM_CONFIG_CHANGED { get { if (!_ACTION_MULTI_SIM_CONFIG_CHANGEDReady) { _ACTION_MULTI_SIM_CONFIG_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MULTI_SIM_CONFIG_CHANGED"); _ACTION_MULTI_SIM_CONFIG_CHANGEDReady = true; } return _ACTION_MULTI_SIM_CONFIG_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_MULTI_SIM_CONFIG_CHANGEDContent = default;
        private static bool _ACTION_MULTI_SIM_CONFIG_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_NETWORK_COUNTRY_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_NETWORK_COUNTRY_CHANGED { get { if (!_ACTION_NETWORK_COUNTRY_CHANGEDReady) { _ACTION_NETWORK_COUNTRY_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NETWORK_COUNTRY_CHANGED"); _ACTION_NETWORK_COUNTRY_CHANGEDReady = true; } return _ACTION_NETWORK_COUNTRY_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_NETWORK_COUNTRY_CHANGEDContent = default;
        private static bool _ACTION_NETWORK_COUNTRY_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_PHONE_STATE_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_PHONE_STATE_CHANGED { get { if (!_ACTION_PHONE_STATE_CHANGEDReady) { _ACTION_PHONE_STATE_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_PHONE_STATE_CHANGED"); _ACTION_PHONE_STATE_CHANGEDReady = true; } return _ACTION_PHONE_STATE_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_PHONE_STATE_CHANGEDContent = default;
        private static bool _ACTION_PHONE_STATE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_RESET_MOBILE_NETWORK_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_RESET_MOBILE_NETWORK_SETTINGS { get { if (!_ACTION_RESET_MOBILE_NETWORK_SETTINGSReady) { _ACTION_RESET_MOBILE_NETWORK_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_RESET_MOBILE_NETWORK_SETTINGS"); _ACTION_RESET_MOBILE_NETWORK_SETTINGSReady = true; } return _ACTION_RESET_MOBILE_NETWORK_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_RESET_MOBILE_NETWORK_SETTINGSContent = default;
        private static bool _ACTION_RESET_MOBILE_NETWORK_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_RESPOND_VIA_MESSAGE"/>
        /// </summary>
        public static Java.Lang.String ACTION_RESPOND_VIA_MESSAGE { get { if (!_ACTION_RESPOND_VIA_MESSAGEReady) { _ACTION_RESPOND_VIA_MESSAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_RESPOND_VIA_MESSAGE"); _ACTION_RESPOND_VIA_MESSAGEReady = true; } return _ACTION_RESPOND_VIA_MESSAGEContent; } }
        private static Java.Lang.String _ACTION_RESPOND_VIA_MESSAGEContent = default;
        private static bool _ACTION_RESPOND_VIA_MESSAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_SECRET_CODE"/>
        /// </summary>
        public static Java.Lang.String ACTION_SECRET_CODE { get { if (!_ACTION_SECRET_CODEReady) { _ACTION_SECRET_CODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SECRET_CODE"); _ACTION_SECRET_CODEReady = true; } return _ACTION_SECRET_CODEContent; } }
        private static Java.Lang.String _ACTION_SECRET_CODEContent = default;
        private static bool _ACTION_SECRET_CODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_SHOW_VOICEMAIL_NOTIFICATION"/>
        /// </summary>
        public static Java.Lang.String ACTION_SHOW_VOICEMAIL_NOTIFICATION { get { if (!_ACTION_SHOW_VOICEMAIL_NOTIFICATIONReady) { _ACTION_SHOW_VOICEMAIL_NOTIFICATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SHOW_VOICEMAIL_NOTIFICATION"); _ACTION_SHOW_VOICEMAIL_NOTIFICATIONReady = true; } return _ACTION_SHOW_VOICEMAIL_NOTIFICATIONContent; } }
        private static Java.Lang.String _ACTION_SHOW_VOICEMAIL_NOTIFICATIONContent = default;
        private static bool _ACTION_SHOW_VOICEMAIL_NOTIFICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED { get { if (!_ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGEDReady) { _ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED"); _ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGEDReady = true; } return _ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGEDContent = default;
        private static bool _ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGED { get { if (!_ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGEDReady) { _ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGED"); _ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGEDReady = true; } return _ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGEDContent = default;
        private static bool _ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#CAPABILITY_SLICING_CONFIG_SUPPORTED"/>
        /// </summary>
        public static Java.Lang.String CAPABILITY_SLICING_CONFIG_SUPPORTED { get { if (!_CAPABILITY_SLICING_CONFIG_SUPPORTEDReady) { _CAPABILITY_SLICING_CONFIG_SUPPORTEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CAPABILITY_SLICING_CONFIG_SUPPORTED"); _CAPABILITY_SLICING_CONFIG_SUPPORTEDReady = true; } return _CAPABILITY_SLICING_CONFIG_SUPPORTEDContent; } }
        private static Java.Lang.String _CAPABILITY_SLICING_CONFIG_SUPPORTEDContent = default;
        private static bool _CAPABILITY_SLICING_CONFIG_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EVENT_DISPLAY_EMERGENCY_MESSAGE"/>
        /// </summary>
        public static Java.Lang.String EVENT_DISPLAY_EMERGENCY_MESSAGE { get { if (!_EVENT_DISPLAY_EMERGENCY_MESSAGEReady) { _EVENT_DISPLAY_EMERGENCY_MESSAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_DISPLAY_EMERGENCY_MESSAGE"); _EVENT_DISPLAY_EMERGENCY_MESSAGEReady = true; } return _EVENT_DISPLAY_EMERGENCY_MESSAGEContent; } }
        private static Java.Lang.String _EVENT_DISPLAY_EMERGENCY_MESSAGEContent = default;
        private static bool _EVENT_DISPLAY_EMERGENCY_MESSAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_ACTIVE_SIM_SUPPORTED_COUNT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_ACTIVE_SIM_SUPPORTED_COUNT { get { if (!_EXTRA_ACTIVE_SIM_SUPPORTED_COUNTReady) { _EXTRA_ACTIVE_SIM_SUPPORTED_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ACTIVE_SIM_SUPPORTED_COUNT"); _EXTRA_ACTIVE_SIM_SUPPORTED_COUNTReady = true; } return _EXTRA_ACTIVE_SIM_SUPPORTED_COUNTContent; } }
        private static Java.Lang.String _EXTRA_ACTIVE_SIM_SUPPORTED_COUNTContent = default;
        private static bool _EXTRA_ACTIVE_SIM_SUPPORTED_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_APN_PROTOCOL"/>
        /// </summary>
        public static Java.Lang.String EXTRA_APN_PROTOCOL { get { if (!_EXTRA_APN_PROTOCOLReady) { _EXTRA_APN_PROTOCOLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_APN_PROTOCOL"); _EXTRA_APN_PROTOCOLReady = true; } return _EXTRA_APN_PROTOCOLContent; } }
        private static Java.Lang.String _EXTRA_APN_PROTOCOLContent = default;
        private static bool _EXTRA_APN_PROTOCOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_APN_TYPE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_APN_TYPE { get { if (!_EXTRA_APN_TYPEReady) { _EXTRA_APN_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_APN_TYPE"); _EXTRA_APN_TYPEReady = true; } return _EXTRA_APN_TYPEContent; } }
        private static Java.Lang.String _EXTRA_APN_TYPEContent = default;
        private static bool _EXTRA_APN_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_CALL_VOICEMAIL_INTENT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CALL_VOICEMAIL_INTENT { get { if (!_EXTRA_CALL_VOICEMAIL_INTENTReady) { _EXTRA_CALL_VOICEMAIL_INTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CALL_VOICEMAIL_INTENT"); _EXTRA_CALL_VOICEMAIL_INTENTReady = true; } return _EXTRA_CALL_VOICEMAIL_INTENTContent; } }
        private static Java.Lang.String _EXTRA_CALL_VOICEMAIL_INTENTContent = default;
        private static bool _EXTRA_CALL_VOICEMAIL_INTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_CARRIER_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CARRIER_ID { get { if (!_EXTRA_CARRIER_IDReady) { _EXTRA_CARRIER_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CARRIER_ID"); _EXTRA_CARRIER_IDReady = true; } return _EXTRA_CARRIER_IDContent; } }
        private static Java.Lang.String _EXTRA_CARRIER_IDContent = default;
        private static bool _EXTRA_CARRIER_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_CARRIER_NAME"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CARRIER_NAME { get { if (!_EXTRA_CARRIER_NAMEReady) { _EXTRA_CARRIER_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CARRIER_NAME"); _EXTRA_CARRIER_NAMEReady = true; } return _EXTRA_CARRIER_NAMEContent; } }
        private static Java.Lang.String _EXTRA_CARRIER_NAMEContent = default;
        private static bool _EXTRA_CARRIER_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_DATA_FAIL_CAUSE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DATA_FAIL_CAUSE { get { if (!_EXTRA_DATA_FAIL_CAUSEReady) { _EXTRA_DATA_FAIL_CAUSEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DATA_FAIL_CAUSE"); _EXTRA_DATA_FAIL_CAUSEReady = true; } return _EXTRA_DATA_FAIL_CAUSEContent; } }
        private static Java.Lang.String _EXTRA_DATA_FAIL_CAUSEContent = default;
        private static bool _EXTRA_DATA_FAIL_CAUSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_DEFAULT_NETWORK_AVAILABLE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DEFAULT_NETWORK_AVAILABLE { get { if (!_EXTRA_DEFAULT_NETWORK_AVAILABLEReady) { _EXTRA_DEFAULT_NETWORK_AVAILABLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DEFAULT_NETWORK_AVAILABLE"); _EXTRA_DEFAULT_NETWORK_AVAILABLEReady = true; } return _EXTRA_DEFAULT_NETWORK_AVAILABLEContent; } }
        private static Java.Lang.String _EXTRA_DEFAULT_NETWORK_AVAILABLEContent = default;
        private static bool _EXTRA_DEFAULT_NETWORK_AVAILABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_EMERGENCY_CALL_TO_SATELLITE_HANDOVER_TYPE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_EMERGENCY_CALL_TO_SATELLITE_HANDOVER_TYPE { get { if (!_EXTRA_EMERGENCY_CALL_TO_SATELLITE_HANDOVER_TYPEReady) { _EXTRA_EMERGENCY_CALL_TO_SATELLITE_HANDOVER_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_EMERGENCY_CALL_TO_SATELLITE_HANDOVER_TYPE"); _EXTRA_EMERGENCY_CALL_TO_SATELLITE_HANDOVER_TYPEReady = true; } return _EXTRA_EMERGENCY_CALL_TO_SATELLITE_HANDOVER_TYPEContent; } }
        private static Java.Lang.String _EXTRA_EMERGENCY_CALL_TO_SATELLITE_HANDOVER_TYPEContent = default;
        private static bool _EXTRA_EMERGENCY_CALL_TO_SATELLITE_HANDOVER_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_EMERGENCY_CALL_TO_SATELLITE_LAUNCH_INTENT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_EMERGENCY_CALL_TO_SATELLITE_LAUNCH_INTENT { get { if (!_EXTRA_EMERGENCY_CALL_TO_SATELLITE_LAUNCH_INTENTReady) { _EXTRA_EMERGENCY_CALL_TO_SATELLITE_LAUNCH_INTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_EMERGENCY_CALL_TO_SATELLITE_LAUNCH_INTENT"); _EXTRA_EMERGENCY_CALL_TO_SATELLITE_LAUNCH_INTENTReady = true; } return _EXTRA_EMERGENCY_CALL_TO_SATELLITE_LAUNCH_INTENTContent; } }
        private static Java.Lang.String _EXTRA_EMERGENCY_CALL_TO_SATELLITE_LAUNCH_INTENTContent = default;
        private static bool _EXTRA_EMERGENCY_CALL_TO_SATELLITE_LAUNCH_INTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_HIDE_PUBLIC_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_HIDE_PUBLIC_SETTINGS { get { if (!_EXTRA_HIDE_PUBLIC_SETTINGSReady) { _EXTRA_HIDE_PUBLIC_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_HIDE_PUBLIC_SETTINGS"); _EXTRA_HIDE_PUBLIC_SETTINGSReady = true; } return _EXTRA_HIDE_PUBLIC_SETTINGSContent; } }
        private static Java.Lang.String _EXTRA_HIDE_PUBLIC_SETTINGSContent = default;
        private static bool _EXTRA_HIDE_PUBLIC_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_INCOMING_NUMBER"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_INCOMING_NUMBER { get { if (!_EXTRA_INCOMING_NUMBERReady) { _EXTRA_INCOMING_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_INCOMING_NUMBER"); _EXTRA_INCOMING_NUMBERReady = true; } return _EXTRA_INCOMING_NUMBERContent; } }
        private static Java.Lang.String _EXTRA_INCOMING_NUMBERContent = default;
        private static bool _EXTRA_INCOMING_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_IS_REFRESH"/>
        /// </summary>
        public static Java.Lang.String EXTRA_IS_REFRESH { get { if (!_EXTRA_IS_REFRESHReady) { _EXTRA_IS_REFRESHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_IS_REFRESH"); _EXTRA_IS_REFRESHReady = true; } return _EXTRA_IS_REFRESHContent; } }
        private static Java.Lang.String _EXTRA_IS_REFRESHContent = default;
        private static bool _EXTRA_IS_REFRESHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_LAST_KNOWN_NETWORK_COUNTRY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_LAST_KNOWN_NETWORK_COUNTRY { get { if (!_EXTRA_LAST_KNOWN_NETWORK_COUNTRYReady) { _EXTRA_LAST_KNOWN_NETWORK_COUNTRYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_LAST_KNOWN_NETWORK_COUNTRY"); _EXTRA_LAST_KNOWN_NETWORK_COUNTRYReady = true; } return _EXTRA_LAST_KNOWN_NETWORK_COUNTRYContent; } }
        private static Java.Lang.String _EXTRA_LAST_KNOWN_NETWORK_COUNTRYContent = default;
        private static bool _EXTRA_LAST_KNOWN_NETWORK_COUNTRYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT { get { if (!_EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENTReady) { _EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT"); _EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENTReady = true; } return _EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENTContent; } }
        private static Java.Lang.String _EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENTContent = default;
        private static bool _EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_NETWORK_COUNTRY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NETWORK_COUNTRY { get { if (!_EXTRA_NETWORK_COUNTRYReady) { _EXTRA_NETWORK_COUNTRYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NETWORK_COUNTRY"); _EXTRA_NETWORK_COUNTRYReady = true; } return _EXTRA_NETWORK_COUNTRYContent; } }
        private static Java.Lang.String _EXTRA_NETWORK_COUNTRYContent = default;
        private static bool _EXTRA_NETWORK_COUNTRYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_NOTIFICATION_COUNT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NOTIFICATION_COUNT { get { if (!_EXTRA_NOTIFICATION_COUNTReady) { _EXTRA_NOTIFICATION_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NOTIFICATION_COUNT"); _EXTRA_NOTIFICATION_COUNTReady = true; } return _EXTRA_NOTIFICATION_COUNTContent; } }
        private static Java.Lang.String _EXTRA_NOTIFICATION_COUNTContent = default;
        private static bool _EXTRA_NOTIFICATION_COUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_PCO_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PCO_ID { get { if (!_EXTRA_PCO_IDReady) { _EXTRA_PCO_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PCO_ID"); _EXTRA_PCO_IDReady = true; } return _EXTRA_PCO_IDContent; } }
        private static Java.Lang.String _EXTRA_PCO_IDContent = default;
        private static bool _EXTRA_PCO_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_PCO_VALUE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PCO_VALUE { get { if (!_EXTRA_PCO_VALUEReady) { _EXTRA_PCO_VALUEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PCO_VALUE"); _EXTRA_PCO_VALUEReady = true; } return _EXTRA_PCO_VALUEContent; } }
        private static Java.Lang.String _EXTRA_PCO_VALUEContent = default;
        private static bool _EXTRA_PCO_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_PHONE_ACCOUNT_HANDLE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PHONE_ACCOUNT_HANDLE { get { if (!_EXTRA_PHONE_ACCOUNT_HANDLEReady) { _EXTRA_PHONE_ACCOUNT_HANDLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PHONE_ACCOUNT_HANDLE"); _EXTRA_PHONE_ACCOUNT_HANDLEReady = true; } return _EXTRA_PHONE_ACCOUNT_HANDLEContent; } }
        private static Java.Lang.String _EXTRA_PHONE_ACCOUNT_HANDLEContent = default;
        private static bool _EXTRA_PHONE_ACCOUNT_HANDLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_REDIRECTION_URL"/>
        /// </summary>
        public static Java.Lang.String EXTRA_REDIRECTION_URL { get { if (!_EXTRA_REDIRECTION_URLReady) { _EXTRA_REDIRECTION_URLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_REDIRECTION_URL"); _EXTRA_REDIRECTION_URLReady = true; } return _EXTRA_REDIRECTION_URLContent; } }
        private static Java.Lang.String _EXTRA_REDIRECTION_URLContent = default;
        private static bool _EXTRA_REDIRECTION_URLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_SPECIFIC_CARRIER_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SPECIFIC_CARRIER_ID { get { if (!_EXTRA_SPECIFIC_CARRIER_IDReady) { _EXTRA_SPECIFIC_CARRIER_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SPECIFIC_CARRIER_ID"); _EXTRA_SPECIFIC_CARRIER_IDReady = true; } return _EXTRA_SPECIFIC_CARRIER_IDContent; } }
        private static Java.Lang.String _EXTRA_SPECIFIC_CARRIER_IDContent = default;
        private static bool _EXTRA_SPECIFIC_CARRIER_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_SPECIFIC_CARRIER_NAME"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SPECIFIC_CARRIER_NAME { get { if (!_EXTRA_SPECIFIC_CARRIER_NAMEReady) { _EXTRA_SPECIFIC_CARRIER_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SPECIFIC_CARRIER_NAME"); _EXTRA_SPECIFIC_CARRIER_NAMEReady = true; } return _EXTRA_SPECIFIC_CARRIER_NAMEContent; } }
        private static Java.Lang.String _EXTRA_SPECIFIC_CARRIER_NAMEContent = default;
        private static bool _EXTRA_SPECIFIC_CARRIER_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_STATE { get { if (!_EXTRA_STATEReady) { _EXTRA_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_STATE"); _EXTRA_STATEReady = true; } return _EXTRA_STATEContent; } }
        private static Java.Lang.String _EXTRA_STATEContent = default;
        private static bool _EXTRA_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_STATE_IDLE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_STATE_IDLE { get { if (!_EXTRA_STATE_IDLEReady) { _EXTRA_STATE_IDLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_STATE_IDLE"); _EXTRA_STATE_IDLEReady = true; } return _EXTRA_STATE_IDLEContent; } }
        private static Java.Lang.String _EXTRA_STATE_IDLEContent = default;
        private static bool _EXTRA_STATE_IDLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_STATE_OFFHOOK"/>
        /// </summary>
        public static Java.Lang.String EXTRA_STATE_OFFHOOK { get { if (!_EXTRA_STATE_OFFHOOKReady) { _EXTRA_STATE_OFFHOOKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_STATE_OFFHOOK"); _EXTRA_STATE_OFFHOOKReady = true; } return _EXTRA_STATE_OFFHOOKContent; } }
        private static Java.Lang.String _EXTRA_STATE_OFFHOOKContent = default;
        private static bool _EXTRA_STATE_OFFHOOKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_STATE_RINGING"/>
        /// </summary>
        public static Java.Lang.String EXTRA_STATE_RINGING { get { if (!_EXTRA_STATE_RINGINGReady) { _EXTRA_STATE_RINGINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_STATE_RINGING"); _EXTRA_STATE_RINGINGReady = true; } return _EXTRA_STATE_RINGINGContent; } }
        private static Java.Lang.String _EXTRA_STATE_RINGINGContent = default;
        private static bool _EXTRA_STATE_RINGINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_SUBSCRIPTION_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SUBSCRIPTION_ID { get { if (!_EXTRA_SUBSCRIPTION_IDReady) { _EXTRA_SUBSCRIPTION_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SUBSCRIPTION_ID"); _EXTRA_SUBSCRIPTION_IDReady = true; } return _EXTRA_SUBSCRIPTION_IDContent; } }
        private static Java.Lang.String _EXTRA_SUBSCRIPTION_IDContent = default;
        private static bool _EXTRA_SUBSCRIPTION_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#EXTRA_VOICEMAIL_NUMBER"/>
        /// </summary>
        public static Java.Lang.String EXTRA_VOICEMAIL_NUMBER { get { if (!_EXTRA_VOICEMAIL_NUMBERReady) { _EXTRA_VOICEMAIL_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_VOICEMAIL_NUMBER"); _EXTRA_VOICEMAIL_NUMBERReady = true; } return _EXTRA_VOICEMAIL_NUMBERContent; } }
        private static Java.Lang.String _EXTRA_VOICEMAIL_NUMBERContent = default;
        private static bool _EXTRA_VOICEMAIL_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#METADATA_HIDE_VOICEMAIL_SETTINGS_MENU"/>
        /// </summary>
        public static Java.Lang.String METADATA_HIDE_VOICEMAIL_SETTINGS_MENU { get { if (!_METADATA_HIDE_VOICEMAIL_SETTINGS_MENUReady) { _METADATA_HIDE_VOICEMAIL_SETTINGS_MENUContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_HIDE_VOICEMAIL_SETTINGS_MENU"); _METADATA_HIDE_VOICEMAIL_SETTINGS_MENUReady = true; } return _METADATA_HIDE_VOICEMAIL_SETTINGS_MENUContent; } }
        private static Java.Lang.String _METADATA_HIDE_VOICEMAIL_SETTINGS_MENUContent = default;
        private static bool _METADATA_HIDE_VOICEMAIL_SETTINGS_MENUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#VVM_TYPE_CVVM"/>
        /// </summary>
        public static Java.Lang.String VVM_TYPE_CVVM { get { if (!_VVM_TYPE_CVVMReady) { _VVM_TYPE_CVVMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VVM_TYPE_CVVM"); _VVM_TYPE_CVVMReady = true; } return _VVM_TYPE_CVVMContent; } }
        private static Java.Lang.String _VVM_TYPE_CVVMContent = default;
        private static bool _VVM_TYPE_CVVMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#VVM_TYPE_OMTP"/>
        /// </summary>
        public static Java.Lang.String VVM_TYPE_OMTP { get { if (!_VVM_TYPE_OMTPReady) { _VVM_TYPE_OMTPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VVM_TYPE_OMTP"); _VVM_TYPE_OMTPReady = true; } return _VVM_TYPE_OMTPContent; } }
        private static Java.Lang.String _VVM_TYPE_OMTPContent = default;
        private static bool _VVM_TYPE_OMTPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_1xRTT"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_1xRTT { get { if (!_NETWORK_TYPE_BITMASK_1xRTTReady) { _NETWORK_TYPE_BITMASK_1xRTTContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_1xRTT"); _NETWORK_TYPE_BITMASK_1xRTTReady = true; } return _NETWORK_TYPE_BITMASK_1xRTTContent; } }
        private static long _NETWORK_TYPE_BITMASK_1xRTTContent = default;
        private static bool _NETWORK_TYPE_BITMASK_1xRTTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_CDMA"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_CDMA { get { if (!_NETWORK_TYPE_BITMASK_CDMAReady) { _NETWORK_TYPE_BITMASK_CDMAContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_CDMA"); _NETWORK_TYPE_BITMASK_CDMAReady = true; } return _NETWORK_TYPE_BITMASK_CDMAContent; } }
        private static long _NETWORK_TYPE_BITMASK_CDMAContent = default;
        private static bool _NETWORK_TYPE_BITMASK_CDMAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_EDGE"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_EDGE { get { if (!_NETWORK_TYPE_BITMASK_EDGEReady) { _NETWORK_TYPE_BITMASK_EDGEContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_EDGE"); _NETWORK_TYPE_BITMASK_EDGEReady = true; } return _NETWORK_TYPE_BITMASK_EDGEContent; } }
        private static long _NETWORK_TYPE_BITMASK_EDGEContent = default;
        private static bool _NETWORK_TYPE_BITMASK_EDGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_EHRPD"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_EHRPD { get { if (!_NETWORK_TYPE_BITMASK_EHRPDReady) { _NETWORK_TYPE_BITMASK_EHRPDContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_EHRPD"); _NETWORK_TYPE_BITMASK_EHRPDReady = true; } return _NETWORK_TYPE_BITMASK_EHRPDContent; } }
        private static long _NETWORK_TYPE_BITMASK_EHRPDContent = default;
        private static bool _NETWORK_TYPE_BITMASK_EHRPDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_EVDO_0"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_EVDO_0 { get { if (!_NETWORK_TYPE_BITMASK_EVDO_0Ready) { _NETWORK_TYPE_BITMASK_EVDO_0Content = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_EVDO_0"); _NETWORK_TYPE_BITMASK_EVDO_0Ready = true; } return _NETWORK_TYPE_BITMASK_EVDO_0Content; } }
        private static long _NETWORK_TYPE_BITMASK_EVDO_0Content = default;
        private static bool _NETWORK_TYPE_BITMASK_EVDO_0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_EVDO_A"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_EVDO_A { get { if (!_NETWORK_TYPE_BITMASK_EVDO_AReady) { _NETWORK_TYPE_BITMASK_EVDO_AContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_EVDO_A"); _NETWORK_TYPE_BITMASK_EVDO_AReady = true; } return _NETWORK_TYPE_BITMASK_EVDO_AContent; } }
        private static long _NETWORK_TYPE_BITMASK_EVDO_AContent = default;
        private static bool _NETWORK_TYPE_BITMASK_EVDO_AReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_EVDO_B"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_EVDO_B { get { if (!_NETWORK_TYPE_BITMASK_EVDO_BReady) { _NETWORK_TYPE_BITMASK_EVDO_BContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_EVDO_B"); _NETWORK_TYPE_BITMASK_EVDO_BReady = true; } return _NETWORK_TYPE_BITMASK_EVDO_BContent; } }
        private static long _NETWORK_TYPE_BITMASK_EVDO_BContent = default;
        private static bool _NETWORK_TYPE_BITMASK_EVDO_BReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_GPRS"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_GPRS { get { if (!_NETWORK_TYPE_BITMASK_GPRSReady) { _NETWORK_TYPE_BITMASK_GPRSContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_GPRS"); _NETWORK_TYPE_BITMASK_GPRSReady = true; } return _NETWORK_TYPE_BITMASK_GPRSContent; } }
        private static long _NETWORK_TYPE_BITMASK_GPRSContent = default;
        private static bool _NETWORK_TYPE_BITMASK_GPRSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_GSM"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_GSM { get { if (!_NETWORK_TYPE_BITMASK_GSMReady) { _NETWORK_TYPE_BITMASK_GSMContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_GSM"); _NETWORK_TYPE_BITMASK_GSMReady = true; } return _NETWORK_TYPE_BITMASK_GSMContent; } }
        private static long _NETWORK_TYPE_BITMASK_GSMContent = default;
        private static bool _NETWORK_TYPE_BITMASK_GSMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_HSDPA"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_HSDPA { get { if (!_NETWORK_TYPE_BITMASK_HSDPAReady) { _NETWORK_TYPE_BITMASK_HSDPAContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_HSDPA"); _NETWORK_TYPE_BITMASK_HSDPAReady = true; } return _NETWORK_TYPE_BITMASK_HSDPAContent; } }
        private static long _NETWORK_TYPE_BITMASK_HSDPAContent = default;
        private static bool _NETWORK_TYPE_BITMASK_HSDPAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_HSPA"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_HSPA { get { if (!_NETWORK_TYPE_BITMASK_HSPAReady) { _NETWORK_TYPE_BITMASK_HSPAContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_HSPA"); _NETWORK_TYPE_BITMASK_HSPAReady = true; } return _NETWORK_TYPE_BITMASK_HSPAContent; } }
        private static long _NETWORK_TYPE_BITMASK_HSPAContent = default;
        private static bool _NETWORK_TYPE_BITMASK_HSPAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_HSPAP"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_HSPAP { get { if (!_NETWORK_TYPE_BITMASK_HSPAPReady) { _NETWORK_TYPE_BITMASK_HSPAPContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_HSPAP"); _NETWORK_TYPE_BITMASK_HSPAPReady = true; } return _NETWORK_TYPE_BITMASK_HSPAPContent; } }
        private static long _NETWORK_TYPE_BITMASK_HSPAPContent = default;
        private static bool _NETWORK_TYPE_BITMASK_HSPAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_HSUPA"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_HSUPA { get { if (!_NETWORK_TYPE_BITMASK_HSUPAReady) { _NETWORK_TYPE_BITMASK_HSUPAContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_HSUPA"); _NETWORK_TYPE_BITMASK_HSUPAReady = true; } return _NETWORK_TYPE_BITMASK_HSUPAContent; } }
        private static long _NETWORK_TYPE_BITMASK_HSUPAContent = default;
        private static bool _NETWORK_TYPE_BITMASK_HSUPAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_IWLAN"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_IWLAN { get { if (!_NETWORK_TYPE_BITMASK_IWLANReady) { _NETWORK_TYPE_BITMASK_IWLANContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_IWLAN"); _NETWORK_TYPE_BITMASK_IWLANReady = true; } return _NETWORK_TYPE_BITMASK_IWLANContent; } }
        private static long _NETWORK_TYPE_BITMASK_IWLANContent = default;
        private static bool _NETWORK_TYPE_BITMASK_IWLANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_LTE"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_LTE { get { if (!_NETWORK_TYPE_BITMASK_LTEReady) { _NETWORK_TYPE_BITMASK_LTEContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_LTE"); _NETWORK_TYPE_BITMASK_LTEReady = true; } return _NETWORK_TYPE_BITMASK_LTEContent; } }
        private static long _NETWORK_TYPE_BITMASK_LTEContent = default;
        private static bool _NETWORK_TYPE_BITMASK_LTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_LTE_CA"/>
        /// </summary>
        [global::System.Obsolete()]
        public static long NETWORK_TYPE_BITMASK_LTE_CA { get { if (!_NETWORK_TYPE_BITMASK_LTE_CAReady) { _NETWORK_TYPE_BITMASK_LTE_CAContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_LTE_CA"); _NETWORK_TYPE_BITMASK_LTE_CAReady = true; } return _NETWORK_TYPE_BITMASK_LTE_CAContent; } }
        private static long _NETWORK_TYPE_BITMASK_LTE_CAContent = default;
        private static bool _NETWORK_TYPE_BITMASK_LTE_CAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_NR"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_NR { get { if (!_NETWORK_TYPE_BITMASK_NRReady) { _NETWORK_TYPE_BITMASK_NRContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_NR"); _NETWORK_TYPE_BITMASK_NRReady = true; } return _NETWORK_TYPE_BITMASK_NRContent; } }
        private static long _NETWORK_TYPE_BITMASK_NRContent = default;
        private static bool _NETWORK_TYPE_BITMASK_NRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_TD_SCDMA"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_TD_SCDMA { get { if (!_NETWORK_TYPE_BITMASK_TD_SCDMAReady) { _NETWORK_TYPE_BITMASK_TD_SCDMAContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_TD_SCDMA"); _NETWORK_TYPE_BITMASK_TD_SCDMAReady = true; } return _NETWORK_TYPE_BITMASK_TD_SCDMAContent; } }
        private static long _NETWORK_TYPE_BITMASK_TD_SCDMAContent = default;
        private static bool _NETWORK_TYPE_BITMASK_TD_SCDMAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_UMTS"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_UMTS { get { if (!_NETWORK_TYPE_BITMASK_UMTSReady) { _NETWORK_TYPE_BITMASK_UMTSContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_UMTS"); _NETWORK_TYPE_BITMASK_UMTSReady = true; } return _NETWORK_TYPE_BITMASK_UMTSContent; } }
        private static long _NETWORK_TYPE_BITMASK_UMTSContent = default;
        private static bool _NETWORK_TYPE_BITMASK_UMTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#NETWORK_TYPE_BITMASK_UNKNOWN"/>
        /// </summary>
        public static long NETWORK_TYPE_BITMASK_UNKNOWN { get { if (!_NETWORK_TYPE_BITMASK_UNKNOWNReady) { _NETWORK_TYPE_BITMASK_UNKNOWNContent = SGetField<long>(LocalBridgeClazz, "NETWORK_TYPE_BITMASK_UNKNOWN"); _NETWORK_TYPE_BITMASK_UNKNOWNReady = true; } return _NETWORK_TYPE_BITMASK_UNKNOWNContent; } }
        private static long _NETWORK_TYPE_BITMASK_UNKNOWNContent = default;
        private static bool _NETWORK_TYPE_BITMASK_UNKNOWNReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getMaximumCallComposerPictureSize()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public static long GetMaximumCallComposerPictureSize()
        {
            return SExecuteWithSignature<long>(LocalBridgeClazz, "getMaximumCallComposerPictureSize", "()J");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <returns><see cref="Android.Net.Uri"/></returns>
        public Android.Net.Uri GetVoicemailRingtoneUri(Android.Telecom.PhoneAccountHandle arg0)
        {
            return IExecuteWithSignature<Android.Net.Uri>("getVoicemailRingtoneUri", "(Landroid/telecom/PhoneAccountHandle;)Landroid/net/Uri;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getCarrierConfig()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.PersistableBundle"/></returns>
        public Android.Os.PersistableBundle GetCarrierConfig()
        {
            return IExecuteWithSignature<Android.Os.PersistableBundle>("getCarrierConfig", "()Landroid/os/PersistableBundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getPhoneAccountHandle()"/>
        /// </summary>
        /// <returns><see cref="Android.Telecom.PhoneAccountHandle"/></returns>
        public Android.Telecom.PhoneAccountHandle GetPhoneAccountHandle()
        {
            return IExecuteWithSignature<Android.Telecom.PhoneAccountHandle>("getPhoneAccountHandle", "()Landroid/telecom/PhoneAccountHandle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getCellLocation()"/>
        /// </summary>
        /// <returns><see cref="Android.Telephony.CellLocation"/></returns>
        [global::System.Obsolete()]
        public Android.Telephony.CellLocation GetCellLocation()
        {
            return IExecuteWithSignature<Android.Telephony.CellLocation>("getCellLocation", "()Landroid/telephony/CellLocation;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#iccOpenLogicalChannel(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Telephony.IccOpenLogicalChannelResponse"/></returns>
        public Android.Telephony.IccOpenLogicalChannelResponse IccOpenLogicalChannel(Java.Lang.String arg0, int arg1)
        {
            return IExecute<Android.Telephony.IccOpenLogicalChannelResponse>("iccOpenLogicalChannel", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#iccOpenLogicalChannel(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Telephony.IccOpenLogicalChannelResponse"/></returns>
        [global::System.Obsolete()]
        public Android.Telephony.IccOpenLogicalChannelResponse IccOpenLogicalChannel(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Telephony.IccOpenLogicalChannelResponse>("iccOpenLogicalChannel", "(Ljava/lang/String;)Landroid/telephony/IccOpenLogicalChannelResponse;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#requestNetworkScan(android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager.NetworkScanCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.NetworkScanRequest"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Telephony.TelephonyScanManager.NetworkScanCallback"/></param>
        /// <returns><see cref="Android.Telephony.NetworkScan"/></returns>
        public Android.Telephony.NetworkScan RequestNetworkScan(Android.Telephony.NetworkScanRequest arg0, Java.Util.Concurrent.Executor arg1, Android.Telephony.TelephonyScanManager.NetworkScanCallback arg2)
        {
            return IExecute<Android.Telephony.NetworkScan>("requestNetworkScan", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#requestNetworkScan(int,android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager.NetworkScanCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Telephony.NetworkScanRequest"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Android.Telephony.TelephonyScanManager.NetworkScanCallback"/></param>
        /// <returns><see cref="Android.Telephony.NetworkScan"/></returns>
        public Android.Telephony.NetworkScan RequestNetworkScan(int arg0, Android.Telephony.NetworkScanRequest arg1, Java.Util.Concurrent.Executor arg2, Android.Telephony.TelephonyScanManager.NetworkScanCallback arg3)
        {
            return IExecute<Android.Telephony.NetworkScan>("requestNetworkScan", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getServiceState()"/>
        /// </summary>
        /// <returns><see cref="Android.Telephony.ServiceState"/></returns>
        public Android.Telephony.ServiceState GetServiceState()
        {
            return IExecuteWithSignature<Android.Telephony.ServiceState>("getServiceState", "()Landroid/telephony/ServiceState;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getServiceState(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Telephony.ServiceState"/></returns>
        public Android.Telephony.ServiceState GetServiceState(int arg0)
        {
            return IExecuteWithSignature<Android.Telephony.ServiceState>("getServiceState", "(I)Landroid/telephony/ServiceState;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSignalStrength()"/>
        /// </summary>
        /// <returns><see cref="Android.Telephony.SignalStrength"/></returns>
        public Android.Telephony.SignalStrength GetSignalStrength()
        {
            return IExecuteWithSignature<Android.Telephony.SignalStrength>("getSignalStrength", "()Landroid/telephony/SignalStrength;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#createForPhoneAccountHandle(android.telecom.PhoneAccountHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <returns><see cref="Android.Telephony.TelephonyManager"/></returns>
        public Android.Telephony.TelephonyManager CreateForPhoneAccountHandle(Android.Telecom.PhoneAccountHandle arg0)
        {
            return IExecuteWithSignature<Android.Telephony.TelephonyManager>("createForPhoneAccountHandle", "(Landroid/telecom/PhoneAccountHandle;)Landroid/telephony/TelephonyManager;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#createForSubscriptionId(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Telephony.TelephonyManager"/></returns>
        public Android.Telephony.TelephonyManager CreateForSubscriptionId(int arg0)
        {
            return IExecuteWithSignature<Android.Telephony.TelephonyManager>("createForSubscriptionId", "(I)Landroid/telephony/TelephonyManager;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#canChangeDtmfToneLength()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool CanChangeDtmfToneLength()
        {
            return IExecuteWithSignature<bool>("canChangeDtmfToneLength", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#doesSwitchMultiSimConfigTriggerReboot()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool DoesSwitchMultiSimConfigTriggerReboot()
        {
            return IExecuteWithSignature<bool>("doesSwitchMultiSimConfigTriggerReboot", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#hasCarrierPrivileges()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasCarrierPrivileges()
        {
            return IExecuteWithSignature<bool>("hasCarrierPrivileges", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#hasIccCard()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasIccCard()
        {
            return IExecuteWithSignature<bool>("hasIccCard", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#iccCloseLogicalChannel(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IccCloseLogicalChannel(int arg0)
        {
            return IExecuteWithSignature<bool>("iccCloseLogicalChannel", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isConcurrentVoiceAndDataSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsConcurrentVoiceAndDataSupported()
        {
            return IExecuteWithSignature<bool>("isConcurrentVoiceAndDataSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isDataCapable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDataCapable()
        {
            return IExecuteWithSignature<bool>("isDataCapable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isDataConnectionAllowed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDataConnectionAllowed()
        {
            return IExecuteWithSignature<bool>("isDataConnectionAllowed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isDataEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDataEnabled()
        {
            return IExecuteWithSignature<bool>("isDataEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isDataEnabledForReason(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsDataEnabledForReason(int arg0)
        {
            return IExecuteWithSignature<bool>("isDataEnabledForReason", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isDataRoamingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDataRoamingEnabled()
        {
            return IExecuteWithSignature<bool>("isDataRoamingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isDeviceSmsCapable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDeviceSmsCapable()
        {
            return IExecuteWithSignature<bool>("isDeviceSmsCapable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isDeviceVoiceCapable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDeviceVoiceCapable()
        {
            return IExecuteWithSignature<bool>("isDeviceVoiceCapable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isEmergencyNumber(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsEmergencyNumber(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("isEmergencyNumber", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isHearingAidCompatibilitySupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHearingAidCompatibilitySupported()
        {
            return IExecuteWithSignature<bool>("isHearingAidCompatibilitySupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isManualNetworkSelectionAllowed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsManualNetworkSelectionAllowed()
        {
            return IExecuteWithSignature<bool>("isManualNetworkSelectionAllowed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isModemEnabledForSlot(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsModemEnabledForSlot(int arg0)
        {
            return IExecuteWithSignature<bool>("isModemEnabledForSlot", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isNetworkRoaming()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsNetworkRoaming()
        {
            return IExecuteWithSignature<bool>("isNetworkRoaming", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isPremiumCapabilityAvailableForPurchase(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsPremiumCapabilityAvailableForPurchase(int arg0)
        {
            return IExecuteWithSignature<bool>("isPremiumCapabilityAvailableForPurchase", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isRadioInterfaceCapabilitySupported(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsRadioInterfaceCapabilitySupported(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("isRadioInterfaceCapabilitySupported", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isRttSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsRttSupported()
        {
            return IExecuteWithSignature<bool>("isRttSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isSmsCapable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsSmsCapable()
        {
            return IExecuteWithSignature<bool>("isSmsCapable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isTtyModeSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsTtyModeSupported()
        {
            return IExecuteWithSignature<bool>("isTtyModeSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isVoiceCapable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsVoiceCapable()
        {
            return IExecuteWithSignature<bool>("isVoiceCapable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsVoicemailVibrationEnabled(Android.Telecom.PhoneAccountHandle arg0)
        {
            return IExecuteWithSignature<bool>("isVoicemailVibrationEnabled", "(Landroid/telecom/PhoneAccountHandle;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isWorldPhone()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWorldPhone()
        {
            return IExecuteWithSignature<bool>("isWorldPhone", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setLine1NumberForDisplay(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool SetLine1NumberForDisplay(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecute<bool>("setLine1NumberForDisplay", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setNetworkSelectionModeManual(java.lang.String,boolean,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetNetworkSelectionModeManual(Java.Lang.String arg0, bool arg1, int arg2)
        {
            return IExecute<bool>("setNetworkSelectionModeManual", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setNetworkSelectionModeManual(java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetNetworkSelectionModeManual(Java.Lang.String arg0, bool arg1)
        {
            return IExecute<bool>("setNetworkSelectionModeManual", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setOperatorBrandOverride(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetOperatorBrandOverride(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("setOperatorBrandOverride", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setPreferredNetworkTypeToGlobal()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool SetPreferredNetworkTypeToGlobal()
        {
            return IExecuteWithSignature<bool>("setPreferredNetworkTypeToGlobal", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setVoiceMailNumber(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetVoiceMailNumber(Java.Lang.String arg0, Java.Lang.String arg1)
        {
            return IExecute<bool>("setVoiceMailNumber", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#iccExchangeSimIO(int,int,int,int,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="byte"/></returns>
        public byte[] IccExchangeSimIO(int arg0, int arg1, int arg2, int arg3, int arg4, Java.Lang.String arg5)
        {
            return IExecuteArray<byte>("iccExchangeSimIO", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getActiveModemCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetActiveModemCount()
        {
            return IExecuteWithSignature<int>("getActiveModemCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getCallComposerStatus()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCallComposerStatus()
        {
            return IExecuteWithSignature<int>("getCallComposerStatus", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getCallState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetCallState()
        {
            return IExecuteWithSignature<int>("getCallState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getCallStateForSubscription()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCallStateForSubscription()
        {
            return IExecuteWithSignature<int>("getCallStateForSubscription", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getCardIdForDefaultEuicc()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCardIdForDefaultEuicc()
        {
            return IExecuteWithSignature<int>("getCardIdForDefaultEuicc", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getCarrierIdFromSimMccMnc()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetCarrierIdFromSimMccMnc()
        {
            return IExecuteWithSignature<int>("getCarrierIdFromSimMccMnc", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getDataActivity()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDataActivity()
        {
            return IExecuteWithSignature<int>("getDataActivity", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getDataNetworkType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDataNetworkType()
        {
            return IExecuteWithSignature<int>("getDataNetworkType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getDataState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDataState()
        {
            return IExecuteWithSignature<int>("getDataState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkSelectionMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNetworkSelectionMode()
        {
            return IExecuteWithSignature<int>("getNetworkSelectionMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetNetworkType()
        {
            return IExecuteWithSignature<int>("getNetworkType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getPhoneCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetPhoneCount()
        {
            return IExecuteWithSignature<int>("getPhoneCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getPhoneType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPhoneType()
        {
            return IExecuteWithSignature<int>("getPhoneType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getPreferredOpportunisticDataSubscription()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPreferredOpportunisticDataSubscription()
        {
            return IExecuteWithSignature<int>("getPreferredOpportunisticDataSubscription", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimCarrierId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSimCarrierId()
        {
            return IExecuteWithSignature<int>("getSimCarrierId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimSpecificCarrierId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSimSpecificCarrierId()
        {
            return IExecuteWithSignature<int>("getSimSpecificCarrierId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSimState()
        {
            return IExecuteWithSignature<int>("getSimState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimState(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetSimState(int arg0)
        {
            return IExecuteWithSignature<int>("getSimState", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSubscriptionId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSubscriptionId()
        {
            return IExecuteWithSignature<int>("getSubscriptionId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSubscriptionId(android.telecom.PhoneAccountHandle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetSubscriptionId(Android.Telecom.PhoneAccountHandle arg0)
        {
            return IExecuteWithSignature<int>("getSubscriptionId", "(Landroid/telecom/PhoneAccountHandle;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSupportedModemCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSupportedModemCount()
        {
            return IExecuteWithSignature<int>("getSupportedModemCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getVoiceNetworkType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVoiceNetworkType()
        {
            return IExecuteWithSignature<int>("getVoiceNetworkType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#isMultiSimSupported()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int IsMultiSimSupported()
        {
            return IExecuteWithSignature<int>("isMultiSimSupported", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setForbiddenPlmns(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetForbiddenPlmns(Java.Util.List<Java.Lang.String> arg0)
        {
            return IExecuteWithSignature<int>("setForbiddenPlmns", "(Ljava/util/List;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimCarrierIdName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetSimCarrierIdName()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getSimCarrierIdName", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimSpecificCarrierIdName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetSimSpecificCarrierIdName()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getSimSpecificCarrierIdName", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getDeviceId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.String GetDeviceId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getDeviceId", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getDeviceId(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.String GetDeviceId(int arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getDeviceId", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getDeviceSoftwareVersion()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetDeviceSoftwareVersion()
        {
            return IExecuteWithSignature<Java.Lang.String>("getDeviceSoftwareVersion", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getGroupIdLevel1()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetGroupIdLevel1()
        {
            return IExecuteWithSignature<Java.Lang.String>("getGroupIdLevel1", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getIccAuthentication(int,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetIccAuthentication(int arg0, int arg1, Java.Lang.String arg2)
        {
            return IExecute<Java.Lang.String>("getIccAuthentication", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getImei()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetImei()
        {
            return IExecuteWithSignature<Java.Lang.String>("getImei", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getImei(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetImei(int arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getImei", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getLine1Number()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.String GetLine1Number()
        {
            return IExecuteWithSignature<Java.Lang.String>("getLine1Number", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getManualNetworkSelectionPlmn()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetManualNetworkSelectionPlmn()
        {
            return IExecuteWithSignature<Java.Lang.String>("getManualNetworkSelectionPlmn", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getManufacturerCode()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetManufacturerCode()
        {
            return IExecuteWithSignature<Java.Lang.String>("getManufacturerCode", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getManufacturerCode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetManufacturerCode(int arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getManufacturerCode", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getMeid()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetMeid()
        {
            return IExecuteWithSignature<Java.Lang.String>("getMeid", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getMeid(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetMeid(int arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getMeid", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getMmsUAProfUrl()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetMmsUAProfUrl()
        {
            return IExecuteWithSignature<Java.Lang.String>("getMmsUAProfUrl", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getMmsUserAgent()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetMmsUserAgent()
        {
            return IExecuteWithSignature<Java.Lang.String>("getMmsUserAgent", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getNai()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetNai()
        {
            return IExecuteWithSignature<Java.Lang.String>("getNai", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkCountryIso()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetNetworkCountryIso()
        {
            return IExecuteWithSignature<Java.Lang.String>("getNetworkCountryIso", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkCountryIso(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetNetworkCountryIso(int arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getNetworkCountryIso", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkOperator()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetNetworkOperator()
        {
            return IExecuteWithSignature<Java.Lang.String>("getNetworkOperator", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkOperatorName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetNetworkOperatorName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getNetworkOperatorName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkSpecifier()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetNetworkSpecifier()
        {
            return IExecuteWithSignature<Java.Lang.String>("getNetworkSpecifier", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getPrimaryImei()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetPrimaryImei()
        {
            return IExecuteWithSignature<Java.Lang.String>("getPrimaryImei", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimCountryIso()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetSimCountryIso()
        {
            return IExecuteWithSignature<Java.Lang.String>("getSimCountryIso", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimOperator()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetSimOperator()
        {
            return IExecuteWithSignature<Java.Lang.String>("getSimOperator", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimOperatorName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetSimOperatorName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getSimOperatorName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSimSerialNumber()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetSimSerialNumber()
        {
            return IExecuteWithSignature<Java.Lang.String>("getSimSerialNumber", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSubscriberId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetSubscriberId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getSubscriberId", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getTypeAllocationCode()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetTypeAllocationCode()
        {
            return IExecuteWithSignature<Java.Lang.String>("getTypeAllocationCode", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getTypeAllocationCode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetTypeAllocationCode(int arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("getTypeAllocationCode", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getVisualVoicemailPackageName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetVisualVoicemailPackageName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getVisualVoicemailPackageName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getVoiceMailAlphaTag()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetVoiceMailAlphaTag()
        {
            return IExecuteWithSignature<Java.Lang.String>("getVoiceMailAlphaTag", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getVoiceMailNumber()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetVoiceMailNumber()
        {
            return IExecuteWithSignature<Java.Lang.String>("getVoiceMailNumber", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String IccTransmitApduBasicChannel(int arg0, int arg1, int arg2, int arg3, int arg4, Java.Lang.String arg5)
        {
            return IExecute<Java.Lang.String>("iccTransmitApduBasicChannel", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String IccTransmitApduLogicalChannel(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, Java.Lang.String arg6)
        {
            return IExecute<Java.Lang.String>("iccTransmitApduLogicalChannel", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#sendEnvelopeWithStatus(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String SendEnvelopeWithStatus(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("sendEnvelopeWithStatus", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getForbiddenPlmns()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String[] GetForbiddenPlmns()
        {
            return IExecuteWithSignatureArray<Java.Lang.String>("getForbiddenPlmns", "()[Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getAllCellInfo()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Telephony.CellInfo> GetAllCellInfo()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Telephony.CellInfo>>("getAllCellInfo", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getUiccCardsInfo()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Telephony.UiccCardInfo> GetUiccCardsInfo()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Telephony.UiccCardInfo>>("getUiccCardsInfo", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getEquivalentHomePlmns()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetEquivalentHomePlmns()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getEquivalentHomePlmns", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getEmergencyNumberList()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<Java.Lang.Integer, Java.Util.List<Android.Telephony.Emergency.EmergencyNumber>> GetEmergencyNumberList()
        {
            return IExecuteWithSignature<Java.Util.Map<Java.Lang.Integer, Java.Util.List<Android.Telephony.Emergency.EmergencyNumber>>>("getEmergencyNumberList", "()Ljava/util/Map;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getEmergencyNumberList(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<Java.Lang.Integer, Java.Util.List<Android.Telephony.Emergency.EmergencyNumber>> GetEmergencyNumberList(int arg0)
        {
            return IExecuteWithSignature<Java.Util.Map<Java.Lang.Integer, Java.Util.List<Android.Telephony.Emergency.EmergencyNumber>>>("getEmergencyNumberList", "(I)Ljava/util/Map;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getAllowedNetworkTypesForReason(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetAllowedNetworkTypesForReason(int arg0)
        {
            return IExecuteWithSignature<long>("getAllowedNetworkTypesForReason", "(I)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getSupportedRadioAccessFamily()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetSupportedRadioAccessFamily()
        {
            return IExecuteWithSignature<long>("getSupportedRadioAccessFamily", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#clearSignalStrengthUpdateRequest(android.telephony.SignalStrengthUpdateRequest)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.SignalStrengthUpdateRequest"/></param>
        public void ClearSignalStrengthUpdateRequest(Android.Telephony.SignalStrengthUpdateRequest arg0)
        {
            IExecuteWithSignature("clearSignalStrengthUpdateRequest", "(Landroid/telephony/SignalStrengthUpdateRequest;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getCarrierRestrictionStatus(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void GetCarrierRestrictionStatus(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Java.Lang.Integer> arg1)
        {
            IExecute("getCarrierRestrictionStatus", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#getNetworkSlicingConfiguration(java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void GetNetworkSlicingConfiguration(Java.Util.Concurrent.Executor arg0, Android.Os.OutcomeReceiver<Android.Telephony.Data.NetworkSlicingConfig, Android.Telephony.TelephonyManager.NetworkSlicingException> arg1)
        {
            IExecute("getNetworkSlicingConfiguration", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#listen(android.telephony.PhoneStateListener,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.PhoneStateListener"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void Listen(Android.Telephony.PhoneStateListener arg0, int arg1)
        {
            IExecute("listen", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#purchasePremiumCapability(int,java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.Consumer"/></param>
        public void PurchasePremiumCapability(int arg0, Java.Util.Concurrent.Executor arg1, Java.Util.Function.Consumer<Java.Lang.Integer> arg2)
        {
            IExecute("purchasePremiumCapability", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#rebootModem()"/>
        /// </summary>
        public void RebootModem()
        {
            IExecuteWithSignature("rebootModem", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#registerTelephonyCallback(int,java.util.concurrent.Executor,android.telephony.TelephonyCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.Telephony.TelephonyCallback"/></param>
        public void RegisterTelephonyCallback(int arg0, Java.Util.Concurrent.Executor arg1, Android.Telephony.TelephonyCallback arg2)
        {
            IExecute("registerTelephonyCallback", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#registerTelephonyCallback(java.util.concurrent.Executor,android.telephony.TelephonyCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Telephony.TelephonyCallback"/></param>
        public void RegisterTelephonyCallback(Java.Util.Concurrent.Executor arg0, Android.Telephony.TelephonyCallback arg1)
        {
            IExecute("registerTelephonyCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#requestCellInfoUpdate(java.util.concurrent.Executor,android.telephony.TelephonyManager.CellInfoCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Telephony.TelephonyManager.CellInfoCallback"/></param>
        public void RequestCellInfoUpdate(Java.Util.Concurrent.Executor arg0, Android.Telephony.TelephonyManager.CellInfoCallback arg1)
        {
            IExecute("requestCellInfoUpdate", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#sendDialerSpecialCode(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SendDialerSpecialCode(Java.Lang.String arg0)
        {
            IExecuteWithSignature("sendDialerSpecialCode", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#sendUssdRequest(java.lang.String,android.telephony.TelephonyManager.UssdResponseCallback,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Telephony.TelephonyManager.UssdResponseCallback"/></param>
        /// <param name="arg2"><see cref="Android.Os.Handler"/></param>
        public void SendUssdRequest(Java.Lang.String arg0, Android.Telephony.TelephonyManager.UssdResponseCallback arg1, Android.Os.Handler arg2)
        {
            IExecute("sendUssdRequest", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#sendVisualVoicemailSms(java.lang.String,int,java.lang.String,android.app.PendingIntent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Android.App.PendingIntent"/></param>
        public void SendVisualVoicemailSms(Java.Lang.String arg0, int arg1, Java.Lang.String arg2, Android.App.PendingIntent arg3)
        {
            IExecute("sendVisualVoicemailSms", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setAllowedNetworkTypesForReason(int,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void SetAllowedNetworkTypesForReason(int arg0, long arg1)
        {
            IExecute("setAllowedNetworkTypesForReason", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setCallComposerStatus(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetCallComposerStatus(int arg0)
        {
            IExecuteWithSignature("setCallComposerStatus", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setDataEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetDataEnabled(bool arg0)
        {
            IExecuteWithSignature("setDataEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setDataEnabledForReason(int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetDataEnabledForReason(int arg0, bool arg1)
        {
            IExecute("setDataEnabledForReason", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setNetworkSelectionModeAutomatic()"/>
        /// </summary>
        public void SetNetworkSelectionModeAutomatic()
        {
            IExecuteWithSignature("setNetworkSelectionModeAutomatic", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setPreferredOpportunisticDataSubscription(int,boolean,java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Java.Util.Function.Consumer"/></param>
        public void SetPreferredOpportunisticDataSubscription(int arg0, bool arg1, Java.Util.Concurrent.Executor arg2, Java.Util.Function.Consumer<Java.Lang.Integer> arg3)
        {
            IExecute("setPreferredOpportunisticDataSubscription", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setSignalStrengthUpdateRequest(android.telephony.SignalStrengthUpdateRequest)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.SignalStrengthUpdateRequest"/></param>
        public void SetSignalStrengthUpdateRequest(Android.Telephony.SignalStrengthUpdateRequest arg0)
        {
            IExecuteWithSignature("setSignalStrengthUpdateRequest", "(Landroid/telephony/SignalStrengthUpdateRequest;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setVisualVoicemailSmsFilterSettings(android.telephony.VisualVoicemailSmsFilterSettings)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.VisualVoicemailSmsFilterSettings"/></param>
        public void SetVisualVoicemailSmsFilterSettings(Android.Telephony.VisualVoicemailSmsFilterSettings arg0)
        {
            IExecuteWithSignature("setVisualVoicemailSmsFilterSettings", "(Landroid/telephony/VisualVoicemailSmsFilterSettings;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setVoicemailRingtoneUri(android.telecom.PhoneAccountHandle,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        [global::System.Obsolete()]
        public void SetVoicemailRingtoneUri(Android.Telecom.PhoneAccountHandle arg0, Android.Net.Uri arg1)
        {
            IExecute("setVoicemailRingtoneUri", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#setVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telecom.PhoneAccountHandle"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetVoicemailVibrationEnabled(Android.Telecom.PhoneAccountHandle arg0, bool arg1)
        {
            IExecute("setVoicemailVibrationEnabled", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#switchMultiSimConfig(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SwitchMultiSimConfig(int arg0)
        {
            IExecuteWithSignature("switchMultiSimConfig", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#unregisterTelephonyCallback(android.telephony.TelephonyCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.TelephonyCallback"/></param>
        public void UnregisterTelephonyCallback(Android.Telephony.TelephonyCallback arg0)
        {
            IExecuteWithSignature("unregisterTelephonyCallback", "(Landroid/telephony/TelephonyCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#updateAvailableNetworks(java.util.List,java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.Consumer"/></param>
        public void UpdateAvailableNetworks(Java.Util.List<Android.Telephony.AvailableNetworkInfo> arg0, Java.Util.Concurrent.Executor arg1, Java.Util.Function.Consumer<Java.Lang.Integer> arg2)
        {
            IExecute("updateAvailableNetworks", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#uploadCallComposerPicture(java.io.InputStream,java.lang.String,java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void UploadCallComposerPicture(Java.Io.InputStream arg0, Java.Lang.String arg1, Java.Util.Concurrent.Executor arg2, Android.Os.OutcomeReceiver<Android.Os.ParcelUuid, Android.Telephony.TelephonyManager.CallComposerException> arg3)
        {
            IExecute("uploadCallComposerPicture", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.html#uploadCallComposerPicture(java.nio.file.Path,java.lang.String,java.util.concurrent.Executor,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.File.Path"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void UploadCallComposerPicture(Java.Nio.File.Path arg0, Java.Lang.String arg1, Java.Util.Concurrent.Executor arg2, Android.Os.OutcomeReceiver<Android.Os.ParcelUuid, Android.Telephony.TelephonyManager.CallComposerException> arg3)
        {
            IExecute("uploadCallComposerPicture", arg0, arg1, arg2, arg3);
        }

        #endregion

        #region Nested classes
        #region CallComposerException
        public partial class CallComposerException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region CellInfoCallback
        public partial class CellInfoCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.CellInfoCallback.html#ERROR_MODEM_ERROR"/>
            /// </summary>
            public static int ERROR_MODEM_ERROR { get { if (!_ERROR_MODEM_ERRORReady) { _ERROR_MODEM_ERRORContent = SGetField<int>(LocalBridgeClazz, "ERROR_MODEM_ERROR"); _ERROR_MODEM_ERRORReady = true; } return _ERROR_MODEM_ERRORContent; } }
            private static int _ERROR_MODEM_ERRORContent = default;
            private static bool _ERROR_MODEM_ERRORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.CellInfoCallback.html#ERROR_TIMEOUT"/>
            /// </summary>
            public static int ERROR_TIMEOUT { get { if (!_ERROR_TIMEOUTReady) { _ERROR_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "ERROR_TIMEOUT"); _ERROR_TIMEOUTReady = true; } return _ERROR_TIMEOUTContent; } }
            private static int _ERROR_TIMEOUTContent = default;
            private static bool _ERROR_TIMEOUTReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.CellInfoCallback.html#onCellInfo(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            public void OnCellInfo(Java.Util.List<Android.Telephony.CellInfo> arg0)
            {
                IExecuteWithSignature("onCellInfo", "(Ljava/util/List;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.CellInfoCallback.html#onError(int,java.lang.Throwable)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Lang.Throwable"/></param>
            public void OnError(int arg0, MASES.JCOBridge.C2JBridge.JVMBridgeException arg1)
            {
                IExecute("onError", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ModemErrorException
        public partial class ModemErrorException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region NetworkSlicingException
        public partial class NetworkSlicingException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TimeoutException
        public partial class TimeoutException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region UssdResponseCallback
        public partial class UssdResponseCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.UssdResponseCallback.html#onReceiveUssdResponse(android.telephony.TelephonyManager,java.lang.String,java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telephony.TelephonyManager"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
            public void OnReceiveUssdResponse(Android.Telephony.TelephonyManager arg0, Java.Lang.String arg1, Java.Lang.CharSequence arg2)
            {
                IExecute("onReceiveUssdResponse", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/TelephonyManager.UssdResponseCallback.html#onReceiveUssdResponseFailed(android.telephony.TelephonyManager,java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telephony.TelephonyManager"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public void OnReceiveUssdResponseFailed(Android.Telephony.TelephonyManager arg0, Java.Lang.String arg1, int arg2)
            {
                IExecute("onReceiveUssdResponseFailed", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Telephony
{
    #region BarringInfo
    public partial class BarringInfo
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.html#BARRING_SERVICE_TYPE_CS_FALLBACK"/>
        /// </summary>
        public static int BARRING_SERVICE_TYPE_CS_FALLBACK { get { if (!_BARRING_SERVICE_TYPE_CS_FALLBACKReady) { _BARRING_SERVICE_TYPE_CS_FALLBACKContent = SGetField<int>(LocalBridgeClazz, "BARRING_SERVICE_TYPE_CS_FALLBACK"); _BARRING_SERVICE_TYPE_CS_FALLBACKReady = true; } return _BARRING_SERVICE_TYPE_CS_FALLBACKContent; } }
        private static int _BARRING_SERVICE_TYPE_CS_FALLBACKContent = default;
        private static bool _BARRING_SERVICE_TYPE_CS_FALLBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.html#BARRING_SERVICE_TYPE_CS_SERVICE"/>
        /// </summary>
        public static int BARRING_SERVICE_TYPE_CS_SERVICE { get { if (!_BARRING_SERVICE_TYPE_CS_SERVICEReady) { _BARRING_SERVICE_TYPE_CS_SERVICEContent = SGetField<int>(LocalBridgeClazz, "BARRING_SERVICE_TYPE_CS_SERVICE"); _BARRING_SERVICE_TYPE_CS_SERVICEReady = true; } return _BARRING_SERVICE_TYPE_CS_SERVICEContent; } }
        private static int _BARRING_SERVICE_TYPE_CS_SERVICEContent = default;
        private static bool _BARRING_SERVICE_TYPE_CS_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.html#BARRING_SERVICE_TYPE_CS_VOICE"/>
        /// </summary>
        public static int BARRING_SERVICE_TYPE_CS_VOICE { get { if (!_BARRING_SERVICE_TYPE_CS_VOICEReady) { _BARRING_SERVICE_TYPE_CS_VOICEContent = SGetField<int>(LocalBridgeClazz, "BARRING_SERVICE_TYPE_CS_VOICE"); _BARRING_SERVICE_TYPE_CS_VOICEReady = true; } return _BARRING_SERVICE_TYPE_CS_VOICEContent; } }
        private static int _BARRING_SERVICE_TYPE_CS_VOICEContent = default;
        private static bool _BARRING_SERVICE_TYPE_CS_VOICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.html#BARRING_SERVICE_TYPE_EMERGENCY"/>
        /// </summary>
        public static int BARRING_SERVICE_TYPE_EMERGENCY { get { if (!_BARRING_SERVICE_TYPE_EMERGENCYReady) { _BARRING_SERVICE_TYPE_EMERGENCYContent = SGetField<int>(LocalBridgeClazz, "BARRING_SERVICE_TYPE_EMERGENCY"); _BARRING_SERVICE_TYPE_EMERGENCYReady = true; } return _BARRING_SERVICE_TYPE_EMERGENCYContent; } }
        private static int _BARRING_SERVICE_TYPE_EMERGENCYContent = default;
        private static bool _BARRING_SERVICE_TYPE_EMERGENCYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.html#BARRING_SERVICE_TYPE_MMTEL_VIDEO"/>
        /// </summary>
        public static int BARRING_SERVICE_TYPE_MMTEL_VIDEO { get { if (!_BARRING_SERVICE_TYPE_MMTEL_VIDEOReady) { _BARRING_SERVICE_TYPE_MMTEL_VIDEOContent = SGetField<int>(LocalBridgeClazz, "BARRING_SERVICE_TYPE_MMTEL_VIDEO"); _BARRING_SERVICE_TYPE_MMTEL_VIDEOReady = true; } return _BARRING_SERVICE_TYPE_MMTEL_VIDEOContent; } }
        private static int _BARRING_SERVICE_TYPE_MMTEL_VIDEOContent = default;
        private static bool _BARRING_SERVICE_TYPE_MMTEL_VIDEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.html#BARRING_SERVICE_TYPE_MMTEL_VOICE"/>
        /// </summary>
        public static int BARRING_SERVICE_TYPE_MMTEL_VOICE { get { if (!_BARRING_SERVICE_TYPE_MMTEL_VOICEReady) { _BARRING_SERVICE_TYPE_MMTEL_VOICEContent = SGetField<int>(LocalBridgeClazz, "BARRING_SERVICE_TYPE_MMTEL_VOICE"); _BARRING_SERVICE_TYPE_MMTEL_VOICEReady = true; } return _BARRING_SERVICE_TYPE_MMTEL_VOICEContent; } }
        private static int _BARRING_SERVICE_TYPE_MMTEL_VOICEContent = default;
        private static bool _BARRING_SERVICE_TYPE_MMTEL_VOICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.html#BARRING_SERVICE_TYPE_MO_DATA"/>
        /// </summary>
        public static int BARRING_SERVICE_TYPE_MO_DATA { get { if (!_BARRING_SERVICE_TYPE_MO_DATAReady) { _BARRING_SERVICE_TYPE_MO_DATAContent = SGetField<int>(LocalBridgeClazz, "BARRING_SERVICE_TYPE_MO_DATA"); _BARRING_SERVICE_TYPE_MO_DATAReady = true; } return _BARRING_SERVICE_TYPE_MO_DATAContent; } }
        private static int _BARRING_SERVICE_TYPE_MO_DATAContent = default;
        private static bool _BARRING_SERVICE_TYPE_MO_DATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.html#BARRING_SERVICE_TYPE_MO_SIGNALLING"/>
        /// </summary>
        public static int BARRING_SERVICE_TYPE_MO_SIGNALLING { get { if (!_BARRING_SERVICE_TYPE_MO_SIGNALLINGReady) { _BARRING_SERVICE_TYPE_MO_SIGNALLINGContent = SGetField<int>(LocalBridgeClazz, "BARRING_SERVICE_TYPE_MO_SIGNALLING"); _BARRING_SERVICE_TYPE_MO_SIGNALLINGReady = true; } return _BARRING_SERVICE_TYPE_MO_SIGNALLINGContent; } }
        private static int _BARRING_SERVICE_TYPE_MO_SIGNALLINGContent = default;
        private static bool _BARRING_SERVICE_TYPE_MO_SIGNALLINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.html#BARRING_SERVICE_TYPE_PS_SERVICE"/>
        /// </summary>
        public static int BARRING_SERVICE_TYPE_PS_SERVICE { get { if (!_BARRING_SERVICE_TYPE_PS_SERVICEReady) { _BARRING_SERVICE_TYPE_PS_SERVICEContent = SGetField<int>(LocalBridgeClazz, "BARRING_SERVICE_TYPE_PS_SERVICE"); _BARRING_SERVICE_TYPE_PS_SERVICEReady = true; } return _BARRING_SERVICE_TYPE_PS_SERVICEContent; } }
        private static int _BARRING_SERVICE_TYPE_PS_SERVICEContent = default;
        private static bool _BARRING_SERVICE_TYPE_PS_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.html#BARRING_SERVICE_TYPE_SMS"/>
        /// </summary>
        public static int BARRING_SERVICE_TYPE_SMS { get { if (!_BARRING_SERVICE_TYPE_SMSReady) { _BARRING_SERVICE_TYPE_SMSContent = SGetField<int>(LocalBridgeClazz, "BARRING_SERVICE_TYPE_SMS"); _BARRING_SERVICE_TYPE_SMSReady = true; } return _BARRING_SERVICE_TYPE_SMSContent; } }
        private static int _BARRING_SERVICE_TYPE_SMSContent = default;
        private static bool _BARRING_SERVICE_TYPE_SMSReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.html#getBarringServiceInfo(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Telephony.BarringInfo.BarringServiceInfo"/></returns>
        public Android.Telephony.BarringInfo.BarringServiceInfo GetBarringServiceInfo(int arg0)
        {
            return IExecuteWithSignature<Android.Telephony.BarringInfo.BarringServiceInfo>("getBarringServiceInfo", "(I)Landroid/telephony/BarringInfo$BarringServiceInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region BarringServiceInfo
        public partial class BarringServiceInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.BarringServiceInfo.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.BarringServiceInfo.html#BARRING_TYPE_CONDITIONAL"/>
            /// </summary>
            public static int BARRING_TYPE_CONDITIONAL { get { if (!_BARRING_TYPE_CONDITIONALReady) { _BARRING_TYPE_CONDITIONALContent = SGetField<int>(LocalBridgeClazz, "BARRING_TYPE_CONDITIONAL"); _BARRING_TYPE_CONDITIONALReady = true; } return _BARRING_TYPE_CONDITIONALContent; } }
            private static int _BARRING_TYPE_CONDITIONALContent = default;
            private static bool _BARRING_TYPE_CONDITIONALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.BarringServiceInfo.html#BARRING_TYPE_NONE"/>
            /// </summary>
            public static int BARRING_TYPE_NONE { get { if (!_BARRING_TYPE_NONEReady) { _BARRING_TYPE_NONEContent = SGetField<int>(LocalBridgeClazz, "BARRING_TYPE_NONE"); _BARRING_TYPE_NONEReady = true; } return _BARRING_TYPE_NONEContent; } }
            private static int _BARRING_TYPE_NONEContent = default;
            private static bool _BARRING_TYPE_NONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.BarringServiceInfo.html#BARRING_TYPE_UNCONDITIONAL"/>
            /// </summary>
            public static int BARRING_TYPE_UNCONDITIONAL { get { if (!_BARRING_TYPE_UNCONDITIONALReady) { _BARRING_TYPE_UNCONDITIONALContent = SGetField<int>(LocalBridgeClazz, "BARRING_TYPE_UNCONDITIONAL"); _BARRING_TYPE_UNCONDITIONALReady = true; } return _BARRING_TYPE_UNCONDITIONALContent; } }
            private static int _BARRING_TYPE_UNCONDITIONALContent = default;
            private static bool _BARRING_TYPE_UNCONDITIONALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.BarringServiceInfo.html#BARRING_TYPE_UNKNOWN"/>
            /// </summary>
            public static int BARRING_TYPE_UNKNOWN { get { if (!_BARRING_TYPE_UNKNOWNReady) { _BARRING_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "BARRING_TYPE_UNKNOWN"); _BARRING_TYPE_UNKNOWNReady = true; } return _BARRING_TYPE_UNKNOWNContent; } }
            private static int _BARRING_TYPE_UNKNOWNContent = default;
            private static bool _BARRING_TYPE_UNKNOWNReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.BarringServiceInfo.html#getBarringType()"/> 
            /// </summary>
            public int BarringType
            {
                get { return IExecuteWithSignature<int>("getBarringType", "()I"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.BarringServiceInfo.html#getConditionalBarringFactor()"/> 
            /// </summary>
            public int ConditionalBarringFactor
            {
                get { return IExecuteWithSignature<int>("getConditionalBarringFactor", "()I"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.BarringServiceInfo.html#getConditionalBarringTimeSeconds()"/> 
            /// </summary>
            public int ConditionalBarringTimeSeconds
            {
                get { return IExecuteWithSignature<int>("getConditionalBarringTimeSeconds", "()I"); }
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.BarringServiceInfo.html#isBarred()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsBarred()
            {
                return IExecuteWithSignature<bool>("isBarred", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.BarringServiceInfo.html#isConditionallyBarred()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsConditionallyBarred()
            {
                return IExecuteWithSignature<bool>("isConditionallyBarred", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.BarringServiceInfo.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/BarringInfo.BarringServiceInfo.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
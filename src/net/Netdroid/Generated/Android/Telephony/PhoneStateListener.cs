/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Telephony
{
    #region PhoneStateListener
    public partial class PhoneStateListener
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// Handlers initializer for <see cref="PhoneStateListener"/>
        /// </summary>
        protected virtual void InitializeHandlers()
        {
            AddEventHandler("onActiveDataSubscriptionIdChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnActiveDataSubscriptionIdChangedEventHandler));
            AddEventHandler("onBarringInfoChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Telephony.BarringInfo>>>(OnBarringInfoChangedEventHandler));
            AddEventHandler("onCallDisconnectCauseChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnCallDisconnectCauseChangedEventHandler));
            AddEventHandler("onCallForwardingIndicatorChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<bool>>>(OnCallForwardingIndicatorChangedEventHandler));
            AddEventHandler("onCallStateChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnCallStateChangedEventHandler));
            AddEventHandler("onCellInfoChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Util.List<Android.Telephony.CellInfo>>>>(OnCellInfoChangedEventHandler));
            AddEventHandler("onCellLocationChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Telephony.CellLocation>>>(OnCellLocationChangedEventHandler));
            AddEventHandler("onDataActivity", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnDataActivityEventHandler));
            AddEventHandler("onDataConnectionStateChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnDataConnectionStateChangedEventHandler));
            AddEventHandler("onDataConnectionStateChanged1", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnDataConnectionStateChanged1EventHandler));
            AddEventHandler("onDisplayInfoChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Telephony.TelephonyDisplayInfo>>>(OnDisplayInfoChangedEventHandler));
            AddEventHandler("onEmergencyNumberListChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Util.Map<Java.Lang.Integer, Java.Util.List<Android.Telephony.Emergency.EmergencyNumber>>>>>(OnEmergencyNumberListChangedEventHandler));
            AddEventHandler("onImsCallDisconnectCauseChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Telephony.Ims.ImsReasonInfo>>>(OnImsCallDisconnectCauseChangedEventHandler));
            AddEventHandler("onMessageWaitingIndicatorChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<bool>>>(OnMessageWaitingIndicatorChangedEventHandler));
            AddEventHandler("onPreciseDataConnectionStateChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Telephony.PreciseDataConnectionState>>>(OnPreciseDataConnectionStateChangedEventHandler));
            AddEventHandler("onRegistrationFailed", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Telephony.CellIdentity>>>(OnRegistrationFailedEventHandler));
            AddEventHandler("onServiceStateChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Telephony.ServiceState>>>(OnServiceStateChangedEventHandler));
            AddEventHandler("onSignalStrengthChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnSignalStrengthChangedEventHandler));
            AddEventHandler("onSignalStrengthsChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Telephony.SignalStrength>>>(OnSignalStrengthsChangedEventHandler));
            AddEventHandler("onUserMobileDataStateChanged", new System.EventHandler<CLRListenerEventArgs<CLREventData<bool>>>(OnUserMobileDataStateChangedEventHandler));

        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onActiveDataSubscriptionIdChanged(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnActiveDataSubscriptionIdChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int> OnOnActiveDataSubscriptionIdChanged { get; set; } = null;

        void OnActiveDataSubscriptionIdChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnOnActiveDataSubscriptionIdChanged != null) ? OnOnActiveDataSubscriptionIdChanged : OnActiveDataSubscriptionIdChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onActiveDataSubscriptionIdChanged(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void OnActiveDataSubscriptionIdChanged(int arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onBarringInfoChanged(android.telephony.BarringInfo)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnBarringInfoChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.Telephony.BarringInfo> OnOnBarringInfoChanged { get; set; } = null;

        void OnBarringInfoChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Telephony.BarringInfo>> data)
        {
            var methodToExecute = (OnOnBarringInfoChanged != null) ? OnOnBarringInfoChanged : OnBarringInfoChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onBarringInfoChanged(android.telephony.BarringInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.BarringInfo"/></param>
        [System.Obsolete()]
        public virtual void OnBarringInfoChanged(Android.Telephony.BarringInfo arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onCallDisconnectCauseChanged(int,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnCallDisconnectCauseChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int> OnOnCallDisconnectCauseChanged { get; set; } = null;

        void OnCallDisconnectCauseChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnOnCallDisconnectCauseChanged != null) ? OnOnCallDisconnectCauseChanged : OnCallDisconnectCauseChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onCallDisconnectCauseChanged(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void OnCallDisconnectCauseChanged(int arg0, int arg1)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onCallForwardingIndicatorChanged(boolean)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnCallForwardingIndicatorChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<bool> OnOnCallForwardingIndicatorChanged { get; set; } = null;

        void OnCallForwardingIndicatorChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<bool>> data)
        {
            var methodToExecute = (OnOnCallForwardingIndicatorChanged != null) ? OnOnCallForwardingIndicatorChanged : OnCallForwardingIndicatorChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onCallForwardingIndicatorChanged(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [System.Obsolete()]
        public virtual void OnCallForwardingIndicatorChanged(bool arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onCallStateChanged(int,java.lang.String)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnCallStateChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, Java.Lang.String> OnOnCallStateChanged { get; set; } = null;

        void OnCallStateChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnOnCallStateChanged != null) ? OnOnCallStateChanged : OnCallStateChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Java.Lang.String>(0));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onCallStateChanged(int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        [System.Obsolete()]
        public virtual void OnCallStateChanged(int arg0, Java.Lang.String arg1)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onCellInfoChanged(java.util.List)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnCellInfoChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Java.Util.List<Android.Telephony.CellInfo>> OnOnCellInfoChanged { get; set; } = null;

        void OnCellInfoChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Util.List<Android.Telephony.CellInfo>>> data)
        {
            var methodToExecute = (OnOnCellInfoChanged != null) ? OnOnCellInfoChanged : OnCellInfoChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onCellInfoChanged(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        [System.Obsolete()]
        public virtual void OnCellInfoChanged(Java.Util.List<Android.Telephony.CellInfo> arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onCellLocationChanged(android.telephony.CellLocation)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnCellLocationChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.Telephony.CellLocation> OnOnCellLocationChanged { get; set; } = null;

        void OnCellLocationChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Telephony.CellLocation>> data)
        {
            var methodToExecute = (OnOnCellLocationChanged != null) ? OnOnCellLocationChanged : OnCellLocationChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onCellLocationChanged(android.telephony.CellLocation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.CellLocation"/></param>
        [System.Obsolete()]
        public virtual void OnCellLocationChanged(Android.Telephony.CellLocation arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onDataActivity(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnDataActivity"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int> OnOnDataActivity { get; set; } = null;

        void OnDataActivityEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnOnDataActivity != null) ? OnOnDataActivity : OnDataActivity;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onDataActivity(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void OnDataActivity(int arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onDataConnectionStateChanged(int,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnDataConnectionStateChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, int> OnOnDataConnectionStateChanged { get; set; } = null;

        void OnDataConnectionStateChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnOnDataConnectionStateChanged != null) ? OnOnDataConnectionStateChanged : OnDataConnectionStateChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onDataConnectionStateChanged(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void OnDataConnectionStateChanged(int arg0, int arg1)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onDataConnectionStateChanged(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnDataConnectionStateChanged1"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int> OnOnDataConnectionStateChanged1 { get; set; } = null;

        void OnDataConnectionStateChanged1EventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnOnDataConnectionStateChanged1 != null) ? OnOnDataConnectionStateChanged1 : OnDataConnectionStateChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onDataConnectionStateChanged(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void OnDataConnectionStateChanged(int arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onDisplayInfoChanged(android.telephony.TelephonyDisplayInfo)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnDisplayInfoChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.Telephony.TelephonyDisplayInfo> OnOnDisplayInfoChanged { get; set; } = null;

        void OnDisplayInfoChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Telephony.TelephonyDisplayInfo>> data)
        {
            var methodToExecute = (OnOnDisplayInfoChanged != null) ? OnOnDisplayInfoChanged : OnDisplayInfoChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onDisplayInfoChanged(android.telephony.TelephonyDisplayInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.TelephonyDisplayInfo"/></param>
        [System.Obsolete()]
        public virtual void OnDisplayInfoChanged(Android.Telephony.TelephonyDisplayInfo arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onEmergencyNumberListChanged(java.util.Map)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnEmergencyNumberListChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Java.Util.Map<Java.Lang.Integer, Java.Util.List<Android.Telephony.Emergency.EmergencyNumber>>> OnOnEmergencyNumberListChanged { get; set; } = null;

        void OnEmergencyNumberListChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Util.Map<Java.Lang.Integer, Java.Util.List<Android.Telephony.Emergency.EmergencyNumber>>>> data)
        {
            var methodToExecute = (OnOnEmergencyNumberListChanged != null) ? OnOnEmergencyNumberListChanged : OnEmergencyNumberListChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onEmergencyNumberListChanged(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        [System.Obsolete()]
        public virtual void OnEmergencyNumberListChanged(Java.Util.Map<Java.Lang.Integer, Java.Util.List<Android.Telephony.Emergency.EmergencyNumber>> arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnImsCallDisconnectCauseChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.Telephony.Ims.ImsReasonInfo> OnOnImsCallDisconnectCauseChanged { get; set; } = null;

        void OnImsCallDisconnectCauseChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Telephony.Ims.ImsReasonInfo>> data)
        {
            var methodToExecute = (OnOnImsCallDisconnectCauseChanged != null) ? OnOnImsCallDisconnectCauseChanged : OnImsCallDisconnectCauseChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.Ims.ImsReasonInfo"/></param>
        [System.Obsolete()]
        public virtual void OnImsCallDisconnectCauseChanged(Android.Telephony.Ims.ImsReasonInfo arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onMessageWaitingIndicatorChanged(boolean)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnMessageWaitingIndicatorChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<bool> OnOnMessageWaitingIndicatorChanged { get; set; } = null;

        void OnMessageWaitingIndicatorChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<bool>> data)
        {
            var methodToExecute = (OnOnMessageWaitingIndicatorChanged != null) ? OnOnMessageWaitingIndicatorChanged : OnMessageWaitingIndicatorChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onMessageWaitingIndicatorChanged(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [System.Obsolete()]
        public virtual void OnMessageWaitingIndicatorChanged(bool arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnPreciseDataConnectionStateChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.Telephony.PreciseDataConnectionState> OnOnPreciseDataConnectionStateChanged { get; set; } = null;

        void OnPreciseDataConnectionStateChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Telephony.PreciseDataConnectionState>> data)
        {
            var methodToExecute = (OnOnPreciseDataConnectionStateChanged != null) ? OnOnPreciseDataConnectionStateChanged : OnPreciseDataConnectionStateChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.PreciseDataConnectionState"/></param>
        [System.Obsolete()]
        public virtual void OnPreciseDataConnectionStateChanged(Android.Telephony.PreciseDataConnectionState arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onRegistrationFailed(android.telephony.CellIdentity,java.lang.String,int,int,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnRegistrationFailed"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.Telephony.CellIdentity, Java.Lang.String, int, int, int> OnOnRegistrationFailed { get; set; } = null;

        void OnRegistrationFailedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Telephony.CellIdentity>> data)
        {
            var methodToExecute = (OnOnRegistrationFailed != null) ? OnOnRegistrationFailed : OnRegistrationFailed;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Java.Lang.String>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<int>(3));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onRegistrationFailed(android.telephony.CellIdentity,java.lang.String,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.CellIdentity"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void OnRegistrationFailed(Android.Telephony.CellIdentity arg0, Java.Lang.String arg1, int arg2, int arg3, int arg4)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onServiceStateChanged(android.telephony.ServiceState)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnServiceStateChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.Telephony.ServiceState> OnOnServiceStateChanged { get; set; } = null;

        void OnServiceStateChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Telephony.ServiceState>> data)
        {
            var methodToExecute = (OnOnServiceStateChanged != null) ? OnOnServiceStateChanged : OnServiceStateChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onServiceStateChanged(android.telephony.ServiceState)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.ServiceState"/></param>
        [System.Obsolete()]
        public virtual void OnServiceStateChanged(Android.Telephony.ServiceState arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onSignalStrengthChanged(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnSignalStrengthChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int> OnOnSignalStrengthChanged { get; set; } = null;

        void OnSignalStrengthChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnOnSignalStrengthChanged != null) ? OnOnSignalStrengthChanged : OnSignalStrengthChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onSignalStrengthChanged(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public virtual void OnSignalStrengthChanged(int arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onSignalStrengthsChanged(android.telephony.SignalStrength)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnSignalStrengthsChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<Android.Telephony.SignalStrength> OnOnSignalStrengthsChanged { get; set; } = null;

        void OnSignalStrengthsChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Telephony.SignalStrength>> data)
        {
            var methodToExecute = (OnOnSignalStrengthsChanged != null) ? OnOnSignalStrengthsChanged : OnSignalStrengthsChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onSignalStrengthsChanged(android.telephony.SignalStrength)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.SignalStrength"/></param>
        [System.Obsolete()]
        public virtual void OnSignalStrengthsChanged(Android.Telephony.SignalStrength arg0)
        {
            
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onUserMobileDataStateChanged(boolean)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnUserMobileDataStateChanged"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<bool> OnOnUserMobileDataStateChanged { get; set; } = null;

        void OnUserMobileDataStateChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<bool>> data)
        {
            var methodToExecute = (OnOnUserMobileDataStateChanged != null) ? OnOnUserMobileDataStateChanged : OnUserMobileDataStateChanged;
            methodToExecute.Invoke(data.EventData.TypedEventData);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onUserMobileDataStateChanged(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [System.Obsolete()]
        public virtual void OnUserMobileDataStateChanged(bool arg0)
        {
            
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region PhoneStateListenerDirect
    public partial class PhoneStateListenerDirect
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onActiveDataSubscriptionIdChanged(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public override void OnActiveDataSubscriptionIdChanged(int arg0)
        {
            IExecuteWithSignature("onActiveDataSubscriptionIdChanged", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onBarringInfoChanged(android.telephony.BarringInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.BarringInfo"/></param>
        [System.Obsolete()]
        public override void OnBarringInfoChanged(Android.Telephony.BarringInfo arg0)
        {
            IExecuteWithSignature("onBarringInfoChanged", "(Landroid/telephony/BarringInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onCallDisconnectCauseChanged(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [System.Obsolete()]
        public override void OnCallDisconnectCauseChanged(int arg0, int arg1)
        {
            IExecute("onCallDisconnectCauseChanged", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onCallForwardingIndicatorChanged(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [System.Obsolete()]
        public override void OnCallForwardingIndicatorChanged(bool arg0)
        {
            IExecuteWithSignature("onCallForwardingIndicatorChanged", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onCallStateChanged(int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        [System.Obsolete()]
        public override void OnCallStateChanged(int arg0, Java.Lang.String arg1)
        {
            IExecute("onCallStateChanged", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onCellInfoChanged(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        [System.Obsolete()]
        public override void OnCellInfoChanged(Java.Util.List<Android.Telephony.CellInfo> arg0)
        {
            IExecuteWithSignature("onCellInfoChanged", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onCellLocationChanged(android.telephony.CellLocation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.CellLocation"/></param>
        [System.Obsolete()]
        public override void OnCellLocationChanged(Android.Telephony.CellLocation arg0)
        {
            IExecuteWithSignature("onCellLocationChanged", "(Landroid/telephony/CellLocation;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onDataActivity(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public override void OnDataActivity(int arg0)
        {
            IExecuteWithSignature("onDataActivity", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onDataConnectionStateChanged(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        [System.Obsolete()]
        public override void OnDataConnectionStateChanged(int arg0, int arg1)
        {
            IExecute("onDataConnectionStateChanged", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onDataConnectionStateChanged(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public override void OnDataConnectionStateChanged(int arg0)
        {
            IExecuteWithSignature("onDataConnectionStateChanged", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onDisplayInfoChanged(android.telephony.TelephonyDisplayInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.TelephonyDisplayInfo"/></param>
        [System.Obsolete()]
        public override void OnDisplayInfoChanged(Android.Telephony.TelephonyDisplayInfo arg0)
        {
            IExecuteWithSignature("onDisplayInfoChanged", "(Landroid/telephony/TelephonyDisplayInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onEmergencyNumberListChanged(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        [System.Obsolete()]
        public override void OnEmergencyNumberListChanged(Java.Util.Map<Java.Lang.Integer, Java.Util.List<Android.Telephony.Emergency.EmergencyNumber>> arg0)
        {
            IExecuteWithSignature("onEmergencyNumberListChanged", "(Ljava/util/Map;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.Ims.ImsReasonInfo"/></param>
        [System.Obsolete()]
        public override void OnImsCallDisconnectCauseChanged(Android.Telephony.Ims.ImsReasonInfo arg0)
        {
            IExecuteWithSignature("onImsCallDisconnectCauseChanged", "(Landroid/telephony/ims/ImsReasonInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onMessageWaitingIndicatorChanged(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [System.Obsolete()]
        public override void OnMessageWaitingIndicatorChanged(bool arg0)
        {
            IExecuteWithSignature("onMessageWaitingIndicatorChanged", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.PreciseDataConnectionState"/></param>
        [System.Obsolete()]
        public override void OnPreciseDataConnectionStateChanged(Android.Telephony.PreciseDataConnectionState arg0)
        {
            IExecuteWithSignature("onPreciseDataConnectionStateChanged", "(Landroid/telephony/PreciseDataConnectionState;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onRegistrationFailed(android.telephony.CellIdentity,java.lang.String,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.CellIdentity"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        [System.Obsolete()]
        public override void OnRegistrationFailed(Android.Telephony.CellIdentity arg0, Java.Lang.String arg1, int arg2, int arg3, int arg4)
        {
            IExecute("onRegistrationFailed", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onServiceStateChanged(android.telephony.ServiceState)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.ServiceState"/></param>
        [System.Obsolete()]
        public override void OnServiceStateChanged(Android.Telephony.ServiceState arg0)
        {
            IExecuteWithSignature("onServiceStateChanged", "(Landroid/telephony/ServiceState;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onSignalStrengthChanged(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [System.Obsolete()]
        public override void OnSignalStrengthChanged(int arg0)
        {
            IExecuteWithSignature("onSignalStrengthChanged", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onSignalStrengthsChanged(android.telephony.SignalStrength)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.SignalStrength"/></param>
        [System.Obsolete()]
        public override void OnSignalStrengthsChanged(Android.Telephony.SignalStrength arg0)
        {
            IExecuteWithSignature("onSignalStrengthsChanged", "(Landroid/telephony/SignalStrength;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/PhoneStateListener.html#onUserMobileDataStateChanged(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [System.Obsolete()]
        public override void OnUserMobileDataStateChanged(bool arg0)
        {
            IExecuteWithSignature("onUserMobileDataStateChanged", "(Z)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
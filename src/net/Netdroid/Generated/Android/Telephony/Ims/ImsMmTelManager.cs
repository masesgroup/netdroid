/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Telephony.Ims
{
    #region ImsMmTelManager
    public partial class ImsMmTelManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#WIFI_MODE_CELLULAR_PREFERRED"/>
        /// </summary>
        public static int WIFI_MODE_CELLULAR_PREFERRED { get { if (!_WIFI_MODE_CELLULAR_PREFERREDReady) { _WIFI_MODE_CELLULAR_PREFERREDContent = SGetField<int>(LocalBridgeClazz, "WIFI_MODE_CELLULAR_PREFERRED"); _WIFI_MODE_CELLULAR_PREFERREDReady = true; } return _WIFI_MODE_CELLULAR_PREFERREDContent; } }
        private static int _WIFI_MODE_CELLULAR_PREFERREDContent = default;
        private static bool _WIFI_MODE_CELLULAR_PREFERREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#WIFI_MODE_WIFI_ONLY"/>
        /// </summary>
        public static int WIFI_MODE_WIFI_ONLY { get { if (!_WIFI_MODE_WIFI_ONLYReady) { _WIFI_MODE_WIFI_ONLYContent = SGetField<int>(LocalBridgeClazz, "WIFI_MODE_WIFI_ONLY"); _WIFI_MODE_WIFI_ONLYReady = true; } return _WIFI_MODE_WIFI_ONLYContent; } }
        private static int _WIFI_MODE_WIFI_ONLYContent = default;
        private static bool _WIFI_MODE_WIFI_ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#WIFI_MODE_WIFI_PREFERRED"/>
        /// </summary>
        public static int WIFI_MODE_WIFI_PREFERRED { get { if (!_WIFI_MODE_WIFI_PREFERREDReady) { _WIFI_MODE_WIFI_PREFERREDContent = SGetField<int>(LocalBridgeClazz, "WIFI_MODE_WIFI_PREFERRED"); _WIFI_MODE_WIFI_PREFERREDReady = true; } return _WIFI_MODE_WIFI_PREFERREDContent; } }
        private static int _WIFI_MODE_WIFI_PREFERREDContent = default;
        private static bool _WIFI_MODE_WIFI_PREFERREDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#isAdvancedCallingSettingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAdvancedCallingSettingEnabled()
        {
            return IExecuteWithSignature<bool>("isAdvancedCallingSettingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#isCrossSimCallingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        /// <exception cref="Android.Telephony.Ims.ImsException"/>
        public bool IsCrossSimCallingEnabled()
        {
            return IExecuteWithSignature<bool>("isCrossSimCallingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#isTtyOverVolteEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTtyOverVolteEnabled()
        {
            return IExecuteWithSignature<bool>("isTtyOverVolteEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#isVoWiFiRoamingSettingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsVoWiFiRoamingSettingEnabled()
        {
            return IExecuteWithSignature<bool>("isVoWiFiRoamingSettingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#isVoWiFiSettingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsVoWiFiSettingEnabled()
        {
            return IExecuteWithSignature<bool>("isVoWiFiSettingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#isVtSettingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsVtSettingEnabled()
        {
            return IExecuteWithSignature<bool>("isVtSettingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#getVoWiFiModeSetting()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVoWiFiModeSetting()
        {
            return IExecuteWithSignature<int>("getVoWiFiModeSetting", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#getRegistrationState(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void GetRegistrationState(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Java.Lang.Integer> arg1)
        {
            IExecute("getRegistrationState", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#getRegistrationTransportType(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void GetRegistrationTransportType(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Java.Lang.Integer> arg1)
        {
            IExecute("getRegistrationTransportType", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.RegistrationManager.RegistrationCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Telephony.Ims.RegistrationManager.RegistrationCallback"/></param>
        /// <exception cref="Android.Telephony.Ims.ImsException"/>
        public void RegisterImsRegistrationCallback(Java.Util.Concurrent.Executor arg0, Android.Telephony.Ims.RegistrationManager.RegistrationCallback arg1)
        {
            IExecute("registerImsRegistrationCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#registerImsStateCallback(java.util.concurrent.Executor,android.telephony.ims.ImsStateCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Telephony.Ims.ImsStateCallback"/></param>
        /// <exception cref="Android.Telephony.Ims.ImsException"/>
        public void RegisterImsStateCallback(Java.Util.Concurrent.Executor arg0, Android.Telephony.Ims.ImsStateCallback arg1)
        {
            IExecute("registerImsStateCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#registerMmTelCapabilityCallback(java.util.concurrent.Executor,android.telephony.ims.ImsMmTelManager.CapabilityCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Telephony.Ims.ImsMmTelManager.CapabilityCallback"/></param>
        /// <exception cref="Android.Telephony.Ims.ImsException"/>
        public void RegisterMmTelCapabilityCallback(Java.Util.Concurrent.Executor arg0, Android.Telephony.Ims.ImsMmTelManager.CapabilityCallback arg1)
        {
            IExecute("registerMmTelCapabilityCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#unregisterImsRegistrationCallback(android.telephony.ims.RegistrationManager.RegistrationCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.Ims.RegistrationManager.RegistrationCallback"/></param>
        public void UnregisterImsRegistrationCallback(Android.Telephony.Ims.RegistrationManager.RegistrationCallback arg0)
        {
            IExecuteWithSignature("unregisterImsRegistrationCallback", "(Landroid/telephony/ims/RegistrationManager$RegistrationCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#unregisterImsStateCallback(android.telephony.ims.ImsStateCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.Ims.ImsStateCallback"/></param>
        public void UnregisterImsStateCallback(Android.Telephony.Ims.ImsStateCallback arg0)
        {
            IExecuteWithSignature("unregisterImsStateCallback", "(Landroid/telephony/ims/ImsStateCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.html#unregisterMmTelCapabilityCallback(android.telephony.ims.ImsMmTelManager.CapabilityCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.Ims.ImsMmTelManager.CapabilityCallback"/></param>
        public void UnregisterMmTelCapabilityCallback(Android.Telephony.Ims.ImsMmTelManager.CapabilityCallback arg0)
        {
            IExecuteWithSignature("unregisterMmTelCapabilityCallback", "(Landroid/telephony/ims/ImsMmTelManager$CapabilityCallback;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region CapabilityCallback
        public partial class CapabilityCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsMmTelManager.CapabilityCallback.html#onCapabilitiesStatusChanged(android.telephony.ims.feature.MmTelFeature.MmTelCapabilities)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telephony.Ims.Feature.MmTelFeature.MmTelCapabilities"/></param>
            public void OnCapabilitiesStatusChanged(Android.Telephony.Ims.Feature.MmTelFeature.MmTelCapabilities arg0)
            {
                IExecuteWithSignature("onCapabilitiesStatusChanged", "(Landroid/telephony/ims/feature/MmTelFeature$MmTelCapabilities;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Telephony.Ims.Feature
{
    #region MmTelFeature
    public partial class MmTelFeature
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region MmTelCapabilities
        public partial class MmTelCapabilities
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/ims/feature/MmTelFeature.MmTelCapabilities.html#CAPABILITY_TYPE_CALL_COMPOSER"/>
            /// </summary>
            public static int CAPABILITY_TYPE_CALL_COMPOSER { get { if (!_CAPABILITY_TYPE_CALL_COMPOSERReady) { _CAPABILITY_TYPE_CALL_COMPOSERContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_TYPE_CALL_COMPOSER"); _CAPABILITY_TYPE_CALL_COMPOSERReady = true; } return _CAPABILITY_TYPE_CALL_COMPOSERContent; } }
            private static int _CAPABILITY_TYPE_CALL_COMPOSERContent = default;
            private static bool _CAPABILITY_TYPE_CALL_COMPOSERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/ims/feature/MmTelFeature.MmTelCapabilities.html#CAPABILITY_TYPE_CALL_COMPOSER_BUSINESS_ONLY"/>
            /// </summary>
            public static int CAPABILITY_TYPE_CALL_COMPOSER_BUSINESS_ONLY { get { if (!_CAPABILITY_TYPE_CALL_COMPOSER_BUSINESS_ONLYReady) { _CAPABILITY_TYPE_CALL_COMPOSER_BUSINESS_ONLYContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_TYPE_CALL_COMPOSER_BUSINESS_ONLY"); _CAPABILITY_TYPE_CALL_COMPOSER_BUSINESS_ONLYReady = true; } return _CAPABILITY_TYPE_CALL_COMPOSER_BUSINESS_ONLYContent; } }
            private static int _CAPABILITY_TYPE_CALL_COMPOSER_BUSINESS_ONLYContent = default;
            private static bool _CAPABILITY_TYPE_CALL_COMPOSER_BUSINESS_ONLYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/ims/feature/MmTelFeature.MmTelCapabilities.html#CAPABILITY_TYPE_SMS"/>
            /// </summary>
            public static int CAPABILITY_TYPE_SMS { get { if (!_CAPABILITY_TYPE_SMSReady) { _CAPABILITY_TYPE_SMSContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_TYPE_SMS"); _CAPABILITY_TYPE_SMSReady = true; } return _CAPABILITY_TYPE_SMSContent; } }
            private static int _CAPABILITY_TYPE_SMSContent = default;
            private static bool _CAPABILITY_TYPE_SMSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/ims/feature/MmTelFeature.MmTelCapabilities.html#CAPABILITY_TYPE_UT"/>
            /// </summary>
            public static int CAPABILITY_TYPE_UT { get { if (!_CAPABILITY_TYPE_UTReady) { _CAPABILITY_TYPE_UTContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_TYPE_UT"); _CAPABILITY_TYPE_UTReady = true; } return _CAPABILITY_TYPE_UTContent; } }
            private static int _CAPABILITY_TYPE_UTContent = default;
            private static bool _CAPABILITY_TYPE_UTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/ims/feature/MmTelFeature.MmTelCapabilities.html#CAPABILITY_TYPE_VIDEO"/>
            /// </summary>
            public static int CAPABILITY_TYPE_VIDEO { get { if (!_CAPABILITY_TYPE_VIDEOReady) { _CAPABILITY_TYPE_VIDEOContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_TYPE_VIDEO"); _CAPABILITY_TYPE_VIDEOReady = true; } return _CAPABILITY_TYPE_VIDEOContent; } }
            private static int _CAPABILITY_TYPE_VIDEOContent = default;
            private static bool _CAPABILITY_TYPE_VIDEOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/ims/feature/MmTelFeature.MmTelCapabilities.html#CAPABILITY_TYPE_VOICE"/>
            /// </summary>
            public static int CAPABILITY_TYPE_VOICE { get { if (!_CAPABILITY_TYPE_VOICEReady) { _CAPABILITY_TYPE_VOICEContent = SGetField<int>(LocalBridgeClazz, "CAPABILITY_TYPE_VOICE"); _CAPABILITY_TYPE_VOICEReady = true; } return _CAPABILITY_TYPE_VOICEContent; } }
            private static int _CAPABILITY_TYPE_VOICEContent = default;
            private static bool _CAPABILITY_TYPE_VOICEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/ims/feature/MmTelFeature.MmTelCapabilities.html#isCapable(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool IsCapable(int arg0)
            {
                return IExecuteWithSignature<bool>("isCapable", "(I)Z", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
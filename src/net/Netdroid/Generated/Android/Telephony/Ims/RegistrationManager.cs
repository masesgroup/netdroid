/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Telephony.Ims
{
    #region RegistrationManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/telephony/ims/RegistrationManager.html"/>
    /// </summary>
    public partial class RegistrationManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RegistrationManager>
    {
        const string _bridgeClassName = "android.telephony.ims.RegistrationManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("RegistrationManager class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public RegistrationManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("RegistrationManager class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public RegistrationManager(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region RegistrationCallback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/RegistrationManager.RegistrationCallback.html"/>
        /// </summary>
        public partial class RegistrationCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RegistrationCallback>
        {
            const string _bridgeClassName = "android.telephony.ims.RegistrationManager$RegistrationCallback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RegistrationCallback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RegistrationCallback(params object[] args) : base(args) { }
        
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        
            // TODO: complete the class
        
        }
        #endregion

    
    }
    #endregion

    #region IRegistrationManager
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IRegistrationManager
    {
        #region Instance methods
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion

    #region RegistrationManager implementation
    public partial class RegistrationManager : Android.Telephony.Ims.IRegistrationManager
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/RegistrationManager.html#REGISTRATION_STATE_NOT_REGISTERED"/>
        /// </summary>
        public static int REGISTRATION_STATE_NOT_REGISTERED { get { if (!_REGISTRATION_STATE_NOT_REGISTEREDReady) { _REGISTRATION_STATE_NOT_REGISTEREDContent = SGetField<int>(LocalBridgeClazz, "REGISTRATION_STATE_NOT_REGISTERED"); _REGISTRATION_STATE_NOT_REGISTEREDReady = true; } return _REGISTRATION_STATE_NOT_REGISTEREDContent; } }
        private static int _REGISTRATION_STATE_NOT_REGISTEREDContent = default;
        private static bool _REGISTRATION_STATE_NOT_REGISTEREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/RegistrationManager.html#REGISTRATION_STATE_REGISTERED"/>
        /// </summary>
        public static int REGISTRATION_STATE_REGISTERED { get { if (!_REGISTRATION_STATE_REGISTEREDReady) { _REGISTRATION_STATE_REGISTEREDContent = SGetField<int>(LocalBridgeClazz, "REGISTRATION_STATE_REGISTERED"); _REGISTRATION_STATE_REGISTEREDReady = true; } return _REGISTRATION_STATE_REGISTEREDContent; } }
        private static int _REGISTRATION_STATE_REGISTEREDContent = default;
        private static bool _REGISTRATION_STATE_REGISTEREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/RegistrationManager.html#REGISTRATION_STATE_REGISTERING"/>
        /// </summary>
        public static int REGISTRATION_STATE_REGISTERING { get { if (!_REGISTRATION_STATE_REGISTERINGReady) { _REGISTRATION_STATE_REGISTERINGContent = SGetField<int>(LocalBridgeClazz, "REGISTRATION_STATE_REGISTERING"); _REGISTRATION_STATE_REGISTERINGReady = true; } return _REGISTRATION_STATE_REGISTERINGContent; } }
        private static int _REGISTRATION_STATE_REGISTERINGContent = default;
        private static bool _REGISTRATION_STATE_REGISTERINGReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/RegistrationManager.html#getRegistrationState(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void GetRegistrationState(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Java.Lang.Integer> arg1)
        {
            IExecuteWithSignature("getRegistrationState", "(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/RegistrationManager.html#getRegistrationTransportType(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void GetRegistrationTransportType(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Java.Lang.Integer> arg1)
        {
            IExecuteWithSignature("getRegistrationTransportType", "(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/RegistrationManager.html#registerImsRegistrationCallback(java.util.concurrent.Executor,android.telephony.ims.RegistrationManager.RegistrationCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Android.Telephony.Ims.RegistrationManager.RegistrationCallback"/></param>
        /// <exception cref="Android.Telephony.Ims.ImsException"/>
        public void RegisterImsRegistrationCallback(Java.Util.Concurrent.Executor arg0, Android.Telephony.Ims.RegistrationManager.RegistrationCallback arg1)
        {
            IExecuteWithSignature("registerImsRegistrationCallback", "(Ljava/util/concurrent/Executor;Landroid/telephony/ims/RegistrationManager$RegistrationCallback;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/RegistrationManager.html#unregisterImsRegistrationCallback(android.telephony.ims.RegistrationManager.RegistrationCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Telephony.Ims.RegistrationManager.RegistrationCallback"/></param>
        public void UnregisterImsRegistrationCallback(Android.Telephony.Ims.RegistrationManager.RegistrationCallback arg0)
        {
            IExecuteWithSignature("unregisterImsRegistrationCallback", "(Landroid/telephony/ims/RegistrationManager$RegistrationCallback;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region RegistrationCallback implementation
        public partial class RegistrationCallback
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/ims/RegistrationManager.RegistrationCallback.html#onRegistered(android.telephony.ims.ImsRegistrationAttributes)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telephony.Ims.ImsRegistrationAttributes"/></param>
            public void OnRegistered(Android.Telephony.Ims.ImsRegistrationAttributes arg0)
            {
                IExecuteWithSignature("onRegistered", "(Landroid/telephony/ims/ImsRegistrationAttributes;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/ims/RegistrationManager.RegistrationCallback.html#onRegistered(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            [global::System.Obsolete()]
            public void OnRegistered(int arg0)
            {
                IExecuteWithSignature("onRegistered", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/ims/RegistrationManager.RegistrationCallback.html#onRegistering(android.telephony.ims.ImsRegistrationAttributes)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telephony.Ims.ImsRegistrationAttributes"/></param>
            public void OnRegistering(Android.Telephony.Ims.ImsRegistrationAttributes arg0)
            {
                IExecuteWithSignature("onRegistering", "(Landroid/telephony/ims/ImsRegistrationAttributes;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/ims/RegistrationManager.RegistrationCallback.html#onRegistering(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            [global::System.Obsolete()]
            public void OnRegistering(int arg0)
            {
                IExecuteWithSignature("onRegistering", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/ims/RegistrationManager.RegistrationCallback.html#onTechnologyChangeFailed(int,android.telephony.ims.ImsReasonInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Telephony.Ims.ImsReasonInfo"/></param>
            public void OnTechnologyChangeFailed(int arg0, Android.Telephony.Ims.ImsReasonInfo arg1)
            {
                IExecuteWithSignature("onTechnologyChangeFailed", "(ILandroid/telephony/ims/ImsReasonInfo;)V", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/telephony/ims/RegistrationManager.RegistrationCallback.html#onUnregistered(android.telephony.ims.ImsReasonInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Telephony.Ims.ImsReasonInfo"/></param>
            public void OnUnregistered(Android.Telephony.Ims.ImsReasonInfo arg0)
            {
                IExecuteWithSignature("onUnregistered", "(Landroid/telephony/ims/ImsReasonInfo;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
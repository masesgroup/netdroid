/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Telephony.Ims
{
    #region ImsStateCallback
    public partial class ImsStateCallback
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsStateCallback.html#REASON_IMS_SERVICE_DISCONNECTED"/>
        /// </summary>
        public static int REASON_IMS_SERVICE_DISCONNECTED { get { if (!_REASON_IMS_SERVICE_DISCONNECTEDReady) { _REASON_IMS_SERVICE_DISCONNECTEDContent = SGetField<int>(LocalBridgeClazz, "REASON_IMS_SERVICE_DISCONNECTED"); _REASON_IMS_SERVICE_DISCONNECTEDReady = true; } return _REASON_IMS_SERVICE_DISCONNECTEDContent; } }
        private static int _REASON_IMS_SERVICE_DISCONNECTEDContent = default;
        private static bool _REASON_IMS_SERVICE_DISCONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsStateCallback.html#REASON_IMS_SERVICE_NOT_READY"/>
        /// </summary>
        public static int REASON_IMS_SERVICE_NOT_READY { get { if (!_REASON_IMS_SERVICE_NOT_READYReady) { _REASON_IMS_SERVICE_NOT_READYContent = SGetField<int>(LocalBridgeClazz, "REASON_IMS_SERVICE_NOT_READY"); _REASON_IMS_SERVICE_NOT_READYReady = true; } return _REASON_IMS_SERVICE_NOT_READYContent; } }
        private static int _REASON_IMS_SERVICE_NOT_READYContent = default;
        private static bool _REASON_IMS_SERVICE_NOT_READYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsStateCallback.html#REASON_NO_IMS_SERVICE_CONFIGURED"/>
        /// </summary>
        public static int REASON_NO_IMS_SERVICE_CONFIGURED { get { if (!_REASON_NO_IMS_SERVICE_CONFIGUREDReady) { _REASON_NO_IMS_SERVICE_CONFIGUREDContent = SGetField<int>(LocalBridgeClazz, "REASON_NO_IMS_SERVICE_CONFIGURED"); _REASON_NO_IMS_SERVICE_CONFIGUREDReady = true; } return _REASON_NO_IMS_SERVICE_CONFIGUREDContent; } }
        private static int _REASON_NO_IMS_SERVICE_CONFIGUREDContent = default;
        private static bool _REASON_NO_IMS_SERVICE_CONFIGUREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsStateCallback.html#REASON_SUBSCRIPTION_INACTIVE"/>
        /// </summary>
        public static int REASON_SUBSCRIPTION_INACTIVE { get { if (!_REASON_SUBSCRIPTION_INACTIVEReady) { _REASON_SUBSCRIPTION_INACTIVEContent = SGetField<int>(LocalBridgeClazz, "REASON_SUBSCRIPTION_INACTIVE"); _REASON_SUBSCRIPTION_INACTIVEReady = true; } return _REASON_SUBSCRIPTION_INACTIVEContent; } }
        private static int _REASON_SUBSCRIPTION_INACTIVEContent = default;
        private static bool _REASON_SUBSCRIPTION_INACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsStateCallback.html#REASON_UNKNOWN_PERMANENT_ERROR"/>
        /// </summary>
        public static int REASON_UNKNOWN_PERMANENT_ERROR { get { if (!_REASON_UNKNOWN_PERMANENT_ERRORReady) { _REASON_UNKNOWN_PERMANENT_ERRORContent = SGetField<int>(LocalBridgeClazz, "REASON_UNKNOWN_PERMANENT_ERROR"); _REASON_UNKNOWN_PERMANENT_ERRORReady = true; } return _REASON_UNKNOWN_PERMANENT_ERRORContent; } }
        private static int _REASON_UNKNOWN_PERMANENT_ERRORContent = default;
        private static bool _REASON_UNKNOWN_PERMANENT_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsStateCallback.html#REASON_UNKNOWN_TEMPORARY_ERROR"/>
        /// </summary>
        public static int REASON_UNKNOWN_TEMPORARY_ERROR { get { if (!_REASON_UNKNOWN_TEMPORARY_ERRORReady) { _REASON_UNKNOWN_TEMPORARY_ERRORContent = SGetField<int>(LocalBridgeClazz, "REASON_UNKNOWN_TEMPORARY_ERROR"); _REASON_UNKNOWN_TEMPORARY_ERRORReady = true; } return _REASON_UNKNOWN_TEMPORARY_ERRORContent; } }
        private static int _REASON_UNKNOWN_TEMPORARY_ERRORContent = default;
        private static bool _REASON_UNKNOWN_TEMPORARY_ERRORReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsStateCallback.html#onAvailable()"/>
        /// </summary>
        public void OnAvailable()
        {
            IExecuteWithSignature("onAvailable", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsStateCallback.html#onError()"/>
        /// </summary>
        public void OnError()
        {
            IExecuteWithSignature("onError", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/telephony/ims/ImsStateCallback.html#onUnavailable(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OnUnavailable(int arg0)
        {
            IExecuteWithSignature("onUnavailable", "(I)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
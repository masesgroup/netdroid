/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Util
{
    #region Patterns
    public partial class Patterns
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Patterns.html#GOOD_IRI_CHAR"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String GOOD_IRI_CHAR { get { if (!_GOOD_IRI_CHARReady) { _GOOD_IRI_CHARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GOOD_IRI_CHAR"); _GOOD_IRI_CHARReady = true; } return _GOOD_IRI_CHARContent; } }
        private static Java.Lang.String _GOOD_IRI_CHARContent = default;
        private static bool _GOOD_IRI_CHARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Patterns.html#TOP_LEVEL_DOMAIN_STR"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String TOP_LEVEL_DOMAIN_STR { get { if (!_TOP_LEVEL_DOMAIN_STRReady) { _TOP_LEVEL_DOMAIN_STRContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TOP_LEVEL_DOMAIN_STR"); _TOP_LEVEL_DOMAIN_STRReady = true; } return _TOP_LEVEL_DOMAIN_STRContent; } }
        private static Java.Lang.String _TOP_LEVEL_DOMAIN_STRContent = default;
        private static bool _TOP_LEVEL_DOMAIN_STRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Patterns.html#TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL { get { if (!_TOP_LEVEL_DOMAIN_STR_FOR_WEB_URLReady) { _TOP_LEVEL_DOMAIN_STR_FOR_WEB_URLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL"); _TOP_LEVEL_DOMAIN_STR_FOR_WEB_URLReady = true; } return _TOP_LEVEL_DOMAIN_STR_FOR_WEB_URLContent; } }
        private static Java.Lang.String _TOP_LEVEL_DOMAIN_STR_FOR_WEB_URLContent = default;
        private static bool _TOP_LEVEL_DOMAIN_STR_FOR_WEB_URLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Patterns.html#DOMAIN_NAME"/>
        /// </summary>
        public static Java.Util.Regex.Pattern DOMAIN_NAME { get { if (!_DOMAIN_NAMEReady) { _DOMAIN_NAMEContent = SGetField<Java.Util.Regex.Pattern>(LocalBridgeClazz, "DOMAIN_NAME"); _DOMAIN_NAMEReady = true; } return _DOMAIN_NAMEContent; } }
        private static Java.Util.Regex.Pattern _DOMAIN_NAMEContent = default;
        private static bool _DOMAIN_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Patterns.html#EMAIL_ADDRESS"/>
        /// </summary>
        public static Java.Util.Regex.Pattern EMAIL_ADDRESS { get { if (!_EMAIL_ADDRESSReady) { _EMAIL_ADDRESSContent = SGetField<Java.Util.Regex.Pattern>(LocalBridgeClazz, "EMAIL_ADDRESS"); _EMAIL_ADDRESSReady = true; } return _EMAIL_ADDRESSContent; } }
        private static Java.Util.Regex.Pattern _EMAIL_ADDRESSContent = default;
        private static bool _EMAIL_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Patterns.html#IP_ADDRESS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Util.Regex.Pattern IP_ADDRESS { get { if (!_IP_ADDRESSReady) { _IP_ADDRESSContent = SGetField<Java.Util.Regex.Pattern>(LocalBridgeClazz, "IP_ADDRESS"); _IP_ADDRESSReady = true; } return _IP_ADDRESSContent; } }
        private static Java.Util.Regex.Pattern _IP_ADDRESSContent = default;
        private static bool _IP_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Patterns.html#PHONE"/>
        /// </summary>
        public static Java.Util.Regex.Pattern PHONE { get { if (!_PHONEReady) { _PHONEContent = SGetField<Java.Util.Regex.Pattern>(LocalBridgeClazz, "PHONE"); _PHONEReady = true; } return _PHONEContent; } }
        private static Java.Util.Regex.Pattern _PHONEContent = default;
        private static bool _PHONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Patterns.html#TOP_LEVEL_DOMAIN"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Util.Regex.Pattern TOP_LEVEL_DOMAIN { get { if (!_TOP_LEVEL_DOMAINReady) { _TOP_LEVEL_DOMAINContent = SGetField<Java.Util.Regex.Pattern>(LocalBridgeClazz, "TOP_LEVEL_DOMAIN"); _TOP_LEVEL_DOMAINReady = true; } return _TOP_LEVEL_DOMAINContent; } }
        private static Java.Util.Regex.Pattern _TOP_LEVEL_DOMAINContent = default;
        private static bool _TOP_LEVEL_DOMAINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Patterns.html#WEB_URL"/>
        /// </summary>
        public static Java.Util.Regex.Pattern WEB_URL { get { if (!_WEB_URLReady) { _WEB_URLContent = SGetField<Java.Util.Regex.Pattern>(LocalBridgeClazz, "WEB_URL"); _WEB_URLReady = true; } return _WEB_URLContent; } }
        private static Java.Util.Regex.Pattern _WEB_URLContent = default;
        private static bool _WEB_URLReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Patterns.html#concatGroups(java.util.regex.Matcher)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Regex.Matcher"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String ConcatGroups(Java.Util.Regex.Matcher arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "concatGroups", "(Ljava/util/regex/Matcher;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Patterns.html#digitsAndPlusOnly(java.util.regex.Matcher)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Regex.Matcher"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String DigitsAndPlusOnly(Java.Util.Regex.Matcher arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "digitsAndPlusOnly", "(Ljava/util/regex/Matcher;)Ljava/lang/String;", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
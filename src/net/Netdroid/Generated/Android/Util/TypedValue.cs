/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Util
{
    #region TypedValue declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/util/TypedValue.html"/>
    /// </summary>
    public partial class TypedValue : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TypedValue>
    {
        const string _bridgeClassName = "android.util.TypedValue";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public TypedValue() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public TypedValue(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region TypedValue implementation
    public partial class TypedValue
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#assetCookie"/>
        /// </summary>
        public int assetCookie { get { return IGetField<int>("assetCookie"); } set { ISetField("assetCookie", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#changingConfigurations"/>
        /// </summary>
        public int changingConfigurations { get { return IGetField<int>("changingConfigurations"); } set { ISetField("changingConfigurations", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#data"/>
        /// </summary>
        public int data { get { return IGetField<int>("data"); } set { ISetField("data", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#density"/>
        /// </summary>
        public int density { get { return IGetField<int>("density"); } set { ISetField("density", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#resourceId"/>
        /// </summary>
        public int resourceId { get { return IGetField<int>("resourceId"); } set { ISetField("resourceId", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#sourceResourceId"/>
        /// </summary>
        public int sourceResourceId { get { return IGetField<int>("sourceResourceId"); } set { ISetField("sourceResourceId", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#type"/>
        /// </summary>
        public int type { get { return IGetField<int>("type"); } set { ISetField("type", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#string"/>
        /// </summary>
        public Java.Lang.CharSequence stringField { get { return IGetField<Java.Lang.CharSequence>("string"); } set { ISetField("string", value); } }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_MANTISSA_MASK"/>
        /// </summary>
        public static int COMPLEX_MANTISSA_MASK { get { if (!_COMPLEX_MANTISSA_MASKReady) { _COMPLEX_MANTISSA_MASKContent = SGetField<int>(LocalBridgeClazz, "COMPLEX_MANTISSA_MASK"); _COMPLEX_MANTISSA_MASKReady = true; } return _COMPLEX_MANTISSA_MASKContent; } }
        private static int _COMPLEX_MANTISSA_MASKContent = default;
        private static bool _COMPLEX_MANTISSA_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_MANTISSA_SHIFT"/>
        /// </summary>
        public static int COMPLEX_MANTISSA_SHIFT { get { if (!_COMPLEX_MANTISSA_SHIFTReady) { _COMPLEX_MANTISSA_SHIFTContent = SGetField<int>(LocalBridgeClazz, "COMPLEX_MANTISSA_SHIFT"); _COMPLEX_MANTISSA_SHIFTReady = true; } return _COMPLEX_MANTISSA_SHIFTContent; } }
        private static int _COMPLEX_MANTISSA_SHIFTContent = default;
        private static bool _COMPLEX_MANTISSA_SHIFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_RADIX_0p23"/>
        /// </summary>
        public static int COMPLEX_RADIX_0p23 { get { if (!_COMPLEX_RADIX_0p23Ready) { _COMPLEX_RADIX_0p23Content = SGetField<int>(LocalBridgeClazz, "COMPLEX_RADIX_0p23"); _COMPLEX_RADIX_0p23Ready = true; } return _COMPLEX_RADIX_0p23Content; } }
        private static int _COMPLEX_RADIX_0p23Content = default;
        private static bool _COMPLEX_RADIX_0p23Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_RADIX_16p7"/>
        /// </summary>
        public static int COMPLEX_RADIX_16p7 { get { if (!_COMPLEX_RADIX_16p7Ready) { _COMPLEX_RADIX_16p7Content = SGetField<int>(LocalBridgeClazz, "COMPLEX_RADIX_16p7"); _COMPLEX_RADIX_16p7Ready = true; } return _COMPLEX_RADIX_16p7Content; } }
        private static int _COMPLEX_RADIX_16p7Content = default;
        private static bool _COMPLEX_RADIX_16p7Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_RADIX_23p0"/>
        /// </summary>
        public static int COMPLEX_RADIX_23p0 { get { if (!_COMPLEX_RADIX_23p0Ready) { _COMPLEX_RADIX_23p0Content = SGetField<int>(LocalBridgeClazz, "COMPLEX_RADIX_23p0"); _COMPLEX_RADIX_23p0Ready = true; } return _COMPLEX_RADIX_23p0Content; } }
        private static int _COMPLEX_RADIX_23p0Content = default;
        private static bool _COMPLEX_RADIX_23p0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_RADIX_8p15"/>
        /// </summary>
        public static int COMPLEX_RADIX_8p15 { get { if (!_COMPLEX_RADIX_8p15Ready) { _COMPLEX_RADIX_8p15Content = SGetField<int>(LocalBridgeClazz, "COMPLEX_RADIX_8p15"); _COMPLEX_RADIX_8p15Ready = true; } return _COMPLEX_RADIX_8p15Content; } }
        private static int _COMPLEX_RADIX_8p15Content = default;
        private static bool _COMPLEX_RADIX_8p15Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_RADIX_MASK"/>
        /// </summary>
        public static int COMPLEX_RADIX_MASK { get { if (!_COMPLEX_RADIX_MASKReady) { _COMPLEX_RADIX_MASKContent = SGetField<int>(LocalBridgeClazz, "COMPLEX_RADIX_MASK"); _COMPLEX_RADIX_MASKReady = true; } return _COMPLEX_RADIX_MASKContent; } }
        private static int _COMPLEX_RADIX_MASKContent = default;
        private static bool _COMPLEX_RADIX_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_RADIX_SHIFT"/>
        /// </summary>
        public static int COMPLEX_RADIX_SHIFT { get { if (!_COMPLEX_RADIX_SHIFTReady) { _COMPLEX_RADIX_SHIFTContent = SGetField<int>(LocalBridgeClazz, "COMPLEX_RADIX_SHIFT"); _COMPLEX_RADIX_SHIFTReady = true; } return _COMPLEX_RADIX_SHIFTContent; } }
        private static int _COMPLEX_RADIX_SHIFTContent = default;
        private static bool _COMPLEX_RADIX_SHIFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_UNIT_DIP"/>
        /// </summary>
        public static int COMPLEX_UNIT_DIP { get { if (!_COMPLEX_UNIT_DIPReady) { _COMPLEX_UNIT_DIPContent = SGetField<int>(LocalBridgeClazz, "COMPLEX_UNIT_DIP"); _COMPLEX_UNIT_DIPReady = true; } return _COMPLEX_UNIT_DIPContent; } }
        private static int _COMPLEX_UNIT_DIPContent = default;
        private static bool _COMPLEX_UNIT_DIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_UNIT_FRACTION"/>
        /// </summary>
        public static int COMPLEX_UNIT_FRACTION { get { if (!_COMPLEX_UNIT_FRACTIONReady) { _COMPLEX_UNIT_FRACTIONContent = SGetField<int>(LocalBridgeClazz, "COMPLEX_UNIT_FRACTION"); _COMPLEX_UNIT_FRACTIONReady = true; } return _COMPLEX_UNIT_FRACTIONContent; } }
        private static int _COMPLEX_UNIT_FRACTIONContent = default;
        private static bool _COMPLEX_UNIT_FRACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_UNIT_FRACTION_PARENT"/>
        /// </summary>
        public static int COMPLEX_UNIT_FRACTION_PARENT { get { if (!_COMPLEX_UNIT_FRACTION_PARENTReady) { _COMPLEX_UNIT_FRACTION_PARENTContent = SGetField<int>(LocalBridgeClazz, "COMPLEX_UNIT_FRACTION_PARENT"); _COMPLEX_UNIT_FRACTION_PARENTReady = true; } return _COMPLEX_UNIT_FRACTION_PARENTContent; } }
        private static int _COMPLEX_UNIT_FRACTION_PARENTContent = default;
        private static bool _COMPLEX_UNIT_FRACTION_PARENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_UNIT_IN"/>
        /// </summary>
        public static int COMPLEX_UNIT_IN { get { if (!_COMPLEX_UNIT_INReady) { _COMPLEX_UNIT_INContent = SGetField<int>(LocalBridgeClazz, "COMPLEX_UNIT_IN"); _COMPLEX_UNIT_INReady = true; } return _COMPLEX_UNIT_INContent; } }
        private static int _COMPLEX_UNIT_INContent = default;
        private static bool _COMPLEX_UNIT_INReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_UNIT_MASK"/>
        /// </summary>
        public static int COMPLEX_UNIT_MASK { get { if (!_COMPLEX_UNIT_MASKReady) { _COMPLEX_UNIT_MASKContent = SGetField<int>(LocalBridgeClazz, "COMPLEX_UNIT_MASK"); _COMPLEX_UNIT_MASKReady = true; } return _COMPLEX_UNIT_MASKContent; } }
        private static int _COMPLEX_UNIT_MASKContent = default;
        private static bool _COMPLEX_UNIT_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_UNIT_MM"/>
        /// </summary>
        public static int COMPLEX_UNIT_MM { get { if (!_COMPLEX_UNIT_MMReady) { _COMPLEX_UNIT_MMContent = SGetField<int>(LocalBridgeClazz, "COMPLEX_UNIT_MM"); _COMPLEX_UNIT_MMReady = true; } return _COMPLEX_UNIT_MMContent; } }
        private static int _COMPLEX_UNIT_MMContent = default;
        private static bool _COMPLEX_UNIT_MMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_UNIT_PT"/>
        /// </summary>
        public static int COMPLEX_UNIT_PT { get { if (!_COMPLEX_UNIT_PTReady) { _COMPLEX_UNIT_PTContent = SGetField<int>(LocalBridgeClazz, "COMPLEX_UNIT_PT"); _COMPLEX_UNIT_PTReady = true; } return _COMPLEX_UNIT_PTContent; } }
        private static int _COMPLEX_UNIT_PTContent = default;
        private static bool _COMPLEX_UNIT_PTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_UNIT_PX"/>
        /// </summary>
        public static int COMPLEX_UNIT_PX { get { if (!_COMPLEX_UNIT_PXReady) { _COMPLEX_UNIT_PXContent = SGetField<int>(LocalBridgeClazz, "COMPLEX_UNIT_PX"); _COMPLEX_UNIT_PXReady = true; } return _COMPLEX_UNIT_PXContent; } }
        private static int _COMPLEX_UNIT_PXContent = default;
        private static bool _COMPLEX_UNIT_PXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_UNIT_SHIFT"/>
        /// </summary>
        public static int COMPLEX_UNIT_SHIFT { get { if (!_COMPLEX_UNIT_SHIFTReady) { _COMPLEX_UNIT_SHIFTContent = SGetField<int>(LocalBridgeClazz, "COMPLEX_UNIT_SHIFT"); _COMPLEX_UNIT_SHIFTReady = true; } return _COMPLEX_UNIT_SHIFTContent; } }
        private static int _COMPLEX_UNIT_SHIFTContent = default;
        private static bool _COMPLEX_UNIT_SHIFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_UNIT_SP"/>
        /// </summary>
        public static int COMPLEX_UNIT_SP { get { if (!_COMPLEX_UNIT_SPReady) { _COMPLEX_UNIT_SPContent = SGetField<int>(LocalBridgeClazz, "COMPLEX_UNIT_SP"); _COMPLEX_UNIT_SPReady = true; } return _COMPLEX_UNIT_SPContent; } }
        private static int _COMPLEX_UNIT_SPContent = default;
        private static bool _COMPLEX_UNIT_SPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#DATA_NULL_EMPTY"/>
        /// </summary>
        public static int DATA_NULL_EMPTY { get { if (!_DATA_NULL_EMPTYReady) { _DATA_NULL_EMPTYContent = SGetField<int>(LocalBridgeClazz, "DATA_NULL_EMPTY"); _DATA_NULL_EMPTYReady = true; } return _DATA_NULL_EMPTYContent; } }
        private static int _DATA_NULL_EMPTYContent = default;
        private static bool _DATA_NULL_EMPTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#DATA_NULL_UNDEFINED"/>
        /// </summary>
        public static int DATA_NULL_UNDEFINED { get { if (!_DATA_NULL_UNDEFINEDReady) { _DATA_NULL_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "DATA_NULL_UNDEFINED"); _DATA_NULL_UNDEFINEDReady = true; } return _DATA_NULL_UNDEFINEDContent; } }
        private static int _DATA_NULL_UNDEFINEDContent = default;
        private static bool _DATA_NULL_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#DENSITY_DEFAULT"/>
        /// </summary>
        public static int DENSITY_DEFAULT { get { if (!_DENSITY_DEFAULTReady) { _DENSITY_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "DENSITY_DEFAULT"); _DENSITY_DEFAULTReady = true; } return _DENSITY_DEFAULTContent; } }
        private static int _DENSITY_DEFAULTContent = default;
        private static bool _DENSITY_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#DENSITY_NONE"/>
        /// </summary>
        public static int DENSITY_NONE { get { if (!_DENSITY_NONEReady) { _DENSITY_NONEContent = SGetField<int>(LocalBridgeClazz, "DENSITY_NONE"); _DENSITY_NONEReady = true; } return _DENSITY_NONEContent; } }
        private static int _DENSITY_NONEContent = default;
        private static bool _DENSITY_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_ATTRIBUTE"/>
        /// </summary>
        public static int TYPE_ATTRIBUTE { get { if (!_TYPE_ATTRIBUTEReady) { _TYPE_ATTRIBUTEContent = SGetField<int>(LocalBridgeClazz, "TYPE_ATTRIBUTE"); _TYPE_ATTRIBUTEReady = true; } return _TYPE_ATTRIBUTEContent; } }
        private static int _TYPE_ATTRIBUTEContent = default;
        private static bool _TYPE_ATTRIBUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_DIMENSION"/>
        /// </summary>
        public static int TYPE_DIMENSION { get { if (!_TYPE_DIMENSIONReady) { _TYPE_DIMENSIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_DIMENSION"); _TYPE_DIMENSIONReady = true; } return _TYPE_DIMENSIONContent; } }
        private static int _TYPE_DIMENSIONContent = default;
        private static bool _TYPE_DIMENSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_FIRST_COLOR_INT"/>
        /// </summary>
        public static int TYPE_FIRST_COLOR_INT { get { if (!_TYPE_FIRST_COLOR_INTReady) { _TYPE_FIRST_COLOR_INTContent = SGetField<int>(LocalBridgeClazz, "TYPE_FIRST_COLOR_INT"); _TYPE_FIRST_COLOR_INTReady = true; } return _TYPE_FIRST_COLOR_INTContent; } }
        private static int _TYPE_FIRST_COLOR_INTContent = default;
        private static bool _TYPE_FIRST_COLOR_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_FIRST_INT"/>
        /// </summary>
        public static int TYPE_FIRST_INT { get { if (!_TYPE_FIRST_INTReady) { _TYPE_FIRST_INTContent = SGetField<int>(LocalBridgeClazz, "TYPE_FIRST_INT"); _TYPE_FIRST_INTReady = true; } return _TYPE_FIRST_INTContent; } }
        private static int _TYPE_FIRST_INTContent = default;
        private static bool _TYPE_FIRST_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_FLOAT"/>
        /// </summary>
        public static int TYPE_FLOAT { get { if (!_TYPE_FLOATReady) { _TYPE_FLOATContent = SGetField<int>(LocalBridgeClazz, "TYPE_FLOAT"); _TYPE_FLOATReady = true; } return _TYPE_FLOATContent; } }
        private static int _TYPE_FLOATContent = default;
        private static bool _TYPE_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_FRACTION"/>
        /// </summary>
        public static int TYPE_FRACTION { get { if (!_TYPE_FRACTIONReady) { _TYPE_FRACTIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_FRACTION"); _TYPE_FRACTIONReady = true; } return _TYPE_FRACTIONContent; } }
        private static int _TYPE_FRACTIONContent = default;
        private static bool _TYPE_FRACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_INT_BOOLEAN"/>
        /// </summary>
        public static int TYPE_INT_BOOLEAN { get { if (!_TYPE_INT_BOOLEANReady) { _TYPE_INT_BOOLEANContent = SGetField<int>(LocalBridgeClazz, "TYPE_INT_BOOLEAN"); _TYPE_INT_BOOLEANReady = true; } return _TYPE_INT_BOOLEANContent; } }
        private static int _TYPE_INT_BOOLEANContent = default;
        private static bool _TYPE_INT_BOOLEANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_INT_COLOR_ARGB4"/>
        /// </summary>
        public static int TYPE_INT_COLOR_ARGB4 { get { if (!_TYPE_INT_COLOR_ARGB4Ready) { _TYPE_INT_COLOR_ARGB4Content = SGetField<int>(LocalBridgeClazz, "TYPE_INT_COLOR_ARGB4"); _TYPE_INT_COLOR_ARGB4Ready = true; } return _TYPE_INT_COLOR_ARGB4Content; } }
        private static int _TYPE_INT_COLOR_ARGB4Content = default;
        private static bool _TYPE_INT_COLOR_ARGB4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_INT_COLOR_ARGB8"/>
        /// </summary>
        public static int TYPE_INT_COLOR_ARGB8 { get { if (!_TYPE_INT_COLOR_ARGB8Ready) { _TYPE_INT_COLOR_ARGB8Content = SGetField<int>(LocalBridgeClazz, "TYPE_INT_COLOR_ARGB8"); _TYPE_INT_COLOR_ARGB8Ready = true; } return _TYPE_INT_COLOR_ARGB8Content; } }
        private static int _TYPE_INT_COLOR_ARGB8Content = default;
        private static bool _TYPE_INT_COLOR_ARGB8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_INT_COLOR_RGB4"/>
        /// </summary>
        public static int TYPE_INT_COLOR_RGB4 { get { if (!_TYPE_INT_COLOR_RGB4Ready) { _TYPE_INT_COLOR_RGB4Content = SGetField<int>(LocalBridgeClazz, "TYPE_INT_COLOR_RGB4"); _TYPE_INT_COLOR_RGB4Ready = true; } return _TYPE_INT_COLOR_RGB4Content; } }
        private static int _TYPE_INT_COLOR_RGB4Content = default;
        private static bool _TYPE_INT_COLOR_RGB4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_INT_COLOR_RGB8"/>
        /// </summary>
        public static int TYPE_INT_COLOR_RGB8 { get { if (!_TYPE_INT_COLOR_RGB8Ready) { _TYPE_INT_COLOR_RGB8Content = SGetField<int>(LocalBridgeClazz, "TYPE_INT_COLOR_RGB8"); _TYPE_INT_COLOR_RGB8Ready = true; } return _TYPE_INT_COLOR_RGB8Content; } }
        private static int _TYPE_INT_COLOR_RGB8Content = default;
        private static bool _TYPE_INT_COLOR_RGB8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_INT_DEC"/>
        /// </summary>
        public static int TYPE_INT_DEC { get { if (!_TYPE_INT_DECReady) { _TYPE_INT_DECContent = SGetField<int>(LocalBridgeClazz, "TYPE_INT_DEC"); _TYPE_INT_DECReady = true; } return _TYPE_INT_DECContent; } }
        private static int _TYPE_INT_DECContent = default;
        private static bool _TYPE_INT_DECReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_INT_HEX"/>
        /// </summary>
        public static int TYPE_INT_HEX { get { if (!_TYPE_INT_HEXReady) { _TYPE_INT_HEXContent = SGetField<int>(LocalBridgeClazz, "TYPE_INT_HEX"); _TYPE_INT_HEXReady = true; } return _TYPE_INT_HEXContent; } }
        private static int _TYPE_INT_HEXContent = default;
        private static bool _TYPE_INT_HEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_LAST_COLOR_INT"/>
        /// </summary>
        public static int TYPE_LAST_COLOR_INT { get { if (!_TYPE_LAST_COLOR_INTReady) { _TYPE_LAST_COLOR_INTContent = SGetField<int>(LocalBridgeClazz, "TYPE_LAST_COLOR_INT"); _TYPE_LAST_COLOR_INTReady = true; } return _TYPE_LAST_COLOR_INTContent; } }
        private static int _TYPE_LAST_COLOR_INTContent = default;
        private static bool _TYPE_LAST_COLOR_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_LAST_INT"/>
        /// </summary>
        public static int TYPE_LAST_INT { get { if (!_TYPE_LAST_INTReady) { _TYPE_LAST_INTContent = SGetField<int>(LocalBridgeClazz, "TYPE_LAST_INT"); _TYPE_LAST_INTReady = true; } return _TYPE_LAST_INTContent; } }
        private static int _TYPE_LAST_INTContent = default;
        private static bool _TYPE_LAST_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_NULL"/>
        /// </summary>
        public static int TYPE_NULL { get { if (!_TYPE_NULLReady) { _TYPE_NULLContent = SGetField<int>(LocalBridgeClazz, "TYPE_NULL"); _TYPE_NULLReady = true; } return _TYPE_NULLContent; } }
        private static int _TYPE_NULLContent = default;
        private static bool _TYPE_NULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_REFERENCE"/>
        /// </summary>
        public static int TYPE_REFERENCE { get { if (!_TYPE_REFERENCEReady) { _TYPE_REFERENCEContent = SGetField<int>(LocalBridgeClazz, "TYPE_REFERENCE"); _TYPE_REFERENCEReady = true; } return _TYPE_REFERENCEContent; } }
        private static int _TYPE_REFERENCEContent = default;
        private static bool _TYPE_REFERENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#TYPE_STRING"/>
        /// </summary>
        public static int TYPE_STRING { get { if (!_TYPE_STRINGReady) { _TYPE_STRINGContent = SGetField<int>(LocalBridgeClazz, "TYPE_STRING"); _TYPE_STRINGReady = true; } return _TYPE_STRINGContent; } }
        private static int _TYPE_STRINGContent = default;
        private static bool _TYPE_STRINGReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#coerceToString(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String CoerceToString(int arg0, int arg1)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "coerceToString", "(II)Ljava/lang/String;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#applyDimension(int,float,android.util.DisplayMetrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="Android.Util.DisplayMetrics"/></param>
        /// <returns><see cref="float"/></returns>
        public static float ApplyDimension(int arg0, float arg1, Android.Util.DisplayMetrics arg2)
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "applyDimension", "(IFLandroid/util/DisplayMetrics;)F", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#complexToDimension(int,android.util.DisplayMetrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Util.DisplayMetrics"/></param>
        /// <returns><see cref="float"/></returns>
        public static float ComplexToDimension(int arg0, Android.Util.DisplayMetrics arg1)
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "complexToDimension", "(ILandroid/util/DisplayMetrics;)F", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#complexToFloat(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public static float ComplexToFloat(int arg0)
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "complexToFloat", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#complexToFraction(int,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <returns><see cref="float"/></returns>
        public static float ComplexToFraction(int arg0, float arg1, float arg2)
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "complexToFraction", "(IFF)F", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#convertDimensionToPixels(int,float,android.util.DisplayMetrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="Android.Util.DisplayMetrics"/></param>
        /// <returns><see cref="float"/></returns>
        public static float ConvertDimensionToPixels(int arg0, float arg1, Android.Util.DisplayMetrics arg2)
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "convertDimensionToPixels", "(IFLandroid/util/DisplayMetrics;)F", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#convertPixelsToDimension(int,float,android.util.DisplayMetrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="Android.Util.DisplayMetrics"/></param>
        /// <returns><see cref="float"/></returns>
        public static float ConvertPixelsToDimension(int arg0, float arg1, Android.Util.DisplayMetrics arg2)
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "convertPixelsToDimension", "(IFLandroid/util/DisplayMetrics;)F", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#deriveDimension(int,float,android.util.DisplayMetrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="Android.Util.DisplayMetrics"/></param>
        /// <returns><see cref="float"/></returns>
        public static float DeriveDimension(int arg0, float arg1, Android.Util.DisplayMetrics arg2)
        {
            return SExecuteWithSignature<float>(LocalBridgeClazz, "deriveDimension", "(IFLandroid/util/DisplayMetrics;)F", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#complexToDimensionPixelOffset(int,android.util.DisplayMetrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Util.DisplayMetrics"/></param>
        /// <returns><see cref="int"/></returns>
        public static int ComplexToDimensionPixelOffset(int arg0, Android.Util.DisplayMetrics arg1)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "complexToDimensionPixelOffset", "(ILandroid/util/DisplayMetrics;)I", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#complexToDimensionPixelSize(int,android.util.DisplayMetrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Util.DisplayMetrics"/></param>
        /// <returns><see cref="int"/></returns>
        public static int ComplexToDimensionPixelSize(int arg0, Android.Util.DisplayMetrics arg1)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "complexToDimensionPixelSize", "(ILandroid/util/DisplayMetrics;)I", arg0, arg1);
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#isColorType()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsColorType()
        {
            return IExecuteWithSignature<bool>("isColorType", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#getFloat()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetFloat()
        {
            return IExecuteWithSignature<float>("getFloat", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#coerceToString()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence CoerceToString()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("coerceToString", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#getDimension(android.util.DisplayMetrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.DisplayMetrics"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetDimension(Android.Util.DisplayMetrics arg0)
        {
            return IExecuteWithSignature<float>("getDimension", "(Landroid/util/DisplayMetrics;)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#getFraction(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetFraction(float arg0, float arg1)
        {
            return IExecuteWithSignature<float>("getFraction", "(FF)F", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#getComplexUnit()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetComplexUnit()
        {
            return IExecuteWithSignature<int>("getComplexUnit", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/TypedValue.html#setTo(android.util.TypedValue)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.TypedValue"/></param>
        public void SetTo(Android.Util.TypedValue arg0)
        {
            IExecuteWithSignature("setTo", "(Landroid/util/TypedValue;)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
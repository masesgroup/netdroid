/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Util
{
    #region Rational
    public partial class Rational
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Rational.html#%3Cinit%3E(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public Rational(int arg0, int arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Util.Rational"/> to <see cref="Java.Lang.Comparable"/>
        /// </summary>
        public static implicit operator Java.Lang.Comparable(Android.Util.Rational t) => t.Cast<Java.Lang.Comparable>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Rational.html#NaN"/>
        /// </summary>
        public static Android.Util.Rational NaN { get { if (!_NaNReady) { _NaNContent = SGetField<Android.Util.Rational>(LocalBridgeClazz, "NaN"); _NaNReady = true; } return _NaNContent; } }
        private static Android.Util.Rational _NaNContent = default;
        private static bool _NaNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Rational.html#NEGATIVE_INFINITY"/>
        /// </summary>
        public static Android.Util.Rational NEGATIVE_INFINITY { get { if (!_NEGATIVE_INFINITYReady) { _NEGATIVE_INFINITYContent = SGetField<Android.Util.Rational>(LocalBridgeClazz, "NEGATIVE_INFINITY"); _NEGATIVE_INFINITYReady = true; } return _NEGATIVE_INFINITYContent; } }
        private static Android.Util.Rational _NEGATIVE_INFINITYContent = default;
        private static bool _NEGATIVE_INFINITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Rational.html#POSITIVE_INFINITY"/>
        /// </summary>
        public static Android.Util.Rational POSITIVE_INFINITY { get { if (!_POSITIVE_INFINITYReady) { _POSITIVE_INFINITYContent = SGetField<Android.Util.Rational>(LocalBridgeClazz, "POSITIVE_INFINITY"); _POSITIVE_INFINITYReady = true; } return _POSITIVE_INFINITYContent; } }
        private static Android.Util.Rational _POSITIVE_INFINITYContent = default;
        private static bool _POSITIVE_INFINITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Rational.html#ZERO"/>
        /// </summary>
        public static Android.Util.Rational ZERO { get { if (!_ZEROReady) { _ZEROContent = SGetField<Android.Util.Rational>(LocalBridgeClazz, "ZERO"); _ZEROReady = true; } return _ZEROContent; } }
        private static Android.Util.Rational _ZEROContent = default;
        private static bool _ZEROReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Rational.html#parseRational(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Util.Rational"/></returns>
        /// <exception cref="Java.Lang.NumberFormatException"/>
        public static Android.Util.Rational ParseRational(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Android.Util.Rational>(LocalBridgeClazz, "parseRational", "(Ljava/lang/String;)Landroid/util/Rational;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Rational.html#isFinite()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFinite()
        {
            return IExecuteWithSignature<bool>("isFinite", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Rational.html#isInfinite()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsInfinite()
        {
            return IExecuteWithSignature<bool>("isInfinite", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Rational.html#isNaN()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsNaN()
        {
            return IExecuteWithSignature<bool>("isNaN", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Rational.html#isZero()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsZero()
        {
            return IExecuteWithSignature<bool>("isZero", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Rational.html#compareTo(android.util.Rational)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.Rational"/></param>
        /// <returns><see cref="int"/></returns>
        public int CompareTo(Android.Util.Rational arg0)
        {
            return IExecuteWithSignature<int>("compareTo", "(Landroid/util/Rational;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Rational.html#compareTo(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="int"/></returns>
        public int CompareTo(object arg0)
        {
            return IExecuteWithSignature<int>("compareTo", "(Ljava/lang/Object;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Rational.html#getDenominator()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDenominator()
        {
            return IExecuteWithSignature<int>("getDenominator", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Rational.html#getNumerator()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNumerator()
        {
            return IExecuteWithSignature<int>("getNumerator", "()I");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
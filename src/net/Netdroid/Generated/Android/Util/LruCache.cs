/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Util
{
    #region LruCache declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/util/LruCache.html"/>
    /// </summary>
    public partial class LruCache : MASES.JCOBridge.C2JBridge.JVMBridgeBase<LruCache>
    {
        const string _bridgeClassName = "android.util.LruCache";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public LruCache() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public LruCache(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region LruCache<K, V> declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/util/LruCache.html"/>
    /// </summary>
    /// <typeparam name="K"></typeparam>
    /// <typeparam name="V"></typeparam>
    public partial class LruCache<K, V> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<LruCache<K, V>>
    {
        const string _bridgeClassName = "android.util.LruCache";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public LruCache() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public LruCache(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region LruCache implementation
    public partial class LruCache
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#%3Cinit%3E(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public LruCache(int arg0)
            : base(arg0)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#createCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int CreateCount()
        {
            return IExecute<int>("createCount");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#evictionCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int EvictionCount()
        {
            return IExecute<int>("evictionCount");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#hitCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int HitCount()
        {
            return IExecute<int>("hitCount");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#maxSize()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int MaxSize()
        {
            return IExecute<int>("maxSize");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#missCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int MissCount()
        {
            return IExecute<int>("missCount");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#putCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int PutCount()
        {
            return IExecute<int>("putCount");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#size()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Size()
        {
            return IExecute<int>("size");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#snapshot()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map Snapshot()
        {
            return IExecute<Java.Util.Map>("snapshot");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#get(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object Get(object arg0)
        {
            return IExecute("get", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#put(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object Put(object arg0, object arg1)
        {
            return IExecute("put", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#remove(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object Remove(object arg0)
        {
            return IExecute("remove", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#evictAll()"/>
        /// </summary>
        public void EvictAll()
        {
            IExecute("evictAll");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#resize(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void Resize(int arg0)
        {
            IExecute("resize", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#trimToSize(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void TrimToSize(int arg0)
        {
            IExecute("trimToSize", arg0);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion

    #region LruCache<K, V> implementation
    public partial class LruCache<K, V>
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#%3Cinit%3E(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public LruCache(int arg0)
            : base(arg0)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Util.LruCache{K, V}"/> to <see cref="Android.Util.LruCache"/>
        /// </summary>
        public static implicit operator Android.Util.LruCache(Android.Util.LruCache<K, V> t) => t.Cast<Android.Util.LruCache>();
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#createCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int CreateCount()
        {
            return IExecute<int>("createCount");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#evictionCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int EvictionCount()
        {
            return IExecute<int>("evictionCount");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#hitCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int HitCount()
        {
            return IExecute<int>("hitCount");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#maxSize()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int MaxSize()
        {
            return IExecute<int>("maxSize");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#missCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int MissCount()
        {
            return IExecute<int>("missCount");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#putCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int PutCount()
        {
            return IExecute<int>("putCount");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#size()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Size()
        {
            return IExecute<int>("size");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#snapshot()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<K, V> Snapshot()
        {
            return IExecute<Java.Util.Map<K, V>>("snapshot");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#get(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><typeparamref name="K"/></param>
        /// <returns><typeparamref name="V"/></returns>
        public V Get(K arg0)
        {
            return IExecute<V>("get", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#put(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><typeparamref name="K"/></param>
        /// <param name="arg1"><typeparamref name="V"/></param>
        /// <returns><typeparamref name="V"/></returns>
        public V Put(K arg0, V arg1)
        {
            return IExecute<V>("put", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#remove(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><typeparamref name="K"/></param>
        /// <returns><typeparamref name="V"/></returns>
        public V Remove(K arg0)
        {
            return IExecute<V>("remove", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#evictAll()"/>
        /// </summary>
        public void EvictAll()
        {
            IExecute("evictAll");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#resize(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void Resize(int arg0)
        {
            IExecute("resize", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/LruCache.html#trimToSize(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void TrimToSize(int arg0)
        {
            IExecute("trimToSize", arg0);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Util
{
    #region Xml declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/util/Xml.html"/>
    /// </summary>
    public partial class Xml : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Xml>
    {
        const string _bridgeClassName = "android.util.Xml";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Xml() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Xml(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Encoding declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Xml.Encoding.html"/>
        /// </summary>
        public partial class Encoding : Java.Lang.Enum<Android.Util.Xml.Encoding>
        {
            const string _bridgeClassName = "android.util.Xml$Encoding";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Encoding() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Encoding(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region Xml implementation
    public partial class Xml
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Xml.html#FEATURE_RELAXED"/>
        /// </summary>
        public static Java.Lang.String FEATURE_RELAXED { get { return SGetField<Java.Lang.String>(LocalBridgeClazz, "FEATURE_RELAXED"); } set { SSetField(LocalBridgeClazz, "FEATURE_RELAXED", value); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Xml.html#asAttributeSet(org.xmlpull.v1.XmlPullParser)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Xmlpull.V1.XmlPullParser"/></param>
        /// <returns><see cref="Android.Util.AttributeSet"/></returns>
        public static Android.Util.AttributeSet AsAttributeSet(Org.Xmlpull.V1.XmlPullParser arg0)
        {
            return SExecuteWithSignature<Android.Util.AttributeSet>(LocalBridgeClazz, "asAttributeSet", "(Lorg/xmlpull/v1/XmlPullParser;)Landroid/util/AttributeSet;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Xml.html#findEncodingByName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Util.Xml.Encoding"/></returns>
        /// <exception cref="Java.Io.UnsupportedEncodingException"/>
        public static Android.Util.Xml.Encoding FindEncodingByName(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Android.Util.Xml.Encoding>(LocalBridgeClazz, "findEncodingByName", "(Ljava/lang/String;)Landroid/util/Xml$Encoding;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Xml.html#newPullParser()"/>
        /// </summary>
        /// <returns><see cref="Org.Xmlpull.V1.XmlPullParser"/></returns>
        public static Org.Xmlpull.V1.XmlPullParser NewPullParser()
        {
            return SExecuteWithSignature<Org.Xmlpull.V1.XmlPullParser>(LocalBridgeClazz, "newPullParser", "()Lorg/xmlpull/v1/XmlPullParser;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Xml.html#newSerializer()"/>
        /// </summary>
        /// <returns><see cref="Org.Xmlpull.V1.XmlSerializer"/></returns>
        public static Org.Xmlpull.V1.XmlSerializer NewSerializer()
        {
            return SExecuteWithSignature<Org.Xmlpull.V1.XmlSerializer>(LocalBridgeClazz, "newSerializer", "()Lorg/xmlpull/v1/XmlSerializer;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Xml.html#parse(java.io.InputStream,android.util.Xml.Encoding,org.xml.sax.ContentHandler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.InputStream"/></param>
        /// <param name="arg1"><see cref="Android.Util.Xml.Encoding"/></param>
        /// <param name="arg2"><see cref="Org.Xml.Sax.ContentHandler"/></param>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Org.Xml.Sax.SAXException"/>
        public static void Parse(Java.Io.InputStream arg0, Android.Util.Xml.Encoding arg1, Org.Xml.Sax.ContentHandler arg2)
        {
            SExecuteWithSignature(LocalBridgeClazz, "parse", "(Ljava/io/InputStream;Landroid/util/Xml$Encoding;Lorg/xml/sax/ContentHandler;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Xml.html#parse(java.io.Reader,org.xml.sax.ContentHandler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.Reader"/></param>
        /// <param name="arg1"><see cref="Org.Xml.Sax.ContentHandler"/></param>
        /// <exception cref="Java.Io.IOException"/>
        /// <exception cref="Org.Xml.Sax.SAXException"/>
        public static void Parse(Java.Io.Reader arg0, Org.Xml.Sax.ContentHandler arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "parse", "(Ljava/io/Reader;Lorg/xml/sax/ContentHandler;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Xml.html#parse(java.lang.String,org.xml.sax.ContentHandler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Org.Xml.Sax.ContentHandler"/></param>
        /// <exception cref="Org.Xml.Sax.SAXException"/>
        public static void Parse(Java.Lang.String arg0, Org.Xml.Sax.ContentHandler arg1)
        {
            SExecuteWithSignature(LocalBridgeClazz, "parse", "(Ljava/lang/String;Lorg/xml/sax/ContentHandler;)V", arg0, arg1);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region Encoding implementation
        public partial class Encoding
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/util/Xml.Encoding.html#ISO_8859_1"/>
            /// </summary>
            public static Android.Util.Xml.Encoding ISO_8859_1 { get { if (!_ISO_8859_1Ready) { _ISO_8859_1Content = SGetField<Android.Util.Xml.Encoding>(LocalBridgeClazz, "ISO_8859_1"); _ISO_8859_1Ready = true; } return _ISO_8859_1Content; } }
            private static Android.Util.Xml.Encoding _ISO_8859_1Content = default;
            private static bool _ISO_8859_1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/util/Xml.Encoding.html#US_ASCII"/>
            /// </summary>
            public static Android.Util.Xml.Encoding US_ASCII { get { if (!_US_ASCIIReady) { _US_ASCIIContent = SGetField<Android.Util.Xml.Encoding>(LocalBridgeClazz, "US_ASCII"); _US_ASCIIReady = true; } return _US_ASCIIContent; } }
            private static Android.Util.Xml.Encoding _US_ASCIIContent = default;
            private static bool _US_ASCIIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/util/Xml.Encoding.html#UTF_16"/>
            /// </summary>
            public static Android.Util.Xml.Encoding UTF_16 { get { if (!_UTF_16Ready) { _UTF_16Content = SGetField<Android.Util.Xml.Encoding>(LocalBridgeClazz, "UTF_16"); _UTF_16Ready = true; } return _UTF_16Content; } }
            private static Android.Util.Xml.Encoding _UTF_16Content = default;
            private static bool _UTF_16Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/util/Xml.Encoding.html#UTF_8"/>
            /// </summary>
            public static Android.Util.Xml.Encoding UTF_8 { get { if (!_UTF_8Ready) { _UTF_8Content = SGetField<Android.Util.Xml.Encoding>(LocalBridgeClazz, "UTF_8"); _UTF_8Ready = true; } return _UTF_8Content; } }
            private static Android.Util.Xml.Encoding _UTF_8Content = default;
            private static bool _UTF_8Ready = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/util/Xml.Encoding.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Util.Xml.Encoding"/></returns>
            public static Android.Util.Xml.Encoding ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Util.Xml.Encoding>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/util/Xml$Encoding;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/util/Xml.Encoding.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.Util.Xml.Encoding"/></returns>
            public static Android.Util.Xml.Encoding[] Values()
            {
                return SExecuteWithSignatureArray<Android.Util.Xml.Encoding>(LocalBridgeClazz, "values", "()[Landroid/util/Xml$Encoding;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
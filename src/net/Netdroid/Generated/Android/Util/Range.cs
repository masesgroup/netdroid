/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Util
{
    #region Range
    public partial class Range
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#%3Cinit%3E(java.lang.Comparable,java.lang.Comparable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Comparable"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Comparable"/></param>
        public Range(Java.Lang.Comparable arg0, Java.Lang.Comparable arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#create(java.lang.Comparable,java.lang.Comparable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Comparable"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Comparable"/></param>
        /// <returns><see cref="Android.Util.Range"/></returns>
        public static Android.Util.Range Create(Java.Lang.Comparable arg0, Java.Lang.Comparable arg1)
        {
            return SExecute<Android.Util.Range>(LocalBridgeClazz, "create", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#getLower()"/> 
        /// </summary>
        public Java.Lang.Comparable Lower
        {
            get { return IExecuteWithSignature<Java.Lang.Comparable>("getLower", "()Ljava/lang/Comparable;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#getUpper()"/> 
        /// </summary>
        public Java.Lang.Comparable Upper
        {
            get { return IExecuteWithSignature<Java.Lang.Comparable>("getUpper", "()Ljava/lang/Comparable;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#extend(android.util.Range)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.Range"/></param>
        /// <returns><see cref="Android.Util.Range"/></returns>
        public Android.Util.Range Extend(Android.Util.Range arg0)
        {
            return IExecuteWithSignature<Android.Util.Range>("extend", "(Landroid/util/Range;)Landroid/util/Range;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#extend(java.lang.Comparable,java.lang.Comparable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Comparable"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Comparable"/></param>
        /// <returns><see cref="Android.Util.Range"/></returns>
        public Android.Util.Range Extend(Java.Lang.Comparable arg0, Java.Lang.Comparable arg1)
        {
            return IExecute<Android.Util.Range>("extend", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#extend(java.lang.Comparable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Comparable"/></param>
        /// <returns><see cref="Android.Util.Range"/></returns>
        public Android.Util.Range Extend(Java.Lang.Comparable arg0)
        {
            return IExecuteWithSignature<Android.Util.Range>("extend", "(Ljava/lang/Comparable;)Landroid/util/Range;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#intersect(android.util.Range)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.Range"/></param>
        /// <returns><see cref="Android.Util.Range"/></returns>
        public Android.Util.Range Intersect(Android.Util.Range arg0)
        {
            return IExecuteWithSignature<Android.Util.Range>("intersect", "(Landroid/util/Range;)Landroid/util/Range;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#intersect(java.lang.Comparable,java.lang.Comparable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Comparable"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Comparable"/></param>
        /// <returns><see cref="Android.Util.Range"/></returns>
        public Android.Util.Range Intersect(Java.Lang.Comparable arg0, Java.Lang.Comparable arg1)
        {
            return IExecute<Android.Util.Range>("intersect", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#contains(android.util.Range)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.Range"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Contains(Android.Util.Range arg0)
        {
            return IExecuteWithSignature<bool>("contains", "(Landroid/util/Range;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#contains(java.lang.Comparable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Comparable"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Contains(Java.Lang.Comparable arg0)
        {
            return IExecuteWithSignature<bool>("contains", "(Ljava/lang/Comparable;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#clamp(java.lang.Comparable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Comparable"/></param>
        /// <returns><see cref="Java.Lang.Comparable"/></returns>
        public Java.Lang.Comparable Clamp(Java.Lang.Comparable arg0)
        {
            return IExecuteWithSignature<Java.Lang.Comparable>("clamp", "(Ljava/lang/Comparable;)Ljava/lang/Comparable;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region Range<T>
    public partial class Range<T>
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#%3Cinit%3E(java.lang.Comparable,java.lang.Comparable)"/>
        /// </summary>
        /// <param name="arg0"><typeparamref name="T"/></param>
        /// <param name="arg1"><typeparamref name="T"/></param>
        public Range(T arg0, T arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.Util.Range{T}"/> to <see cref="Android.Util.Range"/>
        /// </summary>
        public static implicit operator Android.Util.Range(Android.Util.Range<T> t) => t.Cast<Android.Util.Range>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#create(java.lang.Comparable,java.lang.Comparable)"/>
        /// </summary>
        /// <param name="arg0"><typeparamref name="T"/></param>
        /// <param name="arg1"><typeparamref name="T"/></param>
        /// <returns><see cref="Android.Util.Range"/></returns>
        public static Android.Util.Range<T> Create(T arg0, T arg1)
        {
            return SExecute<Android.Util.Range<T>>(LocalBridgeClazz, "create", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#getLower()"/> 
        /// </summary>
        public T Lower
        {
            get { return IExecuteWithSignature<T>("getLower", "()Ljava/lang/Comparable;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#getUpper()"/> 
        /// </summary>
        public T Upper
        {
            get { return IExecuteWithSignature<T>("getUpper", "()Ljava/lang/Comparable;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#extend(android.util.Range)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.Range"/></param>
        /// <returns><see cref="Android.Util.Range"/></returns>
        public Android.Util.Range<T> Extend(Android.Util.Range<T> arg0)
        {
            return IExecuteWithSignature<Android.Util.Range<T>>("extend", "(Landroid/util/Range;)Landroid/util/Range;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#extend(java.lang.Comparable,java.lang.Comparable)"/>
        /// </summary>
        /// <param name="arg0"><typeparamref name="T"/></param>
        /// <param name="arg1"><typeparamref name="T"/></param>
        /// <returns><see cref="Android.Util.Range"/></returns>
        public Android.Util.Range<T> Extend(T arg0, T arg1)
        {
            return IExecute<Android.Util.Range<T>>("extend", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#extend(java.lang.Comparable)"/>
        /// </summary>
        /// <param name="arg0"><typeparamref name="T"/></param>
        /// <returns><see cref="Android.Util.Range"/></returns>
        public Android.Util.Range<T> Extend(T arg0)
        {
            return IExecuteWithSignature<Android.Util.Range<T>>("extend", "(Ljava/lang/Comparable;)Landroid/util/Range;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#intersect(android.util.Range)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.Range"/></param>
        /// <returns><see cref="Android.Util.Range"/></returns>
        public Android.Util.Range<T> Intersect(Android.Util.Range<T> arg0)
        {
            return IExecuteWithSignature<Android.Util.Range<T>>("intersect", "(Landroid/util/Range;)Landroid/util/Range;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#intersect(java.lang.Comparable,java.lang.Comparable)"/>
        /// </summary>
        /// <param name="arg0"><typeparamref name="T"/></param>
        /// <param name="arg1"><typeparamref name="T"/></param>
        /// <returns><see cref="Android.Util.Range"/></returns>
        public Android.Util.Range<T> Intersect(T arg0, T arg1)
        {
            return IExecute<Android.Util.Range<T>>("intersect", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#contains(android.util.Range)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.Range"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Contains(Android.Util.Range<T> arg0)
        {
            return IExecuteWithSignature<bool>("contains", "(Landroid/util/Range;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#contains(java.lang.Comparable)"/>
        /// </summary>
        /// <param name="arg0"><typeparamref name="T"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Contains(T arg0)
        {
            return IExecuteWithSignature<bool>("contains", "(Ljava/lang/Comparable;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/util/Range.html#clamp(java.lang.Comparable)"/>
        /// </summary>
        /// <param name="arg0"><typeparamref name="T"/></param>
        /// <returns><typeparamref name="T"/></returns>
        public T Clamp(T arg0)
        {
            return IExecuteWithSignature<T>("clamp", "(Ljava/lang/Comparable;)Ljava/lang/Comparable;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
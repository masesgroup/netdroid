/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Gesture
{
    #region GestureOverlayView declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html"/>
    /// </summary>
    public partial class GestureOverlayView : Android.Widget.FrameLayout
    {
        const string _bridgeClassName = "android.gesture.GestureOverlayView";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public GestureOverlayView() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public GestureOverlayView(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
        #region OnGestureListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGestureListener.html"/>
        /// </summary>
        public partial class OnGestureListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnGestureListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.gesture.GestureOverlayView_OnGestureListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnGestureListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnGestureListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnGestureListenerDirect : OnGestureListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.gesture.GestureOverlayView$OnGestureListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnGesturePerformedListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGesturePerformedListener.html"/>
        /// </summary>
        public partial class OnGesturePerformedListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnGesturePerformedListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.gesture.GestureOverlayView_OnGesturePerformedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnGesturePerformedListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnGesturePerformedListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnGesturePerformedListenerDirect : OnGesturePerformedListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.gesture.GestureOverlayView$OnGesturePerformedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnGesturingListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGesturingListener.html"/>
        /// </summary>
        public partial class OnGesturingListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnGesturingListener() { InitializeHandlers(); }
        
            const string _bridgeClassName = "org.mases.netdroid.generated.android.gesture.GestureOverlayView_OnGesturingListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
        
        
            // TODO: complete the class
        
        }
        #endregion
        
        #region OnGesturingListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnGesturingListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnGesturingListenerDirect : OnGesturingListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;
        
            /// <inheritdoc />
            protected override void InitializeHandlers() { }
        
            const string _bridgeClassName = "android.gesture.GestureOverlayView$OnGesturingListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

    
    }
    #endregion

    #region GestureOverlayView implementation
    public partial class GestureOverlayView
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public GestureOverlayView(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2, int arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public GestureOverlayView(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        public GestureOverlayView(Android.Content.Context arg0, Android.Util.AttributeSet arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        public GestureOverlayView(Android.Content.Context arg0)
            : base(arg0)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#GESTURE_STROKE_TYPE_MULTIPLE"/>
        /// </summary>
        public static int GESTURE_STROKE_TYPE_MULTIPLE { get { if (!_GESTURE_STROKE_TYPE_MULTIPLEReady) { _GESTURE_STROKE_TYPE_MULTIPLEContent = SGetField<int>(LocalBridgeClazz, "GESTURE_STROKE_TYPE_MULTIPLE"); _GESTURE_STROKE_TYPE_MULTIPLEReady = true; } return _GESTURE_STROKE_TYPE_MULTIPLEContent; } }
        private static int _GESTURE_STROKE_TYPE_MULTIPLEContent = default;
        private static bool _GESTURE_STROKE_TYPE_MULTIPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#GESTURE_STROKE_TYPE_SINGLE"/>
        /// </summary>
        public static int GESTURE_STROKE_TYPE_SINGLE { get { if (!_GESTURE_STROKE_TYPE_SINGLEReady) { _GESTURE_STROKE_TYPE_SINGLEContent = SGetField<int>(LocalBridgeClazz, "GESTURE_STROKE_TYPE_SINGLE"); _GESTURE_STROKE_TYPE_SINGLEReady = true; } return _GESTURE_STROKE_TYPE_SINGLEContent; } }
        private static int _GESTURE_STROKE_TYPE_SINGLEContent = default;
        private static bool _GESTURE_STROKE_TYPE_SINGLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#ORIENTATION_HORIZONTAL"/>
        /// </summary>
        public static int ORIENTATION_HORIZONTAL { get { if (!_ORIENTATION_HORIZONTALReady) { _ORIENTATION_HORIZONTALContent = SGetField<int>(LocalBridgeClazz, "ORIENTATION_HORIZONTAL"); _ORIENTATION_HORIZONTALReady = true; } return _ORIENTATION_HORIZONTALContent; } }
        private static int _ORIENTATION_HORIZONTALContent = default;
        private static bool _ORIENTATION_HORIZONTALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#ORIENTATION_VERTICAL"/>
        /// </summary>
        public static int ORIENTATION_VERTICAL { get { if (!_ORIENTATION_VERTICALReady) { _ORIENTATION_VERTICALContent = SGetField<int>(LocalBridgeClazz, "ORIENTATION_VERTICAL"); _ORIENTATION_VERTICALReady = true; } return _ORIENTATION_VERTICALContent; } }
        private static int _ORIENTATION_VERTICALContent = default;
        private static bool _ORIENTATION_VERTICALReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGesture()"/>
        /// </summary>
        /// <returns><see cref="Android.Gesture.Gesture"/></returns>
        public Android.Gesture.Gesture GetGesture()
        {
            return IExecuteWithSignature<Android.Gesture.Gesture>("getGesture", "()Landroid/gesture/Gesture;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGesturePath()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Path"/></returns>
        public Android.Graphics.Path GetGesturePath()
        {
            return IExecuteWithSignature<Android.Graphics.Path>("getGesturePath", "()Landroid/graphics/Path;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGesturePath(android.graphics.Path)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Path"/></param>
        /// <returns><see cref="Android.Graphics.Path"/></returns>
        public Android.Graphics.Path GetGesturePath(Android.Graphics.Path arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Path>("getGesturePath", "(Landroid/graphics/Path;)Landroid/graphics/Path;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#isEventsInterceptionEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEventsInterceptionEnabled()
        {
            return IExecuteWithSignature<bool>("isEventsInterceptionEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#isFadeEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFadeEnabled()
        {
            return IExecuteWithSignature<bool>("isFadeEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#isGestureVisible()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsGestureVisible()
        {
            return IExecuteWithSignature<bool>("isGestureVisible", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#isGesturing()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsGesturing()
        {
            return IExecuteWithSignature<bool>("isGesturing", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureStrokeAngleThreshold()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetGestureStrokeAngleThreshold()
        {
            return IExecuteWithSignature<float>("getGestureStrokeAngleThreshold", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureStrokeLengthThreshold()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetGestureStrokeLengthThreshold()
        {
            return IExecuteWithSignature<float>("getGestureStrokeLengthThreshold", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureStrokeSquarenessTreshold()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetGestureStrokeSquarenessTreshold()
        {
            return IExecuteWithSignature<float>("getGestureStrokeSquarenessTreshold", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureStrokeWidth()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetGestureStrokeWidth()
        {
            return IExecuteWithSignature<float>("getGestureStrokeWidth", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetGestureColor()
        {
            return IExecuteWithSignature<int>("getGestureColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureStrokeType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetGestureStrokeType()
        {
            return IExecuteWithSignature<int>("getGestureStrokeType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getOrientation()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetOrientation()
        {
            return IExecuteWithSignature<int>("getOrientation", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getUncertainGestureColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetUncertainGestureColor()
        {
            return IExecuteWithSignature<int>("getUncertainGestureColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getCurrentStroke()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.ArrayList"/></returns>
        public Java.Util.ArrayList<Android.Gesture.GesturePoint> GetCurrentStroke()
        {
            return IExecuteWithSignature<Java.Util.ArrayList<Android.Gesture.GesturePoint>>("getCurrentStroke", "()Ljava/util/ArrayList;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getFadeOffset()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetFadeOffset()
        {
            return IExecuteWithSignature<long>("getFadeOffset", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#addOnGestureListener(android.gesture.GestureOverlayView.OnGestureListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView.OnGestureListener"/></param>
        public void AddOnGestureListener(Android.Gesture.GestureOverlayView.OnGestureListener arg0)
        {
            IExecuteWithSignature("addOnGestureListener", "(Landroid/gesture/GestureOverlayView$OnGestureListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#addOnGesturePerformedListener(android.gesture.GestureOverlayView.OnGesturePerformedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView.OnGesturePerformedListener"/></param>
        public void AddOnGesturePerformedListener(Android.Gesture.GestureOverlayView.OnGesturePerformedListener arg0)
        {
            IExecuteWithSignature("addOnGesturePerformedListener", "(Landroid/gesture/GestureOverlayView$OnGesturePerformedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#addOnGesturingListener(android.gesture.GestureOverlayView.OnGesturingListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView.OnGesturingListener"/></param>
        public void AddOnGesturingListener(Android.Gesture.GestureOverlayView.OnGesturingListener arg0)
        {
            IExecuteWithSignature("addOnGesturingListener", "(Landroid/gesture/GestureOverlayView$OnGesturingListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#cancelClearAnimation()"/>
        /// </summary>
        public void CancelClearAnimation()
        {
            IExecuteWithSignature("cancelClearAnimation", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#cancelGesture()"/>
        /// </summary>
        public void CancelGesture()
        {
            IExecuteWithSignature("cancelGesture", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#clear(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void Clear(bool arg0)
        {
            IExecuteWithSignature("clear", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#removeAllOnGestureListeners()"/>
        /// </summary>
        public void RemoveAllOnGestureListeners()
        {
            IExecuteWithSignature("removeAllOnGestureListeners", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#removeAllOnGesturePerformedListeners()"/>
        /// </summary>
        public void RemoveAllOnGesturePerformedListeners()
        {
            IExecuteWithSignature("removeAllOnGesturePerformedListeners", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#removeAllOnGesturingListeners()"/>
        /// </summary>
        public void RemoveAllOnGesturingListeners()
        {
            IExecuteWithSignature("removeAllOnGesturingListeners", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#removeOnGestureListener(android.gesture.GestureOverlayView.OnGestureListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView.OnGestureListener"/></param>
        public void RemoveOnGestureListener(Android.Gesture.GestureOverlayView.OnGestureListener arg0)
        {
            IExecuteWithSignature("removeOnGestureListener", "(Landroid/gesture/GestureOverlayView$OnGestureListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#removeOnGesturePerformedListener(android.gesture.GestureOverlayView.OnGesturePerformedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView.OnGesturePerformedListener"/></param>
        public void RemoveOnGesturePerformedListener(Android.Gesture.GestureOverlayView.OnGesturePerformedListener arg0)
        {
            IExecuteWithSignature("removeOnGesturePerformedListener", "(Landroid/gesture/GestureOverlayView$OnGesturePerformedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#removeOnGesturingListener(android.gesture.GestureOverlayView.OnGesturingListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView.OnGesturingListener"/></param>
        public void RemoveOnGesturingListener(Android.Gesture.GestureOverlayView.OnGesturingListener arg0)
        {
            IExecuteWithSignature("removeOnGesturingListener", "(Landroid/gesture/GestureOverlayView$OnGesturingListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setEventsInterceptionEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetEventsInterceptionEnabled(bool arg0)
        {
            IExecuteWithSignature("setEventsInterceptionEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setFadeEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFadeEnabled(bool arg0)
        {
            IExecuteWithSignature("setFadeEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setFadeOffset(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void SetFadeOffset(long arg0)
        {
            IExecuteWithSignature("setFadeOffset", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGesture(android.gesture.Gesture)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Gesture.Gesture"/></param>
        public void SetGesture(Android.Gesture.Gesture arg0)
        {
            IExecuteWithSignature("setGesture", "(Landroid/gesture/Gesture;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetGestureColor(int arg0)
        {
            IExecuteWithSignature("setGestureColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeAngleThreshold(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetGestureStrokeAngleThreshold(float arg0)
        {
            IExecuteWithSignature("setGestureStrokeAngleThreshold", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeLengthThreshold(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetGestureStrokeLengthThreshold(float arg0)
        {
            IExecuteWithSignature("setGestureStrokeLengthThreshold", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeSquarenessTreshold(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetGestureStrokeSquarenessTreshold(float arg0)
        {
            IExecuteWithSignature("setGestureStrokeSquarenessTreshold", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetGestureStrokeType(int arg0)
        {
            IExecuteWithSignature("setGestureStrokeType", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeWidth(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetGestureStrokeWidth(float arg0)
        {
            IExecuteWithSignature("setGestureStrokeWidth", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureVisible(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetGestureVisible(bool arg0)
        {
            IExecuteWithSignature("setGestureVisible", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setOrientation(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetOrientation(int arg0)
        {
            IExecuteWithSignature("setOrientation", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setUncertainGestureColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetUncertainGestureColor(int arg0)
        {
            IExecuteWithSignature("setUncertainGestureColor", "(I)V", arg0);
        }
    
        #endregion
    
        #region Nested classes
        #region OnGestureListener implementation
        public partial class OnGestureListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnGestureListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onGesture", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGestureEventHandler));
                AddEventHandler("onGestureCancelled", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGestureCancelledEventHandler));
                AddEventHandler("onGestureEnded", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGestureEndedEventHandler));
                AddEventHandler("onGestureStarted", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGestureStartedEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGestureListener.html#onGesture(android.gesture.GestureOverlayView,android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGesture"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Gesture.GestureOverlayView, Android.View.MotionEvent> OnOnGesture { get; set; } = null;
            
            bool hasOverrideOnGesture = true;
            void OnGestureEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnGesture = true;
                var methodToExecute = (OnOnGesture != null) ? OnOnGesture : OnGesture;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Gesture.GestureOverlayView>(0), data.EventData.GetAt<Android.View.MotionEvent>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnGesture;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGestureListener.html#onGesture(android.gesture.GestureOverlayView,android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            public virtual void OnGesture(Android.Gesture.GestureOverlayView arg0, Android.View.MotionEvent arg1)
            {
                hasOverrideOnGesture = false;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGestureListener.html#onGestureCancelled(android.gesture.GestureOverlayView,android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGestureCancelled"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Gesture.GestureOverlayView, Android.View.MotionEvent> OnOnGestureCancelled { get; set; } = null;
            
            bool hasOverrideOnGestureCancelled = true;
            void OnGestureCancelledEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnGestureCancelled = true;
                var methodToExecute = (OnOnGestureCancelled != null) ? OnOnGestureCancelled : OnGestureCancelled;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Gesture.GestureOverlayView>(0), data.EventData.GetAt<Android.View.MotionEvent>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnGestureCancelled;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGestureListener.html#onGestureCancelled(android.gesture.GestureOverlayView,android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            public virtual void OnGestureCancelled(Android.Gesture.GestureOverlayView arg0, Android.View.MotionEvent arg1)
            {
                hasOverrideOnGestureCancelled = false;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGestureListener.html#onGestureEnded(android.gesture.GestureOverlayView,android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGestureEnded"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Gesture.GestureOverlayView, Android.View.MotionEvent> OnOnGestureEnded { get; set; } = null;
            
            bool hasOverrideOnGestureEnded = true;
            void OnGestureEndedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnGestureEnded = true;
                var methodToExecute = (OnOnGestureEnded != null) ? OnOnGestureEnded : OnGestureEnded;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Gesture.GestureOverlayView>(0), data.EventData.GetAt<Android.View.MotionEvent>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnGestureEnded;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGestureListener.html#onGestureEnded(android.gesture.GestureOverlayView,android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            public virtual void OnGestureEnded(Android.Gesture.GestureOverlayView arg0, Android.View.MotionEvent arg1)
            {
                hasOverrideOnGestureEnded = false;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGestureListener.html#onGestureStarted(android.gesture.GestureOverlayView,android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGestureStarted"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Gesture.GestureOverlayView, Android.View.MotionEvent> OnOnGestureStarted { get; set; } = null;
            
            bool hasOverrideOnGestureStarted = true;
            void OnGestureStartedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnGestureStarted = true;
                var methodToExecute = (OnOnGestureStarted != null) ? OnOnGestureStarted : OnGestureStarted;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Gesture.GestureOverlayView>(0), data.EventData.GetAt<Android.View.MotionEvent>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnGestureStarted;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGestureListener.html#onGestureStarted(android.gesture.GestureOverlayView,android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            public virtual void OnGestureStarted(Android.Gesture.GestureOverlayView arg0, Android.View.MotionEvent arg1)
            {
                hasOverrideOnGestureStarted = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnGestureListenerDirect implementation
        public partial class OnGestureListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGestureListener.html#onGesture(android.gesture.GestureOverlayView,android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            public override void OnGesture(Android.Gesture.GestureOverlayView arg0, Android.View.MotionEvent arg1)
            {
                IExecute("onGesture", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGestureListener.html#onGestureCancelled(android.gesture.GestureOverlayView,android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            public override void OnGestureCancelled(Android.Gesture.GestureOverlayView arg0, Android.View.MotionEvent arg1)
            {
                IExecute("onGestureCancelled", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGestureListener.html#onGestureEnded(android.gesture.GestureOverlayView,android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            public override void OnGestureEnded(Android.Gesture.GestureOverlayView arg0, Android.View.MotionEvent arg1)
            {
                IExecute("onGestureEnded", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGestureListener.html#onGestureStarted(android.gesture.GestureOverlayView,android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            public override void OnGestureStarted(Android.Gesture.GestureOverlayView arg0, Android.View.MotionEvent arg1)
            {
                IExecute("onGestureStarted", arg0, arg1);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnGesturePerformedListener implementation
        public partial class OnGesturePerformedListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnGesturePerformedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onGesturePerformed", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGesturePerformedEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGesturePerformedListener.html#onGesturePerformed(android.gesture.GestureOverlayView,android.gesture.Gesture)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGesturePerformed"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Gesture.GestureOverlayView, Android.Gesture.Gesture> OnOnGesturePerformed { get; set; } = null;
            
            bool hasOverrideOnGesturePerformed = true;
            void OnGesturePerformedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnGesturePerformed = true;
                var methodToExecute = (OnOnGesturePerformed != null) ? OnOnGesturePerformed : OnGesturePerformed;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Gesture.GestureOverlayView>(0), data.EventData.GetAt<Android.Gesture.Gesture>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnGesturePerformed;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGesturePerformedListener.html#onGesturePerformed(android.gesture.GestureOverlayView,android.gesture.Gesture)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView"/></param>
            /// <param name="arg1"><see cref="Android.Gesture.Gesture"/></param>
            public virtual void OnGesturePerformed(Android.Gesture.GestureOverlayView arg0, Android.Gesture.Gesture arg1)
            {
                hasOverrideOnGesturePerformed = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnGesturePerformedListenerDirect implementation
        public partial class OnGesturePerformedListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGesturePerformedListener.html#onGesturePerformed(android.gesture.GestureOverlayView,android.gesture.Gesture)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView"/></param>
            /// <param name="arg1"><see cref="Android.Gesture.Gesture"/></param>
            public override void OnGesturePerformed(Android.Gesture.GestureOverlayView arg0, Android.Gesture.Gesture arg1)
            {
                IExecute("onGesturePerformed", arg0, arg1);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnGesturingListener implementation
        public partial class OnGesturingListener
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnGesturingListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onGesturingEnded", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGesturingEndedEventHandler));
                AddEventHandler("onGesturingStarted", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGesturingStartedEventHandler));

            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGesturingListener.html#onGesturingEnded(android.gesture.GestureOverlayView)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGesturingEnded"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Gesture.GestureOverlayView> OnOnGesturingEnded { get; set; } = null;
            
            bool hasOverrideOnGesturingEnded = true;
            void OnGesturingEndedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnGesturingEnded = true;
                var methodToExecute = (OnOnGesturingEnded != null) ? OnOnGesturingEnded : OnGesturingEnded;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Gesture.GestureOverlayView>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnGesturingEnded;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGesturingListener.html#onGesturingEnded(android.gesture.GestureOverlayView)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView"/></param>
            public virtual void OnGesturingEnded(Android.Gesture.GestureOverlayView arg0)
            {
                hasOverrideOnGesturingEnded = false;
            }
            
            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGesturingListener.html#onGesturingStarted(android.gesture.GestureOverlayView)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGesturingStarted"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Gesture.GestureOverlayView> OnOnGesturingStarted { get; set; } = null;
            
            bool hasOverrideOnGesturingStarted = true;
            void OnGesturingStartedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnGesturingStarted = true;
                var methodToExecute = (OnOnGesturingStarted != null) ? OnOnGesturingStarted : OnGesturingStarted;
                methodToExecute.Invoke(data.EventData.GetAt<Android.Gesture.GestureOverlayView>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnGesturingStarted;
            }
            
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGesturingListener.html#onGesturingStarted(android.gesture.GestureOverlayView)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView"/></param>
            public virtual void OnGesturingStarted(Android.Gesture.GestureOverlayView arg0)
            {
                hasOverrideOnGesturingStarted = false;
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

        #region OnGesturingListenerDirect implementation
        public partial class OnGesturingListenerDirect
        {
            #region Constructors
        
            #endregion
        
            #region Class/Interface conversion operators
        
            #endregion
        
            #region Fields
        
            #endregion
        
            #region Static methods
        
            #endregion
        
            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGesturingListener.html#onGesturingEnded(android.gesture.GestureOverlayView)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView"/></param>
            public override void OnGesturingEnded(Android.Gesture.GestureOverlayView arg0)
            {
                IExecuteWithSignature("onGesturingEnded", "(Landroid/gesture/GestureOverlayView;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/gesture/GestureOverlayView.OnGesturingListener.html#onGesturingStarted(android.gesture.GestureOverlayView)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Gesture.GestureOverlayView"/></param>
            public override void OnGesturingStarted(Android.Gesture.GestureOverlayView arg0)
            {
                IExecuteWithSignature("onGesturingStarted", "(Landroid/gesture/GestureOverlayView;)V", arg0);
            }
        
            #endregion
        
            #region Nested classes
        
            #endregion
        
            // TODO: complete the class
        }
        #endregion

    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
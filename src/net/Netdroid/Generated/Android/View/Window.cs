/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region Window
    public partial class Window
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        public Window(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#DECOR_CAPTION_SHADE_AUTO"/>
        /// </summary>
        public static int DECOR_CAPTION_SHADE_AUTO { get { if (!_DECOR_CAPTION_SHADE_AUTOReady) { _DECOR_CAPTION_SHADE_AUTOContent = SGetField<int>(LocalBridgeClazz, "DECOR_CAPTION_SHADE_AUTO"); _DECOR_CAPTION_SHADE_AUTOReady = true; } return _DECOR_CAPTION_SHADE_AUTOContent; } }
        private static int _DECOR_CAPTION_SHADE_AUTOContent = default;
        private static bool _DECOR_CAPTION_SHADE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#DECOR_CAPTION_SHADE_DARK"/>
        /// </summary>
        public static int DECOR_CAPTION_SHADE_DARK { get { if (!_DECOR_CAPTION_SHADE_DARKReady) { _DECOR_CAPTION_SHADE_DARKContent = SGetField<int>(LocalBridgeClazz, "DECOR_CAPTION_SHADE_DARK"); _DECOR_CAPTION_SHADE_DARKReady = true; } return _DECOR_CAPTION_SHADE_DARKContent; } }
        private static int _DECOR_CAPTION_SHADE_DARKContent = default;
        private static bool _DECOR_CAPTION_SHADE_DARKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#DECOR_CAPTION_SHADE_LIGHT"/>
        /// </summary>
        public static int DECOR_CAPTION_SHADE_LIGHT { get { if (!_DECOR_CAPTION_SHADE_LIGHTReady) { _DECOR_CAPTION_SHADE_LIGHTContent = SGetField<int>(LocalBridgeClazz, "DECOR_CAPTION_SHADE_LIGHT"); _DECOR_CAPTION_SHADE_LIGHTReady = true; } return _DECOR_CAPTION_SHADE_LIGHTContent; } }
        private static int _DECOR_CAPTION_SHADE_LIGHTContent = default;
        private static bool _DECOR_CAPTION_SHADE_LIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#FEATURE_ACTION_BAR"/>
        /// </summary>
        public static int FEATURE_ACTION_BAR { get { if (!_FEATURE_ACTION_BARReady) { _FEATURE_ACTION_BARContent = SGetField<int>(LocalBridgeClazz, "FEATURE_ACTION_BAR"); _FEATURE_ACTION_BARReady = true; } return _FEATURE_ACTION_BARContent; } }
        private static int _FEATURE_ACTION_BARContent = default;
        private static bool _FEATURE_ACTION_BARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#FEATURE_ACTION_BAR_OVERLAY"/>
        /// </summary>
        public static int FEATURE_ACTION_BAR_OVERLAY { get { if (!_FEATURE_ACTION_BAR_OVERLAYReady) { _FEATURE_ACTION_BAR_OVERLAYContent = SGetField<int>(LocalBridgeClazz, "FEATURE_ACTION_BAR_OVERLAY"); _FEATURE_ACTION_BAR_OVERLAYReady = true; } return _FEATURE_ACTION_BAR_OVERLAYContent; } }
        private static int _FEATURE_ACTION_BAR_OVERLAYContent = default;
        private static bool _FEATURE_ACTION_BAR_OVERLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#FEATURE_ACTION_MODE_OVERLAY"/>
        /// </summary>
        public static int FEATURE_ACTION_MODE_OVERLAY { get { if (!_FEATURE_ACTION_MODE_OVERLAYReady) { _FEATURE_ACTION_MODE_OVERLAYContent = SGetField<int>(LocalBridgeClazz, "FEATURE_ACTION_MODE_OVERLAY"); _FEATURE_ACTION_MODE_OVERLAYReady = true; } return _FEATURE_ACTION_MODE_OVERLAYContent; } }
        private static int _FEATURE_ACTION_MODE_OVERLAYContent = default;
        private static bool _FEATURE_ACTION_MODE_OVERLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#FEATURE_ACTIVITY_TRANSITIONS"/>
        /// </summary>
        public static int FEATURE_ACTIVITY_TRANSITIONS { get { if (!_FEATURE_ACTIVITY_TRANSITIONSReady) { _FEATURE_ACTIVITY_TRANSITIONSContent = SGetField<int>(LocalBridgeClazz, "FEATURE_ACTIVITY_TRANSITIONS"); _FEATURE_ACTIVITY_TRANSITIONSReady = true; } return _FEATURE_ACTIVITY_TRANSITIONSContent; } }
        private static int _FEATURE_ACTIVITY_TRANSITIONSContent = default;
        private static bool _FEATURE_ACTIVITY_TRANSITIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#FEATURE_CONTENT_TRANSITIONS"/>
        /// </summary>
        public static int FEATURE_CONTENT_TRANSITIONS { get { if (!_FEATURE_CONTENT_TRANSITIONSReady) { _FEATURE_CONTENT_TRANSITIONSContent = SGetField<int>(LocalBridgeClazz, "FEATURE_CONTENT_TRANSITIONS"); _FEATURE_CONTENT_TRANSITIONSReady = true; } return _FEATURE_CONTENT_TRANSITIONSContent; } }
        private static int _FEATURE_CONTENT_TRANSITIONSContent = default;
        private static bool _FEATURE_CONTENT_TRANSITIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#FEATURE_CONTEXT_MENU"/>
        /// </summary>
        public static int FEATURE_CONTEXT_MENU { get { if (!_FEATURE_CONTEXT_MENUReady) { _FEATURE_CONTEXT_MENUContent = SGetField<int>(LocalBridgeClazz, "FEATURE_CONTEXT_MENU"); _FEATURE_CONTEXT_MENUReady = true; } return _FEATURE_CONTEXT_MENUContent; } }
        private static int _FEATURE_CONTEXT_MENUContent = default;
        private static bool _FEATURE_CONTEXT_MENUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#FEATURE_CUSTOM_TITLE"/>
        /// </summary>
        public static int FEATURE_CUSTOM_TITLE { get { if (!_FEATURE_CUSTOM_TITLEReady) { _FEATURE_CUSTOM_TITLEContent = SGetField<int>(LocalBridgeClazz, "FEATURE_CUSTOM_TITLE"); _FEATURE_CUSTOM_TITLEReady = true; } return _FEATURE_CUSTOM_TITLEContent; } }
        private static int _FEATURE_CUSTOM_TITLEContent = default;
        private static bool _FEATURE_CUSTOM_TITLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#FEATURE_INDETERMINATE_PROGRESS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FEATURE_INDETERMINATE_PROGRESS { get { if (!_FEATURE_INDETERMINATE_PROGRESSReady) { _FEATURE_INDETERMINATE_PROGRESSContent = SGetField<int>(LocalBridgeClazz, "FEATURE_INDETERMINATE_PROGRESS"); _FEATURE_INDETERMINATE_PROGRESSReady = true; } return _FEATURE_INDETERMINATE_PROGRESSContent; } }
        private static int _FEATURE_INDETERMINATE_PROGRESSContent = default;
        private static bool _FEATURE_INDETERMINATE_PROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#FEATURE_LEFT_ICON"/>
        /// </summary>
        public static int FEATURE_LEFT_ICON { get { if (!_FEATURE_LEFT_ICONReady) { _FEATURE_LEFT_ICONContent = SGetField<int>(LocalBridgeClazz, "FEATURE_LEFT_ICON"); _FEATURE_LEFT_ICONReady = true; } return _FEATURE_LEFT_ICONContent; } }
        private static int _FEATURE_LEFT_ICONContent = default;
        private static bool _FEATURE_LEFT_ICONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#FEATURE_NO_TITLE"/>
        /// </summary>
        public static int FEATURE_NO_TITLE { get { if (!_FEATURE_NO_TITLEReady) { _FEATURE_NO_TITLEContent = SGetField<int>(LocalBridgeClazz, "FEATURE_NO_TITLE"); _FEATURE_NO_TITLEReady = true; } return _FEATURE_NO_TITLEContent; } }
        private static int _FEATURE_NO_TITLEContent = default;
        private static bool _FEATURE_NO_TITLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#FEATURE_OPTIONS_PANEL"/>
        /// </summary>
        public static int FEATURE_OPTIONS_PANEL { get { if (!_FEATURE_OPTIONS_PANELReady) { _FEATURE_OPTIONS_PANELContent = SGetField<int>(LocalBridgeClazz, "FEATURE_OPTIONS_PANEL"); _FEATURE_OPTIONS_PANELReady = true; } return _FEATURE_OPTIONS_PANELContent; } }
        private static int _FEATURE_OPTIONS_PANELContent = default;
        private static bool _FEATURE_OPTIONS_PANELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#FEATURE_PROGRESS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FEATURE_PROGRESS { get { if (!_FEATURE_PROGRESSReady) { _FEATURE_PROGRESSContent = SGetField<int>(LocalBridgeClazz, "FEATURE_PROGRESS"); _FEATURE_PROGRESSReady = true; } return _FEATURE_PROGRESSContent; } }
        private static int _FEATURE_PROGRESSContent = default;
        private static bool _FEATURE_PROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#FEATURE_RIGHT_ICON"/>
        /// </summary>
        public static int FEATURE_RIGHT_ICON { get { if (!_FEATURE_RIGHT_ICONReady) { _FEATURE_RIGHT_ICONContent = SGetField<int>(LocalBridgeClazz, "FEATURE_RIGHT_ICON"); _FEATURE_RIGHT_ICONReady = true; } return _FEATURE_RIGHT_ICONContent; } }
        private static int _FEATURE_RIGHT_ICONContent = default;
        private static bool _FEATURE_RIGHT_ICONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#FEATURE_SWIPE_TO_DISMISS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FEATURE_SWIPE_TO_DISMISS { get { if (!_FEATURE_SWIPE_TO_DISMISSReady) { _FEATURE_SWIPE_TO_DISMISSContent = SGetField<int>(LocalBridgeClazz, "FEATURE_SWIPE_TO_DISMISS"); _FEATURE_SWIPE_TO_DISMISSReady = true; } return _FEATURE_SWIPE_TO_DISMISSContent; } }
        private static int _FEATURE_SWIPE_TO_DISMISSContent = default;
        private static bool _FEATURE_SWIPE_TO_DISMISSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#ID_ANDROID_CONTENT"/>
        /// </summary>
        public static int ID_ANDROID_CONTENT { get { if (!_ID_ANDROID_CONTENTReady) { _ID_ANDROID_CONTENTContent = SGetField<int>(LocalBridgeClazz, "ID_ANDROID_CONTENT"); _ID_ANDROID_CONTENTReady = true; } return _ID_ANDROID_CONTENTContent; } }
        private static int _ID_ANDROID_CONTENTContent = default;
        private static bool _ID_ANDROID_CONTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#PROGRESS_END"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PROGRESS_END { get { if (!_PROGRESS_ENDReady) { _PROGRESS_ENDContent = SGetField<int>(LocalBridgeClazz, "PROGRESS_END"); _PROGRESS_ENDReady = true; } return _PROGRESS_ENDContent; } }
        private static int _PROGRESS_ENDContent = default;
        private static bool _PROGRESS_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#PROGRESS_INDETERMINATE_OFF"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PROGRESS_INDETERMINATE_OFF { get { if (!_PROGRESS_INDETERMINATE_OFFReady) { _PROGRESS_INDETERMINATE_OFFContent = SGetField<int>(LocalBridgeClazz, "PROGRESS_INDETERMINATE_OFF"); _PROGRESS_INDETERMINATE_OFFReady = true; } return _PROGRESS_INDETERMINATE_OFFContent; } }
        private static int _PROGRESS_INDETERMINATE_OFFContent = default;
        private static bool _PROGRESS_INDETERMINATE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#PROGRESS_INDETERMINATE_ON"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PROGRESS_INDETERMINATE_ON { get { if (!_PROGRESS_INDETERMINATE_ONReady) { _PROGRESS_INDETERMINATE_ONContent = SGetField<int>(LocalBridgeClazz, "PROGRESS_INDETERMINATE_ON"); _PROGRESS_INDETERMINATE_ONReady = true; } return _PROGRESS_INDETERMINATE_ONContent; } }
        private static int _PROGRESS_INDETERMINATE_ONContent = default;
        private static bool _PROGRESS_INDETERMINATE_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#PROGRESS_SECONDARY_END"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PROGRESS_SECONDARY_END { get { if (!_PROGRESS_SECONDARY_ENDReady) { _PROGRESS_SECONDARY_ENDContent = SGetField<int>(LocalBridgeClazz, "PROGRESS_SECONDARY_END"); _PROGRESS_SECONDARY_ENDReady = true; } return _PROGRESS_SECONDARY_ENDContent; } }
        private static int _PROGRESS_SECONDARY_ENDContent = default;
        private static bool _PROGRESS_SECONDARY_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#PROGRESS_SECONDARY_START"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PROGRESS_SECONDARY_START { get { if (!_PROGRESS_SECONDARY_STARTReady) { _PROGRESS_SECONDARY_STARTContent = SGetField<int>(LocalBridgeClazz, "PROGRESS_SECONDARY_START"); _PROGRESS_SECONDARY_STARTReady = true; } return _PROGRESS_SECONDARY_STARTContent; } }
        private static int _PROGRESS_SECONDARY_STARTContent = default;
        private static bool _PROGRESS_SECONDARY_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#PROGRESS_START"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PROGRESS_START { get { if (!_PROGRESS_STARTReady) { _PROGRESS_STARTContent = SGetField<int>(LocalBridgeClazz, "PROGRESS_START"); _PROGRESS_STARTReady = true; } return _PROGRESS_STARTContent; } }
        private static int _PROGRESS_STARTContent = default;
        private static bool _PROGRESS_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#PROGRESS_VISIBILITY_OFF"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PROGRESS_VISIBILITY_OFF { get { if (!_PROGRESS_VISIBILITY_OFFReady) { _PROGRESS_VISIBILITY_OFFContent = SGetField<int>(LocalBridgeClazz, "PROGRESS_VISIBILITY_OFF"); _PROGRESS_VISIBILITY_OFFReady = true; } return _PROGRESS_VISIBILITY_OFFContent; } }
        private static int _PROGRESS_VISIBILITY_OFFContent = default;
        private static bool _PROGRESS_VISIBILITY_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#PROGRESS_VISIBILITY_ON"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PROGRESS_VISIBILITY_ON { get { if (!_PROGRESS_VISIBILITY_ONReady) { _PROGRESS_VISIBILITY_ONContent = SGetField<int>(LocalBridgeClazz, "PROGRESS_VISIBILITY_ON"); _PROGRESS_VISIBILITY_ONReady = true; } return _PROGRESS_VISIBILITY_ONContent; } }
        private static int _PROGRESS_VISIBILITY_ONContent = default;
        private static bool _PROGRESS_VISIBILITY_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME"/>
        /// </summary>
        public static Java.Lang.String NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME { get { if (!_NAVIGATION_BAR_BACKGROUND_TRANSITION_NAMEReady) { _NAVIGATION_BAR_BACKGROUND_TRANSITION_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME"); _NAVIGATION_BAR_BACKGROUND_TRANSITION_NAMEReady = true; } return _NAVIGATION_BAR_BACKGROUND_TRANSITION_NAMEContent; } }
        private static Java.Lang.String _NAVIGATION_BAR_BACKGROUND_TRANSITION_NAMEContent = default;
        private static bool _NAVIGATION_BAR_BACKGROUND_TRANSITION_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#STATUS_BAR_BACKGROUND_TRANSITION_NAME"/>
        /// </summary>
        public static Java.Lang.String STATUS_BAR_BACKGROUND_TRANSITION_NAME { get { if (!_STATUS_BAR_BACKGROUND_TRANSITION_NAMEReady) { _STATUS_BAR_BACKGROUND_TRANSITION_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STATUS_BAR_BACKGROUND_TRANSITION_NAME"); _STATUS_BAR_BACKGROUND_TRANSITION_NAMEReady = true; } return _STATUS_BAR_BACKGROUND_TRANSITION_NAMEContent; } }
        private static Java.Lang.String _STATUS_BAR_BACKGROUND_TRANSITION_NAMEContent = default;
        private static bool _STATUS_BAR_BACKGROUND_TRANSITION_NAMEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getDefaultFeatures(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetDefaultFeatures(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getDefaultFeatures", "(Landroid/content/Context;)I", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#findViewById(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <typeparam name="T"><see cref="Android.View.View"/></typeparam>
        /// <returns><typeparamref name="T"/></returns>
        public T FindViewById<T>(int arg0) where T : Android.View.View
        {
            return IExecuteWithSignature<T>("findViewById", "(I)Landroid/view/View;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#saveHierarchyState()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle SaveHierarchyState()
        {
            return IExecuteWithSignature<Android.Os.Bundle>("saveHierarchyState", "()Landroid/os/Bundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getLayoutInflater()"/>
        /// </summary>
        /// <returns><see cref="Android.View.LayoutInflater"/></returns>
        public Android.View.LayoutInflater GetLayoutInflater()
        {
            return IExecuteWithSignature<Android.View.LayoutInflater>("getLayoutInflater", "()Landroid/view/LayoutInflater;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getCurrentFocus()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View"/></returns>
        public Android.View.View GetCurrentFocus()
        {
            return IExecuteWithSignature<Android.View.View>("getCurrentFocus", "()Landroid/view/View;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getDecorView()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View"/></returns>
        public Android.View.View GetDecorView()
        {
            return IExecuteWithSignature<Android.View.View>("getDecorView", "()Landroid/view/View;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#peekDecorView()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View"/></returns>
        public Android.View.View PeekDecorView()
        {
            return IExecuteWithSignature<Android.View.View>("peekDecorView", "()Landroid/view/View;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#isFloating()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFloating()
        {
            return IExecuteWithSignature<bool>("isFloating", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#isShortcutKey(int,android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsShortcutKey(int arg0, Android.View.KeyEvent arg1)
        {
            return IExecute<bool>("isShortcutKey", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#performContextMenuIdentifierAction(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PerformContextMenuIdentifierAction(int arg0, int arg1)
        {
            return IExecute<bool>("performContextMenuIdentifierAction", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#performPanelIdentifierAction(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PerformPanelIdentifierAction(int arg0, int arg1, int arg2)
        {
            return IExecute<bool>("performPanelIdentifierAction", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#performPanelShortcut(int,int,android.view.KeyEvent,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.View.KeyEvent"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PerformPanelShortcut(int arg0, int arg1, Android.View.KeyEvent arg2, int arg3)
        {
            return IExecute<bool>("performPanelShortcut", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#superDispatchGenericMotionEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SuperDispatchGenericMotionEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("superDispatchGenericMotionEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#superDispatchKeyEvent(android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SuperDispatchKeyEvent(Android.View.KeyEvent arg0)
        {
            return IExecuteWithSignature<bool>("superDispatchKeyEvent", "(Landroid/view/KeyEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#superDispatchKeyShortcutEvent(android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SuperDispatchKeyShortcutEvent(Android.View.KeyEvent arg0)
        {
            return IExecuteWithSignature<bool>("superDispatchKeyShortcutEvent", "(Landroid/view/KeyEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#superDispatchTouchEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SuperDispatchTouchEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("superDispatchTouchEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#superDispatchTrackballEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SuperDispatchTrackballEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("superDispatchTrackballEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getNavigationBarColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetNavigationBarColor()
        {
            return IExecuteWithSignature<int>("getNavigationBarColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getStatusBarColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetStatusBarColor()
        {
            return IExecuteWithSignature<int>("getStatusBarColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getVolumeControlStream()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVolumeControlStream()
        {
            return IExecuteWithSignature<int>("getVolumeControlStream", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#addContentView(android.view.View,android.view.ViewGroup.LayoutParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.ViewGroup.LayoutParams"/></param>
        public void AddContentView(Android.View.View arg0, Android.View.ViewGroup.LayoutParams arg1)
        {
            IExecute("addContentView", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#closeAllPanels()"/>
        /// </summary>
        public void CloseAllPanels()
        {
            IExecuteWithSignature("closeAllPanels", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#closePanel(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void ClosePanel(int arg0)
        {
            IExecuteWithSignature("closePanel", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#invalidatePanelMenu(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void InvalidatePanelMenu(int arg0)
        {
            IExecuteWithSignature("invalidatePanelMenu", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#onConfigurationChanged(android.content.res.Configuration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Configuration"/></param>
        public void OnConfigurationChanged(Android.Content.Res.Configuration arg0)
        {
            IExecuteWithSignature("onConfigurationChanged", "(Landroid/content/res/Configuration;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#openPanel(int,android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
        public void OpenPanel(int arg0, Android.View.KeyEvent arg1)
        {
            IExecute("openPanel", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#restoreHierarchyState(android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
        public void RestoreHierarchyState(Android.Os.Bundle arg0)
        {
            IExecuteWithSignature("restoreHierarchyState", "(Landroid/os/Bundle;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setBackgroundDrawable(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetBackgroundDrawable(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setBackgroundDrawable", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setChildDrawable(int,android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetChildDrawable(int arg0, Android.Graphics.Drawable.Drawable arg1)
        {
            IExecute("setChildDrawable", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setChildInt(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetChildInt(int arg0, int arg1)
        {
            IExecute("setChildInt", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setContentView(android.view.View,android.view.ViewGroup.LayoutParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.ViewGroup.LayoutParams"/></param>
        public void SetContentView(Android.View.View arg0, Android.View.ViewGroup.LayoutParams arg1)
        {
            IExecute("setContentView", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setContentView(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void SetContentView(Android.View.View arg0)
        {
            IExecuteWithSignature("setContentView", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setContentView(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetContentView(int arg0)
        {
            IExecuteWithSignature("setContentView", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setDecorCaptionShade(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetDecorCaptionShade(int arg0)
        {
            IExecuteWithSignature("setDecorCaptionShade", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setFeatureDrawable(int,android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetFeatureDrawable(int arg0, Android.Graphics.Drawable.Drawable arg1)
        {
            IExecute("setFeatureDrawable", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setFeatureDrawableAlpha(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetFeatureDrawableAlpha(int arg0, int arg1)
        {
            IExecute("setFeatureDrawableAlpha", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setFeatureDrawableResource(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetFeatureDrawableResource(int arg0, int arg1)
        {
            IExecute("setFeatureDrawableResource", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setFeatureDrawableUri(int,android.net.Uri)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
        public void SetFeatureDrawableUri(int arg0, Android.Net.Uri arg1)
        {
            IExecute("setFeatureDrawableUri", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setFeatureInt(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetFeatureInt(int arg0, int arg1)
        {
            IExecute("setFeatureInt", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setNavigationBarColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetNavigationBarColor(int arg0)
        {
            IExecuteWithSignature("setNavigationBarColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setResizingCaptionDrawable(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetResizingCaptionDrawable(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setResizingCaptionDrawable", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setStatusBarColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetStatusBarColor(int arg0)
        {
            IExecuteWithSignature("setStatusBarColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setTitle(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetTitle(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setTitle", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setTitleColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetTitleColor(int arg0)
        {
            IExecuteWithSignature("setTitleColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setVolumeControlStream(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetVolumeControlStream(int arg0)
        {
            IExecuteWithSignature("setVolumeControlStream", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#takeInputQueue(android.view.InputQueue.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.InputQueue.Callback"/></param>
        public void TakeInputQueue(Android.View.InputQueue.Callback arg0)
        {
            IExecuteWithSignature("takeInputQueue", "(Landroid/view/InputQueue$Callback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#takeKeyEvents(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void TakeKeyEvents(bool arg0)
        {
            IExecuteWithSignature("takeKeyEvents", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#takeSurface(android.view.SurfaceHolder.Callback2)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.SurfaceHolder.Callback2"/></param>
        public void TakeSurface(Android.View.SurfaceHolder.Callback2 arg0)
        {
            IExecuteWithSignature("takeSurface", "(Landroid/view/SurfaceHolder$Callback2;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#togglePanel(int,android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
        public void TogglePanel(int arg0, Android.View.KeyEvent arg1)
        {
            IExecute("togglePanel", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getMediaController()"/>
        /// </summary>
        /// <returns><see cref="Android.Media.Session.MediaController"/></returns>
        public Android.Media.Session.MediaController GetMediaController()
        {
            return IExecuteWithSignature<Android.Media.Session.MediaController>("getMediaController", "()Landroid/media/session/MediaController;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getContentScene()"/>
        /// </summary>
        /// <returns><see cref="Android.Transition.Scene"/></returns>
        public Android.Transition.Scene GetContentScene()
        {
            return IExecuteWithSignature<Android.Transition.Scene>("getContentScene", "()Landroid/transition/Scene;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getEnterTransition()"/>
        /// </summary>
        /// <returns><see cref="Android.Transition.Transition"/></returns>
        public Android.Transition.Transition GetEnterTransition()
        {
            return IExecuteWithSignature<Android.Transition.Transition>("getEnterTransition", "()Landroid/transition/Transition;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getExitTransition()"/>
        /// </summary>
        /// <returns><see cref="Android.Transition.Transition"/></returns>
        public Android.Transition.Transition GetExitTransition()
        {
            return IExecuteWithSignature<Android.Transition.Transition>("getExitTransition", "()Landroid/transition/Transition;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getReenterTransition()"/>
        /// </summary>
        /// <returns><see cref="Android.Transition.Transition"/></returns>
        public Android.Transition.Transition GetReenterTransition()
        {
            return IExecuteWithSignature<Android.Transition.Transition>("getReenterTransition", "()Landroid/transition/Transition;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getReturnTransition()"/>
        /// </summary>
        /// <returns><see cref="Android.Transition.Transition"/></returns>
        public Android.Transition.Transition GetReturnTransition()
        {
            return IExecuteWithSignature<Android.Transition.Transition>("getReturnTransition", "()Landroid/transition/Transition;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getSharedElementEnterTransition()"/>
        /// </summary>
        /// <returns><see cref="Android.Transition.Transition"/></returns>
        public Android.Transition.Transition GetSharedElementEnterTransition()
        {
            return IExecuteWithSignature<Android.Transition.Transition>("getSharedElementEnterTransition", "()Landroid/transition/Transition;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getSharedElementExitTransition()"/>
        /// </summary>
        /// <returns><see cref="Android.Transition.Transition"/></returns>
        public Android.Transition.Transition GetSharedElementExitTransition()
        {
            return IExecuteWithSignature<Android.Transition.Transition>("getSharedElementExitTransition", "()Landroid/transition/Transition;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getSharedElementReenterTransition()"/>
        /// </summary>
        /// <returns><see cref="Android.Transition.Transition"/></returns>
        public Android.Transition.Transition GetSharedElementReenterTransition()
        {
            return IExecuteWithSignature<Android.Transition.Transition>("getSharedElementReenterTransition", "()Landroid/transition/Transition;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getSharedElementReturnTransition()"/>
        /// </summary>
        /// <returns><see cref="Android.Transition.Transition"/></returns>
        public Android.Transition.Transition GetSharedElementReturnTransition()
        {
            return IExecuteWithSignature<Android.Transition.Transition>("getSharedElementReturnTransition", "()Landroid/transition/Transition;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getTransitionManager()"/>
        /// </summary>
        /// <returns><see cref="Android.Transition.TransitionManager"/></returns>
        public Android.Transition.TransitionManager GetTransitionManager()
        {
            return IExecuteWithSignature<Android.Transition.TransitionManager>("getTransitionManager", "()Landroid/transition/TransitionManager;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getRootSurfaceControl()"/>
        /// </summary>
        /// <returns><see cref="Android.View.AttachedSurfaceControl"/></returns>
        public Android.View.AttachedSurfaceControl GetRootSurfaceControl()
        {
            return IExecuteWithSignature<Android.View.AttachedSurfaceControl>("getRootSurfaceControl", "()Landroid/view/AttachedSurfaceControl;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getInsetsController()"/>
        /// </summary>
        /// <returns><see cref="Android.View.WindowInsetsController"/></returns>
        public Android.View.WindowInsetsController GetInsetsController()
        {
            return IExecuteWithSignature<Android.View.WindowInsetsController>("getInsetsController", "()Landroid/view/WindowInsetsController;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getWindowManager()"/>
        /// </summary>
        /// <returns><see cref="Android.View.WindowManager"/></returns>
        public Android.View.WindowManager GetWindowManager()
        {
            return IExecuteWithSignature<Android.View.WindowManager>("getWindowManager", "()Landroid/view/WindowManager;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getOnBackInvokedDispatcher()"/>
        /// </summary>
        /// <returns><see cref="Android.Window.OnBackInvokedDispatcher"/></returns>
        public Android.Window.OnBackInvokedDispatcher GetOnBackInvokedDispatcher()
        {
            return IExecuteWithSignature<Android.Window.OnBackInvokedDispatcher>("getOnBackInvokedDispatcher", "()Landroid/window/OnBackInvokedDispatcher;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getAllowEnterTransitionOverlap()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetAllowEnterTransitionOverlap()
        {
            return IExecuteWithSignature<bool>("getAllowEnterTransitionOverlap", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getAllowReturnTransitionOverlap()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetAllowReturnTransitionOverlap()
        {
            return IExecuteWithSignature<bool>("getAllowReturnTransitionOverlap", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getFrameRateBoostOnTouchEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetFrameRateBoostOnTouchEnabled()
        {
            return IExecuteWithSignature<bool>("getFrameRateBoostOnTouchEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getSharedElementsUseOverlay()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetSharedElementsUseOverlay()
        {
            return IExecuteWithSignature<bool>("getSharedElementsUseOverlay", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#hasFeature(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasFeature(int arg0)
        {
            return IExecuteWithSignature<bool>("hasFeature", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#isFrameRatePowerSavingsBalanced()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFrameRatePowerSavingsBalanced()
        {
            return IExecuteWithSignature<bool>("isFrameRatePowerSavingsBalanced", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#isNavigationBarContrastEnforced()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsNavigationBarContrastEnforced()
        {
            return IExecuteWithSignature<bool>("isNavigationBarContrastEnforced", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#isStatusBarContrastEnforced()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsStatusBarContrastEnforced()
        {
            return IExecuteWithSignature<bool>("isStatusBarContrastEnforced", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#isWideColorGamut()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWideColorGamut()
        {
            return IExecuteWithSignature<bool>("isWideColorGamut", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#requestFeature(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestFeature(int arg0)
        {
            return IExecuteWithSignature<bool>("requestFeature", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#requireViewById(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <typeparam name="T"><see cref="Android.View.View"/></typeparam>
        /// <returns><typeparamref name="T"/></returns>
        public T RequireViewById<T>(int arg0) where T : Android.View.View
        {
            return IExecuteWithSignature<T>("requireViewById", "(I)Landroid/view/View;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getContext()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Context"/></returns>
        public Android.Content.Context GetContext()
        {
            return IExecuteWithSignature<Android.Content.Context>("getContext", "()Landroid/content/Context;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getWindowStyle()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Res.TypedArray"/></returns>
        public Android.Content.Res.TypedArray GetWindowStyle()
        {
            return IExecuteWithSignature<Android.Content.Res.TypedArray>("getWindowStyle", "()Landroid/content/res/TypedArray;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getContainer()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Window"/></returns>
        public Android.View.Window GetContainer()
        {
            return IExecuteWithSignature<Android.View.Window>("getContainer", "()Landroid/view/Window;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getCallback()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Window.Callback"/></returns>
        public Android.View.Window.Callback GetCallback()
        {
            return IExecuteWithSignature<Android.View.Window.Callback>("getCallback", "()Landroid/view/Window$Callback;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getAttributes()"/>
        /// </summary>
        /// <returns><see cref="Android.View.WindowManager.LayoutParams"/></returns>
        public Android.View.WindowManager.LayoutParams GetAttributes()
        {
            return IExecuteWithSignature<Android.View.WindowManager.LayoutParams>("getAttributes", "()Landroid/view/WindowManager$LayoutParams;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#hasChildren()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasChildren()
        {
            return IExecuteWithSignature<bool>("hasChildren", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#isActive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsActive()
        {
            return IExecuteWithSignature<bool>("isActive", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#addOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Window.OnFrameMetricsAvailableListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        public void AddOnFrameMetricsAvailableListener(Android.View.Window.OnFrameMetricsAvailableListener arg0, Android.Os.Handler arg1)
        {
            IExecute("addOnFrameMetricsAvailableListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#makeActive()"/>
        /// </summary>
        public void MakeActive()
        {
            IExecuteWithSignature("makeActive", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#removeOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Window.OnFrameMetricsAvailableListener"/></param>
        public void RemoveOnFrameMetricsAvailableListener(Android.View.Window.OnFrameMetricsAvailableListener arg0)
        {
            IExecuteWithSignature("removeOnFrameMetricsAvailableListener", "(Landroid/view/Window$OnFrameMetricsAvailableListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setHideOverlayWindows(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetHideOverlayWindows(bool arg0)
        {
            IExecuteWithSignature("setHideOverlayWindows", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setRestrictedCaptionAreaListener(android.view.Window.OnRestrictedCaptionAreaChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Window.OnRestrictedCaptionAreaChangedListener"/></param>
        public void SetRestrictedCaptionAreaListener(Android.View.Window.OnRestrictedCaptionAreaChangedListener arg0)
        {
            IExecuteWithSignature("setRestrictedCaptionAreaListener", "(Landroid/view/Window$OnRestrictedCaptionAreaChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getDesiredHdrHeadroom()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetDesiredHdrHeadroom()
        {
            return IExecuteWithSignature<float>("getDesiredHdrHeadroom", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getColorMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetColorMode()
        {
            return IExecuteWithSignature<int>("getColorMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getNavigationBarDividerColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetNavigationBarDividerColor()
        {
            return IExecuteWithSignature<int>("getNavigationBarDividerColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getSystemGestureExclusionRects()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Graphics.Rect> GetSystemGestureExclusionRects()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Graphics.Rect>>("getSystemGestureExclusionRects", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#getTransitionBackgroundFadeDuration()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetTransitionBackgroundFadeDuration()
        {
            return IExecuteWithSignature<long>("getTransitionBackgroundFadeDuration", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#addFlags(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void AddFlags(int arg0)
        {
            IExecuteWithSignature("addFlags", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#clearFlags(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void ClearFlags(int arg0)
        {
            IExecuteWithSignature("clearFlags", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#injectInputEvent(android.view.InputEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.InputEvent"/></param>
        public void InjectInputEvent(Android.View.InputEvent arg0)
        {
            IExecuteWithSignature("injectInputEvent", "(Landroid/view/InputEvent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#registerScrollCaptureCallback(android.view.ScrollCaptureCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ScrollCaptureCallback"/></param>
        public void RegisterScrollCaptureCallback(Android.View.ScrollCaptureCallback arg0)
        {
            IExecuteWithSignature("registerScrollCaptureCallback", "(Landroid/view/ScrollCaptureCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setAllowEnterTransitionOverlap(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAllowEnterTransitionOverlap(bool arg0)
        {
            IExecuteWithSignature("setAllowEnterTransitionOverlap", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setAllowReturnTransitionOverlap(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAllowReturnTransitionOverlap(bool arg0)
        {
            IExecuteWithSignature("setAllowReturnTransitionOverlap", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setAttributes(android.view.WindowManager.LayoutParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowManager.LayoutParams"/></param>
        public void SetAttributes(Android.View.WindowManager.LayoutParams arg0)
        {
            IExecuteWithSignature("setAttributes", "(Landroid/view/WindowManager$LayoutParams;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setBackgroundBlurRadius(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetBackgroundBlurRadius(int arg0)
        {
            IExecuteWithSignature("setBackgroundBlurRadius", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setBackgroundDrawableResource(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetBackgroundDrawableResource(int arg0)
        {
            IExecuteWithSignature("setBackgroundDrawableResource", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setCallback(android.view.Window.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Window.Callback"/></param>
        public void SetCallback(Android.View.Window.Callback arg0)
        {
            IExecuteWithSignature("setCallback", "(Landroid/view/Window$Callback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setClipToOutline(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetClipToOutline(bool arg0)
        {
            IExecuteWithSignature("setClipToOutline", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setColorMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetColorMode(int arg0)
        {
            IExecuteWithSignature("setColorMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setContainer(android.view.Window)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Window"/></param>
        public void SetContainer(Android.View.Window arg0)
        {
            IExecuteWithSignature("setContainer", "(Landroid/view/Window;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setDecorFitsSystemWindows(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetDecorFitsSystemWindows(bool arg0)
        {
            IExecuteWithSignature("setDecorFitsSystemWindows", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setDesiredHdrHeadroom(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetDesiredHdrHeadroom(float arg0)
        {
            IExecuteWithSignature("setDesiredHdrHeadroom", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setDimAmount(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetDimAmount(float arg0)
        {
            IExecuteWithSignature("setDimAmount", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setElevation(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetElevation(float arg0)
        {
            IExecuteWithSignature("setElevation", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setEnterTransition(android.transition.Transition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Transition.Transition"/></param>
        public void SetEnterTransition(Android.Transition.Transition arg0)
        {
            IExecuteWithSignature("setEnterTransition", "(Landroid/transition/Transition;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setExitTransition(android.transition.Transition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Transition.Transition"/></param>
        public void SetExitTransition(Android.Transition.Transition arg0)
        {
            IExecuteWithSignature("setExitTransition", "(Landroid/transition/Transition;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setFlags(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetFlags(int arg0, int arg1)
        {
            IExecute("setFlags", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setFormat(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetFormat(int arg0)
        {
            IExecuteWithSignature("setFormat", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setFrameRateBoostOnTouchEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFrameRateBoostOnTouchEnabled(bool arg0)
        {
            IExecuteWithSignature("setFrameRateBoostOnTouchEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setFrameRatePowerSavingsBalanced(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFrameRatePowerSavingsBalanced(bool arg0)
        {
            IExecuteWithSignature("setFrameRatePowerSavingsBalanced", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setGravity(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetGravity(int arg0)
        {
            IExecuteWithSignature("setGravity", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setIcon(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetIcon(int arg0)
        {
            IExecuteWithSignature("setIcon", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setLayout(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetLayout(int arg0, int arg1)
        {
            IExecute("setLayout", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setLocalFocus(boolean,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetLocalFocus(bool arg0, bool arg1)
        {
            IExecute("setLocalFocus", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setLogo(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetLogo(int arg0)
        {
            IExecuteWithSignature("setLogo", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setMediaController(android.media.session.MediaController)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Media.Session.MediaController"/></param>
        public void SetMediaController(Android.Media.Session.MediaController arg0)
        {
            IExecuteWithSignature("setMediaController", "(Landroid/media/session/MediaController;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setNavigationBarContrastEnforced(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetNavigationBarContrastEnforced(bool arg0)
        {
            IExecuteWithSignature("setNavigationBarContrastEnforced", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setNavigationBarDividerColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetNavigationBarDividerColor(int arg0)
        {
            IExecuteWithSignature("setNavigationBarDividerColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setPreferMinimalPostProcessing(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetPreferMinimalPostProcessing(bool arg0)
        {
            IExecuteWithSignature("setPreferMinimalPostProcessing", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setReenterTransition(android.transition.Transition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Transition.Transition"/></param>
        public void SetReenterTransition(Android.Transition.Transition arg0)
        {
            IExecuteWithSignature("setReenterTransition", "(Landroid/transition/Transition;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setReturnTransition(android.transition.Transition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Transition.Transition"/></param>
        public void SetReturnTransition(Android.Transition.Transition arg0)
        {
            IExecuteWithSignature("setReturnTransition", "(Landroid/transition/Transition;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setSharedElementEnterTransition(android.transition.Transition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Transition.Transition"/></param>
        public void SetSharedElementEnterTransition(Android.Transition.Transition arg0)
        {
            IExecuteWithSignature("setSharedElementEnterTransition", "(Landroid/transition/Transition;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setSharedElementExitTransition(android.transition.Transition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Transition.Transition"/></param>
        public void SetSharedElementExitTransition(Android.Transition.Transition arg0)
        {
            IExecuteWithSignature("setSharedElementExitTransition", "(Landroid/transition/Transition;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setSharedElementReenterTransition(android.transition.Transition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Transition.Transition"/></param>
        public void SetSharedElementReenterTransition(Android.Transition.Transition arg0)
        {
            IExecuteWithSignature("setSharedElementReenterTransition", "(Landroid/transition/Transition;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setSharedElementReturnTransition(android.transition.Transition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Transition.Transition"/></param>
        public void SetSharedElementReturnTransition(Android.Transition.Transition arg0)
        {
            IExecuteWithSignature("setSharedElementReturnTransition", "(Landroid/transition/Transition;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setSharedElementsUseOverlay(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSharedElementsUseOverlay(bool arg0)
        {
            IExecuteWithSignature("setSharedElementsUseOverlay", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setSoftInputMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetSoftInputMode(int arg0)
        {
            IExecuteWithSignature("setSoftInputMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setStatusBarContrastEnforced(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetStatusBarContrastEnforced(bool arg0)
        {
            IExecuteWithSignature("setStatusBarContrastEnforced", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setSustainedPerformanceMode(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSustainedPerformanceMode(bool arg0)
        {
            IExecuteWithSignature("setSustainedPerformanceMode", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setSystemGestureExclusionRects(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void SetSystemGestureExclusionRects(Java.Util.List<Android.Graphics.Rect> arg0)
        {
            IExecuteWithSignature("setSystemGestureExclusionRects", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setTransitionBackgroundFadeDuration(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void SetTransitionBackgroundFadeDuration(long arg0)
        {
            IExecuteWithSignature("setTransitionBackgroundFadeDuration", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setTransitionManager(android.transition.TransitionManager)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Transition.TransitionManager"/></param>
        public void SetTransitionManager(Android.Transition.TransitionManager arg0)
        {
            IExecuteWithSignature("setTransitionManager", "(Landroid/transition/TransitionManager;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetType(int arg0)
        {
            IExecuteWithSignature("setType", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setUiOptions(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetUiOptions(int arg0, int arg1)
        {
            IExecute("setUiOptions", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setUiOptions(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetUiOptions(int arg0)
        {
            IExecuteWithSignature("setUiOptions", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setWindowAnimations(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetWindowAnimations(int arg0)
        {
            IExecuteWithSignature("setWindowAnimations", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowManager"/></param>
        /// <param name="arg1"><see cref="Android.Os.IBinder"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        public void SetWindowManager(Android.View.WindowManager arg0, Android.Os.IBinder arg1, Java.Lang.String arg2, bool arg3)
        {
            IExecute("setWindowManager", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowManager"/></param>
        /// <param name="arg1"><see cref="Android.Os.IBinder"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        public void SetWindowManager(Android.View.WindowManager arg0, Android.Os.IBinder arg1, Java.Lang.String arg2)
        {
            IExecute("setWindowManager", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Window.html#unregisterScrollCaptureCallback(android.view.ScrollCaptureCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ScrollCaptureCallback"/></param>
        public void UnregisterScrollCaptureCallback(Android.View.ScrollCaptureCallback arg0)
        {
            IExecuteWithSignature("unregisterScrollCaptureCallback", "(Landroid/view/ScrollCaptureCallback;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region Callback
        public partial class Callback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onWindowStartingActionMode(android.view.ActionMode.Callback,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ActionMode.Callback"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.View.ActionMode"/></returns>
            public Android.View.ActionMode OnWindowStartingActionMode(Android.View.ActionMode.Callback arg0, int arg1)
            {
                return IExecute<Android.View.ActionMode>("onWindowStartingActionMode", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onWindowStartingActionMode(android.view.ActionMode.Callback)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ActionMode.Callback"/></param>
            /// <returns><see cref="Android.View.ActionMode"/></returns>
            public Android.View.ActionMode OnWindowStartingActionMode(Android.View.ActionMode.Callback arg0)
            {
                return IExecuteWithSignature<Android.View.ActionMode>("onWindowStartingActionMode", "(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onCreatePanelView(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.View.View"/></returns>
            public Android.View.View OnCreatePanelView(int arg0)
            {
                return IExecuteWithSignature<Android.View.View>("onCreatePanelView", "(I)Landroid/view/View;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#dispatchGenericMotionEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool DispatchGenericMotionEvent(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("dispatchGenericMotionEvent", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#dispatchKeyEvent(android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool DispatchKeyEvent(Android.View.KeyEvent arg0)
            {
                return IExecuteWithSignature<bool>("dispatchKeyEvent", "(Landroid/view/KeyEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#dispatchKeyShortcutEvent(android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool DispatchKeyShortcutEvent(Android.View.KeyEvent arg0)
            {
                return IExecuteWithSignature<bool>("dispatchKeyShortcutEvent", "(Landroid/view/KeyEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool DispatchPopulateAccessibilityEvent(Android.View.Accessibility.AccessibilityEvent arg0)
            {
                return IExecuteWithSignature<bool>("dispatchPopulateAccessibilityEvent", "(Landroid/view/accessibility/AccessibilityEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#dispatchTouchEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool DispatchTouchEvent(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("dispatchTouchEvent", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#dispatchTrackballEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool DispatchTrackballEvent(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("dispatchTrackballEvent", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onCreatePanelMenu(int,android.view.Menu)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.View.Menu"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnCreatePanelMenu(int arg0, Android.View.Menu arg1)
            {
                return IExecute<bool>("onCreatePanelMenu", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onMenuItemSelected(int,android.view.MenuItem)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.View.MenuItem"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnMenuItemSelected(int arg0, Android.View.MenuItem arg1)
            {
                return IExecute<bool>("onMenuItemSelected", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onMenuOpened(int,android.view.Menu)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.View.Menu"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnMenuOpened(int arg0, Android.View.Menu arg1)
            {
                return IExecute<bool>("onMenuOpened", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onPreparePanel(int,android.view.View,android.view.Menu)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            /// <param name="arg2"><see cref="Android.View.Menu"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnPreparePanel(int arg0, Android.View.View arg1, Android.View.Menu arg2)
            {
                return IExecute<bool>("onPreparePanel", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onSearchRequested()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool OnSearchRequested()
            {
                return IExecuteWithSignature<bool>("onSearchRequested", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onSearchRequested(android.view.SearchEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SearchEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnSearchRequested(Android.View.SearchEvent arg0)
            {
                return IExecuteWithSignature<bool>("onSearchRequested", "(Landroid/view/SearchEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onActionModeFinished(android.view.ActionMode)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ActionMode"/></param>
            public void OnActionModeFinished(Android.View.ActionMode arg0)
            {
                IExecuteWithSignature("onActionModeFinished", "(Landroid/view/ActionMode;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onActionModeStarted(android.view.ActionMode)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ActionMode"/></param>
            public void OnActionModeStarted(Android.View.ActionMode arg0)
            {
                IExecuteWithSignature("onActionModeStarted", "(Landroid/view/ActionMode;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onAttachedToWindow()"/>
            /// </summary>
            public void OnAttachedToWindow()
            {
                IExecuteWithSignature("onAttachedToWindow", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onContentChanged()"/>
            /// </summary>
            public void OnContentChanged()
            {
                IExecuteWithSignature("onContentChanged", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onDetachedFromWindow()"/>
            /// </summary>
            public void OnDetachedFromWindow()
            {
                IExecuteWithSignature("onDetachedFromWindow", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onPanelClosed(int,android.view.Menu)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.View.Menu"/></param>
            public void OnPanelClosed(int arg0, Android.View.Menu arg1)
            {
                IExecute("onPanelClosed", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onWindowAttributesChanged(android.view.WindowManager.LayoutParams)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.WindowManager.LayoutParams"/></param>
            public void OnWindowAttributesChanged(Android.View.WindowManager.LayoutParams arg0)
            {
                IExecuteWithSignature("onWindowAttributesChanged", "(Landroid/view/WindowManager$LayoutParams;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onWindowFocusChanged(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void OnWindowFocusChanged(bool arg0)
            {
                IExecuteWithSignature("onWindowFocusChanged", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onPointerCaptureChanged(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void OnPointerCaptureChanged(bool arg0)
            {
                IExecuteWithSignature("onPointerCaptureChanged", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.Callback.html#onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            /// <param name="arg1"><see cref="Android.View.Menu"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public void OnProvideKeyboardShortcuts(Java.Util.List<Android.View.KeyboardShortcutGroup> arg0, Android.View.Menu arg1, int arg2)
            {
                IExecute("onProvideKeyboardShortcuts", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnFrameMetricsAvailableListener
        public partial class OnFrameMetricsAvailableListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnFrameMetricsAvailableListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onFrameMetricsAvailable", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.Window>>>(OnFrameMetricsAvailableEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/Window.OnFrameMetricsAvailableListener.html#onFrameMetricsAvailable(android.view.Window,android.view.FrameMetrics,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnFrameMetricsAvailable"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.Window, Android.View.FrameMetrics, int> OnOnFrameMetricsAvailable { get; set; } = null;

            void OnFrameMetricsAvailableEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.Window>> data)
            {
                var methodToExecute = (OnOnFrameMetricsAvailable != null) ? OnOnFrameMetricsAvailable : OnFrameMetricsAvailable;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.FrameMetrics>(0), data.EventData.GetAt<int>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.OnFrameMetricsAvailableListener.html#onFrameMetricsAvailable(android.view.Window,android.view.FrameMetrics,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.Window"/></param>
            /// <param name="arg1"><see cref="Android.View.FrameMetrics"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public virtual void OnFrameMetricsAvailable(Android.View.Window arg0, Android.View.FrameMetrics arg1, int arg2)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnFrameMetricsAvailableListenerDirect
        public partial class OnFrameMetricsAvailableListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.OnFrameMetricsAvailableListener.html#onFrameMetricsAvailable(android.view.Window,android.view.FrameMetrics,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.Window"/></param>
            /// <param name="arg1"><see cref="Android.View.FrameMetrics"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public override void OnFrameMetricsAvailable(Android.View.Window arg0, Android.View.FrameMetrics arg1, int arg2)
            {
                IExecute("onFrameMetricsAvailable", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnRestrictedCaptionAreaChangedListener
        public partial class OnRestrictedCaptionAreaChangedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnRestrictedCaptionAreaChangedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onRestrictedCaptionAreaChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Graphics.Rect>>>(OnRestrictedCaptionAreaChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/Window.OnRestrictedCaptionAreaChangedListener.html#onRestrictedCaptionAreaChanged(android.graphics.Rect)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnRestrictedCaptionAreaChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.Graphics.Rect> OnOnRestrictedCaptionAreaChanged { get; set; } = null;

            void OnRestrictedCaptionAreaChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Graphics.Rect>> data)
            {
                var methodToExecute = (OnOnRestrictedCaptionAreaChanged != null) ? OnOnRestrictedCaptionAreaChanged : OnRestrictedCaptionAreaChanged;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.OnRestrictedCaptionAreaChangedListener.html#onRestrictedCaptionAreaChanged(android.graphics.Rect)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
            public virtual void OnRestrictedCaptionAreaChanged(Android.Graphics.Rect arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnRestrictedCaptionAreaChangedListenerDirect
        public partial class OnRestrictedCaptionAreaChangedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Window.OnRestrictedCaptionAreaChangedListener.html#onRestrictedCaptionAreaChanged(android.graphics.Rect)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
            public override void OnRestrictedCaptionAreaChanged(Android.Graphics.Rect arg0)
            {
                IExecuteWithSignature("onRestrictedCaptionAreaChanged", "(Landroid/graphics/Rect;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region KeyEvent
    public partial class KeyEvent
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#%3Cinit%3E(android.view.KeyEvent,long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [global::System.Obsolete()]
        public KeyEvent(Android.View.KeyEvent arg0, long arg1, int arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#%3Cinit%3E(android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
        public KeyEvent(Android.View.KeyEvent arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#%3Cinit%3E(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public KeyEvent(int arg0, int arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#%3Cinit%3E(long,java.lang.String,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public KeyEvent(long arg0, Java.Lang.String arg1, int arg2, int arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#%3Cinit%3E(long,long,int,int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        public KeyEvent(long arg0, long arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#%3Cinit%3E(long,long,int,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        public KeyEvent(long arg0, long arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#%3Cinit%3E(long,long,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        public KeyEvent(long arg0, long arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#%3Cinit%3E(long,long,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public KeyEvent(long arg0, long arg1, int arg2, int arg3, int arg4, int arg5)
            : base(arg0, arg1, arg2, arg3, arg4, arg5)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#%3Cinit%3E(long,long,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public KeyEvent(long arg0, long arg1, int arg2, int arg3, int arg4)
            : base(arg0, arg1, arg2, arg3, arg4)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#ACTION_DOWN"/>
        /// </summary>
        public static int ACTION_DOWN { get { if (!_ACTION_DOWNReady) { _ACTION_DOWNContent = SGetField<int>(LocalBridgeClazz, "ACTION_DOWN"); _ACTION_DOWNReady = true; } return _ACTION_DOWNContent; } }
        private static int _ACTION_DOWNContent = default;
        private static bool _ACTION_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#ACTION_MULTIPLE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ACTION_MULTIPLE { get { if (!_ACTION_MULTIPLEReady) { _ACTION_MULTIPLEContent = SGetField<int>(LocalBridgeClazz, "ACTION_MULTIPLE"); _ACTION_MULTIPLEReady = true; } return _ACTION_MULTIPLEContent; } }
        private static int _ACTION_MULTIPLEContent = default;
        private static bool _ACTION_MULTIPLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#ACTION_UP"/>
        /// </summary>
        public static int ACTION_UP { get { if (!_ACTION_UPReady) { _ACTION_UPContent = SGetField<int>(LocalBridgeClazz, "ACTION_UP"); _ACTION_UPReady = true; } return _ACTION_UPContent; } }
        private static int _ACTION_UPContent = default;
        private static bool _ACTION_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#FLAG_CANCELED"/>
        /// </summary>
        public static int FLAG_CANCELED { get { if (!_FLAG_CANCELEDReady) { _FLAG_CANCELEDContent = SGetField<int>(LocalBridgeClazz, "FLAG_CANCELED"); _FLAG_CANCELEDReady = true; } return _FLAG_CANCELEDContent; } }
        private static int _FLAG_CANCELEDContent = default;
        private static bool _FLAG_CANCELEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#FLAG_CANCELED_LONG_PRESS"/>
        /// </summary>
        public static int FLAG_CANCELED_LONG_PRESS { get { if (!_FLAG_CANCELED_LONG_PRESSReady) { _FLAG_CANCELED_LONG_PRESSContent = SGetField<int>(LocalBridgeClazz, "FLAG_CANCELED_LONG_PRESS"); _FLAG_CANCELED_LONG_PRESSReady = true; } return _FLAG_CANCELED_LONG_PRESSContent; } }
        private static int _FLAG_CANCELED_LONG_PRESSContent = default;
        private static bool _FLAG_CANCELED_LONG_PRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#FLAG_EDITOR_ACTION"/>
        /// </summary>
        public static int FLAG_EDITOR_ACTION { get { if (!_FLAG_EDITOR_ACTIONReady) { _FLAG_EDITOR_ACTIONContent = SGetField<int>(LocalBridgeClazz, "FLAG_EDITOR_ACTION"); _FLAG_EDITOR_ACTIONReady = true; } return _FLAG_EDITOR_ACTIONContent; } }
        private static int _FLAG_EDITOR_ACTIONContent = default;
        private static bool _FLAG_EDITOR_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#FLAG_FALLBACK"/>
        /// </summary>
        public static int FLAG_FALLBACK { get { if (!_FLAG_FALLBACKReady) { _FLAG_FALLBACKContent = SGetField<int>(LocalBridgeClazz, "FLAG_FALLBACK"); _FLAG_FALLBACKReady = true; } return _FLAG_FALLBACKContent; } }
        private static int _FLAG_FALLBACKContent = default;
        private static bool _FLAG_FALLBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#FLAG_FROM_SYSTEM"/>
        /// </summary>
        public static int FLAG_FROM_SYSTEM { get { if (!_FLAG_FROM_SYSTEMReady) { _FLAG_FROM_SYSTEMContent = SGetField<int>(LocalBridgeClazz, "FLAG_FROM_SYSTEM"); _FLAG_FROM_SYSTEMReady = true; } return _FLAG_FROM_SYSTEMContent; } }
        private static int _FLAG_FROM_SYSTEMContent = default;
        private static bool _FLAG_FROM_SYSTEMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#FLAG_KEEP_TOUCH_MODE"/>
        /// </summary>
        public static int FLAG_KEEP_TOUCH_MODE { get { if (!_FLAG_KEEP_TOUCH_MODEReady) { _FLAG_KEEP_TOUCH_MODEContent = SGetField<int>(LocalBridgeClazz, "FLAG_KEEP_TOUCH_MODE"); _FLAG_KEEP_TOUCH_MODEReady = true; } return _FLAG_KEEP_TOUCH_MODEContent; } }
        private static int _FLAG_KEEP_TOUCH_MODEContent = default;
        private static bool _FLAG_KEEP_TOUCH_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#FLAG_LONG_PRESS"/>
        /// </summary>
        public static int FLAG_LONG_PRESS { get { if (!_FLAG_LONG_PRESSReady) { _FLAG_LONG_PRESSContent = SGetField<int>(LocalBridgeClazz, "FLAG_LONG_PRESS"); _FLAG_LONG_PRESSReady = true; } return _FLAG_LONG_PRESSContent; } }
        private static int _FLAG_LONG_PRESSContent = default;
        private static bool _FLAG_LONG_PRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#FLAG_SOFT_KEYBOARD"/>
        /// </summary>
        public static int FLAG_SOFT_KEYBOARD { get { if (!_FLAG_SOFT_KEYBOARDReady) { _FLAG_SOFT_KEYBOARDContent = SGetField<int>(LocalBridgeClazz, "FLAG_SOFT_KEYBOARD"); _FLAG_SOFT_KEYBOARDReady = true; } return _FLAG_SOFT_KEYBOARDContent; } }
        private static int _FLAG_SOFT_KEYBOARDContent = default;
        private static bool _FLAG_SOFT_KEYBOARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#FLAG_TRACKING"/>
        /// </summary>
        public static int FLAG_TRACKING { get { if (!_FLAG_TRACKINGReady) { _FLAG_TRACKINGContent = SGetField<int>(LocalBridgeClazz, "FLAG_TRACKING"); _FLAG_TRACKINGReady = true; } return _FLAG_TRACKINGContent; } }
        private static int _FLAG_TRACKINGContent = default;
        private static bool _FLAG_TRACKINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#FLAG_VIRTUAL_HARD_KEY"/>
        /// </summary>
        public static int FLAG_VIRTUAL_HARD_KEY { get { if (!_FLAG_VIRTUAL_HARD_KEYReady) { _FLAG_VIRTUAL_HARD_KEYContent = SGetField<int>(LocalBridgeClazz, "FLAG_VIRTUAL_HARD_KEY"); _FLAG_VIRTUAL_HARD_KEYReady = true; } return _FLAG_VIRTUAL_HARD_KEYContent; } }
        private static int _FLAG_VIRTUAL_HARD_KEYContent = default;
        private static bool _FLAG_VIRTUAL_HARD_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#FLAG_WOKE_HERE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int FLAG_WOKE_HERE { get { if (!_FLAG_WOKE_HEREReady) { _FLAG_WOKE_HEREContent = SGetField<int>(LocalBridgeClazz, "FLAG_WOKE_HERE"); _FLAG_WOKE_HEREReady = true; } return _FLAG_WOKE_HEREContent; } }
        private static int _FLAG_WOKE_HEREContent = default;
        private static bool _FLAG_WOKE_HEREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_0"/>
        /// </summary>
        public static int KEYCODE_0 { get { if (!_KEYCODE_0Ready) { _KEYCODE_0Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_0"); _KEYCODE_0Ready = true; } return _KEYCODE_0Content; } }
        private static int _KEYCODE_0Content = default;
        private static bool _KEYCODE_0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_1"/>
        /// </summary>
        public static int KEYCODE_1 { get { if (!_KEYCODE_1Ready) { _KEYCODE_1Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_1"); _KEYCODE_1Ready = true; } return _KEYCODE_1Content; } }
        private static int _KEYCODE_1Content = default;
        private static bool _KEYCODE_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_11"/>
        /// </summary>
        public static int KEYCODE_11 { get { if (!_KEYCODE_11Ready) { _KEYCODE_11Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_11"); _KEYCODE_11Ready = true; } return _KEYCODE_11Content; } }
        private static int _KEYCODE_11Content = default;
        private static bool _KEYCODE_11Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_12"/>
        /// </summary>
        public static int KEYCODE_12 { get { if (!_KEYCODE_12Ready) { _KEYCODE_12Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_12"); _KEYCODE_12Ready = true; } return _KEYCODE_12Content; } }
        private static int _KEYCODE_12Content = default;
        private static bool _KEYCODE_12Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_2"/>
        /// </summary>
        public static int KEYCODE_2 { get { if (!_KEYCODE_2Ready) { _KEYCODE_2Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_2"); _KEYCODE_2Ready = true; } return _KEYCODE_2Content; } }
        private static int _KEYCODE_2Content = default;
        private static bool _KEYCODE_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_3"/>
        /// </summary>
        public static int KEYCODE_3 { get { if (!_KEYCODE_3Ready) { _KEYCODE_3Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_3"); _KEYCODE_3Ready = true; } return _KEYCODE_3Content; } }
        private static int _KEYCODE_3Content = default;
        private static bool _KEYCODE_3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_3D_MODE"/>
        /// </summary>
        public static int KEYCODE_3D_MODE { get { if (!_KEYCODE_3D_MODEReady) { _KEYCODE_3D_MODEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_3D_MODE"); _KEYCODE_3D_MODEReady = true; } return _KEYCODE_3D_MODEContent; } }
        private static int _KEYCODE_3D_MODEContent = default;
        private static bool _KEYCODE_3D_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_4"/>
        /// </summary>
        public static int KEYCODE_4 { get { if (!_KEYCODE_4Ready) { _KEYCODE_4Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_4"); _KEYCODE_4Ready = true; } return _KEYCODE_4Content; } }
        private static int _KEYCODE_4Content = default;
        private static bool _KEYCODE_4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_5"/>
        /// </summary>
        public static int KEYCODE_5 { get { if (!_KEYCODE_5Ready) { _KEYCODE_5Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_5"); _KEYCODE_5Ready = true; } return _KEYCODE_5Content; } }
        private static int _KEYCODE_5Content = default;
        private static bool _KEYCODE_5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_6"/>
        /// </summary>
        public static int KEYCODE_6 { get { if (!_KEYCODE_6Ready) { _KEYCODE_6Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_6"); _KEYCODE_6Ready = true; } return _KEYCODE_6Content; } }
        private static int _KEYCODE_6Content = default;
        private static bool _KEYCODE_6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_7"/>
        /// </summary>
        public static int KEYCODE_7 { get { if (!_KEYCODE_7Ready) { _KEYCODE_7Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_7"); _KEYCODE_7Ready = true; } return _KEYCODE_7Content; } }
        private static int _KEYCODE_7Content = default;
        private static bool _KEYCODE_7Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_8"/>
        /// </summary>
        public static int KEYCODE_8 { get { if (!_KEYCODE_8Ready) { _KEYCODE_8Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_8"); _KEYCODE_8Ready = true; } return _KEYCODE_8Content; } }
        private static int _KEYCODE_8Content = default;
        private static bool _KEYCODE_8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_9"/>
        /// </summary>
        public static int KEYCODE_9 { get { if (!_KEYCODE_9Ready) { _KEYCODE_9Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_9"); _KEYCODE_9Ready = true; } return _KEYCODE_9Content; } }
        private static int _KEYCODE_9Content = default;
        private static bool _KEYCODE_9Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_A"/>
        /// </summary>
        public static int KEYCODE_A { get { if (!_KEYCODE_AReady) { _KEYCODE_AContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_A"); _KEYCODE_AReady = true; } return _KEYCODE_AContent; } }
        private static int _KEYCODE_AContent = default;
        private static bool _KEYCODE_AReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_ALL_APPS"/>
        /// </summary>
        public static int KEYCODE_ALL_APPS { get { if (!_KEYCODE_ALL_APPSReady) { _KEYCODE_ALL_APPSContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_ALL_APPS"); _KEYCODE_ALL_APPSReady = true; } return _KEYCODE_ALL_APPSContent; } }
        private static int _KEYCODE_ALL_APPSContent = default;
        private static bool _KEYCODE_ALL_APPSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_ALT_LEFT"/>
        /// </summary>
        public static int KEYCODE_ALT_LEFT { get { if (!_KEYCODE_ALT_LEFTReady) { _KEYCODE_ALT_LEFTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_ALT_LEFT"); _KEYCODE_ALT_LEFTReady = true; } return _KEYCODE_ALT_LEFTContent; } }
        private static int _KEYCODE_ALT_LEFTContent = default;
        private static bool _KEYCODE_ALT_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_ALT_RIGHT"/>
        /// </summary>
        public static int KEYCODE_ALT_RIGHT { get { if (!_KEYCODE_ALT_RIGHTReady) { _KEYCODE_ALT_RIGHTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_ALT_RIGHT"); _KEYCODE_ALT_RIGHTReady = true; } return _KEYCODE_ALT_RIGHTContent; } }
        private static int _KEYCODE_ALT_RIGHTContent = default;
        private static bool _KEYCODE_ALT_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_APOSTROPHE"/>
        /// </summary>
        public static int KEYCODE_APOSTROPHE { get { if (!_KEYCODE_APOSTROPHEReady) { _KEYCODE_APOSTROPHEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_APOSTROPHE"); _KEYCODE_APOSTROPHEReady = true; } return _KEYCODE_APOSTROPHEContent; } }
        private static int _KEYCODE_APOSTROPHEContent = default;
        private static bool _KEYCODE_APOSTROPHEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_APP_SWITCH"/>
        /// </summary>
        public static int KEYCODE_APP_SWITCH { get { if (!_KEYCODE_APP_SWITCHReady) { _KEYCODE_APP_SWITCHContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_APP_SWITCH"); _KEYCODE_APP_SWITCHReady = true; } return _KEYCODE_APP_SWITCHContent; } }
        private static int _KEYCODE_APP_SWITCHContent = default;
        private static bool _KEYCODE_APP_SWITCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_ASSIST"/>
        /// </summary>
        public static int KEYCODE_ASSIST { get { if (!_KEYCODE_ASSISTReady) { _KEYCODE_ASSISTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_ASSIST"); _KEYCODE_ASSISTReady = true; } return _KEYCODE_ASSISTContent; } }
        private static int _KEYCODE_ASSISTContent = default;
        private static bool _KEYCODE_ASSISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_AT"/>
        /// </summary>
        public static int KEYCODE_AT { get { if (!_KEYCODE_ATReady) { _KEYCODE_ATContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_AT"); _KEYCODE_ATReady = true; } return _KEYCODE_ATContent; } }
        private static int _KEYCODE_ATContent = default;
        private static bool _KEYCODE_ATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_AVR_INPUT"/>
        /// </summary>
        public static int KEYCODE_AVR_INPUT { get { if (!_KEYCODE_AVR_INPUTReady) { _KEYCODE_AVR_INPUTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_AVR_INPUT"); _KEYCODE_AVR_INPUTReady = true; } return _KEYCODE_AVR_INPUTContent; } }
        private static int _KEYCODE_AVR_INPUTContent = default;
        private static bool _KEYCODE_AVR_INPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_AVR_POWER"/>
        /// </summary>
        public static int KEYCODE_AVR_POWER { get { if (!_KEYCODE_AVR_POWERReady) { _KEYCODE_AVR_POWERContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_AVR_POWER"); _KEYCODE_AVR_POWERReady = true; } return _KEYCODE_AVR_POWERContent; } }
        private static int _KEYCODE_AVR_POWERContent = default;
        private static bool _KEYCODE_AVR_POWERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_B"/>
        /// </summary>
        public static int KEYCODE_B { get { if (!_KEYCODE_BReady) { _KEYCODE_BContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_B"); _KEYCODE_BReady = true; } return _KEYCODE_BContent; } }
        private static int _KEYCODE_BContent = default;
        private static bool _KEYCODE_BReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BACK"/>
        /// </summary>
        public static int KEYCODE_BACK { get { if (!_KEYCODE_BACKReady) { _KEYCODE_BACKContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BACK"); _KEYCODE_BACKReady = true; } return _KEYCODE_BACKContent; } }
        private static int _KEYCODE_BACKContent = default;
        private static bool _KEYCODE_BACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BACKSLASH"/>
        /// </summary>
        public static int KEYCODE_BACKSLASH { get { if (!_KEYCODE_BACKSLASHReady) { _KEYCODE_BACKSLASHContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BACKSLASH"); _KEYCODE_BACKSLASHReady = true; } return _KEYCODE_BACKSLASHContent; } }
        private static int _KEYCODE_BACKSLASHContent = default;
        private static bool _KEYCODE_BACKSLASHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BOOKMARK"/>
        /// </summary>
        public static int KEYCODE_BOOKMARK { get { if (!_KEYCODE_BOOKMARKReady) { _KEYCODE_BOOKMARKContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BOOKMARK"); _KEYCODE_BOOKMARKReady = true; } return _KEYCODE_BOOKMARKContent; } }
        private static int _KEYCODE_BOOKMARKContent = default;
        private static bool _KEYCODE_BOOKMARKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BREAK"/>
        /// </summary>
        public static int KEYCODE_BREAK { get { if (!_KEYCODE_BREAKReady) { _KEYCODE_BREAKContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BREAK"); _KEYCODE_BREAKReady = true; } return _KEYCODE_BREAKContent; } }
        private static int _KEYCODE_BREAKContent = default;
        private static bool _KEYCODE_BREAKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BRIGHTNESS_DOWN"/>
        /// </summary>
        public static int KEYCODE_BRIGHTNESS_DOWN { get { if (!_KEYCODE_BRIGHTNESS_DOWNReady) { _KEYCODE_BRIGHTNESS_DOWNContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BRIGHTNESS_DOWN"); _KEYCODE_BRIGHTNESS_DOWNReady = true; } return _KEYCODE_BRIGHTNESS_DOWNContent; } }
        private static int _KEYCODE_BRIGHTNESS_DOWNContent = default;
        private static bool _KEYCODE_BRIGHTNESS_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BRIGHTNESS_UP"/>
        /// </summary>
        public static int KEYCODE_BRIGHTNESS_UP { get { if (!_KEYCODE_BRIGHTNESS_UPReady) { _KEYCODE_BRIGHTNESS_UPContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BRIGHTNESS_UP"); _KEYCODE_BRIGHTNESS_UPReady = true; } return _KEYCODE_BRIGHTNESS_UPContent; } }
        private static int _KEYCODE_BRIGHTNESS_UPContent = default;
        private static bool _KEYCODE_BRIGHTNESS_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_1"/>
        /// </summary>
        public static int KEYCODE_BUTTON_1 { get { if (!_KEYCODE_BUTTON_1Ready) { _KEYCODE_BUTTON_1Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_1"); _KEYCODE_BUTTON_1Ready = true; } return _KEYCODE_BUTTON_1Content; } }
        private static int _KEYCODE_BUTTON_1Content = default;
        private static bool _KEYCODE_BUTTON_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_10"/>
        /// </summary>
        public static int KEYCODE_BUTTON_10 { get { if (!_KEYCODE_BUTTON_10Ready) { _KEYCODE_BUTTON_10Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_10"); _KEYCODE_BUTTON_10Ready = true; } return _KEYCODE_BUTTON_10Content; } }
        private static int _KEYCODE_BUTTON_10Content = default;
        private static bool _KEYCODE_BUTTON_10Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_11"/>
        /// </summary>
        public static int KEYCODE_BUTTON_11 { get { if (!_KEYCODE_BUTTON_11Ready) { _KEYCODE_BUTTON_11Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_11"); _KEYCODE_BUTTON_11Ready = true; } return _KEYCODE_BUTTON_11Content; } }
        private static int _KEYCODE_BUTTON_11Content = default;
        private static bool _KEYCODE_BUTTON_11Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_12"/>
        /// </summary>
        public static int KEYCODE_BUTTON_12 { get { if (!_KEYCODE_BUTTON_12Ready) { _KEYCODE_BUTTON_12Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_12"); _KEYCODE_BUTTON_12Ready = true; } return _KEYCODE_BUTTON_12Content; } }
        private static int _KEYCODE_BUTTON_12Content = default;
        private static bool _KEYCODE_BUTTON_12Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_13"/>
        /// </summary>
        public static int KEYCODE_BUTTON_13 { get { if (!_KEYCODE_BUTTON_13Ready) { _KEYCODE_BUTTON_13Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_13"); _KEYCODE_BUTTON_13Ready = true; } return _KEYCODE_BUTTON_13Content; } }
        private static int _KEYCODE_BUTTON_13Content = default;
        private static bool _KEYCODE_BUTTON_13Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_14"/>
        /// </summary>
        public static int KEYCODE_BUTTON_14 { get { if (!_KEYCODE_BUTTON_14Ready) { _KEYCODE_BUTTON_14Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_14"); _KEYCODE_BUTTON_14Ready = true; } return _KEYCODE_BUTTON_14Content; } }
        private static int _KEYCODE_BUTTON_14Content = default;
        private static bool _KEYCODE_BUTTON_14Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_15"/>
        /// </summary>
        public static int KEYCODE_BUTTON_15 { get { if (!_KEYCODE_BUTTON_15Ready) { _KEYCODE_BUTTON_15Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_15"); _KEYCODE_BUTTON_15Ready = true; } return _KEYCODE_BUTTON_15Content; } }
        private static int _KEYCODE_BUTTON_15Content = default;
        private static bool _KEYCODE_BUTTON_15Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_16"/>
        /// </summary>
        public static int KEYCODE_BUTTON_16 { get { if (!_KEYCODE_BUTTON_16Ready) { _KEYCODE_BUTTON_16Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_16"); _KEYCODE_BUTTON_16Ready = true; } return _KEYCODE_BUTTON_16Content; } }
        private static int _KEYCODE_BUTTON_16Content = default;
        private static bool _KEYCODE_BUTTON_16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_2"/>
        /// </summary>
        public static int KEYCODE_BUTTON_2 { get { if (!_KEYCODE_BUTTON_2Ready) { _KEYCODE_BUTTON_2Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_2"); _KEYCODE_BUTTON_2Ready = true; } return _KEYCODE_BUTTON_2Content; } }
        private static int _KEYCODE_BUTTON_2Content = default;
        private static bool _KEYCODE_BUTTON_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_3"/>
        /// </summary>
        public static int KEYCODE_BUTTON_3 { get { if (!_KEYCODE_BUTTON_3Ready) { _KEYCODE_BUTTON_3Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_3"); _KEYCODE_BUTTON_3Ready = true; } return _KEYCODE_BUTTON_3Content; } }
        private static int _KEYCODE_BUTTON_3Content = default;
        private static bool _KEYCODE_BUTTON_3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_4"/>
        /// </summary>
        public static int KEYCODE_BUTTON_4 { get { if (!_KEYCODE_BUTTON_4Ready) { _KEYCODE_BUTTON_4Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_4"); _KEYCODE_BUTTON_4Ready = true; } return _KEYCODE_BUTTON_4Content; } }
        private static int _KEYCODE_BUTTON_4Content = default;
        private static bool _KEYCODE_BUTTON_4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_5"/>
        /// </summary>
        public static int KEYCODE_BUTTON_5 { get { if (!_KEYCODE_BUTTON_5Ready) { _KEYCODE_BUTTON_5Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_5"); _KEYCODE_BUTTON_5Ready = true; } return _KEYCODE_BUTTON_5Content; } }
        private static int _KEYCODE_BUTTON_5Content = default;
        private static bool _KEYCODE_BUTTON_5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_6"/>
        /// </summary>
        public static int KEYCODE_BUTTON_6 { get { if (!_KEYCODE_BUTTON_6Ready) { _KEYCODE_BUTTON_6Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_6"); _KEYCODE_BUTTON_6Ready = true; } return _KEYCODE_BUTTON_6Content; } }
        private static int _KEYCODE_BUTTON_6Content = default;
        private static bool _KEYCODE_BUTTON_6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_7"/>
        /// </summary>
        public static int KEYCODE_BUTTON_7 { get { if (!_KEYCODE_BUTTON_7Ready) { _KEYCODE_BUTTON_7Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_7"); _KEYCODE_BUTTON_7Ready = true; } return _KEYCODE_BUTTON_7Content; } }
        private static int _KEYCODE_BUTTON_7Content = default;
        private static bool _KEYCODE_BUTTON_7Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_8"/>
        /// </summary>
        public static int KEYCODE_BUTTON_8 { get { if (!_KEYCODE_BUTTON_8Ready) { _KEYCODE_BUTTON_8Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_8"); _KEYCODE_BUTTON_8Ready = true; } return _KEYCODE_BUTTON_8Content; } }
        private static int _KEYCODE_BUTTON_8Content = default;
        private static bool _KEYCODE_BUTTON_8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_9"/>
        /// </summary>
        public static int KEYCODE_BUTTON_9 { get { if (!_KEYCODE_BUTTON_9Ready) { _KEYCODE_BUTTON_9Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_9"); _KEYCODE_BUTTON_9Ready = true; } return _KEYCODE_BUTTON_9Content; } }
        private static int _KEYCODE_BUTTON_9Content = default;
        private static bool _KEYCODE_BUTTON_9Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_A"/>
        /// </summary>
        public static int KEYCODE_BUTTON_A { get { if (!_KEYCODE_BUTTON_AReady) { _KEYCODE_BUTTON_AContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_A"); _KEYCODE_BUTTON_AReady = true; } return _KEYCODE_BUTTON_AContent; } }
        private static int _KEYCODE_BUTTON_AContent = default;
        private static bool _KEYCODE_BUTTON_AReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_B"/>
        /// </summary>
        public static int KEYCODE_BUTTON_B { get { if (!_KEYCODE_BUTTON_BReady) { _KEYCODE_BUTTON_BContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_B"); _KEYCODE_BUTTON_BReady = true; } return _KEYCODE_BUTTON_BContent; } }
        private static int _KEYCODE_BUTTON_BContent = default;
        private static bool _KEYCODE_BUTTON_BReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_C"/>
        /// </summary>
        public static int KEYCODE_BUTTON_C { get { if (!_KEYCODE_BUTTON_CReady) { _KEYCODE_BUTTON_CContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_C"); _KEYCODE_BUTTON_CReady = true; } return _KEYCODE_BUTTON_CContent; } }
        private static int _KEYCODE_BUTTON_CContent = default;
        private static bool _KEYCODE_BUTTON_CReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_L1"/>
        /// </summary>
        public static int KEYCODE_BUTTON_L1 { get { if (!_KEYCODE_BUTTON_L1Ready) { _KEYCODE_BUTTON_L1Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_L1"); _KEYCODE_BUTTON_L1Ready = true; } return _KEYCODE_BUTTON_L1Content; } }
        private static int _KEYCODE_BUTTON_L1Content = default;
        private static bool _KEYCODE_BUTTON_L1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_L2"/>
        /// </summary>
        public static int KEYCODE_BUTTON_L2 { get { if (!_KEYCODE_BUTTON_L2Ready) { _KEYCODE_BUTTON_L2Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_L2"); _KEYCODE_BUTTON_L2Ready = true; } return _KEYCODE_BUTTON_L2Content; } }
        private static int _KEYCODE_BUTTON_L2Content = default;
        private static bool _KEYCODE_BUTTON_L2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_MODE"/>
        /// </summary>
        public static int KEYCODE_BUTTON_MODE { get { if (!_KEYCODE_BUTTON_MODEReady) { _KEYCODE_BUTTON_MODEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_MODE"); _KEYCODE_BUTTON_MODEReady = true; } return _KEYCODE_BUTTON_MODEContent; } }
        private static int _KEYCODE_BUTTON_MODEContent = default;
        private static bool _KEYCODE_BUTTON_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_R1"/>
        /// </summary>
        public static int KEYCODE_BUTTON_R1 { get { if (!_KEYCODE_BUTTON_R1Ready) { _KEYCODE_BUTTON_R1Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_R1"); _KEYCODE_BUTTON_R1Ready = true; } return _KEYCODE_BUTTON_R1Content; } }
        private static int _KEYCODE_BUTTON_R1Content = default;
        private static bool _KEYCODE_BUTTON_R1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_R2"/>
        /// </summary>
        public static int KEYCODE_BUTTON_R2 { get { if (!_KEYCODE_BUTTON_R2Ready) { _KEYCODE_BUTTON_R2Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_R2"); _KEYCODE_BUTTON_R2Ready = true; } return _KEYCODE_BUTTON_R2Content; } }
        private static int _KEYCODE_BUTTON_R2Content = default;
        private static bool _KEYCODE_BUTTON_R2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_SELECT"/>
        /// </summary>
        public static int KEYCODE_BUTTON_SELECT { get { if (!_KEYCODE_BUTTON_SELECTReady) { _KEYCODE_BUTTON_SELECTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_SELECT"); _KEYCODE_BUTTON_SELECTReady = true; } return _KEYCODE_BUTTON_SELECTContent; } }
        private static int _KEYCODE_BUTTON_SELECTContent = default;
        private static bool _KEYCODE_BUTTON_SELECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_START"/>
        /// </summary>
        public static int KEYCODE_BUTTON_START { get { if (!_KEYCODE_BUTTON_STARTReady) { _KEYCODE_BUTTON_STARTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_START"); _KEYCODE_BUTTON_STARTReady = true; } return _KEYCODE_BUTTON_STARTContent; } }
        private static int _KEYCODE_BUTTON_STARTContent = default;
        private static bool _KEYCODE_BUTTON_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_THUMBL"/>
        /// </summary>
        public static int KEYCODE_BUTTON_THUMBL { get { if (!_KEYCODE_BUTTON_THUMBLReady) { _KEYCODE_BUTTON_THUMBLContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_THUMBL"); _KEYCODE_BUTTON_THUMBLReady = true; } return _KEYCODE_BUTTON_THUMBLContent; } }
        private static int _KEYCODE_BUTTON_THUMBLContent = default;
        private static bool _KEYCODE_BUTTON_THUMBLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_THUMBR"/>
        /// </summary>
        public static int KEYCODE_BUTTON_THUMBR { get { if (!_KEYCODE_BUTTON_THUMBRReady) { _KEYCODE_BUTTON_THUMBRContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_THUMBR"); _KEYCODE_BUTTON_THUMBRReady = true; } return _KEYCODE_BUTTON_THUMBRContent; } }
        private static int _KEYCODE_BUTTON_THUMBRContent = default;
        private static bool _KEYCODE_BUTTON_THUMBRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_X"/>
        /// </summary>
        public static int KEYCODE_BUTTON_X { get { if (!_KEYCODE_BUTTON_XReady) { _KEYCODE_BUTTON_XContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_X"); _KEYCODE_BUTTON_XReady = true; } return _KEYCODE_BUTTON_XContent; } }
        private static int _KEYCODE_BUTTON_XContent = default;
        private static bool _KEYCODE_BUTTON_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_Y"/>
        /// </summary>
        public static int KEYCODE_BUTTON_Y { get { if (!_KEYCODE_BUTTON_YReady) { _KEYCODE_BUTTON_YContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_Y"); _KEYCODE_BUTTON_YReady = true; } return _KEYCODE_BUTTON_YContent; } }
        private static int _KEYCODE_BUTTON_YContent = default;
        private static bool _KEYCODE_BUTTON_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_BUTTON_Z"/>
        /// </summary>
        public static int KEYCODE_BUTTON_Z { get { if (!_KEYCODE_BUTTON_ZReady) { _KEYCODE_BUTTON_ZContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_BUTTON_Z"); _KEYCODE_BUTTON_ZReady = true; } return _KEYCODE_BUTTON_ZContent; } }
        private static int _KEYCODE_BUTTON_ZContent = default;
        private static bool _KEYCODE_BUTTON_ZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_C"/>
        /// </summary>
        public static int KEYCODE_C { get { if (!_KEYCODE_CReady) { _KEYCODE_CContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_C"); _KEYCODE_CReady = true; } return _KEYCODE_CContent; } }
        private static int _KEYCODE_CContent = default;
        private static bool _KEYCODE_CReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_CALCULATOR"/>
        /// </summary>
        public static int KEYCODE_CALCULATOR { get { if (!_KEYCODE_CALCULATORReady) { _KEYCODE_CALCULATORContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_CALCULATOR"); _KEYCODE_CALCULATORReady = true; } return _KEYCODE_CALCULATORContent; } }
        private static int _KEYCODE_CALCULATORContent = default;
        private static bool _KEYCODE_CALCULATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_CALENDAR"/>
        /// </summary>
        public static int KEYCODE_CALENDAR { get { if (!_KEYCODE_CALENDARReady) { _KEYCODE_CALENDARContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_CALENDAR"); _KEYCODE_CALENDARReady = true; } return _KEYCODE_CALENDARContent; } }
        private static int _KEYCODE_CALENDARContent = default;
        private static bool _KEYCODE_CALENDARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_CALL"/>
        /// </summary>
        public static int KEYCODE_CALL { get { if (!_KEYCODE_CALLReady) { _KEYCODE_CALLContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_CALL"); _KEYCODE_CALLReady = true; } return _KEYCODE_CALLContent; } }
        private static int _KEYCODE_CALLContent = default;
        private static bool _KEYCODE_CALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_CAMERA"/>
        /// </summary>
        public static int KEYCODE_CAMERA { get { if (!_KEYCODE_CAMERAReady) { _KEYCODE_CAMERAContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_CAMERA"); _KEYCODE_CAMERAReady = true; } return _KEYCODE_CAMERAContent; } }
        private static int _KEYCODE_CAMERAContent = default;
        private static bool _KEYCODE_CAMERAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_CAPS_LOCK"/>
        /// </summary>
        public static int KEYCODE_CAPS_LOCK { get { if (!_KEYCODE_CAPS_LOCKReady) { _KEYCODE_CAPS_LOCKContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_CAPS_LOCK"); _KEYCODE_CAPS_LOCKReady = true; } return _KEYCODE_CAPS_LOCKContent; } }
        private static int _KEYCODE_CAPS_LOCKContent = default;
        private static bool _KEYCODE_CAPS_LOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_CAPTIONS"/>
        /// </summary>
        public static int KEYCODE_CAPTIONS { get { if (!_KEYCODE_CAPTIONSReady) { _KEYCODE_CAPTIONSContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_CAPTIONS"); _KEYCODE_CAPTIONSReady = true; } return _KEYCODE_CAPTIONSContent; } }
        private static int _KEYCODE_CAPTIONSContent = default;
        private static bool _KEYCODE_CAPTIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_CHANNEL_DOWN"/>
        /// </summary>
        public static int KEYCODE_CHANNEL_DOWN { get { if (!_KEYCODE_CHANNEL_DOWNReady) { _KEYCODE_CHANNEL_DOWNContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_CHANNEL_DOWN"); _KEYCODE_CHANNEL_DOWNReady = true; } return _KEYCODE_CHANNEL_DOWNContent; } }
        private static int _KEYCODE_CHANNEL_DOWNContent = default;
        private static bool _KEYCODE_CHANNEL_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_CHANNEL_UP"/>
        /// </summary>
        public static int KEYCODE_CHANNEL_UP { get { if (!_KEYCODE_CHANNEL_UPReady) { _KEYCODE_CHANNEL_UPContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_CHANNEL_UP"); _KEYCODE_CHANNEL_UPReady = true; } return _KEYCODE_CHANNEL_UPContent; } }
        private static int _KEYCODE_CHANNEL_UPContent = default;
        private static bool _KEYCODE_CHANNEL_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_CLEAR"/>
        /// </summary>
        public static int KEYCODE_CLEAR { get { if (!_KEYCODE_CLEARReady) { _KEYCODE_CLEARContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_CLEAR"); _KEYCODE_CLEARReady = true; } return _KEYCODE_CLEARContent; } }
        private static int _KEYCODE_CLEARContent = default;
        private static bool _KEYCODE_CLEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_COMMA"/>
        /// </summary>
        public static int KEYCODE_COMMA { get { if (!_KEYCODE_COMMAReady) { _KEYCODE_COMMAContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_COMMA"); _KEYCODE_COMMAReady = true; } return _KEYCODE_COMMAContent; } }
        private static int _KEYCODE_COMMAContent = default;
        private static bool _KEYCODE_COMMAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_CONTACTS"/>
        /// </summary>
        public static int KEYCODE_CONTACTS { get { if (!_KEYCODE_CONTACTSReady) { _KEYCODE_CONTACTSContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_CONTACTS"); _KEYCODE_CONTACTSReady = true; } return _KEYCODE_CONTACTSContent; } }
        private static int _KEYCODE_CONTACTSContent = default;
        private static bool _KEYCODE_CONTACTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_COPY"/>
        /// </summary>
        public static int KEYCODE_COPY { get { if (!_KEYCODE_COPYReady) { _KEYCODE_COPYContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_COPY"); _KEYCODE_COPYReady = true; } return _KEYCODE_COPYContent; } }
        private static int _KEYCODE_COPYContent = default;
        private static bool _KEYCODE_COPYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_CTRL_LEFT"/>
        /// </summary>
        public static int KEYCODE_CTRL_LEFT { get { if (!_KEYCODE_CTRL_LEFTReady) { _KEYCODE_CTRL_LEFTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_CTRL_LEFT"); _KEYCODE_CTRL_LEFTReady = true; } return _KEYCODE_CTRL_LEFTContent; } }
        private static int _KEYCODE_CTRL_LEFTContent = default;
        private static bool _KEYCODE_CTRL_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_CTRL_RIGHT"/>
        /// </summary>
        public static int KEYCODE_CTRL_RIGHT { get { if (!_KEYCODE_CTRL_RIGHTReady) { _KEYCODE_CTRL_RIGHTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_CTRL_RIGHT"); _KEYCODE_CTRL_RIGHTReady = true; } return _KEYCODE_CTRL_RIGHTContent; } }
        private static int _KEYCODE_CTRL_RIGHTContent = default;
        private static bool _KEYCODE_CTRL_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_CUT"/>
        /// </summary>
        public static int KEYCODE_CUT { get { if (!_KEYCODE_CUTReady) { _KEYCODE_CUTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_CUT"); _KEYCODE_CUTReady = true; } return _KEYCODE_CUTContent; } }
        private static int _KEYCODE_CUTContent = default;
        private static bool _KEYCODE_CUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_D"/>
        /// </summary>
        public static int KEYCODE_D { get { if (!_KEYCODE_DReady) { _KEYCODE_DContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_D"); _KEYCODE_DReady = true; } return _KEYCODE_DContent; } }
        private static int _KEYCODE_DContent = default;
        private static bool _KEYCODE_DReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DEL"/>
        /// </summary>
        public static int KEYCODE_DEL { get { if (!_KEYCODE_DELReady) { _KEYCODE_DELContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_DEL"); _KEYCODE_DELReady = true; } return _KEYCODE_DELContent; } }
        private static int _KEYCODE_DELContent = default;
        private static bool _KEYCODE_DELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DEMO_APP_1"/>
        /// </summary>
        public static int KEYCODE_DEMO_APP_1 { get { if (!_KEYCODE_DEMO_APP_1Ready) { _KEYCODE_DEMO_APP_1Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_DEMO_APP_1"); _KEYCODE_DEMO_APP_1Ready = true; } return _KEYCODE_DEMO_APP_1Content; } }
        private static int _KEYCODE_DEMO_APP_1Content = default;
        private static bool _KEYCODE_DEMO_APP_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DEMO_APP_2"/>
        /// </summary>
        public static int KEYCODE_DEMO_APP_2 { get { if (!_KEYCODE_DEMO_APP_2Ready) { _KEYCODE_DEMO_APP_2Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_DEMO_APP_2"); _KEYCODE_DEMO_APP_2Ready = true; } return _KEYCODE_DEMO_APP_2Content; } }
        private static int _KEYCODE_DEMO_APP_2Content = default;
        private static bool _KEYCODE_DEMO_APP_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DEMO_APP_3"/>
        /// </summary>
        public static int KEYCODE_DEMO_APP_3 { get { if (!_KEYCODE_DEMO_APP_3Ready) { _KEYCODE_DEMO_APP_3Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_DEMO_APP_3"); _KEYCODE_DEMO_APP_3Ready = true; } return _KEYCODE_DEMO_APP_3Content; } }
        private static int _KEYCODE_DEMO_APP_3Content = default;
        private static bool _KEYCODE_DEMO_APP_3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DEMO_APP_4"/>
        /// </summary>
        public static int KEYCODE_DEMO_APP_4 { get { if (!_KEYCODE_DEMO_APP_4Ready) { _KEYCODE_DEMO_APP_4Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_DEMO_APP_4"); _KEYCODE_DEMO_APP_4Ready = true; } return _KEYCODE_DEMO_APP_4Content; } }
        private static int _KEYCODE_DEMO_APP_4Content = default;
        private static bool _KEYCODE_DEMO_APP_4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DPAD_CENTER"/>
        /// </summary>
        public static int KEYCODE_DPAD_CENTER { get { if (!_KEYCODE_DPAD_CENTERReady) { _KEYCODE_DPAD_CENTERContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_DPAD_CENTER"); _KEYCODE_DPAD_CENTERReady = true; } return _KEYCODE_DPAD_CENTERContent; } }
        private static int _KEYCODE_DPAD_CENTERContent = default;
        private static bool _KEYCODE_DPAD_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DPAD_DOWN"/>
        /// </summary>
        public static int KEYCODE_DPAD_DOWN { get { if (!_KEYCODE_DPAD_DOWNReady) { _KEYCODE_DPAD_DOWNContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_DPAD_DOWN"); _KEYCODE_DPAD_DOWNReady = true; } return _KEYCODE_DPAD_DOWNContent; } }
        private static int _KEYCODE_DPAD_DOWNContent = default;
        private static bool _KEYCODE_DPAD_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DPAD_DOWN_LEFT"/>
        /// </summary>
        public static int KEYCODE_DPAD_DOWN_LEFT { get { if (!_KEYCODE_DPAD_DOWN_LEFTReady) { _KEYCODE_DPAD_DOWN_LEFTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_DPAD_DOWN_LEFT"); _KEYCODE_DPAD_DOWN_LEFTReady = true; } return _KEYCODE_DPAD_DOWN_LEFTContent; } }
        private static int _KEYCODE_DPAD_DOWN_LEFTContent = default;
        private static bool _KEYCODE_DPAD_DOWN_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DPAD_DOWN_RIGHT"/>
        /// </summary>
        public static int KEYCODE_DPAD_DOWN_RIGHT { get { if (!_KEYCODE_DPAD_DOWN_RIGHTReady) { _KEYCODE_DPAD_DOWN_RIGHTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_DPAD_DOWN_RIGHT"); _KEYCODE_DPAD_DOWN_RIGHTReady = true; } return _KEYCODE_DPAD_DOWN_RIGHTContent; } }
        private static int _KEYCODE_DPAD_DOWN_RIGHTContent = default;
        private static bool _KEYCODE_DPAD_DOWN_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DPAD_LEFT"/>
        /// </summary>
        public static int KEYCODE_DPAD_LEFT { get { if (!_KEYCODE_DPAD_LEFTReady) { _KEYCODE_DPAD_LEFTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_DPAD_LEFT"); _KEYCODE_DPAD_LEFTReady = true; } return _KEYCODE_DPAD_LEFTContent; } }
        private static int _KEYCODE_DPAD_LEFTContent = default;
        private static bool _KEYCODE_DPAD_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DPAD_RIGHT"/>
        /// </summary>
        public static int KEYCODE_DPAD_RIGHT { get { if (!_KEYCODE_DPAD_RIGHTReady) { _KEYCODE_DPAD_RIGHTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_DPAD_RIGHT"); _KEYCODE_DPAD_RIGHTReady = true; } return _KEYCODE_DPAD_RIGHTContent; } }
        private static int _KEYCODE_DPAD_RIGHTContent = default;
        private static bool _KEYCODE_DPAD_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DPAD_UP"/>
        /// </summary>
        public static int KEYCODE_DPAD_UP { get { if (!_KEYCODE_DPAD_UPReady) { _KEYCODE_DPAD_UPContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_DPAD_UP"); _KEYCODE_DPAD_UPReady = true; } return _KEYCODE_DPAD_UPContent; } }
        private static int _KEYCODE_DPAD_UPContent = default;
        private static bool _KEYCODE_DPAD_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DPAD_UP_LEFT"/>
        /// </summary>
        public static int KEYCODE_DPAD_UP_LEFT { get { if (!_KEYCODE_DPAD_UP_LEFTReady) { _KEYCODE_DPAD_UP_LEFTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_DPAD_UP_LEFT"); _KEYCODE_DPAD_UP_LEFTReady = true; } return _KEYCODE_DPAD_UP_LEFTContent; } }
        private static int _KEYCODE_DPAD_UP_LEFTContent = default;
        private static bool _KEYCODE_DPAD_UP_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DPAD_UP_RIGHT"/>
        /// </summary>
        public static int KEYCODE_DPAD_UP_RIGHT { get { if (!_KEYCODE_DPAD_UP_RIGHTReady) { _KEYCODE_DPAD_UP_RIGHTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_DPAD_UP_RIGHT"); _KEYCODE_DPAD_UP_RIGHTReady = true; } return _KEYCODE_DPAD_UP_RIGHTContent; } }
        private static int _KEYCODE_DPAD_UP_RIGHTContent = default;
        private static bool _KEYCODE_DPAD_UP_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_DVR"/>
        /// </summary>
        public static int KEYCODE_DVR { get { if (!_KEYCODE_DVRReady) { _KEYCODE_DVRContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_DVR"); _KEYCODE_DVRReady = true; } return _KEYCODE_DVRContent; } }
        private static int _KEYCODE_DVRContent = default;
        private static bool _KEYCODE_DVRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_E"/>
        /// </summary>
        public static int KEYCODE_E { get { if (!_KEYCODE_EReady) { _KEYCODE_EContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_E"); _KEYCODE_EReady = true; } return _KEYCODE_EContent; } }
        private static int _KEYCODE_EContent = default;
        private static bool _KEYCODE_EReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_EISU"/>
        /// </summary>
        public static int KEYCODE_EISU { get { if (!_KEYCODE_EISUReady) { _KEYCODE_EISUContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_EISU"); _KEYCODE_EISUReady = true; } return _KEYCODE_EISUContent; } }
        private static int _KEYCODE_EISUContent = default;
        private static bool _KEYCODE_EISUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_EMOJI_PICKER"/>
        /// </summary>
        public static int KEYCODE_EMOJI_PICKER { get { if (!_KEYCODE_EMOJI_PICKERReady) { _KEYCODE_EMOJI_PICKERContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_EMOJI_PICKER"); _KEYCODE_EMOJI_PICKERReady = true; } return _KEYCODE_EMOJI_PICKERContent; } }
        private static int _KEYCODE_EMOJI_PICKERContent = default;
        private static bool _KEYCODE_EMOJI_PICKERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_ENDCALL"/>
        /// </summary>
        public static int KEYCODE_ENDCALL { get { if (!_KEYCODE_ENDCALLReady) { _KEYCODE_ENDCALLContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_ENDCALL"); _KEYCODE_ENDCALLReady = true; } return _KEYCODE_ENDCALLContent; } }
        private static int _KEYCODE_ENDCALLContent = default;
        private static bool _KEYCODE_ENDCALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_ENTER"/>
        /// </summary>
        public static int KEYCODE_ENTER { get { if (!_KEYCODE_ENTERReady) { _KEYCODE_ENTERContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_ENTER"); _KEYCODE_ENTERReady = true; } return _KEYCODE_ENTERContent; } }
        private static int _KEYCODE_ENTERContent = default;
        private static bool _KEYCODE_ENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_ENVELOPE"/>
        /// </summary>
        public static int KEYCODE_ENVELOPE { get { if (!_KEYCODE_ENVELOPEReady) { _KEYCODE_ENVELOPEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_ENVELOPE"); _KEYCODE_ENVELOPEReady = true; } return _KEYCODE_ENVELOPEContent; } }
        private static int _KEYCODE_ENVELOPEContent = default;
        private static bool _KEYCODE_ENVELOPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_EQUALS"/>
        /// </summary>
        public static int KEYCODE_EQUALS { get { if (!_KEYCODE_EQUALSReady) { _KEYCODE_EQUALSContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_EQUALS"); _KEYCODE_EQUALSReady = true; } return _KEYCODE_EQUALSContent; } }
        private static int _KEYCODE_EQUALSContent = default;
        private static bool _KEYCODE_EQUALSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_ESCAPE"/>
        /// </summary>
        public static int KEYCODE_ESCAPE { get { if (!_KEYCODE_ESCAPEReady) { _KEYCODE_ESCAPEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_ESCAPE"); _KEYCODE_ESCAPEReady = true; } return _KEYCODE_ESCAPEContent; } }
        private static int _KEYCODE_ESCAPEContent = default;
        private static bool _KEYCODE_ESCAPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_EXPLORER"/>
        /// </summary>
        public static int KEYCODE_EXPLORER { get { if (!_KEYCODE_EXPLORERReady) { _KEYCODE_EXPLORERContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_EXPLORER"); _KEYCODE_EXPLORERReady = true; } return _KEYCODE_EXPLORERContent; } }
        private static int _KEYCODE_EXPLORERContent = default;
        private static bool _KEYCODE_EXPLORERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_F"/>
        /// </summary>
        public static int KEYCODE_F { get { if (!_KEYCODE_FReady) { _KEYCODE_FContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_F"); _KEYCODE_FReady = true; } return _KEYCODE_FContent; } }
        private static int _KEYCODE_FContent = default;
        private static bool _KEYCODE_FReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_F1"/>
        /// </summary>
        public static int KEYCODE_F1 { get { if (!_KEYCODE_F1Ready) { _KEYCODE_F1Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_F1"); _KEYCODE_F1Ready = true; } return _KEYCODE_F1Content; } }
        private static int _KEYCODE_F1Content = default;
        private static bool _KEYCODE_F1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_F10"/>
        /// </summary>
        public static int KEYCODE_F10 { get { if (!_KEYCODE_F10Ready) { _KEYCODE_F10Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_F10"); _KEYCODE_F10Ready = true; } return _KEYCODE_F10Content; } }
        private static int _KEYCODE_F10Content = default;
        private static bool _KEYCODE_F10Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_F11"/>
        /// </summary>
        public static int KEYCODE_F11 { get { if (!_KEYCODE_F11Ready) { _KEYCODE_F11Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_F11"); _KEYCODE_F11Ready = true; } return _KEYCODE_F11Content; } }
        private static int _KEYCODE_F11Content = default;
        private static bool _KEYCODE_F11Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_F12"/>
        /// </summary>
        public static int KEYCODE_F12 { get { if (!_KEYCODE_F12Ready) { _KEYCODE_F12Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_F12"); _KEYCODE_F12Ready = true; } return _KEYCODE_F12Content; } }
        private static int _KEYCODE_F12Content = default;
        private static bool _KEYCODE_F12Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_F2"/>
        /// </summary>
        public static int KEYCODE_F2 { get { if (!_KEYCODE_F2Ready) { _KEYCODE_F2Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_F2"); _KEYCODE_F2Ready = true; } return _KEYCODE_F2Content; } }
        private static int _KEYCODE_F2Content = default;
        private static bool _KEYCODE_F2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_F3"/>
        /// </summary>
        public static int KEYCODE_F3 { get { if (!_KEYCODE_F3Ready) { _KEYCODE_F3Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_F3"); _KEYCODE_F3Ready = true; } return _KEYCODE_F3Content; } }
        private static int _KEYCODE_F3Content = default;
        private static bool _KEYCODE_F3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_F4"/>
        /// </summary>
        public static int KEYCODE_F4 { get { if (!_KEYCODE_F4Ready) { _KEYCODE_F4Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_F4"); _KEYCODE_F4Ready = true; } return _KEYCODE_F4Content; } }
        private static int _KEYCODE_F4Content = default;
        private static bool _KEYCODE_F4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_F5"/>
        /// </summary>
        public static int KEYCODE_F5 { get { if (!_KEYCODE_F5Ready) { _KEYCODE_F5Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_F5"); _KEYCODE_F5Ready = true; } return _KEYCODE_F5Content; } }
        private static int _KEYCODE_F5Content = default;
        private static bool _KEYCODE_F5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_F6"/>
        /// </summary>
        public static int KEYCODE_F6 { get { if (!_KEYCODE_F6Ready) { _KEYCODE_F6Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_F6"); _KEYCODE_F6Ready = true; } return _KEYCODE_F6Content; } }
        private static int _KEYCODE_F6Content = default;
        private static bool _KEYCODE_F6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_F7"/>
        /// </summary>
        public static int KEYCODE_F7 { get { if (!_KEYCODE_F7Ready) { _KEYCODE_F7Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_F7"); _KEYCODE_F7Ready = true; } return _KEYCODE_F7Content; } }
        private static int _KEYCODE_F7Content = default;
        private static bool _KEYCODE_F7Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_F8"/>
        /// </summary>
        public static int KEYCODE_F8 { get { if (!_KEYCODE_F8Ready) { _KEYCODE_F8Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_F8"); _KEYCODE_F8Ready = true; } return _KEYCODE_F8Content; } }
        private static int _KEYCODE_F8Content = default;
        private static bool _KEYCODE_F8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_F9"/>
        /// </summary>
        public static int KEYCODE_F9 { get { if (!_KEYCODE_F9Ready) { _KEYCODE_F9Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_F9"); _KEYCODE_F9Ready = true; } return _KEYCODE_F9Content; } }
        private static int _KEYCODE_F9Content = default;
        private static bool _KEYCODE_F9Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_FEATURED_APP_1"/>
        /// </summary>
        public static int KEYCODE_FEATURED_APP_1 { get { if (!_KEYCODE_FEATURED_APP_1Ready) { _KEYCODE_FEATURED_APP_1Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_FEATURED_APP_1"); _KEYCODE_FEATURED_APP_1Ready = true; } return _KEYCODE_FEATURED_APP_1Content; } }
        private static int _KEYCODE_FEATURED_APP_1Content = default;
        private static bool _KEYCODE_FEATURED_APP_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_FEATURED_APP_2"/>
        /// </summary>
        public static int KEYCODE_FEATURED_APP_2 { get { if (!_KEYCODE_FEATURED_APP_2Ready) { _KEYCODE_FEATURED_APP_2Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_FEATURED_APP_2"); _KEYCODE_FEATURED_APP_2Ready = true; } return _KEYCODE_FEATURED_APP_2Content; } }
        private static int _KEYCODE_FEATURED_APP_2Content = default;
        private static bool _KEYCODE_FEATURED_APP_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_FEATURED_APP_3"/>
        /// </summary>
        public static int KEYCODE_FEATURED_APP_3 { get { if (!_KEYCODE_FEATURED_APP_3Ready) { _KEYCODE_FEATURED_APP_3Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_FEATURED_APP_3"); _KEYCODE_FEATURED_APP_3Ready = true; } return _KEYCODE_FEATURED_APP_3Content; } }
        private static int _KEYCODE_FEATURED_APP_3Content = default;
        private static bool _KEYCODE_FEATURED_APP_3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_FEATURED_APP_4"/>
        /// </summary>
        public static int KEYCODE_FEATURED_APP_4 { get { if (!_KEYCODE_FEATURED_APP_4Ready) { _KEYCODE_FEATURED_APP_4Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_FEATURED_APP_4"); _KEYCODE_FEATURED_APP_4Ready = true; } return _KEYCODE_FEATURED_APP_4Content; } }
        private static int _KEYCODE_FEATURED_APP_4Content = default;
        private static bool _KEYCODE_FEATURED_APP_4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_FOCUS"/>
        /// </summary>
        public static int KEYCODE_FOCUS { get { if (!_KEYCODE_FOCUSReady) { _KEYCODE_FOCUSContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_FOCUS"); _KEYCODE_FOCUSReady = true; } return _KEYCODE_FOCUSContent; } }
        private static int _KEYCODE_FOCUSContent = default;
        private static bool _KEYCODE_FOCUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_FORWARD"/>
        /// </summary>
        public static int KEYCODE_FORWARD { get { if (!_KEYCODE_FORWARDReady) { _KEYCODE_FORWARDContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_FORWARD"); _KEYCODE_FORWARDReady = true; } return _KEYCODE_FORWARDContent; } }
        private static int _KEYCODE_FORWARDContent = default;
        private static bool _KEYCODE_FORWARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_FORWARD_DEL"/>
        /// </summary>
        public static int KEYCODE_FORWARD_DEL { get { if (!_KEYCODE_FORWARD_DELReady) { _KEYCODE_FORWARD_DELContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_FORWARD_DEL"); _KEYCODE_FORWARD_DELReady = true; } return _KEYCODE_FORWARD_DELContent; } }
        private static int _KEYCODE_FORWARD_DELContent = default;
        private static bool _KEYCODE_FORWARD_DELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_FUNCTION"/>
        /// </summary>
        public static int KEYCODE_FUNCTION { get { if (!_KEYCODE_FUNCTIONReady) { _KEYCODE_FUNCTIONContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_FUNCTION"); _KEYCODE_FUNCTIONReady = true; } return _KEYCODE_FUNCTIONContent; } }
        private static int _KEYCODE_FUNCTIONContent = default;
        private static bool _KEYCODE_FUNCTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_G"/>
        /// </summary>
        public static int KEYCODE_G { get { if (!_KEYCODE_GReady) { _KEYCODE_GContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_G"); _KEYCODE_GReady = true; } return _KEYCODE_GContent; } }
        private static int _KEYCODE_GContent = default;
        private static bool _KEYCODE_GReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_GRAVE"/>
        /// </summary>
        public static int KEYCODE_GRAVE { get { if (!_KEYCODE_GRAVEReady) { _KEYCODE_GRAVEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_GRAVE"); _KEYCODE_GRAVEReady = true; } return _KEYCODE_GRAVEContent; } }
        private static int _KEYCODE_GRAVEContent = default;
        private static bool _KEYCODE_GRAVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_GUIDE"/>
        /// </summary>
        public static int KEYCODE_GUIDE { get { if (!_KEYCODE_GUIDEReady) { _KEYCODE_GUIDEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_GUIDE"); _KEYCODE_GUIDEReady = true; } return _KEYCODE_GUIDEContent; } }
        private static int _KEYCODE_GUIDEContent = default;
        private static bool _KEYCODE_GUIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_H"/>
        /// </summary>
        public static int KEYCODE_H { get { if (!_KEYCODE_HReady) { _KEYCODE_HContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_H"); _KEYCODE_HReady = true; } return _KEYCODE_HContent; } }
        private static int _KEYCODE_HContent = default;
        private static bool _KEYCODE_HReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_HEADSETHOOK"/>
        /// </summary>
        public static int KEYCODE_HEADSETHOOK { get { if (!_KEYCODE_HEADSETHOOKReady) { _KEYCODE_HEADSETHOOKContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_HEADSETHOOK"); _KEYCODE_HEADSETHOOKReady = true; } return _KEYCODE_HEADSETHOOKContent; } }
        private static int _KEYCODE_HEADSETHOOKContent = default;
        private static bool _KEYCODE_HEADSETHOOKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_HELP"/>
        /// </summary>
        public static int KEYCODE_HELP { get { if (!_KEYCODE_HELPReady) { _KEYCODE_HELPContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_HELP"); _KEYCODE_HELPReady = true; } return _KEYCODE_HELPContent; } }
        private static int _KEYCODE_HELPContent = default;
        private static bool _KEYCODE_HELPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_HENKAN"/>
        /// </summary>
        public static int KEYCODE_HENKAN { get { if (!_KEYCODE_HENKANReady) { _KEYCODE_HENKANContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_HENKAN"); _KEYCODE_HENKANReady = true; } return _KEYCODE_HENKANContent; } }
        private static int _KEYCODE_HENKANContent = default;
        private static bool _KEYCODE_HENKANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_HOME"/>
        /// </summary>
        public static int KEYCODE_HOME { get { if (!_KEYCODE_HOMEReady) { _KEYCODE_HOMEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_HOME"); _KEYCODE_HOMEReady = true; } return _KEYCODE_HOMEContent; } }
        private static int _KEYCODE_HOMEContent = default;
        private static bool _KEYCODE_HOMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_I"/>
        /// </summary>
        public static int KEYCODE_I { get { if (!_KEYCODE_IReady) { _KEYCODE_IContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_I"); _KEYCODE_IReady = true; } return _KEYCODE_IContent; } }
        private static int _KEYCODE_IContent = default;
        private static bool _KEYCODE_IReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_INFO"/>
        /// </summary>
        public static int KEYCODE_INFO { get { if (!_KEYCODE_INFOReady) { _KEYCODE_INFOContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_INFO"); _KEYCODE_INFOReady = true; } return _KEYCODE_INFOContent; } }
        private static int _KEYCODE_INFOContent = default;
        private static bool _KEYCODE_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_INSERT"/>
        /// </summary>
        public static int KEYCODE_INSERT { get { if (!_KEYCODE_INSERTReady) { _KEYCODE_INSERTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_INSERT"); _KEYCODE_INSERTReady = true; } return _KEYCODE_INSERTContent; } }
        private static int _KEYCODE_INSERTContent = default;
        private static bool _KEYCODE_INSERTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_J"/>
        /// </summary>
        public static int KEYCODE_J { get { if (!_KEYCODE_JReady) { _KEYCODE_JContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_J"); _KEYCODE_JReady = true; } return _KEYCODE_JContent; } }
        private static int _KEYCODE_JContent = default;
        private static bool _KEYCODE_JReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_K"/>
        /// </summary>
        public static int KEYCODE_K { get { if (!_KEYCODE_KReady) { _KEYCODE_KContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_K"); _KEYCODE_KReady = true; } return _KEYCODE_KContent; } }
        private static int _KEYCODE_KContent = default;
        private static bool _KEYCODE_KReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_KANA"/>
        /// </summary>
        public static int KEYCODE_KANA { get { if (!_KEYCODE_KANAReady) { _KEYCODE_KANAContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_KANA"); _KEYCODE_KANAReady = true; } return _KEYCODE_KANAContent; } }
        private static int _KEYCODE_KANAContent = default;
        private static bool _KEYCODE_KANAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_KATAKANA_HIRAGANA"/>
        /// </summary>
        public static int KEYCODE_KATAKANA_HIRAGANA { get { if (!_KEYCODE_KATAKANA_HIRAGANAReady) { _KEYCODE_KATAKANA_HIRAGANAContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_KATAKANA_HIRAGANA"); _KEYCODE_KATAKANA_HIRAGANAReady = true; } return _KEYCODE_KATAKANA_HIRAGANAContent; } }
        private static int _KEYCODE_KATAKANA_HIRAGANAContent = default;
        private static bool _KEYCODE_KATAKANA_HIRAGANAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_KEYBOARD_BACKLIGHT_DOWN"/>
        /// </summary>
        public static int KEYCODE_KEYBOARD_BACKLIGHT_DOWN { get { if (!_KEYCODE_KEYBOARD_BACKLIGHT_DOWNReady) { _KEYCODE_KEYBOARD_BACKLIGHT_DOWNContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_KEYBOARD_BACKLIGHT_DOWN"); _KEYCODE_KEYBOARD_BACKLIGHT_DOWNReady = true; } return _KEYCODE_KEYBOARD_BACKLIGHT_DOWNContent; } }
        private static int _KEYCODE_KEYBOARD_BACKLIGHT_DOWNContent = default;
        private static bool _KEYCODE_KEYBOARD_BACKLIGHT_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_KEYBOARD_BACKLIGHT_TOGGLE"/>
        /// </summary>
        public static int KEYCODE_KEYBOARD_BACKLIGHT_TOGGLE { get { if (!_KEYCODE_KEYBOARD_BACKLIGHT_TOGGLEReady) { _KEYCODE_KEYBOARD_BACKLIGHT_TOGGLEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_KEYBOARD_BACKLIGHT_TOGGLE"); _KEYCODE_KEYBOARD_BACKLIGHT_TOGGLEReady = true; } return _KEYCODE_KEYBOARD_BACKLIGHT_TOGGLEContent; } }
        private static int _KEYCODE_KEYBOARD_BACKLIGHT_TOGGLEContent = default;
        private static bool _KEYCODE_KEYBOARD_BACKLIGHT_TOGGLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_KEYBOARD_BACKLIGHT_UP"/>
        /// </summary>
        public static int KEYCODE_KEYBOARD_BACKLIGHT_UP { get { if (!_KEYCODE_KEYBOARD_BACKLIGHT_UPReady) { _KEYCODE_KEYBOARD_BACKLIGHT_UPContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_KEYBOARD_BACKLIGHT_UP"); _KEYCODE_KEYBOARD_BACKLIGHT_UPReady = true; } return _KEYCODE_KEYBOARD_BACKLIGHT_UPContent; } }
        private static int _KEYCODE_KEYBOARD_BACKLIGHT_UPContent = default;
        private static bool _KEYCODE_KEYBOARD_BACKLIGHT_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_L"/>
        /// </summary>
        public static int KEYCODE_L { get { if (!_KEYCODE_LReady) { _KEYCODE_LContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_L"); _KEYCODE_LReady = true; } return _KEYCODE_LContent; } }
        private static int _KEYCODE_LContent = default;
        private static bool _KEYCODE_LReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_LANGUAGE_SWITCH"/>
        /// </summary>
        public static int KEYCODE_LANGUAGE_SWITCH { get { if (!_KEYCODE_LANGUAGE_SWITCHReady) { _KEYCODE_LANGUAGE_SWITCHContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_LANGUAGE_SWITCH"); _KEYCODE_LANGUAGE_SWITCHReady = true; } return _KEYCODE_LANGUAGE_SWITCHContent; } }
        private static int _KEYCODE_LANGUAGE_SWITCHContent = default;
        private static bool _KEYCODE_LANGUAGE_SWITCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_LAST_CHANNEL"/>
        /// </summary>
        public static int KEYCODE_LAST_CHANNEL { get { if (!_KEYCODE_LAST_CHANNELReady) { _KEYCODE_LAST_CHANNELContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_LAST_CHANNEL"); _KEYCODE_LAST_CHANNELReady = true; } return _KEYCODE_LAST_CHANNELContent; } }
        private static int _KEYCODE_LAST_CHANNELContent = default;
        private static bool _KEYCODE_LAST_CHANNELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_LEFT_BRACKET"/>
        /// </summary>
        public static int KEYCODE_LEFT_BRACKET { get { if (!_KEYCODE_LEFT_BRACKETReady) { _KEYCODE_LEFT_BRACKETContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_LEFT_BRACKET"); _KEYCODE_LEFT_BRACKETReady = true; } return _KEYCODE_LEFT_BRACKETContent; } }
        private static int _KEYCODE_LEFT_BRACKETContent = default;
        private static bool _KEYCODE_LEFT_BRACKETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_M"/>
        /// </summary>
        public static int KEYCODE_M { get { if (!_KEYCODE_MReady) { _KEYCODE_MContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_M"); _KEYCODE_MReady = true; } return _KEYCODE_MContent; } }
        private static int _KEYCODE_MContent = default;
        private static bool _KEYCODE_MReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MACRO_1"/>
        /// </summary>
        public static int KEYCODE_MACRO_1 { get { if (!_KEYCODE_MACRO_1Ready) { _KEYCODE_MACRO_1Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_MACRO_1"); _KEYCODE_MACRO_1Ready = true; } return _KEYCODE_MACRO_1Content; } }
        private static int _KEYCODE_MACRO_1Content = default;
        private static bool _KEYCODE_MACRO_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MACRO_2"/>
        /// </summary>
        public static int KEYCODE_MACRO_2 { get { if (!_KEYCODE_MACRO_2Ready) { _KEYCODE_MACRO_2Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_MACRO_2"); _KEYCODE_MACRO_2Ready = true; } return _KEYCODE_MACRO_2Content; } }
        private static int _KEYCODE_MACRO_2Content = default;
        private static bool _KEYCODE_MACRO_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MACRO_3"/>
        /// </summary>
        public static int KEYCODE_MACRO_3 { get { if (!_KEYCODE_MACRO_3Ready) { _KEYCODE_MACRO_3Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_MACRO_3"); _KEYCODE_MACRO_3Ready = true; } return _KEYCODE_MACRO_3Content; } }
        private static int _KEYCODE_MACRO_3Content = default;
        private static bool _KEYCODE_MACRO_3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MACRO_4"/>
        /// </summary>
        public static int KEYCODE_MACRO_4 { get { if (!_KEYCODE_MACRO_4Ready) { _KEYCODE_MACRO_4Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_MACRO_4"); _KEYCODE_MACRO_4Ready = true; } return _KEYCODE_MACRO_4Content; } }
        private static int _KEYCODE_MACRO_4Content = default;
        private static bool _KEYCODE_MACRO_4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MANNER_MODE"/>
        /// </summary>
        public static int KEYCODE_MANNER_MODE { get { if (!_KEYCODE_MANNER_MODEReady) { _KEYCODE_MANNER_MODEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MANNER_MODE"); _KEYCODE_MANNER_MODEReady = true; } return _KEYCODE_MANNER_MODEContent; } }
        private static int _KEYCODE_MANNER_MODEContent = default;
        private static bool _KEYCODE_MANNER_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_AUDIO_TRACK"/>
        /// </summary>
        public static int KEYCODE_MEDIA_AUDIO_TRACK { get { if (!_KEYCODE_MEDIA_AUDIO_TRACKReady) { _KEYCODE_MEDIA_AUDIO_TRACKContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_AUDIO_TRACK"); _KEYCODE_MEDIA_AUDIO_TRACKReady = true; } return _KEYCODE_MEDIA_AUDIO_TRACKContent; } }
        private static int _KEYCODE_MEDIA_AUDIO_TRACKContent = default;
        private static bool _KEYCODE_MEDIA_AUDIO_TRACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_CLOSE"/>
        /// </summary>
        public static int KEYCODE_MEDIA_CLOSE { get { if (!_KEYCODE_MEDIA_CLOSEReady) { _KEYCODE_MEDIA_CLOSEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_CLOSE"); _KEYCODE_MEDIA_CLOSEReady = true; } return _KEYCODE_MEDIA_CLOSEContent; } }
        private static int _KEYCODE_MEDIA_CLOSEContent = default;
        private static bool _KEYCODE_MEDIA_CLOSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_EJECT"/>
        /// </summary>
        public static int KEYCODE_MEDIA_EJECT { get { if (!_KEYCODE_MEDIA_EJECTReady) { _KEYCODE_MEDIA_EJECTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_EJECT"); _KEYCODE_MEDIA_EJECTReady = true; } return _KEYCODE_MEDIA_EJECTContent; } }
        private static int _KEYCODE_MEDIA_EJECTContent = default;
        private static bool _KEYCODE_MEDIA_EJECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_FAST_FORWARD"/>
        /// </summary>
        public static int KEYCODE_MEDIA_FAST_FORWARD { get { if (!_KEYCODE_MEDIA_FAST_FORWARDReady) { _KEYCODE_MEDIA_FAST_FORWARDContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_FAST_FORWARD"); _KEYCODE_MEDIA_FAST_FORWARDReady = true; } return _KEYCODE_MEDIA_FAST_FORWARDContent; } }
        private static int _KEYCODE_MEDIA_FAST_FORWARDContent = default;
        private static bool _KEYCODE_MEDIA_FAST_FORWARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_NEXT"/>
        /// </summary>
        public static int KEYCODE_MEDIA_NEXT { get { if (!_KEYCODE_MEDIA_NEXTReady) { _KEYCODE_MEDIA_NEXTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_NEXT"); _KEYCODE_MEDIA_NEXTReady = true; } return _KEYCODE_MEDIA_NEXTContent; } }
        private static int _KEYCODE_MEDIA_NEXTContent = default;
        private static bool _KEYCODE_MEDIA_NEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_PAUSE"/>
        /// </summary>
        public static int KEYCODE_MEDIA_PAUSE { get { if (!_KEYCODE_MEDIA_PAUSEReady) { _KEYCODE_MEDIA_PAUSEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_PAUSE"); _KEYCODE_MEDIA_PAUSEReady = true; } return _KEYCODE_MEDIA_PAUSEContent; } }
        private static int _KEYCODE_MEDIA_PAUSEContent = default;
        private static bool _KEYCODE_MEDIA_PAUSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_PLAY"/>
        /// </summary>
        public static int KEYCODE_MEDIA_PLAY { get { if (!_KEYCODE_MEDIA_PLAYReady) { _KEYCODE_MEDIA_PLAYContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_PLAY"); _KEYCODE_MEDIA_PLAYReady = true; } return _KEYCODE_MEDIA_PLAYContent; } }
        private static int _KEYCODE_MEDIA_PLAYContent = default;
        private static bool _KEYCODE_MEDIA_PLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_PLAY_PAUSE"/>
        /// </summary>
        public static int KEYCODE_MEDIA_PLAY_PAUSE { get { if (!_KEYCODE_MEDIA_PLAY_PAUSEReady) { _KEYCODE_MEDIA_PLAY_PAUSEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_PLAY_PAUSE"); _KEYCODE_MEDIA_PLAY_PAUSEReady = true; } return _KEYCODE_MEDIA_PLAY_PAUSEContent; } }
        private static int _KEYCODE_MEDIA_PLAY_PAUSEContent = default;
        private static bool _KEYCODE_MEDIA_PLAY_PAUSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_PREVIOUS"/>
        /// </summary>
        public static int KEYCODE_MEDIA_PREVIOUS { get { if (!_KEYCODE_MEDIA_PREVIOUSReady) { _KEYCODE_MEDIA_PREVIOUSContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_PREVIOUS"); _KEYCODE_MEDIA_PREVIOUSReady = true; } return _KEYCODE_MEDIA_PREVIOUSContent; } }
        private static int _KEYCODE_MEDIA_PREVIOUSContent = default;
        private static bool _KEYCODE_MEDIA_PREVIOUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_RECORD"/>
        /// </summary>
        public static int KEYCODE_MEDIA_RECORD { get { if (!_KEYCODE_MEDIA_RECORDReady) { _KEYCODE_MEDIA_RECORDContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_RECORD"); _KEYCODE_MEDIA_RECORDReady = true; } return _KEYCODE_MEDIA_RECORDContent; } }
        private static int _KEYCODE_MEDIA_RECORDContent = default;
        private static bool _KEYCODE_MEDIA_RECORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_REWIND"/>
        /// </summary>
        public static int KEYCODE_MEDIA_REWIND { get { if (!_KEYCODE_MEDIA_REWINDReady) { _KEYCODE_MEDIA_REWINDContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_REWIND"); _KEYCODE_MEDIA_REWINDReady = true; } return _KEYCODE_MEDIA_REWINDContent; } }
        private static int _KEYCODE_MEDIA_REWINDContent = default;
        private static bool _KEYCODE_MEDIA_REWINDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_SKIP_BACKWARD"/>
        /// </summary>
        public static int KEYCODE_MEDIA_SKIP_BACKWARD { get { if (!_KEYCODE_MEDIA_SKIP_BACKWARDReady) { _KEYCODE_MEDIA_SKIP_BACKWARDContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_SKIP_BACKWARD"); _KEYCODE_MEDIA_SKIP_BACKWARDReady = true; } return _KEYCODE_MEDIA_SKIP_BACKWARDContent; } }
        private static int _KEYCODE_MEDIA_SKIP_BACKWARDContent = default;
        private static bool _KEYCODE_MEDIA_SKIP_BACKWARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_SKIP_FORWARD"/>
        /// </summary>
        public static int KEYCODE_MEDIA_SKIP_FORWARD { get { if (!_KEYCODE_MEDIA_SKIP_FORWARDReady) { _KEYCODE_MEDIA_SKIP_FORWARDContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_SKIP_FORWARD"); _KEYCODE_MEDIA_SKIP_FORWARDReady = true; } return _KEYCODE_MEDIA_SKIP_FORWARDContent; } }
        private static int _KEYCODE_MEDIA_SKIP_FORWARDContent = default;
        private static bool _KEYCODE_MEDIA_SKIP_FORWARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_STEP_BACKWARD"/>
        /// </summary>
        public static int KEYCODE_MEDIA_STEP_BACKWARD { get { if (!_KEYCODE_MEDIA_STEP_BACKWARDReady) { _KEYCODE_MEDIA_STEP_BACKWARDContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_STEP_BACKWARD"); _KEYCODE_MEDIA_STEP_BACKWARDReady = true; } return _KEYCODE_MEDIA_STEP_BACKWARDContent; } }
        private static int _KEYCODE_MEDIA_STEP_BACKWARDContent = default;
        private static bool _KEYCODE_MEDIA_STEP_BACKWARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_STEP_FORWARD"/>
        /// </summary>
        public static int KEYCODE_MEDIA_STEP_FORWARD { get { if (!_KEYCODE_MEDIA_STEP_FORWARDReady) { _KEYCODE_MEDIA_STEP_FORWARDContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_STEP_FORWARD"); _KEYCODE_MEDIA_STEP_FORWARDReady = true; } return _KEYCODE_MEDIA_STEP_FORWARDContent; } }
        private static int _KEYCODE_MEDIA_STEP_FORWARDContent = default;
        private static bool _KEYCODE_MEDIA_STEP_FORWARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_STOP"/>
        /// </summary>
        public static int KEYCODE_MEDIA_STOP { get { if (!_KEYCODE_MEDIA_STOPReady) { _KEYCODE_MEDIA_STOPContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_STOP"); _KEYCODE_MEDIA_STOPReady = true; } return _KEYCODE_MEDIA_STOPContent; } }
        private static int _KEYCODE_MEDIA_STOPContent = default;
        private static bool _KEYCODE_MEDIA_STOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MEDIA_TOP_MENU"/>
        /// </summary>
        public static int KEYCODE_MEDIA_TOP_MENU { get { if (!_KEYCODE_MEDIA_TOP_MENUReady) { _KEYCODE_MEDIA_TOP_MENUContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MEDIA_TOP_MENU"); _KEYCODE_MEDIA_TOP_MENUReady = true; } return _KEYCODE_MEDIA_TOP_MENUContent; } }
        private static int _KEYCODE_MEDIA_TOP_MENUContent = default;
        private static bool _KEYCODE_MEDIA_TOP_MENUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MENU"/>
        /// </summary>
        public static int KEYCODE_MENU { get { if (!_KEYCODE_MENUReady) { _KEYCODE_MENUContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MENU"); _KEYCODE_MENUReady = true; } return _KEYCODE_MENUContent; } }
        private static int _KEYCODE_MENUContent = default;
        private static bool _KEYCODE_MENUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_META_LEFT"/>
        /// </summary>
        public static int KEYCODE_META_LEFT { get { if (!_KEYCODE_META_LEFTReady) { _KEYCODE_META_LEFTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_META_LEFT"); _KEYCODE_META_LEFTReady = true; } return _KEYCODE_META_LEFTContent; } }
        private static int _KEYCODE_META_LEFTContent = default;
        private static bool _KEYCODE_META_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_META_RIGHT"/>
        /// </summary>
        public static int KEYCODE_META_RIGHT { get { if (!_KEYCODE_META_RIGHTReady) { _KEYCODE_META_RIGHTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_META_RIGHT"); _KEYCODE_META_RIGHTReady = true; } return _KEYCODE_META_RIGHTContent; } }
        private static int _KEYCODE_META_RIGHTContent = default;
        private static bool _KEYCODE_META_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MINUS"/>
        /// </summary>
        public static int KEYCODE_MINUS { get { if (!_KEYCODE_MINUSReady) { _KEYCODE_MINUSContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MINUS"); _KEYCODE_MINUSReady = true; } return _KEYCODE_MINUSContent; } }
        private static int _KEYCODE_MINUSContent = default;
        private static bool _KEYCODE_MINUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MOVE_END"/>
        /// </summary>
        public static int KEYCODE_MOVE_END { get { if (!_KEYCODE_MOVE_ENDReady) { _KEYCODE_MOVE_ENDContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MOVE_END"); _KEYCODE_MOVE_ENDReady = true; } return _KEYCODE_MOVE_ENDContent; } }
        private static int _KEYCODE_MOVE_ENDContent = default;
        private static bool _KEYCODE_MOVE_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MOVE_HOME"/>
        /// </summary>
        public static int KEYCODE_MOVE_HOME { get { if (!_KEYCODE_MOVE_HOMEReady) { _KEYCODE_MOVE_HOMEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MOVE_HOME"); _KEYCODE_MOVE_HOMEReady = true; } return _KEYCODE_MOVE_HOMEContent; } }
        private static int _KEYCODE_MOVE_HOMEContent = default;
        private static bool _KEYCODE_MOVE_HOMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MUHENKAN"/>
        /// </summary>
        public static int KEYCODE_MUHENKAN { get { if (!_KEYCODE_MUHENKANReady) { _KEYCODE_MUHENKANContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MUHENKAN"); _KEYCODE_MUHENKANReady = true; } return _KEYCODE_MUHENKANContent; } }
        private static int _KEYCODE_MUHENKANContent = default;
        private static bool _KEYCODE_MUHENKANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MUSIC"/>
        /// </summary>
        public static int KEYCODE_MUSIC { get { if (!_KEYCODE_MUSICReady) { _KEYCODE_MUSICContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MUSIC"); _KEYCODE_MUSICReady = true; } return _KEYCODE_MUSICContent; } }
        private static int _KEYCODE_MUSICContent = default;
        private static bool _KEYCODE_MUSICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_MUTE"/>
        /// </summary>
        public static int KEYCODE_MUTE { get { if (!_KEYCODE_MUTEReady) { _KEYCODE_MUTEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_MUTE"); _KEYCODE_MUTEReady = true; } return _KEYCODE_MUTEContent; } }
        private static int _KEYCODE_MUTEContent = default;
        private static bool _KEYCODE_MUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_N"/>
        /// </summary>
        public static int KEYCODE_N { get { if (!_KEYCODE_NReady) { _KEYCODE_NContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_N"); _KEYCODE_NReady = true; } return _KEYCODE_NContent; } }
        private static int _KEYCODE_NContent = default;
        private static bool _KEYCODE_NReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NAVIGATE_IN"/>
        /// </summary>
        public static int KEYCODE_NAVIGATE_IN { get { if (!_KEYCODE_NAVIGATE_INReady) { _KEYCODE_NAVIGATE_INContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NAVIGATE_IN"); _KEYCODE_NAVIGATE_INReady = true; } return _KEYCODE_NAVIGATE_INContent; } }
        private static int _KEYCODE_NAVIGATE_INContent = default;
        private static bool _KEYCODE_NAVIGATE_INReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NAVIGATE_NEXT"/>
        /// </summary>
        public static int KEYCODE_NAVIGATE_NEXT { get { if (!_KEYCODE_NAVIGATE_NEXTReady) { _KEYCODE_NAVIGATE_NEXTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NAVIGATE_NEXT"); _KEYCODE_NAVIGATE_NEXTReady = true; } return _KEYCODE_NAVIGATE_NEXTContent; } }
        private static int _KEYCODE_NAVIGATE_NEXTContent = default;
        private static bool _KEYCODE_NAVIGATE_NEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NAVIGATE_OUT"/>
        /// </summary>
        public static int KEYCODE_NAVIGATE_OUT { get { if (!_KEYCODE_NAVIGATE_OUTReady) { _KEYCODE_NAVIGATE_OUTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NAVIGATE_OUT"); _KEYCODE_NAVIGATE_OUTReady = true; } return _KEYCODE_NAVIGATE_OUTContent; } }
        private static int _KEYCODE_NAVIGATE_OUTContent = default;
        private static bool _KEYCODE_NAVIGATE_OUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NAVIGATE_PREVIOUS"/>
        /// </summary>
        public static int KEYCODE_NAVIGATE_PREVIOUS { get { if (!_KEYCODE_NAVIGATE_PREVIOUSReady) { _KEYCODE_NAVIGATE_PREVIOUSContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NAVIGATE_PREVIOUS"); _KEYCODE_NAVIGATE_PREVIOUSReady = true; } return _KEYCODE_NAVIGATE_PREVIOUSContent; } }
        private static int _KEYCODE_NAVIGATE_PREVIOUSContent = default;
        private static bool _KEYCODE_NAVIGATE_PREVIOUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NOTIFICATION"/>
        /// </summary>
        public static int KEYCODE_NOTIFICATION { get { if (!_KEYCODE_NOTIFICATIONReady) { _KEYCODE_NOTIFICATIONContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NOTIFICATION"); _KEYCODE_NOTIFICATIONReady = true; } return _KEYCODE_NOTIFICATIONContent; } }
        private static int _KEYCODE_NOTIFICATIONContent = default;
        private static bool _KEYCODE_NOTIFICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUM"/>
        /// </summary>
        public static int KEYCODE_NUM { get { if (!_KEYCODE_NUMReady) { _KEYCODE_NUMContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUM"); _KEYCODE_NUMReady = true; } return _KEYCODE_NUMContent; } }
        private static int _KEYCODE_NUMContent = default;
        private static bool _KEYCODE_NUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUM_LOCK"/>
        /// </summary>
        public static int KEYCODE_NUM_LOCK { get { if (!_KEYCODE_NUM_LOCKReady) { _KEYCODE_NUM_LOCKContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUM_LOCK"); _KEYCODE_NUM_LOCKReady = true; } return _KEYCODE_NUM_LOCKContent; } }
        private static int _KEYCODE_NUM_LOCKContent = default;
        private static bool _KEYCODE_NUM_LOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_0"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_0 { get { if (!_KEYCODE_NUMPAD_0Ready) { _KEYCODE_NUMPAD_0Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_0"); _KEYCODE_NUMPAD_0Ready = true; } return _KEYCODE_NUMPAD_0Content; } }
        private static int _KEYCODE_NUMPAD_0Content = default;
        private static bool _KEYCODE_NUMPAD_0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_1"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_1 { get { if (!_KEYCODE_NUMPAD_1Ready) { _KEYCODE_NUMPAD_1Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_1"); _KEYCODE_NUMPAD_1Ready = true; } return _KEYCODE_NUMPAD_1Content; } }
        private static int _KEYCODE_NUMPAD_1Content = default;
        private static bool _KEYCODE_NUMPAD_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_2"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_2 { get { if (!_KEYCODE_NUMPAD_2Ready) { _KEYCODE_NUMPAD_2Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_2"); _KEYCODE_NUMPAD_2Ready = true; } return _KEYCODE_NUMPAD_2Content; } }
        private static int _KEYCODE_NUMPAD_2Content = default;
        private static bool _KEYCODE_NUMPAD_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_3"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_3 { get { if (!_KEYCODE_NUMPAD_3Ready) { _KEYCODE_NUMPAD_3Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_3"); _KEYCODE_NUMPAD_3Ready = true; } return _KEYCODE_NUMPAD_3Content; } }
        private static int _KEYCODE_NUMPAD_3Content = default;
        private static bool _KEYCODE_NUMPAD_3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_4"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_4 { get { if (!_KEYCODE_NUMPAD_4Ready) { _KEYCODE_NUMPAD_4Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_4"); _KEYCODE_NUMPAD_4Ready = true; } return _KEYCODE_NUMPAD_4Content; } }
        private static int _KEYCODE_NUMPAD_4Content = default;
        private static bool _KEYCODE_NUMPAD_4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_5"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_5 { get { if (!_KEYCODE_NUMPAD_5Ready) { _KEYCODE_NUMPAD_5Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_5"); _KEYCODE_NUMPAD_5Ready = true; } return _KEYCODE_NUMPAD_5Content; } }
        private static int _KEYCODE_NUMPAD_5Content = default;
        private static bool _KEYCODE_NUMPAD_5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_6"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_6 { get { if (!_KEYCODE_NUMPAD_6Ready) { _KEYCODE_NUMPAD_6Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_6"); _KEYCODE_NUMPAD_6Ready = true; } return _KEYCODE_NUMPAD_6Content; } }
        private static int _KEYCODE_NUMPAD_6Content = default;
        private static bool _KEYCODE_NUMPAD_6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_7"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_7 { get { if (!_KEYCODE_NUMPAD_7Ready) { _KEYCODE_NUMPAD_7Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_7"); _KEYCODE_NUMPAD_7Ready = true; } return _KEYCODE_NUMPAD_7Content; } }
        private static int _KEYCODE_NUMPAD_7Content = default;
        private static bool _KEYCODE_NUMPAD_7Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_8"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_8 { get { if (!_KEYCODE_NUMPAD_8Ready) { _KEYCODE_NUMPAD_8Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_8"); _KEYCODE_NUMPAD_8Ready = true; } return _KEYCODE_NUMPAD_8Content; } }
        private static int _KEYCODE_NUMPAD_8Content = default;
        private static bool _KEYCODE_NUMPAD_8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_9"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_9 { get { if (!_KEYCODE_NUMPAD_9Ready) { _KEYCODE_NUMPAD_9Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_9"); _KEYCODE_NUMPAD_9Ready = true; } return _KEYCODE_NUMPAD_9Content; } }
        private static int _KEYCODE_NUMPAD_9Content = default;
        private static bool _KEYCODE_NUMPAD_9Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_ADD"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_ADD { get { if (!_KEYCODE_NUMPAD_ADDReady) { _KEYCODE_NUMPAD_ADDContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_ADD"); _KEYCODE_NUMPAD_ADDReady = true; } return _KEYCODE_NUMPAD_ADDContent; } }
        private static int _KEYCODE_NUMPAD_ADDContent = default;
        private static bool _KEYCODE_NUMPAD_ADDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_COMMA"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_COMMA { get { if (!_KEYCODE_NUMPAD_COMMAReady) { _KEYCODE_NUMPAD_COMMAContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_COMMA"); _KEYCODE_NUMPAD_COMMAReady = true; } return _KEYCODE_NUMPAD_COMMAContent; } }
        private static int _KEYCODE_NUMPAD_COMMAContent = default;
        private static bool _KEYCODE_NUMPAD_COMMAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_DIVIDE"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_DIVIDE { get { if (!_KEYCODE_NUMPAD_DIVIDEReady) { _KEYCODE_NUMPAD_DIVIDEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_DIVIDE"); _KEYCODE_NUMPAD_DIVIDEReady = true; } return _KEYCODE_NUMPAD_DIVIDEContent; } }
        private static int _KEYCODE_NUMPAD_DIVIDEContent = default;
        private static bool _KEYCODE_NUMPAD_DIVIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_DOT"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_DOT { get { if (!_KEYCODE_NUMPAD_DOTReady) { _KEYCODE_NUMPAD_DOTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_DOT"); _KEYCODE_NUMPAD_DOTReady = true; } return _KEYCODE_NUMPAD_DOTContent; } }
        private static int _KEYCODE_NUMPAD_DOTContent = default;
        private static bool _KEYCODE_NUMPAD_DOTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_ENTER"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_ENTER { get { if (!_KEYCODE_NUMPAD_ENTERReady) { _KEYCODE_NUMPAD_ENTERContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_ENTER"); _KEYCODE_NUMPAD_ENTERReady = true; } return _KEYCODE_NUMPAD_ENTERContent; } }
        private static int _KEYCODE_NUMPAD_ENTERContent = default;
        private static bool _KEYCODE_NUMPAD_ENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_EQUALS"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_EQUALS { get { if (!_KEYCODE_NUMPAD_EQUALSReady) { _KEYCODE_NUMPAD_EQUALSContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_EQUALS"); _KEYCODE_NUMPAD_EQUALSReady = true; } return _KEYCODE_NUMPAD_EQUALSContent; } }
        private static int _KEYCODE_NUMPAD_EQUALSContent = default;
        private static bool _KEYCODE_NUMPAD_EQUALSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_LEFT_PAREN"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_LEFT_PAREN { get { if (!_KEYCODE_NUMPAD_LEFT_PARENReady) { _KEYCODE_NUMPAD_LEFT_PARENContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_LEFT_PAREN"); _KEYCODE_NUMPAD_LEFT_PARENReady = true; } return _KEYCODE_NUMPAD_LEFT_PARENContent; } }
        private static int _KEYCODE_NUMPAD_LEFT_PARENContent = default;
        private static bool _KEYCODE_NUMPAD_LEFT_PARENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_MULTIPLY"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_MULTIPLY { get { if (!_KEYCODE_NUMPAD_MULTIPLYReady) { _KEYCODE_NUMPAD_MULTIPLYContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_MULTIPLY"); _KEYCODE_NUMPAD_MULTIPLYReady = true; } return _KEYCODE_NUMPAD_MULTIPLYContent; } }
        private static int _KEYCODE_NUMPAD_MULTIPLYContent = default;
        private static bool _KEYCODE_NUMPAD_MULTIPLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_RIGHT_PAREN"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_RIGHT_PAREN { get { if (!_KEYCODE_NUMPAD_RIGHT_PARENReady) { _KEYCODE_NUMPAD_RIGHT_PARENContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_RIGHT_PAREN"); _KEYCODE_NUMPAD_RIGHT_PARENReady = true; } return _KEYCODE_NUMPAD_RIGHT_PARENContent; } }
        private static int _KEYCODE_NUMPAD_RIGHT_PARENContent = default;
        private static bool _KEYCODE_NUMPAD_RIGHT_PARENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_NUMPAD_SUBTRACT"/>
        /// </summary>
        public static int KEYCODE_NUMPAD_SUBTRACT { get { if (!_KEYCODE_NUMPAD_SUBTRACTReady) { _KEYCODE_NUMPAD_SUBTRACTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_NUMPAD_SUBTRACT"); _KEYCODE_NUMPAD_SUBTRACTReady = true; } return _KEYCODE_NUMPAD_SUBTRACTContent; } }
        private static int _KEYCODE_NUMPAD_SUBTRACTContent = default;
        private static bool _KEYCODE_NUMPAD_SUBTRACTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_O"/>
        /// </summary>
        public static int KEYCODE_O { get { if (!_KEYCODE_OReady) { _KEYCODE_OContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_O"); _KEYCODE_OReady = true; } return _KEYCODE_OContent; } }
        private static int _KEYCODE_OContent = default;
        private static bool _KEYCODE_OReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_P"/>
        /// </summary>
        public static int KEYCODE_P { get { if (!_KEYCODE_PReady) { _KEYCODE_PContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_P"); _KEYCODE_PReady = true; } return _KEYCODE_PContent; } }
        private static int _KEYCODE_PContent = default;
        private static bool _KEYCODE_PReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_PAGE_DOWN"/>
        /// </summary>
        public static int KEYCODE_PAGE_DOWN { get { if (!_KEYCODE_PAGE_DOWNReady) { _KEYCODE_PAGE_DOWNContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_PAGE_DOWN"); _KEYCODE_PAGE_DOWNReady = true; } return _KEYCODE_PAGE_DOWNContent; } }
        private static int _KEYCODE_PAGE_DOWNContent = default;
        private static bool _KEYCODE_PAGE_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_PAGE_UP"/>
        /// </summary>
        public static int KEYCODE_PAGE_UP { get { if (!_KEYCODE_PAGE_UPReady) { _KEYCODE_PAGE_UPContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_PAGE_UP"); _KEYCODE_PAGE_UPReady = true; } return _KEYCODE_PAGE_UPContent; } }
        private static int _KEYCODE_PAGE_UPContent = default;
        private static bool _KEYCODE_PAGE_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_PAIRING"/>
        /// </summary>
        public static int KEYCODE_PAIRING { get { if (!_KEYCODE_PAIRINGReady) { _KEYCODE_PAIRINGContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_PAIRING"); _KEYCODE_PAIRINGReady = true; } return _KEYCODE_PAIRINGContent; } }
        private static int _KEYCODE_PAIRINGContent = default;
        private static bool _KEYCODE_PAIRINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_PASTE"/>
        /// </summary>
        public static int KEYCODE_PASTE { get { if (!_KEYCODE_PASTEReady) { _KEYCODE_PASTEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_PASTE"); _KEYCODE_PASTEReady = true; } return _KEYCODE_PASTEContent; } }
        private static int _KEYCODE_PASTEContent = default;
        private static bool _KEYCODE_PASTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_PERIOD"/>
        /// </summary>
        public static int KEYCODE_PERIOD { get { if (!_KEYCODE_PERIODReady) { _KEYCODE_PERIODContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_PERIOD"); _KEYCODE_PERIODReady = true; } return _KEYCODE_PERIODContent; } }
        private static int _KEYCODE_PERIODContent = default;
        private static bool _KEYCODE_PERIODReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_PICTSYMBOLS"/>
        /// </summary>
        public static int KEYCODE_PICTSYMBOLS { get { if (!_KEYCODE_PICTSYMBOLSReady) { _KEYCODE_PICTSYMBOLSContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_PICTSYMBOLS"); _KEYCODE_PICTSYMBOLSReady = true; } return _KEYCODE_PICTSYMBOLSContent; } }
        private static int _KEYCODE_PICTSYMBOLSContent = default;
        private static bool _KEYCODE_PICTSYMBOLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_PLUS"/>
        /// </summary>
        public static int KEYCODE_PLUS { get { if (!_KEYCODE_PLUSReady) { _KEYCODE_PLUSContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_PLUS"); _KEYCODE_PLUSReady = true; } return _KEYCODE_PLUSContent; } }
        private static int _KEYCODE_PLUSContent = default;
        private static bool _KEYCODE_PLUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_POUND"/>
        /// </summary>
        public static int KEYCODE_POUND { get { if (!_KEYCODE_POUNDReady) { _KEYCODE_POUNDContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_POUND"); _KEYCODE_POUNDReady = true; } return _KEYCODE_POUNDContent; } }
        private static int _KEYCODE_POUNDContent = default;
        private static bool _KEYCODE_POUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_POWER"/>
        /// </summary>
        public static int KEYCODE_POWER { get { if (!_KEYCODE_POWERReady) { _KEYCODE_POWERContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_POWER"); _KEYCODE_POWERReady = true; } return _KEYCODE_POWERContent; } }
        private static int _KEYCODE_POWERContent = default;
        private static bool _KEYCODE_POWERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_PROFILE_SWITCH"/>
        /// </summary>
        public static int KEYCODE_PROFILE_SWITCH { get { if (!_KEYCODE_PROFILE_SWITCHReady) { _KEYCODE_PROFILE_SWITCHContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_PROFILE_SWITCH"); _KEYCODE_PROFILE_SWITCHReady = true; } return _KEYCODE_PROFILE_SWITCHContent; } }
        private static int _KEYCODE_PROFILE_SWITCHContent = default;
        private static bool _KEYCODE_PROFILE_SWITCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_PROG_BLUE"/>
        /// </summary>
        public static int KEYCODE_PROG_BLUE { get { if (!_KEYCODE_PROG_BLUEReady) { _KEYCODE_PROG_BLUEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_PROG_BLUE"); _KEYCODE_PROG_BLUEReady = true; } return _KEYCODE_PROG_BLUEContent; } }
        private static int _KEYCODE_PROG_BLUEContent = default;
        private static bool _KEYCODE_PROG_BLUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_PROG_GREEN"/>
        /// </summary>
        public static int KEYCODE_PROG_GREEN { get { if (!_KEYCODE_PROG_GREENReady) { _KEYCODE_PROG_GREENContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_PROG_GREEN"); _KEYCODE_PROG_GREENReady = true; } return _KEYCODE_PROG_GREENContent; } }
        private static int _KEYCODE_PROG_GREENContent = default;
        private static bool _KEYCODE_PROG_GREENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_PROG_RED"/>
        /// </summary>
        public static int KEYCODE_PROG_RED { get { if (!_KEYCODE_PROG_REDReady) { _KEYCODE_PROG_REDContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_PROG_RED"); _KEYCODE_PROG_REDReady = true; } return _KEYCODE_PROG_REDContent; } }
        private static int _KEYCODE_PROG_REDContent = default;
        private static bool _KEYCODE_PROG_REDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_PROG_YELLOW"/>
        /// </summary>
        public static int KEYCODE_PROG_YELLOW { get { if (!_KEYCODE_PROG_YELLOWReady) { _KEYCODE_PROG_YELLOWContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_PROG_YELLOW"); _KEYCODE_PROG_YELLOWReady = true; } return _KEYCODE_PROG_YELLOWContent; } }
        private static int _KEYCODE_PROG_YELLOWContent = default;
        private static bool _KEYCODE_PROG_YELLOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_Q"/>
        /// </summary>
        public static int KEYCODE_Q { get { if (!_KEYCODE_QReady) { _KEYCODE_QContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_Q"); _KEYCODE_QReady = true; } return _KEYCODE_QContent; } }
        private static int _KEYCODE_QContent = default;
        private static bool _KEYCODE_QReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_R"/>
        /// </summary>
        public static int KEYCODE_R { get { if (!_KEYCODE_RReady) { _KEYCODE_RContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_R"); _KEYCODE_RReady = true; } return _KEYCODE_RContent; } }
        private static int _KEYCODE_RContent = default;
        private static bool _KEYCODE_RReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_RECENT_APPS"/>
        /// </summary>
        public static int KEYCODE_RECENT_APPS { get { if (!_KEYCODE_RECENT_APPSReady) { _KEYCODE_RECENT_APPSContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_RECENT_APPS"); _KEYCODE_RECENT_APPSReady = true; } return _KEYCODE_RECENT_APPSContent; } }
        private static int _KEYCODE_RECENT_APPSContent = default;
        private static bool _KEYCODE_RECENT_APPSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_REFRESH"/>
        /// </summary>
        public static int KEYCODE_REFRESH { get { if (!_KEYCODE_REFRESHReady) { _KEYCODE_REFRESHContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_REFRESH"); _KEYCODE_REFRESHReady = true; } return _KEYCODE_REFRESHContent; } }
        private static int _KEYCODE_REFRESHContent = default;
        private static bool _KEYCODE_REFRESHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_RIGHT_BRACKET"/>
        /// </summary>
        public static int KEYCODE_RIGHT_BRACKET { get { if (!_KEYCODE_RIGHT_BRACKETReady) { _KEYCODE_RIGHT_BRACKETContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_RIGHT_BRACKET"); _KEYCODE_RIGHT_BRACKETReady = true; } return _KEYCODE_RIGHT_BRACKETContent; } }
        private static int _KEYCODE_RIGHT_BRACKETContent = default;
        private static bool _KEYCODE_RIGHT_BRACKETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_RO"/>
        /// </summary>
        public static int KEYCODE_RO { get { if (!_KEYCODE_ROReady) { _KEYCODE_ROContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_RO"); _KEYCODE_ROReady = true; } return _KEYCODE_ROContent; } }
        private static int _KEYCODE_ROContent = default;
        private static bool _KEYCODE_ROReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_S"/>
        /// </summary>
        public static int KEYCODE_S { get { if (!_KEYCODE_SReady) { _KEYCODE_SContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_S"); _KEYCODE_SReady = true; } return _KEYCODE_SContent; } }
        private static int _KEYCODE_SContent = default;
        private static bool _KEYCODE_SReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SCREENSHOT"/>
        /// </summary>
        public static int KEYCODE_SCREENSHOT { get { if (!_KEYCODE_SCREENSHOTReady) { _KEYCODE_SCREENSHOTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SCREENSHOT"); _KEYCODE_SCREENSHOTReady = true; } return _KEYCODE_SCREENSHOTContent; } }
        private static int _KEYCODE_SCREENSHOTContent = default;
        private static bool _KEYCODE_SCREENSHOTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SCROLL_LOCK"/>
        /// </summary>
        public static int KEYCODE_SCROLL_LOCK { get { if (!_KEYCODE_SCROLL_LOCKReady) { _KEYCODE_SCROLL_LOCKContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SCROLL_LOCK"); _KEYCODE_SCROLL_LOCKReady = true; } return _KEYCODE_SCROLL_LOCKContent; } }
        private static int _KEYCODE_SCROLL_LOCKContent = default;
        private static bool _KEYCODE_SCROLL_LOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SEARCH"/>
        /// </summary>
        public static int KEYCODE_SEARCH { get { if (!_KEYCODE_SEARCHReady) { _KEYCODE_SEARCHContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SEARCH"); _KEYCODE_SEARCHReady = true; } return _KEYCODE_SEARCHContent; } }
        private static int _KEYCODE_SEARCHContent = default;
        private static bool _KEYCODE_SEARCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SEMICOLON"/>
        /// </summary>
        public static int KEYCODE_SEMICOLON { get { if (!_KEYCODE_SEMICOLONReady) { _KEYCODE_SEMICOLONContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SEMICOLON"); _KEYCODE_SEMICOLONReady = true; } return _KEYCODE_SEMICOLONContent; } }
        private static int _KEYCODE_SEMICOLONContent = default;
        private static bool _KEYCODE_SEMICOLONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SETTINGS"/>
        /// </summary>
        public static int KEYCODE_SETTINGS { get { if (!_KEYCODE_SETTINGSReady) { _KEYCODE_SETTINGSContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SETTINGS"); _KEYCODE_SETTINGSReady = true; } return _KEYCODE_SETTINGSContent; } }
        private static int _KEYCODE_SETTINGSContent = default;
        private static bool _KEYCODE_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SHIFT_LEFT"/>
        /// </summary>
        public static int KEYCODE_SHIFT_LEFT { get { if (!_KEYCODE_SHIFT_LEFTReady) { _KEYCODE_SHIFT_LEFTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SHIFT_LEFT"); _KEYCODE_SHIFT_LEFTReady = true; } return _KEYCODE_SHIFT_LEFTContent; } }
        private static int _KEYCODE_SHIFT_LEFTContent = default;
        private static bool _KEYCODE_SHIFT_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SHIFT_RIGHT"/>
        /// </summary>
        public static int KEYCODE_SHIFT_RIGHT { get { if (!_KEYCODE_SHIFT_RIGHTReady) { _KEYCODE_SHIFT_RIGHTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SHIFT_RIGHT"); _KEYCODE_SHIFT_RIGHTReady = true; } return _KEYCODE_SHIFT_RIGHTContent; } }
        private static int _KEYCODE_SHIFT_RIGHTContent = default;
        private static bool _KEYCODE_SHIFT_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SLASH"/>
        /// </summary>
        public static int KEYCODE_SLASH { get { if (!_KEYCODE_SLASHReady) { _KEYCODE_SLASHContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SLASH"); _KEYCODE_SLASHReady = true; } return _KEYCODE_SLASHContent; } }
        private static int _KEYCODE_SLASHContent = default;
        private static bool _KEYCODE_SLASHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SLEEP"/>
        /// </summary>
        public static int KEYCODE_SLEEP { get { if (!_KEYCODE_SLEEPReady) { _KEYCODE_SLEEPContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SLEEP"); _KEYCODE_SLEEPReady = true; } return _KEYCODE_SLEEPContent; } }
        private static int _KEYCODE_SLEEPContent = default;
        private static bool _KEYCODE_SLEEPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SOFT_LEFT"/>
        /// </summary>
        public static int KEYCODE_SOFT_LEFT { get { if (!_KEYCODE_SOFT_LEFTReady) { _KEYCODE_SOFT_LEFTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SOFT_LEFT"); _KEYCODE_SOFT_LEFTReady = true; } return _KEYCODE_SOFT_LEFTContent; } }
        private static int _KEYCODE_SOFT_LEFTContent = default;
        private static bool _KEYCODE_SOFT_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SOFT_RIGHT"/>
        /// </summary>
        public static int KEYCODE_SOFT_RIGHT { get { if (!_KEYCODE_SOFT_RIGHTReady) { _KEYCODE_SOFT_RIGHTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SOFT_RIGHT"); _KEYCODE_SOFT_RIGHTReady = true; } return _KEYCODE_SOFT_RIGHTContent; } }
        private static int _KEYCODE_SOFT_RIGHTContent = default;
        private static bool _KEYCODE_SOFT_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SOFT_SLEEP"/>
        /// </summary>
        public static int KEYCODE_SOFT_SLEEP { get { if (!_KEYCODE_SOFT_SLEEPReady) { _KEYCODE_SOFT_SLEEPContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SOFT_SLEEP"); _KEYCODE_SOFT_SLEEPReady = true; } return _KEYCODE_SOFT_SLEEPContent; } }
        private static int _KEYCODE_SOFT_SLEEPContent = default;
        private static bool _KEYCODE_SOFT_SLEEPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SPACE"/>
        /// </summary>
        public static int KEYCODE_SPACE { get { if (!_KEYCODE_SPACEReady) { _KEYCODE_SPACEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SPACE"); _KEYCODE_SPACEReady = true; } return _KEYCODE_SPACEContent; } }
        private static int _KEYCODE_SPACEContent = default;
        private static bool _KEYCODE_SPACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_STAR"/>
        /// </summary>
        public static int KEYCODE_STAR { get { if (!_KEYCODE_STARReady) { _KEYCODE_STARContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_STAR"); _KEYCODE_STARReady = true; } return _KEYCODE_STARContent; } }
        private static int _KEYCODE_STARContent = default;
        private static bool _KEYCODE_STARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_STB_INPUT"/>
        /// </summary>
        public static int KEYCODE_STB_INPUT { get { if (!_KEYCODE_STB_INPUTReady) { _KEYCODE_STB_INPUTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_STB_INPUT"); _KEYCODE_STB_INPUTReady = true; } return _KEYCODE_STB_INPUTContent; } }
        private static int _KEYCODE_STB_INPUTContent = default;
        private static bool _KEYCODE_STB_INPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_STB_POWER"/>
        /// </summary>
        public static int KEYCODE_STB_POWER { get { if (!_KEYCODE_STB_POWERReady) { _KEYCODE_STB_POWERContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_STB_POWER"); _KEYCODE_STB_POWERReady = true; } return _KEYCODE_STB_POWERContent; } }
        private static int _KEYCODE_STB_POWERContent = default;
        private static bool _KEYCODE_STB_POWERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_STEM_1"/>
        /// </summary>
        public static int KEYCODE_STEM_1 { get { if (!_KEYCODE_STEM_1Ready) { _KEYCODE_STEM_1Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_STEM_1"); _KEYCODE_STEM_1Ready = true; } return _KEYCODE_STEM_1Content; } }
        private static int _KEYCODE_STEM_1Content = default;
        private static bool _KEYCODE_STEM_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_STEM_2"/>
        /// </summary>
        public static int KEYCODE_STEM_2 { get { if (!_KEYCODE_STEM_2Ready) { _KEYCODE_STEM_2Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_STEM_2"); _KEYCODE_STEM_2Ready = true; } return _KEYCODE_STEM_2Content; } }
        private static int _KEYCODE_STEM_2Content = default;
        private static bool _KEYCODE_STEM_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_STEM_3"/>
        /// </summary>
        public static int KEYCODE_STEM_3 { get { if (!_KEYCODE_STEM_3Ready) { _KEYCODE_STEM_3Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_STEM_3"); _KEYCODE_STEM_3Ready = true; } return _KEYCODE_STEM_3Content; } }
        private static int _KEYCODE_STEM_3Content = default;
        private static bool _KEYCODE_STEM_3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_STEM_PRIMARY"/>
        /// </summary>
        public static int KEYCODE_STEM_PRIMARY { get { if (!_KEYCODE_STEM_PRIMARYReady) { _KEYCODE_STEM_PRIMARYContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_STEM_PRIMARY"); _KEYCODE_STEM_PRIMARYReady = true; } return _KEYCODE_STEM_PRIMARYContent; } }
        private static int _KEYCODE_STEM_PRIMARYContent = default;
        private static bool _KEYCODE_STEM_PRIMARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_STYLUS_BUTTON_PRIMARY"/>
        /// </summary>
        public static int KEYCODE_STYLUS_BUTTON_PRIMARY { get { if (!_KEYCODE_STYLUS_BUTTON_PRIMARYReady) { _KEYCODE_STYLUS_BUTTON_PRIMARYContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_STYLUS_BUTTON_PRIMARY"); _KEYCODE_STYLUS_BUTTON_PRIMARYReady = true; } return _KEYCODE_STYLUS_BUTTON_PRIMARYContent; } }
        private static int _KEYCODE_STYLUS_BUTTON_PRIMARYContent = default;
        private static bool _KEYCODE_STYLUS_BUTTON_PRIMARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_STYLUS_BUTTON_SECONDARY"/>
        /// </summary>
        public static int KEYCODE_STYLUS_BUTTON_SECONDARY { get { if (!_KEYCODE_STYLUS_BUTTON_SECONDARYReady) { _KEYCODE_STYLUS_BUTTON_SECONDARYContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_STYLUS_BUTTON_SECONDARY"); _KEYCODE_STYLUS_BUTTON_SECONDARYReady = true; } return _KEYCODE_STYLUS_BUTTON_SECONDARYContent; } }
        private static int _KEYCODE_STYLUS_BUTTON_SECONDARYContent = default;
        private static bool _KEYCODE_STYLUS_BUTTON_SECONDARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_STYLUS_BUTTON_TAIL"/>
        /// </summary>
        public static int KEYCODE_STYLUS_BUTTON_TAIL { get { if (!_KEYCODE_STYLUS_BUTTON_TAILReady) { _KEYCODE_STYLUS_BUTTON_TAILContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_STYLUS_BUTTON_TAIL"); _KEYCODE_STYLUS_BUTTON_TAILReady = true; } return _KEYCODE_STYLUS_BUTTON_TAILContent; } }
        private static int _KEYCODE_STYLUS_BUTTON_TAILContent = default;
        private static bool _KEYCODE_STYLUS_BUTTON_TAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_STYLUS_BUTTON_TERTIARY"/>
        /// </summary>
        public static int KEYCODE_STYLUS_BUTTON_TERTIARY { get { if (!_KEYCODE_STYLUS_BUTTON_TERTIARYReady) { _KEYCODE_STYLUS_BUTTON_TERTIARYContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_STYLUS_BUTTON_TERTIARY"); _KEYCODE_STYLUS_BUTTON_TERTIARYReady = true; } return _KEYCODE_STYLUS_BUTTON_TERTIARYContent; } }
        private static int _KEYCODE_STYLUS_BUTTON_TERTIARYContent = default;
        private static bool _KEYCODE_STYLUS_BUTTON_TERTIARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SWITCH_CHARSET"/>
        /// </summary>
        public static int KEYCODE_SWITCH_CHARSET { get { if (!_KEYCODE_SWITCH_CHARSETReady) { _KEYCODE_SWITCH_CHARSETContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SWITCH_CHARSET"); _KEYCODE_SWITCH_CHARSETReady = true; } return _KEYCODE_SWITCH_CHARSETContent; } }
        private static int _KEYCODE_SWITCH_CHARSETContent = default;
        private static bool _KEYCODE_SWITCH_CHARSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SYM"/>
        /// </summary>
        public static int KEYCODE_SYM { get { if (!_KEYCODE_SYMReady) { _KEYCODE_SYMContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SYM"); _KEYCODE_SYMReady = true; } return _KEYCODE_SYMContent; } }
        private static int _KEYCODE_SYMContent = default;
        private static bool _KEYCODE_SYMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SYSRQ"/>
        /// </summary>
        public static int KEYCODE_SYSRQ { get { if (!_KEYCODE_SYSRQReady) { _KEYCODE_SYSRQContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SYSRQ"); _KEYCODE_SYSRQReady = true; } return _KEYCODE_SYSRQContent; } }
        private static int _KEYCODE_SYSRQContent = default;
        private static bool _KEYCODE_SYSRQReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SYSTEM_NAVIGATION_DOWN"/>
        /// </summary>
        public static int KEYCODE_SYSTEM_NAVIGATION_DOWN { get { if (!_KEYCODE_SYSTEM_NAVIGATION_DOWNReady) { _KEYCODE_SYSTEM_NAVIGATION_DOWNContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SYSTEM_NAVIGATION_DOWN"); _KEYCODE_SYSTEM_NAVIGATION_DOWNReady = true; } return _KEYCODE_SYSTEM_NAVIGATION_DOWNContent; } }
        private static int _KEYCODE_SYSTEM_NAVIGATION_DOWNContent = default;
        private static bool _KEYCODE_SYSTEM_NAVIGATION_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SYSTEM_NAVIGATION_LEFT"/>
        /// </summary>
        public static int KEYCODE_SYSTEM_NAVIGATION_LEFT { get { if (!_KEYCODE_SYSTEM_NAVIGATION_LEFTReady) { _KEYCODE_SYSTEM_NAVIGATION_LEFTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SYSTEM_NAVIGATION_LEFT"); _KEYCODE_SYSTEM_NAVIGATION_LEFTReady = true; } return _KEYCODE_SYSTEM_NAVIGATION_LEFTContent; } }
        private static int _KEYCODE_SYSTEM_NAVIGATION_LEFTContent = default;
        private static bool _KEYCODE_SYSTEM_NAVIGATION_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SYSTEM_NAVIGATION_RIGHT"/>
        /// </summary>
        public static int KEYCODE_SYSTEM_NAVIGATION_RIGHT { get { if (!_KEYCODE_SYSTEM_NAVIGATION_RIGHTReady) { _KEYCODE_SYSTEM_NAVIGATION_RIGHTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SYSTEM_NAVIGATION_RIGHT"); _KEYCODE_SYSTEM_NAVIGATION_RIGHTReady = true; } return _KEYCODE_SYSTEM_NAVIGATION_RIGHTContent; } }
        private static int _KEYCODE_SYSTEM_NAVIGATION_RIGHTContent = default;
        private static bool _KEYCODE_SYSTEM_NAVIGATION_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_SYSTEM_NAVIGATION_UP"/>
        /// </summary>
        public static int KEYCODE_SYSTEM_NAVIGATION_UP { get { if (!_KEYCODE_SYSTEM_NAVIGATION_UPReady) { _KEYCODE_SYSTEM_NAVIGATION_UPContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_SYSTEM_NAVIGATION_UP"); _KEYCODE_SYSTEM_NAVIGATION_UPReady = true; } return _KEYCODE_SYSTEM_NAVIGATION_UPContent; } }
        private static int _KEYCODE_SYSTEM_NAVIGATION_UPContent = default;
        private static bool _KEYCODE_SYSTEM_NAVIGATION_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_T"/>
        /// </summary>
        public static int KEYCODE_T { get { if (!_KEYCODE_TReady) { _KEYCODE_TContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_T"); _KEYCODE_TReady = true; } return _KEYCODE_TContent; } }
        private static int _KEYCODE_TContent = default;
        private static bool _KEYCODE_TReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TAB"/>
        /// </summary>
        public static int KEYCODE_TAB { get { if (!_KEYCODE_TABReady) { _KEYCODE_TABContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TAB"); _KEYCODE_TABReady = true; } return _KEYCODE_TABContent; } }
        private static int _KEYCODE_TABContent = default;
        private static bool _KEYCODE_TABReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_THUMBS_DOWN"/>
        /// </summary>
        public static int KEYCODE_THUMBS_DOWN { get { if (!_KEYCODE_THUMBS_DOWNReady) { _KEYCODE_THUMBS_DOWNContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_THUMBS_DOWN"); _KEYCODE_THUMBS_DOWNReady = true; } return _KEYCODE_THUMBS_DOWNContent; } }
        private static int _KEYCODE_THUMBS_DOWNContent = default;
        private static bool _KEYCODE_THUMBS_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_THUMBS_UP"/>
        /// </summary>
        public static int KEYCODE_THUMBS_UP { get { if (!_KEYCODE_THUMBS_UPReady) { _KEYCODE_THUMBS_UPContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_THUMBS_UP"); _KEYCODE_THUMBS_UPReady = true; } return _KEYCODE_THUMBS_UPContent; } }
        private static int _KEYCODE_THUMBS_UPContent = default;
        private static bool _KEYCODE_THUMBS_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV"/>
        /// </summary>
        public static int KEYCODE_TV { get { if (!_KEYCODE_TVReady) { _KEYCODE_TVContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV"); _KEYCODE_TVReady = true; } return _KEYCODE_TVContent; } }
        private static int _KEYCODE_TVContent = default;
        private static bool _KEYCODE_TVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_ANTENNA_CABLE"/>
        /// </summary>
        public static int KEYCODE_TV_ANTENNA_CABLE { get { if (!_KEYCODE_TV_ANTENNA_CABLEReady) { _KEYCODE_TV_ANTENNA_CABLEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_ANTENNA_CABLE"); _KEYCODE_TV_ANTENNA_CABLEReady = true; } return _KEYCODE_TV_ANTENNA_CABLEContent; } }
        private static int _KEYCODE_TV_ANTENNA_CABLEContent = default;
        private static bool _KEYCODE_TV_ANTENNA_CABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_AUDIO_DESCRIPTION"/>
        /// </summary>
        public static int KEYCODE_TV_AUDIO_DESCRIPTION { get { if (!_KEYCODE_TV_AUDIO_DESCRIPTIONReady) { _KEYCODE_TV_AUDIO_DESCRIPTIONContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_AUDIO_DESCRIPTION"); _KEYCODE_TV_AUDIO_DESCRIPTIONReady = true; } return _KEYCODE_TV_AUDIO_DESCRIPTIONContent; } }
        private static int _KEYCODE_TV_AUDIO_DESCRIPTIONContent = default;
        private static bool _KEYCODE_TV_AUDIO_DESCRIPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN"/>
        /// </summary>
        public static int KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN { get { if (!_KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWNReady) { _KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWNContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN"); _KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWNReady = true; } return _KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWNContent; } }
        private static int _KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWNContent = default;
        private static bool _KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP"/>
        /// </summary>
        public static int KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP { get { if (!_KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UPReady) { _KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UPContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP"); _KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UPReady = true; } return _KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UPContent; } }
        private static int _KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UPContent = default;
        private static bool _KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_CONTENTS_MENU"/>
        /// </summary>
        public static int KEYCODE_TV_CONTENTS_MENU { get { if (!_KEYCODE_TV_CONTENTS_MENUReady) { _KEYCODE_TV_CONTENTS_MENUContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_CONTENTS_MENU"); _KEYCODE_TV_CONTENTS_MENUReady = true; } return _KEYCODE_TV_CONTENTS_MENUContent; } }
        private static int _KEYCODE_TV_CONTENTS_MENUContent = default;
        private static bool _KEYCODE_TV_CONTENTS_MENUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_DATA_SERVICE"/>
        /// </summary>
        public static int KEYCODE_TV_DATA_SERVICE { get { if (!_KEYCODE_TV_DATA_SERVICEReady) { _KEYCODE_TV_DATA_SERVICEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_DATA_SERVICE"); _KEYCODE_TV_DATA_SERVICEReady = true; } return _KEYCODE_TV_DATA_SERVICEContent; } }
        private static int _KEYCODE_TV_DATA_SERVICEContent = default;
        private static bool _KEYCODE_TV_DATA_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_INPUT"/>
        /// </summary>
        public static int KEYCODE_TV_INPUT { get { if (!_KEYCODE_TV_INPUTReady) { _KEYCODE_TV_INPUTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_INPUT"); _KEYCODE_TV_INPUTReady = true; } return _KEYCODE_TV_INPUTContent; } }
        private static int _KEYCODE_TV_INPUTContent = default;
        private static bool _KEYCODE_TV_INPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_INPUT_COMPONENT_1"/>
        /// </summary>
        public static int KEYCODE_TV_INPUT_COMPONENT_1 { get { if (!_KEYCODE_TV_INPUT_COMPONENT_1Ready) { _KEYCODE_TV_INPUT_COMPONENT_1Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_INPUT_COMPONENT_1"); _KEYCODE_TV_INPUT_COMPONENT_1Ready = true; } return _KEYCODE_TV_INPUT_COMPONENT_1Content; } }
        private static int _KEYCODE_TV_INPUT_COMPONENT_1Content = default;
        private static bool _KEYCODE_TV_INPUT_COMPONENT_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_INPUT_COMPONENT_2"/>
        /// </summary>
        public static int KEYCODE_TV_INPUT_COMPONENT_2 { get { if (!_KEYCODE_TV_INPUT_COMPONENT_2Ready) { _KEYCODE_TV_INPUT_COMPONENT_2Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_INPUT_COMPONENT_2"); _KEYCODE_TV_INPUT_COMPONENT_2Ready = true; } return _KEYCODE_TV_INPUT_COMPONENT_2Content; } }
        private static int _KEYCODE_TV_INPUT_COMPONENT_2Content = default;
        private static bool _KEYCODE_TV_INPUT_COMPONENT_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_INPUT_COMPOSITE_1"/>
        /// </summary>
        public static int KEYCODE_TV_INPUT_COMPOSITE_1 { get { if (!_KEYCODE_TV_INPUT_COMPOSITE_1Ready) { _KEYCODE_TV_INPUT_COMPOSITE_1Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_INPUT_COMPOSITE_1"); _KEYCODE_TV_INPUT_COMPOSITE_1Ready = true; } return _KEYCODE_TV_INPUT_COMPOSITE_1Content; } }
        private static int _KEYCODE_TV_INPUT_COMPOSITE_1Content = default;
        private static bool _KEYCODE_TV_INPUT_COMPOSITE_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_INPUT_COMPOSITE_2"/>
        /// </summary>
        public static int KEYCODE_TV_INPUT_COMPOSITE_2 { get { if (!_KEYCODE_TV_INPUT_COMPOSITE_2Ready) { _KEYCODE_TV_INPUT_COMPOSITE_2Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_INPUT_COMPOSITE_2"); _KEYCODE_TV_INPUT_COMPOSITE_2Ready = true; } return _KEYCODE_TV_INPUT_COMPOSITE_2Content; } }
        private static int _KEYCODE_TV_INPUT_COMPOSITE_2Content = default;
        private static bool _KEYCODE_TV_INPUT_COMPOSITE_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_INPUT_HDMI_1"/>
        /// </summary>
        public static int KEYCODE_TV_INPUT_HDMI_1 { get { if (!_KEYCODE_TV_INPUT_HDMI_1Ready) { _KEYCODE_TV_INPUT_HDMI_1Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_INPUT_HDMI_1"); _KEYCODE_TV_INPUT_HDMI_1Ready = true; } return _KEYCODE_TV_INPUT_HDMI_1Content; } }
        private static int _KEYCODE_TV_INPUT_HDMI_1Content = default;
        private static bool _KEYCODE_TV_INPUT_HDMI_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_INPUT_HDMI_2"/>
        /// </summary>
        public static int KEYCODE_TV_INPUT_HDMI_2 { get { if (!_KEYCODE_TV_INPUT_HDMI_2Ready) { _KEYCODE_TV_INPUT_HDMI_2Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_INPUT_HDMI_2"); _KEYCODE_TV_INPUT_HDMI_2Ready = true; } return _KEYCODE_TV_INPUT_HDMI_2Content; } }
        private static int _KEYCODE_TV_INPUT_HDMI_2Content = default;
        private static bool _KEYCODE_TV_INPUT_HDMI_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_INPUT_HDMI_3"/>
        /// </summary>
        public static int KEYCODE_TV_INPUT_HDMI_3 { get { if (!_KEYCODE_TV_INPUT_HDMI_3Ready) { _KEYCODE_TV_INPUT_HDMI_3Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_INPUT_HDMI_3"); _KEYCODE_TV_INPUT_HDMI_3Ready = true; } return _KEYCODE_TV_INPUT_HDMI_3Content; } }
        private static int _KEYCODE_TV_INPUT_HDMI_3Content = default;
        private static bool _KEYCODE_TV_INPUT_HDMI_3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_INPUT_HDMI_4"/>
        /// </summary>
        public static int KEYCODE_TV_INPUT_HDMI_4 { get { if (!_KEYCODE_TV_INPUT_HDMI_4Ready) { _KEYCODE_TV_INPUT_HDMI_4Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_INPUT_HDMI_4"); _KEYCODE_TV_INPUT_HDMI_4Ready = true; } return _KEYCODE_TV_INPUT_HDMI_4Content; } }
        private static int _KEYCODE_TV_INPUT_HDMI_4Content = default;
        private static bool _KEYCODE_TV_INPUT_HDMI_4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_INPUT_VGA_1"/>
        /// </summary>
        public static int KEYCODE_TV_INPUT_VGA_1 { get { if (!_KEYCODE_TV_INPUT_VGA_1Ready) { _KEYCODE_TV_INPUT_VGA_1Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_INPUT_VGA_1"); _KEYCODE_TV_INPUT_VGA_1Ready = true; } return _KEYCODE_TV_INPUT_VGA_1Content; } }
        private static int _KEYCODE_TV_INPUT_VGA_1Content = default;
        private static bool _KEYCODE_TV_INPUT_VGA_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_MEDIA_CONTEXT_MENU"/>
        /// </summary>
        public static int KEYCODE_TV_MEDIA_CONTEXT_MENU { get { if (!_KEYCODE_TV_MEDIA_CONTEXT_MENUReady) { _KEYCODE_TV_MEDIA_CONTEXT_MENUContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_MEDIA_CONTEXT_MENU"); _KEYCODE_TV_MEDIA_CONTEXT_MENUReady = true; } return _KEYCODE_TV_MEDIA_CONTEXT_MENUContent; } }
        private static int _KEYCODE_TV_MEDIA_CONTEXT_MENUContent = default;
        private static bool _KEYCODE_TV_MEDIA_CONTEXT_MENUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_NETWORK"/>
        /// </summary>
        public static int KEYCODE_TV_NETWORK { get { if (!_KEYCODE_TV_NETWORKReady) { _KEYCODE_TV_NETWORKContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_NETWORK"); _KEYCODE_TV_NETWORKReady = true; } return _KEYCODE_TV_NETWORKContent; } }
        private static int _KEYCODE_TV_NETWORKContent = default;
        private static bool _KEYCODE_TV_NETWORKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_NUMBER_ENTRY"/>
        /// </summary>
        public static int KEYCODE_TV_NUMBER_ENTRY { get { if (!_KEYCODE_TV_NUMBER_ENTRYReady) { _KEYCODE_TV_NUMBER_ENTRYContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_NUMBER_ENTRY"); _KEYCODE_TV_NUMBER_ENTRYReady = true; } return _KEYCODE_TV_NUMBER_ENTRYContent; } }
        private static int _KEYCODE_TV_NUMBER_ENTRYContent = default;
        private static bool _KEYCODE_TV_NUMBER_ENTRYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_POWER"/>
        /// </summary>
        public static int KEYCODE_TV_POWER { get { if (!_KEYCODE_TV_POWERReady) { _KEYCODE_TV_POWERContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_POWER"); _KEYCODE_TV_POWERReady = true; } return _KEYCODE_TV_POWERContent; } }
        private static int _KEYCODE_TV_POWERContent = default;
        private static bool _KEYCODE_TV_POWERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_RADIO_SERVICE"/>
        /// </summary>
        public static int KEYCODE_TV_RADIO_SERVICE { get { if (!_KEYCODE_TV_RADIO_SERVICEReady) { _KEYCODE_TV_RADIO_SERVICEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_RADIO_SERVICE"); _KEYCODE_TV_RADIO_SERVICEReady = true; } return _KEYCODE_TV_RADIO_SERVICEContent; } }
        private static int _KEYCODE_TV_RADIO_SERVICEContent = default;
        private static bool _KEYCODE_TV_RADIO_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_SATELLITE"/>
        /// </summary>
        public static int KEYCODE_TV_SATELLITE { get { if (!_KEYCODE_TV_SATELLITEReady) { _KEYCODE_TV_SATELLITEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_SATELLITE"); _KEYCODE_TV_SATELLITEReady = true; } return _KEYCODE_TV_SATELLITEContent; } }
        private static int _KEYCODE_TV_SATELLITEContent = default;
        private static bool _KEYCODE_TV_SATELLITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_SATELLITE_BS"/>
        /// </summary>
        public static int KEYCODE_TV_SATELLITE_BS { get { if (!_KEYCODE_TV_SATELLITE_BSReady) { _KEYCODE_TV_SATELLITE_BSContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_SATELLITE_BS"); _KEYCODE_TV_SATELLITE_BSReady = true; } return _KEYCODE_TV_SATELLITE_BSContent; } }
        private static int _KEYCODE_TV_SATELLITE_BSContent = default;
        private static bool _KEYCODE_TV_SATELLITE_BSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_SATELLITE_CS"/>
        /// </summary>
        public static int KEYCODE_TV_SATELLITE_CS { get { if (!_KEYCODE_TV_SATELLITE_CSReady) { _KEYCODE_TV_SATELLITE_CSContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_SATELLITE_CS"); _KEYCODE_TV_SATELLITE_CSReady = true; } return _KEYCODE_TV_SATELLITE_CSContent; } }
        private static int _KEYCODE_TV_SATELLITE_CSContent = default;
        private static bool _KEYCODE_TV_SATELLITE_CSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_SATELLITE_SERVICE"/>
        /// </summary>
        public static int KEYCODE_TV_SATELLITE_SERVICE { get { if (!_KEYCODE_TV_SATELLITE_SERVICEReady) { _KEYCODE_TV_SATELLITE_SERVICEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_SATELLITE_SERVICE"); _KEYCODE_TV_SATELLITE_SERVICEReady = true; } return _KEYCODE_TV_SATELLITE_SERVICEContent; } }
        private static int _KEYCODE_TV_SATELLITE_SERVICEContent = default;
        private static bool _KEYCODE_TV_SATELLITE_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_TELETEXT"/>
        /// </summary>
        public static int KEYCODE_TV_TELETEXT { get { if (!_KEYCODE_TV_TELETEXTReady) { _KEYCODE_TV_TELETEXTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_TELETEXT"); _KEYCODE_TV_TELETEXTReady = true; } return _KEYCODE_TV_TELETEXTContent; } }
        private static int _KEYCODE_TV_TELETEXTContent = default;
        private static bool _KEYCODE_TV_TELETEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_TERRESTRIAL_ANALOG"/>
        /// </summary>
        public static int KEYCODE_TV_TERRESTRIAL_ANALOG { get { if (!_KEYCODE_TV_TERRESTRIAL_ANALOGReady) { _KEYCODE_TV_TERRESTRIAL_ANALOGContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_TERRESTRIAL_ANALOG"); _KEYCODE_TV_TERRESTRIAL_ANALOGReady = true; } return _KEYCODE_TV_TERRESTRIAL_ANALOGContent; } }
        private static int _KEYCODE_TV_TERRESTRIAL_ANALOGContent = default;
        private static bool _KEYCODE_TV_TERRESTRIAL_ANALOGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_TERRESTRIAL_DIGITAL"/>
        /// </summary>
        public static int KEYCODE_TV_TERRESTRIAL_DIGITAL { get { if (!_KEYCODE_TV_TERRESTRIAL_DIGITALReady) { _KEYCODE_TV_TERRESTRIAL_DIGITALContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_TERRESTRIAL_DIGITAL"); _KEYCODE_TV_TERRESTRIAL_DIGITALReady = true; } return _KEYCODE_TV_TERRESTRIAL_DIGITALContent; } }
        private static int _KEYCODE_TV_TERRESTRIAL_DIGITALContent = default;
        private static bool _KEYCODE_TV_TERRESTRIAL_DIGITALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_TIMER_PROGRAMMING"/>
        /// </summary>
        public static int KEYCODE_TV_TIMER_PROGRAMMING { get { if (!_KEYCODE_TV_TIMER_PROGRAMMINGReady) { _KEYCODE_TV_TIMER_PROGRAMMINGContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_TIMER_PROGRAMMING"); _KEYCODE_TV_TIMER_PROGRAMMINGReady = true; } return _KEYCODE_TV_TIMER_PROGRAMMINGContent; } }
        private static int _KEYCODE_TV_TIMER_PROGRAMMINGContent = default;
        private static bool _KEYCODE_TV_TIMER_PROGRAMMINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_TV_ZOOM_MODE"/>
        /// </summary>
        public static int KEYCODE_TV_ZOOM_MODE { get { if (!_KEYCODE_TV_ZOOM_MODEReady) { _KEYCODE_TV_ZOOM_MODEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_TV_ZOOM_MODE"); _KEYCODE_TV_ZOOM_MODEReady = true; } return _KEYCODE_TV_ZOOM_MODEContent; } }
        private static int _KEYCODE_TV_ZOOM_MODEContent = default;
        private static bool _KEYCODE_TV_ZOOM_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_U"/>
        /// </summary>
        public static int KEYCODE_U { get { if (!_KEYCODE_UReady) { _KEYCODE_UContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_U"); _KEYCODE_UReady = true; } return _KEYCODE_UContent; } }
        private static int _KEYCODE_UContent = default;
        private static bool _KEYCODE_UReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_UNKNOWN"/>
        /// </summary>
        public static int KEYCODE_UNKNOWN { get { if (!_KEYCODE_UNKNOWNReady) { _KEYCODE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_UNKNOWN"); _KEYCODE_UNKNOWNReady = true; } return _KEYCODE_UNKNOWNContent; } }
        private static int _KEYCODE_UNKNOWNContent = default;
        private static bool _KEYCODE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_V"/>
        /// </summary>
        public static int KEYCODE_V { get { if (!_KEYCODE_VReady) { _KEYCODE_VContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_V"); _KEYCODE_VReady = true; } return _KEYCODE_VContent; } }
        private static int _KEYCODE_VContent = default;
        private static bool _KEYCODE_VReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_VIDEO_APP_1"/>
        /// </summary>
        public static int KEYCODE_VIDEO_APP_1 { get { if (!_KEYCODE_VIDEO_APP_1Ready) { _KEYCODE_VIDEO_APP_1Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_VIDEO_APP_1"); _KEYCODE_VIDEO_APP_1Ready = true; } return _KEYCODE_VIDEO_APP_1Content; } }
        private static int _KEYCODE_VIDEO_APP_1Content = default;
        private static bool _KEYCODE_VIDEO_APP_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_VIDEO_APP_2"/>
        /// </summary>
        public static int KEYCODE_VIDEO_APP_2 { get { if (!_KEYCODE_VIDEO_APP_2Ready) { _KEYCODE_VIDEO_APP_2Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_VIDEO_APP_2"); _KEYCODE_VIDEO_APP_2Ready = true; } return _KEYCODE_VIDEO_APP_2Content; } }
        private static int _KEYCODE_VIDEO_APP_2Content = default;
        private static bool _KEYCODE_VIDEO_APP_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_VIDEO_APP_3"/>
        /// </summary>
        public static int KEYCODE_VIDEO_APP_3 { get { if (!_KEYCODE_VIDEO_APP_3Ready) { _KEYCODE_VIDEO_APP_3Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_VIDEO_APP_3"); _KEYCODE_VIDEO_APP_3Ready = true; } return _KEYCODE_VIDEO_APP_3Content; } }
        private static int _KEYCODE_VIDEO_APP_3Content = default;
        private static bool _KEYCODE_VIDEO_APP_3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_VIDEO_APP_4"/>
        /// </summary>
        public static int KEYCODE_VIDEO_APP_4 { get { if (!_KEYCODE_VIDEO_APP_4Ready) { _KEYCODE_VIDEO_APP_4Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_VIDEO_APP_4"); _KEYCODE_VIDEO_APP_4Ready = true; } return _KEYCODE_VIDEO_APP_4Content; } }
        private static int _KEYCODE_VIDEO_APP_4Content = default;
        private static bool _KEYCODE_VIDEO_APP_4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_VIDEO_APP_5"/>
        /// </summary>
        public static int KEYCODE_VIDEO_APP_5 { get { if (!_KEYCODE_VIDEO_APP_5Ready) { _KEYCODE_VIDEO_APP_5Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_VIDEO_APP_5"); _KEYCODE_VIDEO_APP_5Ready = true; } return _KEYCODE_VIDEO_APP_5Content; } }
        private static int _KEYCODE_VIDEO_APP_5Content = default;
        private static bool _KEYCODE_VIDEO_APP_5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_VIDEO_APP_6"/>
        /// </summary>
        public static int KEYCODE_VIDEO_APP_6 { get { if (!_KEYCODE_VIDEO_APP_6Ready) { _KEYCODE_VIDEO_APP_6Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_VIDEO_APP_6"); _KEYCODE_VIDEO_APP_6Ready = true; } return _KEYCODE_VIDEO_APP_6Content; } }
        private static int _KEYCODE_VIDEO_APP_6Content = default;
        private static bool _KEYCODE_VIDEO_APP_6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_VIDEO_APP_7"/>
        /// </summary>
        public static int KEYCODE_VIDEO_APP_7 { get { if (!_KEYCODE_VIDEO_APP_7Ready) { _KEYCODE_VIDEO_APP_7Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_VIDEO_APP_7"); _KEYCODE_VIDEO_APP_7Ready = true; } return _KEYCODE_VIDEO_APP_7Content; } }
        private static int _KEYCODE_VIDEO_APP_7Content = default;
        private static bool _KEYCODE_VIDEO_APP_7Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_VIDEO_APP_8"/>
        /// </summary>
        public static int KEYCODE_VIDEO_APP_8 { get { if (!_KEYCODE_VIDEO_APP_8Ready) { _KEYCODE_VIDEO_APP_8Content = SGetField<int>(LocalBridgeClazz, "KEYCODE_VIDEO_APP_8"); _KEYCODE_VIDEO_APP_8Ready = true; } return _KEYCODE_VIDEO_APP_8Content; } }
        private static int _KEYCODE_VIDEO_APP_8Content = default;
        private static bool _KEYCODE_VIDEO_APP_8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_VOICE_ASSIST"/>
        /// </summary>
        public static int KEYCODE_VOICE_ASSIST { get { if (!_KEYCODE_VOICE_ASSISTReady) { _KEYCODE_VOICE_ASSISTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_VOICE_ASSIST"); _KEYCODE_VOICE_ASSISTReady = true; } return _KEYCODE_VOICE_ASSISTContent; } }
        private static int _KEYCODE_VOICE_ASSISTContent = default;
        private static bool _KEYCODE_VOICE_ASSISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_VOLUME_DOWN"/>
        /// </summary>
        public static int KEYCODE_VOLUME_DOWN { get { if (!_KEYCODE_VOLUME_DOWNReady) { _KEYCODE_VOLUME_DOWNContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_VOLUME_DOWN"); _KEYCODE_VOLUME_DOWNReady = true; } return _KEYCODE_VOLUME_DOWNContent; } }
        private static int _KEYCODE_VOLUME_DOWNContent = default;
        private static bool _KEYCODE_VOLUME_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_VOLUME_MUTE"/>
        /// </summary>
        public static int KEYCODE_VOLUME_MUTE { get { if (!_KEYCODE_VOLUME_MUTEReady) { _KEYCODE_VOLUME_MUTEContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_VOLUME_MUTE"); _KEYCODE_VOLUME_MUTEReady = true; } return _KEYCODE_VOLUME_MUTEContent; } }
        private static int _KEYCODE_VOLUME_MUTEContent = default;
        private static bool _KEYCODE_VOLUME_MUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_VOLUME_UP"/>
        /// </summary>
        public static int KEYCODE_VOLUME_UP { get { if (!_KEYCODE_VOLUME_UPReady) { _KEYCODE_VOLUME_UPContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_VOLUME_UP"); _KEYCODE_VOLUME_UPReady = true; } return _KEYCODE_VOLUME_UPContent; } }
        private static int _KEYCODE_VOLUME_UPContent = default;
        private static bool _KEYCODE_VOLUME_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_W"/>
        /// </summary>
        public static int KEYCODE_W { get { if (!_KEYCODE_WReady) { _KEYCODE_WContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_W"); _KEYCODE_WReady = true; } return _KEYCODE_WContent; } }
        private static int _KEYCODE_WContent = default;
        private static bool _KEYCODE_WReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_WAKEUP"/>
        /// </summary>
        public static int KEYCODE_WAKEUP { get { if (!_KEYCODE_WAKEUPReady) { _KEYCODE_WAKEUPContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_WAKEUP"); _KEYCODE_WAKEUPReady = true; } return _KEYCODE_WAKEUPContent; } }
        private static int _KEYCODE_WAKEUPContent = default;
        private static bool _KEYCODE_WAKEUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_WINDOW"/>
        /// </summary>
        public static int KEYCODE_WINDOW { get { if (!_KEYCODE_WINDOWReady) { _KEYCODE_WINDOWContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_WINDOW"); _KEYCODE_WINDOWReady = true; } return _KEYCODE_WINDOWContent; } }
        private static int _KEYCODE_WINDOWContent = default;
        private static bool _KEYCODE_WINDOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_X"/>
        /// </summary>
        public static int KEYCODE_X { get { if (!_KEYCODE_XReady) { _KEYCODE_XContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_X"); _KEYCODE_XReady = true; } return _KEYCODE_XContent; } }
        private static int _KEYCODE_XContent = default;
        private static bool _KEYCODE_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_Y"/>
        /// </summary>
        public static int KEYCODE_Y { get { if (!_KEYCODE_YReady) { _KEYCODE_YContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_Y"); _KEYCODE_YReady = true; } return _KEYCODE_YContent; } }
        private static int _KEYCODE_YContent = default;
        private static bool _KEYCODE_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_YEN"/>
        /// </summary>
        public static int KEYCODE_YEN { get { if (!_KEYCODE_YENReady) { _KEYCODE_YENContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_YEN"); _KEYCODE_YENReady = true; } return _KEYCODE_YENContent; } }
        private static int _KEYCODE_YENContent = default;
        private static bool _KEYCODE_YENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_Z"/>
        /// </summary>
        public static int KEYCODE_Z { get { if (!_KEYCODE_ZReady) { _KEYCODE_ZContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_Z"); _KEYCODE_ZReady = true; } return _KEYCODE_ZContent; } }
        private static int _KEYCODE_ZContent = default;
        private static bool _KEYCODE_ZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_ZENKAKU_HANKAKU"/>
        /// </summary>
        public static int KEYCODE_ZENKAKU_HANKAKU { get { if (!_KEYCODE_ZENKAKU_HANKAKUReady) { _KEYCODE_ZENKAKU_HANKAKUContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_ZENKAKU_HANKAKU"); _KEYCODE_ZENKAKU_HANKAKUReady = true; } return _KEYCODE_ZENKAKU_HANKAKUContent; } }
        private static int _KEYCODE_ZENKAKU_HANKAKUContent = default;
        private static bool _KEYCODE_ZENKAKU_HANKAKUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_ZOOM_IN"/>
        /// </summary>
        public static int KEYCODE_ZOOM_IN { get { if (!_KEYCODE_ZOOM_INReady) { _KEYCODE_ZOOM_INContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_ZOOM_IN"); _KEYCODE_ZOOM_INReady = true; } return _KEYCODE_ZOOM_INContent; } }
        private static int _KEYCODE_ZOOM_INContent = default;
        private static bool _KEYCODE_ZOOM_INReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#KEYCODE_ZOOM_OUT"/>
        /// </summary>
        public static int KEYCODE_ZOOM_OUT { get { if (!_KEYCODE_ZOOM_OUTReady) { _KEYCODE_ZOOM_OUTContent = SGetField<int>(LocalBridgeClazz, "KEYCODE_ZOOM_OUT"); _KEYCODE_ZOOM_OUTReady = true; } return _KEYCODE_ZOOM_OUTContent; } }
        private static int _KEYCODE_ZOOM_OUTContent = default;
        private static bool _KEYCODE_ZOOM_OUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#MAX_KEYCODE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int MAX_KEYCODE { get { if (!_MAX_KEYCODEReady) { _MAX_KEYCODEContent = SGetField<int>(LocalBridgeClazz, "MAX_KEYCODE"); _MAX_KEYCODEReady = true; } return _MAX_KEYCODEContent; } }
        private static int _MAX_KEYCODEContent = default;
        private static bool _MAX_KEYCODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_ALT_LEFT_ON"/>
        /// </summary>
        public static int META_ALT_LEFT_ON { get { if (!_META_ALT_LEFT_ONReady) { _META_ALT_LEFT_ONContent = SGetField<int>(LocalBridgeClazz, "META_ALT_LEFT_ON"); _META_ALT_LEFT_ONReady = true; } return _META_ALT_LEFT_ONContent; } }
        private static int _META_ALT_LEFT_ONContent = default;
        private static bool _META_ALT_LEFT_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_ALT_MASK"/>
        /// </summary>
        public static int META_ALT_MASK { get { if (!_META_ALT_MASKReady) { _META_ALT_MASKContent = SGetField<int>(LocalBridgeClazz, "META_ALT_MASK"); _META_ALT_MASKReady = true; } return _META_ALT_MASKContent; } }
        private static int _META_ALT_MASKContent = default;
        private static bool _META_ALT_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_ALT_ON"/>
        /// </summary>
        public static int META_ALT_ON { get { if (!_META_ALT_ONReady) { _META_ALT_ONContent = SGetField<int>(LocalBridgeClazz, "META_ALT_ON"); _META_ALT_ONReady = true; } return _META_ALT_ONContent; } }
        private static int _META_ALT_ONContent = default;
        private static bool _META_ALT_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_ALT_RIGHT_ON"/>
        /// </summary>
        public static int META_ALT_RIGHT_ON { get { if (!_META_ALT_RIGHT_ONReady) { _META_ALT_RIGHT_ONContent = SGetField<int>(LocalBridgeClazz, "META_ALT_RIGHT_ON"); _META_ALT_RIGHT_ONReady = true; } return _META_ALT_RIGHT_ONContent; } }
        private static int _META_ALT_RIGHT_ONContent = default;
        private static bool _META_ALT_RIGHT_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_CAPS_LOCK_ON"/>
        /// </summary>
        public static int META_CAPS_LOCK_ON { get { if (!_META_CAPS_LOCK_ONReady) { _META_CAPS_LOCK_ONContent = SGetField<int>(LocalBridgeClazz, "META_CAPS_LOCK_ON"); _META_CAPS_LOCK_ONReady = true; } return _META_CAPS_LOCK_ONContent; } }
        private static int _META_CAPS_LOCK_ONContent = default;
        private static bool _META_CAPS_LOCK_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_CTRL_LEFT_ON"/>
        /// </summary>
        public static int META_CTRL_LEFT_ON { get { if (!_META_CTRL_LEFT_ONReady) { _META_CTRL_LEFT_ONContent = SGetField<int>(LocalBridgeClazz, "META_CTRL_LEFT_ON"); _META_CTRL_LEFT_ONReady = true; } return _META_CTRL_LEFT_ONContent; } }
        private static int _META_CTRL_LEFT_ONContent = default;
        private static bool _META_CTRL_LEFT_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_CTRL_MASK"/>
        /// </summary>
        public static int META_CTRL_MASK { get { if (!_META_CTRL_MASKReady) { _META_CTRL_MASKContent = SGetField<int>(LocalBridgeClazz, "META_CTRL_MASK"); _META_CTRL_MASKReady = true; } return _META_CTRL_MASKContent; } }
        private static int _META_CTRL_MASKContent = default;
        private static bool _META_CTRL_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_CTRL_ON"/>
        /// </summary>
        public static int META_CTRL_ON { get { if (!_META_CTRL_ONReady) { _META_CTRL_ONContent = SGetField<int>(LocalBridgeClazz, "META_CTRL_ON"); _META_CTRL_ONReady = true; } return _META_CTRL_ONContent; } }
        private static int _META_CTRL_ONContent = default;
        private static bool _META_CTRL_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_CTRL_RIGHT_ON"/>
        /// </summary>
        public static int META_CTRL_RIGHT_ON { get { if (!_META_CTRL_RIGHT_ONReady) { _META_CTRL_RIGHT_ONContent = SGetField<int>(LocalBridgeClazz, "META_CTRL_RIGHT_ON"); _META_CTRL_RIGHT_ONReady = true; } return _META_CTRL_RIGHT_ONContent; } }
        private static int _META_CTRL_RIGHT_ONContent = default;
        private static bool _META_CTRL_RIGHT_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_FUNCTION_ON"/>
        /// </summary>
        public static int META_FUNCTION_ON { get { if (!_META_FUNCTION_ONReady) { _META_FUNCTION_ONContent = SGetField<int>(LocalBridgeClazz, "META_FUNCTION_ON"); _META_FUNCTION_ONReady = true; } return _META_FUNCTION_ONContent; } }
        private static int _META_FUNCTION_ONContent = default;
        private static bool _META_FUNCTION_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_META_LEFT_ON"/>
        /// </summary>
        public static int META_META_LEFT_ON { get { if (!_META_META_LEFT_ONReady) { _META_META_LEFT_ONContent = SGetField<int>(LocalBridgeClazz, "META_META_LEFT_ON"); _META_META_LEFT_ONReady = true; } return _META_META_LEFT_ONContent; } }
        private static int _META_META_LEFT_ONContent = default;
        private static bool _META_META_LEFT_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_META_MASK"/>
        /// </summary>
        public static int META_META_MASK { get { if (!_META_META_MASKReady) { _META_META_MASKContent = SGetField<int>(LocalBridgeClazz, "META_META_MASK"); _META_META_MASKReady = true; } return _META_META_MASKContent; } }
        private static int _META_META_MASKContent = default;
        private static bool _META_META_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_META_ON"/>
        /// </summary>
        public static int META_META_ON { get { if (!_META_META_ONReady) { _META_META_ONContent = SGetField<int>(LocalBridgeClazz, "META_META_ON"); _META_META_ONReady = true; } return _META_META_ONContent; } }
        private static int _META_META_ONContent = default;
        private static bool _META_META_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_META_RIGHT_ON"/>
        /// </summary>
        public static int META_META_RIGHT_ON { get { if (!_META_META_RIGHT_ONReady) { _META_META_RIGHT_ONContent = SGetField<int>(LocalBridgeClazz, "META_META_RIGHT_ON"); _META_META_RIGHT_ONReady = true; } return _META_META_RIGHT_ONContent; } }
        private static int _META_META_RIGHT_ONContent = default;
        private static bool _META_META_RIGHT_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_NUM_LOCK_ON"/>
        /// </summary>
        public static int META_NUM_LOCK_ON { get { if (!_META_NUM_LOCK_ONReady) { _META_NUM_LOCK_ONContent = SGetField<int>(LocalBridgeClazz, "META_NUM_LOCK_ON"); _META_NUM_LOCK_ONReady = true; } return _META_NUM_LOCK_ONContent; } }
        private static int _META_NUM_LOCK_ONContent = default;
        private static bool _META_NUM_LOCK_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_SCROLL_LOCK_ON"/>
        /// </summary>
        public static int META_SCROLL_LOCK_ON { get { if (!_META_SCROLL_LOCK_ONReady) { _META_SCROLL_LOCK_ONContent = SGetField<int>(LocalBridgeClazz, "META_SCROLL_LOCK_ON"); _META_SCROLL_LOCK_ONReady = true; } return _META_SCROLL_LOCK_ONContent; } }
        private static int _META_SCROLL_LOCK_ONContent = default;
        private static bool _META_SCROLL_LOCK_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_SHIFT_LEFT_ON"/>
        /// </summary>
        public static int META_SHIFT_LEFT_ON { get { if (!_META_SHIFT_LEFT_ONReady) { _META_SHIFT_LEFT_ONContent = SGetField<int>(LocalBridgeClazz, "META_SHIFT_LEFT_ON"); _META_SHIFT_LEFT_ONReady = true; } return _META_SHIFT_LEFT_ONContent; } }
        private static int _META_SHIFT_LEFT_ONContent = default;
        private static bool _META_SHIFT_LEFT_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_SHIFT_MASK"/>
        /// </summary>
        public static int META_SHIFT_MASK { get { if (!_META_SHIFT_MASKReady) { _META_SHIFT_MASKContent = SGetField<int>(LocalBridgeClazz, "META_SHIFT_MASK"); _META_SHIFT_MASKReady = true; } return _META_SHIFT_MASKContent; } }
        private static int _META_SHIFT_MASKContent = default;
        private static bool _META_SHIFT_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_SHIFT_ON"/>
        /// </summary>
        public static int META_SHIFT_ON { get { if (!_META_SHIFT_ONReady) { _META_SHIFT_ONContent = SGetField<int>(LocalBridgeClazz, "META_SHIFT_ON"); _META_SHIFT_ONReady = true; } return _META_SHIFT_ONContent; } }
        private static int _META_SHIFT_ONContent = default;
        private static bool _META_SHIFT_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_SHIFT_RIGHT_ON"/>
        /// </summary>
        public static int META_SHIFT_RIGHT_ON { get { if (!_META_SHIFT_RIGHT_ONReady) { _META_SHIFT_RIGHT_ONContent = SGetField<int>(LocalBridgeClazz, "META_SHIFT_RIGHT_ON"); _META_SHIFT_RIGHT_ONReady = true; } return _META_SHIFT_RIGHT_ONContent; } }
        private static int _META_SHIFT_RIGHT_ONContent = default;
        private static bool _META_SHIFT_RIGHT_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#META_SYM_ON"/>
        /// </summary>
        public static int META_SYM_ON { get { if (!_META_SYM_ONReady) { _META_SYM_ONContent = SGetField<int>(LocalBridgeClazz, "META_SYM_ON"); _META_SYM_ONReady = true; } return _META_SYM_ONContent; } }
        private static int _META_SYM_ONContent = default;
        private static bool _META_SYM_ONReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#changeAction(android.view.KeyEvent,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.View.KeyEvent"/></returns>
        public static Android.View.KeyEvent ChangeAction(Android.View.KeyEvent arg0, int arg1)
        {
            return SExecute<Android.View.KeyEvent>(LocalBridgeClazz, "changeAction", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#changeFlags(android.view.KeyEvent,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.View.KeyEvent"/></returns>
        public static Android.View.KeyEvent ChangeFlags(Android.View.KeyEvent arg0, int arg1)
        {
            return SExecute<Android.View.KeyEvent>(LocalBridgeClazz, "changeFlags", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#changeTimeRepeat(android.view.KeyEvent,long,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.View.KeyEvent"/></returns>
        public static Android.View.KeyEvent ChangeTimeRepeat(Android.View.KeyEvent arg0, long arg1, int arg2, int arg3)
        {
            return SExecute<Android.View.KeyEvent>(LocalBridgeClazz, "changeTimeRepeat", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#changeTimeRepeat(android.view.KeyEvent,long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.View.KeyEvent"/></returns>
        public static Android.View.KeyEvent ChangeTimeRepeat(Android.View.KeyEvent arg0, long arg1, int arg2)
        {
            return SExecute<Android.View.KeyEvent>(LocalBridgeClazz, "changeTimeRepeat", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isModifierKey(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsModifierKey(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isModifierKey", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#metaStateHasModifiers(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool MetaStateHasModifiers(int arg0, int arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "metaStateHasModifiers", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#metaStateHasNoModifiers(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool MetaStateHasNoModifiers(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "metaStateHasNoModifiers", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isGamepadButton(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsGamepadButton(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isGamepadButton", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isMediaSessionKey(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsMediaSessionKey(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isMediaSessionKey", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getDeadChar(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetDeadChar(int arg0, int arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "getDeadChar", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getMaxKeyCode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public static int GetMaxKeyCode()
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getMaxKeyCode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getModifierMetaStateMask()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public static int GetModifierMetaStateMask()
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "getModifierMetaStateMask", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#keyCodeFromString(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public static int KeyCodeFromString(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "keyCodeFromString", "(Ljava/lang/String;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#normalizeMetaState(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int NormalizeMetaState(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "normalizeMetaState", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#keyCodeToString(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String KeyCodeToString(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "keyCodeToString", "(I)Ljava/lang/String;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getKeyData(android.view.KeyCharacterMap.KeyData)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.KeyCharacterMap.KeyData"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool GetKeyData(Android.View.KeyCharacterMap.KeyData arg0)
        {
            return IExecuteWithSignature<bool>("getKeyData", "(Landroid/view/KeyCharacterMap$KeyData;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isPrintingKey()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPrintingKey()
        {
            return IExecuteWithSignature<bool>("isPrintingKey", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getDisplayLabel()"/>
        /// </summary>
        /// <returns><see cref="char"/></returns>
        public char GetDisplayLabel()
        {
            return IExecuteWithSignature<char>("getDisplayLabel", "()C");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getMatch(char[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="char"/></returns>
        public char GetMatch(char[] arg0, int arg1)
        {
            return IExecute<char>("getMatch", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getMatch(char[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="char"/></param>
        /// <returns><see cref="char"/></returns>
        public char GetMatch(char[] arg0)
        {
            return IExecuteWithSignature<char>("getMatch", "([C)C", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getNumber()"/>
        /// </summary>
        /// <returns><see cref="char"/></returns>
        public char GetNumber()
        {
            return IExecuteWithSignature<char>("getNumber", "()C");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getKeyCharacterMap()"/>
        /// </summary>
        /// <returns><see cref="Android.View.KeyCharacterMap"/></returns>
        public Android.View.KeyCharacterMap GetKeyCharacterMap()
        {
            return IExecuteWithSignature<Android.View.KeyCharacterMap>("getKeyCharacterMap", "()Landroid/view/KeyCharacterMap;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#dispatch(android.view.KeyEvent.Callback,android.view.KeyEvent.DispatcherState,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.KeyEvent.Callback"/></param>
        /// <param name="arg1"><see cref="Android.View.KeyEvent.DispatcherState"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Dispatch(Android.View.KeyEvent.Callback arg0, Android.View.KeyEvent.DispatcherState arg1, object arg2)
        {
            return IExecute<bool>("dispatch", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#dispatch(android.view.KeyEvent.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.KeyEvent.Callback"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool Dispatch(Android.View.KeyEvent.Callback arg0)
        {
            return IExecuteWithSignature<bool>("dispatch", "(Landroid/view/KeyEvent$Callback;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#hasModifiers(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasModifiers(int arg0)
        {
            return IExecuteWithSignature<bool>("hasModifiers", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#hasNoModifiers()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasNoModifiers()
        {
            return IExecuteWithSignature<bool>("hasNoModifiers", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isAltPressed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAltPressed()
        {
            return IExecuteWithSignature<bool>("isAltPressed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isCanceled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsCanceled()
        {
            return IExecuteWithSignature<bool>("isCanceled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isCapsLockOn()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsCapsLockOn()
        {
            return IExecuteWithSignature<bool>("isCapsLockOn", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isCtrlPressed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsCtrlPressed()
        {
            return IExecuteWithSignature<bool>("isCtrlPressed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isFunctionPressed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFunctionPressed()
        {
            return IExecuteWithSignature<bool>("isFunctionPressed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isLongPress()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLongPress()
        {
            return IExecuteWithSignature<bool>("isLongPress", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isMetaPressed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMetaPressed()
        {
            return IExecuteWithSignature<bool>("isMetaPressed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isNumLockOn()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsNumLockOn()
        {
            return IExecuteWithSignature<bool>("isNumLockOn", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isScrollLockOn()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsScrollLockOn()
        {
            return IExecuteWithSignature<bool>("isScrollLockOn", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isShiftPressed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsShiftPressed()
        {
            return IExecuteWithSignature<bool>("isShiftPressed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isSymPressed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSymPressed()
        {
            return IExecuteWithSignature<bool>("isSymPressed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isSystem()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSystem()
        {
            return IExecuteWithSignature<bool>("isSystem", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#isTracking()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTracking()
        {
            return IExecuteWithSignature<bool>("isTracking", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getAction()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAction()
        {
            return IExecuteWithSignature<int>("getAction", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getFlags()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFlags()
        {
            return IExecuteWithSignature<int>("getFlags", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getKeyCode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetKeyCode()
        {
            return IExecuteWithSignature<int>("getKeyCode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getMetaState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMetaState()
        {
            return IExecuteWithSignature<int>("getMetaState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getModifiers()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetModifiers()
        {
            return IExecuteWithSignature<int>("getModifiers", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getRepeatCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRepeatCount()
        {
            return IExecuteWithSignature<int>("getRepeatCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getScanCode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetScanCode()
        {
            return IExecuteWithSignature<int>("getScanCode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getCharacters()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        [global::System.Obsolete()]
        public Java.Lang.String GetCharacters()
        {
            return IExecuteWithSignature<Java.Lang.String>("getCharacters", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getDownTime()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetDownTime()
        {
            return IExecuteWithSignature<long>("getDownTime", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#setSource(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetSource(int arg0)
        {
            IExecuteWithSignature("setSource", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#startTracking()"/>
        /// </summary>
        public void StartTracking()
        {
            IExecuteWithSignature("startTracking", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getUnicodeChar()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetUnicodeChar()
        {
            return IExecuteWithSignature<int>("getUnicodeChar", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/KeyEvent.html#getUnicodeChar(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetUnicodeChar(int arg0)
        {
            return IExecuteWithSignature<int>("getUnicodeChar", "(I)I", arg0);
        }

        #endregion

        #region Nested classes
        #region Callback
        public partial class Callback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/KeyEvent.Callback.html#onKeyDown(int,android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnKeyDown(int arg0, Android.View.KeyEvent arg1)
            {
                return IExecute<bool>("onKeyDown", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/KeyEvent.Callback.html#onKeyLongPress(int,android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnKeyLongPress(int arg0, Android.View.KeyEvent arg1)
            {
                return IExecute<bool>("onKeyLongPress", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/KeyEvent.Callback.html#onKeyMultiple(int,int,android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnKeyMultiple(int arg0, int arg1, Android.View.KeyEvent arg2)
            {
                return IExecute<bool>("onKeyMultiple", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/KeyEvent.Callback.html#onKeyUp(int,android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnKeyUp(int arg0, Android.View.KeyEvent arg1)
            {
                return IExecute<bool>("onKeyUp", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DispatcherState
        public partial class DispatcherState
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/KeyEvent.DispatcherState.html#isTracking(android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool IsTracking(Android.View.KeyEvent arg0)
            {
                return IExecuteWithSignature<bool>("isTracking", "(Landroid/view/KeyEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/KeyEvent.DispatcherState.html#handleUpEvent(android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
            public void HandleUpEvent(Android.View.KeyEvent arg0)
            {
                IExecuteWithSignature("handleUpEvent", "(Landroid/view/KeyEvent;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/KeyEvent.DispatcherState.html#performedLongPress(android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
            public void PerformedLongPress(Android.View.KeyEvent arg0)
            {
                IExecuteWithSignature("performedLongPress", "(Landroid/view/KeyEvent;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/KeyEvent.DispatcherState.html#reset()"/>
            /// </summary>
            public void Reset()
            {
                IExecuteWithSignature("reset", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/KeyEvent.DispatcherState.html#reset(java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="object"/></param>
            public void Reset(object arg0)
            {
                IExecuteWithSignature("reset", "(Ljava/lang/Object;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/KeyEvent.DispatcherState.html#startTracking(android.view.KeyEvent,java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
            /// <param name="arg1"><see cref="object"/></param>
            public void StartTracking(Android.View.KeyEvent arg0, object arg1)
            {
                IExecute("startTracking", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region ViewDebug
    public partial class ViewDebug
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewDebug.html#dumpCapturedView(java.lang.String,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        public static void DumpCapturedView(Java.Lang.String arg0, object arg1)
        {
            SExecute(LocalBridgeClazz, "dumpCapturedView", arg0, arg1);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region CapturedViewProperty
        public partial class CapturedViewProperty
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.CapturedViewProperty.html#retrieveReturn()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool RetrieveReturn()
            {
                return IExecuteWithSignature<bool>("retrieveReturn", "()Z");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ExportedProperty
        public partial class ExportedProperty
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#flagMapping()"/>
            /// </summary>
            /// <returns><see cref="Android.View.ViewDebug.FlagToString"/></returns>
            public Android.View.ViewDebug.FlagToString[] FlagMapping()
            {
                return IExecuteWithSignatureArray<Android.View.ViewDebug.FlagToString>("flagMapping", "()[Landroid/view/ViewDebug$FlagToString;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#indexMapping()"/>
            /// </summary>
            /// <returns><see cref="Android.View.ViewDebug.IntToString"/></returns>
            public Android.View.ViewDebug.IntToString[] IndexMapping()
            {
                return IExecuteWithSignatureArray<Android.View.ViewDebug.IntToString>("indexMapping", "()[Landroid/view/ViewDebug$IntToString;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#mapping()"/>
            /// </summary>
            /// <returns><see cref="Android.View.ViewDebug.IntToString"/></returns>
            public Android.View.ViewDebug.IntToString[] Mapping()
            {
                return IExecuteWithSignatureArray<Android.View.ViewDebug.IntToString>("mapping", "()[Landroid/view/ViewDebug$IntToString;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#deepExport()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool DeepExport()
            {
                return IExecuteWithSignature<bool>("deepExport", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#formatToHexString()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool FormatToHexString()
            {
                return IExecuteWithSignature<bool>("formatToHexString", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#hasAdjacentMapping()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool HasAdjacentMapping()
            {
                return IExecuteWithSignature<bool>("hasAdjacentMapping", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#resolveId()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool ResolveId()
            {
                return IExecuteWithSignature<bool>("resolveId", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#category()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String Category()
            {
                return IExecuteWithSignature<Java.Lang.String>("category", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#prefix()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String Prefix()
            {
                return IExecuteWithSignature<Java.Lang.String>("prefix", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FlagToString
        public partial class FlagToString
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.FlagToString.html#outputIf()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool OutputIf()
            {
                return IExecuteWithSignature<bool>("outputIf", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.FlagToString.html#equals()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int Equals()
            {
                return IExecuteWithSignature<int>("equals", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.FlagToString.html#mask()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int Mask()
            {
                return IExecuteWithSignature<int>("mask", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.FlagToString.html#name()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String Name()
            {
                return IExecuteWithSignature<Java.Lang.String>("name", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region IntToString
        public partial class IntToString
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.IntToString.html#from()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int From()
            {
                return IExecuteWithSignature<int>("from", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.IntToString.html#to()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String To()
            {
                return IExecuteWithSignature<Java.Lang.String>("to", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
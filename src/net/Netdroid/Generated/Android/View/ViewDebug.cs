/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.8.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region ViewDebug
    public partial class ViewDebug
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewDebug.html#TRACE_HIERARCHY"/>
        /// </summary>
        [global::System.Obsolete()]
        public static bool TRACE_HIERARCHY { get { if (!_TRACE_HIERARCHYReady) { _TRACE_HIERARCHYContent = SGetField<bool>(LocalBridgeClazz, "TRACE_HIERARCHY"); _TRACE_HIERARCHYReady = true; } return _TRACE_HIERARCHYContent; } }
        private static bool _TRACE_HIERARCHYContent = default;
        private static bool _TRACE_HIERARCHYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewDebug.html#TRACE_RECYCLER"/>
        /// </summary>
        [global::System.Obsolete()]
        public static bool TRACE_RECYCLER { get { if (!_TRACE_RECYCLERReady) { _TRACE_RECYCLERContent = SGetField<bool>(LocalBridgeClazz, "TRACE_RECYCLER"); _TRACE_RECYCLERReady = true; } return _TRACE_RECYCLERContent; } }
        private static bool _TRACE_RECYCLERContent = default;
        private static bool _TRACE_RECYCLERReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewDebug.html#dumpCapturedView(java.lang.String,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        public static void DumpCapturedView(Java.Lang.String arg0, object arg1)
        {
            SExecute(LocalBridgeClazz, "dumpCapturedView", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewDebug.html#startHierarchyTracing(java.lang.String,android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.View.View"/></param>
        [global::System.Obsolete()]
        public static void StartHierarchyTracing(Java.Lang.String arg0, Android.View.View arg1)
        {
            SExecute(LocalBridgeClazz, "startHierarchyTracing", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewDebug.html#startRecyclerTracing(java.lang.String,android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.View.View"/></param>
        [global::System.Obsolete()]
        public static void StartRecyclerTracing(Java.Lang.String arg0, Android.View.View arg1)
        {
            SExecute(LocalBridgeClazz, "startRecyclerTracing", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewDebug.html#stopHierarchyTracing()"/>
        /// </summary>
        [global::System.Obsolete()]
        public static void StopHierarchyTracing()
        {
            SExecuteWithSignature(LocalBridgeClazz, "stopHierarchyTracing", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewDebug.html#stopRecyclerTracing()"/>
        /// </summary>
        [global::System.Obsolete()]
        public static void StopRecyclerTracing()
        {
            SExecuteWithSignature(LocalBridgeClazz, "stopRecyclerTracing", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewDebug.html#trace(android.view.View,android.view.ViewDebug.HierarchyTraceType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.ViewDebug.HierarchyTraceType"/></param>
        [global::System.Obsolete()]
        public static void Trace(Android.View.View arg0, Android.View.ViewDebug.HierarchyTraceType arg1)
        {
            SExecute(LocalBridgeClazz, "trace", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewDebug.html#trace(android.view.View,android.view.ViewDebug.RecyclerTraceType,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.ViewDebug.RecyclerTraceType"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        [global::System.Obsolete()]
        public static void Trace(Android.View.View arg0, Android.View.ViewDebug.RecyclerTraceType arg1, params int[] arg2)
        {
            if (arg2.Length == 0) SExecute(LocalBridgeClazz, "trace", arg0, arg1); else SExecute(LocalBridgeClazz, "trace", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region CapturedViewProperty
        public partial class CapturedViewProperty
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.CapturedViewProperty.html#retrieveReturn()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool RetrieveReturn()
            {
                return IExecuteWithSignature<bool>("retrieveReturn", "()Z");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ExportedProperty
        public partial class ExportedProperty
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#flagMapping()"/>
            /// </summary>
            /// <returns><see cref="Android.View.ViewDebug.FlagToString"/></returns>
            public Android.View.ViewDebug.FlagToString[] FlagMapping()
            {
                return IExecuteWithSignatureArray<Android.View.ViewDebug.FlagToString>("flagMapping", "()[Landroid/view/ViewDebug$FlagToString;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#indexMapping()"/>
            /// </summary>
            /// <returns><see cref="Android.View.ViewDebug.IntToString"/></returns>
            public Android.View.ViewDebug.IntToString[] IndexMapping()
            {
                return IExecuteWithSignatureArray<Android.View.ViewDebug.IntToString>("indexMapping", "()[Landroid/view/ViewDebug$IntToString;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#mapping()"/>
            /// </summary>
            /// <returns><see cref="Android.View.ViewDebug.IntToString"/></returns>
            public Android.View.ViewDebug.IntToString[] Mapping()
            {
                return IExecuteWithSignatureArray<Android.View.ViewDebug.IntToString>("mapping", "()[Landroid/view/ViewDebug$IntToString;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#deepExport()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool DeepExport()
            {
                return IExecuteWithSignature<bool>("deepExport", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#formatToHexString()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool FormatToHexString()
            {
                return IExecuteWithSignature<bool>("formatToHexString", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#hasAdjacentMapping()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool HasAdjacentMapping()
            {
                return IExecuteWithSignature<bool>("hasAdjacentMapping", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#resolveId()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool ResolveId()
            {
                return IExecuteWithSignature<bool>("resolveId", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#category()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String Category()
            {
                return IExecuteWithSignature<Java.Lang.String>("category", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#prefix()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String Prefix()
            {
                return IExecuteWithSignature<Java.Lang.String>("prefix", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FlagToString
        public partial class FlagToString
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.FlagToString.html#outputIf()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool OutputIf()
            {
                return IExecuteWithSignature<bool>("outputIf", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.FlagToString.html#equals()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int Equals()
            {
                return IExecuteWithSignature<int>("equals", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.FlagToString.html#mask()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int Mask()
            {
                return IExecuteWithSignature<int>("mask", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.FlagToString.html#name()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String Name()
            {
                return IExecuteWithSignature<Java.Lang.String>("name", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region HierarchyTraceType
        public partial class HierarchyTraceType
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.HierarchyTraceType.html#BUILD_CACHE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.View.ViewDebug.HierarchyTraceType BUILD_CACHE { get { if (!_BUILD_CACHEReady) { _BUILD_CACHEContent = SGetField<Android.View.ViewDebug.HierarchyTraceType>(LocalBridgeClazz, "BUILD_CACHE"); _BUILD_CACHEReady = true; } return _BUILD_CACHEContent; } }
            private static Android.View.ViewDebug.HierarchyTraceType _BUILD_CACHEContent = default;
            private static bool _BUILD_CACHEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.HierarchyTraceType.html#DRAW"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.View.ViewDebug.HierarchyTraceType DRAW { get { if (!_DRAWReady) { _DRAWContent = SGetField<Android.View.ViewDebug.HierarchyTraceType>(LocalBridgeClazz, "DRAW"); _DRAWReady = true; } return _DRAWContent; } }
            private static Android.View.ViewDebug.HierarchyTraceType _DRAWContent = default;
            private static bool _DRAWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.HierarchyTraceType.html#INVALIDATE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.View.ViewDebug.HierarchyTraceType INVALIDATE { get { if (!_INVALIDATEReady) { _INVALIDATEContent = SGetField<Android.View.ViewDebug.HierarchyTraceType>(LocalBridgeClazz, "INVALIDATE"); _INVALIDATEReady = true; } return _INVALIDATEContent; } }
            private static Android.View.ViewDebug.HierarchyTraceType _INVALIDATEContent = default;
            private static bool _INVALIDATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.HierarchyTraceType.html#INVALIDATE_CHILD"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.View.ViewDebug.HierarchyTraceType INVALIDATE_CHILD { get { if (!_INVALIDATE_CHILDReady) { _INVALIDATE_CHILDContent = SGetField<Android.View.ViewDebug.HierarchyTraceType>(LocalBridgeClazz, "INVALIDATE_CHILD"); _INVALIDATE_CHILDReady = true; } return _INVALIDATE_CHILDContent; } }
            private static Android.View.ViewDebug.HierarchyTraceType _INVALIDATE_CHILDContent = default;
            private static bool _INVALIDATE_CHILDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.HierarchyTraceType.html#INVALIDATE_CHILD_IN_PARENT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.View.ViewDebug.HierarchyTraceType INVALIDATE_CHILD_IN_PARENT { get { if (!_INVALIDATE_CHILD_IN_PARENTReady) { _INVALIDATE_CHILD_IN_PARENTContent = SGetField<Android.View.ViewDebug.HierarchyTraceType>(LocalBridgeClazz, "INVALIDATE_CHILD_IN_PARENT"); _INVALIDATE_CHILD_IN_PARENTReady = true; } return _INVALIDATE_CHILD_IN_PARENTContent; } }
            private static Android.View.ViewDebug.HierarchyTraceType _INVALIDATE_CHILD_IN_PARENTContent = default;
            private static bool _INVALIDATE_CHILD_IN_PARENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.HierarchyTraceType.html#ON_LAYOUT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.View.ViewDebug.HierarchyTraceType ON_LAYOUT { get { if (!_ON_LAYOUTReady) { _ON_LAYOUTContent = SGetField<Android.View.ViewDebug.HierarchyTraceType>(LocalBridgeClazz, "ON_LAYOUT"); _ON_LAYOUTReady = true; } return _ON_LAYOUTContent; } }
            private static Android.View.ViewDebug.HierarchyTraceType _ON_LAYOUTContent = default;
            private static bool _ON_LAYOUTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.HierarchyTraceType.html#ON_MEASURE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.View.ViewDebug.HierarchyTraceType ON_MEASURE { get { if (!_ON_MEASUREReady) { _ON_MEASUREContent = SGetField<Android.View.ViewDebug.HierarchyTraceType>(LocalBridgeClazz, "ON_MEASURE"); _ON_MEASUREReady = true; } return _ON_MEASUREContent; } }
            private static Android.View.ViewDebug.HierarchyTraceType _ON_MEASUREContent = default;
            private static bool _ON_MEASUREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.HierarchyTraceType.html#REQUEST_LAYOUT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.View.ViewDebug.HierarchyTraceType REQUEST_LAYOUT { get { if (!_REQUEST_LAYOUTReady) { _REQUEST_LAYOUTContent = SGetField<Android.View.ViewDebug.HierarchyTraceType>(LocalBridgeClazz, "REQUEST_LAYOUT"); _REQUEST_LAYOUTReady = true; } return _REQUEST_LAYOUTContent; } }
            private static Android.View.ViewDebug.HierarchyTraceType _REQUEST_LAYOUTContent = default;
            private static bool _REQUEST_LAYOUTReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.HierarchyTraceType.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.View.ViewDebug.HierarchyTraceType"/></returns>
            public static Android.View.ViewDebug.HierarchyTraceType ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.View.ViewDebug.HierarchyTraceType>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/view/ViewDebug$HierarchyTraceType;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.HierarchyTraceType.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.View.ViewDebug.HierarchyTraceType"/></returns>
            public static Android.View.ViewDebug.HierarchyTraceType[] Values()
            {
                return SExecuteWithSignatureArray<Android.View.ViewDebug.HierarchyTraceType>(LocalBridgeClazz, "values", "()[Landroid/view/ViewDebug$HierarchyTraceType;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region IntToString
        public partial class IntToString
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.IntToString.html#from()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int From()
            {
                return IExecuteWithSignature<int>("from", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.IntToString.html#to()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String To()
            {
                return IExecuteWithSignature<Java.Lang.String>("to", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RecyclerTraceType
        public partial class RecyclerTraceType
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.RecyclerTraceType.html#BIND_VIEW"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.View.ViewDebug.RecyclerTraceType BIND_VIEW { get { if (!_BIND_VIEWReady) { _BIND_VIEWContent = SGetField<Android.View.ViewDebug.RecyclerTraceType>(LocalBridgeClazz, "BIND_VIEW"); _BIND_VIEWReady = true; } return _BIND_VIEWContent; } }
            private static Android.View.ViewDebug.RecyclerTraceType _BIND_VIEWContent = default;
            private static bool _BIND_VIEWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.RecyclerTraceType.html#MOVE_FROM_ACTIVE_TO_SCRAP_HEAP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.View.ViewDebug.RecyclerTraceType MOVE_FROM_ACTIVE_TO_SCRAP_HEAP { get { if (!_MOVE_FROM_ACTIVE_TO_SCRAP_HEAPReady) { _MOVE_FROM_ACTIVE_TO_SCRAP_HEAPContent = SGetField<Android.View.ViewDebug.RecyclerTraceType>(LocalBridgeClazz, "MOVE_FROM_ACTIVE_TO_SCRAP_HEAP"); _MOVE_FROM_ACTIVE_TO_SCRAP_HEAPReady = true; } return _MOVE_FROM_ACTIVE_TO_SCRAP_HEAPContent; } }
            private static Android.View.ViewDebug.RecyclerTraceType _MOVE_FROM_ACTIVE_TO_SCRAP_HEAPContent = default;
            private static bool _MOVE_FROM_ACTIVE_TO_SCRAP_HEAPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.RecyclerTraceType.html#MOVE_TO_SCRAP_HEAP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.View.ViewDebug.RecyclerTraceType MOVE_TO_SCRAP_HEAP { get { if (!_MOVE_TO_SCRAP_HEAPReady) { _MOVE_TO_SCRAP_HEAPContent = SGetField<Android.View.ViewDebug.RecyclerTraceType>(LocalBridgeClazz, "MOVE_TO_SCRAP_HEAP"); _MOVE_TO_SCRAP_HEAPReady = true; } return _MOVE_TO_SCRAP_HEAPContent; } }
            private static Android.View.ViewDebug.RecyclerTraceType _MOVE_TO_SCRAP_HEAPContent = default;
            private static bool _MOVE_TO_SCRAP_HEAPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.RecyclerTraceType.html#NEW_VIEW"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.View.ViewDebug.RecyclerTraceType NEW_VIEW { get { if (!_NEW_VIEWReady) { _NEW_VIEWContent = SGetField<Android.View.ViewDebug.RecyclerTraceType>(LocalBridgeClazz, "NEW_VIEW"); _NEW_VIEWReady = true; } return _NEW_VIEWContent; } }
            private static Android.View.ViewDebug.RecyclerTraceType _NEW_VIEWContent = default;
            private static bool _NEW_VIEWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.RecyclerTraceType.html#RECYCLE_FROM_ACTIVE_HEAP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.View.ViewDebug.RecyclerTraceType RECYCLE_FROM_ACTIVE_HEAP { get { if (!_RECYCLE_FROM_ACTIVE_HEAPReady) { _RECYCLE_FROM_ACTIVE_HEAPContent = SGetField<Android.View.ViewDebug.RecyclerTraceType>(LocalBridgeClazz, "RECYCLE_FROM_ACTIVE_HEAP"); _RECYCLE_FROM_ACTIVE_HEAPReady = true; } return _RECYCLE_FROM_ACTIVE_HEAPContent; } }
            private static Android.View.ViewDebug.RecyclerTraceType _RECYCLE_FROM_ACTIVE_HEAPContent = default;
            private static bool _RECYCLE_FROM_ACTIVE_HEAPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.RecyclerTraceType.html#RECYCLE_FROM_SCRAP_HEAP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.View.ViewDebug.RecyclerTraceType RECYCLE_FROM_SCRAP_HEAP { get { if (!_RECYCLE_FROM_SCRAP_HEAPReady) { _RECYCLE_FROM_SCRAP_HEAPContent = SGetField<Android.View.ViewDebug.RecyclerTraceType>(LocalBridgeClazz, "RECYCLE_FROM_SCRAP_HEAP"); _RECYCLE_FROM_SCRAP_HEAPReady = true; } return _RECYCLE_FROM_SCRAP_HEAPContent; } }
            private static Android.View.ViewDebug.RecyclerTraceType _RECYCLE_FROM_SCRAP_HEAPContent = default;
            private static bool _RECYCLE_FROM_SCRAP_HEAPReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.RecyclerTraceType.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.View.ViewDebug.RecyclerTraceType"/></returns>
            public static Android.View.ViewDebug.RecyclerTraceType ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.View.ViewDebug.RecyclerTraceType>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Landroid/view/ViewDebug$RecyclerTraceType;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewDebug.RecyclerTraceType.html#values()"/>
            /// </summary>
            /// <returns><see cref="Android.View.ViewDebug.RecyclerTraceType"/></returns>
            public static Android.View.ViewDebug.RecyclerTraceType[] Values()
            {
                return SExecuteWithSignatureArray<Android.View.ViewDebug.RecyclerTraceType>(LocalBridgeClazz, "values", "()[Landroid/view/ViewDebug$RecyclerTraceType;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
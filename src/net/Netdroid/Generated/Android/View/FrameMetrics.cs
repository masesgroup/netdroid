/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region FrameMetrics declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html"/>
    /// </summary>
    public partial class FrameMetrics : MASES.JCOBridge.C2JBridge.JVMBridgeBase<FrameMetrics>
    {
        const string _bridgeClassName = "android.view.FrameMetrics";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public FrameMetrics() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public FrameMetrics(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region FrameMetrics implementation
    public partial class FrameMetrics
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html#%3Cinit%3E(android.view.FrameMetrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.FrameMetrics"/></param>
        public FrameMetrics(Android.View.FrameMetrics arg0)
            : base(arg0)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html#ANIMATION_DURATION"/>
        /// </summary>
        public static int ANIMATION_DURATION { get { if (!_ANIMATION_DURATIONReady) { _ANIMATION_DURATIONContent = SGetField<int>(LocalBridgeClazz, "ANIMATION_DURATION"); _ANIMATION_DURATIONReady = true; } return _ANIMATION_DURATIONContent; } }
        private static int _ANIMATION_DURATIONContent = default;
        private static bool _ANIMATION_DURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html#COMMAND_ISSUE_DURATION"/>
        /// </summary>
        public static int COMMAND_ISSUE_DURATION { get { if (!_COMMAND_ISSUE_DURATIONReady) { _COMMAND_ISSUE_DURATIONContent = SGetField<int>(LocalBridgeClazz, "COMMAND_ISSUE_DURATION"); _COMMAND_ISSUE_DURATIONReady = true; } return _COMMAND_ISSUE_DURATIONContent; } }
        private static int _COMMAND_ISSUE_DURATIONContent = default;
        private static bool _COMMAND_ISSUE_DURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html#DEADLINE"/>
        /// </summary>
        public static int DEADLINE { get { if (!_DEADLINEReady) { _DEADLINEContent = SGetField<int>(LocalBridgeClazz, "DEADLINE"); _DEADLINEReady = true; } return _DEADLINEContent; } }
        private static int _DEADLINEContent = default;
        private static bool _DEADLINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html#DRAW_DURATION"/>
        /// </summary>
        public static int DRAW_DURATION { get { if (!_DRAW_DURATIONReady) { _DRAW_DURATIONContent = SGetField<int>(LocalBridgeClazz, "DRAW_DURATION"); _DRAW_DURATIONReady = true; } return _DRAW_DURATIONContent; } }
        private static int _DRAW_DURATIONContent = default;
        private static bool _DRAW_DURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html#FIRST_DRAW_FRAME"/>
        /// </summary>
        public static int FIRST_DRAW_FRAME { get { if (!_FIRST_DRAW_FRAMEReady) { _FIRST_DRAW_FRAMEContent = SGetField<int>(LocalBridgeClazz, "FIRST_DRAW_FRAME"); _FIRST_DRAW_FRAMEReady = true; } return _FIRST_DRAW_FRAMEContent; } }
        private static int _FIRST_DRAW_FRAMEContent = default;
        private static bool _FIRST_DRAW_FRAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html#GPU_DURATION"/>
        /// </summary>
        public static int GPU_DURATION { get { if (!_GPU_DURATIONReady) { _GPU_DURATIONContent = SGetField<int>(LocalBridgeClazz, "GPU_DURATION"); _GPU_DURATIONReady = true; } return _GPU_DURATIONContent; } }
        private static int _GPU_DURATIONContent = default;
        private static bool _GPU_DURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html#INPUT_HANDLING_DURATION"/>
        /// </summary>
        public static int INPUT_HANDLING_DURATION { get { if (!_INPUT_HANDLING_DURATIONReady) { _INPUT_HANDLING_DURATIONContent = SGetField<int>(LocalBridgeClazz, "INPUT_HANDLING_DURATION"); _INPUT_HANDLING_DURATIONReady = true; } return _INPUT_HANDLING_DURATIONContent; } }
        private static int _INPUT_HANDLING_DURATIONContent = default;
        private static bool _INPUT_HANDLING_DURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html#INTENDED_VSYNC_TIMESTAMP"/>
        /// </summary>
        public static int INTENDED_VSYNC_TIMESTAMP { get { if (!_INTENDED_VSYNC_TIMESTAMPReady) { _INTENDED_VSYNC_TIMESTAMPContent = SGetField<int>(LocalBridgeClazz, "INTENDED_VSYNC_TIMESTAMP"); _INTENDED_VSYNC_TIMESTAMPReady = true; } return _INTENDED_VSYNC_TIMESTAMPContent; } }
        private static int _INTENDED_VSYNC_TIMESTAMPContent = default;
        private static bool _INTENDED_VSYNC_TIMESTAMPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html#LAYOUT_MEASURE_DURATION"/>
        /// </summary>
        public static int LAYOUT_MEASURE_DURATION { get { if (!_LAYOUT_MEASURE_DURATIONReady) { _LAYOUT_MEASURE_DURATIONContent = SGetField<int>(LocalBridgeClazz, "LAYOUT_MEASURE_DURATION"); _LAYOUT_MEASURE_DURATIONReady = true; } return _LAYOUT_MEASURE_DURATIONContent; } }
        private static int _LAYOUT_MEASURE_DURATIONContent = default;
        private static bool _LAYOUT_MEASURE_DURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html#SWAP_BUFFERS_DURATION"/>
        /// </summary>
        public static int SWAP_BUFFERS_DURATION { get { if (!_SWAP_BUFFERS_DURATIONReady) { _SWAP_BUFFERS_DURATIONContent = SGetField<int>(LocalBridgeClazz, "SWAP_BUFFERS_DURATION"); _SWAP_BUFFERS_DURATIONReady = true; } return _SWAP_BUFFERS_DURATIONContent; } }
        private static int _SWAP_BUFFERS_DURATIONContent = default;
        private static bool _SWAP_BUFFERS_DURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html#SYNC_DURATION"/>
        /// </summary>
        public static int SYNC_DURATION { get { if (!_SYNC_DURATIONReady) { _SYNC_DURATIONContent = SGetField<int>(LocalBridgeClazz, "SYNC_DURATION"); _SYNC_DURATIONReady = true; } return _SYNC_DURATIONContent; } }
        private static int _SYNC_DURATIONContent = default;
        private static bool _SYNC_DURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html#TOTAL_DURATION"/>
        /// </summary>
        public static int TOTAL_DURATION { get { if (!_TOTAL_DURATIONReady) { _TOTAL_DURATIONContent = SGetField<int>(LocalBridgeClazz, "TOTAL_DURATION"); _TOTAL_DURATIONReady = true; } return _TOTAL_DURATIONContent; } }
        private static int _TOTAL_DURATIONContent = default;
        private static bool _TOTAL_DURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html#UNKNOWN_DELAY_DURATION"/>
        /// </summary>
        public static int UNKNOWN_DELAY_DURATION { get { if (!_UNKNOWN_DELAY_DURATIONReady) { _UNKNOWN_DELAY_DURATIONContent = SGetField<int>(LocalBridgeClazz, "UNKNOWN_DELAY_DURATION"); _UNKNOWN_DELAY_DURATIONReady = true; } return _UNKNOWN_DELAY_DURATIONContent; } }
        private static int _UNKNOWN_DELAY_DURATIONContent = default;
        private static bool _UNKNOWN_DELAY_DURATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html#VSYNC_TIMESTAMP"/>
        /// </summary>
        public static int VSYNC_TIMESTAMP { get { if (!_VSYNC_TIMESTAMPReady) { _VSYNC_TIMESTAMPContent = SGetField<int>(LocalBridgeClazz, "VSYNC_TIMESTAMP"); _VSYNC_TIMESTAMPReady = true; } return _VSYNC_TIMESTAMPContent; } }
        private static int _VSYNC_TIMESTAMPContent = default;
        private static bool _VSYNC_TIMESTAMPReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/FrameMetrics.html#getMetric(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetMetric(int arg0)
        {
            return IExecuteWithSignature<long>("getMetric", "(I)J", arg0);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
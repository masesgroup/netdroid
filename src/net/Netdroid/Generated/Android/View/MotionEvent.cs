/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region MotionEvent
    public partial class MotionEvent
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_BUTTON_PRESS"/>
        /// </summary>
        public static int ACTION_BUTTON_PRESS { get { if (!_ACTION_BUTTON_PRESSReady) { _ACTION_BUTTON_PRESSContent = SGetField<int>(LocalBridgeClazz, "ACTION_BUTTON_PRESS"); _ACTION_BUTTON_PRESSReady = true; } return _ACTION_BUTTON_PRESSContent; } }
        private static int _ACTION_BUTTON_PRESSContent = default;
        private static bool _ACTION_BUTTON_PRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_BUTTON_RELEASE"/>
        /// </summary>
        public static int ACTION_BUTTON_RELEASE { get { if (!_ACTION_BUTTON_RELEASEReady) { _ACTION_BUTTON_RELEASEContent = SGetField<int>(LocalBridgeClazz, "ACTION_BUTTON_RELEASE"); _ACTION_BUTTON_RELEASEReady = true; } return _ACTION_BUTTON_RELEASEContent; } }
        private static int _ACTION_BUTTON_RELEASEContent = default;
        private static bool _ACTION_BUTTON_RELEASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_CANCEL"/>
        /// </summary>
        public static int ACTION_CANCEL { get { if (!_ACTION_CANCELReady) { _ACTION_CANCELContent = SGetField<int>(LocalBridgeClazz, "ACTION_CANCEL"); _ACTION_CANCELReady = true; } return _ACTION_CANCELContent; } }
        private static int _ACTION_CANCELContent = default;
        private static bool _ACTION_CANCELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_DOWN"/>
        /// </summary>
        public static int ACTION_DOWN { get { if (!_ACTION_DOWNReady) { _ACTION_DOWNContent = SGetField<int>(LocalBridgeClazz, "ACTION_DOWN"); _ACTION_DOWNReady = true; } return _ACTION_DOWNContent; } }
        private static int _ACTION_DOWNContent = default;
        private static bool _ACTION_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_HOVER_ENTER"/>
        /// </summary>
        public static int ACTION_HOVER_ENTER { get { if (!_ACTION_HOVER_ENTERReady) { _ACTION_HOVER_ENTERContent = SGetField<int>(LocalBridgeClazz, "ACTION_HOVER_ENTER"); _ACTION_HOVER_ENTERReady = true; } return _ACTION_HOVER_ENTERContent; } }
        private static int _ACTION_HOVER_ENTERContent = default;
        private static bool _ACTION_HOVER_ENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_HOVER_EXIT"/>
        /// </summary>
        public static int ACTION_HOVER_EXIT { get { if (!_ACTION_HOVER_EXITReady) { _ACTION_HOVER_EXITContent = SGetField<int>(LocalBridgeClazz, "ACTION_HOVER_EXIT"); _ACTION_HOVER_EXITReady = true; } return _ACTION_HOVER_EXITContent; } }
        private static int _ACTION_HOVER_EXITContent = default;
        private static bool _ACTION_HOVER_EXITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_HOVER_MOVE"/>
        /// </summary>
        public static int ACTION_HOVER_MOVE { get { if (!_ACTION_HOVER_MOVEReady) { _ACTION_HOVER_MOVEContent = SGetField<int>(LocalBridgeClazz, "ACTION_HOVER_MOVE"); _ACTION_HOVER_MOVEReady = true; } return _ACTION_HOVER_MOVEContent; } }
        private static int _ACTION_HOVER_MOVEContent = default;
        private static bool _ACTION_HOVER_MOVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_MASK"/>
        /// </summary>
        public static int ACTION_MASK { get { if (!_ACTION_MASKReady) { _ACTION_MASKContent = SGetField<int>(LocalBridgeClazz, "ACTION_MASK"); _ACTION_MASKReady = true; } return _ACTION_MASKContent; } }
        private static int _ACTION_MASKContent = default;
        private static bool _ACTION_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_MOVE"/>
        /// </summary>
        public static int ACTION_MOVE { get { if (!_ACTION_MOVEReady) { _ACTION_MOVEContent = SGetField<int>(LocalBridgeClazz, "ACTION_MOVE"); _ACTION_MOVEReady = true; } return _ACTION_MOVEContent; } }
        private static int _ACTION_MOVEContent = default;
        private static bool _ACTION_MOVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_OUTSIDE"/>
        /// </summary>
        public static int ACTION_OUTSIDE { get { if (!_ACTION_OUTSIDEReady) { _ACTION_OUTSIDEContent = SGetField<int>(LocalBridgeClazz, "ACTION_OUTSIDE"); _ACTION_OUTSIDEReady = true; } return _ACTION_OUTSIDEContent; } }
        private static int _ACTION_OUTSIDEContent = default;
        private static bool _ACTION_OUTSIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_POINTER_1_DOWN"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ACTION_POINTER_1_DOWN { get { if (!_ACTION_POINTER_1_DOWNReady) { _ACTION_POINTER_1_DOWNContent = SGetField<int>(LocalBridgeClazz, "ACTION_POINTER_1_DOWN"); _ACTION_POINTER_1_DOWNReady = true; } return _ACTION_POINTER_1_DOWNContent; } }
        private static int _ACTION_POINTER_1_DOWNContent = default;
        private static bool _ACTION_POINTER_1_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_POINTER_1_UP"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ACTION_POINTER_1_UP { get { if (!_ACTION_POINTER_1_UPReady) { _ACTION_POINTER_1_UPContent = SGetField<int>(LocalBridgeClazz, "ACTION_POINTER_1_UP"); _ACTION_POINTER_1_UPReady = true; } return _ACTION_POINTER_1_UPContent; } }
        private static int _ACTION_POINTER_1_UPContent = default;
        private static bool _ACTION_POINTER_1_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_POINTER_2_DOWN"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ACTION_POINTER_2_DOWN { get { if (!_ACTION_POINTER_2_DOWNReady) { _ACTION_POINTER_2_DOWNContent = SGetField<int>(LocalBridgeClazz, "ACTION_POINTER_2_DOWN"); _ACTION_POINTER_2_DOWNReady = true; } return _ACTION_POINTER_2_DOWNContent; } }
        private static int _ACTION_POINTER_2_DOWNContent = default;
        private static bool _ACTION_POINTER_2_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_POINTER_2_UP"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ACTION_POINTER_2_UP { get { if (!_ACTION_POINTER_2_UPReady) { _ACTION_POINTER_2_UPContent = SGetField<int>(LocalBridgeClazz, "ACTION_POINTER_2_UP"); _ACTION_POINTER_2_UPReady = true; } return _ACTION_POINTER_2_UPContent; } }
        private static int _ACTION_POINTER_2_UPContent = default;
        private static bool _ACTION_POINTER_2_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_POINTER_3_DOWN"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ACTION_POINTER_3_DOWN { get { if (!_ACTION_POINTER_3_DOWNReady) { _ACTION_POINTER_3_DOWNContent = SGetField<int>(LocalBridgeClazz, "ACTION_POINTER_3_DOWN"); _ACTION_POINTER_3_DOWNReady = true; } return _ACTION_POINTER_3_DOWNContent; } }
        private static int _ACTION_POINTER_3_DOWNContent = default;
        private static bool _ACTION_POINTER_3_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_POINTER_3_UP"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ACTION_POINTER_3_UP { get { if (!_ACTION_POINTER_3_UPReady) { _ACTION_POINTER_3_UPContent = SGetField<int>(LocalBridgeClazz, "ACTION_POINTER_3_UP"); _ACTION_POINTER_3_UPReady = true; } return _ACTION_POINTER_3_UPContent; } }
        private static int _ACTION_POINTER_3_UPContent = default;
        private static bool _ACTION_POINTER_3_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_POINTER_DOWN"/>
        /// </summary>
        public static int ACTION_POINTER_DOWN { get { if (!_ACTION_POINTER_DOWNReady) { _ACTION_POINTER_DOWNContent = SGetField<int>(LocalBridgeClazz, "ACTION_POINTER_DOWN"); _ACTION_POINTER_DOWNReady = true; } return _ACTION_POINTER_DOWNContent; } }
        private static int _ACTION_POINTER_DOWNContent = default;
        private static bool _ACTION_POINTER_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_POINTER_ID_MASK"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ACTION_POINTER_ID_MASK { get { if (!_ACTION_POINTER_ID_MASKReady) { _ACTION_POINTER_ID_MASKContent = SGetField<int>(LocalBridgeClazz, "ACTION_POINTER_ID_MASK"); _ACTION_POINTER_ID_MASKReady = true; } return _ACTION_POINTER_ID_MASKContent; } }
        private static int _ACTION_POINTER_ID_MASKContent = default;
        private static bool _ACTION_POINTER_ID_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_POINTER_ID_SHIFT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int ACTION_POINTER_ID_SHIFT { get { if (!_ACTION_POINTER_ID_SHIFTReady) { _ACTION_POINTER_ID_SHIFTContent = SGetField<int>(LocalBridgeClazz, "ACTION_POINTER_ID_SHIFT"); _ACTION_POINTER_ID_SHIFTReady = true; } return _ACTION_POINTER_ID_SHIFTContent; } }
        private static int _ACTION_POINTER_ID_SHIFTContent = default;
        private static bool _ACTION_POINTER_ID_SHIFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_POINTER_INDEX_MASK"/>
        /// </summary>
        public static int ACTION_POINTER_INDEX_MASK { get { if (!_ACTION_POINTER_INDEX_MASKReady) { _ACTION_POINTER_INDEX_MASKContent = SGetField<int>(LocalBridgeClazz, "ACTION_POINTER_INDEX_MASK"); _ACTION_POINTER_INDEX_MASKReady = true; } return _ACTION_POINTER_INDEX_MASKContent; } }
        private static int _ACTION_POINTER_INDEX_MASKContent = default;
        private static bool _ACTION_POINTER_INDEX_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_POINTER_INDEX_SHIFT"/>
        /// </summary>
        public static int ACTION_POINTER_INDEX_SHIFT { get { if (!_ACTION_POINTER_INDEX_SHIFTReady) { _ACTION_POINTER_INDEX_SHIFTContent = SGetField<int>(LocalBridgeClazz, "ACTION_POINTER_INDEX_SHIFT"); _ACTION_POINTER_INDEX_SHIFTReady = true; } return _ACTION_POINTER_INDEX_SHIFTContent; } }
        private static int _ACTION_POINTER_INDEX_SHIFTContent = default;
        private static bool _ACTION_POINTER_INDEX_SHIFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_POINTER_UP"/>
        /// </summary>
        public static int ACTION_POINTER_UP { get { if (!_ACTION_POINTER_UPReady) { _ACTION_POINTER_UPContent = SGetField<int>(LocalBridgeClazz, "ACTION_POINTER_UP"); _ACTION_POINTER_UPReady = true; } return _ACTION_POINTER_UPContent; } }
        private static int _ACTION_POINTER_UPContent = default;
        private static bool _ACTION_POINTER_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_SCROLL"/>
        /// </summary>
        public static int ACTION_SCROLL { get { if (!_ACTION_SCROLLReady) { _ACTION_SCROLLContent = SGetField<int>(LocalBridgeClazz, "ACTION_SCROLL"); _ACTION_SCROLLReady = true; } return _ACTION_SCROLLContent; } }
        private static int _ACTION_SCROLLContent = default;
        private static bool _ACTION_SCROLLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#ACTION_UP"/>
        /// </summary>
        public static int ACTION_UP { get { if (!_ACTION_UPReady) { _ACTION_UPContent = SGetField<int>(LocalBridgeClazz, "ACTION_UP"); _ACTION_UPReady = true; } return _ACTION_UPContent; } }
        private static int _ACTION_UPContent = default;
        private static bool _ACTION_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_BRAKE"/>
        /// </summary>
        public static int AXIS_BRAKE { get { if (!_AXIS_BRAKEReady) { _AXIS_BRAKEContent = SGetField<int>(LocalBridgeClazz, "AXIS_BRAKE"); _AXIS_BRAKEReady = true; } return _AXIS_BRAKEContent; } }
        private static int _AXIS_BRAKEContent = default;
        private static bool _AXIS_BRAKEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_DISTANCE"/>
        /// </summary>
        public static int AXIS_DISTANCE { get { if (!_AXIS_DISTANCEReady) { _AXIS_DISTANCEContent = SGetField<int>(LocalBridgeClazz, "AXIS_DISTANCE"); _AXIS_DISTANCEReady = true; } return _AXIS_DISTANCEContent; } }
        private static int _AXIS_DISTANCEContent = default;
        private static bool _AXIS_DISTANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GAS"/>
        /// </summary>
        public static int AXIS_GAS { get { if (!_AXIS_GASReady) { _AXIS_GASContent = SGetField<int>(LocalBridgeClazz, "AXIS_GAS"); _AXIS_GASReady = true; } return _AXIS_GASContent; } }
        private static int _AXIS_GASContent = default;
        private static bool _AXIS_GASReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GENERIC_1"/>
        /// </summary>
        public static int AXIS_GENERIC_1 { get { if (!_AXIS_GENERIC_1Ready) { _AXIS_GENERIC_1Content = SGetField<int>(LocalBridgeClazz, "AXIS_GENERIC_1"); _AXIS_GENERIC_1Ready = true; } return _AXIS_GENERIC_1Content; } }
        private static int _AXIS_GENERIC_1Content = default;
        private static bool _AXIS_GENERIC_1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GENERIC_10"/>
        /// </summary>
        public static int AXIS_GENERIC_10 { get { if (!_AXIS_GENERIC_10Ready) { _AXIS_GENERIC_10Content = SGetField<int>(LocalBridgeClazz, "AXIS_GENERIC_10"); _AXIS_GENERIC_10Ready = true; } return _AXIS_GENERIC_10Content; } }
        private static int _AXIS_GENERIC_10Content = default;
        private static bool _AXIS_GENERIC_10Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GENERIC_11"/>
        /// </summary>
        public static int AXIS_GENERIC_11 { get { if (!_AXIS_GENERIC_11Ready) { _AXIS_GENERIC_11Content = SGetField<int>(LocalBridgeClazz, "AXIS_GENERIC_11"); _AXIS_GENERIC_11Ready = true; } return _AXIS_GENERIC_11Content; } }
        private static int _AXIS_GENERIC_11Content = default;
        private static bool _AXIS_GENERIC_11Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GENERIC_12"/>
        /// </summary>
        public static int AXIS_GENERIC_12 { get { if (!_AXIS_GENERIC_12Ready) { _AXIS_GENERIC_12Content = SGetField<int>(LocalBridgeClazz, "AXIS_GENERIC_12"); _AXIS_GENERIC_12Ready = true; } return _AXIS_GENERIC_12Content; } }
        private static int _AXIS_GENERIC_12Content = default;
        private static bool _AXIS_GENERIC_12Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GENERIC_13"/>
        /// </summary>
        public static int AXIS_GENERIC_13 { get { if (!_AXIS_GENERIC_13Ready) { _AXIS_GENERIC_13Content = SGetField<int>(LocalBridgeClazz, "AXIS_GENERIC_13"); _AXIS_GENERIC_13Ready = true; } return _AXIS_GENERIC_13Content; } }
        private static int _AXIS_GENERIC_13Content = default;
        private static bool _AXIS_GENERIC_13Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GENERIC_14"/>
        /// </summary>
        public static int AXIS_GENERIC_14 { get { if (!_AXIS_GENERIC_14Ready) { _AXIS_GENERIC_14Content = SGetField<int>(LocalBridgeClazz, "AXIS_GENERIC_14"); _AXIS_GENERIC_14Ready = true; } return _AXIS_GENERIC_14Content; } }
        private static int _AXIS_GENERIC_14Content = default;
        private static bool _AXIS_GENERIC_14Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GENERIC_15"/>
        /// </summary>
        public static int AXIS_GENERIC_15 { get { if (!_AXIS_GENERIC_15Ready) { _AXIS_GENERIC_15Content = SGetField<int>(LocalBridgeClazz, "AXIS_GENERIC_15"); _AXIS_GENERIC_15Ready = true; } return _AXIS_GENERIC_15Content; } }
        private static int _AXIS_GENERIC_15Content = default;
        private static bool _AXIS_GENERIC_15Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GENERIC_16"/>
        /// </summary>
        public static int AXIS_GENERIC_16 { get { if (!_AXIS_GENERIC_16Ready) { _AXIS_GENERIC_16Content = SGetField<int>(LocalBridgeClazz, "AXIS_GENERIC_16"); _AXIS_GENERIC_16Ready = true; } return _AXIS_GENERIC_16Content; } }
        private static int _AXIS_GENERIC_16Content = default;
        private static bool _AXIS_GENERIC_16Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GENERIC_2"/>
        /// </summary>
        public static int AXIS_GENERIC_2 { get { if (!_AXIS_GENERIC_2Ready) { _AXIS_GENERIC_2Content = SGetField<int>(LocalBridgeClazz, "AXIS_GENERIC_2"); _AXIS_GENERIC_2Ready = true; } return _AXIS_GENERIC_2Content; } }
        private static int _AXIS_GENERIC_2Content = default;
        private static bool _AXIS_GENERIC_2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GENERIC_3"/>
        /// </summary>
        public static int AXIS_GENERIC_3 { get { if (!_AXIS_GENERIC_3Ready) { _AXIS_GENERIC_3Content = SGetField<int>(LocalBridgeClazz, "AXIS_GENERIC_3"); _AXIS_GENERIC_3Ready = true; } return _AXIS_GENERIC_3Content; } }
        private static int _AXIS_GENERIC_3Content = default;
        private static bool _AXIS_GENERIC_3Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GENERIC_4"/>
        /// </summary>
        public static int AXIS_GENERIC_4 { get { if (!_AXIS_GENERIC_4Ready) { _AXIS_GENERIC_4Content = SGetField<int>(LocalBridgeClazz, "AXIS_GENERIC_4"); _AXIS_GENERIC_4Ready = true; } return _AXIS_GENERIC_4Content; } }
        private static int _AXIS_GENERIC_4Content = default;
        private static bool _AXIS_GENERIC_4Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GENERIC_5"/>
        /// </summary>
        public static int AXIS_GENERIC_5 { get { if (!_AXIS_GENERIC_5Ready) { _AXIS_GENERIC_5Content = SGetField<int>(LocalBridgeClazz, "AXIS_GENERIC_5"); _AXIS_GENERIC_5Ready = true; } return _AXIS_GENERIC_5Content; } }
        private static int _AXIS_GENERIC_5Content = default;
        private static bool _AXIS_GENERIC_5Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GENERIC_6"/>
        /// </summary>
        public static int AXIS_GENERIC_6 { get { if (!_AXIS_GENERIC_6Ready) { _AXIS_GENERIC_6Content = SGetField<int>(LocalBridgeClazz, "AXIS_GENERIC_6"); _AXIS_GENERIC_6Ready = true; } return _AXIS_GENERIC_6Content; } }
        private static int _AXIS_GENERIC_6Content = default;
        private static bool _AXIS_GENERIC_6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GENERIC_7"/>
        /// </summary>
        public static int AXIS_GENERIC_7 { get { if (!_AXIS_GENERIC_7Ready) { _AXIS_GENERIC_7Content = SGetField<int>(LocalBridgeClazz, "AXIS_GENERIC_7"); _AXIS_GENERIC_7Ready = true; } return _AXIS_GENERIC_7Content; } }
        private static int _AXIS_GENERIC_7Content = default;
        private static bool _AXIS_GENERIC_7Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GENERIC_8"/>
        /// </summary>
        public static int AXIS_GENERIC_8 { get { if (!_AXIS_GENERIC_8Ready) { _AXIS_GENERIC_8Content = SGetField<int>(LocalBridgeClazz, "AXIS_GENERIC_8"); _AXIS_GENERIC_8Ready = true; } return _AXIS_GENERIC_8Content; } }
        private static int _AXIS_GENERIC_8Content = default;
        private static bool _AXIS_GENERIC_8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GENERIC_9"/>
        /// </summary>
        public static int AXIS_GENERIC_9 { get { if (!_AXIS_GENERIC_9Ready) { _AXIS_GENERIC_9Content = SGetField<int>(LocalBridgeClazz, "AXIS_GENERIC_9"); _AXIS_GENERIC_9Ready = true; } return _AXIS_GENERIC_9Content; } }
        private static int _AXIS_GENERIC_9Content = default;
        private static bool _AXIS_GENERIC_9Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GESTURE_PINCH_SCALE_FACTOR"/>
        /// </summary>
        public static int AXIS_GESTURE_PINCH_SCALE_FACTOR { get { if (!_AXIS_GESTURE_PINCH_SCALE_FACTORReady) { _AXIS_GESTURE_PINCH_SCALE_FACTORContent = SGetField<int>(LocalBridgeClazz, "AXIS_GESTURE_PINCH_SCALE_FACTOR"); _AXIS_GESTURE_PINCH_SCALE_FACTORReady = true; } return _AXIS_GESTURE_PINCH_SCALE_FACTORContent; } }
        private static int _AXIS_GESTURE_PINCH_SCALE_FACTORContent = default;
        private static bool _AXIS_GESTURE_PINCH_SCALE_FACTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GESTURE_SCROLL_X_DISTANCE"/>
        /// </summary>
        public static int AXIS_GESTURE_SCROLL_X_DISTANCE { get { if (!_AXIS_GESTURE_SCROLL_X_DISTANCEReady) { _AXIS_GESTURE_SCROLL_X_DISTANCEContent = SGetField<int>(LocalBridgeClazz, "AXIS_GESTURE_SCROLL_X_DISTANCE"); _AXIS_GESTURE_SCROLL_X_DISTANCEReady = true; } return _AXIS_GESTURE_SCROLL_X_DISTANCEContent; } }
        private static int _AXIS_GESTURE_SCROLL_X_DISTANCEContent = default;
        private static bool _AXIS_GESTURE_SCROLL_X_DISTANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GESTURE_SCROLL_Y_DISTANCE"/>
        /// </summary>
        public static int AXIS_GESTURE_SCROLL_Y_DISTANCE { get { if (!_AXIS_GESTURE_SCROLL_Y_DISTANCEReady) { _AXIS_GESTURE_SCROLL_Y_DISTANCEContent = SGetField<int>(LocalBridgeClazz, "AXIS_GESTURE_SCROLL_Y_DISTANCE"); _AXIS_GESTURE_SCROLL_Y_DISTANCEReady = true; } return _AXIS_GESTURE_SCROLL_Y_DISTANCEContent; } }
        private static int _AXIS_GESTURE_SCROLL_Y_DISTANCEContent = default;
        private static bool _AXIS_GESTURE_SCROLL_Y_DISTANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GESTURE_X_OFFSET"/>
        /// </summary>
        public static int AXIS_GESTURE_X_OFFSET { get { if (!_AXIS_GESTURE_X_OFFSETReady) { _AXIS_GESTURE_X_OFFSETContent = SGetField<int>(LocalBridgeClazz, "AXIS_GESTURE_X_OFFSET"); _AXIS_GESTURE_X_OFFSETReady = true; } return _AXIS_GESTURE_X_OFFSETContent; } }
        private static int _AXIS_GESTURE_X_OFFSETContent = default;
        private static bool _AXIS_GESTURE_X_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_GESTURE_Y_OFFSET"/>
        /// </summary>
        public static int AXIS_GESTURE_Y_OFFSET { get { if (!_AXIS_GESTURE_Y_OFFSETReady) { _AXIS_GESTURE_Y_OFFSETContent = SGetField<int>(LocalBridgeClazz, "AXIS_GESTURE_Y_OFFSET"); _AXIS_GESTURE_Y_OFFSETReady = true; } return _AXIS_GESTURE_Y_OFFSETContent; } }
        private static int _AXIS_GESTURE_Y_OFFSETContent = default;
        private static bool _AXIS_GESTURE_Y_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_HAT_X"/>
        /// </summary>
        public static int AXIS_HAT_X { get { if (!_AXIS_HAT_XReady) { _AXIS_HAT_XContent = SGetField<int>(LocalBridgeClazz, "AXIS_HAT_X"); _AXIS_HAT_XReady = true; } return _AXIS_HAT_XContent; } }
        private static int _AXIS_HAT_XContent = default;
        private static bool _AXIS_HAT_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_HAT_Y"/>
        /// </summary>
        public static int AXIS_HAT_Y { get { if (!_AXIS_HAT_YReady) { _AXIS_HAT_YContent = SGetField<int>(LocalBridgeClazz, "AXIS_HAT_Y"); _AXIS_HAT_YReady = true; } return _AXIS_HAT_YContent; } }
        private static int _AXIS_HAT_YContent = default;
        private static bool _AXIS_HAT_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_HSCROLL"/>
        /// </summary>
        public static int AXIS_HSCROLL { get { if (!_AXIS_HSCROLLReady) { _AXIS_HSCROLLContent = SGetField<int>(LocalBridgeClazz, "AXIS_HSCROLL"); _AXIS_HSCROLLReady = true; } return _AXIS_HSCROLLContent; } }
        private static int _AXIS_HSCROLLContent = default;
        private static bool _AXIS_HSCROLLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_LTRIGGER"/>
        /// </summary>
        public static int AXIS_LTRIGGER { get { if (!_AXIS_LTRIGGERReady) { _AXIS_LTRIGGERContent = SGetField<int>(LocalBridgeClazz, "AXIS_LTRIGGER"); _AXIS_LTRIGGERReady = true; } return _AXIS_LTRIGGERContent; } }
        private static int _AXIS_LTRIGGERContent = default;
        private static bool _AXIS_LTRIGGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_ORIENTATION"/>
        /// </summary>
        public static int AXIS_ORIENTATION { get { if (!_AXIS_ORIENTATIONReady) { _AXIS_ORIENTATIONContent = SGetField<int>(LocalBridgeClazz, "AXIS_ORIENTATION"); _AXIS_ORIENTATIONReady = true; } return _AXIS_ORIENTATIONContent; } }
        private static int _AXIS_ORIENTATIONContent = default;
        private static bool _AXIS_ORIENTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_PRESSURE"/>
        /// </summary>
        public static int AXIS_PRESSURE { get { if (!_AXIS_PRESSUREReady) { _AXIS_PRESSUREContent = SGetField<int>(LocalBridgeClazz, "AXIS_PRESSURE"); _AXIS_PRESSUREReady = true; } return _AXIS_PRESSUREContent; } }
        private static int _AXIS_PRESSUREContent = default;
        private static bool _AXIS_PRESSUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_RELATIVE_X"/>
        /// </summary>
        public static int AXIS_RELATIVE_X { get { if (!_AXIS_RELATIVE_XReady) { _AXIS_RELATIVE_XContent = SGetField<int>(LocalBridgeClazz, "AXIS_RELATIVE_X"); _AXIS_RELATIVE_XReady = true; } return _AXIS_RELATIVE_XContent; } }
        private static int _AXIS_RELATIVE_XContent = default;
        private static bool _AXIS_RELATIVE_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_RELATIVE_Y"/>
        /// </summary>
        public static int AXIS_RELATIVE_Y { get { if (!_AXIS_RELATIVE_YReady) { _AXIS_RELATIVE_YContent = SGetField<int>(LocalBridgeClazz, "AXIS_RELATIVE_Y"); _AXIS_RELATIVE_YReady = true; } return _AXIS_RELATIVE_YContent; } }
        private static int _AXIS_RELATIVE_YContent = default;
        private static bool _AXIS_RELATIVE_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_RTRIGGER"/>
        /// </summary>
        public static int AXIS_RTRIGGER { get { if (!_AXIS_RTRIGGERReady) { _AXIS_RTRIGGERContent = SGetField<int>(LocalBridgeClazz, "AXIS_RTRIGGER"); _AXIS_RTRIGGERReady = true; } return _AXIS_RTRIGGERContent; } }
        private static int _AXIS_RTRIGGERContent = default;
        private static bool _AXIS_RTRIGGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_RUDDER"/>
        /// </summary>
        public static int AXIS_RUDDER { get { if (!_AXIS_RUDDERReady) { _AXIS_RUDDERContent = SGetField<int>(LocalBridgeClazz, "AXIS_RUDDER"); _AXIS_RUDDERReady = true; } return _AXIS_RUDDERContent; } }
        private static int _AXIS_RUDDERContent = default;
        private static bool _AXIS_RUDDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_RX"/>
        /// </summary>
        public static int AXIS_RX { get { if (!_AXIS_RXReady) { _AXIS_RXContent = SGetField<int>(LocalBridgeClazz, "AXIS_RX"); _AXIS_RXReady = true; } return _AXIS_RXContent; } }
        private static int _AXIS_RXContent = default;
        private static bool _AXIS_RXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_RY"/>
        /// </summary>
        public static int AXIS_RY { get { if (!_AXIS_RYReady) { _AXIS_RYContent = SGetField<int>(LocalBridgeClazz, "AXIS_RY"); _AXIS_RYReady = true; } return _AXIS_RYContent; } }
        private static int _AXIS_RYContent = default;
        private static bool _AXIS_RYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_RZ"/>
        /// </summary>
        public static int AXIS_RZ { get { if (!_AXIS_RZReady) { _AXIS_RZContent = SGetField<int>(LocalBridgeClazz, "AXIS_RZ"); _AXIS_RZReady = true; } return _AXIS_RZContent; } }
        private static int _AXIS_RZContent = default;
        private static bool _AXIS_RZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_SCROLL"/>
        /// </summary>
        public static int AXIS_SCROLL { get { if (!_AXIS_SCROLLReady) { _AXIS_SCROLLContent = SGetField<int>(LocalBridgeClazz, "AXIS_SCROLL"); _AXIS_SCROLLReady = true; } return _AXIS_SCROLLContent; } }
        private static int _AXIS_SCROLLContent = default;
        private static bool _AXIS_SCROLLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_SIZE"/>
        /// </summary>
        public static int AXIS_SIZE { get { if (!_AXIS_SIZEReady) { _AXIS_SIZEContent = SGetField<int>(LocalBridgeClazz, "AXIS_SIZE"); _AXIS_SIZEReady = true; } return _AXIS_SIZEContent; } }
        private static int _AXIS_SIZEContent = default;
        private static bool _AXIS_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_THROTTLE"/>
        /// </summary>
        public static int AXIS_THROTTLE { get { if (!_AXIS_THROTTLEReady) { _AXIS_THROTTLEContent = SGetField<int>(LocalBridgeClazz, "AXIS_THROTTLE"); _AXIS_THROTTLEReady = true; } return _AXIS_THROTTLEContent; } }
        private static int _AXIS_THROTTLEContent = default;
        private static bool _AXIS_THROTTLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_TILT"/>
        /// </summary>
        public static int AXIS_TILT { get { if (!_AXIS_TILTReady) { _AXIS_TILTContent = SGetField<int>(LocalBridgeClazz, "AXIS_TILT"); _AXIS_TILTReady = true; } return _AXIS_TILTContent; } }
        private static int _AXIS_TILTContent = default;
        private static bool _AXIS_TILTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_TOOL_MAJOR"/>
        /// </summary>
        public static int AXIS_TOOL_MAJOR { get { if (!_AXIS_TOOL_MAJORReady) { _AXIS_TOOL_MAJORContent = SGetField<int>(LocalBridgeClazz, "AXIS_TOOL_MAJOR"); _AXIS_TOOL_MAJORReady = true; } return _AXIS_TOOL_MAJORContent; } }
        private static int _AXIS_TOOL_MAJORContent = default;
        private static bool _AXIS_TOOL_MAJORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_TOOL_MINOR"/>
        /// </summary>
        public static int AXIS_TOOL_MINOR { get { if (!_AXIS_TOOL_MINORReady) { _AXIS_TOOL_MINORContent = SGetField<int>(LocalBridgeClazz, "AXIS_TOOL_MINOR"); _AXIS_TOOL_MINORReady = true; } return _AXIS_TOOL_MINORContent; } }
        private static int _AXIS_TOOL_MINORContent = default;
        private static bool _AXIS_TOOL_MINORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_TOUCH_MAJOR"/>
        /// </summary>
        public static int AXIS_TOUCH_MAJOR { get { if (!_AXIS_TOUCH_MAJORReady) { _AXIS_TOUCH_MAJORContent = SGetField<int>(LocalBridgeClazz, "AXIS_TOUCH_MAJOR"); _AXIS_TOUCH_MAJORReady = true; } return _AXIS_TOUCH_MAJORContent; } }
        private static int _AXIS_TOUCH_MAJORContent = default;
        private static bool _AXIS_TOUCH_MAJORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_TOUCH_MINOR"/>
        /// </summary>
        public static int AXIS_TOUCH_MINOR { get { if (!_AXIS_TOUCH_MINORReady) { _AXIS_TOUCH_MINORContent = SGetField<int>(LocalBridgeClazz, "AXIS_TOUCH_MINOR"); _AXIS_TOUCH_MINORReady = true; } return _AXIS_TOUCH_MINORContent; } }
        private static int _AXIS_TOUCH_MINORContent = default;
        private static bool _AXIS_TOUCH_MINORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_VSCROLL"/>
        /// </summary>
        public static int AXIS_VSCROLL { get { if (!_AXIS_VSCROLLReady) { _AXIS_VSCROLLContent = SGetField<int>(LocalBridgeClazz, "AXIS_VSCROLL"); _AXIS_VSCROLLReady = true; } return _AXIS_VSCROLLContent; } }
        private static int _AXIS_VSCROLLContent = default;
        private static bool _AXIS_VSCROLLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_WHEEL"/>
        /// </summary>
        public static int AXIS_WHEEL { get { if (!_AXIS_WHEELReady) { _AXIS_WHEELContent = SGetField<int>(LocalBridgeClazz, "AXIS_WHEEL"); _AXIS_WHEELReady = true; } return _AXIS_WHEELContent; } }
        private static int _AXIS_WHEELContent = default;
        private static bool _AXIS_WHEELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_X"/>
        /// </summary>
        public static int AXIS_X { get { if (!_AXIS_XReady) { _AXIS_XContent = SGetField<int>(LocalBridgeClazz, "AXIS_X"); _AXIS_XReady = true; } return _AXIS_XContent; } }
        private static int _AXIS_XContent = default;
        private static bool _AXIS_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_Y"/>
        /// </summary>
        public static int AXIS_Y { get { if (!_AXIS_YReady) { _AXIS_YContent = SGetField<int>(LocalBridgeClazz, "AXIS_Y"); _AXIS_YReady = true; } return _AXIS_YContent; } }
        private static int _AXIS_YContent = default;
        private static bool _AXIS_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#AXIS_Z"/>
        /// </summary>
        public static int AXIS_Z { get { if (!_AXIS_ZReady) { _AXIS_ZContent = SGetField<int>(LocalBridgeClazz, "AXIS_Z"); _AXIS_ZReady = true; } return _AXIS_ZContent; } }
        private static int _AXIS_ZContent = default;
        private static bool _AXIS_ZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#BUTTON_BACK"/>
        /// </summary>
        public static int BUTTON_BACK { get { if (!_BUTTON_BACKReady) { _BUTTON_BACKContent = SGetField<int>(LocalBridgeClazz, "BUTTON_BACK"); _BUTTON_BACKReady = true; } return _BUTTON_BACKContent; } }
        private static int _BUTTON_BACKContent = default;
        private static bool _BUTTON_BACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#BUTTON_FORWARD"/>
        /// </summary>
        public static int BUTTON_FORWARD { get { if (!_BUTTON_FORWARDReady) { _BUTTON_FORWARDContent = SGetField<int>(LocalBridgeClazz, "BUTTON_FORWARD"); _BUTTON_FORWARDReady = true; } return _BUTTON_FORWARDContent; } }
        private static int _BUTTON_FORWARDContent = default;
        private static bool _BUTTON_FORWARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#BUTTON_PRIMARY"/>
        /// </summary>
        public static int BUTTON_PRIMARY { get { if (!_BUTTON_PRIMARYReady) { _BUTTON_PRIMARYContent = SGetField<int>(LocalBridgeClazz, "BUTTON_PRIMARY"); _BUTTON_PRIMARYReady = true; } return _BUTTON_PRIMARYContent; } }
        private static int _BUTTON_PRIMARYContent = default;
        private static bool _BUTTON_PRIMARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#BUTTON_SECONDARY"/>
        /// </summary>
        public static int BUTTON_SECONDARY { get { if (!_BUTTON_SECONDARYReady) { _BUTTON_SECONDARYContent = SGetField<int>(LocalBridgeClazz, "BUTTON_SECONDARY"); _BUTTON_SECONDARYReady = true; } return _BUTTON_SECONDARYContent; } }
        private static int _BUTTON_SECONDARYContent = default;
        private static bool _BUTTON_SECONDARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#BUTTON_STYLUS_PRIMARY"/>
        /// </summary>
        public static int BUTTON_STYLUS_PRIMARY { get { if (!_BUTTON_STYLUS_PRIMARYReady) { _BUTTON_STYLUS_PRIMARYContent = SGetField<int>(LocalBridgeClazz, "BUTTON_STYLUS_PRIMARY"); _BUTTON_STYLUS_PRIMARYReady = true; } return _BUTTON_STYLUS_PRIMARYContent; } }
        private static int _BUTTON_STYLUS_PRIMARYContent = default;
        private static bool _BUTTON_STYLUS_PRIMARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#BUTTON_STYLUS_SECONDARY"/>
        /// </summary>
        public static int BUTTON_STYLUS_SECONDARY { get { if (!_BUTTON_STYLUS_SECONDARYReady) { _BUTTON_STYLUS_SECONDARYContent = SGetField<int>(LocalBridgeClazz, "BUTTON_STYLUS_SECONDARY"); _BUTTON_STYLUS_SECONDARYReady = true; } return _BUTTON_STYLUS_SECONDARYContent; } }
        private static int _BUTTON_STYLUS_SECONDARYContent = default;
        private static bool _BUTTON_STYLUS_SECONDARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#BUTTON_TERTIARY"/>
        /// </summary>
        public static int BUTTON_TERTIARY { get { if (!_BUTTON_TERTIARYReady) { _BUTTON_TERTIARYContent = SGetField<int>(LocalBridgeClazz, "BUTTON_TERTIARY"); _BUTTON_TERTIARYReady = true; } return _BUTTON_TERTIARYContent; } }
        private static int _BUTTON_TERTIARYContent = default;
        private static bool _BUTTON_TERTIARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#CLASSIFICATION_AMBIGUOUS_GESTURE"/>
        /// </summary>
        public static int CLASSIFICATION_AMBIGUOUS_GESTURE { get { if (!_CLASSIFICATION_AMBIGUOUS_GESTUREReady) { _CLASSIFICATION_AMBIGUOUS_GESTUREContent = SGetField<int>(LocalBridgeClazz, "CLASSIFICATION_AMBIGUOUS_GESTURE"); _CLASSIFICATION_AMBIGUOUS_GESTUREReady = true; } return _CLASSIFICATION_AMBIGUOUS_GESTUREContent; } }
        private static int _CLASSIFICATION_AMBIGUOUS_GESTUREContent = default;
        private static bool _CLASSIFICATION_AMBIGUOUS_GESTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#CLASSIFICATION_DEEP_PRESS"/>
        /// </summary>
        public static int CLASSIFICATION_DEEP_PRESS { get { if (!_CLASSIFICATION_DEEP_PRESSReady) { _CLASSIFICATION_DEEP_PRESSContent = SGetField<int>(LocalBridgeClazz, "CLASSIFICATION_DEEP_PRESS"); _CLASSIFICATION_DEEP_PRESSReady = true; } return _CLASSIFICATION_DEEP_PRESSContent; } }
        private static int _CLASSIFICATION_DEEP_PRESSContent = default;
        private static bool _CLASSIFICATION_DEEP_PRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#CLASSIFICATION_NONE"/>
        /// </summary>
        public static int CLASSIFICATION_NONE { get { if (!_CLASSIFICATION_NONEReady) { _CLASSIFICATION_NONEContent = SGetField<int>(LocalBridgeClazz, "CLASSIFICATION_NONE"); _CLASSIFICATION_NONEReady = true; } return _CLASSIFICATION_NONEContent; } }
        private static int _CLASSIFICATION_NONEContent = default;
        private static bool _CLASSIFICATION_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#CLASSIFICATION_PINCH"/>
        /// </summary>
        public static int CLASSIFICATION_PINCH { get { if (!_CLASSIFICATION_PINCHReady) { _CLASSIFICATION_PINCHContent = SGetField<int>(LocalBridgeClazz, "CLASSIFICATION_PINCH"); _CLASSIFICATION_PINCHReady = true; } return _CLASSIFICATION_PINCHContent; } }
        private static int _CLASSIFICATION_PINCHContent = default;
        private static bool _CLASSIFICATION_PINCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#CLASSIFICATION_TWO_FINGER_SWIPE"/>
        /// </summary>
        public static int CLASSIFICATION_TWO_FINGER_SWIPE { get { if (!_CLASSIFICATION_TWO_FINGER_SWIPEReady) { _CLASSIFICATION_TWO_FINGER_SWIPEContent = SGetField<int>(LocalBridgeClazz, "CLASSIFICATION_TWO_FINGER_SWIPE"); _CLASSIFICATION_TWO_FINGER_SWIPEReady = true; } return _CLASSIFICATION_TWO_FINGER_SWIPEContent; } }
        private static int _CLASSIFICATION_TWO_FINGER_SWIPEContent = default;
        private static bool _CLASSIFICATION_TWO_FINGER_SWIPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#EDGE_BOTTOM"/>
        /// </summary>
        public static int EDGE_BOTTOM { get { if (!_EDGE_BOTTOMReady) { _EDGE_BOTTOMContent = SGetField<int>(LocalBridgeClazz, "EDGE_BOTTOM"); _EDGE_BOTTOMReady = true; } return _EDGE_BOTTOMContent; } }
        private static int _EDGE_BOTTOMContent = default;
        private static bool _EDGE_BOTTOMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#EDGE_LEFT"/>
        /// </summary>
        public static int EDGE_LEFT { get { if (!_EDGE_LEFTReady) { _EDGE_LEFTContent = SGetField<int>(LocalBridgeClazz, "EDGE_LEFT"); _EDGE_LEFTReady = true; } return _EDGE_LEFTContent; } }
        private static int _EDGE_LEFTContent = default;
        private static bool _EDGE_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#EDGE_RIGHT"/>
        /// </summary>
        public static int EDGE_RIGHT { get { if (!_EDGE_RIGHTReady) { _EDGE_RIGHTContent = SGetField<int>(LocalBridgeClazz, "EDGE_RIGHT"); _EDGE_RIGHTReady = true; } return _EDGE_RIGHTContent; } }
        private static int _EDGE_RIGHTContent = default;
        private static bool _EDGE_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#EDGE_TOP"/>
        /// </summary>
        public static int EDGE_TOP { get { if (!_EDGE_TOPReady) { _EDGE_TOPContent = SGetField<int>(LocalBridgeClazz, "EDGE_TOP"); _EDGE_TOPReady = true; } return _EDGE_TOPContent; } }
        private static int _EDGE_TOPContent = default;
        private static bool _EDGE_TOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#FLAG_CANCELED"/>
        /// </summary>
        public static int FLAG_CANCELED { get { if (!_FLAG_CANCELEDReady) { _FLAG_CANCELEDContent = SGetField<int>(LocalBridgeClazz, "FLAG_CANCELED"); _FLAG_CANCELEDReady = true; } return _FLAG_CANCELEDContent; } }
        private static int _FLAG_CANCELEDContent = default;
        private static bool _FLAG_CANCELEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#FLAG_WINDOW_IS_OBSCURED"/>
        /// </summary>
        public static int FLAG_WINDOW_IS_OBSCURED { get { if (!_FLAG_WINDOW_IS_OBSCUREDReady) { _FLAG_WINDOW_IS_OBSCUREDContent = SGetField<int>(LocalBridgeClazz, "FLAG_WINDOW_IS_OBSCURED"); _FLAG_WINDOW_IS_OBSCUREDReady = true; } return _FLAG_WINDOW_IS_OBSCUREDContent; } }
        private static int _FLAG_WINDOW_IS_OBSCUREDContent = default;
        private static bool _FLAG_WINDOW_IS_OBSCUREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#FLAG_WINDOW_IS_PARTIALLY_OBSCURED"/>
        /// </summary>
        public static int FLAG_WINDOW_IS_PARTIALLY_OBSCURED { get { if (!_FLAG_WINDOW_IS_PARTIALLY_OBSCUREDReady) { _FLAG_WINDOW_IS_PARTIALLY_OBSCUREDContent = SGetField<int>(LocalBridgeClazz, "FLAG_WINDOW_IS_PARTIALLY_OBSCURED"); _FLAG_WINDOW_IS_PARTIALLY_OBSCUREDReady = true; } return _FLAG_WINDOW_IS_PARTIALLY_OBSCUREDContent; } }
        private static int _FLAG_WINDOW_IS_PARTIALLY_OBSCUREDContent = default;
        private static bool _FLAG_WINDOW_IS_PARTIALLY_OBSCUREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#INVALID_POINTER_ID"/>
        /// </summary>
        public static int INVALID_POINTER_ID { get { if (!_INVALID_POINTER_IDReady) { _INVALID_POINTER_IDContent = SGetField<int>(LocalBridgeClazz, "INVALID_POINTER_ID"); _INVALID_POINTER_IDReady = true; } return _INVALID_POINTER_IDContent; } }
        private static int _INVALID_POINTER_IDContent = default;
        private static bool _INVALID_POINTER_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#TOOL_TYPE_ERASER"/>
        /// </summary>
        public static int TOOL_TYPE_ERASER { get { if (!_TOOL_TYPE_ERASERReady) { _TOOL_TYPE_ERASERContent = SGetField<int>(LocalBridgeClazz, "TOOL_TYPE_ERASER"); _TOOL_TYPE_ERASERReady = true; } return _TOOL_TYPE_ERASERContent; } }
        private static int _TOOL_TYPE_ERASERContent = default;
        private static bool _TOOL_TYPE_ERASERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#TOOL_TYPE_FINGER"/>
        /// </summary>
        public static int TOOL_TYPE_FINGER { get { if (!_TOOL_TYPE_FINGERReady) { _TOOL_TYPE_FINGERContent = SGetField<int>(LocalBridgeClazz, "TOOL_TYPE_FINGER"); _TOOL_TYPE_FINGERReady = true; } return _TOOL_TYPE_FINGERContent; } }
        private static int _TOOL_TYPE_FINGERContent = default;
        private static bool _TOOL_TYPE_FINGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#TOOL_TYPE_MOUSE"/>
        /// </summary>
        public static int TOOL_TYPE_MOUSE { get { if (!_TOOL_TYPE_MOUSEReady) { _TOOL_TYPE_MOUSEContent = SGetField<int>(LocalBridgeClazz, "TOOL_TYPE_MOUSE"); _TOOL_TYPE_MOUSEReady = true; } return _TOOL_TYPE_MOUSEContent; } }
        private static int _TOOL_TYPE_MOUSEContent = default;
        private static bool _TOOL_TYPE_MOUSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#TOOL_TYPE_STYLUS"/>
        /// </summary>
        public static int TOOL_TYPE_STYLUS { get { if (!_TOOL_TYPE_STYLUSReady) { _TOOL_TYPE_STYLUSContent = SGetField<int>(LocalBridgeClazz, "TOOL_TYPE_STYLUS"); _TOOL_TYPE_STYLUSReady = true; } return _TOOL_TYPE_STYLUSContent; } }
        private static int _TOOL_TYPE_STYLUSContent = default;
        private static bool _TOOL_TYPE_STYLUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#TOOL_TYPE_UNKNOWN"/>
        /// </summary>
        public static int TOOL_TYPE_UNKNOWN { get { if (!_TOOL_TYPE_UNKNOWNReady) { _TOOL_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "TOOL_TYPE_UNKNOWN"); _TOOL_TYPE_UNKNOWNReady = true; } return _TOOL_TYPE_UNKNOWNContent; } }
        private static int _TOOL_TYPE_UNKNOWNContent = default;
        private static bool _TOOL_TYPE_UNKNOWNReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#obtain(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="Android.View.MotionEvent"/></returns>
        public static Android.View.MotionEvent Obtain(Android.View.MotionEvent arg0)
        {
            return SExecuteWithSignature<Android.View.MotionEvent>(LocalBridgeClazz, "obtain", "(Landroid/view/MotionEvent;)Landroid/view/MotionEvent;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#obtain(long,long,int,float,float,float,float,int,float,float,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        /// <param name="arg6"><see cref="float"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="float"/></param>
        /// <param name="arg9"><see cref="float"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        /// <param name="arg11"><see cref="int"/></param>
        /// <returns><see cref="Android.View.MotionEvent"/></returns>
        public static Android.View.MotionEvent Obtain(long arg0, long arg1, int arg2, float arg3, float arg4, float arg5, float arg6, int arg7, float arg8, float arg9, int arg10, int arg11)
        {
            return SExecute<Android.View.MotionEvent>(LocalBridgeClazz, "obtain", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#obtain(long,long,int,float,float,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <returns><see cref="Android.View.MotionEvent"/></returns>
        public static Android.View.MotionEvent Obtain(long arg0, long arg1, int arg2, float arg3, float arg4, int arg5)
        {
            return SExecute<Android.View.MotionEvent>(LocalBridgeClazz, "obtain", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#obtain(long,long,int,int,android.view.MotionEvent.PointerProperties[],android.view.MotionEvent.PointerCoords[],int,int,float,float,int,int,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.View.MotionEvent.PointerProperties"/></param>
        /// <param name="arg5"><see cref="Android.View.MotionEvent.PointerCoords"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="float"/></param>
        /// <param name="arg9"><see cref="float"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        /// <param name="arg11"><see cref="int"/></param>
        /// <param name="arg12"><see cref="int"/></param>
        /// <param name="arg13"><see cref="int"/></param>
        /// <param name="arg14"><see cref="int"/></param>
        /// <param name="arg15"><see cref="int"/></param>
        /// <returns><see cref="Android.View.MotionEvent"/></returns>
        public static Android.View.MotionEvent Obtain(long arg0, long arg1, int arg2, int arg3, Android.View.MotionEvent.PointerProperties[] arg4, Android.View.MotionEvent.PointerCoords[] arg5, int arg6, int arg7, float arg8, float arg9, int arg10, int arg11, int arg12, int arg13, int arg14, int arg15)
        {
            return SExecute<Android.View.MotionEvent>(LocalBridgeClazz, "obtain", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#obtain(long,long,int,int,android.view.MotionEvent.PointerProperties[],android.view.MotionEvent.PointerCoords[],int,int,float,float,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.View.MotionEvent.PointerProperties"/></param>
        /// <param name="arg5"><see cref="Android.View.MotionEvent.PointerCoords"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="float"/></param>
        /// <param name="arg9"><see cref="float"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        /// <param name="arg11"><see cref="int"/></param>
        /// <param name="arg12"><see cref="int"/></param>
        /// <param name="arg13"><see cref="int"/></param>
        /// <returns><see cref="Android.View.MotionEvent"/></returns>
        public static Android.View.MotionEvent Obtain(long arg0, long arg1, int arg2, int arg3, Android.View.MotionEvent.PointerProperties[] arg4, Android.View.MotionEvent.PointerCoords[] arg5, int arg6, int arg7, float arg8, float arg9, int arg10, int arg11, int arg12, int arg13)
        {
            return SExecute<Android.View.MotionEvent>(LocalBridgeClazz, "obtain", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="float"/></param>
        /// <param name="arg6"><see cref="float"/></param>
        /// <param name="arg7"><see cref="float"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="float"/></param>
        /// <param name="arg10"><see cref="float"/></param>
        /// <param name="arg11"><see cref="int"/></param>
        /// <param name="arg12"><see cref="int"/></param>
        /// <returns><see cref="Android.View.MotionEvent"/></returns>
        [global::System.Obsolete()]
        public static Android.View.MotionEvent Obtain(long arg0, long arg1, int arg2, int arg3, float arg4, float arg5, float arg6, float arg7, int arg8, float arg9, float arg10, int arg11, int arg12)
        {
            return SExecute<Android.View.MotionEvent>(LocalBridgeClazz, "obtain", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#obtain(long,long,int,int,int[],android.view.MotionEvent.PointerCoords[],int,float,float,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="Android.View.MotionEvent.PointerCoords"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="float"/></param>
        /// <param name="arg8"><see cref="float"/></param>
        /// <param name="arg9"><see cref="int"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        /// <param name="arg11"><see cref="int"/></param>
        /// <param name="arg12"><see cref="int"/></param>
        /// <returns><see cref="Android.View.MotionEvent"/></returns>
        [global::System.Obsolete()]
        public static Android.View.MotionEvent Obtain(long arg0, long arg1, int arg2, int arg3, int[] arg4, Android.View.MotionEvent.PointerCoords[] arg5, int arg6, float arg7, float arg8, int arg9, int arg10, int arg11, int arg12)
        {
            return SExecute<Android.View.MotionEvent>(LocalBridgeClazz, "obtain", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#obtainNoHistory(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="Android.View.MotionEvent"/></returns>
        public static Android.View.MotionEvent ObtainNoHistory(Android.View.MotionEvent arg0)
        {
            return SExecuteWithSignature<Android.View.MotionEvent>(LocalBridgeClazz, "obtainNoHistory", "(Landroid/view/MotionEvent;)Landroid/view/MotionEvent;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#axisFromString(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public static int AxisFromString(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "axisFromString", "(Ljava/lang/String;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#actionToString(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String ActionToString(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "actionToString", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#axisToString(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String AxisToString(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "axisToString", "(I)Ljava/lang/String;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#isButtonPressed(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsButtonPressed(int arg0)
        {
            return IExecuteWithSignature<bool>("isButtonPressed", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getAxisValue(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetAxisValue(int arg0, int arg1)
        {
            return IExecute<float>("getAxisValue", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getAxisValue(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetAxisValue(int arg0)
        {
            return IExecuteWithSignature<float>("getAxisValue", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalAxisValue(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalAxisValue(int arg0, int arg1, int arg2)
        {
            return IExecute<float>("getHistoricalAxisValue", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalAxisValue(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalAxisValue(int arg0, int arg1)
        {
            return IExecute<float>("getHistoricalAxisValue", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalOrientation(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalOrientation(int arg0, int arg1)
        {
            return IExecute<float>("getHistoricalOrientation", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalOrientation(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalOrientation(int arg0)
        {
            return IExecuteWithSignature<float>("getHistoricalOrientation", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalPressure(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalPressure(int arg0, int arg1)
        {
            return IExecute<float>("getHistoricalPressure", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalPressure(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalPressure(int arg0)
        {
            return IExecuteWithSignature<float>("getHistoricalPressure", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalSize(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalSize(int arg0, int arg1)
        {
            return IExecute<float>("getHistoricalSize", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalSize(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalSize(int arg0)
        {
            return IExecuteWithSignature<float>("getHistoricalSize", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalToolMajor(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalToolMajor(int arg0, int arg1)
        {
            return IExecute<float>("getHistoricalToolMajor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalToolMajor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalToolMajor(int arg0)
        {
            return IExecuteWithSignature<float>("getHistoricalToolMajor", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalToolMinor(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalToolMinor(int arg0, int arg1)
        {
            return IExecute<float>("getHistoricalToolMinor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalToolMinor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalToolMinor(int arg0)
        {
            return IExecuteWithSignature<float>("getHistoricalToolMinor", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalTouchMajor(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalTouchMajor(int arg0, int arg1)
        {
            return IExecute<float>("getHistoricalTouchMajor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalTouchMajor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalTouchMajor(int arg0)
        {
            return IExecuteWithSignature<float>("getHistoricalTouchMajor", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalTouchMinor(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalTouchMinor(int arg0, int arg1)
        {
            return IExecute<float>("getHistoricalTouchMinor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalTouchMinor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalTouchMinor(int arg0)
        {
            return IExecuteWithSignature<float>("getHistoricalTouchMinor", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalX(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalX(int arg0, int arg1)
        {
            return IExecute<float>("getHistoricalX", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalX(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalX(int arg0)
        {
            return IExecuteWithSignature<float>("getHistoricalX", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalY(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalY(int arg0, int arg1)
        {
            return IExecute<float>("getHistoricalY", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalY(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetHistoricalY(int arg0)
        {
            return IExecuteWithSignature<float>("getHistoricalY", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getOrientation()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetOrientation()
        {
            return IExecuteWithSignature<float>("getOrientation", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getOrientation(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetOrientation(int arg0)
        {
            return IExecuteWithSignature<float>("getOrientation", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getPressure()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetPressure()
        {
            return IExecuteWithSignature<float>("getPressure", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getPressure(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetPressure(int arg0)
        {
            return IExecuteWithSignature<float>("getPressure", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getRawX()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetRawX()
        {
            return IExecuteWithSignature<float>("getRawX", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getRawX(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetRawX(int arg0)
        {
            return IExecuteWithSignature<float>("getRawX", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getRawY()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetRawY()
        {
            return IExecuteWithSignature<float>("getRawY", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getRawY(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetRawY(int arg0)
        {
            return IExecuteWithSignature<float>("getRawY", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getSize()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetSize()
        {
            return IExecuteWithSignature<float>("getSize", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getSize(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetSize(int arg0)
        {
            return IExecuteWithSignature<float>("getSize", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getToolMajor()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetToolMajor()
        {
            return IExecuteWithSignature<float>("getToolMajor", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getToolMajor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetToolMajor(int arg0)
        {
            return IExecuteWithSignature<float>("getToolMajor", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getToolMinor()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetToolMinor()
        {
            return IExecuteWithSignature<float>("getToolMinor", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getToolMinor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetToolMinor(int arg0)
        {
            return IExecuteWithSignature<float>("getToolMinor", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getTouchMajor()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetTouchMajor()
        {
            return IExecuteWithSignature<float>("getTouchMajor", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getTouchMajor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetTouchMajor(int arg0)
        {
            return IExecuteWithSignature<float>("getTouchMajor", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getTouchMinor()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetTouchMinor()
        {
            return IExecuteWithSignature<float>("getTouchMinor", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getTouchMinor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetTouchMinor(int arg0)
        {
            return IExecuteWithSignature<float>("getTouchMinor", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getX()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetX()
        {
            return IExecuteWithSignature<float>("getX", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getX(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetX(int arg0)
        {
            return IExecuteWithSignature<float>("getX", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getXPrecision()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetXPrecision()
        {
            return IExecuteWithSignature<float>("getXPrecision", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getY()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetY()
        {
            return IExecuteWithSignature<float>("getY", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getY(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="float"/></returns>
        public float GetY(int arg0)
        {
            return IExecuteWithSignature<float>("getY", "(I)F", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getYPrecision()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetYPrecision()
        {
            return IExecuteWithSignature<float>("getYPrecision", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#findPointerIndex(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int FindPointerIndex(int arg0)
        {
            return IExecuteWithSignature<int>("findPointerIndex", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getAction()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAction()
        {
            return IExecuteWithSignature<int>("getAction", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getActionButton()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetActionButton()
        {
            return IExecuteWithSignature<int>("getActionButton", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getActionIndex()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetActionIndex()
        {
            return IExecuteWithSignature<int>("getActionIndex", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getActionMasked()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetActionMasked()
        {
            return IExecuteWithSignature<int>("getActionMasked", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getButtonState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetButtonState()
        {
            return IExecuteWithSignature<int>("getButtonState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getClassification()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetClassification()
        {
            return IExecuteWithSignature<int>("getClassification", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getEdgeFlags()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetEdgeFlags()
        {
            return IExecuteWithSignature<int>("getEdgeFlags", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getFlags()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFlags()
        {
            return IExecuteWithSignature<int>("getFlags", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistorySize()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHistorySize()
        {
            return IExecuteWithSignature<int>("getHistorySize", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getMetaState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMetaState()
        {
            return IExecuteWithSignature<int>("getMetaState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getPointerCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPointerCount()
        {
            return IExecuteWithSignature<int>("getPointerCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getPointerId(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetPointerId(int arg0)
        {
            return IExecuteWithSignature<int>("getPointerId", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getToolType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetToolType(int arg0)
        {
            return IExecuteWithSignature<int>("getToolType", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getDownTime()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetDownTime()
        {
            return IExecuteWithSignature<long>("getDownTime", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getEventTimeNanos()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetEventTimeNanos()
        {
            return IExecuteWithSignature<long>("getEventTimeNanos", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalEventTime(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetHistoricalEventTime(int arg0)
        {
            return IExecuteWithSignature<long>("getHistoricalEventTime", "(I)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalEventTimeNanos(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetHistoricalEventTimeNanos(int arg0)
        {
            return IExecuteWithSignature<long>("getHistoricalEventTimeNanos", "(I)J", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#addBatch(long,android.view.MotionEvent.PointerCoords[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="Android.View.MotionEvent.PointerCoords"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void AddBatch(long arg0, Android.View.MotionEvent.PointerCoords[] arg1, int arg2)
        {
            IExecute("addBatch", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#addBatch(long,float,float,float,float,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        /// <param name="arg4"><see cref="float"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public void AddBatch(long arg0, float arg1, float arg2, float arg3, float arg4, int arg5)
        {
            IExecute("addBatch", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getHistoricalPointerCoords(int,int,android.view.MotionEvent.PointerCoords)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.View.MotionEvent.PointerCoords"/></param>
        public void GetHistoricalPointerCoords(int arg0, int arg1, Android.View.MotionEvent.PointerCoords arg2)
        {
            IExecute("getHistoricalPointerCoords", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getPointerCoords(int,android.view.MotionEvent.PointerCoords)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.View.MotionEvent.PointerCoords"/></param>
        public void GetPointerCoords(int arg0, Android.View.MotionEvent.PointerCoords arg1)
        {
            IExecute("getPointerCoords", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#getPointerProperties(int,android.view.MotionEvent.PointerProperties)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.View.MotionEvent.PointerProperties"/></param>
        public void GetPointerProperties(int arg0, Android.View.MotionEvent.PointerProperties arg1)
        {
            IExecute("getPointerProperties", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#offsetLocation(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void OffsetLocation(float arg0, float arg1)
        {
            IExecute("offsetLocation", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#recycle()"/>
        /// </summary>
        public void Recycle()
        {
            IExecuteWithSignature("recycle", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#setAction(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAction(int arg0)
        {
            IExecuteWithSignature("setAction", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#setEdgeFlags(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetEdgeFlags(int arg0)
        {
            IExecuteWithSignature("setEdgeFlags", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#setLocation(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void SetLocation(float arg0, float arg1)
        {
            IExecute("setLocation", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#setSource(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetSource(int arg0)
        {
            IExecuteWithSignature("setSource", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/MotionEvent.html#transform(android.graphics.Matrix)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Matrix"/></param>
        public void Transform(Android.Graphics.Matrix arg0)
        {
            IExecuteWithSignature("transform", "(Landroid/graphics/Matrix;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region PointerCoords
        public partial class PointerCoords
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html#%3Cinit%3E(android.view.MotionEvent.PointerCoords)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent.PointerCoords"/></param>
            public PointerCoords(Android.View.MotionEvent.PointerCoords arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html#orientation"/>
            /// </summary>
            public float orientation { get { return IGetField<float>("orientation"); } set { ISetField("orientation", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html#pressure"/>
            /// </summary>
            public float pressure { get { return IGetField<float>("pressure"); } set { ISetField("pressure", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html#size"/>
            /// </summary>
            public float size { get { return IGetField<float>("size"); } set { ISetField("size", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html#toolMajor"/>
            /// </summary>
            public float toolMajor { get { return IGetField<float>("toolMajor"); } set { ISetField("toolMajor", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html#toolMinor"/>
            /// </summary>
            public float toolMinor { get { return IGetField<float>("toolMinor"); } set { ISetField("toolMinor", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html#touchMajor"/>
            /// </summary>
            public float touchMajor { get { return IGetField<float>("touchMajor"); } set { ISetField("touchMajor", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html#touchMinor"/>
            /// </summary>
            public float touchMinor { get { return IGetField<float>("touchMinor"); } set { ISetField("touchMinor", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html#x"/>
            /// </summary>
            public float x { get { return IGetField<float>("x"); } set { ISetField("x", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html#y"/>
            /// </summary>
            public float y { get { return IGetField<float>("y"); } set { ISetField("y", value); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html#isResampled()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsResampled()
            {
                return IExecuteWithSignature<bool>("isResampled", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html#getAxisValue(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="float"/></returns>
            public float GetAxisValue(int arg0)
            {
                return IExecuteWithSignature<float>("getAxisValue", "(I)F", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html#clear()"/>
            /// </summary>
            public void Clear()
            {
                IExecuteWithSignature("clear", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html#copyFrom(android.view.MotionEvent.PointerCoords)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent.PointerCoords"/></param>
            public void CopyFrom(Android.View.MotionEvent.PointerCoords arg0)
            {
                IExecuteWithSignature("copyFrom", "(Landroid/view/MotionEvent$PointerCoords;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerCoords.html#setAxisValue(int,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            public void SetAxisValue(int arg0, float arg1)
            {
                IExecute("setAxisValue", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PointerProperties
        public partial class PointerProperties
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerProperties.html#%3Cinit%3E(android.view.MotionEvent.PointerProperties)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent.PointerProperties"/></param>
            public PointerProperties(Android.View.MotionEvent.PointerProperties arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerProperties.html#id"/>
            /// </summary>
            public int id { get { return IGetField<int>("id"); } set { ISetField("id", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerProperties.html#toolType"/>
            /// </summary>
            public int toolType { get { return IGetField<int>("toolType"); } set { ISetField("toolType", value); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerProperties.html#clear()"/>
            /// </summary>
            public void Clear()
            {
                IExecuteWithSignature("clear", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/MotionEvent.PointerProperties.html#copyFrom(android.view.MotionEvent.PointerProperties)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent.PointerProperties"/></param>
            public void CopyFrom(Android.View.MotionEvent.PointerProperties arg0)
            {
                IExecuteWithSignature("copyFrom", "(Landroid/view/MotionEvent$PointerProperties;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
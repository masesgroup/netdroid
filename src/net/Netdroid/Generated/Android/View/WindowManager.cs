/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region IWindowManager
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IWindowManager : Android.View.IViewManager
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region WindowManager
    public partial class WindowManager : Android.View.IWindowManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#COMPAT_SMALL_COVER_SCREEN_OPT_IN"/>
        /// </summary>
        public static int COMPAT_SMALL_COVER_SCREEN_OPT_IN { get { if (!_COMPAT_SMALL_COVER_SCREEN_OPT_INReady) { _COMPAT_SMALL_COVER_SCREEN_OPT_INContent = SGetField<int>(LocalBridgeClazz, "COMPAT_SMALL_COVER_SCREEN_OPT_IN"); _COMPAT_SMALL_COVER_SCREEN_OPT_INReady = true; } return _COMPAT_SMALL_COVER_SCREEN_OPT_INContent; } }
        private static int _COMPAT_SMALL_COVER_SCREEN_OPT_INContent = default;
        private static bool _COMPAT_SMALL_COVER_SCREEN_OPT_INReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#SCREEN_RECORDING_STATE_NOT_VISIBLE"/>
        /// </summary>
        public static int SCREEN_RECORDING_STATE_NOT_VISIBLE { get { if (!_SCREEN_RECORDING_STATE_NOT_VISIBLEReady) { _SCREEN_RECORDING_STATE_NOT_VISIBLEContent = SGetField<int>(LocalBridgeClazz, "SCREEN_RECORDING_STATE_NOT_VISIBLE"); _SCREEN_RECORDING_STATE_NOT_VISIBLEReady = true; } return _SCREEN_RECORDING_STATE_NOT_VISIBLEContent; } }
        private static int _SCREEN_RECORDING_STATE_NOT_VISIBLEContent = default;
        private static bool _SCREEN_RECORDING_STATE_NOT_VISIBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#SCREEN_RECORDING_STATE_VISIBLE"/>
        /// </summary>
        public static int SCREEN_RECORDING_STATE_VISIBLE { get { if (!_SCREEN_RECORDING_STATE_VISIBLEReady) { _SCREEN_RECORDING_STATE_VISIBLEContent = SGetField<int>(LocalBridgeClazz, "SCREEN_RECORDING_STATE_VISIBLE"); _SCREEN_RECORDING_STATE_VISIBLEReady = true; } return _SCREEN_RECORDING_STATE_VISIBLEContent; } }
        private static int _SCREEN_RECORDING_STATE_VISIBLEContent = default;
        private static bool _SCREEN_RECORDING_STATE_VISIBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_ACTIVITY_EMBEDDING_ALLOW_SYSTEM_OVERRIDE"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_ACTIVITY_EMBEDDING_ALLOW_SYSTEM_OVERRIDE { get { if (!_PROPERTY_ACTIVITY_EMBEDDING_ALLOW_SYSTEM_OVERRIDEReady) { _PROPERTY_ACTIVITY_EMBEDDING_ALLOW_SYSTEM_OVERRIDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_ACTIVITY_EMBEDDING_ALLOW_SYSTEM_OVERRIDE"); _PROPERTY_ACTIVITY_EMBEDDING_ALLOW_SYSTEM_OVERRIDEReady = true; } return _PROPERTY_ACTIVITY_EMBEDDING_ALLOW_SYSTEM_OVERRIDEContent; } }
        private static Java.Lang.String _PROPERTY_ACTIVITY_EMBEDDING_ALLOW_SYSTEM_OVERRIDEContent = default;
        private static bool _PROPERTY_ACTIVITY_EMBEDDING_ALLOW_SYSTEM_OVERRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_ACTIVITY_EMBEDDING_SPLITS_ENABLED"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_ACTIVITY_EMBEDDING_SPLITS_ENABLED { get { if (!_PROPERTY_ACTIVITY_EMBEDDING_SPLITS_ENABLEDReady) { _PROPERTY_ACTIVITY_EMBEDDING_SPLITS_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_ACTIVITY_EMBEDDING_SPLITS_ENABLED"); _PROPERTY_ACTIVITY_EMBEDDING_SPLITS_ENABLEDReady = true; } return _PROPERTY_ACTIVITY_EMBEDDING_SPLITS_ENABLEDContent; } }
        private static Java.Lang.String _PROPERTY_ACTIVITY_EMBEDDING_SPLITS_ENABLEDContent = default;
        private static bool _PROPERTY_ACTIVITY_EMBEDDING_SPLITS_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_CAMERA_COMPAT_ALLOW_FORCE_ROTATION"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_CAMERA_COMPAT_ALLOW_FORCE_ROTATION { get { if (!_PROPERTY_CAMERA_COMPAT_ALLOW_FORCE_ROTATIONReady) { _PROPERTY_CAMERA_COMPAT_ALLOW_FORCE_ROTATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_CAMERA_COMPAT_ALLOW_FORCE_ROTATION"); _PROPERTY_CAMERA_COMPAT_ALLOW_FORCE_ROTATIONReady = true; } return _PROPERTY_CAMERA_COMPAT_ALLOW_FORCE_ROTATIONContent; } }
        private static Java.Lang.String _PROPERTY_CAMERA_COMPAT_ALLOW_FORCE_ROTATIONContent = default;
        private static bool _PROPERTY_CAMERA_COMPAT_ALLOW_FORCE_ROTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_CAMERA_COMPAT_ALLOW_REFRESH"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_CAMERA_COMPAT_ALLOW_REFRESH { get { if (!_PROPERTY_CAMERA_COMPAT_ALLOW_REFRESHReady) { _PROPERTY_CAMERA_COMPAT_ALLOW_REFRESHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_CAMERA_COMPAT_ALLOW_REFRESH"); _PROPERTY_CAMERA_COMPAT_ALLOW_REFRESHReady = true; } return _PROPERTY_CAMERA_COMPAT_ALLOW_REFRESHContent; } }
        private static Java.Lang.String _PROPERTY_CAMERA_COMPAT_ALLOW_REFRESHContent = default;
        private static bool _PROPERTY_CAMERA_COMPAT_ALLOW_REFRESHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_CAMERA_COMPAT_ENABLE_REFRESH_VIA_PAUSE"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_CAMERA_COMPAT_ENABLE_REFRESH_VIA_PAUSE { get { if (!_PROPERTY_CAMERA_COMPAT_ENABLE_REFRESH_VIA_PAUSEReady) { _PROPERTY_CAMERA_COMPAT_ENABLE_REFRESH_VIA_PAUSEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_CAMERA_COMPAT_ENABLE_REFRESH_VIA_PAUSE"); _PROPERTY_CAMERA_COMPAT_ENABLE_REFRESH_VIA_PAUSEReady = true; } return _PROPERTY_CAMERA_COMPAT_ENABLE_REFRESH_VIA_PAUSEContent; } }
        private static Java.Lang.String _PROPERTY_CAMERA_COMPAT_ENABLE_REFRESH_VIA_PAUSEContent = default;
        private static bool _PROPERTY_CAMERA_COMPAT_ENABLE_REFRESH_VIA_PAUSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_COMPAT_ALLOW_DISPLAY_ORIENTATION_OVERRIDE"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_COMPAT_ALLOW_DISPLAY_ORIENTATION_OVERRIDE { get { if (!_PROPERTY_COMPAT_ALLOW_DISPLAY_ORIENTATION_OVERRIDEReady) { _PROPERTY_COMPAT_ALLOW_DISPLAY_ORIENTATION_OVERRIDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_COMPAT_ALLOW_DISPLAY_ORIENTATION_OVERRIDE"); _PROPERTY_COMPAT_ALLOW_DISPLAY_ORIENTATION_OVERRIDEReady = true; } return _PROPERTY_COMPAT_ALLOW_DISPLAY_ORIENTATION_OVERRIDEContent; } }
        private static Java.Lang.String _PROPERTY_COMPAT_ALLOW_DISPLAY_ORIENTATION_OVERRIDEContent = default;
        private static bool _PROPERTY_COMPAT_ALLOW_DISPLAY_ORIENTATION_OVERRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_COMPAT_ALLOW_IGNORING_ORIENTATION_REQUEST_WHEN_LOOP_DETECTED"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_COMPAT_ALLOW_IGNORING_ORIENTATION_REQUEST_WHEN_LOOP_DETECTED { get { if (!_PROPERTY_COMPAT_ALLOW_IGNORING_ORIENTATION_REQUEST_WHEN_LOOP_DETECTEDReady) { _PROPERTY_COMPAT_ALLOW_IGNORING_ORIENTATION_REQUEST_WHEN_LOOP_DETECTEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_COMPAT_ALLOW_IGNORING_ORIENTATION_REQUEST_WHEN_LOOP_DETECTED"); _PROPERTY_COMPAT_ALLOW_IGNORING_ORIENTATION_REQUEST_WHEN_LOOP_DETECTEDReady = true; } return _PROPERTY_COMPAT_ALLOW_IGNORING_ORIENTATION_REQUEST_WHEN_LOOP_DETECTEDContent; } }
        private static Java.Lang.String _PROPERTY_COMPAT_ALLOW_IGNORING_ORIENTATION_REQUEST_WHEN_LOOP_DETECTEDContent = default;
        private static bool _PROPERTY_COMPAT_ALLOW_IGNORING_ORIENTATION_REQUEST_WHEN_LOOP_DETECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_COMPAT_ALLOW_MIN_ASPECT_RATIO_OVERRIDE"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_COMPAT_ALLOW_MIN_ASPECT_RATIO_OVERRIDE { get { if (!_PROPERTY_COMPAT_ALLOW_MIN_ASPECT_RATIO_OVERRIDEReady) { _PROPERTY_COMPAT_ALLOW_MIN_ASPECT_RATIO_OVERRIDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_COMPAT_ALLOW_MIN_ASPECT_RATIO_OVERRIDE"); _PROPERTY_COMPAT_ALLOW_MIN_ASPECT_RATIO_OVERRIDEReady = true; } return _PROPERTY_COMPAT_ALLOW_MIN_ASPECT_RATIO_OVERRIDEContent; } }
        private static Java.Lang.String _PROPERTY_COMPAT_ALLOW_MIN_ASPECT_RATIO_OVERRIDEContent = default;
        private static bool _PROPERTY_COMPAT_ALLOW_MIN_ASPECT_RATIO_OVERRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_COMPAT_ALLOW_ORIENTATION_OVERRIDE"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_COMPAT_ALLOW_ORIENTATION_OVERRIDE { get { if (!_PROPERTY_COMPAT_ALLOW_ORIENTATION_OVERRIDEReady) { _PROPERTY_COMPAT_ALLOW_ORIENTATION_OVERRIDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_COMPAT_ALLOW_ORIENTATION_OVERRIDE"); _PROPERTY_COMPAT_ALLOW_ORIENTATION_OVERRIDEReady = true; } return _PROPERTY_COMPAT_ALLOW_ORIENTATION_OVERRIDEContent; } }
        private static Java.Lang.String _PROPERTY_COMPAT_ALLOW_ORIENTATION_OVERRIDEContent = default;
        private static bool _PROPERTY_COMPAT_ALLOW_ORIENTATION_OVERRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_COMPAT_ALLOW_RESIZEABLE_ACTIVITY_OVERRIDES"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_COMPAT_ALLOW_RESIZEABLE_ACTIVITY_OVERRIDES { get { if (!_PROPERTY_COMPAT_ALLOW_RESIZEABLE_ACTIVITY_OVERRIDESReady) { _PROPERTY_COMPAT_ALLOW_RESIZEABLE_ACTIVITY_OVERRIDESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_COMPAT_ALLOW_RESIZEABLE_ACTIVITY_OVERRIDES"); _PROPERTY_COMPAT_ALLOW_RESIZEABLE_ACTIVITY_OVERRIDESReady = true; } return _PROPERTY_COMPAT_ALLOW_RESIZEABLE_ACTIVITY_OVERRIDESContent; } }
        private static Java.Lang.String _PROPERTY_COMPAT_ALLOW_RESIZEABLE_ACTIVITY_OVERRIDESContent = default;
        private static bool _PROPERTY_COMPAT_ALLOW_RESIZEABLE_ACTIVITY_OVERRIDESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_COMPAT_ALLOW_SANDBOXING_VIEW_BOUNDS_APIS"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_COMPAT_ALLOW_SANDBOXING_VIEW_BOUNDS_APIS { get { if (!_PROPERTY_COMPAT_ALLOW_SANDBOXING_VIEW_BOUNDS_APISReady) { _PROPERTY_COMPAT_ALLOW_SANDBOXING_VIEW_BOUNDS_APISContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_COMPAT_ALLOW_SANDBOXING_VIEW_BOUNDS_APIS"); _PROPERTY_COMPAT_ALLOW_SANDBOXING_VIEW_BOUNDS_APISReady = true; } return _PROPERTY_COMPAT_ALLOW_SANDBOXING_VIEW_BOUNDS_APISContent; } }
        private static Java.Lang.String _PROPERTY_COMPAT_ALLOW_SANDBOXING_VIEW_BOUNDS_APISContent = default;
        private static bool _PROPERTY_COMPAT_ALLOW_SANDBOXING_VIEW_BOUNDS_APISReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_COMPAT_ALLOW_SMALL_COVER_SCREEN"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_COMPAT_ALLOW_SMALL_COVER_SCREEN { get { if (!_PROPERTY_COMPAT_ALLOW_SMALL_COVER_SCREENReady) { _PROPERTY_COMPAT_ALLOW_SMALL_COVER_SCREENContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_COMPAT_ALLOW_SMALL_COVER_SCREEN"); _PROPERTY_COMPAT_ALLOW_SMALL_COVER_SCREENReady = true; } return _PROPERTY_COMPAT_ALLOW_SMALL_COVER_SCREENContent; } }
        private static Java.Lang.String _PROPERTY_COMPAT_ALLOW_SMALL_COVER_SCREENContent = default;
        private static bool _PROPERTY_COMPAT_ALLOW_SMALL_COVER_SCREENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_FULLSCREEN_OVERRIDE"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_FULLSCREEN_OVERRIDE { get { if (!_PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_FULLSCREEN_OVERRIDEReady) { _PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_FULLSCREEN_OVERRIDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_FULLSCREEN_OVERRIDE"); _PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_FULLSCREEN_OVERRIDEReady = true; } return _PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_FULLSCREEN_OVERRIDEContent; } }
        private static Java.Lang.String _PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_FULLSCREEN_OVERRIDEContent = default;
        private static bool _PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_FULLSCREEN_OVERRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_OVERRIDE"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_OVERRIDE { get { if (!_PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_OVERRIDEReady) { _PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_OVERRIDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_OVERRIDE"); _PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_OVERRIDEReady = true; } return _PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_OVERRIDEContent; } }
        private static Java.Lang.String _PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_OVERRIDEContent = default;
        private static bool _PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_OVERRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_COMPAT_ENABLE_FAKE_FOCUS"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_COMPAT_ENABLE_FAKE_FOCUS { get { if (!_PROPERTY_COMPAT_ENABLE_FAKE_FOCUSReady) { _PROPERTY_COMPAT_ENABLE_FAKE_FOCUSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_COMPAT_ENABLE_FAKE_FOCUS"); _PROPERTY_COMPAT_ENABLE_FAKE_FOCUSReady = true; } return _PROPERTY_COMPAT_ENABLE_FAKE_FOCUSContent; } }
        private static Java.Lang.String _PROPERTY_COMPAT_ENABLE_FAKE_FOCUSContent = default;
        private static bool _PROPERTY_COMPAT_ENABLE_FAKE_FOCUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_COMPAT_IGNORE_REQUESTED_ORIENTATION"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_COMPAT_IGNORE_REQUESTED_ORIENTATION { get { if (!_PROPERTY_COMPAT_IGNORE_REQUESTED_ORIENTATIONReady) { _PROPERTY_COMPAT_IGNORE_REQUESTED_ORIENTATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_COMPAT_IGNORE_REQUESTED_ORIENTATION"); _PROPERTY_COMPAT_IGNORE_REQUESTED_ORIENTATIONReady = true; } return _PROPERTY_COMPAT_IGNORE_REQUESTED_ORIENTATIONContent; } }
        private static Java.Lang.String _PROPERTY_COMPAT_IGNORE_REQUESTED_ORIENTATIONContent = default;
        private static bool _PROPERTY_COMPAT_IGNORE_REQUESTED_ORIENTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#PROPERTY_SUPPORTS_MULTI_INSTANCE_SYSTEM_UI"/>
        /// </summary>
        public static Java.Lang.String PROPERTY_SUPPORTS_MULTI_INSTANCE_SYSTEM_UI { get { if (!_PROPERTY_SUPPORTS_MULTI_INSTANCE_SYSTEM_UIReady) { _PROPERTY_SUPPORTS_MULTI_INSTANCE_SYSTEM_UIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROPERTY_SUPPORTS_MULTI_INSTANCE_SYSTEM_UI"); _PROPERTY_SUPPORTS_MULTI_INSTANCE_SYSTEM_UIReady = true; } return _PROPERTY_SUPPORTS_MULTI_INSTANCE_SYSTEM_UIContent; } }
        private static Java.Lang.String _PROPERTY_SUPPORTS_MULTI_INSTANCE_SYSTEM_UIContent = default;
        private static bool _PROPERTY_SUPPORTS_MULTI_INSTANCE_SYSTEM_UIReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#getDefaultDisplay()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Display"/></returns>
        [global::System.Obsolete()]
        public Android.View.Display GetDefaultDisplay()
        {
            return IExecuteWithSignature<Android.View.Display>("getDefaultDisplay", "()Landroid/view/Display;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#removeViewImmediate(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void RemoveViewImmediate(Android.View.View arg0)
        {
            IExecuteWithSignature("removeViewImmediate", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#getCurrentWindowMetrics()"/>
        /// </summary>
        /// <returns><see cref="Android.View.WindowMetrics"/></returns>
        public Android.View.WindowMetrics GetCurrentWindowMetrics()
        {
            return IExecuteWithSignature<Android.View.WindowMetrics>("getCurrentWindowMetrics", "()Landroid/view/WindowMetrics;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#getMaximumWindowMetrics()"/>
        /// </summary>
        /// <returns><see cref="Android.View.WindowMetrics"/></returns>
        public Android.View.WindowMetrics GetMaximumWindowMetrics()
        {
            return IExecuteWithSignature<Android.View.WindowMetrics>("getMaximumWindowMetrics", "()Landroid/view/WindowMetrics;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#registerBatchedSurfaceControlInputReceiver(android.window.InputTransferToken,android.view.SurfaceControl,android.view.Choreographer,android.view.SurfaceControlInputReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Window.InputTransferToken"/></param>
        /// <param name="arg1"><see cref="Android.View.SurfaceControl"/></param>
        /// <param name="arg2"><see cref="Android.View.Choreographer"/></param>
        /// <param name="arg3"><see cref="Android.View.SurfaceControlInputReceiver"/></param>
        /// <returns><see cref="Android.Window.InputTransferToken"/></returns>
        public Android.Window.InputTransferToken RegisterBatchedSurfaceControlInputReceiver(Android.Window.InputTransferToken arg0, Android.View.SurfaceControl arg1, Android.View.Choreographer arg2, Android.View.SurfaceControlInputReceiver arg3)
        {
            return IExecute<Android.Window.InputTransferToken>("registerBatchedSurfaceControlInputReceiver", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#registerUnbatchedSurfaceControlInputReceiver(android.window.InputTransferToken,android.view.SurfaceControl,android.os.Looper,android.view.SurfaceControlInputReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Window.InputTransferToken"/></param>
        /// <param name="arg1"><see cref="Android.View.SurfaceControl"/></param>
        /// <param name="arg2"><see cref="Android.Os.Looper"/></param>
        /// <param name="arg3"><see cref="Android.View.SurfaceControlInputReceiver"/></param>
        /// <returns><see cref="Android.Window.InputTransferToken"/></returns>
        public Android.Window.InputTransferToken RegisterUnbatchedSurfaceControlInputReceiver(Android.Window.InputTransferToken arg0, Android.View.SurfaceControl arg1, Android.Os.Looper arg2, Android.View.SurfaceControlInputReceiver arg3)
        {
            return IExecute<Android.Window.InputTransferToken>("registerUnbatchedSurfaceControlInputReceiver", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#isCrossWindowBlurEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsCrossWindowBlurEnabled()
        {
            return IExecuteWithSignature<bool>("isCrossWindowBlurEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#transferTouchGesture(android.window.InputTransferToken,android.window.InputTransferToken)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Window.InputTransferToken"/></param>
        /// <param name="arg1"><see cref="Android.Window.InputTransferToken"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool TransferTouchGesture(Android.Window.InputTransferToken arg0, Android.Window.InputTransferToken arg1)
        {
            return IExecute<bool>("transferTouchGesture", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#addScreenRecordingCallback(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        /// <returns><see cref="int"/></returns>
        public int AddScreenRecordingCallback(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Java.Lang.Integer> arg1)
        {
            return IExecute<int>("addScreenRecordingCallback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#addCrossWindowBlurEnabledListener(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void AddCrossWindowBlurEnabledListener(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Java.Lang.Boolean> arg1)
        {
            IExecute("addCrossWindowBlurEnabledListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#addCrossWindowBlurEnabledListener(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        public void AddCrossWindowBlurEnabledListener(Java.Util.Function.Consumer<Java.Lang.Boolean> arg0)
        {
            IExecuteWithSignature("addCrossWindowBlurEnabledListener", "(Ljava/util/function/Consumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#addProposedRotationListener(java.util.concurrent.Executor,java.util.function.IntConsumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.IntConsumer"/></param>
        public void AddProposedRotationListener(Java.Util.Concurrent.Executor arg0, Java.Util.Function.IntConsumer arg1)
        {
            IExecute("addProposedRotationListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#registerTrustedPresentationListener(android.os.IBinder,android.window.TrustedPresentationThresholds,java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.IBinder"/></param>
        /// <param name="arg1"><see cref="Android.Window.TrustedPresentationThresholds"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Java.Util.Function.Consumer"/></param>
        public void RegisterTrustedPresentationListener(Android.Os.IBinder arg0, Android.Window.TrustedPresentationThresholds arg1, Java.Util.Concurrent.Executor arg2, Java.Util.Function.Consumer<Java.Lang.Boolean> arg3)
        {
            IExecute("registerTrustedPresentationListener", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#removeCrossWindowBlurEnabledListener(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        public void RemoveCrossWindowBlurEnabledListener(Java.Util.Function.Consumer<Java.Lang.Boolean> arg0)
        {
            IExecuteWithSignature("removeCrossWindowBlurEnabledListener", "(Ljava/util/function/Consumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#removeProposedRotationListener(java.util.function.IntConsumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.IntConsumer"/></param>
        public void RemoveProposedRotationListener(Java.Util.Function.IntConsumer arg0)
        {
            IExecuteWithSignature("removeProposedRotationListener", "(Ljava/util/function/IntConsumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#removeScreenRecordingCallback(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        public void RemoveScreenRecordingCallback(Java.Util.Function.Consumer<Java.Lang.Integer> arg0)
        {
            IExecuteWithSignature("removeScreenRecordingCallback", "(Ljava/util/function/Consumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#unregisterSurfaceControlInputReceiver(android.view.SurfaceControl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
        public void UnregisterSurfaceControlInputReceiver(Android.View.SurfaceControl arg0)
        {
            IExecuteWithSignature("unregisterSurfaceControlInputReceiver", "(Landroid/view/SurfaceControl;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowManager.html#unregisterTrustedPresentationListener(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        public void UnregisterTrustedPresentationListener(Java.Util.Function.Consumer<Java.Lang.Boolean> arg0)
        {
            IExecuteWithSignature("unregisterTrustedPresentationListener", "(Ljava/util/function/Consumer;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region BadTokenException
        public partial class BadTokenException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region InvalidDisplayException
        public partial class InvalidDisplayException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region LayoutParams
        public partial class LayoutParams
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#%3Cinit%3E(android.os.Parcel)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            public LayoutParams(Android.Os.Parcel arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#%3Cinit%3E(int,int,int,int,int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="int"/></param>
            /// <param name="arg5"><see cref="int"/></param>
            /// <param name="arg6"><see cref="int"/></param>
            public LayoutParams(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6)
                : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#%3Cinit%3E(int,int,int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="int"/></param>
            public LayoutParams(int arg0, int arg1, int arg2, int arg3, int arg4)
                : base(arg0, arg1, arg2, arg3, arg4)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#%3Cinit%3E(int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public LayoutParams(int arg0, int arg1, int arg2)
                : base(arg0, arg1, arg2)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#%3Cinit%3E(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public LayoutParams(int arg0, int arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#%3Cinit%3E(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public LayoutParams(int arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.View.WindowManager.LayoutParams"/> to <see cref="Android.Os.Parcelable"/>
            /// </summary>
            public static implicit operator Android.Os.Parcelable(Android.View.WindowManager.LayoutParams t) => t.Cast<Android.Os.Parcelable>();

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#token"/>
            /// </summary>
            public Android.Os.IBinder token { get { return IGetField<Android.Os.IBinder>("token"); } set { ISetField("token", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#preferMinimalPostProcessing"/>
            /// </summary>
            public bool preferMinimalPostProcessing { get { return IGetField<bool>("preferMinimalPostProcessing"); } set { ISetField("preferMinimalPostProcessing", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#alpha"/>
            /// </summary>
            public float alpha { get { return IGetField<float>("alpha"); } set { ISetField("alpha", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#buttonBrightness"/>
            /// </summary>
            public float buttonBrightness { get { return IGetField<float>("buttonBrightness"); } set { ISetField("buttonBrightness", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#dimAmount"/>
            /// </summary>
            public float dimAmount { get { return IGetField<float>("dimAmount"); } set { ISetField("dimAmount", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#horizontalMargin"/>
            /// </summary>
            public float horizontalMargin { get { return IGetField<float>("horizontalMargin"); } set { ISetField("horizontalMargin", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#horizontalWeight"/>
            /// </summary>
            public float horizontalWeight { get { return IGetField<float>("horizontalWeight"); } set { ISetField("horizontalWeight", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#preferredRefreshRate"/>
            /// </summary>
            public float preferredRefreshRate { get { return IGetField<float>("preferredRefreshRate"); } set { ISetField("preferredRefreshRate", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#screenBrightness"/>
            /// </summary>
            public float screenBrightness { get { return IGetField<float>("screenBrightness"); } set { ISetField("screenBrightness", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#verticalMargin"/>
            /// </summary>
            public float verticalMargin { get { return IGetField<float>("verticalMargin"); } set { ISetField("verticalMargin", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#verticalWeight"/>
            /// </summary>
            public float verticalWeight { get { return IGetField<float>("verticalWeight"); } set { ISetField("verticalWeight", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#flags"/>
            /// </summary>
            public int flags { get { return IGetField<int>("flags"); } set { ISetField("flags", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#format"/>
            /// </summary>
            public int format { get { return IGetField<int>("format"); } set { ISetField("format", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#gravity"/>
            /// </summary>
            public int gravity { get { return IGetField<int>("gravity"); } set { ISetField("gravity", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#layoutInDisplayCutoutMode"/>
            /// </summary>
            public int layoutInDisplayCutoutMode { get { return IGetField<int>("layoutInDisplayCutoutMode"); } set { ISetField("layoutInDisplayCutoutMode", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#memoryType"/>
            /// </summary>
            [global::System.Obsolete()]
            public int memoryType { get { return IGetField<int>("memoryType"); } set { ISetField("memoryType", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#preferredDisplayModeId"/>
            /// </summary>
            public int preferredDisplayModeId { get { return IGetField<int>("preferredDisplayModeId"); } set { ISetField("preferredDisplayModeId", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#rotationAnimation"/>
            /// </summary>
            public int rotationAnimation { get { return IGetField<int>("rotationAnimation"); } set { ISetField("rotationAnimation", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#screenOrientation"/>
            /// </summary>
            public int screenOrientation { get { return IGetField<int>("screenOrientation"); } set { ISetField("screenOrientation", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#softInputMode"/>
            /// </summary>
            public int softInputMode { get { return IGetField<int>("softInputMode"); } set { ISetField("softInputMode", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#systemUiVisibility"/>
            /// </summary>
            [global::System.Obsolete()]
            public int systemUiVisibility { get { return IGetField<int>("systemUiVisibility"); } set { ISetField("systemUiVisibility", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#type"/>
            /// </summary>
            public int type { get { return IGetField<int>("type"); } set { ISetField("type", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#windowAnimations"/>
            /// </summary>
            public int windowAnimations { get { return IGetField<int>("windowAnimations"); } set { ISetField("windowAnimations", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#x"/>
            /// </summary>
            public int x { get { return IGetField<int>("x"); } set { ISetField("x", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#y"/>
            /// </summary>
            public int y { get { return IGetField<int>("y"); } set { ISetField("y", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#packageName"/>
            /// </summary>
            public Java.Lang.String packageName { get { return IGetField<Java.Lang.String>("packageName"); } set { ISetField("packageName", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#BRIGHTNESS_OVERRIDE_FULL"/>
            /// </summary>
            public static float BRIGHTNESS_OVERRIDE_FULL { get { if (!_BRIGHTNESS_OVERRIDE_FULLReady) { _BRIGHTNESS_OVERRIDE_FULLContent = SGetField<float>(LocalBridgeClazz, "BRIGHTNESS_OVERRIDE_FULL"); _BRIGHTNESS_OVERRIDE_FULLReady = true; } return _BRIGHTNESS_OVERRIDE_FULLContent; } }
            private static float _BRIGHTNESS_OVERRIDE_FULLContent = default;
            private static bool _BRIGHTNESS_OVERRIDE_FULLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#BRIGHTNESS_OVERRIDE_NONE"/>
            /// </summary>
            public static float BRIGHTNESS_OVERRIDE_NONE { get { if (!_BRIGHTNESS_OVERRIDE_NONEReady) { _BRIGHTNESS_OVERRIDE_NONEContent = SGetField<float>(LocalBridgeClazz, "BRIGHTNESS_OVERRIDE_NONE"); _BRIGHTNESS_OVERRIDE_NONEReady = true; } return _BRIGHTNESS_OVERRIDE_NONEContent; } }
            private static float _BRIGHTNESS_OVERRIDE_NONEContent = default;
            private static bool _BRIGHTNESS_OVERRIDE_NONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#BRIGHTNESS_OVERRIDE_OFF"/>
            /// </summary>
            public static float BRIGHTNESS_OVERRIDE_OFF { get { if (!_BRIGHTNESS_OVERRIDE_OFFReady) { _BRIGHTNESS_OVERRIDE_OFFContent = SGetField<float>(LocalBridgeClazz, "BRIGHTNESS_OVERRIDE_OFF"); _BRIGHTNESS_OVERRIDE_OFFReady = true; } return _BRIGHTNESS_OVERRIDE_OFFContent; } }
            private static float _BRIGHTNESS_OVERRIDE_OFFContent = default;
            private static bool _BRIGHTNESS_OVERRIDE_OFFReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#ALPHA_CHANGED"/>
            /// </summary>
            public static int ALPHA_CHANGED { get { if (!_ALPHA_CHANGEDReady) { _ALPHA_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "ALPHA_CHANGED"); _ALPHA_CHANGEDReady = true; } return _ALPHA_CHANGEDContent; } }
            private static int _ALPHA_CHANGEDContent = default;
            private static bool _ALPHA_CHANGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#ANIMATION_CHANGED"/>
            /// </summary>
            public static int ANIMATION_CHANGED { get { if (!_ANIMATION_CHANGEDReady) { _ANIMATION_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "ANIMATION_CHANGED"); _ANIMATION_CHANGEDReady = true; } return _ANIMATION_CHANGEDContent; } }
            private static int _ANIMATION_CHANGEDContent = default;
            private static bool _ANIMATION_CHANGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#DIM_AMOUNT_CHANGED"/>
            /// </summary>
            public static int DIM_AMOUNT_CHANGED { get { if (!_DIM_AMOUNT_CHANGEDReady) { _DIM_AMOUNT_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "DIM_AMOUNT_CHANGED"); _DIM_AMOUNT_CHANGEDReady = true; } return _DIM_AMOUNT_CHANGEDContent; } }
            private static int _DIM_AMOUNT_CHANGEDContent = default;
            private static bool _DIM_AMOUNT_CHANGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#DISPLAY_FLAG_DISABLE_HDR_CONVERSION"/>
            /// </summary>
            public static int DISPLAY_FLAG_DISABLE_HDR_CONVERSION { get { if (!_DISPLAY_FLAG_DISABLE_HDR_CONVERSIONReady) { _DISPLAY_FLAG_DISABLE_HDR_CONVERSIONContent = SGetField<int>(LocalBridgeClazz, "DISPLAY_FLAG_DISABLE_HDR_CONVERSION"); _DISPLAY_FLAG_DISABLE_HDR_CONVERSIONReady = true; } return _DISPLAY_FLAG_DISABLE_HDR_CONVERSIONContent; } }
            private static int _DISPLAY_FLAG_DISABLE_HDR_CONVERSIONContent = default;
            private static bool _DISPLAY_FLAG_DISABLE_HDR_CONVERSIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FIRST_APPLICATION_WINDOW"/>
            /// </summary>
            public static int FIRST_APPLICATION_WINDOW { get { if (!_FIRST_APPLICATION_WINDOWReady) { _FIRST_APPLICATION_WINDOWContent = SGetField<int>(LocalBridgeClazz, "FIRST_APPLICATION_WINDOW"); _FIRST_APPLICATION_WINDOWReady = true; } return _FIRST_APPLICATION_WINDOWContent; } }
            private static int _FIRST_APPLICATION_WINDOWContent = default;
            private static bool _FIRST_APPLICATION_WINDOWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FIRST_SUB_WINDOW"/>
            /// </summary>
            public static int FIRST_SUB_WINDOW { get { if (!_FIRST_SUB_WINDOWReady) { _FIRST_SUB_WINDOWContent = SGetField<int>(LocalBridgeClazz, "FIRST_SUB_WINDOW"); _FIRST_SUB_WINDOWReady = true; } return _FIRST_SUB_WINDOWContent; } }
            private static int _FIRST_SUB_WINDOWContent = default;
            private static bool _FIRST_SUB_WINDOWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FIRST_SYSTEM_WINDOW"/>
            /// </summary>
            public static int FIRST_SYSTEM_WINDOW { get { if (!_FIRST_SYSTEM_WINDOWReady) { _FIRST_SYSTEM_WINDOWContent = SGetField<int>(LocalBridgeClazz, "FIRST_SYSTEM_WINDOW"); _FIRST_SYSTEM_WINDOWReady = true; } return _FIRST_SYSTEM_WINDOWContent; } }
            private static int _FIRST_SYSTEM_WINDOWContent = default;
            private static bool _FIRST_SYSTEM_WINDOWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_ALLOW_LOCK_WHILE_SCREEN_ON"/>
            /// </summary>
            public static int FLAG_ALLOW_LOCK_WHILE_SCREEN_ON { get { if (!_FLAG_ALLOW_LOCK_WHILE_SCREEN_ONReady) { _FLAG_ALLOW_LOCK_WHILE_SCREEN_ONContent = SGetField<int>(LocalBridgeClazz, "FLAG_ALLOW_LOCK_WHILE_SCREEN_ON"); _FLAG_ALLOW_LOCK_WHILE_SCREEN_ONReady = true; } return _FLAG_ALLOW_LOCK_WHILE_SCREEN_ONContent; } }
            private static int _FLAG_ALLOW_LOCK_WHILE_SCREEN_ONContent = default;
            private static bool _FLAG_ALLOW_LOCK_WHILE_SCREEN_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_ALT_FOCUSABLE_IM"/>
            /// </summary>
            public static int FLAG_ALT_FOCUSABLE_IM { get { if (!_FLAG_ALT_FOCUSABLE_IMReady) { _FLAG_ALT_FOCUSABLE_IMContent = SGetField<int>(LocalBridgeClazz, "FLAG_ALT_FOCUSABLE_IM"); _FLAG_ALT_FOCUSABLE_IMReady = true; } return _FLAG_ALT_FOCUSABLE_IMContent; } }
            private static int _FLAG_ALT_FOCUSABLE_IMContent = default;
            private static bool _FLAG_ALT_FOCUSABLE_IMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_BLUR_BEHIND"/>
            /// </summary>
            public static int FLAG_BLUR_BEHIND { get { if (!_FLAG_BLUR_BEHINDReady) { _FLAG_BLUR_BEHINDContent = SGetField<int>(LocalBridgeClazz, "FLAG_BLUR_BEHIND"); _FLAG_BLUR_BEHINDReady = true; } return _FLAG_BLUR_BEHINDContent; } }
            private static int _FLAG_BLUR_BEHINDContent = default;
            private static bool _FLAG_BLUR_BEHINDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_DIM_BEHIND"/>
            /// </summary>
            public static int FLAG_DIM_BEHIND { get { if (!_FLAG_DIM_BEHINDReady) { _FLAG_DIM_BEHINDContent = SGetField<int>(LocalBridgeClazz, "FLAG_DIM_BEHIND"); _FLAG_DIM_BEHINDReady = true; } return _FLAG_DIM_BEHINDContent; } }
            private static int _FLAG_DIM_BEHINDContent = default;
            private static bool _FLAG_DIM_BEHINDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_DISMISS_KEYGUARD"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FLAG_DISMISS_KEYGUARD { get { if (!_FLAG_DISMISS_KEYGUARDReady) { _FLAG_DISMISS_KEYGUARDContent = SGetField<int>(LocalBridgeClazz, "FLAG_DISMISS_KEYGUARD"); _FLAG_DISMISS_KEYGUARDReady = true; } return _FLAG_DISMISS_KEYGUARDContent; } }
            private static int _FLAG_DISMISS_KEYGUARDContent = default;
            private static bool _FLAG_DISMISS_KEYGUARDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_DITHER"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FLAG_DITHER { get { if (!_FLAG_DITHERReady) { _FLAG_DITHERContent = SGetField<int>(LocalBridgeClazz, "FLAG_DITHER"); _FLAG_DITHERReady = true; } return _FLAG_DITHERContent; } }
            private static int _FLAG_DITHERContent = default;
            private static bool _FLAG_DITHERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS"/>
            /// </summary>
            public static int FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS { get { if (!_FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDSReady) { _FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDSContent = SGetField<int>(LocalBridgeClazz, "FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS"); _FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDSReady = true; } return _FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDSContent; } }
            private static int _FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDSContent = default;
            private static bool _FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_FORCE_NOT_FULLSCREEN"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FLAG_FORCE_NOT_FULLSCREEN { get { if (!_FLAG_FORCE_NOT_FULLSCREENReady) { _FLAG_FORCE_NOT_FULLSCREENContent = SGetField<int>(LocalBridgeClazz, "FLAG_FORCE_NOT_FULLSCREEN"); _FLAG_FORCE_NOT_FULLSCREENReady = true; } return _FLAG_FORCE_NOT_FULLSCREENContent; } }
            private static int _FLAG_FORCE_NOT_FULLSCREENContent = default;
            private static bool _FLAG_FORCE_NOT_FULLSCREENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_FULLSCREEN"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FLAG_FULLSCREEN { get { if (!_FLAG_FULLSCREENReady) { _FLAG_FULLSCREENContent = SGetField<int>(LocalBridgeClazz, "FLAG_FULLSCREEN"); _FLAG_FULLSCREENReady = true; } return _FLAG_FULLSCREENContent; } }
            private static int _FLAG_FULLSCREENContent = default;
            private static bool _FLAG_FULLSCREENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_HARDWARE_ACCELERATED"/>
            /// </summary>
            public static int FLAG_HARDWARE_ACCELERATED { get { if (!_FLAG_HARDWARE_ACCELERATEDReady) { _FLAG_HARDWARE_ACCELERATEDContent = SGetField<int>(LocalBridgeClazz, "FLAG_HARDWARE_ACCELERATED"); _FLAG_HARDWARE_ACCELERATEDReady = true; } return _FLAG_HARDWARE_ACCELERATEDContent; } }
            private static int _FLAG_HARDWARE_ACCELERATEDContent = default;
            private static bool _FLAG_HARDWARE_ACCELERATEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_IGNORE_CHEEK_PRESSES"/>
            /// </summary>
            public static int FLAG_IGNORE_CHEEK_PRESSES { get { if (!_FLAG_IGNORE_CHEEK_PRESSESReady) { _FLAG_IGNORE_CHEEK_PRESSESContent = SGetField<int>(LocalBridgeClazz, "FLAG_IGNORE_CHEEK_PRESSES"); _FLAG_IGNORE_CHEEK_PRESSESReady = true; } return _FLAG_IGNORE_CHEEK_PRESSESContent; } }
            private static int _FLAG_IGNORE_CHEEK_PRESSESContent = default;
            private static bool _FLAG_IGNORE_CHEEK_PRESSESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_KEEP_SCREEN_ON"/>
            /// </summary>
            public static int FLAG_KEEP_SCREEN_ON { get { if (!_FLAG_KEEP_SCREEN_ONReady) { _FLAG_KEEP_SCREEN_ONContent = SGetField<int>(LocalBridgeClazz, "FLAG_KEEP_SCREEN_ON"); _FLAG_KEEP_SCREEN_ONReady = true; } return _FLAG_KEEP_SCREEN_ONContent; } }
            private static int _FLAG_KEEP_SCREEN_ONContent = default;
            private static bool _FLAG_KEEP_SCREEN_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_LAYOUT_ATTACHED_IN_DECOR"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FLAG_LAYOUT_ATTACHED_IN_DECOR { get { if (!_FLAG_LAYOUT_ATTACHED_IN_DECORReady) { _FLAG_LAYOUT_ATTACHED_IN_DECORContent = SGetField<int>(LocalBridgeClazz, "FLAG_LAYOUT_ATTACHED_IN_DECOR"); _FLAG_LAYOUT_ATTACHED_IN_DECORReady = true; } return _FLAG_LAYOUT_ATTACHED_IN_DECORContent; } }
            private static int _FLAG_LAYOUT_ATTACHED_IN_DECORContent = default;
            private static bool _FLAG_LAYOUT_ATTACHED_IN_DECORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_LAYOUT_IN_OVERSCAN"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FLAG_LAYOUT_IN_OVERSCAN { get { if (!_FLAG_LAYOUT_IN_OVERSCANReady) { _FLAG_LAYOUT_IN_OVERSCANContent = SGetField<int>(LocalBridgeClazz, "FLAG_LAYOUT_IN_OVERSCAN"); _FLAG_LAYOUT_IN_OVERSCANReady = true; } return _FLAG_LAYOUT_IN_OVERSCANContent; } }
            private static int _FLAG_LAYOUT_IN_OVERSCANContent = default;
            private static bool _FLAG_LAYOUT_IN_OVERSCANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_LAYOUT_IN_SCREEN"/>
            /// </summary>
            public static int FLAG_LAYOUT_IN_SCREEN { get { if (!_FLAG_LAYOUT_IN_SCREENReady) { _FLAG_LAYOUT_IN_SCREENContent = SGetField<int>(LocalBridgeClazz, "FLAG_LAYOUT_IN_SCREEN"); _FLAG_LAYOUT_IN_SCREENReady = true; } return _FLAG_LAYOUT_IN_SCREENContent; } }
            private static int _FLAG_LAYOUT_IN_SCREENContent = default;
            private static bool _FLAG_LAYOUT_IN_SCREENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_LAYOUT_INSET_DECOR"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FLAG_LAYOUT_INSET_DECOR { get { if (!_FLAG_LAYOUT_INSET_DECORReady) { _FLAG_LAYOUT_INSET_DECORContent = SGetField<int>(LocalBridgeClazz, "FLAG_LAYOUT_INSET_DECOR"); _FLAG_LAYOUT_INSET_DECORReady = true; } return _FLAG_LAYOUT_INSET_DECORContent; } }
            private static int _FLAG_LAYOUT_INSET_DECORContent = default;
            private static bool _FLAG_LAYOUT_INSET_DECORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_LAYOUT_NO_LIMITS"/>
            /// </summary>
            public static int FLAG_LAYOUT_NO_LIMITS { get { if (!_FLAG_LAYOUT_NO_LIMITSReady) { _FLAG_LAYOUT_NO_LIMITSContent = SGetField<int>(LocalBridgeClazz, "FLAG_LAYOUT_NO_LIMITS"); _FLAG_LAYOUT_NO_LIMITSReady = true; } return _FLAG_LAYOUT_NO_LIMITSContent; } }
            private static int _FLAG_LAYOUT_NO_LIMITSContent = default;
            private static bool _FLAG_LAYOUT_NO_LIMITSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_LOCAL_FOCUS_MODE"/>
            /// </summary>
            public static int FLAG_LOCAL_FOCUS_MODE { get { if (!_FLAG_LOCAL_FOCUS_MODEReady) { _FLAG_LOCAL_FOCUS_MODEContent = SGetField<int>(LocalBridgeClazz, "FLAG_LOCAL_FOCUS_MODE"); _FLAG_LOCAL_FOCUS_MODEReady = true; } return _FLAG_LOCAL_FOCUS_MODEContent; } }
            private static int _FLAG_LOCAL_FOCUS_MODEContent = default;
            private static bool _FLAG_LOCAL_FOCUS_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_NOT_FOCUSABLE"/>
            /// </summary>
            public static int FLAG_NOT_FOCUSABLE { get { if (!_FLAG_NOT_FOCUSABLEReady) { _FLAG_NOT_FOCUSABLEContent = SGetField<int>(LocalBridgeClazz, "FLAG_NOT_FOCUSABLE"); _FLAG_NOT_FOCUSABLEReady = true; } return _FLAG_NOT_FOCUSABLEContent; } }
            private static int _FLAG_NOT_FOCUSABLEContent = default;
            private static bool _FLAG_NOT_FOCUSABLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_NOT_TOUCH_MODAL"/>
            /// </summary>
            public static int FLAG_NOT_TOUCH_MODAL { get { if (!_FLAG_NOT_TOUCH_MODALReady) { _FLAG_NOT_TOUCH_MODALContent = SGetField<int>(LocalBridgeClazz, "FLAG_NOT_TOUCH_MODAL"); _FLAG_NOT_TOUCH_MODALReady = true; } return _FLAG_NOT_TOUCH_MODALContent; } }
            private static int _FLAG_NOT_TOUCH_MODALContent = default;
            private static bool _FLAG_NOT_TOUCH_MODALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_NOT_TOUCHABLE"/>
            /// </summary>
            public static int FLAG_NOT_TOUCHABLE { get { if (!_FLAG_NOT_TOUCHABLEReady) { _FLAG_NOT_TOUCHABLEContent = SGetField<int>(LocalBridgeClazz, "FLAG_NOT_TOUCHABLE"); _FLAG_NOT_TOUCHABLEReady = true; } return _FLAG_NOT_TOUCHABLEContent; } }
            private static int _FLAG_NOT_TOUCHABLEContent = default;
            private static bool _FLAG_NOT_TOUCHABLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SCALED"/>
            /// </summary>
            public static int FLAG_SCALED { get { if (!_FLAG_SCALEDReady) { _FLAG_SCALEDContent = SGetField<int>(LocalBridgeClazz, "FLAG_SCALED"); _FLAG_SCALEDReady = true; } return _FLAG_SCALEDContent; } }
            private static int _FLAG_SCALEDContent = default;
            private static bool _FLAG_SCALEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SECURE"/>
            /// </summary>
            public static int FLAG_SECURE { get { if (!_FLAG_SECUREReady) { _FLAG_SECUREContent = SGetField<int>(LocalBridgeClazz, "FLAG_SECURE"); _FLAG_SECUREReady = true; } return _FLAG_SECUREContent; } }
            private static int _FLAG_SECUREContent = default;
            private static bool _FLAG_SECUREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SHOW_WALLPAPER"/>
            /// </summary>
            public static int FLAG_SHOW_WALLPAPER { get { if (!_FLAG_SHOW_WALLPAPERReady) { _FLAG_SHOW_WALLPAPERContent = SGetField<int>(LocalBridgeClazz, "FLAG_SHOW_WALLPAPER"); _FLAG_SHOW_WALLPAPERReady = true; } return _FLAG_SHOW_WALLPAPERContent; } }
            private static int _FLAG_SHOW_WALLPAPERContent = default;
            private static bool _FLAG_SHOW_WALLPAPERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SHOW_WHEN_LOCKED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FLAG_SHOW_WHEN_LOCKED { get { if (!_FLAG_SHOW_WHEN_LOCKEDReady) { _FLAG_SHOW_WHEN_LOCKEDContent = SGetField<int>(LocalBridgeClazz, "FLAG_SHOW_WHEN_LOCKED"); _FLAG_SHOW_WHEN_LOCKEDReady = true; } return _FLAG_SHOW_WHEN_LOCKEDContent; } }
            private static int _FLAG_SHOW_WHEN_LOCKEDContent = default;
            private static bool _FLAG_SHOW_WHEN_LOCKEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SPLIT_TOUCH"/>
            /// </summary>
            public static int FLAG_SPLIT_TOUCH { get { if (!_FLAG_SPLIT_TOUCHReady) { _FLAG_SPLIT_TOUCHContent = SGetField<int>(LocalBridgeClazz, "FLAG_SPLIT_TOUCH"); _FLAG_SPLIT_TOUCHReady = true; } return _FLAG_SPLIT_TOUCHContent; } }
            private static int _FLAG_SPLIT_TOUCHContent = default;
            private static bool _FLAG_SPLIT_TOUCHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_TOUCHABLE_WHEN_WAKING"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FLAG_TOUCHABLE_WHEN_WAKING { get { if (!_FLAG_TOUCHABLE_WHEN_WAKINGReady) { _FLAG_TOUCHABLE_WHEN_WAKINGContent = SGetField<int>(LocalBridgeClazz, "FLAG_TOUCHABLE_WHEN_WAKING"); _FLAG_TOUCHABLE_WHEN_WAKINGReady = true; } return _FLAG_TOUCHABLE_WHEN_WAKINGContent; } }
            private static int _FLAG_TOUCHABLE_WHEN_WAKINGContent = default;
            private static bool _FLAG_TOUCHABLE_WHEN_WAKINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_TRANSLUCENT_NAVIGATION"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FLAG_TRANSLUCENT_NAVIGATION { get { if (!_FLAG_TRANSLUCENT_NAVIGATIONReady) { _FLAG_TRANSLUCENT_NAVIGATIONContent = SGetField<int>(LocalBridgeClazz, "FLAG_TRANSLUCENT_NAVIGATION"); _FLAG_TRANSLUCENT_NAVIGATIONReady = true; } return _FLAG_TRANSLUCENT_NAVIGATIONContent; } }
            private static int _FLAG_TRANSLUCENT_NAVIGATIONContent = default;
            private static bool _FLAG_TRANSLUCENT_NAVIGATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_TRANSLUCENT_STATUS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FLAG_TRANSLUCENT_STATUS { get { if (!_FLAG_TRANSLUCENT_STATUSReady) { _FLAG_TRANSLUCENT_STATUSContent = SGetField<int>(LocalBridgeClazz, "FLAG_TRANSLUCENT_STATUS"); _FLAG_TRANSLUCENT_STATUSReady = true; } return _FLAG_TRANSLUCENT_STATUSContent; } }
            private static int _FLAG_TRANSLUCENT_STATUSContent = default;
            private static bool _FLAG_TRANSLUCENT_STATUSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_TURN_SCREEN_ON"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FLAG_TURN_SCREEN_ON { get { if (!_FLAG_TURN_SCREEN_ONReady) { _FLAG_TURN_SCREEN_ONContent = SGetField<int>(LocalBridgeClazz, "FLAG_TURN_SCREEN_ON"); _FLAG_TURN_SCREEN_ONReady = true; } return _FLAG_TURN_SCREEN_ONContent; } }
            private static int _FLAG_TURN_SCREEN_ONContent = default;
            private static bool _FLAG_TURN_SCREEN_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_WATCH_OUTSIDE_TOUCH"/>
            /// </summary>
            public static int FLAG_WATCH_OUTSIDE_TOUCH { get { if (!_FLAG_WATCH_OUTSIDE_TOUCHReady) { _FLAG_WATCH_OUTSIDE_TOUCHContent = SGetField<int>(LocalBridgeClazz, "FLAG_WATCH_OUTSIDE_TOUCH"); _FLAG_WATCH_OUTSIDE_TOUCHReady = true; } return _FLAG_WATCH_OUTSIDE_TOUCHContent; } }
            private static int _FLAG_WATCH_OUTSIDE_TOUCHContent = default;
            private static bool _FLAG_WATCH_OUTSIDE_TOUCHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAGS_CHANGED"/>
            /// </summary>
            public static int FLAGS_CHANGED { get { if (!_FLAGS_CHANGEDReady) { _FLAGS_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "FLAGS_CHANGED"); _FLAGS_CHANGEDReady = true; } return _FLAGS_CHANGEDContent; } }
            private static int _FLAGS_CHANGEDContent = default;
            private static bool _FLAGS_CHANGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FORMAT_CHANGED"/>
            /// </summary>
            public static int FORMAT_CHANGED { get { if (!_FORMAT_CHANGEDReady) { _FORMAT_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "FORMAT_CHANGED"); _FORMAT_CHANGEDReady = true; } return _FORMAT_CHANGEDContent; } }
            private static int _FORMAT_CHANGEDContent = default;
            private static bool _FORMAT_CHANGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAST_APPLICATION_WINDOW"/>
            /// </summary>
            public static int LAST_APPLICATION_WINDOW { get { if (!_LAST_APPLICATION_WINDOWReady) { _LAST_APPLICATION_WINDOWContent = SGetField<int>(LocalBridgeClazz, "LAST_APPLICATION_WINDOW"); _LAST_APPLICATION_WINDOWReady = true; } return _LAST_APPLICATION_WINDOWContent; } }
            private static int _LAST_APPLICATION_WINDOWContent = default;
            private static bool _LAST_APPLICATION_WINDOWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAST_SUB_WINDOW"/>
            /// </summary>
            public static int LAST_SUB_WINDOW { get { if (!_LAST_SUB_WINDOWReady) { _LAST_SUB_WINDOWContent = SGetField<int>(LocalBridgeClazz, "LAST_SUB_WINDOW"); _LAST_SUB_WINDOWReady = true; } return _LAST_SUB_WINDOWContent; } }
            private static int _LAST_SUB_WINDOWContent = default;
            private static bool _LAST_SUB_WINDOWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAST_SYSTEM_WINDOW"/>
            /// </summary>
            public static int LAST_SYSTEM_WINDOW { get { if (!_LAST_SYSTEM_WINDOWReady) { _LAST_SYSTEM_WINDOWContent = SGetField<int>(LocalBridgeClazz, "LAST_SYSTEM_WINDOW"); _LAST_SYSTEM_WINDOWReady = true; } return _LAST_SYSTEM_WINDOWContent; } }
            private static int _LAST_SYSTEM_WINDOWContent = default;
            private static bool _LAST_SYSTEM_WINDOWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAYOUT_CHANGED"/>
            /// </summary>
            public static int LAYOUT_CHANGED { get { if (!_LAYOUT_CHANGEDReady) { _LAYOUT_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "LAYOUT_CHANGED"); _LAYOUT_CHANGEDReady = true; } return _LAYOUT_CHANGEDContent; } }
            private static int _LAYOUT_CHANGEDContent = default;
            private static bool _LAYOUT_CHANGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS"/>
            /// </summary>
            public static int LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS { get { if (!_LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYSReady) { _LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYSContent = SGetField<int>(LocalBridgeClazz, "LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS"); _LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYSReady = true; } return _LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYSContent; } }
            private static int _LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYSContent = default;
            private static bool _LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT"/>
            /// </summary>
            public static int LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT { get { if (!_LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULTReady) { _LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT"); _LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULTReady = true; } return _LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULTContent; } }
            private static int _LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULTContent = default;
            private static bool _LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER"/>
            /// </summary>
            public static int LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER { get { if (!_LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVERReady) { _LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVERContent = SGetField<int>(LocalBridgeClazz, "LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER"); _LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVERReady = true; } return _LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVERContent; } }
            private static int _LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVERContent = default;
            private static bool _LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES"/>
            /// </summary>
            public static int LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES { get { if (!_LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGESReady) { _LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGESContent = SGetField<int>(LocalBridgeClazz, "LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES"); _LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGESReady = true; } return _LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGESContent; } }
            private static int _LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGESContent = default;
            private static bool _LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#MEMORY_TYPE_CHANGED"/>
            /// </summary>
            public static int MEMORY_TYPE_CHANGED { get { if (!_MEMORY_TYPE_CHANGEDReady) { _MEMORY_TYPE_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "MEMORY_TYPE_CHANGED"); _MEMORY_TYPE_CHANGEDReady = true; } return _MEMORY_TYPE_CHANGEDContent; } }
            private static int _MEMORY_TYPE_CHANGEDContent = default;
            private static bool _MEMORY_TYPE_CHANGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#MEMORY_TYPE_GPU"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int MEMORY_TYPE_GPU { get { if (!_MEMORY_TYPE_GPUReady) { _MEMORY_TYPE_GPUContent = SGetField<int>(LocalBridgeClazz, "MEMORY_TYPE_GPU"); _MEMORY_TYPE_GPUReady = true; } return _MEMORY_TYPE_GPUContent; } }
            private static int _MEMORY_TYPE_GPUContent = default;
            private static bool _MEMORY_TYPE_GPUReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#MEMORY_TYPE_HARDWARE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int MEMORY_TYPE_HARDWARE { get { if (!_MEMORY_TYPE_HARDWAREReady) { _MEMORY_TYPE_HARDWAREContent = SGetField<int>(LocalBridgeClazz, "MEMORY_TYPE_HARDWARE"); _MEMORY_TYPE_HARDWAREReady = true; } return _MEMORY_TYPE_HARDWAREContent; } }
            private static int _MEMORY_TYPE_HARDWAREContent = default;
            private static bool _MEMORY_TYPE_HARDWAREReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#MEMORY_TYPE_NORMAL"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int MEMORY_TYPE_NORMAL { get { if (!_MEMORY_TYPE_NORMALReady) { _MEMORY_TYPE_NORMALContent = SGetField<int>(LocalBridgeClazz, "MEMORY_TYPE_NORMAL"); _MEMORY_TYPE_NORMALReady = true; } return _MEMORY_TYPE_NORMALContent; } }
            private static int _MEMORY_TYPE_NORMALContent = default;
            private static bool _MEMORY_TYPE_NORMALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#MEMORY_TYPE_PUSH_BUFFERS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int MEMORY_TYPE_PUSH_BUFFERS { get { if (!_MEMORY_TYPE_PUSH_BUFFERSReady) { _MEMORY_TYPE_PUSH_BUFFERSContent = SGetField<int>(LocalBridgeClazz, "MEMORY_TYPE_PUSH_BUFFERS"); _MEMORY_TYPE_PUSH_BUFFERSReady = true; } return _MEMORY_TYPE_PUSH_BUFFERSContent; } }
            private static int _MEMORY_TYPE_PUSH_BUFFERSContent = default;
            private static bool _MEMORY_TYPE_PUSH_BUFFERSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#ROTATION_ANIMATION_CHANGED"/>
            /// </summary>
            public static int ROTATION_ANIMATION_CHANGED { get { if (!_ROTATION_ANIMATION_CHANGEDReady) { _ROTATION_ANIMATION_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "ROTATION_ANIMATION_CHANGED"); _ROTATION_ANIMATION_CHANGEDReady = true; } return _ROTATION_ANIMATION_CHANGEDContent; } }
            private static int _ROTATION_ANIMATION_CHANGEDContent = default;
            private static bool _ROTATION_ANIMATION_CHANGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#ROTATION_ANIMATION_CROSSFADE"/>
            /// </summary>
            public static int ROTATION_ANIMATION_CROSSFADE { get { if (!_ROTATION_ANIMATION_CROSSFADEReady) { _ROTATION_ANIMATION_CROSSFADEContent = SGetField<int>(LocalBridgeClazz, "ROTATION_ANIMATION_CROSSFADE"); _ROTATION_ANIMATION_CROSSFADEReady = true; } return _ROTATION_ANIMATION_CROSSFADEContent; } }
            private static int _ROTATION_ANIMATION_CROSSFADEContent = default;
            private static bool _ROTATION_ANIMATION_CROSSFADEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#ROTATION_ANIMATION_JUMPCUT"/>
            /// </summary>
            public static int ROTATION_ANIMATION_JUMPCUT { get { if (!_ROTATION_ANIMATION_JUMPCUTReady) { _ROTATION_ANIMATION_JUMPCUTContent = SGetField<int>(LocalBridgeClazz, "ROTATION_ANIMATION_JUMPCUT"); _ROTATION_ANIMATION_JUMPCUTReady = true; } return _ROTATION_ANIMATION_JUMPCUTContent; } }
            private static int _ROTATION_ANIMATION_JUMPCUTContent = default;
            private static bool _ROTATION_ANIMATION_JUMPCUTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#ROTATION_ANIMATION_ROTATE"/>
            /// </summary>
            public static int ROTATION_ANIMATION_ROTATE { get { if (!_ROTATION_ANIMATION_ROTATEReady) { _ROTATION_ANIMATION_ROTATEContent = SGetField<int>(LocalBridgeClazz, "ROTATION_ANIMATION_ROTATE"); _ROTATION_ANIMATION_ROTATEReady = true; } return _ROTATION_ANIMATION_ROTATEContent; } }
            private static int _ROTATION_ANIMATION_ROTATEContent = default;
            private static bool _ROTATION_ANIMATION_ROTATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#ROTATION_ANIMATION_SEAMLESS"/>
            /// </summary>
            public static int ROTATION_ANIMATION_SEAMLESS { get { if (!_ROTATION_ANIMATION_SEAMLESSReady) { _ROTATION_ANIMATION_SEAMLESSContent = SGetField<int>(LocalBridgeClazz, "ROTATION_ANIMATION_SEAMLESS"); _ROTATION_ANIMATION_SEAMLESSReady = true; } return _ROTATION_ANIMATION_SEAMLESSContent; } }
            private static int _ROTATION_ANIMATION_SEAMLESSContent = default;
            private static bool _ROTATION_ANIMATION_SEAMLESSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SCREEN_BRIGHTNESS_CHANGED"/>
            /// </summary>
            public static int SCREEN_BRIGHTNESS_CHANGED { get { if (!_SCREEN_BRIGHTNESS_CHANGEDReady) { _SCREEN_BRIGHTNESS_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "SCREEN_BRIGHTNESS_CHANGED"); _SCREEN_BRIGHTNESS_CHANGEDReady = true; } return _SCREEN_BRIGHTNESS_CHANGEDContent; } }
            private static int _SCREEN_BRIGHTNESS_CHANGEDContent = default;
            private static bool _SCREEN_BRIGHTNESS_CHANGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SCREEN_ORIENTATION_CHANGED"/>
            /// </summary>
            public static int SCREEN_ORIENTATION_CHANGED { get { if (!_SCREEN_ORIENTATION_CHANGEDReady) { _SCREEN_ORIENTATION_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "SCREEN_ORIENTATION_CHANGED"); _SCREEN_ORIENTATION_CHANGEDReady = true; } return _SCREEN_ORIENTATION_CHANGEDContent; } }
            private static int _SCREEN_ORIENTATION_CHANGEDContent = default;
            private static bool _SCREEN_ORIENTATION_CHANGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_ADJUST_NOTHING"/>
            /// </summary>
            public static int SOFT_INPUT_ADJUST_NOTHING { get { if (!_SOFT_INPUT_ADJUST_NOTHINGReady) { _SOFT_INPUT_ADJUST_NOTHINGContent = SGetField<int>(LocalBridgeClazz, "SOFT_INPUT_ADJUST_NOTHING"); _SOFT_INPUT_ADJUST_NOTHINGReady = true; } return _SOFT_INPUT_ADJUST_NOTHINGContent; } }
            private static int _SOFT_INPUT_ADJUST_NOTHINGContent = default;
            private static bool _SOFT_INPUT_ADJUST_NOTHINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_ADJUST_PAN"/>
            /// </summary>
            public static int SOFT_INPUT_ADJUST_PAN { get { if (!_SOFT_INPUT_ADJUST_PANReady) { _SOFT_INPUT_ADJUST_PANContent = SGetField<int>(LocalBridgeClazz, "SOFT_INPUT_ADJUST_PAN"); _SOFT_INPUT_ADJUST_PANReady = true; } return _SOFT_INPUT_ADJUST_PANContent; } }
            private static int _SOFT_INPUT_ADJUST_PANContent = default;
            private static bool _SOFT_INPUT_ADJUST_PANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_ADJUST_RESIZE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int SOFT_INPUT_ADJUST_RESIZE { get { if (!_SOFT_INPUT_ADJUST_RESIZEReady) { _SOFT_INPUT_ADJUST_RESIZEContent = SGetField<int>(LocalBridgeClazz, "SOFT_INPUT_ADJUST_RESIZE"); _SOFT_INPUT_ADJUST_RESIZEReady = true; } return _SOFT_INPUT_ADJUST_RESIZEContent; } }
            private static int _SOFT_INPUT_ADJUST_RESIZEContent = default;
            private static bool _SOFT_INPUT_ADJUST_RESIZEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_ADJUST_UNSPECIFIED"/>
            /// </summary>
            public static int SOFT_INPUT_ADJUST_UNSPECIFIED { get { if (!_SOFT_INPUT_ADJUST_UNSPECIFIEDReady) { _SOFT_INPUT_ADJUST_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "SOFT_INPUT_ADJUST_UNSPECIFIED"); _SOFT_INPUT_ADJUST_UNSPECIFIEDReady = true; } return _SOFT_INPUT_ADJUST_UNSPECIFIEDContent; } }
            private static int _SOFT_INPUT_ADJUST_UNSPECIFIEDContent = default;
            private static bool _SOFT_INPUT_ADJUST_UNSPECIFIEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_IS_FORWARD_NAVIGATION"/>
            /// </summary>
            public static int SOFT_INPUT_IS_FORWARD_NAVIGATION { get { if (!_SOFT_INPUT_IS_FORWARD_NAVIGATIONReady) { _SOFT_INPUT_IS_FORWARD_NAVIGATIONContent = SGetField<int>(LocalBridgeClazz, "SOFT_INPUT_IS_FORWARD_NAVIGATION"); _SOFT_INPUT_IS_FORWARD_NAVIGATIONReady = true; } return _SOFT_INPUT_IS_FORWARD_NAVIGATIONContent; } }
            private static int _SOFT_INPUT_IS_FORWARD_NAVIGATIONContent = default;
            private static bool _SOFT_INPUT_IS_FORWARD_NAVIGATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_MASK_ADJUST"/>
            /// </summary>
            public static int SOFT_INPUT_MASK_ADJUST { get { if (!_SOFT_INPUT_MASK_ADJUSTReady) { _SOFT_INPUT_MASK_ADJUSTContent = SGetField<int>(LocalBridgeClazz, "SOFT_INPUT_MASK_ADJUST"); _SOFT_INPUT_MASK_ADJUSTReady = true; } return _SOFT_INPUT_MASK_ADJUSTContent; } }
            private static int _SOFT_INPUT_MASK_ADJUSTContent = default;
            private static bool _SOFT_INPUT_MASK_ADJUSTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_MASK_STATE"/>
            /// </summary>
            public static int SOFT_INPUT_MASK_STATE { get { if (!_SOFT_INPUT_MASK_STATEReady) { _SOFT_INPUT_MASK_STATEContent = SGetField<int>(LocalBridgeClazz, "SOFT_INPUT_MASK_STATE"); _SOFT_INPUT_MASK_STATEReady = true; } return _SOFT_INPUT_MASK_STATEContent; } }
            private static int _SOFT_INPUT_MASK_STATEContent = default;
            private static bool _SOFT_INPUT_MASK_STATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_MODE_CHANGED"/>
            /// </summary>
            public static int SOFT_INPUT_MODE_CHANGED { get { if (!_SOFT_INPUT_MODE_CHANGEDReady) { _SOFT_INPUT_MODE_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "SOFT_INPUT_MODE_CHANGED"); _SOFT_INPUT_MODE_CHANGEDReady = true; } return _SOFT_INPUT_MODE_CHANGEDContent; } }
            private static int _SOFT_INPUT_MODE_CHANGEDContent = default;
            private static bool _SOFT_INPUT_MODE_CHANGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_STATE_ALWAYS_HIDDEN"/>
            /// </summary>
            public static int SOFT_INPUT_STATE_ALWAYS_HIDDEN { get { if (!_SOFT_INPUT_STATE_ALWAYS_HIDDENReady) { _SOFT_INPUT_STATE_ALWAYS_HIDDENContent = SGetField<int>(LocalBridgeClazz, "SOFT_INPUT_STATE_ALWAYS_HIDDEN"); _SOFT_INPUT_STATE_ALWAYS_HIDDENReady = true; } return _SOFT_INPUT_STATE_ALWAYS_HIDDENContent; } }
            private static int _SOFT_INPUT_STATE_ALWAYS_HIDDENContent = default;
            private static bool _SOFT_INPUT_STATE_ALWAYS_HIDDENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_STATE_ALWAYS_VISIBLE"/>
            /// </summary>
            public static int SOFT_INPUT_STATE_ALWAYS_VISIBLE { get { if (!_SOFT_INPUT_STATE_ALWAYS_VISIBLEReady) { _SOFT_INPUT_STATE_ALWAYS_VISIBLEContent = SGetField<int>(LocalBridgeClazz, "SOFT_INPUT_STATE_ALWAYS_VISIBLE"); _SOFT_INPUT_STATE_ALWAYS_VISIBLEReady = true; } return _SOFT_INPUT_STATE_ALWAYS_VISIBLEContent; } }
            private static int _SOFT_INPUT_STATE_ALWAYS_VISIBLEContent = default;
            private static bool _SOFT_INPUT_STATE_ALWAYS_VISIBLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_STATE_HIDDEN"/>
            /// </summary>
            public static int SOFT_INPUT_STATE_HIDDEN { get { if (!_SOFT_INPUT_STATE_HIDDENReady) { _SOFT_INPUT_STATE_HIDDENContent = SGetField<int>(LocalBridgeClazz, "SOFT_INPUT_STATE_HIDDEN"); _SOFT_INPUT_STATE_HIDDENReady = true; } return _SOFT_INPUT_STATE_HIDDENContent; } }
            private static int _SOFT_INPUT_STATE_HIDDENContent = default;
            private static bool _SOFT_INPUT_STATE_HIDDENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_STATE_UNCHANGED"/>
            /// </summary>
            public static int SOFT_INPUT_STATE_UNCHANGED { get { if (!_SOFT_INPUT_STATE_UNCHANGEDReady) { _SOFT_INPUT_STATE_UNCHANGEDContent = SGetField<int>(LocalBridgeClazz, "SOFT_INPUT_STATE_UNCHANGED"); _SOFT_INPUT_STATE_UNCHANGEDReady = true; } return _SOFT_INPUT_STATE_UNCHANGEDContent; } }
            private static int _SOFT_INPUT_STATE_UNCHANGEDContent = default;
            private static bool _SOFT_INPUT_STATE_UNCHANGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_STATE_UNSPECIFIED"/>
            /// </summary>
            public static int SOFT_INPUT_STATE_UNSPECIFIED { get { if (!_SOFT_INPUT_STATE_UNSPECIFIEDReady) { _SOFT_INPUT_STATE_UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "SOFT_INPUT_STATE_UNSPECIFIED"); _SOFT_INPUT_STATE_UNSPECIFIEDReady = true; } return _SOFT_INPUT_STATE_UNSPECIFIEDContent; } }
            private static int _SOFT_INPUT_STATE_UNSPECIFIEDContent = default;
            private static bool _SOFT_INPUT_STATE_UNSPECIFIEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_STATE_VISIBLE"/>
            /// </summary>
            public static int SOFT_INPUT_STATE_VISIBLE { get { if (!_SOFT_INPUT_STATE_VISIBLEReady) { _SOFT_INPUT_STATE_VISIBLEContent = SGetField<int>(LocalBridgeClazz, "SOFT_INPUT_STATE_VISIBLE"); _SOFT_INPUT_STATE_VISIBLEReady = true; } return _SOFT_INPUT_STATE_VISIBLEContent; } }
            private static int _SOFT_INPUT_STATE_VISIBLEContent = default;
            private static bool _SOFT_INPUT_STATE_VISIBLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TITLE_CHANGED"/>
            /// </summary>
            public static int TITLE_CHANGED { get { if (!_TITLE_CHANGEDReady) { _TITLE_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "TITLE_CHANGED"); _TITLE_CHANGEDReady = true; } return _TITLE_CHANGEDContent; } }
            private static int _TITLE_CHANGEDContent = default;
            private static bool _TITLE_CHANGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_ACCESSIBILITY_OVERLAY"/>
            /// </summary>
            public static int TYPE_ACCESSIBILITY_OVERLAY { get { if (!_TYPE_ACCESSIBILITY_OVERLAYReady) { _TYPE_ACCESSIBILITY_OVERLAYContent = SGetField<int>(LocalBridgeClazz, "TYPE_ACCESSIBILITY_OVERLAY"); _TYPE_ACCESSIBILITY_OVERLAYReady = true; } return _TYPE_ACCESSIBILITY_OVERLAYContent; } }
            private static int _TYPE_ACCESSIBILITY_OVERLAYContent = default;
            private static bool _TYPE_ACCESSIBILITY_OVERLAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION"/>
            /// </summary>
            public static int TYPE_APPLICATION { get { if (!_TYPE_APPLICATIONReady) { _TYPE_APPLICATIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_APPLICATION"); _TYPE_APPLICATIONReady = true; } return _TYPE_APPLICATIONContent; } }
            private static int _TYPE_APPLICATIONContent = default;
            private static bool _TYPE_APPLICATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_ATTACHED_DIALOG"/>
            /// </summary>
            public static int TYPE_APPLICATION_ATTACHED_DIALOG { get { if (!_TYPE_APPLICATION_ATTACHED_DIALOGReady) { _TYPE_APPLICATION_ATTACHED_DIALOGContent = SGetField<int>(LocalBridgeClazz, "TYPE_APPLICATION_ATTACHED_DIALOG"); _TYPE_APPLICATION_ATTACHED_DIALOGReady = true; } return _TYPE_APPLICATION_ATTACHED_DIALOGContent; } }
            private static int _TYPE_APPLICATION_ATTACHED_DIALOGContent = default;
            private static bool _TYPE_APPLICATION_ATTACHED_DIALOGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_MEDIA"/>
            /// </summary>
            public static int TYPE_APPLICATION_MEDIA { get { if (!_TYPE_APPLICATION_MEDIAReady) { _TYPE_APPLICATION_MEDIAContent = SGetField<int>(LocalBridgeClazz, "TYPE_APPLICATION_MEDIA"); _TYPE_APPLICATION_MEDIAReady = true; } return _TYPE_APPLICATION_MEDIAContent; } }
            private static int _TYPE_APPLICATION_MEDIAContent = default;
            private static bool _TYPE_APPLICATION_MEDIAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_OVERLAY"/>
            /// </summary>
            public static int TYPE_APPLICATION_OVERLAY { get { if (!_TYPE_APPLICATION_OVERLAYReady) { _TYPE_APPLICATION_OVERLAYContent = SGetField<int>(LocalBridgeClazz, "TYPE_APPLICATION_OVERLAY"); _TYPE_APPLICATION_OVERLAYReady = true; } return _TYPE_APPLICATION_OVERLAYContent; } }
            private static int _TYPE_APPLICATION_OVERLAYContent = default;
            private static bool _TYPE_APPLICATION_OVERLAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_PANEL"/>
            /// </summary>
            public static int TYPE_APPLICATION_PANEL { get { if (!_TYPE_APPLICATION_PANELReady) { _TYPE_APPLICATION_PANELContent = SGetField<int>(LocalBridgeClazz, "TYPE_APPLICATION_PANEL"); _TYPE_APPLICATION_PANELReady = true; } return _TYPE_APPLICATION_PANELContent; } }
            private static int _TYPE_APPLICATION_PANELContent = default;
            private static bool _TYPE_APPLICATION_PANELReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_STARTING"/>
            /// </summary>
            public static int TYPE_APPLICATION_STARTING { get { if (!_TYPE_APPLICATION_STARTINGReady) { _TYPE_APPLICATION_STARTINGContent = SGetField<int>(LocalBridgeClazz, "TYPE_APPLICATION_STARTING"); _TYPE_APPLICATION_STARTINGReady = true; } return _TYPE_APPLICATION_STARTINGContent; } }
            private static int _TYPE_APPLICATION_STARTINGContent = default;
            private static bool _TYPE_APPLICATION_STARTINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_SUB_PANEL"/>
            /// </summary>
            public static int TYPE_APPLICATION_SUB_PANEL { get { if (!_TYPE_APPLICATION_SUB_PANELReady) { _TYPE_APPLICATION_SUB_PANELContent = SGetField<int>(LocalBridgeClazz, "TYPE_APPLICATION_SUB_PANEL"); _TYPE_APPLICATION_SUB_PANELReady = true; } return _TYPE_APPLICATION_SUB_PANELContent; } }
            private static int _TYPE_APPLICATION_SUB_PANELContent = default;
            private static bool _TYPE_APPLICATION_SUB_PANELReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_BASE_APPLICATION"/>
            /// </summary>
            public static int TYPE_BASE_APPLICATION { get { if (!_TYPE_BASE_APPLICATIONReady) { _TYPE_BASE_APPLICATIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_BASE_APPLICATION"); _TYPE_BASE_APPLICATIONReady = true; } return _TYPE_BASE_APPLICATIONContent; } }
            private static int _TYPE_BASE_APPLICATIONContent = default;
            private static bool _TYPE_BASE_APPLICATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_CHANGED"/>
            /// </summary>
            public static int TYPE_CHANGED { get { if (!_TYPE_CHANGEDReady) { _TYPE_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_CHANGED"); _TYPE_CHANGEDReady = true; } return _TYPE_CHANGEDContent; } }
            private static int _TYPE_CHANGEDContent = default;
            private static bool _TYPE_CHANGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_DRAWN_APPLICATION"/>
            /// </summary>
            public static int TYPE_DRAWN_APPLICATION { get { if (!_TYPE_DRAWN_APPLICATIONReady) { _TYPE_DRAWN_APPLICATIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_DRAWN_APPLICATION"); _TYPE_DRAWN_APPLICATIONReady = true; } return _TYPE_DRAWN_APPLICATIONContent; } }
            private static int _TYPE_DRAWN_APPLICATIONContent = default;
            private static bool _TYPE_DRAWN_APPLICATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_INPUT_METHOD"/>
            /// </summary>
            public static int TYPE_INPUT_METHOD { get { if (!_TYPE_INPUT_METHODReady) { _TYPE_INPUT_METHODContent = SGetField<int>(LocalBridgeClazz, "TYPE_INPUT_METHOD"); _TYPE_INPUT_METHODReady = true; } return _TYPE_INPUT_METHODContent; } }
            private static int _TYPE_INPUT_METHODContent = default;
            private static bool _TYPE_INPUT_METHODReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_INPUT_METHOD_DIALOG"/>
            /// </summary>
            public static int TYPE_INPUT_METHOD_DIALOG { get { if (!_TYPE_INPUT_METHOD_DIALOGReady) { _TYPE_INPUT_METHOD_DIALOGContent = SGetField<int>(LocalBridgeClazz, "TYPE_INPUT_METHOD_DIALOG"); _TYPE_INPUT_METHOD_DIALOGReady = true; } return _TYPE_INPUT_METHOD_DIALOGContent; } }
            private static int _TYPE_INPUT_METHOD_DIALOGContent = default;
            private static bool _TYPE_INPUT_METHOD_DIALOGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_KEYGUARD_DIALOG"/>
            /// </summary>
            public static int TYPE_KEYGUARD_DIALOG { get { if (!_TYPE_KEYGUARD_DIALOGReady) { _TYPE_KEYGUARD_DIALOGContent = SGetField<int>(LocalBridgeClazz, "TYPE_KEYGUARD_DIALOG"); _TYPE_KEYGUARD_DIALOGReady = true; } return _TYPE_KEYGUARD_DIALOGContent; } }
            private static int _TYPE_KEYGUARD_DIALOGContent = default;
            private static bool _TYPE_KEYGUARD_DIALOGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_PHONE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int TYPE_PHONE { get { if (!_TYPE_PHONEReady) { _TYPE_PHONEContent = SGetField<int>(LocalBridgeClazz, "TYPE_PHONE"); _TYPE_PHONEReady = true; } return _TYPE_PHONEContent; } }
            private static int _TYPE_PHONEContent = default;
            private static bool _TYPE_PHONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_PRIORITY_PHONE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int TYPE_PRIORITY_PHONE { get { if (!_TYPE_PRIORITY_PHONEReady) { _TYPE_PRIORITY_PHONEContent = SGetField<int>(LocalBridgeClazz, "TYPE_PRIORITY_PHONE"); _TYPE_PRIORITY_PHONEReady = true; } return _TYPE_PRIORITY_PHONEContent; } }
            private static int _TYPE_PRIORITY_PHONEContent = default;
            private static bool _TYPE_PRIORITY_PHONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_PRIVATE_PRESENTATION"/>
            /// </summary>
            public static int TYPE_PRIVATE_PRESENTATION { get { if (!_TYPE_PRIVATE_PRESENTATIONReady) { _TYPE_PRIVATE_PRESENTATIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_PRIVATE_PRESENTATION"); _TYPE_PRIVATE_PRESENTATIONReady = true; } return _TYPE_PRIVATE_PRESENTATIONContent; } }
            private static int _TYPE_PRIVATE_PRESENTATIONContent = default;
            private static bool _TYPE_PRIVATE_PRESENTATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_SEARCH_BAR"/>
            /// </summary>
            public static int TYPE_SEARCH_BAR { get { if (!_TYPE_SEARCH_BARReady) { _TYPE_SEARCH_BARContent = SGetField<int>(LocalBridgeClazz, "TYPE_SEARCH_BAR"); _TYPE_SEARCH_BARReady = true; } return _TYPE_SEARCH_BARContent; } }
            private static int _TYPE_SEARCH_BARContent = default;
            private static bool _TYPE_SEARCH_BARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_STATUS_BAR"/>
            /// </summary>
            public static int TYPE_STATUS_BAR { get { if (!_TYPE_STATUS_BARReady) { _TYPE_STATUS_BARContent = SGetField<int>(LocalBridgeClazz, "TYPE_STATUS_BAR"); _TYPE_STATUS_BARReady = true; } return _TYPE_STATUS_BARContent; } }
            private static int _TYPE_STATUS_BARContent = default;
            private static bool _TYPE_STATUS_BARReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_SYSTEM_ALERT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int TYPE_SYSTEM_ALERT { get { if (!_TYPE_SYSTEM_ALERTReady) { _TYPE_SYSTEM_ALERTContent = SGetField<int>(LocalBridgeClazz, "TYPE_SYSTEM_ALERT"); _TYPE_SYSTEM_ALERTReady = true; } return _TYPE_SYSTEM_ALERTContent; } }
            private static int _TYPE_SYSTEM_ALERTContent = default;
            private static bool _TYPE_SYSTEM_ALERTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_SYSTEM_DIALOG"/>
            /// </summary>
            public static int TYPE_SYSTEM_DIALOG { get { if (!_TYPE_SYSTEM_DIALOGReady) { _TYPE_SYSTEM_DIALOGContent = SGetField<int>(LocalBridgeClazz, "TYPE_SYSTEM_DIALOG"); _TYPE_SYSTEM_DIALOGReady = true; } return _TYPE_SYSTEM_DIALOGContent; } }
            private static int _TYPE_SYSTEM_DIALOGContent = default;
            private static bool _TYPE_SYSTEM_DIALOGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_SYSTEM_ERROR"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int TYPE_SYSTEM_ERROR { get { if (!_TYPE_SYSTEM_ERRORReady) { _TYPE_SYSTEM_ERRORContent = SGetField<int>(LocalBridgeClazz, "TYPE_SYSTEM_ERROR"); _TYPE_SYSTEM_ERRORReady = true; } return _TYPE_SYSTEM_ERRORContent; } }
            private static int _TYPE_SYSTEM_ERRORContent = default;
            private static bool _TYPE_SYSTEM_ERRORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_SYSTEM_OVERLAY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int TYPE_SYSTEM_OVERLAY { get { if (!_TYPE_SYSTEM_OVERLAYReady) { _TYPE_SYSTEM_OVERLAYContent = SGetField<int>(LocalBridgeClazz, "TYPE_SYSTEM_OVERLAY"); _TYPE_SYSTEM_OVERLAYReady = true; } return _TYPE_SYSTEM_OVERLAYContent; } }
            private static int _TYPE_SYSTEM_OVERLAYContent = default;
            private static bool _TYPE_SYSTEM_OVERLAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_TOAST"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int TYPE_TOAST { get { if (!_TYPE_TOASTReady) { _TYPE_TOASTContent = SGetField<int>(LocalBridgeClazz, "TYPE_TOAST"); _TYPE_TOASTReady = true; } return _TYPE_TOASTContent; } }
            private static int _TYPE_TOASTContent = default;
            private static bool _TYPE_TOASTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_WALLPAPER"/>
            /// </summary>
            public static int TYPE_WALLPAPER { get { if (!_TYPE_WALLPAPERReady) { _TYPE_WALLPAPERContent = SGetField<int>(LocalBridgeClazz, "TYPE_WALLPAPER"); _TYPE_WALLPAPERReady = true; } return _TYPE_WALLPAPERContent; } }
            private static int _TYPE_WALLPAPERContent = default;
            private static bool _TYPE_WALLPAPERReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#mayUseInputMethod(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool MayUseInputMethod(int arg0)
            {
                return SExecuteWithSignature<bool>(LocalBridgeClazz, "mayUseInputMethod", "(I)Z", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#areWallpaperTouchEventsEnabled()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool AreWallpaperTouchEventsEnabled()
            {
                return IExecuteWithSignature<bool>("areWallpaperTouchEventsEnabled", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#canPlayMoveAnimation()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool CanPlayMoveAnimation()
            {
                return IExecuteWithSignature<bool>("canPlayMoveAnimation", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#getFrameRateBoostOnTouchEnabled()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool GetFrameRateBoostOnTouchEnabled()
            {
                return IExecuteWithSignature<bool>("getFrameRateBoostOnTouchEnabled", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#isFitInsetsIgnoringVisibility()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsFitInsetsIgnoringVisibility()
            {
                return IExecuteWithSignature<bool>("isFitInsetsIgnoringVisibility", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#isFrameRatePowerSavingsBalanced()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsFrameRatePowerSavingsBalanced()
            {
                return IExecuteWithSignature<bool>("isFrameRatePowerSavingsBalanced", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#isHdrConversionEnabled()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsHdrConversionEnabled()
            {
                return IExecuteWithSignature<bool>("isHdrConversionEnabled", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#copyFrom(android.view.WindowManager.LayoutParams)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.WindowManager.LayoutParams"/></param>
            /// <returns><see cref="int"/></returns>
            public int CopyFrom(Android.View.WindowManager.LayoutParams arg0)
            {
                return IExecuteWithSignature<int>("copyFrom", "(Landroid/view/WindowManager$LayoutParams;)I", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#getTitle()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.CharSequence"/></returns>
            public Java.Lang.CharSequence GetTitle()
            {
                return IExecuteWithSignature<Java.Lang.CharSequence>("getTitle", "()Ljava/lang/CharSequence;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#setTitle(java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
            public void SetTitle(Java.Lang.CharSequence arg0)
            {
                IExecuteWithSignature("setTitle", "(Ljava/lang/CharSequence;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#getDesiredHdrHeadroom()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetDesiredHdrHeadroom()
            {
                return IExecuteWithSignature<float>("getDesiredHdrHeadroom", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#getBlurBehindRadius()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetBlurBehindRadius()
            {
                return IExecuteWithSignature<int>("getBlurBehindRadius", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#getColorMode()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetColorMode()
            {
                return IExecuteWithSignature<int>("getColorMode", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#getFitInsetsSides()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetFitInsetsSides()
            {
                return IExecuteWithSignature<int>("getFitInsetsSides", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#getFitInsetsTypes()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetFitInsetsTypes()
            {
                return IExecuteWithSignature<int>("getFitInsetsTypes", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#debug(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String Debug(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Java.Lang.String>("debug", "(Ljava/lang/String;)Ljava/lang/String;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#setBlurBehindRadius(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetBlurBehindRadius(int arg0)
            {
                IExecuteWithSignature("setBlurBehindRadius", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#setCanPlayMoveAnimation(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void SetCanPlayMoveAnimation(bool arg0)
            {
                IExecuteWithSignature("setCanPlayMoveAnimation", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#setColorMode(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetColorMode(int arg0)
            {
                IExecuteWithSignature("setColorMode", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#setDesiredHdrHeadroom(float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            public void SetDesiredHdrHeadroom(float arg0)
            {
                IExecuteWithSignature("setDesiredHdrHeadroom", "(F)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#setFitInsetsIgnoringVisibility(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void SetFitInsetsIgnoringVisibility(bool arg0)
            {
                IExecuteWithSignature("setFitInsetsIgnoringVisibility", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#setFitInsetsSides(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetFitInsetsSides(int arg0)
            {
                IExecuteWithSignature("setFitInsetsSides", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#setFitInsetsTypes(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetFitInsetsTypes(int arg0)
            {
                IExecuteWithSignature("setFitInsetsTypes", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#setFrameRateBoostOnTouchEnabled(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void SetFrameRateBoostOnTouchEnabled(bool arg0)
            {
                IExecuteWithSignature("setFrameRateBoostOnTouchEnabled", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#setFrameRatePowerSavingsBalanced(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void SetFrameRatePowerSavingsBalanced(bool arg0)
            {
                IExecuteWithSignature("setFrameRatePowerSavingsBalanced", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#setHdrConversionEnabled(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void SetHdrConversionEnabled(bool arg0)
            {
                IExecuteWithSignature("setHdrConversionEnabled", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#setWallpaperTouchEventsEnabled(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public void SetWallpaperTouchEventsEnabled(bool arg0)
            {
                IExecuteWithSignature("setWallpaperTouchEventsEnabled", "(Z)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region SurfaceHolder declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html"/>
    /// </summary>
    public partial class SurfaceHolder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SurfaceHolder>
    {
        const string _bridgeClassName = "android.view.SurfaceHolder";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("SurfaceHolder class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public SurfaceHolder() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("SurfaceHolder class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public SurfaceHolder(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region BadSurfaceTypeException declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.BadSurfaceTypeException.html"/>
        /// </summary>
        public partial class BadSurfaceTypeException : Java.Lang.RuntimeException
        {
            const string _bridgeClassName = "android.view.SurfaceHolder$BadSurfaceTypeException";
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeException_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

            // TODO: complete the class

        }
        #endregion

        #region Callback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback.html"/>
        /// </summary>
        public partial class Callback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Callback>
        {
            const string _bridgeClassName = "android.view.SurfaceHolder$Callback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("Callback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Callback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("Callback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Callback(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Callback2 declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback2.html"/>
        /// </summary>
        public partial class Callback2 : Android.View.SurfaceHolder.Callback
        {
            const string _bridgeClassName = "android.view.SurfaceHolder$Callback2";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("Callback2 class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Callback2() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("Callback2 class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Callback2(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region ISurfaceHolder
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface ISurfaceHolder
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region SurfaceHolder implementation
    public partial class SurfaceHolder : Android.View.ISurfaceHolder
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#SURFACE_TYPE_GPU"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SURFACE_TYPE_GPU { get { if (!_SURFACE_TYPE_GPUReady) { _SURFACE_TYPE_GPUContent = SGetField<int>(LocalBridgeClazz, "SURFACE_TYPE_GPU"); _SURFACE_TYPE_GPUReady = true; } return _SURFACE_TYPE_GPUContent; } }
        private static int _SURFACE_TYPE_GPUContent = default;
        private static bool _SURFACE_TYPE_GPUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#SURFACE_TYPE_HARDWARE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SURFACE_TYPE_HARDWARE { get { if (!_SURFACE_TYPE_HARDWAREReady) { _SURFACE_TYPE_HARDWAREContent = SGetField<int>(LocalBridgeClazz, "SURFACE_TYPE_HARDWARE"); _SURFACE_TYPE_HARDWAREReady = true; } return _SURFACE_TYPE_HARDWAREContent; } }
        private static int _SURFACE_TYPE_HARDWAREContent = default;
        private static bool _SURFACE_TYPE_HARDWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#SURFACE_TYPE_NORMAL"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SURFACE_TYPE_NORMAL { get { if (!_SURFACE_TYPE_NORMALReady) { _SURFACE_TYPE_NORMALContent = SGetField<int>(LocalBridgeClazz, "SURFACE_TYPE_NORMAL"); _SURFACE_TYPE_NORMALReady = true; } return _SURFACE_TYPE_NORMALContent; } }
        private static int _SURFACE_TYPE_NORMALContent = default;
        private static bool _SURFACE_TYPE_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#SURFACE_TYPE_PUSH_BUFFERS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SURFACE_TYPE_PUSH_BUFFERS { get { if (!_SURFACE_TYPE_PUSH_BUFFERSReady) { _SURFACE_TYPE_PUSH_BUFFERSContent = SGetField<int>(LocalBridgeClazz, "SURFACE_TYPE_PUSH_BUFFERS"); _SURFACE_TYPE_PUSH_BUFFERSReady = true; } return _SURFACE_TYPE_PUSH_BUFFERSContent; } }
        private static int _SURFACE_TYPE_PUSH_BUFFERSContent = default;
        private static bool _SURFACE_TYPE_PUSH_BUFFERSReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#lockCanvas()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Canvas"/></returns>
        public Android.Graphics.Canvas LockCanvas()
        {
            return IExecuteWithSignature<Android.Graphics.Canvas>("lockCanvas", "()Landroid/graphics/Canvas;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#lockCanvas(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="Android.Graphics.Canvas"/></returns>
        public Android.Graphics.Canvas LockCanvas(Android.Graphics.Rect arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Canvas>("lockCanvas", "(Landroid/graphics/Rect;)Landroid/graphics/Canvas;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#getSurfaceFrame()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Rect"/></returns>
        public Android.Graphics.Rect GetSurfaceFrame()
        {
            return IExecuteWithSignature<Android.Graphics.Rect>("getSurfaceFrame", "()Landroid/graphics/Rect;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#getSurface()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Surface"/></returns>
        public Android.View.Surface GetSurface()
        {
            return IExecuteWithSignature<Android.View.Surface>("getSurface", "()Landroid/view/Surface;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#isCreating()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsCreating()
        {
            return IExecuteWithSignature<bool>("isCreating", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#addCallback(android.view.SurfaceHolder.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.SurfaceHolder.Callback"/></param>
        public void AddCallback(Android.View.SurfaceHolder.Callback arg0)
        {
            IExecuteWithSignature("addCallback", "(Landroid/view/SurfaceHolder$Callback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#removeCallback(android.view.SurfaceHolder.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.SurfaceHolder.Callback"/></param>
        public void RemoveCallback(Android.View.SurfaceHolder.Callback arg0)
        {
            IExecuteWithSignature("removeCallback", "(Landroid/view/SurfaceHolder$Callback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#setFixedSize(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetFixedSize(int arg0, int arg1)
        {
            IExecute("setFixedSize", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#setFormat(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetFormat(int arg0)
        {
            IExecuteWithSignature("setFormat", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#setKeepScreenOn(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetKeepScreenOn(bool arg0)
        {
            IExecuteWithSignature("setKeepScreenOn", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#setSizeFromLayout()"/>
        /// </summary>
        public void SetSizeFromLayout()
        {
            IExecuteWithSignature("setSizeFromLayout", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#setType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetType(int arg0)
        {
            IExecuteWithSignature("setType", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#unlockCanvasAndPost(android.graphics.Canvas)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Canvas"/></param>
        public void UnlockCanvasAndPost(Android.Graphics.Canvas arg0)
        {
            IExecuteWithSignature("unlockCanvasAndPost", "(Landroid/graphics/Canvas;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.html#lockHardwareCanvas()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Canvas"/></returns>
        public Android.Graphics.Canvas LockHardwareCanvas()
        {
            return IExecuteWithSignature<Android.Graphics.Canvas>("lockHardwareCanvas", "()Landroid/graphics/Canvas;");
        }

        #endregion

        #region Nested classes
        #region BadSurfaceTypeException implementation
        public partial class BadSurfaceTypeException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Callback implementation
        public partial class Callback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback.html#surfaceChanged(android.view.SurfaceHolder,int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceHolder"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            public void SurfaceChanged(Android.View.SurfaceHolder arg0, int arg1, int arg2, int arg3)
            {
                IExecute("surfaceChanged", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback.html#surfaceCreated(android.view.SurfaceHolder)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceHolder"/></param>
            public void SurfaceCreated(Android.View.SurfaceHolder arg0)
            {
                IExecuteWithSignature("surfaceCreated", "(Landroid/view/SurfaceHolder;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback.html#surfaceDestroyed(android.view.SurfaceHolder)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceHolder"/></param>
            public void SurfaceDestroyed(Android.View.SurfaceHolder arg0)
            {
                IExecuteWithSignature("surfaceDestroyed", "(Landroid/view/SurfaceHolder;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Callback2 implementation
        public partial class Callback2
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback2.html#surfaceRedrawNeeded(android.view.SurfaceHolder)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceHolder"/></param>
            public void SurfaceRedrawNeeded(Android.View.SurfaceHolder arg0)
            {
                IExecuteWithSignature("surfaceRedrawNeeded", "(Landroid/view/SurfaceHolder;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceHolder.Callback2.html#surfaceRedrawNeededAsync(android.view.SurfaceHolder,java.lang.Runnable)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceHolder"/></param>
            /// <param name="arg1"><see cref="Java.Lang.Runnable"/></param>
            public void SurfaceRedrawNeededAsync(Android.View.SurfaceHolder arg0, Java.Lang.Runnable arg1)
            {
                IExecute("surfaceRedrawNeededAsync", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
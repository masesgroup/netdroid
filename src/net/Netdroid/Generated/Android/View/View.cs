/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region View
    public partial class View : Android.View.Accessibility.IAccessibilityEventSource
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public View(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2, int arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public View(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        public View(Android.Content.Context arg0, Android.Util.AttributeSet arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        public View(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.View.View"/> to <see cref="Android.View.Accessibility.AccessibilityEventSource"/>
        /// </summary>
        public static implicit operator Android.View.Accessibility.AccessibilityEventSource(Android.View.View t) => t.Cast<Android.View.Accessibility.AccessibilityEventSource>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#ALPHA"/>
        /// </summary>
        public static Android.Util.Property ALPHA { get { if (!_ALPHAReady) { _ALPHAContent = SGetField<Android.Util.Property>(LocalBridgeClazz, "ALPHA"); _ALPHAReady = true; } return _ALPHAContent; } }
        private static Android.Util.Property _ALPHAContent = default;
        private static bool _ALPHAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#ROTATION"/>
        /// </summary>
        public static Android.Util.Property ROTATION { get { if (!_ROTATIONReady) { _ROTATIONContent = SGetField<Android.Util.Property>(LocalBridgeClazz, "ROTATION"); _ROTATIONReady = true; } return _ROTATIONContent; } }
        private static Android.Util.Property _ROTATIONContent = default;
        private static bool _ROTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#ROTATION_X"/>
        /// </summary>
        public static Android.Util.Property ROTATION_X { get { if (!_ROTATION_XReady) { _ROTATION_XContent = SGetField<Android.Util.Property>(LocalBridgeClazz, "ROTATION_X"); _ROTATION_XReady = true; } return _ROTATION_XContent; } }
        private static Android.Util.Property _ROTATION_XContent = default;
        private static bool _ROTATION_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#ROTATION_Y"/>
        /// </summary>
        public static Android.Util.Property ROTATION_Y { get { if (!_ROTATION_YReady) { _ROTATION_YContent = SGetField<Android.Util.Property>(LocalBridgeClazz, "ROTATION_Y"); _ROTATION_YReady = true; } return _ROTATION_YContent; } }
        private static Android.Util.Property _ROTATION_YContent = default;
        private static bool _ROTATION_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCALE_X"/>
        /// </summary>
        public static Android.Util.Property SCALE_X { get { if (!_SCALE_XReady) { _SCALE_XContent = SGetField<Android.Util.Property>(LocalBridgeClazz, "SCALE_X"); _SCALE_XReady = true; } return _SCALE_XContent; } }
        private static Android.Util.Property _SCALE_XContent = default;
        private static bool _SCALE_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCALE_Y"/>
        /// </summary>
        public static Android.Util.Property SCALE_Y { get { if (!_SCALE_YReady) { _SCALE_YContent = SGetField<Android.Util.Property>(LocalBridgeClazz, "SCALE_Y"); _SCALE_YReady = true; } return _SCALE_YContent; } }
        private static Android.Util.Property _SCALE_YContent = default;
        private static bool _SCALE_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TRANSLATION_X"/>
        /// </summary>
        public static Android.Util.Property TRANSLATION_X { get { if (!_TRANSLATION_XReady) { _TRANSLATION_XContent = SGetField<Android.Util.Property>(LocalBridgeClazz, "TRANSLATION_X"); _TRANSLATION_XReady = true; } return _TRANSLATION_XContent; } }
        private static Android.Util.Property _TRANSLATION_XContent = default;
        private static bool _TRANSLATION_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TRANSLATION_Y"/>
        /// </summary>
        public static Android.Util.Property TRANSLATION_Y { get { if (!_TRANSLATION_YReady) { _TRANSLATION_YContent = SGetField<Android.Util.Property>(LocalBridgeClazz, "TRANSLATION_Y"); _TRANSLATION_YReady = true; } return _TRANSLATION_YContent; } }
        private static Android.Util.Property _TRANSLATION_YContent = default;
        private static bool _TRANSLATION_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TRANSLATION_Z"/>
        /// </summary>
        public static Android.Util.Property TRANSLATION_Z { get { if (!_TRANSLATION_ZReady) { _TRANSLATION_ZContent = SGetField<Android.Util.Property>(LocalBridgeClazz, "TRANSLATION_Z"); _TRANSLATION_ZReady = true; } return _TRANSLATION_ZContent; } }
        private static Android.Util.Property _TRANSLATION_ZContent = default;
        private static bool _TRANSLATION_ZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#X"/>
        /// </summary>
        public static Android.Util.Property X { get { if (!_XReady) { _XContent = SGetField<Android.Util.Property>(LocalBridgeClazz, "X"); _XReady = true; } return _XContent; } }
        private static Android.Util.Property _XContent = default;
        private static bool _XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#Y"/>
        /// </summary>
        public static Android.Util.Property Y { get { if (!_YReady) { _YContent = SGetField<Android.Util.Property>(LocalBridgeClazz, "Y"); _YReady = true; } return _YContent; } }
        private static Android.Util.Property _YContent = default;
        private static bool _YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#Z"/>
        /// </summary>
        public static Android.Util.Property Z { get { if (!_ZReady) { _ZContent = SGetField<Android.Util.Property>(LocalBridgeClazz, "Z"); _ZReady = true; } return _ZContent; } }
        private static Android.Util.Property _ZContent = default;
        private static bool _ZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#REQUESTED_FRAME_RATE_CATEGORY_DEFAULT"/>
        /// </summary>
        public static float REQUESTED_FRAME_RATE_CATEGORY_DEFAULT { get { if (!_REQUESTED_FRAME_RATE_CATEGORY_DEFAULTReady) { _REQUESTED_FRAME_RATE_CATEGORY_DEFAULTContent = SGetField<float>(LocalBridgeClazz, "REQUESTED_FRAME_RATE_CATEGORY_DEFAULT"); _REQUESTED_FRAME_RATE_CATEGORY_DEFAULTReady = true; } return _REQUESTED_FRAME_RATE_CATEGORY_DEFAULTContent; } }
        private static float _REQUESTED_FRAME_RATE_CATEGORY_DEFAULTContent = default;
        private static bool _REQUESTED_FRAME_RATE_CATEGORY_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#REQUESTED_FRAME_RATE_CATEGORY_HIGH"/>
        /// </summary>
        public static float REQUESTED_FRAME_RATE_CATEGORY_HIGH { get { if (!_REQUESTED_FRAME_RATE_CATEGORY_HIGHReady) { _REQUESTED_FRAME_RATE_CATEGORY_HIGHContent = SGetField<float>(LocalBridgeClazz, "REQUESTED_FRAME_RATE_CATEGORY_HIGH"); _REQUESTED_FRAME_RATE_CATEGORY_HIGHReady = true; } return _REQUESTED_FRAME_RATE_CATEGORY_HIGHContent; } }
        private static float _REQUESTED_FRAME_RATE_CATEGORY_HIGHContent = default;
        private static bool _REQUESTED_FRAME_RATE_CATEGORY_HIGHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#REQUESTED_FRAME_RATE_CATEGORY_LOW"/>
        /// </summary>
        public static float REQUESTED_FRAME_RATE_CATEGORY_LOW { get { if (!_REQUESTED_FRAME_RATE_CATEGORY_LOWReady) { _REQUESTED_FRAME_RATE_CATEGORY_LOWContent = SGetField<float>(LocalBridgeClazz, "REQUESTED_FRAME_RATE_CATEGORY_LOW"); _REQUESTED_FRAME_RATE_CATEGORY_LOWReady = true; } return _REQUESTED_FRAME_RATE_CATEGORY_LOWContent; } }
        private static float _REQUESTED_FRAME_RATE_CATEGORY_LOWContent = default;
        private static bool _REQUESTED_FRAME_RATE_CATEGORY_LOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#REQUESTED_FRAME_RATE_CATEGORY_NO_PREFERENCE"/>
        /// </summary>
        public static float REQUESTED_FRAME_RATE_CATEGORY_NO_PREFERENCE { get { if (!_REQUESTED_FRAME_RATE_CATEGORY_NO_PREFERENCEReady) { _REQUESTED_FRAME_RATE_CATEGORY_NO_PREFERENCEContent = SGetField<float>(LocalBridgeClazz, "REQUESTED_FRAME_RATE_CATEGORY_NO_PREFERENCE"); _REQUESTED_FRAME_RATE_CATEGORY_NO_PREFERENCEReady = true; } return _REQUESTED_FRAME_RATE_CATEGORY_NO_PREFERENCEContent; } }
        private static float _REQUESTED_FRAME_RATE_CATEGORY_NO_PREFERENCEContent = default;
        private static bool _REQUESTED_FRAME_RATE_CATEGORY_NO_PREFERENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#REQUESTED_FRAME_RATE_CATEGORY_NORMAL"/>
        /// </summary>
        public static float REQUESTED_FRAME_RATE_CATEGORY_NORMAL { get { if (!_REQUESTED_FRAME_RATE_CATEGORY_NORMALReady) { _REQUESTED_FRAME_RATE_CATEGORY_NORMALContent = SGetField<float>(LocalBridgeClazz, "REQUESTED_FRAME_RATE_CATEGORY_NORMAL"); _REQUESTED_FRAME_RATE_CATEGORY_NORMALReady = true; } return _REQUESTED_FRAME_RATE_CATEGORY_NORMALContent; } }
        private static float _REQUESTED_FRAME_RATE_CATEGORY_NORMALContent = default;
        private static bool _REQUESTED_FRAME_RATE_CATEGORY_NORMALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#ACCESSIBILITY_DATA_SENSITIVE_AUTO"/>
        /// </summary>
        public static int ACCESSIBILITY_DATA_SENSITIVE_AUTO { get { if (!_ACCESSIBILITY_DATA_SENSITIVE_AUTOReady) { _ACCESSIBILITY_DATA_SENSITIVE_AUTOContent = SGetField<int>(LocalBridgeClazz, "ACCESSIBILITY_DATA_SENSITIVE_AUTO"); _ACCESSIBILITY_DATA_SENSITIVE_AUTOReady = true; } return _ACCESSIBILITY_DATA_SENSITIVE_AUTOContent; } }
        private static int _ACCESSIBILITY_DATA_SENSITIVE_AUTOContent = default;
        private static bool _ACCESSIBILITY_DATA_SENSITIVE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#ACCESSIBILITY_DATA_SENSITIVE_NO"/>
        /// </summary>
        public static int ACCESSIBILITY_DATA_SENSITIVE_NO { get { if (!_ACCESSIBILITY_DATA_SENSITIVE_NOReady) { _ACCESSIBILITY_DATA_SENSITIVE_NOContent = SGetField<int>(LocalBridgeClazz, "ACCESSIBILITY_DATA_SENSITIVE_NO"); _ACCESSIBILITY_DATA_SENSITIVE_NOReady = true; } return _ACCESSIBILITY_DATA_SENSITIVE_NOContent; } }
        private static int _ACCESSIBILITY_DATA_SENSITIVE_NOContent = default;
        private static bool _ACCESSIBILITY_DATA_SENSITIVE_NOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#ACCESSIBILITY_DATA_SENSITIVE_YES"/>
        /// </summary>
        public static int ACCESSIBILITY_DATA_SENSITIVE_YES { get { if (!_ACCESSIBILITY_DATA_SENSITIVE_YESReady) { _ACCESSIBILITY_DATA_SENSITIVE_YESContent = SGetField<int>(LocalBridgeClazz, "ACCESSIBILITY_DATA_SENSITIVE_YES"); _ACCESSIBILITY_DATA_SENSITIVE_YESReady = true; } return _ACCESSIBILITY_DATA_SENSITIVE_YESContent; } }
        private static int _ACCESSIBILITY_DATA_SENSITIVE_YESContent = default;
        private static bool _ACCESSIBILITY_DATA_SENSITIVE_YESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#ACCESSIBILITY_LIVE_REGION_ASSERTIVE"/>
        /// </summary>
        public static int ACCESSIBILITY_LIVE_REGION_ASSERTIVE { get { if (!_ACCESSIBILITY_LIVE_REGION_ASSERTIVEReady) { _ACCESSIBILITY_LIVE_REGION_ASSERTIVEContent = SGetField<int>(LocalBridgeClazz, "ACCESSIBILITY_LIVE_REGION_ASSERTIVE"); _ACCESSIBILITY_LIVE_REGION_ASSERTIVEReady = true; } return _ACCESSIBILITY_LIVE_REGION_ASSERTIVEContent; } }
        private static int _ACCESSIBILITY_LIVE_REGION_ASSERTIVEContent = default;
        private static bool _ACCESSIBILITY_LIVE_REGION_ASSERTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#ACCESSIBILITY_LIVE_REGION_NONE"/>
        /// </summary>
        public static int ACCESSIBILITY_LIVE_REGION_NONE { get { if (!_ACCESSIBILITY_LIVE_REGION_NONEReady) { _ACCESSIBILITY_LIVE_REGION_NONEContent = SGetField<int>(LocalBridgeClazz, "ACCESSIBILITY_LIVE_REGION_NONE"); _ACCESSIBILITY_LIVE_REGION_NONEReady = true; } return _ACCESSIBILITY_LIVE_REGION_NONEContent; } }
        private static int _ACCESSIBILITY_LIVE_REGION_NONEContent = default;
        private static bool _ACCESSIBILITY_LIVE_REGION_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#ACCESSIBILITY_LIVE_REGION_POLITE"/>
        /// </summary>
        public static int ACCESSIBILITY_LIVE_REGION_POLITE { get { if (!_ACCESSIBILITY_LIVE_REGION_POLITEReady) { _ACCESSIBILITY_LIVE_REGION_POLITEContent = SGetField<int>(LocalBridgeClazz, "ACCESSIBILITY_LIVE_REGION_POLITE"); _ACCESSIBILITY_LIVE_REGION_POLITEReady = true; } return _ACCESSIBILITY_LIVE_REGION_POLITEContent; } }
        private static int _ACCESSIBILITY_LIVE_REGION_POLITEContent = default;
        private static bool _ACCESSIBILITY_LIVE_REGION_POLITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS"/>
        /// </summary>
        public static int AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS { get { if (!_AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWSReady) { _AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWSContent = SGetField<int>(LocalBridgeClazz, "AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS"); _AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWSReady = true; } return _AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWSContent; } }
        private static int _AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWSContent = default;
        private static bool _AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_TYPE_DATE"/>
        /// </summary>
        public static int AUTOFILL_TYPE_DATE { get { if (!_AUTOFILL_TYPE_DATEReady) { _AUTOFILL_TYPE_DATEContent = SGetField<int>(LocalBridgeClazz, "AUTOFILL_TYPE_DATE"); _AUTOFILL_TYPE_DATEReady = true; } return _AUTOFILL_TYPE_DATEContent; } }
        private static int _AUTOFILL_TYPE_DATEContent = default;
        private static bool _AUTOFILL_TYPE_DATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_TYPE_LIST"/>
        /// </summary>
        public static int AUTOFILL_TYPE_LIST { get { if (!_AUTOFILL_TYPE_LISTReady) { _AUTOFILL_TYPE_LISTContent = SGetField<int>(LocalBridgeClazz, "AUTOFILL_TYPE_LIST"); _AUTOFILL_TYPE_LISTReady = true; } return _AUTOFILL_TYPE_LISTContent; } }
        private static int _AUTOFILL_TYPE_LISTContent = default;
        private static bool _AUTOFILL_TYPE_LISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_TYPE_NONE"/>
        /// </summary>
        public static int AUTOFILL_TYPE_NONE { get { if (!_AUTOFILL_TYPE_NONEReady) { _AUTOFILL_TYPE_NONEContent = SGetField<int>(LocalBridgeClazz, "AUTOFILL_TYPE_NONE"); _AUTOFILL_TYPE_NONEReady = true; } return _AUTOFILL_TYPE_NONEContent; } }
        private static int _AUTOFILL_TYPE_NONEContent = default;
        private static bool _AUTOFILL_TYPE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_TYPE_TEXT"/>
        /// </summary>
        public static int AUTOFILL_TYPE_TEXT { get { if (!_AUTOFILL_TYPE_TEXTReady) { _AUTOFILL_TYPE_TEXTContent = SGetField<int>(LocalBridgeClazz, "AUTOFILL_TYPE_TEXT"); _AUTOFILL_TYPE_TEXTReady = true; } return _AUTOFILL_TYPE_TEXTContent; } }
        private static int _AUTOFILL_TYPE_TEXTContent = default;
        private static bool _AUTOFILL_TYPE_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_TYPE_TOGGLE"/>
        /// </summary>
        public static int AUTOFILL_TYPE_TOGGLE { get { if (!_AUTOFILL_TYPE_TOGGLEReady) { _AUTOFILL_TYPE_TOGGLEContent = SGetField<int>(LocalBridgeClazz, "AUTOFILL_TYPE_TOGGLE"); _AUTOFILL_TYPE_TOGGLEReady = true; } return _AUTOFILL_TYPE_TOGGLEContent; } }
        private static int _AUTOFILL_TYPE_TOGGLEContent = default;
        private static bool _AUTOFILL_TYPE_TOGGLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#CONTENT_SENSITIVITY_AUTO"/>
        /// </summary>
        public static int CONTENT_SENSITIVITY_AUTO { get { if (!_CONTENT_SENSITIVITY_AUTOReady) { _CONTENT_SENSITIVITY_AUTOContent = SGetField<int>(LocalBridgeClazz, "CONTENT_SENSITIVITY_AUTO"); _CONTENT_SENSITIVITY_AUTOReady = true; } return _CONTENT_SENSITIVITY_AUTOContent; } }
        private static int _CONTENT_SENSITIVITY_AUTOContent = default;
        private static bool _CONTENT_SENSITIVITY_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#CONTENT_SENSITIVITY_NOT_SENSITIVE"/>
        /// </summary>
        public static int CONTENT_SENSITIVITY_NOT_SENSITIVE { get { if (!_CONTENT_SENSITIVITY_NOT_SENSITIVEReady) { _CONTENT_SENSITIVITY_NOT_SENSITIVEContent = SGetField<int>(LocalBridgeClazz, "CONTENT_SENSITIVITY_NOT_SENSITIVE"); _CONTENT_SENSITIVITY_NOT_SENSITIVEReady = true; } return _CONTENT_SENSITIVITY_NOT_SENSITIVEContent; } }
        private static int _CONTENT_SENSITIVITY_NOT_SENSITIVEContent = default;
        private static bool _CONTENT_SENSITIVITY_NOT_SENSITIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#CONTENT_SENSITIVITY_SENSITIVE"/>
        /// </summary>
        public static int CONTENT_SENSITIVITY_SENSITIVE { get { if (!_CONTENT_SENSITIVITY_SENSITIVEReady) { _CONTENT_SENSITIVITY_SENSITIVEContent = SGetField<int>(LocalBridgeClazz, "CONTENT_SENSITIVITY_SENSITIVE"); _CONTENT_SENSITIVITY_SENSITIVEReady = true; } return _CONTENT_SENSITIVITY_SENSITIVEContent; } }
        private static int _CONTENT_SENSITIVITY_SENSITIVEContent = default;
        private static bool _CONTENT_SENSITIVITY_SENSITIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#DRAG_FLAG_ACCESSIBILITY_ACTION"/>
        /// </summary>
        public static int DRAG_FLAG_ACCESSIBILITY_ACTION { get { if (!_DRAG_FLAG_ACCESSIBILITY_ACTIONReady) { _DRAG_FLAG_ACCESSIBILITY_ACTIONContent = SGetField<int>(LocalBridgeClazz, "DRAG_FLAG_ACCESSIBILITY_ACTION"); _DRAG_FLAG_ACCESSIBILITY_ACTIONReady = true; } return _DRAG_FLAG_ACCESSIBILITY_ACTIONContent; } }
        private static int _DRAG_FLAG_ACCESSIBILITY_ACTIONContent = default;
        private static bool _DRAG_FLAG_ACCESSIBILITY_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#DRAG_FLAG_GLOBAL"/>
        /// </summary>
        public static int DRAG_FLAG_GLOBAL { get { if (!_DRAG_FLAG_GLOBALReady) { _DRAG_FLAG_GLOBALContent = SGetField<int>(LocalBridgeClazz, "DRAG_FLAG_GLOBAL"); _DRAG_FLAG_GLOBALReady = true; } return _DRAG_FLAG_GLOBALContent; } }
        private static int _DRAG_FLAG_GLOBALContent = default;
        private static bool _DRAG_FLAG_GLOBALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION"/>
        /// </summary>
        public static int DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION { get { if (!_DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSIONReady) { _DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSIONContent = SGetField<int>(LocalBridgeClazz, "DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION"); _DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSIONReady = true; } return _DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSIONContent; } }
        private static int _DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSIONContent = default;
        private static bool _DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION"/>
        /// </summary>
        public static int DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION { get { if (!_DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSIONReady) { _DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSIONContent = SGetField<int>(LocalBridgeClazz, "DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION"); _DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSIONReady = true; } return _DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSIONContent; } }
        private static int _DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSIONContent = default;
        private static bool _DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#DRAG_FLAG_GLOBAL_SAME_APPLICATION"/>
        /// </summary>
        public static int DRAG_FLAG_GLOBAL_SAME_APPLICATION { get { if (!_DRAG_FLAG_GLOBAL_SAME_APPLICATIONReady) { _DRAG_FLAG_GLOBAL_SAME_APPLICATIONContent = SGetField<int>(LocalBridgeClazz, "DRAG_FLAG_GLOBAL_SAME_APPLICATION"); _DRAG_FLAG_GLOBAL_SAME_APPLICATIONReady = true; } return _DRAG_FLAG_GLOBAL_SAME_APPLICATIONContent; } }
        private static int _DRAG_FLAG_GLOBAL_SAME_APPLICATIONContent = default;
        private static bool _DRAG_FLAG_GLOBAL_SAME_APPLICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#DRAG_FLAG_GLOBAL_URI_READ"/>
        /// </summary>
        public static int DRAG_FLAG_GLOBAL_URI_READ { get { if (!_DRAG_FLAG_GLOBAL_URI_READReady) { _DRAG_FLAG_GLOBAL_URI_READContent = SGetField<int>(LocalBridgeClazz, "DRAG_FLAG_GLOBAL_URI_READ"); _DRAG_FLAG_GLOBAL_URI_READReady = true; } return _DRAG_FLAG_GLOBAL_URI_READContent; } }
        private static int _DRAG_FLAG_GLOBAL_URI_READContent = default;
        private static bool _DRAG_FLAG_GLOBAL_URI_READReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#DRAG_FLAG_GLOBAL_URI_WRITE"/>
        /// </summary>
        public static int DRAG_FLAG_GLOBAL_URI_WRITE { get { if (!_DRAG_FLAG_GLOBAL_URI_WRITEReady) { _DRAG_FLAG_GLOBAL_URI_WRITEContent = SGetField<int>(LocalBridgeClazz, "DRAG_FLAG_GLOBAL_URI_WRITE"); _DRAG_FLAG_GLOBAL_URI_WRITEReady = true; } return _DRAG_FLAG_GLOBAL_URI_WRITEContent; } }
        private static int _DRAG_FLAG_GLOBAL_URI_WRITEContent = default;
        private static bool _DRAG_FLAG_GLOBAL_URI_WRITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#DRAG_FLAG_OPAQUE"/>
        /// </summary>
        public static int DRAG_FLAG_OPAQUE { get { if (!_DRAG_FLAG_OPAQUEReady) { _DRAG_FLAG_OPAQUEContent = SGetField<int>(LocalBridgeClazz, "DRAG_FLAG_OPAQUE"); _DRAG_FLAG_OPAQUEReady = true; } return _DRAG_FLAG_OPAQUEContent; } }
        private static int _DRAG_FLAG_OPAQUEContent = default;
        private static bool _DRAG_FLAG_OPAQUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#DRAG_FLAG_START_INTENT_SENDER_ON_UNHANDLED_DRAG"/>
        /// </summary>
        public static int DRAG_FLAG_START_INTENT_SENDER_ON_UNHANDLED_DRAG { get { if (!_DRAG_FLAG_START_INTENT_SENDER_ON_UNHANDLED_DRAGReady) { _DRAG_FLAG_START_INTENT_SENDER_ON_UNHANDLED_DRAGContent = SGetField<int>(LocalBridgeClazz, "DRAG_FLAG_START_INTENT_SENDER_ON_UNHANDLED_DRAG"); _DRAG_FLAG_START_INTENT_SENDER_ON_UNHANDLED_DRAGReady = true; } return _DRAG_FLAG_START_INTENT_SENDER_ON_UNHANDLED_DRAGContent; } }
        private static int _DRAG_FLAG_START_INTENT_SENDER_ON_UNHANDLED_DRAGContent = default;
        private static bool _DRAG_FLAG_START_INTENT_SENDER_ON_UNHANDLED_DRAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#DRAWING_CACHE_QUALITY_AUTO"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int DRAWING_CACHE_QUALITY_AUTO { get { if (!_DRAWING_CACHE_QUALITY_AUTOReady) { _DRAWING_CACHE_QUALITY_AUTOContent = SGetField<int>(LocalBridgeClazz, "DRAWING_CACHE_QUALITY_AUTO"); _DRAWING_CACHE_QUALITY_AUTOReady = true; } return _DRAWING_CACHE_QUALITY_AUTOContent; } }
        private static int _DRAWING_CACHE_QUALITY_AUTOContent = default;
        private static bool _DRAWING_CACHE_QUALITY_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#DRAWING_CACHE_QUALITY_HIGH"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int DRAWING_CACHE_QUALITY_HIGH { get { if (!_DRAWING_CACHE_QUALITY_HIGHReady) { _DRAWING_CACHE_QUALITY_HIGHContent = SGetField<int>(LocalBridgeClazz, "DRAWING_CACHE_QUALITY_HIGH"); _DRAWING_CACHE_QUALITY_HIGHReady = true; } return _DRAWING_CACHE_QUALITY_HIGHContent; } }
        private static int _DRAWING_CACHE_QUALITY_HIGHContent = default;
        private static bool _DRAWING_CACHE_QUALITY_HIGHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#DRAWING_CACHE_QUALITY_LOW"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int DRAWING_CACHE_QUALITY_LOW { get { if (!_DRAWING_CACHE_QUALITY_LOWReady) { _DRAWING_CACHE_QUALITY_LOWContent = SGetField<int>(LocalBridgeClazz, "DRAWING_CACHE_QUALITY_LOW"); _DRAWING_CACHE_QUALITY_LOWReady = true; } return _DRAWING_CACHE_QUALITY_LOWContent; } }
        private static int _DRAWING_CACHE_QUALITY_LOWContent = default;
        private static bool _DRAWING_CACHE_QUALITY_LOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#FIND_VIEWS_WITH_CONTENT_DESCRIPTION"/>
        /// </summary>
        public static int FIND_VIEWS_WITH_CONTENT_DESCRIPTION { get { if (!_FIND_VIEWS_WITH_CONTENT_DESCRIPTIONReady) { _FIND_VIEWS_WITH_CONTENT_DESCRIPTIONContent = SGetField<int>(LocalBridgeClazz, "FIND_VIEWS_WITH_CONTENT_DESCRIPTION"); _FIND_VIEWS_WITH_CONTENT_DESCRIPTIONReady = true; } return _FIND_VIEWS_WITH_CONTENT_DESCRIPTIONContent; } }
        private static int _FIND_VIEWS_WITH_CONTENT_DESCRIPTIONContent = default;
        private static bool _FIND_VIEWS_WITH_CONTENT_DESCRIPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#FIND_VIEWS_WITH_TEXT"/>
        /// </summary>
        public static int FIND_VIEWS_WITH_TEXT { get { if (!_FIND_VIEWS_WITH_TEXTReady) { _FIND_VIEWS_WITH_TEXTContent = SGetField<int>(LocalBridgeClazz, "FIND_VIEWS_WITH_TEXT"); _FIND_VIEWS_WITH_TEXTReady = true; } return _FIND_VIEWS_WITH_TEXTContent; } }
        private static int _FIND_VIEWS_WITH_TEXTContent = default;
        private static bool _FIND_VIEWS_WITH_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#FOCUS_BACKWARD"/>
        /// </summary>
        public static int FOCUS_BACKWARD { get { if (!_FOCUS_BACKWARDReady) { _FOCUS_BACKWARDContent = SGetField<int>(LocalBridgeClazz, "FOCUS_BACKWARD"); _FOCUS_BACKWARDReady = true; } return _FOCUS_BACKWARDContent; } }
        private static int _FOCUS_BACKWARDContent = default;
        private static bool _FOCUS_BACKWARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#FOCUS_DOWN"/>
        /// </summary>
        public static int FOCUS_DOWN { get { if (!_FOCUS_DOWNReady) { _FOCUS_DOWNContent = SGetField<int>(LocalBridgeClazz, "FOCUS_DOWN"); _FOCUS_DOWNReady = true; } return _FOCUS_DOWNContent; } }
        private static int _FOCUS_DOWNContent = default;
        private static bool _FOCUS_DOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#FOCUS_FORWARD"/>
        /// </summary>
        public static int FOCUS_FORWARD { get { if (!_FOCUS_FORWARDReady) { _FOCUS_FORWARDContent = SGetField<int>(LocalBridgeClazz, "FOCUS_FORWARD"); _FOCUS_FORWARDReady = true; } return _FOCUS_FORWARDContent; } }
        private static int _FOCUS_FORWARDContent = default;
        private static bool _FOCUS_FORWARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#FOCUS_LEFT"/>
        /// </summary>
        public static int FOCUS_LEFT { get { if (!_FOCUS_LEFTReady) { _FOCUS_LEFTContent = SGetField<int>(LocalBridgeClazz, "FOCUS_LEFT"); _FOCUS_LEFTReady = true; } return _FOCUS_LEFTContent; } }
        private static int _FOCUS_LEFTContent = default;
        private static bool _FOCUS_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#FOCUS_RIGHT"/>
        /// </summary>
        public static int FOCUS_RIGHT { get { if (!_FOCUS_RIGHTReady) { _FOCUS_RIGHTContent = SGetField<int>(LocalBridgeClazz, "FOCUS_RIGHT"); _FOCUS_RIGHTReady = true; } return _FOCUS_RIGHTContent; } }
        private static int _FOCUS_RIGHTContent = default;
        private static bool _FOCUS_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#FOCUS_UP"/>
        /// </summary>
        public static int FOCUS_UP { get { if (!_FOCUS_UPReady) { _FOCUS_UPContent = SGetField<int>(LocalBridgeClazz, "FOCUS_UP"); _FOCUS_UPReady = true; } return _FOCUS_UPContent; } }
        private static int _FOCUS_UPContent = default;
        private static bool _FOCUS_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#FOCUSABLE"/>
        /// </summary>
        public static int FOCUSABLE { get { if (!_FOCUSABLEReady) { _FOCUSABLEContent = SGetField<int>(LocalBridgeClazz, "FOCUSABLE"); _FOCUSABLEReady = true; } return _FOCUSABLEContent; } }
        private static int _FOCUSABLEContent = default;
        private static bool _FOCUSABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#FOCUSABLE_AUTO"/>
        /// </summary>
        public static int FOCUSABLE_AUTO { get { if (!_FOCUSABLE_AUTOReady) { _FOCUSABLE_AUTOContent = SGetField<int>(LocalBridgeClazz, "FOCUSABLE_AUTO"); _FOCUSABLE_AUTOReady = true; } return _FOCUSABLE_AUTOContent; } }
        private static int _FOCUSABLE_AUTOContent = default;
        private static bool _FOCUSABLE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#FOCUSABLES_ALL"/>
        /// </summary>
        public static int FOCUSABLES_ALL { get { if (!_FOCUSABLES_ALLReady) { _FOCUSABLES_ALLContent = SGetField<int>(LocalBridgeClazz, "FOCUSABLES_ALL"); _FOCUSABLES_ALLReady = true; } return _FOCUSABLES_ALLContent; } }
        private static int _FOCUSABLES_ALLContent = default;
        private static bool _FOCUSABLES_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#FOCUSABLES_TOUCH_MODE"/>
        /// </summary>
        public static int FOCUSABLES_TOUCH_MODE { get { if (!_FOCUSABLES_TOUCH_MODEReady) { _FOCUSABLES_TOUCH_MODEContent = SGetField<int>(LocalBridgeClazz, "FOCUSABLES_TOUCH_MODE"); _FOCUSABLES_TOUCH_MODEReady = true; } return _FOCUSABLES_TOUCH_MODEContent; } }
        private static int _FOCUSABLES_TOUCH_MODEContent = default;
        private static bool _FOCUSABLES_TOUCH_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#GONE"/>
        /// </summary>
        public static int GONE { get { if (!_GONEReady) { _GONEContent = SGetField<int>(LocalBridgeClazz, "GONE"); _GONEReady = true; } return _GONEContent; } }
        private static int _GONEContent = default;
        private static bool _GONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#HAPTIC_FEEDBACK_ENABLED"/>
        /// </summary>
        public static int HAPTIC_FEEDBACK_ENABLED { get { if (!_HAPTIC_FEEDBACK_ENABLEDReady) { _HAPTIC_FEEDBACK_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "HAPTIC_FEEDBACK_ENABLED"); _HAPTIC_FEEDBACK_ENABLEDReady = true; } return _HAPTIC_FEEDBACK_ENABLEDContent; } }
        private static int _HAPTIC_FEEDBACK_ENABLEDContent = default;
        private static bool _HAPTIC_FEEDBACK_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_ACCESSIBILITY_AUTO"/>
        /// </summary>
        public static int IMPORTANT_FOR_ACCESSIBILITY_AUTO { get { if (!_IMPORTANT_FOR_ACCESSIBILITY_AUTOReady) { _IMPORTANT_FOR_ACCESSIBILITY_AUTOContent = SGetField<int>(LocalBridgeClazz, "IMPORTANT_FOR_ACCESSIBILITY_AUTO"); _IMPORTANT_FOR_ACCESSIBILITY_AUTOReady = true; } return _IMPORTANT_FOR_ACCESSIBILITY_AUTOContent; } }
        private static int _IMPORTANT_FOR_ACCESSIBILITY_AUTOContent = default;
        private static bool _IMPORTANT_FOR_ACCESSIBILITY_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_ACCESSIBILITY_NO"/>
        /// </summary>
        public static int IMPORTANT_FOR_ACCESSIBILITY_NO { get { if (!_IMPORTANT_FOR_ACCESSIBILITY_NOReady) { _IMPORTANT_FOR_ACCESSIBILITY_NOContent = SGetField<int>(LocalBridgeClazz, "IMPORTANT_FOR_ACCESSIBILITY_NO"); _IMPORTANT_FOR_ACCESSIBILITY_NOReady = true; } return _IMPORTANT_FOR_ACCESSIBILITY_NOContent; } }
        private static int _IMPORTANT_FOR_ACCESSIBILITY_NOContent = default;
        private static bool _IMPORTANT_FOR_ACCESSIBILITY_NOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS"/>
        /// </summary>
        public static int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS { get { if (!_IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTSReady) { _IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTSContent = SGetField<int>(LocalBridgeClazz, "IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS"); _IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTSReady = true; } return _IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTSContent; } }
        private static int _IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTSContent = default;
        private static bool _IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_ACCESSIBILITY_YES"/>
        /// </summary>
        public static int IMPORTANT_FOR_ACCESSIBILITY_YES { get { if (!_IMPORTANT_FOR_ACCESSIBILITY_YESReady) { _IMPORTANT_FOR_ACCESSIBILITY_YESContent = SGetField<int>(LocalBridgeClazz, "IMPORTANT_FOR_ACCESSIBILITY_YES"); _IMPORTANT_FOR_ACCESSIBILITY_YESReady = true; } return _IMPORTANT_FOR_ACCESSIBILITY_YESContent; } }
        private static int _IMPORTANT_FOR_ACCESSIBILITY_YESContent = default;
        private static bool _IMPORTANT_FOR_ACCESSIBILITY_YESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_AUTOFILL_AUTO"/>
        /// </summary>
        public static int IMPORTANT_FOR_AUTOFILL_AUTO { get { if (!_IMPORTANT_FOR_AUTOFILL_AUTOReady) { _IMPORTANT_FOR_AUTOFILL_AUTOContent = SGetField<int>(LocalBridgeClazz, "IMPORTANT_FOR_AUTOFILL_AUTO"); _IMPORTANT_FOR_AUTOFILL_AUTOReady = true; } return _IMPORTANT_FOR_AUTOFILL_AUTOContent; } }
        private static int _IMPORTANT_FOR_AUTOFILL_AUTOContent = default;
        private static bool _IMPORTANT_FOR_AUTOFILL_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_AUTOFILL_NO"/>
        /// </summary>
        public static int IMPORTANT_FOR_AUTOFILL_NO { get { if (!_IMPORTANT_FOR_AUTOFILL_NOReady) { _IMPORTANT_FOR_AUTOFILL_NOContent = SGetField<int>(LocalBridgeClazz, "IMPORTANT_FOR_AUTOFILL_NO"); _IMPORTANT_FOR_AUTOFILL_NOReady = true; } return _IMPORTANT_FOR_AUTOFILL_NOContent; } }
        private static int _IMPORTANT_FOR_AUTOFILL_NOContent = default;
        private static bool _IMPORTANT_FOR_AUTOFILL_NOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS"/>
        /// </summary>
        public static int IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS { get { if (!_IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTSReady) { _IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTSContent = SGetField<int>(LocalBridgeClazz, "IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS"); _IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTSReady = true; } return _IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTSContent; } }
        private static int _IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTSContent = default;
        private static bool _IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_AUTOFILL_YES"/>
        /// </summary>
        public static int IMPORTANT_FOR_AUTOFILL_YES { get { if (!_IMPORTANT_FOR_AUTOFILL_YESReady) { _IMPORTANT_FOR_AUTOFILL_YESContent = SGetField<int>(LocalBridgeClazz, "IMPORTANT_FOR_AUTOFILL_YES"); _IMPORTANT_FOR_AUTOFILL_YESReady = true; } return _IMPORTANT_FOR_AUTOFILL_YESContent; } }
        private static int _IMPORTANT_FOR_AUTOFILL_YESContent = default;
        private static bool _IMPORTANT_FOR_AUTOFILL_YESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS"/>
        /// </summary>
        public static int IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS { get { if (!_IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTSReady) { _IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTSContent = SGetField<int>(LocalBridgeClazz, "IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS"); _IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTSReady = true; } return _IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTSContent; } }
        private static int _IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTSContent = default;
        private static bool _IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_CONTENT_CAPTURE_AUTO"/>
        /// </summary>
        public static int IMPORTANT_FOR_CONTENT_CAPTURE_AUTO { get { if (!_IMPORTANT_FOR_CONTENT_CAPTURE_AUTOReady) { _IMPORTANT_FOR_CONTENT_CAPTURE_AUTOContent = SGetField<int>(LocalBridgeClazz, "IMPORTANT_FOR_CONTENT_CAPTURE_AUTO"); _IMPORTANT_FOR_CONTENT_CAPTURE_AUTOReady = true; } return _IMPORTANT_FOR_CONTENT_CAPTURE_AUTOContent; } }
        private static int _IMPORTANT_FOR_CONTENT_CAPTURE_AUTOContent = default;
        private static bool _IMPORTANT_FOR_CONTENT_CAPTURE_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_CONTENT_CAPTURE_NO"/>
        /// </summary>
        public static int IMPORTANT_FOR_CONTENT_CAPTURE_NO { get { if (!_IMPORTANT_FOR_CONTENT_CAPTURE_NOReady) { _IMPORTANT_FOR_CONTENT_CAPTURE_NOContent = SGetField<int>(LocalBridgeClazz, "IMPORTANT_FOR_CONTENT_CAPTURE_NO"); _IMPORTANT_FOR_CONTENT_CAPTURE_NOReady = true; } return _IMPORTANT_FOR_CONTENT_CAPTURE_NOContent; } }
        private static int _IMPORTANT_FOR_CONTENT_CAPTURE_NOContent = default;
        private static bool _IMPORTANT_FOR_CONTENT_CAPTURE_NOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTS"/>
        /// </summary>
        public static int IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTS { get { if (!_IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTSReady) { _IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTSContent = SGetField<int>(LocalBridgeClazz, "IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTS"); _IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTSReady = true; } return _IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTSContent; } }
        private static int _IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTSContent = default;
        private static bool _IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_CONTENT_CAPTURE_YES"/>
        /// </summary>
        public static int IMPORTANT_FOR_CONTENT_CAPTURE_YES { get { if (!_IMPORTANT_FOR_CONTENT_CAPTURE_YESReady) { _IMPORTANT_FOR_CONTENT_CAPTURE_YESContent = SGetField<int>(LocalBridgeClazz, "IMPORTANT_FOR_CONTENT_CAPTURE_YES"); _IMPORTANT_FOR_CONTENT_CAPTURE_YESReady = true; } return _IMPORTANT_FOR_CONTENT_CAPTURE_YESContent; } }
        private static int _IMPORTANT_FOR_CONTENT_CAPTURE_YESContent = default;
        private static bool _IMPORTANT_FOR_CONTENT_CAPTURE_YESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTS"/>
        /// </summary>
        public static int IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTS { get { if (!_IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTSReady) { _IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTSContent = SGetField<int>(LocalBridgeClazz, "IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTS"); _IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTSReady = true; } return _IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTSContent; } }
        private static int _IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTSContent = default;
        private static bool _IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#INVISIBLE"/>
        /// </summary>
        public static int INVISIBLE { get { if (!_INVISIBLEReady) { _INVISIBLEContent = SGetField<int>(LocalBridgeClazz, "INVISIBLE"); _INVISIBLEReady = true; } return _INVISIBLEContent; } }
        private static int _INVISIBLEContent = default;
        private static bool _INVISIBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#KEEP_SCREEN_ON"/>
        /// </summary>
        public static int KEEP_SCREEN_ON { get { if (!_KEEP_SCREEN_ONReady) { _KEEP_SCREEN_ONContent = SGetField<int>(LocalBridgeClazz, "KEEP_SCREEN_ON"); _KEEP_SCREEN_ONReady = true; } return _KEEP_SCREEN_ONContent; } }
        private static int _KEEP_SCREEN_ONContent = default;
        private static bool _KEEP_SCREEN_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#LAYER_TYPE_HARDWARE"/>
        /// </summary>
        public static int LAYER_TYPE_HARDWARE { get { if (!_LAYER_TYPE_HARDWAREReady) { _LAYER_TYPE_HARDWAREContent = SGetField<int>(LocalBridgeClazz, "LAYER_TYPE_HARDWARE"); _LAYER_TYPE_HARDWAREReady = true; } return _LAYER_TYPE_HARDWAREContent; } }
        private static int _LAYER_TYPE_HARDWAREContent = default;
        private static bool _LAYER_TYPE_HARDWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#LAYER_TYPE_NONE"/>
        /// </summary>
        public static int LAYER_TYPE_NONE { get { if (!_LAYER_TYPE_NONEReady) { _LAYER_TYPE_NONEContent = SGetField<int>(LocalBridgeClazz, "LAYER_TYPE_NONE"); _LAYER_TYPE_NONEReady = true; } return _LAYER_TYPE_NONEContent; } }
        private static int _LAYER_TYPE_NONEContent = default;
        private static bool _LAYER_TYPE_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#LAYER_TYPE_SOFTWARE"/>
        /// </summary>
        public static int LAYER_TYPE_SOFTWARE { get { if (!_LAYER_TYPE_SOFTWAREReady) { _LAYER_TYPE_SOFTWAREContent = SGetField<int>(LocalBridgeClazz, "LAYER_TYPE_SOFTWARE"); _LAYER_TYPE_SOFTWAREReady = true; } return _LAYER_TYPE_SOFTWAREContent; } }
        private static int _LAYER_TYPE_SOFTWAREContent = default;
        private static bool _LAYER_TYPE_SOFTWAREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#LAYOUT_DIRECTION_INHERIT"/>
        /// </summary>
        public static int LAYOUT_DIRECTION_INHERIT { get { if (!_LAYOUT_DIRECTION_INHERITReady) { _LAYOUT_DIRECTION_INHERITContent = SGetField<int>(LocalBridgeClazz, "LAYOUT_DIRECTION_INHERIT"); _LAYOUT_DIRECTION_INHERITReady = true; } return _LAYOUT_DIRECTION_INHERITContent; } }
        private static int _LAYOUT_DIRECTION_INHERITContent = default;
        private static bool _LAYOUT_DIRECTION_INHERITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#LAYOUT_DIRECTION_LOCALE"/>
        /// </summary>
        public static int LAYOUT_DIRECTION_LOCALE { get { if (!_LAYOUT_DIRECTION_LOCALEReady) { _LAYOUT_DIRECTION_LOCALEContent = SGetField<int>(LocalBridgeClazz, "LAYOUT_DIRECTION_LOCALE"); _LAYOUT_DIRECTION_LOCALEReady = true; } return _LAYOUT_DIRECTION_LOCALEContent; } }
        private static int _LAYOUT_DIRECTION_LOCALEContent = default;
        private static bool _LAYOUT_DIRECTION_LOCALEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#LAYOUT_DIRECTION_LTR"/>
        /// </summary>
        public static int LAYOUT_DIRECTION_LTR { get { if (!_LAYOUT_DIRECTION_LTRReady) { _LAYOUT_DIRECTION_LTRContent = SGetField<int>(LocalBridgeClazz, "LAYOUT_DIRECTION_LTR"); _LAYOUT_DIRECTION_LTRReady = true; } return _LAYOUT_DIRECTION_LTRContent; } }
        private static int _LAYOUT_DIRECTION_LTRContent = default;
        private static bool _LAYOUT_DIRECTION_LTRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#LAYOUT_DIRECTION_RTL"/>
        /// </summary>
        public static int LAYOUT_DIRECTION_RTL { get { if (!_LAYOUT_DIRECTION_RTLReady) { _LAYOUT_DIRECTION_RTLContent = SGetField<int>(LocalBridgeClazz, "LAYOUT_DIRECTION_RTL"); _LAYOUT_DIRECTION_RTLReady = true; } return _LAYOUT_DIRECTION_RTLContent; } }
        private static int _LAYOUT_DIRECTION_RTLContent = default;
        private static bool _LAYOUT_DIRECTION_RTLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#MEASURED_HEIGHT_STATE_SHIFT"/>
        /// </summary>
        public static int MEASURED_HEIGHT_STATE_SHIFT { get { if (!_MEASURED_HEIGHT_STATE_SHIFTReady) { _MEASURED_HEIGHT_STATE_SHIFTContent = SGetField<int>(LocalBridgeClazz, "MEASURED_HEIGHT_STATE_SHIFT"); _MEASURED_HEIGHT_STATE_SHIFTReady = true; } return _MEASURED_HEIGHT_STATE_SHIFTContent; } }
        private static int _MEASURED_HEIGHT_STATE_SHIFTContent = default;
        private static bool _MEASURED_HEIGHT_STATE_SHIFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#MEASURED_SIZE_MASK"/>
        /// </summary>
        public static int MEASURED_SIZE_MASK { get { if (!_MEASURED_SIZE_MASKReady) { _MEASURED_SIZE_MASKContent = SGetField<int>(LocalBridgeClazz, "MEASURED_SIZE_MASK"); _MEASURED_SIZE_MASKReady = true; } return _MEASURED_SIZE_MASKContent; } }
        private static int _MEASURED_SIZE_MASKContent = default;
        private static bool _MEASURED_SIZE_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#MEASURED_STATE_MASK"/>
        /// </summary>
        public static int MEASURED_STATE_MASK { get { if (!_MEASURED_STATE_MASKReady) { _MEASURED_STATE_MASKContent = SGetField<int>(LocalBridgeClazz, "MEASURED_STATE_MASK"); _MEASURED_STATE_MASKReady = true; } return _MEASURED_STATE_MASKContent; } }
        private static int _MEASURED_STATE_MASKContent = default;
        private static bool _MEASURED_STATE_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#MEASURED_STATE_TOO_SMALL"/>
        /// </summary>
        public static int MEASURED_STATE_TOO_SMALL { get { if (!_MEASURED_STATE_TOO_SMALLReady) { _MEASURED_STATE_TOO_SMALLContent = SGetField<int>(LocalBridgeClazz, "MEASURED_STATE_TOO_SMALL"); _MEASURED_STATE_TOO_SMALLReady = true; } return _MEASURED_STATE_TOO_SMALLContent; } }
        private static int _MEASURED_STATE_TOO_SMALLContent = default;
        private static bool _MEASURED_STATE_TOO_SMALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#NO_ID"/>
        /// </summary>
        public static int NO_ID { get { if (!_NO_IDReady) { _NO_IDContent = SGetField<int>(LocalBridgeClazz, "NO_ID"); _NO_IDReady = true; } return _NO_IDContent; } }
        private static int _NO_IDContent = default;
        private static bool _NO_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#NOT_FOCUSABLE"/>
        /// </summary>
        public static int NOT_FOCUSABLE { get { if (!_NOT_FOCUSABLEReady) { _NOT_FOCUSABLEContent = SGetField<int>(LocalBridgeClazz, "NOT_FOCUSABLE"); _NOT_FOCUSABLEReady = true; } return _NOT_FOCUSABLEContent; } }
        private static int _NOT_FOCUSABLEContent = default;
        private static bool _NOT_FOCUSABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#OVER_SCROLL_ALWAYS"/>
        /// </summary>
        public static int OVER_SCROLL_ALWAYS { get { if (!_OVER_SCROLL_ALWAYSReady) { _OVER_SCROLL_ALWAYSContent = SGetField<int>(LocalBridgeClazz, "OVER_SCROLL_ALWAYS"); _OVER_SCROLL_ALWAYSReady = true; } return _OVER_SCROLL_ALWAYSContent; } }
        private static int _OVER_SCROLL_ALWAYSContent = default;
        private static bool _OVER_SCROLL_ALWAYSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#OVER_SCROLL_IF_CONTENT_SCROLLS"/>
        /// </summary>
        public static int OVER_SCROLL_IF_CONTENT_SCROLLS { get { if (!_OVER_SCROLL_IF_CONTENT_SCROLLSReady) { _OVER_SCROLL_IF_CONTENT_SCROLLSContent = SGetField<int>(LocalBridgeClazz, "OVER_SCROLL_IF_CONTENT_SCROLLS"); _OVER_SCROLL_IF_CONTENT_SCROLLSReady = true; } return _OVER_SCROLL_IF_CONTENT_SCROLLSContent; } }
        private static int _OVER_SCROLL_IF_CONTENT_SCROLLSContent = default;
        private static bool _OVER_SCROLL_IF_CONTENT_SCROLLSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#OVER_SCROLL_NEVER"/>
        /// </summary>
        public static int OVER_SCROLL_NEVER { get { if (!_OVER_SCROLL_NEVERReady) { _OVER_SCROLL_NEVERContent = SGetField<int>(LocalBridgeClazz, "OVER_SCROLL_NEVER"); _OVER_SCROLL_NEVERReady = true; } return _OVER_SCROLL_NEVERContent; } }
        private static int _OVER_SCROLL_NEVERContent = default;
        private static bool _OVER_SCROLL_NEVERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCREEN_STATE_OFF"/>
        /// </summary>
        public static int SCREEN_STATE_OFF { get { if (!_SCREEN_STATE_OFFReady) { _SCREEN_STATE_OFFContent = SGetField<int>(LocalBridgeClazz, "SCREEN_STATE_OFF"); _SCREEN_STATE_OFFReady = true; } return _SCREEN_STATE_OFFContent; } }
        private static int _SCREEN_STATE_OFFContent = default;
        private static bool _SCREEN_STATE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCREEN_STATE_ON"/>
        /// </summary>
        public static int SCREEN_STATE_ON { get { if (!_SCREEN_STATE_ONReady) { _SCREEN_STATE_ONContent = SGetField<int>(LocalBridgeClazz, "SCREEN_STATE_ON"); _SCREEN_STATE_ONReady = true; } return _SCREEN_STATE_ONContent; } }
        private static int _SCREEN_STATE_ONContent = default;
        private static bool _SCREEN_STATE_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLL_AXIS_HORIZONTAL"/>
        /// </summary>
        public static int SCROLL_AXIS_HORIZONTAL { get { if (!_SCROLL_AXIS_HORIZONTALReady) { _SCROLL_AXIS_HORIZONTALContent = SGetField<int>(LocalBridgeClazz, "SCROLL_AXIS_HORIZONTAL"); _SCROLL_AXIS_HORIZONTALReady = true; } return _SCROLL_AXIS_HORIZONTALContent; } }
        private static int _SCROLL_AXIS_HORIZONTALContent = default;
        private static bool _SCROLL_AXIS_HORIZONTALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLL_AXIS_NONE"/>
        /// </summary>
        public static int SCROLL_AXIS_NONE { get { if (!_SCROLL_AXIS_NONEReady) { _SCROLL_AXIS_NONEContent = SGetField<int>(LocalBridgeClazz, "SCROLL_AXIS_NONE"); _SCROLL_AXIS_NONEReady = true; } return _SCROLL_AXIS_NONEContent; } }
        private static int _SCROLL_AXIS_NONEContent = default;
        private static bool _SCROLL_AXIS_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLL_AXIS_VERTICAL"/>
        /// </summary>
        public static int SCROLL_AXIS_VERTICAL { get { if (!_SCROLL_AXIS_VERTICALReady) { _SCROLL_AXIS_VERTICALContent = SGetField<int>(LocalBridgeClazz, "SCROLL_AXIS_VERTICAL"); _SCROLL_AXIS_VERTICALReady = true; } return _SCROLL_AXIS_VERTICALContent; } }
        private static int _SCROLL_AXIS_VERTICALContent = default;
        private static bool _SCROLL_AXIS_VERTICALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLL_CAPTURE_HINT_AUTO"/>
        /// </summary>
        public static int SCROLL_CAPTURE_HINT_AUTO { get { if (!_SCROLL_CAPTURE_HINT_AUTOReady) { _SCROLL_CAPTURE_HINT_AUTOContent = SGetField<int>(LocalBridgeClazz, "SCROLL_CAPTURE_HINT_AUTO"); _SCROLL_CAPTURE_HINT_AUTOReady = true; } return _SCROLL_CAPTURE_HINT_AUTOContent; } }
        private static int _SCROLL_CAPTURE_HINT_AUTOContent = default;
        private static bool _SCROLL_CAPTURE_HINT_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLL_CAPTURE_HINT_EXCLUDE"/>
        /// </summary>
        public static int SCROLL_CAPTURE_HINT_EXCLUDE { get { if (!_SCROLL_CAPTURE_HINT_EXCLUDEReady) { _SCROLL_CAPTURE_HINT_EXCLUDEContent = SGetField<int>(LocalBridgeClazz, "SCROLL_CAPTURE_HINT_EXCLUDE"); _SCROLL_CAPTURE_HINT_EXCLUDEReady = true; } return _SCROLL_CAPTURE_HINT_EXCLUDEContent; } }
        private static int _SCROLL_CAPTURE_HINT_EXCLUDEContent = default;
        private static bool _SCROLL_CAPTURE_HINT_EXCLUDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLL_CAPTURE_HINT_EXCLUDE_DESCENDANTS"/>
        /// </summary>
        public static int SCROLL_CAPTURE_HINT_EXCLUDE_DESCENDANTS { get { if (!_SCROLL_CAPTURE_HINT_EXCLUDE_DESCENDANTSReady) { _SCROLL_CAPTURE_HINT_EXCLUDE_DESCENDANTSContent = SGetField<int>(LocalBridgeClazz, "SCROLL_CAPTURE_HINT_EXCLUDE_DESCENDANTS"); _SCROLL_CAPTURE_HINT_EXCLUDE_DESCENDANTSReady = true; } return _SCROLL_CAPTURE_HINT_EXCLUDE_DESCENDANTSContent; } }
        private static int _SCROLL_CAPTURE_HINT_EXCLUDE_DESCENDANTSContent = default;
        private static bool _SCROLL_CAPTURE_HINT_EXCLUDE_DESCENDANTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLL_CAPTURE_HINT_INCLUDE"/>
        /// </summary>
        public static int SCROLL_CAPTURE_HINT_INCLUDE { get { if (!_SCROLL_CAPTURE_HINT_INCLUDEReady) { _SCROLL_CAPTURE_HINT_INCLUDEContent = SGetField<int>(LocalBridgeClazz, "SCROLL_CAPTURE_HINT_INCLUDE"); _SCROLL_CAPTURE_HINT_INCLUDEReady = true; } return _SCROLL_CAPTURE_HINT_INCLUDEContent; } }
        private static int _SCROLL_CAPTURE_HINT_INCLUDEContent = default;
        private static bool _SCROLL_CAPTURE_HINT_INCLUDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLL_INDICATOR_BOTTOM"/>
        /// </summary>
        public static int SCROLL_INDICATOR_BOTTOM { get { if (!_SCROLL_INDICATOR_BOTTOMReady) { _SCROLL_INDICATOR_BOTTOMContent = SGetField<int>(LocalBridgeClazz, "SCROLL_INDICATOR_BOTTOM"); _SCROLL_INDICATOR_BOTTOMReady = true; } return _SCROLL_INDICATOR_BOTTOMContent; } }
        private static int _SCROLL_INDICATOR_BOTTOMContent = default;
        private static bool _SCROLL_INDICATOR_BOTTOMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLL_INDICATOR_END"/>
        /// </summary>
        public static int SCROLL_INDICATOR_END { get { if (!_SCROLL_INDICATOR_ENDReady) { _SCROLL_INDICATOR_ENDContent = SGetField<int>(LocalBridgeClazz, "SCROLL_INDICATOR_END"); _SCROLL_INDICATOR_ENDReady = true; } return _SCROLL_INDICATOR_ENDContent; } }
        private static int _SCROLL_INDICATOR_ENDContent = default;
        private static bool _SCROLL_INDICATOR_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLL_INDICATOR_LEFT"/>
        /// </summary>
        public static int SCROLL_INDICATOR_LEFT { get { if (!_SCROLL_INDICATOR_LEFTReady) { _SCROLL_INDICATOR_LEFTContent = SGetField<int>(LocalBridgeClazz, "SCROLL_INDICATOR_LEFT"); _SCROLL_INDICATOR_LEFTReady = true; } return _SCROLL_INDICATOR_LEFTContent; } }
        private static int _SCROLL_INDICATOR_LEFTContent = default;
        private static bool _SCROLL_INDICATOR_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLL_INDICATOR_RIGHT"/>
        /// </summary>
        public static int SCROLL_INDICATOR_RIGHT { get { if (!_SCROLL_INDICATOR_RIGHTReady) { _SCROLL_INDICATOR_RIGHTContent = SGetField<int>(LocalBridgeClazz, "SCROLL_INDICATOR_RIGHT"); _SCROLL_INDICATOR_RIGHTReady = true; } return _SCROLL_INDICATOR_RIGHTContent; } }
        private static int _SCROLL_INDICATOR_RIGHTContent = default;
        private static bool _SCROLL_INDICATOR_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLL_INDICATOR_START"/>
        /// </summary>
        public static int SCROLL_INDICATOR_START { get { if (!_SCROLL_INDICATOR_STARTReady) { _SCROLL_INDICATOR_STARTContent = SGetField<int>(LocalBridgeClazz, "SCROLL_INDICATOR_START"); _SCROLL_INDICATOR_STARTReady = true; } return _SCROLL_INDICATOR_STARTContent; } }
        private static int _SCROLL_INDICATOR_STARTContent = default;
        private static bool _SCROLL_INDICATOR_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLL_INDICATOR_TOP"/>
        /// </summary>
        public static int SCROLL_INDICATOR_TOP { get { if (!_SCROLL_INDICATOR_TOPReady) { _SCROLL_INDICATOR_TOPContent = SGetField<int>(LocalBridgeClazz, "SCROLL_INDICATOR_TOP"); _SCROLL_INDICATOR_TOPReady = true; } return _SCROLL_INDICATOR_TOPContent; } }
        private static int _SCROLL_INDICATOR_TOPContent = default;
        private static bool _SCROLL_INDICATOR_TOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLLBAR_POSITION_DEFAULT"/>
        /// </summary>
        public static int SCROLLBAR_POSITION_DEFAULT { get { if (!_SCROLLBAR_POSITION_DEFAULTReady) { _SCROLLBAR_POSITION_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "SCROLLBAR_POSITION_DEFAULT"); _SCROLLBAR_POSITION_DEFAULTReady = true; } return _SCROLLBAR_POSITION_DEFAULTContent; } }
        private static int _SCROLLBAR_POSITION_DEFAULTContent = default;
        private static bool _SCROLLBAR_POSITION_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLLBAR_POSITION_LEFT"/>
        /// </summary>
        public static int SCROLLBAR_POSITION_LEFT { get { if (!_SCROLLBAR_POSITION_LEFTReady) { _SCROLLBAR_POSITION_LEFTContent = SGetField<int>(LocalBridgeClazz, "SCROLLBAR_POSITION_LEFT"); _SCROLLBAR_POSITION_LEFTReady = true; } return _SCROLLBAR_POSITION_LEFTContent; } }
        private static int _SCROLLBAR_POSITION_LEFTContent = default;
        private static bool _SCROLLBAR_POSITION_LEFTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLLBAR_POSITION_RIGHT"/>
        /// </summary>
        public static int SCROLLBAR_POSITION_RIGHT { get { if (!_SCROLLBAR_POSITION_RIGHTReady) { _SCROLLBAR_POSITION_RIGHTContent = SGetField<int>(LocalBridgeClazz, "SCROLLBAR_POSITION_RIGHT"); _SCROLLBAR_POSITION_RIGHTReady = true; } return _SCROLLBAR_POSITION_RIGHTContent; } }
        private static int _SCROLLBAR_POSITION_RIGHTContent = default;
        private static bool _SCROLLBAR_POSITION_RIGHTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLLBARS_INSIDE_INSET"/>
        /// </summary>
        public static int SCROLLBARS_INSIDE_INSET { get { if (!_SCROLLBARS_INSIDE_INSETReady) { _SCROLLBARS_INSIDE_INSETContent = SGetField<int>(LocalBridgeClazz, "SCROLLBARS_INSIDE_INSET"); _SCROLLBARS_INSIDE_INSETReady = true; } return _SCROLLBARS_INSIDE_INSETContent; } }
        private static int _SCROLLBARS_INSIDE_INSETContent = default;
        private static bool _SCROLLBARS_INSIDE_INSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLLBARS_INSIDE_OVERLAY"/>
        /// </summary>
        public static int SCROLLBARS_INSIDE_OVERLAY { get { if (!_SCROLLBARS_INSIDE_OVERLAYReady) { _SCROLLBARS_INSIDE_OVERLAYContent = SGetField<int>(LocalBridgeClazz, "SCROLLBARS_INSIDE_OVERLAY"); _SCROLLBARS_INSIDE_OVERLAYReady = true; } return _SCROLLBARS_INSIDE_OVERLAYContent; } }
        private static int _SCROLLBARS_INSIDE_OVERLAYContent = default;
        private static bool _SCROLLBARS_INSIDE_OVERLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLLBARS_OUTSIDE_INSET"/>
        /// </summary>
        public static int SCROLLBARS_OUTSIDE_INSET { get { if (!_SCROLLBARS_OUTSIDE_INSETReady) { _SCROLLBARS_OUTSIDE_INSETContent = SGetField<int>(LocalBridgeClazz, "SCROLLBARS_OUTSIDE_INSET"); _SCROLLBARS_OUTSIDE_INSETReady = true; } return _SCROLLBARS_OUTSIDE_INSETContent; } }
        private static int _SCROLLBARS_OUTSIDE_INSETContent = default;
        private static bool _SCROLLBARS_OUTSIDE_INSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SCROLLBARS_OUTSIDE_OVERLAY"/>
        /// </summary>
        public static int SCROLLBARS_OUTSIDE_OVERLAY { get { if (!_SCROLLBARS_OUTSIDE_OVERLAYReady) { _SCROLLBARS_OUTSIDE_OVERLAYContent = SGetField<int>(LocalBridgeClazz, "SCROLLBARS_OUTSIDE_OVERLAY"); _SCROLLBARS_OUTSIDE_OVERLAYReady = true; } return _SCROLLBARS_OUTSIDE_OVERLAYContent; } }
        private static int _SCROLLBARS_OUTSIDE_OVERLAYContent = default;
        private static bool _SCROLLBARS_OUTSIDE_OVERLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SOUND_EFFECTS_ENABLED"/>
        /// </summary>
        public static int SOUND_EFFECTS_ENABLED { get { if (!_SOUND_EFFECTS_ENABLEDReady) { _SOUND_EFFECTS_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "SOUND_EFFECTS_ENABLED"); _SOUND_EFFECTS_ENABLEDReady = true; } return _SOUND_EFFECTS_ENABLEDContent; } }
        private static int _SOUND_EFFECTS_ENABLEDContent = default;
        private static bool _SOUND_EFFECTS_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#STATUS_BAR_HIDDEN"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int STATUS_BAR_HIDDEN { get { if (!_STATUS_BAR_HIDDENReady) { _STATUS_BAR_HIDDENContent = SGetField<int>(LocalBridgeClazz, "STATUS_BAR_HIDDEN"); _STATUS_BAR_HIDDENReady = true; } return _STATUS_BAR_HIDDENContent; } }
        private static int _STATUS_BAR_HIDDENContent = default;
        private static bool _STATUS_BAR_HIDDENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#STATUS_BAR_VISIBLE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int STATUS_BAR_VISIBLE { get { if (!_STATUS_BAR_VISIBLEReady) { _STATUS_BAR_VISIBLEContent = SGetField<int>(LocalBridgeClazz, "STATUS_BAR_VISIBLE"); _STATUS_BAR_VISIBLEReady = true; } return _STATUS_BAR_VISIBLEContent; } }
        private static int _STATUS_BAR_VISIBLEContent = default;
        private static bool _STATUS_BAR_VISIBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_FULLSCREEN"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SYSTEM_UI_FLAG_FULLSCREEN { get { if (!_SYSTEM_UI_FLAG_FULLSCREENReady) { _SYSTEM_UI_FLAG_FULLSCREENContent = SGetField<int>(LocalBridgeClazz, "SYSTEM_UI_FLAG_FULLSCREEN"); _SYSTEM_UI_FLAG_FULLSCREENReady = true; } return _SYSTEM_UI_FLAG_FULLSCREENContent; } }
        private static int _SYSTEM_UI_FLAG_FULLSCREENContent = default;
        private static bool _SYSTEM_UI_FLAG_FULLSCREENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_HIDE_NAVIGATION"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SYSTEM_UI_FLAG_HIDE_NAVIGATION { get { if (!_SYSTEM_UI_FLAG_HIDE_NAVIGATIONReady) { _SYSTEM_UI_FLAG_HIDE_NAVIGATIONContent = SGetField<int>(LocalBridgeClazz, "SYSTEM_UI_FLAG_HIDE_NAVIGATION"); _SYSTEM_UI_FLAG_HIDE_NAVIGATIONReady = true; } return _SYSTEM_UI_FLAG_HIDE_NAVIGATIONContent; } }
        private static int _SYSTEM_UI_FLAG_HIDE_NAVIGATIONContent = default;
        private static bool _SYSTEM_UI_FLAG_HIDE_NAVIGATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_IMMERSIVE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SYSTEM_UI_FLAG_IMMERSIVE { get { if (!_SYSTEM_UI_FLAG_IMMERSIVEReady) { _SYSTEM_UI_FLAG_IMMERSIVEContent = SGetField<int>(LocalBridgeClazz, "SYSTEM_UI_FLAG_IMMERSIVE"); _SYSTEM_UI_FLAG_IMMERSIVEReady = true; } return _SYSTEM_UI_FLAG_IMMERSIVEContent; } }
        private static int _SYSTEM_UI_FLAG_IMMERSIVEContent = default;
        private static bool _SYSTEM_UI_FLAG_IMMERSIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_IMMERSIVE_STICKY"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SYSTEM_UI_FLAG_IMMERSIVE_STICKY { get { if (!_SYSTEM_UI_FLAG_IMMERSIVE_STICKYReady) { _SYSTEM_UI_FLAG_IMMERSIVE_STICKYContent = SGetField<int>(LocalBridgeClazz, "SYSTEM_UI_FLAG_IMMERSIVE_STICKY"); _SYSTEM_UI_FLAG_IMMERSIVE_STICKYReady = true; } return _SYSTEM_UI_FLAG_IMMERSIVE_STICKYContent; } }
        private static int _SYSTEM_UI_FLAG_IMMERSIVE_STICKYContent = default;
        private static bool _SYSTEM_UI_FLAG_IMMERSIVE_STICKYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN { get { if (!_SYSTEM_UI_FLAG_LAYOUT_FULLSCREENReady) { _SYSTEM_UI_FLAG_LAYOUT_FULLSCREENContent = SGetField<int>(LocalBridgeClazz, "SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN"); _SYSTEM_UI_FLAG_LAYOUT_FULLSCREENReady = true; } return _SYSTEM_UI_FLAG_LAYOUT_FULLSCREENContent; } }
        private static int _SYSTEM_UI_FLAG_LAYOUT_FULLSCREENContent = default;
        private static bool _SYSTEM_UI_FLAG_LAYOUT_FULLSCREENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION { get { if (!_SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATIONReady) { _SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATIONContent = SGetField<int>(LocalBridgeClazz, "SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION"); _SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATIONReady = true; } return _SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATIONContent; } }
        private static int _SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATIONContent = default;
        private static bool _SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LAYOUT_STABLE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SYSTEM_UI_FLAG_LAYOUT_STABLE { get { if (!_SYSTEM_UI_FLAG_LAYOUT_STABLEReady) { _SYSTEM_UI_FLAG_LAYOUT_STABLEContent = SGetField<int>(LocalBridgeClazz, "SYSTEM_UI_FLAG_LAYOUT_STABLE"); _SYSTEM_UI_FLAG_LAYOUT_STABLEReady = true; } return _SYSTEM_UI_FLAG_LAYOUT_STABLEContent; } }
        private static int _SYSTEM_UI_FLAG_LAYOUT_STABLEContent = default;
        private static bool _SYSTEM_UI_FLAG_LAYOUT_STABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR { get { if (!_SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BARReady) { _SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BARContent = SGetField<int>(LocalBridgeClazz, "SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR"); _SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BARReady = true; } return _SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BARContent; } }
        private static int _SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BARContent = default;
        private static bool _SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LIGHT_STATUS_BAR"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SYSTEM_UI_FLAG_LIGHT_STATUS_BAR { get { if (!_SYSTEM_UI_FLAG_LIGHT_STATUS_BARReady) { _SYSTEM_UI_FLAG_LIGHT_STATUS_BARContent = SGetField<int>(LocalBridgeClazz, "SYSTEM_UI_FLAG_LIGHT_STATUS_BAR"); _SYSTEM_UI_FLAG_LIGHT_STATUS_BARReady = true; } return _SYSTEM_UI_FLAG_LIGHT_STATUS_BARContent; } }
        private static int _SYSTEM_UI_FLAG_LIGHT_STATUS_BARContent = default;
        private static bool _SYSTEM_UI_FLAG_LIGHT_STATUS_BARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_LOW_PROFILE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SYSTEM_UI_FLAG_LOW_PROFILE { get { if (!_SYSTEM_UI_FLAG_LOW_PROFILEReady) { _SYSTEM_UI_FLAG_LOW_PROFILEContent = SGetField<int>(LocalBridgeClazz, "SYSTEM_UI_FLAG_LOW_PROFILE"); _SYSTEM_UI_FLAG_LOW_PROFILEReady = true; } return _SYSTEM_UI_FLAG_LOW_PROFILEContent; } }
        private static int _SYSTEM_UI_FLAG_LOW_PROFILEContent = default;
        private static bool _SYSTEM_UI_FLAG_LOW_PROFILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_FLAG_VISIBLE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SYSTEM_UI_FLAG_VISIBLE { get { if (!_SYSTEM_UI_FLAG_VISIBLEReady) { _SYSTEM_UI_FLAG_VISIBLEContent = SGetField<int>(LocalBridgeClazz, "SYSTEM_UI_FLAG_VISIBLE"); _SYSTEM_UI_FLAG_VISIBLEReady = true; } return _SYSTEM_UI_FLAG_VISIBLEContent; } }
        private static int _SYSTEM_UI_FLAG_VISIBLEContent = default;
        private static bool _SYSTEM_UI_FLAG_VISIBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#SYSTEM_UI_LAYOUT_FLAGS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int SYSTEM_UI_LAYOUT_FLAGS { get { if (!_SYSTEM_UI_LAYOUT_FLAGSReady) { _SYSTEM_UI_LAYOUT_FLAGSContent = SGetField<int>(LocalBridgeClazz, "SYSTEM_UI_LAYOUT_FLAGS"); _SYSTEM_UI_LAYOUT_FLAGSReady = true; } return _SYSTEM_UI_LAYOUT_FLAGSContent; } }
        private static int _SYSTEM_UI_LAYOUT_FLAGSContent = default;
        private static bool _SYSTEM_UI_LAYOUT_FLAGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_CENTER"/>
        /// </summary>
        public static int TEXT_ALIGNMENT_CENTER { get { if (!_TEXT_ALIGNMENT_CENTERReady) { _TEXT_ALIGNMENT_CENTERContent = SGetField<int>(LocalBridgeClazz, "TEXT_ALIGNMENT_CENTER"); _TEXT_ALIGNMENT_CENTERReady = true; } return _TEXT_ALIGNMENT_CENTERContent; } }
        private static int _TEXT_ALIGNMENT_CENTERContent = default;
        private static bool _TEXT_ALIGNMENT_CENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_GRAVITY"/>
        /// </summary>
        public static int TEXT_ALIGNMENT_GRAVITY { get { if (!_TEXT_ALIGNMENT_GRAVITYReady) { _TEXT_ALIGNMENT_GRAVITYContent = SGetField<int>(LocalBridgeClazz, "TEXT_ALIGNMENT_GRAVITY"); _TEXT_ALIGNMENT_GRAVITYReady = true; } return _TEXT_ALIGNMENT_GRAVITYContent; } }
        private static int _TEXT_ALIGNMENT_GRAVITYContent = default;
        private static bool _TEXT_ALIGNMENT_GRAVITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_INHERIT"/>
        /// </summary>
        public static int TEXT_ALIGNMENT_INHERIT { get { if (!_TEXT_ALIGNMENT_INHERITReady) { _TEXT_ALIGNMENT_INHERITContent = SGetField<int>(LocalBridgeClazz, "TEXT_ALIGNMENT_INHERIT"); _TEXT_ALIGNMENT_INHERITReady = true; } return _TEXT_ALIGNMENT_INHERITContent; } }
        private static int _TEXT_ALIGNMENT_INHERITContent = default;
        private static bool _TEXT_ALIGNMENT_INHERITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_TEXT_END"/>
        /// </summary>
        public static int TEXT_ALIGNMENT_TEXT_END { get { if (!_TEXT_ALIGNMENT_TEXT_ENDReady) { _TEXT_ALIGNMENT_TEXT_ENDContent = SGetField<int>(LocalBridgeClazz, "TEXT_ALIGNMENT_TEXT_END"); _TEXT_ALIGNMENT_TEXT_ENDReady = true; } return _TEXT_ALIGNMENT_TEXT_ENDContent; } }
        private static int _TEXT_ALIGNMENT_TEXT_ENDContent = default;
        private static bool _TEXT_ALIGNMENT_TEXT_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_TEXT_START"/>
        /// </summary>
        public static int TEXT_ALIGNMENT_TEXT_START { get { if (!_TEXT_ALIGNMENT_TEXT_STARTReady) { _TEXT_ALIGNMENT_TEXT_STARTContent = SGetField<int>(LocalBridgeClazz, "TEXT_ALIGNMENT_TEXT_START"); _TEXT_ALIGNMENT_TEXT_STARTReady = true; } return _TEXT_ALIGNMENT_TEXT_STARTContent; } }
        private static int _TEXT_ALIGNMENT_TEXT_STARTContent = default;
        private static bool _TEXT_ALIGNMENT_TEXT_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_VIEW_END"/>
        /// </summary>
        public static int TEXT_ALIGNMENT_VIEW_END { get { if (!_TEXT_ALIGNMENT_VIEW_ENDReady) { _TEXT_ALIGNMENT_VIEW_ENDContent = SGetField<int>(LocalBridgeClazz, "TEXT_ALIGNMENT_VIEW_END"); _TEXT_ALIGNMENT_VIEW_ENDReady = true; } return _TEXT_ALIGNMENT_VIEW_ENDContent; } }
        private static int _TEXT_ALIGNMENT_VIEW_ENDContent = default;
        private static bool _TEXT_ALIGNMENT_VIEW_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TEXT_ALIGNMENT_VIEW_START"/>
        /// </summary>
        public static int TEXT_ALIGNMENT_VIEW_START { get { if (!_TEXT_ALIGNMENT_VIEW_STARTReady) { _TEXT_ALIGNMENT_VIEW_STARTContent = SGetField<int>(LocalBridgeClazz, "TEXT_ALIGNMENT_VIEW_START"); _TEXT_ALIGNMENT_VIEW_STARTReady = true; } return _TEXT_ALIGNMENT_VIEW_STARTContent; } }
        private static int _TEXT_ALIGNMENT_VIEW_STARTContent = default;
        private static bool _TEXT_ALIGNMENT_VIEW_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_ANY_RTL"/>
        /// </summary>
        public static int TEXT_DIRECTION_ANY_RTL { get { if (!_TEXT_DIRECTION_ANY_RTLReady) { _TEXT_DIRECTION_ANY_RTLContent = SGetField<int>(LocalBridgeClazz, "TEXT_DIRECTION_ANY_RTL"); _TEXT_DIRECTION_ANY_RTLReady = true; } return _TEXT_DIRECTION_ANY_RTLContent; } }
        private static int _TEXT_DIRECTION_ANY_RTLContent = default;
        private static bool _TEXT_DIRECTION_ANY_RTLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_FIRST_STRONG"/>
        /// </summary>
        public static int TEXT_DIRECTION_FIRST_STRONG { get { if (!_TEXT_DIRECTION_FIRST_STRONGReady) { _TEXT_DIRECTION_FIRST_STRONGContent = SGetField<int>(LocalBridgeClazz, "TEXT_DIRECTION_FIRST_STRONG"); _TEXT_DIRECTION_FIRST_STRONGReady = true; } return _TEXT_DIRECTION_FIRST_STRONGContent; } }
        private static int _TEXT_DIRECTION_FIRST_STRONGContent = default;
        private static bool _TEXT_DIRECTION_FIRST_STRONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_FIRST_STRONG_LTR"/>
        /// </summary>
        public static int TEXT_DIRECTION_FIRST_STRONG_LTR { get { if (!_TEXT_DIRECTION_FIRST_STRONG_LTRReady) { _TEXT_DIRECTION_FIRST_STRONG_LTRContent = SGetField<int>(LocalBridgeClazz, "TEXT_DIRECTION_FIRST_STRONG_LTR"); _TEXT_DIRECTION_FIRST_STRONG_LTRReady = true; } return _TEXT_DIRECTION_FIRST_STRONG_LTRContent; } }
        private static int _TEXT_DIRECTION_FIRST_STRONG_LTRContent = default;
        private static bool _TEXT_DIRECTION_FIRST_STRONG_LTRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_FIRST_STRONG_RTL"/>
        /// </summary>
        public static int TEXT_DIRECTION_FIRST_STRONG_RTL { get { if (!_TEXT_DIRECTION_FIRST_STRONG_RTLReady) { _TEXT_DIRECTION_FIRST_STRONG_RTLContent = SGetField<int>(LocalBridgeClazz, "TEXT_DIRECTION_FIRST_STRONG_RTL"); _TEXT_DIRECTION_FIRST_STRONG_RTLReady = true; } return _TEXT_DIRECTION_FIRST_STRONG_RTLContent; } }
        private static int _TEXT_DIRECTION_FIRST_STRONG_RTLContent = default;
        private static bool _TEXT_DIRECTION_FIRST_STRONG_RTLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_INHERIT"/>
        /// </summary>
        public static int TEXT_DIRECTION_INHERIT { get { if (!_TEXT_DIRECTION_INHERITReady) { _TEXT_DIRECTION_INHERITContent = SGetField<int>(LocalBridgeClazz, "TEXT_DIRECTION_INHERIT"); _TEXT_DIRECTION_INHERITReady = true; } return _TEXT_DIRECTION_INHERITContent; } }
        private static int _TEXT_DIRECTION_INHERITContent = default;
        private static bool _TEXT_DIRECTION_INHERITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_LOCALE"/>
        /// </summary>
        public static int TEXT_DIRECTION_LOCALE { get { if (!_TEXT_DIRECTION_LOCALEReady) { _TEXT_DIRECTION_LOCALEContent = SGetField<int>(LocalBridgeClazz, "TEXT_DIRECTION_LOCALE"); _TEXT_DIRECTION_LOCALEReady = true; } return _TEXT_DIRECTION_LOCALEContent; } }
        private static int _TEXT_DIRECTION_LOCALEContent = default;
        private static bool _TEXT_DIRECTION_LOCALEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_LTR"/>
        /// </summary>
        public static int TEXT_DIRECTION_LTR { get { if (!_TEXT_DIRECTION_LTRReady) { _TEXT_DIRECTION_LTRContent = SGetField<int>(LocalBridgeClazz, "TEXT_DIRECTION_LTR"); _TEXT_DIRECTION_LTRReady = true; } return _TEXT_DIRECTION_LTRContent; } }
        private static int _TEXT_DIRECTION_LTRContent = default;
        private static bool _TEXT_DIRECTION_LTRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#TEXT_DIRECTION_RTL"/>
        /// </summary>
        public static int TEXT_DIRECTION_RTL { get { if (!_TEXT_DIRECTION_RTLReady) { _TEXT_DIRECTION_RTLContent = SGetField<int>(LocalBridgeClazz, "TEXT_DIRECTION_RTL"); _TEXT_DIRECTION_RTLReady = true; } return _TEXT_DIRECTION_RTLContent; } }
        private static int _TEXT_DIRECTION_RTLContent = default;
        private static bool _TEXT_DIRECTION_RTLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#VISIBLE"/>
        /// </summary>
        public static int VISIBLE { get { if (!_VISIBLEReady) { _VISIBLEContent = SGetField<int>(LocalBridgeClazz, "VISIBLE"); _VISIBLEReady = true; } return _VISIBLEContent; } }
        private static int _VISIBLEContent = default;
        private static bool _VISIBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE"/>
        /// </summary>
        public static Java.Lang.String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE { get { if (!_AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATEReady) { _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE"); _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATEReady = true; } return _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATEContent; } }
        private static Java.Lang.String _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATEContent = default;
        private static bool _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY"/>
        /// </summary>
        public static Java.Lang.String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY { get { if (!_AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAYReady) { _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY"); _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAYReady = true; } return _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAYContent; } }
        private static Java.Lang.String _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAYContent = default;
        private static bool _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH"/>
        /// </summary>
        public static Java.Lang.String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH { get { if (!_AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTHReady) { _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH"); _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTHReady = true; } return _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTHContent; } }
        private static Java.Lang.String _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTHContent = default;
        private static bool _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR"/>
        /// </summary>
        public static Java.Lang.String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR { get { if (!_AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEARReady) { _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEARContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR"); _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEARReady = true; } return _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEARContent; } }
        private static Java.Lang.String _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEARContent = default;
        private static bool _AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEARReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_CREDIT_CARD_NUMBER"/>
        /// </summary>
        public static Java.Lang.String AUTOFILL_HINT_CREDIT_CARD_NUMBER { get { if (!_AUTOFILL_HINT_CREDIT_CARD_NUMBERReady) { _AUTOFILL_HINT_CREDIT_CARD_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTOFILL_HINT_CREDIT_CARD_NUMBER"); _AUTOFILL_HINT_CREDIT_CARD_NUMBERReady = true; } return _AUTOFILL_HINT_CREDIT_CARD_NUMBERContent; } }
        private static Java.Lang.String _AUTOFILL_HINT_CREDIT_CARD_NUMBERContent = default;
        private static bool _AUTOFILL_HINT_CREDIT_CARD_NUMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE"/>
        /// </summary>
        public static Java.Lang.String AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE { get { if (!_AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODEReady) { _AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE"); _AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODEReady = true; } return _AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODEContent; } }
        private static Java.Lang.String _AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODEContent = default;
        private static bool _AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_EMAIL_ADDRESS"/>
        /// </summary>
        public static Java.Lang.String AUTOFILL_HINT_EMAIL_ADDRESS { get { if (!_AUTOFILL_HINT_EMAIL_ADDRESSReady) { _AUTOFILL_HINT_EMAIL_ADDRESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTOFILL_HINT_EMAIL_ADDRESS"); _AUTOFILL_HINT_EMAIL_ADDRESSReady = true; } return _AUTOFILL_HINT_EMAIL_ADDRESSContent; } }
        private static Java.Lang.String _AUTOFILL_HINT_EMAIL_ADDRESSContent = default;
        private static bool _AUTOFILL_HINT_EMAIL_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_NAME"/>
        /// </summary>
        public static Java.Lang.String AUTOFILL_HINT_NAME { get { if (!_AUTOFILL_HINT_NAMEReady) { _AUTOFILL_HINT_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTOFILL_HINT_NAME"); _AUTOFILL_HINT_NAMEReady = true; } return _AUTOFILL_HINT_NAMEContent; } }
        private static Java.Lang.String _AUTOFILL_HINT_NAMEContent = default;
        private static bool _AUTOFILL_HINT_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_PASSWORD"/>
        /// </summary>
        public static Java.Lang.String AUTOFILL_HINT_PASSWORD { get { if (!_AUTOFILL_HINT_PASSWORDReady) { _AUTOFILL_HINT_PASSWORDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTOFILL_HINT_PASSWORD"); _AUTOFILL_HINT_PASSWORDReady = true; } return _AUTOFILL_HINT_PASSWORDContent; } }
        private static Java.Lang.String _AUTOFILL_HINT_PASSWORDContent = default;
        private static bool _AUTOFILL_HINT_PASSWORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_PHONE"/>
        /// </summary>
        public static Java.Lang.String AUTOFILL_HINT_PHONE { get { if (!_AUTOFILL_HINT_PHONEReady) { _AUTOFILL_HINT_PHONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTOFILL_HINT_PHONE"); _AUTOFILL_HINT_PHONEReady = true; } return _AUTOFILL_HINT_PHONEContent; } }
        private static Java.Lang.String _AUTOFILL_HINT_PHONEContent = default;
        private static bool _AUTOFILL_HINT_PHONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_POSTAL_ADDRESS"/>
        /// </summary>
        public static Java.Lang.String AUTOFILL_HINT_POSTAL_ADDRESS { get { if (!_AUTOFILL_HINT_POSTAL_ADDRESSReady) { _AUTOFILL_HINT_POSTAL_ADDRESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTOFILL_HINT_POSTAL_ADDRESS"); _AUTOFILL_HINT_POSTAL_ADDRESSReady = true; } return _AUTOFILL_HINT_POSTAL_ADDRESSContent; } }
        private static Java.Lang.String _AUTOFILL_HINT_POSTAL_ADDRESSContent = default;
        private static bool _AUTOFILL_HINT_POSTAL_ADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_POSTAL_CODE"/>
        /// </summary>
        public static Java.Lang.String AUTOFILL_HINT_POSTAL_CODE { get { if (!_AUTOFILL_HINT_POSTAL_CODEReady) { _AUTOFILL_HINT_POSTAL_CODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTOFILL_HINT_POSTAL_CODE"); _AUTOFILL_HINT_POSTAL_CODEReady = true; } return _AUTOFILL_HINT_POSTAL_CODEContent; } }
        private static Java.Lang.String _AUTOFILL_HINT_POSTAL_CODEContent = default;
        private static bool _AUTOFILL_HINT_POSTAL_CODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_USERNAME"/>
        /// </summary>
        public static Java.Lang.String AUTOFILL_HINT_USERNAME { get { if (!_AUTOFILL_HINT_USERNAMEReady) { _AUTOFILL_HINT_USERNAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTOFILL_HINT_USERNAME"); _AUTOFILL_HINT_USERNAMEReady = true; } return _AUTOFILL_HINT_USERNAMEContent; } }
        private static Java.Lang.String _AUTOFILL_HINT_USERNAMEContent = default;
        private static bool _AUTOFILL_HINT_USERNAMEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#inflate(android.content.Context,int,android.view.ViewGroup)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.View.ViewGroup"/></param>
        /// <returns><see cref="Android.View.View"/></returns>
        public static Android.View.View Inflate(Android.Content.Context arg0, int arg1, Android.View.ViewGroup arg2)
        {
            return SExecute<Android.View.View>(LocalBridgeClazz, "inflate", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#combineMeasuredStates(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int CombineMeasuredStates(int arg0, int arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "combineMeasuredStates", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#generateViewId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public static int GenerateViewId()
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "generateViewId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getDefaultSize(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetDefaultSize(int arg0, int arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "getDefaultSize", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#resolveSize(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int ResolveSize(int arg0, int arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "resolveSize", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#resolveSizeAndState(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int ResolveSizeAndState(int arg0, int arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "resolveSizeAndState", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getStateListAnimator()"/>
        /// </summary>
        /// <returns><see cref="Android.Animation.StateListAnimator"/></returns>
        public Android.Animation.StateListAnimator GetStateListAnimator()
        {
            return IExecuteWithSignature<Android.Animation.StateListAnimator>("getStateListAnimator", "()Landroid/animation/StateListAnimator;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getBackgroundTintList()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Res.ColorStateList"/></returns>
        public Android.Content.Res.ColorStateList GetBackgroundTintList()
        {
            return IExecuteWithSignature<Android.Content.Res.ColorStateList>("getBackgroundTintList", "()Landroid/content/res/ColorStateList;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getForegroundTintList()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Res.ColorStateList"/></returns>
        public Android.Content.Res.ColorStateList GetForegroundTintList()
        {
            return IExecuteWithSignature<Android.Content.Res.ColorStateList>("getForegroundTintList", "()Landroid/content/res/ColorStateList;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getResources()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Res.Resources"/></returns>
        public Android.Content.Res.Resources GetResources()
        {
            return IExecuteWithSignature<Android.Content.Res.Resources>("getResources", "()Landroid/content/res/Resources;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getDrawingCache()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        [global::System.Obsolete()]
        public Android.Graphics.Bitmap GetDrawingCache()
        {
            return IExecuteWithSignature<Android.Graphics.Bitmap>("getDrawingCache", "()Landroid/graphics/Bitmap;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getDrawingCache(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <returns><see cref="Android.Graphics.Bitmap"/></returns>
        [global::System.Obsolete()]
        public Android.Graphics.Bitmap GetDrawingCache(bool arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Bitmap>("getDrawingCache", "(Z)Landroid/graphics/Bitmap;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getBackgroundTintBlendMode()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.BlendMode"/></returns>
        public Android.Graphics.BlendMode GetBackgroundTintBlendMode()
        {
            return IExecuteWithSignature<Android.Graphics.BlendMode>("getBackgroundTintBlendMode", "()Landroid/graphics/BlendMode;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getForegroundTintBlendMode()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.BlendMode"/></returns>
        public Android.Graphics.BlendMode GetForegroundTintBlendMode()
        {
            return IExecuteWithSignature<Android.Graphics.BlendMode>("getForegroundTintBlendMode", "()Landroid/graphics/BlendMode;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getBackground()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetBackground()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getBackground", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getForeground()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetForeground()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getForeground", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getHorizontalScrollbarThumbDrawable()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetHorizontalScrollbarThumbDrawable()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getHorizontalScrollbarThumbDrawable", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getHorizontalScrollbarTrackDrawable()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetHorizontalScrollbarTrackDrawable()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getHorizontalScrollbarTrackDrawable", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getVerticalScrollbarThumbDrawable()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetVerticalScrollbarThumbDrawable()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getVerticalScrollbarThumbDrawable", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getVerticalScrollbarTrackDrawable()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Drawable.Drawable"/></returns>
        public Android.Graphics.Drawable.Drawable GetVerticalScrollbarTrackDrawable()
        {
            return IExecuteWithSignature<Android.Graphics.Drawable.Drawable>("getVerticalScrollbarTrackDrawable", "()Landroid/graphics/drawable/Drawable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAnimationMatrix()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Matrix"/></returns>
        public Android.Graphics.Matrix GetAnimationMatrix()
        {
            return IExecuteWithSignature<Android.Graphics.Matrix>("getAnimationMatrix", "()Landroid/graphics/Matrix;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getMatrix()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Matrix"/></returns>
        public Android.Graphics.Matrix GetMatrix()
        {
            return IExecuteWithSignature<Android.Graphics.Matrix>("getMatrix", "()Landroid/graphics/Matrix;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getBackgroundTintMode()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.PorterDuff.Mode"/></returns>
        public Android.Graphics.PorterDuff.Mode GetBackgroundTintMode()
        {
            return IExecuteWithSignature<Android.Graphics.PorterDuff.Mode>("getBackgroundTintMode", "()Landroid/graphics/PorterDuff$Mode;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getForegroundTintMode()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.PorterDuff.Mode"/></returns>
        public Android.Graphics.PorterDuff.Mode GetForegroundTintMode()
        {
            return IExecuteWithSignature<Android.Graphics.PorterDuff.Mode>("getForegroundTintMode", "()Landroid/graphics/PorterDuff$Mode;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getClipBounds()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Rect"/></returns>
        public Android.Graphics.Rect GetClipBounds()
        {
            return IExecuteWithSignature<Android.Graphics.Rect>("getClipBounds", "()Landroid/graphics/Rect;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getHandler()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Handler"/></returns>
        public Android.Os.Handler GetHandler()
        {
            return IExecuteWithSignature<Android.Os.Handler>("getHandler", "()Landroid/os/Handler;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getApplicationWindowToken()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.IBinder"/></returns>
        public Android.Os.IBinder GetApplicationWindowToken()
        {
            return IExecuteWithSignature<Android.Os.IBinder>("getApplicationWindowToken", "()Landroid/os/IBinder;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getWindowToken()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.IBinder"/></returns>
        public Android.Os.IBinder GetWindowToken()
        {
            return IExecuteWithSignature<Android.Os.IBinder>("getWindowToken", "()Landroid/os/IBinder;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#createAccessibilityNodeInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo CreateAccessibilityNodeInfo()
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>("createAccessibilityNodeInfo", "()Landroid/view/accessibility/AccessibilityNodeInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAccessibilityNodeProvider()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeProvider"/></returns>
        public Android.View.Accessibility.AccessibilityNodeProvider GetAccessibilityNodeProvider()
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeProvider>("getAccessibilityNodeProvider", "()Landroid/view/accessibility/AccessibilityNodeProvider;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#startActionMode(android.view.ActionMode.Callback,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ActionMode.Callback"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.View.ActionMode"/></returns>
        public Android.View.ActionMode StartActionMode(Android.View.ActionMode.Callback arg0, int arg1)
        {
            return IExecute<Android.View.ActionMode>("startActionMode", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#startActionMode(android.view.ActionMode.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ActionMode.Callback"/></param>
        /// <returns><see cref="Android.View.ActionMode"/></returns>
        public Android.View.ActionMode StartActionMode(Android.View.ActionMode.Callback arg0)
        {
            return IExecuteWithSignature<Android.View.ActionMode>("startActionMode", "(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAnimation()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Animation.Animation"/></returns>
        public Android.View.Animation.Animation GetAnimation()
        {
            return IExecuteWithSignature<Android.View.Animation.Animation>("getAnimation", "()Landroid/view/animation/Animation;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getRootSurfaceControl()"/>
        /// </summary>
        /// <returns><see cref="Android.View.AttachedSurfaceControl"/></returns>
        public Android.View.AttachedSurfaceControl GetRootSurfaceControl()
        {
            return IExecuteWithSignature<Android.View.AttachedSurfaceControl>("getRootSurfaceControl", "()Landroid/view/AttachedSurfaceControl;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAutofillValue()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Autofill.AutofillValue"/></returns>
        public Android.View.Autofill.AutofillValue GetAutofillValue()
        {
            return IExecuteWithSignature<Android.View.Autofill.AutofillValue>("getAutofillValue", "()Landroid/view/autofill/AutofillValue;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onReceiveContent(android.view.ContentInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ContentInfo"/></param>
        /// <returns><see cref="Android.View.ContentInfo"/></returns>
        public Android.View.ContentInfo OnReceiveContent(Android.View.ContentInfo arg0)
        {
            return IExecuteWithSignature<Android.View.ContentInfo>("onReceiveContent", "(Landroid/view/ContentInfo;)Landroid/view/ContentInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#performReceiveContent(android.view.ContentInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ContentInfo"/></param>
        /// <returns><see cref="Android.View.ContentInfo"/></returns>
        public Android.View.ContentInfo PerformReceiveContent(Android.View.ContentInfo arg0)
        {
            return IExecuteWithSignature<Android.View.ContentInfo>("performReceiveContent", "(Landroid/view/ContentInfo;)Landroid/view/ContentInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getDisplay()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Display"/></returns>
        public Android.View.Display GetDisplay()
        {
            return IExecuteWithSignature<Android.View.Display>("getDisplay", "()Landroid/view/Display;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onCreateInputConnection(android.view.inputmethod.EditorInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.EditorInfo"/></param>
        /// <returns><see cref="Android.View.Inputmethod.InputConnection"/></returns>
        public Android.View.Inputmethod.InputConnection OnCreateInputConnection(Android.View.Inputmethod.EditorInfo arg0)
        {
            return IExecuteWithSignature<Android.View.Inputmethod.InputConnection>("onCreateInputConnection", "(Landroid/view/inputmethod/EditorInfo;)Landroid/view/inputmethod/InputConnection;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getKeyDispatcherState()"/>
        /// </summary>
        /// <returns><see cref="Android.View.KeyEvent.DispatcherState"/></returns>
        public Android.View.KeyEvent.DispatcherState GetKeyDispatcherState()
        {
            return IExecuteWithSignature<Android.View.KeyEvent.DispatcherState>("getKeyDispatcherState", "()Landroid/view/KeyEvent$DispatcherState;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getPointerIcon()"/>
        /// </summary>
        /// <returns><see cref="Android.View.PointerIcon"/></returns>
        public Android.View.PointerIcon GetPointerIcon()
        {
            return IExecuteWithSignature<Android.View.PointerIcon>("getPointerIcon", "()Landroid/view/PointerIcon;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onResolvePointerIcon(android.view.MotionEvent,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.View.PointerIcon"/></returns>
        public Android.View.PointerIcon OnResolvePointerIcon(Android.View.MotionEvent arg0, int arg1)
        {
            return IExecute<Android.View.PointerIcon>("onResolvePointerIcon", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getTouchDelegate()"/>
        /// </summary>
        /// <returns><see cref="Android.View.TouchDelegate"/></returns>
        public Android.View.TouchDelegate GetTouchDelegate()
        {
            return IExecuteWithSignature<Android.View.TouchDelegate>("getTouchDelegate", "()Landroid/view/TouchDelegate;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getViewTranslationResponse()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Translation.ViewTranslationResponse"/></returns>
        public Android.View.Translation.ViewTranslationResponse GetViewTranslationResponse()
        {
            return IExecuteWithSignature<Android.View.Translation.ViewTranslationResponse>("getViewTranslationResponse", "()Landroid/view/translation/ViewTranslationResponse;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#findFocus()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View"/></returns>
        public Android.View.View FindFocus()
        {
            return IExecuteWithSignature<Android.View.View>("findFocus", "()Landroid/view/View;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#focusSearch(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.View.View"/></returns>
        public Android.View.View FocusSearch(int arg0)
        {
            return IExecuteWithSignature<Android.View.View>("focusSearch", "(I)Landroid/view/View;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getRootView()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View"/></returns>
        public Android.View.View GetRootView()
        {
            return IExecuteWithSignature<Android.View.View>("getRootView", "()Landroid/view/View;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#keyboardNavigationClusterSearch(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.View.View"/></returns>
        public Android.View.View KeyboardNavigationClusterSearch(Android.View.View arg0, int arg1)
        {
            return IExecute<Android.View.View>("keyboardNavigationClusterSearch", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAccessibilityDelegate()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View.AccessibilityDelegate"/></returns>
        public Android.View.View.AccessibilityDelegate GetAccessibilityDelegate()
        {
            return IExecuteWithSignature<Android.View.View.AccessibilityDelegate>("getAccessibilityDelegate", "()Landroid/view/View$AccessibilityDelegate;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getOnFocusChangeListener()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View.OnFocusChangeListener"/></returns>
        public Android.View.View.OnFocusChangeListener GetOnFocusChangeListener()
        {
            return IExecuteWithSignature<Android.View.View.OnFocusChangeListener>("getOnFocusChangeListener", "()Landroid/view/View$OnFocusChangeListener;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getOnFocusChangeListener()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View.OnFocusChangeListener"/></returns>
        public Android.View.View.OnFocusChangeListener GetOnFocusChangeListenerDirect()
        {
            return IExecuteWithSignature<Android.View.View.OnFocusChangeListenerDirect, Android.View.View.OnFocusChangeListener>("getOnFocusChangeListener", "()Landroid/view/View$OnFocusChangeListener;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getLayoutParams()"/>
        /// </summary>
        /// <returns><see cref="Android.View.ViewGroup.LayoutParams"/></returns>
        public Android.View.ViewGroup.LayoutParams GetLayoutParams()
        {
            return IExecuteWithSignature<Android.View.ViewGroup.LayoutParams>("getLayoutParams", "()Landroid/view/ViewGroup$LayoutParams;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getOutlineProvider()"/>
        /// </summary>
        /// <returns><see cref="Android.View.ViewOutlineProvider"/></returns>
        public Android.View.ViewOutlineProvider GetOutlineProvider()
        {
            return IExecuteWithSignature<Android.View.ViewOutlineProvider>("getOutlineProvider", "()Landroid/view/ViewOutlineProvider;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getOverlay()"/>
        /// </summary>
        /// <returns><see cref="Android.View.ViewOverlay"/></returns>
        public Android.View.ViewOverlay GetOverlay()
        {
            return IExecuteWithSignature<Android.View.ViewOverlay>("getOverlay", "()Landroid/view/ViewOverlay;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getParentForAccessibility()"/>
        /// </summary>
        /// <returns><see cref="Android.View.ViewParent"/></returns>
        public Android.View.ViewParent GetParentForAccessibility()
        {
            return IExecuteWithSignature<Android.View.ViewParent>("getParentForAccessibility", "()Landroid/view/ViewParent;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#animate()"/>
        /// </summary>
        /// <returns><see cref="Android.View.ViewPropertyAnimator"/></returns>
        public Android.View.ViewPropertyAnimator Animate()
        {
            return IExecuteWithSignature<Android.View.ViewPropertyAnimator>("animate", "()Landroid/view/ViewPropertyAnimator;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getViewTreeObserver()"/>
        /// </summary>
        /// <returns><see cref="Android.View.ViewTreeObserver"/></returns>
        public Android.View.ViewTreeObserver GetViewTreeObserver()
        {
            return IExecuteWithSignature<Android.View.ViewTreeObserver>("getViewTreeObserver", "()Landroid/view/ViewTreeObserver;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getWindowId()"/>
        /// </summary>
        /// <returns><see cref="Android.View.WindowId"/></returns>
        public Android.View.WindowId GetWindowId()
        {
            return IExecuteWithSignature<Android.View.WindowId>("getWindowId", "()Landroid/view/WindowId;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#computeSystemWindowInsets(android.view.WindowInsets,android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsets"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="Android.View.WindowInsets"/></returns>
        public Android.View.WindowInsets ComputeSystemWindowInsets(Android.View.WindowInsets arg0, Android.Graphics.Rect arg1)
        {
            return IExecute<Android.View.WindowInsets>("computeSystemWindowInsets", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchApplyWindowInsets(android.view.WindowInsets)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsets"/></param>
        /// <returns><see cref="Android.View.WindowInsets"/></returns>
        public Android.View.WindowInsets DispatchApplyWindowInsets(Android.View.WindowInsets arg0)
        {
            return IExecuteWithSignature<Android.View.WindowInsets>("dispatchApplyWindowInsets", "(Landroid/view/WindowInsets;)Landroid/view/WindowInsets;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchWindowInsetsAnimationProgress(android.view.WindowInsets,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsets"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="Android.View.WindowInsets"/></returns>
        public Android.View.WindowInsets DispatchWindowInsetsAnimationProgress(Android.View.WindowInsets arg0, Java.Util.List<Android.View.WindowInsetsAnimation> arg1)
        {
            return IExecute<Android.View.WindowInsets>("dispatchWindowInsetsAnimationProgress", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getRootWindowInsets()"/>
        /// </summary>
        /// <returns><see cref="Android.View.WindowInsets"/></returns>
        public Android.View.WindowInsets GetRootWindowInsets()
        {
            return IExecuteWithSignature<Android.View.WindowInsets>("getRootWindowInsets", "()Landroid/view/WindowInsets;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onApplyWindowInsets(android.view.WindowInsets)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsets"/></param>
        /// <returns><see cref="Android.View.WindowInsets"/></returns>
        public Android.View.WindowInsets OnApplyWindowInsets(Android.View.WindowInsets arg0)
        {
            return IExecuteWithSignature<Android.View.WindowInsets>("onApplyWindowInsets", "(Landroid/view/WindowInsets;)Landroid/view/WindowInsets;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchWindowInsetsAnimationStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation.Bounds)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsetsAnimation"/></param>
        /// <param name="arg1"><see cref="Android.View.WindowInsetsAnimation.Bounds"/></param>
        /// <returns><see cref="Android.View.WindowInsetsAnimation.Bounds"/></returns>
        public Android.View.WindowInsetsAnimation.Bounds DispatchWindowInsetsAnimationStart(Android.View.WindowInsetsAnimation arg0, Android.View.WindowInsetsAnimation.Bounds arg1)
        {
            return IExecute<Android.View.WindowInsetsAnimation.Bounds>("dispatchWindowInsetsAnimationStart", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getWindowInsetsController()"/>
        /// </summary>
        /// <returns><see cref="Android.View.WindowInsetsController"/></returns>
        public Android.View.WindowInsetsController GetWindowInsetsController()
        {
            return IExecuteWithSignature<Android.View.WindowInsetsController>("getWindowInsetsController", "()Landroid/view/WindowInsetsController;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#callOnClick()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool CallOnClick()
        {
            return IExecuteWithSignature<bool>("callOnClick", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#canResolveLayoutDirection()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool CanResolveLayoutDirection()
        {
            return IExecuteWithSignature<bool>("canResolveLayoutDirection", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#canResolveTextAlignment()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool CanResolveTextAlignment()
        {
            return IExecuteWithSignature<bool>("canResolveTextAlignment", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#canResolveTextDirection()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool CanResolveTextDirection()
        {
            return IExecuteWithSignature<bool>("canResolveTextDirection", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#canScrollHorizontally(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CanScrollHorizontally(int arg0)
        {
            return IExecuteWithSignature<bool>("canScrollHorizontally", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#canScrollVertically(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CanScrollVertically(int arg0)
        {
            return IExecuteWithSignature<bool>("canScrollVertically", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#checkInputConnectionProxy(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CheckInputConnectionProxy(Android.View.View arg0)
        {
            return IExecuteWithSignature<bool>("checkInputConnectionProxy", "(Landroid/view/View;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchCapturedPointerEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchCapturedPointerEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("dispatchCapturedPointerEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchDragEvent(android.view.DragEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.DragEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchDragEvent(Android.View.DragEvent arg0)
        {
            return IExecuteWithSignature<bool>("dispatchDragEvent", "(Landroid/view/DragEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchGenericMotionEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchGenericMotionEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("dispatchGenericMotionEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchKeyEvent(android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchKeyEvent(Android.View.KeyEvent arg0)
        {
            return IExecuteWithSignature<bool>("dispatchKeyEvent", "(Landroid/view/KeyEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchKeyEventPreIme(android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchKeyEventPreIme(Android.View.KeyEvent arg0)
        {
            return IExecuteWithSignature<bool>("dispatchKeyEventPreIme", "(Landroid/view/KeyEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchKeyShortcutEvent(android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchKeyShortcutEvent(Android.View.KeyEvent arg0)
        {
            return IExecuteWithSignature<bool>("dispatchKeyShortcutEvent", "(Landroid/view/KeyEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchNestedFling(float,float,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchNestedFling(float arg0, float arg1, bool arg2)
        {
            return IExecute<bool>("dispatchNestedFling", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchNestedPreFling(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchNestedPreFling(float arg0, float arg1)
        {
            return IExecute<bool>("dispatchNestedPreFling", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchNestedPrePerformAccessibilityAction(int,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchNestedPrePerformAccessibilityAction(int arg0, Android.Os.Bundle arg1)
        {
            return IExecute<bool>("dispatchNestedPrePerformAccessibilityAction", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchNestedPreScroll(int,int,int[],int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchNestedPreScroll(int arg0, int arg1, int[] arg2, int[] arg3)
        {
            return IExecute<bool>("dispatchNestedPreScroll", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchNestedScroll(int,int,int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchNestedScroll(int arg0, int arg1, int arg2, int arg3, int[] arg4)
        {
            return IExecute<bool>("dispatchNestedScroll", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchPopulateAccessibilityEvent(Android.View.Accessibility.AccessibilityEvent arg0)
        {
            return IExecuteWithSignature<bool>("dispatchPopulateAccessibilityEvent", "(Landroid/view/accessibility/AccessibilityEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchTouchEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchTouchEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("dispatchTouchEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchTrackballEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchTrackballEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("dispatchTrackballEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchUnhandledMove(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchUnhandledMove(Android.View.View arg0, int arg1)
        {
            return IExecute<bool>("dispatchUnhandledMove", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#gatherTransparentRegion(android.graphics.Region)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Region"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GatherTransparentRegion(Android.Graphics.Region arg0)
        {
            return IExecuteWithSignature<bool>("gatherTransparentRegion", "(Landroid/graphics/Region;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getClipBounds(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetClipBounds(Android.Graphics.Rect arg0)
        {
            return IExecuteWithSignature<bool>("getClipBounds", "(Landroid/graphics/Rect;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getFilterTouchesWhenObscured()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetFilterTouchesWhenObscured()
        {
            return IExecuteWithSignature<bool>("getFilterTouchesWhenObscured", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getFitsSystemWindows()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetFitsSystemWindows()
        {
            return IExecuteWithSignature<bool>("getFitsSystemWindows", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Point"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetGlobalVisibleRect(Android.Graphics.Rect arg0, Android.Graphics.Point arg1)
        {
            return IExecute<bool>("getGlobalVisibleRect", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getKeepScreenOn()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetKeepScreenOn()
        {
            return IExecuteWithSignature<bool>("getKeepScreenOn", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#hasExplicitFocusable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasExplicitFocusable()
        {
            return IExecuteWithSignature<bool>("hasExplicitFocusable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#hasFocus()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasFocus()
        {
            return IExecuteWithSignature<bool>("hasFocus", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#hasFocusable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasFocusable()
        {
            return IExecuteWithSignature<bool>("hasFocusable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#hasNestedScrollingParent()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasNestedScrollingParent()
        {
            return IExecuteWithSignature<bool>("hasNestedScrollingParent", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#hasOnClickListeners()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasOnClickListeners()
        {
            return IExecuteWithSignature<bool>("hasOnClickListeners", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#hasOnLongClickListeners()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasOnLongClickListeners()
        {
            return IExecuteWithSignature<bool>("hasOnLongClickListeners", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#hasOverlappingRendering()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasOverlappingRendering()
        {
            return IExecuteWithSignature<bool>("hasOverlappingRendering", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#hasPointerCapture()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasPointerCapture()
        {
            return IExecuteWithSignature<bool>("hasPointerCapture", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#hasTransientState()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasTransientState()
        {
            return IExecuteWithSignature<bool>("hasTransientState", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#hasWindowFocus()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasWindowFocus()
        {
            return IExecuteWithSignature<bool>("hasWindowFocus", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isAccessibilityDataSensitive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAccessibilityDataSensitive()
        {
            return IExecuteWithSignature<bool>("isAccessibilityDataSensitive", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isAccessibilityFocused()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAccessibilityFocused()
        {
            return IExecuteWithSignature<bool>("isAccessibilityFocused", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isAccessibilityHeading()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAccessibilityHeading()
        {
            return IExecuteWithSignature<bool>("isAccessibilityHeading", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isActivated()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsActivated()
        {
            return IExecuteWithSignature<bool>("isActivated", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isAttachedToWindow()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAttachedToWindow()
        {
            return IExecuteWithSignature<bool>("isAttachedToWindow", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isAutoHandwritingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAutoHandwritingEnabled()
        {
            return IExecuteWithSignature<bool>("isAutoHandwritingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isClickable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsClickable()
        {
            return IExecuteWithSignature<bool>("isClickable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isContextClickable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsContextClickable()
        {
            return IExecuteWithSignature<bool>("isContextClickable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isCredential()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsCredential()
        {
            return IExecuteWithSignature<bool>("isCredential", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isDirty()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDirty()
        {
            return IExecuteWithSignature<bool>("isDirty", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isDrawingCacheEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsDrawingCacheEnabled()
        {
            return IExecuteWithSignature<bool>("isDrawingCacheEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isDuplicateParentStateEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDuplicateParentStateEnabled()
        {
            return IExecuteWithSignature<bool>("isDuplicateParentStateEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEnabled()
        {
            return IExecuteWithSignature<bool>("isEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isFocused()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFocused()
        {
            return IExecuteWithSignature<bool>("isFocused", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isForceDarkAllowed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsForceDarkAllowed()
        {
            return IExecuteWithSignature<bool>("isForceDarkAllowed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isHandwritingDelegate()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHandwritingDelegate()
        {
            return IExecuteWithSignature<bool>("isHandwritingDelegate", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isHapticFeedbackEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHapticFeedbackEnabled()
        {
            return IExecuteWithSignature<bool>("isHapticFeedbackEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isHardwareAccelerated()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHardwareAccelerated()
        {
            return IExecuteWithSignature<bool>("isHardwareAccelerated", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isHorizontalFadingEdgeEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHorizontalFadingEdgeEnabled()
        {
            return IExecuteWithSignature<bool>("isHorizontalFadingEdgeEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isHorizontalScrollBarEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHorizontalScrollBarEnabled()
        {
            return IExecuteWithSignature<bool>("isHorizontalScrollBarEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isHovered()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHovered()
        {
            return IExecuteWithSignature<bool>("isHovered", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isImportantForAccessibility()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsImportantForAccessibility()
        {
            return IExecuteWithSignature<bool>("isImportantForAccessibility", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isInEditMode()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsInEditMode()
        {
            return IExecuteWithSignature<bool>("isInEditMode", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isInLayout()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsInLayout()
        {
            return IExecuteWithSignature<bool>("isInLayout", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isInTouchMode()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsInTouchMode()
        {
            return IExecuteWithSignature<bool>("isInTouchMode", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isLaidOut()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLaidOut()
        {
            return IExecuteWithSignature<bool>("isLaidOut", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isLayoutDirectionResolved()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLayoutDirectionResolved()
        {
            return IExecuteWithSignature<bool>("isLayoutDirectionResolved", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isLayoutRequested()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLayoutRequested()
        {
            return IExecuteWithSignature<bool>("isLayoutRequested", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isLongClickable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLongClickable()
        {
            return IExecuteWithSignature<bool>("isLongClickable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isNestedScrollingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsNestedScrollingEnabled()
        {
            return IExecuteWithSignature<bool>("isNestedScrollingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isOpaque()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsOpaque()
        {
            return IExecuteWithSignature<bool>("isOpaque", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isPaddingRelative()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPaddingRelative()
        {
            return IExecuteWithSignature<bool>("isPaddingRelative", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isPivotSet()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPivotSet()
        {
            return IExecuteWithSignature<bool>("isPivotSet", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isPressed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPressed()
        {
            return IExecuteWithSignature<bool>("isPressed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isSaveEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSaveEnabled()
        {
            return IExecuteWithSignature<bool>("isSaveEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isSaveFromParentEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSaveFromParentEnabled()
        {
            return IExecuteWithSignature<bool>("isSaveFromParentEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isScreenReaderFocusable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsScreenReaderFocusable()
        {
            return IExecuteWithSignature<bool>("isScreenReaderFocusable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isScrollbarFadingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsScrollbarFadingEnabled()
        {
            return IExecuteWithSignature<bool>("isScrollbarFadingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isScrollContainer()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsScrollContainer()
        {
            return IExecuteWithSignature<bool>("isScrollContainer", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isSelected()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSelected()
        {
            return IExecuteWithSignature<bool>("isSelected", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isShown()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsShown()
        {
            return IExecuteWithSignature<bool>("isShown", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isSoundEffectsEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSoundEffectsEnabled()
        {
            return IExecuteWithSignature<bool>("isSoundEffectsEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isTextAlignmentResolved()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTextAlignmentResolved()
        {
            return IExecuteWithSignature<bool>("isTextAlignmentResolved", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isTextDirectionResolved()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTextDirectionResolved()
        {
            return IExecuteWithSignature<bool>("isTextDirectionResolved", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isVerticalFadingEdgeEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsVerticalFadingEdgeEnabled()
        {
            return IExecuteWithSignature<bool>("isVerticalFadingEdgeEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isVerticalScrollBarEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsVerticalScrollBarEnabled()
        {
            return IExecuteWithSignature<bool>("isVerticalScrollBarEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isVisibleToUserForAutofill(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsVisibleToUserForAutofill(int arg0)
        {
            return IExecuteWithSignature<bool>("isVisibleToUserForAutofill", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onCapturedPointerEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnCapturedPointerEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("onCapturedPointerEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onCheckIsTextEditor()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool OnCheckIsTextEditor()
        {
            return IExecuteWithSignature<bool>("onCheckIsTextEditor", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onDragEvent(android.view.DragEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.DragEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnDragEvent(Android.View.DragEvent arg0)
        {
            return IExecuteWithSignature<bool>("onDragEvent", "(Landroid/view/DragEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onFilterTouchEventForSecurity(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnFilterTouchEventForSecurity(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("onFilterTouchEventForSecurity", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onGenericMotionEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnGenericMotionEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("onGenericMotionEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onHoverEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnHoverEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("onHoverEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onKeyDown(int,android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnKeyDown(int arg0, Android.View.KeyEvent arg1)
        {
            return IExecute<bool>("onKeyDown", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onKeyLongPress(int,android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnKeyLongPress(int arg0, Android.View.KeyEvent arg1)
        {
            return IExecute<bool>("onKeyLongPress", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onKeyMultiple(int,int,android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnKeyMultiple(int arg0, int arg1, Android.View.KeyEvent arg2)
        {
            return IExecute<bool>("onKeyMultiple", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onKeyPreIme(int,android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnKeyPreIme(int arg0, Android.View.KeyEvent arg1)
        {
            return IExecute<bool>("onKeyPreIme", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onKeyShortcut(int,android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnKeyShortcut(int arg0, Android.View.KeyEvent arg1)
        {
            return IExecute<bool>("onKeyShortcut", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onKeyUp(int,android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnKeyUp(int arg0, Android.View.KeyEvent arg1)
        {
            return IExecute<bool>("onKeyUp", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnTouchEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("onTouchEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onTrackballEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnTrackballEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("onTrackballEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#performAccessibilityAction(int,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PerformAccessibilityAction(int arg0, Android.Os.Bundle arg1)
        {
            return IExecute<bool>("performAccessibilityAction", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#performClick()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool PerformClick()
        {
            return IExecuteWithSignature<bool>("performClick", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#performContextClick()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool PerformContextClick()
        {
            return IExecuteWithSignature<bool>("performContextClick", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#performContextClick(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PerformContextClick(float arg0, float arg1)
        {
            return IExecute<bool>("performContextClick", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#performHapticFeedback(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PerformHapticFeedback(int arg0, int arg1)
        {
            return IExecute<bool>("performHapticFeedback", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#performHapticFeedback(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PerformHapticFeedback(int arg0)
        {
            return IExecuteWithSignature<bool>("performHapticFeedback", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#performLongClick()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool PerformLongClick()
        {
            return IExecuteWithSignature<bool>("performLongClick", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#performLongClick(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PerformLongClick(float arg0, float arg1)
        {
            return IExecute<bool>("performLongClick", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#post(java.lang.Runnable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Runnable"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Post(Java.Lang.Runnable arg0)
        {
            return IExecuteWithSignature<bool>("post", "(Ljava/lang/Runnable;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#postDelayed(java.lang.Runnable,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Runnable"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PostDelayed(Java.Lang.Runnable arg0, long arg1)
        {
            return IExecute<bool>("postDelayed", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#removeCallbacks(java.lang.Runnable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Runnable"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RemoveCallbacks(Java.Lang.Runnable arg0)
        {
            return IExecuteWithSignature<bool>("removeCallbacks", "(Ljava/lang/Runnable;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#requestFocus(int,android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestFocus(int arg0, Android.Graphics.Rect arg1)
        {
            return IExecute<bool>("requestFocus", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#requestRectangleOnScreen(android.graphics.Rect,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestRectangleOnScreen(Android.Graphics.Rect arg0, bool arg1)
        {
            return IExecute<bool>("requestRectangleOnScreen", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#requestRectangleOnScreen(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestRectangleOnScreen(Android.Graphics.Rect arg0)
        {
            return IExecuteWithSignature<bool>("requestRectangleOnScreen", "(Landroid/graphics/Rect;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#restoreDefaultFocus()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool RestoreDefaultFocus()
        {
            return IExecuteWithSignature<bool>("restoreDefaultFocus", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#showContextMenu()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool ShowContextMenu()
        {
            return IExecuteWithSignature<bool>("showContextMenu", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#showContextMenu(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ShowContextMenu(float arg0, float arg1)
        {
            return IExecute<bool>("showContextMenu", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#startNestedScroll(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool StartNestedScroll(int arg0)
        {
            return IExecuteWithSignature<bool>("startNestedScroll", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#willNotCacheDrawing()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool WillNotCacheDrawing()
        {
            return IExecuteWithSignature<bool>("willNotCacheDrawing", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#willNotDraw()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool WillNotDraw()
        {
            return IExecuteWithSignature<bool>("willNotDraw", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#findViewById(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <typeparam name="T"><see cref="Android.View.View"/></typeparam>
        /// <returns><typeparamref name="T"/></returns>
        public T FindViewById<T>(int arg0) where T : Android.View.View
        {
            return IExecuteWithSignature<T>("findViewById", "(I)Landroid/view/View;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#findViewWithTag(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <typeparam name="T"><see cref="Android.View.View"/></typeparam>
        /// <returns><typeparamref name="T"/></returns>
        public T FindViewWithTag<T>(object arg0) where T : Android.View.View
        {
            return IExecuteWithSignature<T>("findViewWithTag", "(Ljava/lang/Object;)Landroid/view/View;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#requireViewById(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <typeparam name="T"><see cref="Android.View.View"/></typeparam>
        /// <returns><typeparamref name="T"/></returns>
        public T RequireViewById<T>(int arg0) where T : Android.View.View
        {
            return IExecuteWithSignature<T>("requireViewById", "(I)Landroid/view/View;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getContext()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.Context"/></returns>
        public Android.Content.Context GetContext()
        {
            return IExecuteWithSignature<Android.Content.Context>("getContext", "()Landroid/content/Context;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getPendingCredentialRequest()"/>
        /// </summary>
        /// <returns><see cref="Android.Credentials.GetCredentialRequest"/></returns>
        public Android.Credentials.GetCredentialRequest GetPendingCredentialRequest()
        {
            return IExecuteWithSignature<Android.Credentials.GetCredentialRequest>("getPendingCredentialRequest", "()Landroid/credentials/GetCredentialRequest;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getPendingCredentialCallback()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.OutcomeReceiver"/></returns>
        public Android.Os.OutcomeReceiver<Android.Credentials.GetCredentialResponse, Android.Credentials.GetCredentialException> GetPendingCredentialCallback()
        {
            return IExecuteWithSignature<Android.Os.OutcomeReceiver<Android.Credentials.GetCredentialResponse, Android.Credentials.GetCredentialException>>("getPendingCredentialCallback", "()Landroid/os/OutcomeReceiver;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAutofillId()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Autofill.AutofillId"/></returns>
        public Android.View.Autofill.AutofillId GetAutofillId()
        {
            return IExecuteWithSignature<Android.View.Autofill.AutofillId>("getAutofillId", "()Landroid/view/autofill/AutofillId;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getContentCaptureSession()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Contentcapture.ContentCaptureSession"/></returns>
        public Android.View.Contentcapture.ContentCaptureSession GetContentCaptureSession()
        {
            return IExecuteWithSignature<Android.View.Contentcapture.ContentCaptureSession>("getContentCaptureSession", "()Landroid/view/contentcapture/ContentCaptureSession;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getParent()"/>
        /// </summary>
        /// <returns><see cref="Android.View.ViewParent"/></returns>
        public Android.View.ViewParent GetParent()
        {
            return IExecuteWithSignature<Android.View.ViewParent>("getParent", "()Landroid/view/ViewParent;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#findOnBackInvokedDispatcher()"/>
        /// </summary>
        /// <returns><see cref="Android.Window.OnBackInvokedDispatcher"/></returns>
        public Android.Window.OnBackInvokedDispatcher FindOnBackInvokedDispatcher()
        {
            return IExecuteWithSignature<Android.Window.OnBackInvokedDispatcher>("findOnBackInvokedDispatcher", "()Landroid/window/OnBackInvokedDispatcher;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getClipToOutline()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetClipToOutline()
        {
            return IExecuteWithSignature<bool>("getClipToOutline", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getDefaultFocusHighlightEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetDefaultFocusHighlightEnabled()
        {
            return IExecuteWithSignature<bool>("getDefaultFocusHighlightEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getGlobalVisibleRect(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetGlobalVisibleRect(Android.Graphics.Rect arg0)
        {
            return IExecuteWithSignature<bool>("getGlobalVisibleRect", "(Landroid/graphics/Rect;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getHasOverlappingRendering()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetHasOverlappingRendering()
        {
            return IExecuteWithSignature<bool>("getHasOverlappingRendering", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getLocalVisibleRect(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetLocalVisibleRect(Android.Graphics.Rect arg0)
        {
            return IExecuteWithSignature<bool>("getLocalVisibleRect", "(Landroid/graphics/Rect;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getRevealOnFocusHint()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetRevealOnFocusHint()
        {
            return IExecuteWithSignature<bool>("getRevealOnFocusHint", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isContentSensitive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsContentSensitive()
        {
            return IExecuteWithSignature<bool>("isContentSensitive", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isFocusable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFocusable()
        {
            return IExecuteWithSignature<bool>("isFocusable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isFocusableInTouchMode()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFocusableInTouchMode()
        {
            return IExecuteWithSignature<bool>("isFocusableInTouchMode", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isFocusedByDefault()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFocusedByDefault()
        {
            return IExecuteWithSignature<bool>("isFocusedByDefault", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isImportantForAutofill()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsImportantForAutofill()
        {
            return IExecuteWithSignature<bool>("isImportantForAutofill", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isImportantForContentCapture()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsImportantForContentCapture()
        {
            return IExecuteWithSignature<bool>("isImportantForContentCapture", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isKeyboardNavigationCluster()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsKeyboardNavigationCluster()
        {
            return IExecuteWithSignature<bool>("isKeyboardNavigationCluster", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isPreferKeepClear()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPreferKeepClear()
        {
            return IExecuteWithSignature<bool>("isPreferKeepClear", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isShowingLayoutBounds()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsShowingLayoutBounds()
        {
            return IExecuteWithSignature<bool>("isShowingLayoutBounds", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#isTemporarilyDetached()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTemporarilyDetached()
        {
            return IExecuteWithSignature<bool>("isTemporarilyDetached", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#requestFocus()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool RequestFocus()
        {
            return IExecuteWithSignature<bool>("requestFocus", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#requestFocus(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestFocus(int arg0)
        {
            return IExecuteWithSignature<bool>("requestFocus", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#requestFocusFromTouch()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool RequestFocusFromTouch()
        {
            return IExecuteWithSignature<bool>("requestFocusFromTouch", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#startDrag(android.content.ClipData,android.view.View.DragShadowBuilder,java.lang.Object,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ClipData"/></param>
        /// <param name="arg1"><see cref="Android.View.View.DragShadowBuilder"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool StartDrag(Android.Content.ClipData arg0, Android.View.View.DragShadowBuilder arg1, object arg2, int arg3)
        {
            return IExecute<bool>("startDrag", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#startDragAndDrop(android.content.ClipData,android.view.View.DragShadowBuilder,java.lang.Object,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.ClipData"/></param>
        /// <param name="arg1"><see cref="Android.View.View.DragShadowBuilder"/></param>
        /// <param name="arg2"><see cref="object"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool StartDragAndDrop(Android.Content.ClipData arg0, Android.View.View.DragShadowBuilder arg1, object arg2, int arg3)
        {
            return IExecute<bool>("startDragAndDrop", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getBottom()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetBottom()
        {
            return IExecuteWithSignature<int>("getBottom", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getContentSensitivity()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetContentSensitivity()
        {
            return IExecuteWithSignature<int>("getContentSensitivity", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHeight()
        {
            return IExecuteWithSignature<int>("getHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getLeft()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLeft()
        {
            return IExecuteWithSignature<int>("getLeft", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getMeasuredHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMeasuredHeight()
        {
            return IExecuteWithSignature<int>("getMeasuredHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getMeasuredHeightAndState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMeasuredHeightAndState()
        {
            return IExecuteWithSignature<int>("getMeasuredHeightAndState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getMeasuredState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMeasuredState()
        {
            return IExecuteWithSignature<int>("getMeasuredState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getMeasuredWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMeasuredWidth()
        {
            return IExecuteWithSignature<int>("getMeasuredWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getMeasuredWidthAndState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMeasuredWidthAndState()
        {
            return IExecuteWithSignature<int>("getMeasuredWidthAndState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getRight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRight()
        {
            return IExecuteWithSignature<int>("getRight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getScrollX()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetScrollX()
        {
            return IExecuteWithSignature<int>("getScrollX", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getScrollY()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetScrollY()
        {
            return IExecuteWithSignature<int>("getScrollY", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getTop()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTop()
        {
            return IExecuteWithSignature<int>("getTop", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetWidth()
        {
            return IExecuteWithSignature<int>("getWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getDrawableState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int[] GetDrawableState()
        {
            return IExecuteWithSignatureArray<int>("getDrawableState", "()[I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getStateDescription()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetStateDescription()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getStateDescription", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getPreferKeepClearRects()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Graphics.Rect> GetPreferKeepClearRects()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Graphics.Rect>>("getPreferKeepClearRects", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#cancelDragAndDrop()"/>
        /// </summary>
        public void CancelDragAndDrop()
        {
            IExecuteWithSignature("cancelDragAndDrop", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#cancelPendingInputEvents()"/>
        /// </summary>
        public void CancelPendingInputEvents()
        {
            IExecuteWithSignature("cancelPendingInputEvents", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#measure(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void Measure(int arg0, int arg1)
        {
            IExecute("measure", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#requestUnbufferedDispatch(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        public void RequestUnbufferedDispatch(Android.View.MotionEvent arg0)
        {
            IExecuteWithSignature("requestUnbufferedDispatch", "(Landroid/view/MotionEvent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#requestUnbufferedDispatch(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void RequestUnbufferedDispatch(int arg0)
        {
            IExecuteWithSignature("requestUnbufferedDispatch", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg3"><see cref="Android.Content.Res.TypedArray"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public void SaveAttributeDataForStyleable(Android.Content.Context arg0, int[] arg1, Android.Util.AttributeSet arg2, Android.Content.Res.TypedArray arg3, int arg4, int arg5)
        {
            IExecute("saveAttributeDataForStyleable", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setBottom(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetBottom(int arg0)
        {
            IExecuteWithSignature("setBottom", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setContentSensitivity(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetContentSensitivity(int arg0)
        {
            IExecuteWithSignature("setContentSensitivity", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setLeft(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetLeft(int arg0)
        {
            IExecuteWithSignature("setLeft", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setLeftTopRightBottom(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void SetLeftTopRightBottom(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("setLeftTopRightBottom", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setPreferKeepClear(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetPreferKeepClear(bool arg0)
        {
            IExecuteWithSignature("setPreferKeepClear", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setPreferKeepClearRects(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void SetPreferKeepClearRects(Java.Util.List<Android.Graphics.Rect> arg0)
        {
            IExecuteWithSignature("setPreferKeepClearRects", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setRevealOnFocusHint(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetRevealOnFocusHint(bool arg0)
        {
            IExecuteWithSignature("setRevealOnFocusHint", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setRight(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetRight(int arg0)
        {
            IExecuteWithSignature("setRight", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setScrollCaptureCallback(android.view.ScrollCaptureCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ScrollCaptureCallback"/></param>
        public void SetScrollCaptureCallback(Android.View.ScrollCaptureCallback arg0)
        {
            IExecuteWithSignature("setScrollCaptureCallback", "(Landroid/view/ScrollCaptureCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setTop(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetTop(int arg0)
        {
            IExecuteWithSignature("setTop", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setTransitionName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetTransitionName(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setTransitionName", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#updateDragShadow(android.view.View.DragShadowBuilder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.DragShadowBuilder"/></param>
        public void UpdateDragShadow(Android.View.View.DragShadowBuilder arg0)
        {
            IExecuteWithSignature("updateDragShadow", "(Landroid/view/View$DragShadowBuilder;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAlpha()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetAlpha()
        {
            return IExecuteWithSignature<float>("getAlpha", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getCameraDistance()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetCameraDistance()
        {
            return IExecuteWithSignature<float>("getCameraDistance", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getElevation()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetElevation()
        {
            return IExecuteWithSignature<float>("getElevation", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getFrameContentVelocity()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetFrameContentVelocity()
        {
            return IExecuteWithSignature<float>("getFrameContentVelocity", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getHandwritingBoundsOffsetBottom()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetHandwritingBoundsOffsetBottom()
        {
            return IExecuteWithSignature<float>("getHandwritingBoundsOffsetBottom", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getHandwritingBoundsOffsetLeft()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetHandwritingBoundsOffsetLeft()
        {
            return IExecuteWithSignature<float>("getHandwritingBoundsOffsetLeft", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getHandwritingBoundsOffsetRight()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetHandwritingBoundsOffsetRight()
        {
            return IExecuteWithSignature<float>("getHandwritingBoundsOffsetRight", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getHandwritingBoundsOffsetTop()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetHandwritingBoundsOffsetTop()
        {
            return IExecuteWithSignature<float>("getHandwritingBoundsOffsetTop", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getPivotX()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetPivotX()
        {
            return IExecuteWithSignature<float>("getPivotX", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getPivotY()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetPivotY()
        {
            return IExecuteWithSignature<float>("getPivotY", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getRequestedFrameRate()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetRequestedFrameRate()
        {
            return IExecuteWithSignature<float>("getRequestedFrameRate", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getRotation()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetRotation()
        {
            return IExecuteWithSignature<float>("getRotation", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getRotationX()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetRotationX()
        {
            return IExecuteWithSignature<float>("getRotationX", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getRotationY()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetRotationY()
        {
            return IExecuteWithSignature<float>("getRotationY", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getScaleX()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetScaleX()
        {
            return IExecuteWithSignature<float>("getScaleX", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getScaleY()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetScaleY()
        {
            return IExecuteWithSignature<float>("getScaleY", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getTransitionAlpha()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetTransitionAlpha()
        {
            return IExecuteWithSignature<float>("getTransitionAlpha", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getTranslationX()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetTranslationX()
        {
            return IExecuteWithSignature<float>("getTranslationX", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getTranslationY()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetTranslationY()
        {
            return IExecuteWithSignature<float>("getTranslationY", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getTranslationZ()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetTranslationZ()
        {
            return IExecuteWithSignature<float>("getTranslationZ", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getX()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetX()
        {
            return IExecuteWithSignature<float>("getX", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getY()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetY()
        {
            return IExecuteWithSignature<float>("getY", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getZ()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetZ()
        {
            return IExecuteWithSignature<float>("getZ", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAccessibilityLiveRegion()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAccessibilityLiveRegion()
        {
            return IExecuteWithSignature<int>("getAccessibilityLiveRegion", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAccessibilityTraversalAfter()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAccessibilityTraversalAfter()
        {
            return IExecuteWithSignature<int>("getAccessibilityTraversalAfter", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAccessibilityTraversalBefore()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAccessibilityTraversalBefore()
        {
            return IExecuteWithSignature<int>("getAccessibilityTraversalBefore", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAutofillType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAutofillType()
        {
            return IExecuteWithSignature<int>("getAutofillType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getBaseline()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetBaseline()
        {
            return IExecuteWithSignature<int>("getBaseline", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getDrawingCacheBackgroundColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetDrawingCacheBackgroundColor()
        {
            return IExecuteWithSignature<int>("getDrawingCacheBackgroundColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getDrawingCacheQuality()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetDrawingCacheQuality()
        {
            return IExecuteWithSignature<int>("getDrawingCacheQuality", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getExplicitStyle()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetExplicitStyle()
        {
            return IExecuteWithSignature<int>("getExplicitStyle", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getFocusable()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFocusable()
        {
            return IExecuteWithSignature<int>("getFocusable", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getForegroundGravity()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetForegroundGravity()
        {
            return IExecuteWithSignature<int>("getForegroundGravity", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getHandwritingDelegateFlags()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHandwritingDelegateFlags()
        {
            return IExecuteWithSignature<int>("getHandwritingDelegateFlags", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getHorizontalFadingEdgeLength()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetHorizontalFadingEdgeLength()
        {
            return IExecuteWithSignature<int>("getHorizontalFadingEdgeLength", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetId()
        {
            return IExecuteWithSignature<int>("getId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getImportantForAccessibility()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetImportantForAccessibility()
        {
            return IExecuteWithSignature<int>("getImportantForAccessibility", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getImportantForAutofill()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetImportantForAutofill()
        {
            return IExecuteWithSignature<int>("getImportantForAutofill", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getImportantForContentCapture()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetImportantForContentCapture()
        {
            return IExecuteWithSignature<int>("getImportantForContentCapture", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getLabelFor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLabelFor()
        {
            return IExecuteWithSignature<int>("getLabelFor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getLayerType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLayerType()
        {
            return IExecuteWithSignature<int>("getLayerType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getLayoutDirection()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLayoutDirection()
        {
            return IExecuteWithSignature<int>("getLayoutDirection", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getMinimumHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMinimumHeight()
        {
            return IExecuteWithSignature<int>("getMinimumHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getMinimumWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMinimumWidth()
        {
            return IExecuteWithSignature<int>("getMinimumWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getNextClusterForwardId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNextClusterForwardId()
        {
            return IExecuteWithSignature<int>("getNextClusterForwardId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getNextFocusDownId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNextFocusDownId()
        {
            return IExecuteWithSignature<int>("getNextFocusDownId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getNextFocusForwardId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNextFocusForwardId()
        {
            return IExecuteWithSignature<int>("getNextFocusForwardId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getNextFocusLeftId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNextFocusLeftId()
        {
            return IExecuteWithSignature<int>("getNextFocusLeftId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getNextFocusRightId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNextFocusRightId()
        {
            return IExecuteWithSignature<int>("getNextFocusRightId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getNextFocusUpId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNextFocusUpId()
        {
            return IExecuteWithSignature<int>("getNextFocusUpId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getOutlineAmbientShadowColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetOutlineAmbientShadowColor()
        {
            return IExecuteWithSignature<int>("getOutlineAmbientShadowColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getOutlineSpotShadowColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetOutlineSpotShadowColor()
        {
            return IExecuteWithSignature<int>("getOutlineSpotShadowColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getOverScrollMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetOverScrollMode()
        {
            return IExecuteWithSignature<int>("getOverScrollMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getPaddingBottom()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPaddingBottom()
        {
            return IExecuteWithSignature<int>("getPaddingBottom", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getPaddingEnd()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPaddingEnd()
        {
            return IExecuteWithSignature<int>("getPaddingEnd", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getPaddingLeft()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPaddingLeft()
        {
            return IExecuteWithSignature<int>("getPaddingLeft", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getPaddingRight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPaddingRight()
        {
            return IExecuteWithSignature<int>("getPaddingRight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getPaddingStart()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPaddingStart()
        {
            return IExecuteWithSignature<int>("getPaddingStart", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getPaddingTop()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetPaddingTop()
        {
            return IExecuteWithSignature<int>("getPaddingTop", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getScrollBarDefaultDelayBeforeFade()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetScrollBarDefaultDelayBeforeFade()
        {
            return IExecuteWithSignature<int>("getScrollBarDefaultDelayBeforeFade", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getScrollBarFadeDuration()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetScrollBarFadeDuration()
        {
            return IExecuteWithSignature<int>("getScrollBarFadeDuration", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getScrollBarSize()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetScrollBarSize()
        {
            return IExecuteWithSignature<int>("getScrollBarSize", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getScrollBarStyle()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetScrollBarStyle()
        {
            return IExecuteWithSignature<int>("getScrollBarStyle", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getScrollCaptureHint()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetScrollCaptureHint()
        {
            return IExecuteWithSignature<int>("getScrollCaptureHint", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getScrollIndicators()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetScrollIndicators()
        {
            return IExecuteWithSignature<int>("getScrollIndicators", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getSolidColor()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSolidColor()
        {
            return IExecuteWithSignature<int>("getSolidColor", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getSourceLayoutResId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSourceLayoutResId()
        {
            return IExecuteWithSignature<int>("getSourceLayoutResId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getSystemUiVisibility()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetSystemUiVisibility()
        {
            return IExecuteWithSignature<int>("getSystemUiVisibility", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getTextAlignment()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTextAlignment()
        {
            return IExecuteWithSignature<int>("getTextAlignment", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getTextDirection()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTextDirection()
        {
            return IExecuteWithSignature<int>("getTextDirection", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getVerticalFadingEdgeLength()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVerticalFadingEdgeLength()
        {
            return IExecuteWithSignature<int>("getVerticalFadingEdgeLength", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getVerticalScrollbarPosition()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVerticalScrollbarPosition()
        {
            return IExecuteWithSignature<int>("getVerticalScrollbarPosition", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getVerticalScrollbarWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVerticalScrollbarWidth()
        {
            return IExecuteWithSignature<int>("getVerticalScrollbarWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getVisibility()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetVisibility()
        {
            return IExecuteWithSignature<int>("getVisibility", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getWindowSystemUiVisibility()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetWindowSystemUiVisibility()
        {
            return IExecuteWithSignature<int>("getWindowSystemUiVisibility", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getWindowVisibility()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetWindowVisibility()
        {
            return IExecuteWithSignature<int>("getWindowVisibility", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAttributeResolutionStack(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int[] GetAttributeResolutionStack(int arg0)
        {
            return IExecuteWithSignatureArray<int>("getAttributeResolutionStack", "(I)[I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAccessibilityClassName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetAccessibilityClassName()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getAccessibilityClassName", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAccessibilityPaneTitle()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetAccessibilityPaneTitle()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getAccessibilityPaneTitle", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getContentDescription()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetContentDescription()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getContentDescription", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getTooltipText()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetTooltipText()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getTooltipText", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getTag()"/>
        /// </summary>
        /// <returns><see cref="object"/></returns>
        public object GetTag()
        {
            return IExecuteWithSignature("getTag", "()Ljava/lang/Object;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getTag(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetTag(int arg0)
        {
            return IExecuteWithSignature("getTag", "(I)Ljava/lang/Object;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getHandwritingDelegatorCallback()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.Runnable"/></returns>
        public Java.Lang.Runnable GetHandwritingDelegatorCallback()
        {
            return IExecuteWithSignature<Java.Lang.Runnable>("getHandwritingDelegatorCallback", "()Ljava/lang/Runnable;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAllowedHandwritingDelegatePackageName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetAllowedHandwritingDelegatePackageName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getAllowedHandwritingDelegatePackageName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAllowedHandwritingDelegatorPackageName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetAllowedHandwritingDelegatorPackageName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getAllowedHandwritingDelegatorPackageName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getTransitionName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetTransitionName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getTransitionName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAutofillHints()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String[] GetAutofillHints()
        {
            return IExecuteWithSignatureArray<Java.Lang.String>("getAutofillHints", "()[Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getReceiveContentMimeTypes()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String[] GetReceiveContentMimeTypes()
        {
            return IExecuteWithSignatureArray<Java.Lang.String>("getReceiveContentMimeTypes", "()[Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getFocusables(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.ArrayList"/></returns>
        public Java.Util.ArrayList<Android.View.View> GetFocusables(int arg0)
        {
            return IExecuteWithSignature<Java.Util.ArrayList<Android.View.View>>("getFocusables", "(I)Ljava/util/ArrayList;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getTouchables()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.ArrayList"/></returns>
        public Java.Util.ArrayList<Android.View.View> GetTouchables()
        {
            return IExecuteWithSignature<Java.Util.ArrayList<Android.View.View>>("getTouchables", "()Ljava/util/ArrayList;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getSystemGestureExclusionRects()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Graphics.Rect> GetSystemGestureExclusionRects()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Graphics.Rect>>("getSystemGestureExclusionRects", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getAttributeSourceResourceMap()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<Java.Lang.Integer, Java.Lang.Integer> GetAttributeSourceResourceMap()
        {
            return IExecuteWithSignature<Java.Util.Map<Java.Lang.Integer, Java.Lang.Integer>>("getAttributeSourceResourceMap", "()Ljava/util/Map;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getDrawingTime()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetDrawingTime()
        {
            return IExecuteWithSignature<long>("getDrawingTime", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getUniqueDrawingId()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetUniqueDrawingId()
        {
            return IExecuteWithSignature<long>("getUniqueDrawingId", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#addChildrenForAccessibility(java.util.ArrayList)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.ArrayList"/></param>
        public void AddChildrenForAccessibility(Java.Util.ArrayList<Android.View.View> arg0)
        {
            IExecuteWithSignature("addChildrenForAccessibility", "(Ljava/util/ArrayList;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        public void AddExtraDataToAccessibilityNodeInfo(Android.View.Accessibility.AccessibilityNodeInfo arg0, Java.Lang.String arg1, Android.Os.Bundle arg2)
        {
            IExecute("addExtraDataToAccessibilityNodeInfo", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#addFocusables(java.util.ArrayList,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.ArrayList"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void AddFocusables(Java.Util.ArrayList<Android.View.View> arg0, int arg1, int arg2)
        {
            IExecute("addFocusables", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#addFocusables(java.util.ArrayList,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.ArrayList"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void AddFocusables(Java.Util.ArrayList<Android.View.View> arg0, int arg1)
        {
            IExecute("addFocusables", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#addKeyboardNavigationClusters(java.util.Collection,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void AddKeyboardNavigationClusters(Java.Util.Collection<Android.View.View> arg0, int arg1)
        {
            IExecute("addKeyboardNavigationClusters", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#addOnAttachStateChangeListener(android.view.View.OnAttachStateChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnAttachStateChangeListener"/></param>
        public void AddOnAttachStateChangeListener(Android.View.View.OnAttachStateChangeListener arg0)
        {
            IExecuteWithSignature("addOnAttachStateChangeListener", "(Landroid/view/View$OnAttachStateChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#addOnLayoutChangeListener(android.view.View.OnLayoutChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnLayoutChangeListener"/></param>
        public void AddOnLayoutChangeListener(Android.View.View.OnLayoutChangeListener arg0)
        {
            IExecuteWithSignature("addOnLayoutChangeListener", "(Landroid/view/View$OnLayoutChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#addOnUnhandledKeyEventListener(android.view.View.OnUnhandledKeyEventListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnUnhandledKeyEventListener"/></param>
        public void AddOnUnhandledKeyEventListener(Android.View.View.OnUnhandledKeyEventListener arg0)
        {
            IExecuteWithSignature("addOnUnhandledKeyEventListener", "(Landroid/view/View$OnUnhandledKeyEventListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#addTouchables(java.util.ArrayList)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.ArrayList"/></param>
        public void AddTouchables(Java.Util.ArrayList<Android.View.View> arg0)
        {
            IExecuteWithSignature("addTouchables", "(Ljava/util/ArrayList;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#announceForAccessibility(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void AnnounceForAccessibility(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("announceForAccessibility", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#autofill(android.util.SparseArray)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.SparseArray"/></param>
        public void Autofill(Android.Util.SparseArray<Android.View.Autofill.AutofillValue> arg0)
        {
            IExecuteWithSignature("autofill", "(Landroid/util/SparseArray;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#autofill(android.view.autofill.AutofillValue)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Autofill.AutofillValue"/></param>
        public void Autofill(Android.View.Autofill.AutofillValue arg0)
        {
            IExecuteWithSignature("autofill", "(Landroid/view/autofill/AutofillValue;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#bringToFront()"/>
        /// </summary>
        public void BringToFront()
        {
            IExecuteWithSignature("bringToFront", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#buildDrawingCache()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void BuildDrawingCache()
        {
            IExecuteWithSignature("buildDrawingCache", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#buildDrawingCache(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void BuildDrawingCache(bool arg0)
        {
            IExecuteWithSignature("buildDrawingCache", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#buildLayer()"/>
        /// </summary>
        public void BuildLayer()
        {
            IExecuteWithSignature("buildLayer", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#cancelLongPress()"/>
        /// </summary>
        public void CancelLongPress()
        {
            IExecuteWithSignature("cancelLongPress", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#clearAnimation()"/>
        /// </summary>
        public void ClearAnimation()
        {
            IExecuteWithSignature("clearAnimation", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#clearFocus()"/>
        /// </summary>
        public void ClearFocus()
        {
            IExecuteWithSignature("clearFocus", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#clearPendingCredentialRequest()"/>
        /// </summary>
        public void ClearPendingCredentialRequest()
        {
            IExecuteWithSignature("clearPendingCredentialRequest", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#clearViewTranslationCallback()"/>
        /// </summary>
        public void ClearViewTranslationCallback()
        {
            IExecuteWithSignature("clearViewTranslationCallback", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#computeScroll()"/>
        /// </summary>
        public void ComputeScroll()
        {
            IExecuteWithSignature("computeScroll", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#createContextMenu(android.view.ContextMenu)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ContextMenu"/></param>
        public void CreateContextMenu(Android.View.ContextMenu arg0)
        {
            IExecuteWithSignature("createContextMenu", "(Landroid/view/ContextMenu;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#destroyDrawingCache()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void DestroyDrawingCache()
        {
            IExecuteWithSignature("destroyDrawingCache", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchConfigurationChanged(android.content.res.Configuration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Configuration"/></param>
        public void DispatchConfigurationChanged(Android.Content.Res.Configuration arg0)
        {
            IExecuteWithSignature("dispatchConfigurationChanged", "(Landroid/content/res/Configuration;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchCreateViewTranslationRequest(java.util.Map,int[],android.view.translation.TranslationCapability,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.View.Translation.TranslationCapability"/></param>
        /// <param name="arg3"><see cref="Java.Util.List"/></param>
        public void DispatchCreateViewTranslationRequest(Java.Util.Map<Android.View.Autofill.AutofillId, long[]> arg0, int[] arg1, Android.View.Translation.TranslationCapability arg2, Java.Util.List<Android.View.Translation.ViewTranslationRequest> arg3)
        {
            IExecute("dispatchCreateViewTranslationRequest", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchDisplayHint(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void DispatchDisplayHint(int arg0)
        {
            IExecuteWithSignature("dispatchDisplayHint", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchDrawableHotspotChanged(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void DispatchDrawableHotspotChanged(float arg0, float arg1)
        {
            IExecute("dispatchDrawableHotspotChanged", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchFinishTemporaryDetach()"/>
        /// </summary>
        public void DispatchFinishTemporaryDetach()
        {
            IExecuteWithSignature("dispatchFinishTemporaryDetach", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchPointerCaptureChanged(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void DispatchPointerCaptureChanged(bool arg0)
        {
            IExecuteWithSignature("dispatchPointerCaptureChanged", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchProvideAutofillStructure(android.view.ViewStructure,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewStructure"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void DispatchProvideAutofillStructure(Android.View.ViewStructure arg0, int arg1)
        {
            IExecute("dispatchProvideAutofillStructure", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchProvideStructure(android.view.ViewStructure)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewStructure"/></param>
        public void DispatchProvideStructure(Android.View.ViewStructure arg0)
        {
            IExecuteWithSignature("dispatchProvideStructure", "(Landroid/view/ViewStructure;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Point"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.Consumer"/></param>
        public void DispatchScrollCaptureSearch(Android.Graphics.Rect arg0, Android.Graphics.Point arg1, Java.Util.Function.Consumer<Android.View.ScrollCaptureTarget> arg2)
        {
            IExecute("dispatchScrollCaptureSearch", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchStartTemporaryDetach()"/>
        /// </summary>
        public void DispatchStartTemporaryDetach()
        {
            IExecuteWithSignature("dispatchStartTemporaryDetach", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchSystemUiVisibilityChanged(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void DispatchSystemUiVisibilityChanged(int arg0)
        {
            IExecuteWithSignature("dispatchSystemUiVisibilityChanged", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchWindowFocusChanged(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void DispatchWindowFocusChanged(bool arg0)
        {
            IExecuteWithSignature("dispatchWindowFocusChanged", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchWindowInsetsAnimationEnd(android.view.WindowInsetsAnimation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsetsAnimation"/></param>
        public void DispatchWindowInsetsAnimationEnd(Android.View.WindowInsetsAnimation arg0)
        {
            IExecuteWithSignature("dispatchWindowInsetsAnimationEnd", "(Landroid/view/WindowInsetsAnimation;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchWindowInsetsAnimationPrepare(android.view.WindowInsetsAnimation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsetsAnimation"/></param>
        public void DispatchWindowInsetsAnimationPrepare(Android.View.WindowInsetsAnimation arg0)
        {
            IExecuteWithSignature("dispatchWindowInsetsAnimationPrepare", "(Landroid/view/WindowInsetsAnimation;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchWindowSystemUiVisiblityChanged(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void DispatchWindowSystemUiVisiblityChanged(int arg0)
        {
            IExecuteWithSignature("dispatchWindowSystemUiVisiblityChanged", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#dispatchWindowVisibilityChanged(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void DispatchWindowVisibilityChanged(int arg0)
        {
            IExecuteWithSignature("dispatchWindowVisibilityChanged", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#draw(android.graphics.Canvas)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Canvas"/></param>
        public void Draw(Android.Graphics.Canvas arg0)
        {
            IExecuteWithSignature("draw", "(Landroid/graphics/Canvas;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#drawableHotspotChanged(float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        public void DrawableHotspotChanged(float arg0, float arg1)
        {
            IExecute("drawableHotspotChanged", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.ArrayList"/></param>
        /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void FindViewsWithText(Java.Util.ArrayList<Android.View.View> arg0, Java.Lang.CharSequence arg1, int arg2)
        {
            IExecute("findViewsWithText", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#forceHasOverlappingRendering(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void ForceHasOverlappingRendering(bool arg0)
        {
            IExecuteWithSignature("forceHasOverlappingRendering", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#forceLayout()"/>
        /// </summary>
        public void ForceLayout()
        {
            IExecuteWithSignature("forceLayout", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#generateDisplayHash(java.lang.String,android.graphics.Rect,java.util.concurrent.Executor,android.view.displayhash.DisplayHashResultCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg3"><see cref="Android.View.Displayhash.DisplayHashResultCallback"/></param>
        public void GenerateDisplayHash(Java.Lang.String arg0, Android.Graphics.Rect arg1, Java.Util.Concurrent.Executor arg2, Android.View.Displayhash.DisplayHashResultCallback arg3)
        {
            IExecute("generateDisplayHash", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getDrawingRect(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public void GetDrawingRect(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("getDrawingRect", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getFocusedRect(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public void GetFocusedRect(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("getFocusedRect", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getHitRect(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public void GetHitRect(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("getHitRect", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getLocationInSurface(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void GetLocationInSurface(int[] arg0)
        {
            IExecuteWithSignature("getLocationInSurface", "([I)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getLocationInWindow(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void GetLocationInWindow(int[] arg0)
        {
            IExecuteWithSignature("getLocationInWindow", "([I)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getLocationOnScreen(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void GetLocationOnScreen(int[] arg0)
        {
            IExecuteWithSignature("getLocationOnScreen", "([I)V", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#getWindowVisibleDisplayFrame(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public void GetWindowVisibleDisplayFrame(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("getWindowVisibleDisplayFrame", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#invalidate()"/>
        /// </summary>
        public void Invalidate()
        {
            IExecuteWithSignature("invalidate", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#invalidate(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        [global::System.Obsolete()]
        public void Invalidate(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("invalidate", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#invalidate(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void Invalidate(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("invalidate", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#invalidateDrawable(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void InvalidateDrawable(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("invalidateDrawable", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#invalidateOutline()"/>
        /// </summary>
        public void InvalidateOutline()
        {
            IExecuteWithSignature("invalidateOutline", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#jumpDrawablesToCurrentState()"/>
        /// </summary>
        public void JumpDrawablesToCurrentState()
        {
            IExecuteWithSignature("jumpDrawablesToCurrentState", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#layout(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void Layout(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("layout", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#offsetLeftAndRight(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OffsetLeftAndRight(int arg0)
        {
            IExecuteWithSignature("offsetLeftAndRight", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#offsetTopAndBottom(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OffsetTopAndBottom(int arg0)
        {
            IExecuteWithSignature("offsetTopAndBottom", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onCancelPendingInputEvents()"/>
        /// </summary>
        public void OnCancelPendingInputEvents()
        {
            IExecuteWithSignature("onCancelPendingInputEvents", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onCreateViewTranslationRequest(int[],java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void OnCreateViewTranslationRequest(int[] arg0, Java.Util.Function.Consumer<Android.View.Translation.ViewTranslationRequest> arg1)
        {
            IExecute("onCreateViewTranslationRequest", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onCreateVirtualViewTranslationRequests(long[],int[],java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.Consumer"/></param>
        public void OnCreateVirtualViewTranslationRequests(long[] arg0, int[] arg1, Java.Util.Function.Consumer<Android.View.Translation.ViewTranslationRequest> arg2)
        {
            IExecute("onCreateVirtualViewTranslationRequests", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onDrawForeground(android.graphics.Canvas)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Canvas"/></param>
        public void OnDrawForeground(Android.Graphics.Canvas arg0)
        {
            IExecuteWithSignature("onDrawForeground", "(Landroid/graphics/Canvas;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onFinishTemporaryDetach()"/>
        /// </summary>
        public void OnFinishTemporaryDetach()
        {
            IExecuteWithSignature("onFinishTemporaryDetach", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onHoverChanged(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void OnHoverChanged(bool arg0)
        {
            IExecuteWithSignature("onHoverChanged", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityEvent"/></param>
        public void OnInitializeAccessibilityEvent(Android.View.Accessibility.AccessibilityEvent arg0)
        {
            IExecuteWithSignature("onInitializeAccessibilityEvent", "(Landroid/view/accessibility/AccessibilityEvent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></param>
        public void OnInitializeAccessibilityNodeInfo(Android.View.Accessibility.AccessibilityNodeInfo arg0)
        {
            IExecuteWithSignature("onInitializeAccessibilityNodeInfo", "(Landroid/view/accessibility/AccessibilityNodeInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onPointerCaptureChange(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void OnPointerCaptureChange(bool arg0)
        {
            IExecuteWithSignature("onPointerCaptureChange", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityEvent"/></param>
        public void OnPopulateAccessibilityEvent(Android.View.Accessibility.AccessibilityEvent arg0)
        {
            IExecuteWithSignature("onPopulateAccessibilityEvent", "(Landroid/view/accessibility/AccessibilityEvent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onProvideAutofillStructure(android.view.ViewStructure,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewStructure"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void OnProvideAutofillStructure(Android.View.ViewStructure arg0, int arg1)
        {
            IExecute("onProvideAutofillStructure", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onProvideAutofillVirtualStructure(android.view.ViewStructure,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewStructure"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void OnProvideAutofillVirtualStructure(Android.View.ViewStructure arg0, int arg1)
        {
            IExecute("onProvideAutofillVirtualStructure", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onProvideContentCaptureStructure(android.view.ViewStructure,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewStructure"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void OnProvideContentCaptureStructure(Android.View.ViewStructure arg0, int arg1)
        {
            IExecute("onProvideContentCaptureStructure", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onProvideStructure(android.view.ViewStructure)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewStructure"/></param>
        public void OnProvideStructure(Android.View.ViewStructure arg0)
        {
            IExecuteWithSignature("onProvideStructure", "(Landroid/view/ViewStructure;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onProvideVirtualStructure(android.view.ViewStructure)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewStructure"/></param>
        public void OnProvideVirtualStructure(Android.View.ViewStructure arg0)
        {
            IExecuteWithSignature("onProvideVirtualStructure", "(Landroid/view/ViewStructure;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onRtlPropertiesChanged(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OnRtlPropertiesChanged(int arg0)
        {
            IExecuteWithSignature("onRtlPropertiesChanged", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onScreenStateChanged(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OnScreenStateChanged(int arg0)
        {
            IExecuteWithSignature("onScreenStateChanged", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Point"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.Consumer"/></param>
        public void OnScrollCaptureSearch(Android.Graphics.Rect arg0, Android.Graphics.Point arg1, Java.Util.Function.Consumer<Android.View.ScrollCaptureTarget> arg2)
        {
            IExecute("onScrollCaptureSearch", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onStartTemporaryDetach()"/>
        /// </summary>
        public void OnStartTemporaryDetach()
        {
            IExecuteWithSignature("onStartTemporaryDetach", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onViewTranslationResponse(android.view.translation.ViewTranslationResponse)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Translation.ViewTranslationResponse"/></param>
        public void OnViewTranslationResponse(Android.View.Translation.ViewTranslationResponse arg0)
        {
            IExecuteWithSignature("onViewTranslationResponse", "(Landroid/view/translation/ViewTranslationResponse;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onVirtualViewTranslationResponses(android.util.LongSparseArray)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.LongSparseArray"/></param>
        public void OnVirtualViewTranslationResponses(Android.Util.LongSparseArray<Android.View.Translation.ViewTranslationResponse> arg0)
        {
            IExecuteWithSignature("onVirtualViewTranslationResponses", "(Landroid/util/LongSparseArray;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onVisibilityAggregated(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void OnVisibilityAggregated(bool arg0)
        {
            IExecuteWithSignature("onVisibilityAggregated", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onWindowFocusChanged(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void OnWindowFocusChanged(bool arg0)
        {
            IExecuteWithSignature("onWindowFocusChanged", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#onWindowSystemUiVisibilityChanged(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void OnWindowSystemUiVisibilityChanged(int arg0)
        {
            IExecuteWithSignature("onWindowSystemUiVisibilityChanged", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#playSoundEffect(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void PlaySoundEffect(int arg0)
        {
            IExecuteWithSignature("playSoundEffect", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#postInvalidate()"/>
        /// </summary>
        public void PostInvalidate()
        {
            IExecuteWithSignature("postInvalidate", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#postInvalidate(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void PostInvalidate(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("postInvalidate", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#postInvalidateDelayed(long,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public void PostInvalidateDelayed(long arg0, int arg1, int arg2, int arg3, int arg4)
        {
            IExecute("postInvalidateDelayed", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#postInvalidateDelayed(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void PostInvalidateDelayed(long arg0)
        {
            IExecuteWithSignature("postInvalidateDelayed", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#postInvalidateOnAnimation()"/>
        /// </summary>
        public void PostInvalidateOnAnimation()
        {
            IExecuteWithSignature("postInvalidateOnAnimation", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#postInvalidateOnAnimation(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void PostInvalidateOnAnimation(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("postInvalidateOnAnimation", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#postOnAnimation(java.lang.Runnable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Runnable"/></param>
        public void PostOnAnimation(Java.Lang.Runnable arg0)
        {
            IExecuteWithSignature("postOnAnimation", "(Ljava/lang/Runnable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#postOnAnimationDelayed(java.lang.Runnable,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Runnable"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void PostOnAnimationDelayed(Java.Lang.Runnable arg0, long arg1)
        {
            IExecute("postOnAnimationDelayed", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#refreshDrawableState()"/>
        /// </summary>
        public void RefreshDrawableState()
        {
            IExecuteWithSignature("refreshDrawableState", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#releasePointerCapture()"/>
        /// </summary>
        public void ReleasePointerCapture()
        {
            IExecuteWithSignature("releasePointerCapture", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#removeOnAttachStateChangeListener(android.view.View.OnAttachStateChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnAttachStateChangeListener"/></param>
        public void RemoveOnAttachStateChangeListener(Android.View.View.OnAttachStateChangeListener arg0)
        {
            IExecuteWithSignature("removeOnAttachStateChangeListener", "(Landroid/view/View$OnAttachStateChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#removeOnLayoutChangeListener(android.view.View.OnLayoutChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnLayoutChangeListener"/></param>
        public void RemoveOnLayoutChangeListener(Android.View.View.OnLayoutChangeListener arg0)
        {
            IExecuteWithSignature("removeOnLayoutChangeListener", "(Landroid/view/View$OnLayoutChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#removeOnUnhandledKeyEventListener(android.view.View.OnUnhandledKeyEventListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnUnhandledKeyEventListener"/></param>
        public void RemoveOnUnhandledKeyEventListener(Android.View.View.OnUnhandledKeyEventListener arg0)
        {
            IExecuteWithSignature("removeOnUnhandledKeyEventListener", "(Landroid/view/View$OnUnhandledKeyEventListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#requestApplyInsets()"/>
        /// </summary>
        public void RequestApplyInsets()
        {
            IExecuteWithSignature("requestApplyInsets", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#requestFitSystemWindows()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void RequestFitSystemWindows()
        {
            IExecuteWithSignature("requestFitSystemWindows", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#requestLayout()"/>
        /// </summary>
        public void RequestLayout()
        {
            IExecuteWithSignature("requestLayout", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#requestPointerCapture()"/>
        /// </summary>
        public void RequestPointerCapture()
        {
            IExecuteWithSignature("requestPointerCapture", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#resetPivot()"/>
        /// </summary>
        public void ResetPivot()
        {
            IExecuteWithSignature("resetPivot", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#restoreHierarchyState(android.util.SparseArray)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.SparseArray"/></param>
        public void RestoreHierarchyState(Android.Util.SparseArray<Android.Os.Parcelable> arg0)
        {
            IExecuteWithSignature("restoreHierarchyState", "(Landroid/util/SparseArray;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#saveHierarchyState(android.util.SparseArray)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.SparseArray"/></param>
        public void SaveHierarchyState(Android.Util.SparseArray<Android.Os.Parcelable> arg0)
        {
            IExecuteWithSignature("saveHierarchyState", "(Landroid/util/SparseArray;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Runnable"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        public void ScheduleDrawable(Android.Graphics.Drawable.Drawable arg0, Java.Lang.Runnable arg1, long arg2)
        {
            IExecute("scheduleDrawable", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#scrollBy(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void ScrollBy(int arg0, int arg1)
        {
            IExecute("scrollBy", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#scrollTo(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void ScrollTo(int arg0, int arg1)
        {
            IExecute("scrollTo", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#sendAccessibilityEvent(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SendAccessibilityEvent(int arg0)
        {
            IExecuteWithSignature("sendAccessibilityEvent", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityEvent"/></param>
        public void SendAccessibilityEventUnchecked(Android.View.Accessibility.AccessibilityEvent arg0)
        {
            IExecuteWithSignature("sendAccessibilityEventUnchecked", "(Landroid/view/accessibility/AccessibilityEvent;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setAccessibilityDataSensitive(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAccessibilityDataSensitive(int arg0)
        {
            IExecuteWithSignature("setAccessibilityDataSensitive", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setAccessibilityDelegate(android.view.View.AccessibilityDelegate)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.AccessibilityDelegate"/></param>
        public void SetAccessibilityDelegate(Android.View.View.AccessibilityDelegate arg0)
        {
            IExecuteWithSignature("setAccessibilityDelegate", "(Landroid/view/View$AccessibilityDelegate;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setAccessibilityHeading(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAccessibilityHeading(bool arg0)
        {
            IExecuteWithSignature("setAccessibilityHeading", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setAccessibilityLiveRegion(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAccessibilityLiveRegion(int arg0)
        {
            IExecuteWithSignature("setAccessibilityLiveRegion", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setAccessibilityPaneTitle(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetAccessibilityPaneTitle(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setAccessibilityPaneTitle", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setAccessibilityTraversalAfter(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAccessibilityTraversalAfter(int arg0)
        {
            IExecuteWithSignature("setAccessibilityTraversalAfter", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setAccessibilityTraversalBefore(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAccessibilityTraversalBefore(int arg0)
        {
            IExecuteWithSignature("setAccessibilityTraversalBefore", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setActivated(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetActivated(bool arg0)
        {
            IExecuteWithSignature("setActivated", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setAllowClickWhenDisabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAllowClickWhenDisabled(bool arg0)
        {
            IExecuteWithSignature("setAllowClickWhenDisabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setAllowedHandwritingDelegatePackage(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetAllowedHandwritingDelegatePackage(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setAllowedHandwritingDelegatePackage", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setAllowedHandwritingDelegatorPackage(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetAllowedHandwritingDelegatorPackage(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setAllowedHandwritingDelegatorPackage", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setAlpha(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetAlpha(float arg0)
        {
            IExecuteWithSignature("setAlpha", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setAnimation(android.view.animation.Animation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Animation.Animation"/></param>
        public void SetAnimation(Android.View.Animation.Animation arg0)
        {
            IExecuteWithSignature("setAnimation", "(Landroid/view/animation/Animation;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setAnimationMatrix(android.graphics.Matrix)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Matrix"/></param>
        public void SetAnimationMatrix(Android.Graphics.Matrix arg0)
        {
            IExecuteWithSignature("setAnimationMatrix", "(Landroid/graphics/Matrix;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setAutofillHints(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetAutofillHints(params Java.Lang.String[] arg0)
        {
            if (arg0.Length == 0) IExecuteWithSignature("setAutofillHints", "([Ljava/lang/String;)V"); else IExecuteWithSignature("setAutofillHints", "([Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setAutofillId(android.view.autofill.AutofillId)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Autofill.AutofillId"/></param>
        public void SetAutofillId(Android.View.Autofill.AutofillId arg0)
        {
            IExecuteWithSignature("setAutofillId", "(Landroid/view/autofill/AutofillId;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setAutoHandwritingEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAutoHandwritingEnabled(bool arg0)
        {
            IExecuteWithSignature("setAutoHandwritingEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setBackground(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetBackground(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setBackground", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setBackgroundColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetBackgroundColor(int arg0)
        {
            IExecuteWithSignature("setBackgroundColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setBackgroundDrawable(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        [global::System.Obsolete()]
        public void SetBackgroundDrawable(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setBackgroundDrawable", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setBackgroundResource(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetBackgroundResource(int arg0)
        {
            IExecuteWithSignature("setBackgroundResource", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setBackgroundTintBlendMode(android.graphics.BlendMode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.BlendMode"/></param>
        public void SetBackgroundTintBlendMode(Android.Graphics.BlendMode arg0)
        {
            IExecuteWithSignature("setBackgroundTintBlendMode", "(Landroid/graphics/BlendMode;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setBackgroundTintList(android.content.res.ColorStateList)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.ColorStateList"/></param>
        public void SetBackgroundTintList(Android.Content.Res.ColorStateList arg0)
        {
            IExecuteWithSignature("setBackgroundTintList", "(Landroid/content/res/ColorStateList;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setBackgroundTintMode(android.graphics.PorterDuff.Mode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.PorterDuff.Mode"/></param>
        public void SetBackgroundTintMode(Android.Graphics.PorterDuff.Mode arg0)
        {
            IExecuteWithSignature("setBackgroundTintMode", "(Landroid/graphics/PorterDuff$Mode;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setCameraDistance(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetCameraDistance(float arg0)
        {
            IExecuteWithSignature("setCameraDistance", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setClickable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetClickable(bool arg0)
        {
            IExecuteWithSignature("setClickable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setClipBounds(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public void SetClipBounds(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("setClipBounds", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setClipToOutline(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetClipToOutline(bool arg0)
        {
            IExecuteWithSignature("setClipToOutline", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setContentCaptureSession(android.view.contentcapture.ContentCaptureSession)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Contentcapture.ContentCaptureSession"/></param>
        public void SetContentCaptureSession(Android.View.Contentcapture.ContentCaptureSession arg0)
        {
            IExecuteWithSignature("setContentCaptureSession", "(Landroid/view/contentcapture/ContentCaptureSession;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setContentDescription(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetContentDescription(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setContentDescription", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setContextClickable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetContextClickable(bool arg0)
        {
            IExecuteWithSignature("setContextClickable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setDefaultFocusHighlightEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetDefaultFocusHighlightEnabled(bool arg0)
        {
            IExecuteWithSignature("setDefaultFocusHighlightEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setDrawingCacheBackgroundColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetDrawingCacheBackgroundColor(int arg0)
        {
            IExecuteWithSignature("setDrawingCacheBackgroundColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setDrawingCacheEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetDrawingCacheEnabled(bool arg0)
        {
            IExecuteWithSignature("setDrawingCacheEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setDrawingCacheQuality(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetDrawingCacheQuality(int arg0)
        {
            IExecuteWithSignature("setDrawingCacheQuality", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setDuplicateParentStateEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetDuplicateParentStateEnabled(bool arg0)
        {
            IExecuteWithSignature("setDuplicateParentStateEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setElevation(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetElevation(float arg0)
        {
            IExecuteWithSignature("setElevation", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetEnabled(bool arg0)
        {
            IExecuteWithSignature("setEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setFadingEdgeLength(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetFadingEdgeLength(int arg0)
        {
            IExecuteWithSignature("setFadingEdgeLength", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setFilterTouchesWhenObscured(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFilterTouchesWhenObscured(bool arg0)
        {
            IExecuteWithSignature("setFilterTouchesWhenObscured", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setFitsSystemWindows(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFitsSystemWindows(bool arg0)
        {
            IExecuteWithSignature("setFitsSystemWindows", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setFocusable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFocusable(bool arg0)
        {
            IExecuteWithSignature("setFocusable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setFocusable(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetFocusable(int arg0)
        {
            IExecuteWithSignature("setFocusable", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setFocusableInTouchMode(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFocusableInTouchMode(bool arg0)
        {
            IExecuteWithSignature("setFocusableInTouchMode", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setFocusedByDefault(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFocusedByDefault(bool arg0)
        {
            IExecuteWithSignature("setFocusedByDefault", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setForceDarkAllowed(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetForceDarkAllowed(bool arg0)
        {
            IExecuteWithSignature("setForceDarkAllowed", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setForeground(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetForeground(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setForeground", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setForegroundGravity(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetForegroundGravity(int arg0)
        {
            IExecuteWithSignature("setForegroundGravity", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setForegroundTintBlendMode(android.graphics.BlendMode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.BlendMode"/></param>
        public void SetForegroundTintBlendMode(Android.Graphics.BlendMode arg0)
        {
            IExecuteWithSignature("setForegroundTintBlendMode", "(Landroid/graphics/BlendMode;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setForegroundTintList(android.content.res.ColorStateList)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.ColorStateList"/></param>
        public void SetForegroundTintList(Android.Content.Res.ColorStateList arg0)
        {
            IExecuteWithSignature("setForegroundTintList", "(Landroid/content/res/ColorStateList;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setForegroundTintMode(android.graphics.PorterDuff.Mode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.PorterDuff.Mode"/></param>
        public void SetForegroundTintMode(Android.Graphics.PorterDuff.Mode arg0)
        {
            IExecuteWithSignature("setForegroundTintMode", "(Landroid/graphics/PorterDuff$Mode;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setFrameContentVelocity(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetFrameContentVelocity(float arg0)
        {
            IExecuteWithSignature("setFrameContentVelocity", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setHandwritingBoundsOffsets(float,float,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="float"/></param>
        public void SetHandwritingBoundsOffsets(float arg0, float arg1, float arg2, float arg3)
        {
            IExecute("setHandwritingBoundsOffsets", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setHandwritingDelegateFlags(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetHandwritingDelegateFlags(int arg0)
        {
            IExecuteWithSignature("setHandwritingDelegateFlags", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setHandwritingDelegatorCallback(java.lang.Runnable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Runnable"/></param>
        public void SetHandwritingDelegatorCallback(Java.Lang.Runnable arg0)
        {
            IExecuteWithSignature("setHandwritingDelegatorCallback", "(Ljava/lang/Runnable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setHapticFeedbackEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetHapticFeedbackEnabled(bool arg0)
        {
            IExecuteWithSignature("setHapticFeedbackEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setHasTransientState(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetHasTransientState(bool arg0)
        {
            IExecuteWithSignature("setHasTransientState", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setHorizontalFadingEdgeEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetHorizontalFadingEdgeEnabled(bool arg0)
        {
            IExecuteWithSignature("setHorizontalFadingEdgeEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setHorizontalScrollBarEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetHorizontalScrollBarEnabled(bool arg0)
        {
            IExecuteWithSignature("setHorizontalScrollBarEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setHorizontalScrollbarThumbDrawable(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetHorizontalScrollbarThumbDrawable(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setHorizontalScrollbarThumbDrawable", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setHorizontalScrollbarTrackDrawable(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetHorizontalScrollbarTrackDrawable(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setHorizontalScrollbarTrackDrawable", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setHovered(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetHovered(bool arg0)
        {
            IExecuteWithSignature("setHovered", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setId(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetId(int arg0)
        {
            IExecuteWithSignature("setId", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setImportantForAccessibility(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetImportantForAccessibility(int arg0)
        {
            IExecuteWithSignature("setImportantForAccessibility", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setImportantForAutofill(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetImportantForAutofill(int arg0)
        {
            IExecuteWithSignature("setImportantForAutofill", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setImportantForContentCapture(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetImportantForContentCapture(int arg0)
        {
            IExecuteWithSignature("setImportantForContentCapture", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setIsCredential(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetIsCredential(bool arg0)
        {
            IExecuteWithSignature("setIsCredential", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setIsHandwritingDelegate(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetIsHandwritingDelegate(bool arg0)
        {
            IExecuteWithSignature("setIsHandwritingDelegate", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setKeepScreenOn(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetKeepScreenOn(bool arg0)
        {
            IExecuteWithSignature("setKeepScreenOn", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setKeyboardNavigationCluster(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetKeyboardNavigationCluster(bool arg0)
        {
            IExecuteWithSignature("setKeyboardNavigationCluster", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setLabelFor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetLabelFor(int arg0)
        {
            IExecuteWithSignature("setLabelFor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setLayerPaint(android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Paint"/></param>
        public void SetLayerPaint(Android.Graphics.Paint arg0)
        {
            IExecuteWithSignature("setLayerPaint", "(Landroid/graphics/Paint;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setLayerType(int,android.graphics.Paint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Paint"/></param>
        public void SetLayerType(int arg0, Android.Graphics.Paint arg1)
        {
            IExecute("setLayerType", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setLayoutDirection(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetLayoutDirection(int arg0)
        {
            IExecuteWithSignature("setLayoutDirection", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setLayoutParams(android.view.ViewGroup.LayoutParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewGroup.LayoutParams"/></param>
        public void SetLayoutParams(Android.View.ViewGroup.LayoutParams arg0)
        {
            IExecuteWithSignature("setLayoutParams", "(Landroid/view/ViewGroup$LayoutParams;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setLongClickable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetLongClickable(bool arg0)
        {
            IExecuteWithSignature("setLongClickable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setMinimumHeight(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMinimumHeight(int arg0)
        {
            IExecuteWithSignature("setMinimumHeight", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setMinimumWidth(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMinimumWidth(int arg0)
        {
            IExecuteWithSignature("setMinimumWidth", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setNestedScrollingEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetNestedScrollingEnabled(bool arg0)
        {
            IExecuteWithSignature("setNestedScrollingEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setNextClusterForwardId(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetNextClusterForwardId(int arg0)
        {
            IExecuteWithSignature("setNextClusterForwardId", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setNextFocusDownId(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetNextFocusDownId(int arg0)
        {
            IExecuteWithSignature("setNextFocusDownId", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setNextFocusForwardId(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetNextFocusForwardId(int arg0)
        {
            IExecuteWithSignature("setNextFocusForwardId", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setNextFocusLeftId(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetNextFocusLeftId(int arg0)
        {
            IExecuteWithSignature("setNextFocusLeftId", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setNextFocusRightId(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetNextFocusRightId(int arg0)
        {
            IExecuteWithSignature("setNextFocusRightId", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setNextFocusUpId(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetNextFocusUpId(int arg0)
        {
            IExecuteWithSignature("setNextFocusUpId", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnApplyWindowInsetsListener"/></param>
        public void SetOnApplyWindowInsetsListener(Android.View.View.OnApplyWindowInsetsListener arg0)
        {
            IExecuteWithSignature("setOnApplyWindowInsetsListener", "(Landroid/view/View$OnApplyWindowInsetsListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOnCapturedPointerListener(android.view.View.OnCapturedPointerListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnCapturedPointerListener"/></param>
        public void SetOnCapturedPointerListener(Android.View.View.OnCapturedPointerListener arg0)
        {
            IExecuteWithSignature("setOnCapturedPointerListener", "(Landroid/view/View$OnCapturedPointerListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOnClickListener(android.view.View.OnClickListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnClickListener"/></param>
        public void SetOnClickListener(Android.View.View.OnClickListener arg0)
        {
            IExecuteWithSignature("setOnClickListener", "(Landroid/view/View$OnClickListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOnContextClickListener(android.view.View.OnContextClickListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnContextClickListener"/></param>
        public void SetOnContextClickListener(Android.View.View.OnContextClickListener arg0)
        {
            IExecuteWithSignature("setOnContextClickListener", "(Landroid/view/View$OnContextClickListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOnCreateContextMenuListener(android.view.View.OnCreateContextMenuListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnCreateContextMenuListener"/></param>
        public void SetOnCreateContextMenuListener(Android.View.View.OnCreateContextMenuListener arg0)
        {
            IExecuteWithSignature("setOnCreateContextMenuListener", "(Landroid/view/View$OnCreateContextMenuListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOnDragListener(android.view.View.OnDragListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnDragListener"/></param>
        public void SetOnDragListener(Android.View.View.OnDragListener arg0)
        {
            IExecuteWithSignature("setOnDragListener", "(Landroid/view/View$OnDragListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOnFocusChangeListener(android.view.View.OnFocusChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnFocusChangeListener"/></param>
        public void SetOnFocusChangeListener(Android.View.View.OnFocusChangeListener arg0)
        {
            IExecuteWithSignature("setOnFocusChangeListener", "(Landroid/view/View$OnFocusChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOnGenericMotionListener(android.view.View.OnGenericMotionListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnGenericMotionListener"/></param>
        public void SetOnGenericMotionListener(Android.View.View.OnGenericMotionListener arg0)
        {
            IExecuteWithSignature("setOnGenericMotionListener", "(Landroid/view/View$OnGenericMotionListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOnHoverListener(android.view.View.OnHoverListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnHoverListener"/></param>
        public void SetOnHoverListener(Android.View.View.OnHoverListener arg0)
        {
            IExecuteWithSignature("setOnHoverListener", "(Landroid/view/View$OnHoverListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOnKeyListener(android.view.View.OnKeyListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnKeyListener"/></param>
        public void SetOnKeyListener(Android.View.View.OnKeyListener arg0)
        {
            IExecuteWithSignature("setOnKeyListener", "(Landroid/view/View$OnKeyListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOnLongClickListener(android.view.View.OnLongClickListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnLongClickListener"/></param>
        public void SetOnLongClickListener(Android.View.View.OnLongClickListener arg0)
        {
            IExecuteWithSignature("setOnLongClickListener", "(Landroid/view/View$OnLongClickListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOnReceiveContentListener(java.lang.String[],android.view.OnReceiveContentListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.View.OnReceiveContentListener"/></param>
        public void SetOnReceiveContentListener(Java.Lang.String[] arg0, Android.View.OnReceiveContentListener arg1)
        {
            IExecute("setOnReceiveContentListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOnScrollChangeListener(android.view.View.OnScrollChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnScrollChangeListener"/></param>
        public void SetOnScrollChangeListener(Android.View.View.OnScrollChangeListener arg0)
        {
            IExecuteWithSignature("setOnScrollChangeListener", "(Landroid/view/View$OnScrollChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOnSystemUiVisibilityChangeListener(android.view.View.OnSystemUiVisibilityChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnSystemUiVisibilityChangeListener"/></param>
        [global::System.Obsolete()]
        public void SetOnSystemUiVisibilityChangeListener(Android.View.View.OnSystemUiVisibilityChangeListener arg0)
        {
            IExecuteWithSignature("setOnSystemUiVisibilityChangeListener", "(Landroid/view/View$OnSystemUiVisibilityChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOnTouchListener(android.view.View.OnTouchListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View.OnTouchListener"/></param>
        public void SetOnTouchListener(Android.View.View.OnTouchListener arg0)
        {
            IExecuteWithSignature("setOnTouchListener", "(Landroid/view/View$OnTouchListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOutlineAmbientShadowColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetOutlineAmbientShadowColor(int arg0)
        {
            IExecuteWithSignature("setOutlineAmbientShadowColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOutlineProvider(android.view.ViewOutlineProvider)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewOutlineProvider"/></param>
        public void SetOutlineProvider(Android.View.ViewOutlineProvider arg0)
        {
            IExecuteWithSignature("setOutlineProvider", "(Landroid/view/ViewOutlineProvider;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOutlineSpotShadowColor(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetOutlineSpotShadowColor(int arg0)
        {
            IExecuteWithSignature("setOutlineSpotShadowColor", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setOverScrollMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetOverScrollMode(int arg0)
        {
            IExecuteWithSignature("setOverScrollMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setPadding(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void SetPadding(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("setPadding", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setPaddingRelative(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void SetPaddingRelative(int arg0, int arg1, int arg2, int arg3)
        {
            IExecute("setPaddingRelative", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setPendingCredentialRequest(android.credentials.GetCredentialRequest,android.os.OutcomeReceiver)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Credentials.GetCredentialRequest"/></param>
        /// <param name="arg1"><see cref="Android.Os.OutcomeReceiver"/></param>
        public void SetPendingCredentialRequest(Android.Credentials.GetCredentialRequest arg0, Android.Os.OutcomeReceiver<Android.Credentials.GetCredentialResponse, Android.Credentials.GetCredentialException> arg1)
        {
            IExecute("setPendingCredentialRequest", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setPivotX(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetPivotX(float arg0)
        {
            IExecuteWithSignature("setPivotX", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setPivotY(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetPivotY(float arg0)
        {
            IExecuteWithSignature("setPivotY", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setPointerIcon(android.view.PointerIcon)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.PointerIcon"/></param>
        public void SetPointerIcon(Android.View.PointerIcon arg0)
        {
            IExecuteWithSignature("setPointerIcon", "(Landroid/view/PointerIcon;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setPressed(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetPressed(bool arg0)
        {
            IExecuteWithSignature("setPressed", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setRenderEffect(android.graphics.RenderEffect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RenderEffect"/></param>
        public void SetRenderEffect(Android.Graphics.RenderEffect arg0)
        {
            IExecuteWithSignature("setRenderEffect", "(Landroid/graphics/RenderEffect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setRequestedFrameRate(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetRequestedFrameRate(float arg0)
        {
            IExecuteWithSignature("setRequestedFrameRate", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setRotation(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetRotation(float arg0)
        {
            IExecuteWithSignature("setRotation", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setRotationX(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetRotationX(float arg0)
        {
            IExecuteWithSignature("setRotationX", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setRotationY(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetRotationY(float arg0)
        {
            IExecuteWithSignature("setRotationY", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setSaveEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSaveEnabled(bool arg0)
        {
            IExecuteWithSignature("setSaveEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setSaveFromParentEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSaveFromParentEnabled(bool arg0)
        {
            IExecuteWithSignature("setSaveFromParentEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setScaleX(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetScaleX(float arg0)
        {
            IExecuteWithSignature("setScaleX", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setScaleY(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetScaleY(float arg0)
        {
            IExecuteWithSignature("setScaleY", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setScreenReaderFocusable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetScreenReaderFocusable(bool arg0)
        {
            IExecuteWithSignature("setScreenReaderFocusable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setScrollBarDefaultDelayBeforeFade(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetScrollBarDefaultDelayBeforeFade(int arg0)
        {
            IExecuteWithSignature("setScrollBarDefaultDelayBeforeFade", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setScrollBarFadeDuration(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetScrollBarFadeDuration(int arg0)
        {
            IExecuteWithSignature("setScrollBarFadeDuration", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setScrollbarFadingEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetScrollbarFadingEnabled(bool arg0)
        {
            IExecuteWithSignature("setScrollbarFadingEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setScrollBarSize(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetScrollBarSize(int arg0)
        {
            IExecuteWithSignature("setScrollBarSize", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setScrollBarStyle(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetScrollBarStyle(int arg0)
        {
            IExecuteWithSignature("setScrollBarStyle", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setScrollCaptureHint(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetScrollCaptureHint(int arg0)
        {
            IExecuteWithSignature("setScrollCaptureHint", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setScrollContainer(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetScrollContainer(bool arg0)
        {
            IExecuteWithSignature("setScrollContainer", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setScrollIndicators(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetScrollIndicators(int arg0, int arg1)
        {
            IExecute("setScrollIndicators", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setScrollIndicators(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetScrollIndicators(int arg0)
        {
            IExecuteWithSignature("setScrollIndicators", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setScrollX(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetScrollX(int arg0)
        {
            IExecuteWithSignature("setScrollX", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setScrollY(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetScrollY(int arg0)
        {
            IExecuteWithSignature("setScrollY", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setSelected(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSelected(bool arg0)
        {
            IExecuteWithSignature("setSelected", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setSoundEffectsEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSoundEffectsEnabled(bool arg0)
        {
            IExecuteWithSignature("setSoundEffectsEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setStateDescription(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetStateDescription(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setStateDescription", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setStateListAnimator(android.animation.StateListAnimator)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Animation.StateListAnimator"/></param>
        public void SetStateListAnimator(Android.Animation.StateListAnimator arg0)
        {
            IExecuteWithSignature("setStateListAnimator", "(Landroid/animation/StateListAnimator;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setSystemGestureExclusionRects(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void SetSystemGestureExclusionRects(Java.Util.List<Android.Graphics.Rect> arg0)
        {
            IExecuteWithSignature("setSystemGestureExclusionRects", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setSystemUiVisibility(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetSystemUiVisibility(int arg0)
        {
            IExecuteWithSignature("setSystemUiVisibility", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setTag(int,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        public void SetTag(int arg0, object arg1)
        {
            IExecute("setTag", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setTag(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        public void SetTag(object arg0)
        {
            IExecuteWithSignature("setTag", "(Ljava/lang/Object;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setTextAlignment(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetTextAlignment(int arg0)
        {
            IExecuteWithSignature("setTextAlignment", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setTextDirection(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetTextDirection(int arg0)
        {
            IExecuteWithSignature("setTextDirection", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setTooltipText(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetTooltipText(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setTooltipText", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setTouchDelegate(android.view.TouchDelegate)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.TouchDelegate"/></param>
        public void SetTouchDelegate(Android.View.TouchDelegate arg0)
        {
            IExecuteWithSignature("setTouchDelegate", "(Landroid/view/TouchDelegate;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setTransitionAlpha(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetTransitionAlpha(float arg0)
        {
            IExecuteWithSignature("setTransitionAlpha", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setTransitionVisibility(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetTransitionVisibility(int arg0)
        {
            IExecuteWithSignature("setTransitionVisibility", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setTranslationX(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetTranslationX(float arg0)
        {
            IExecuteWithSignature("setTranslationX", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setTranslationY(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetTranslationY(float arg0)
        {
            IExecuteWithSignature("setTranslationY", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setTranslationZ(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetTranslationZ(float arg0)
        {
            IExecuteWithSignature("setTranslationZ", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setVerticalFadingEdgeEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetVerticalFadingEdgeEnabled(bool arg0)
        {
            IExecuteWithSignature("setVerticalFadingEdgeEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setVerticalScrollBarEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetVerticalScrollBarEnabled(bool arg0)
        {
            IExecuteWithSignature("setVerticalScrollBarEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setVerticalScrollbarPosition(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetVerticalScrollbarPosition(int arg0)
        {
            IExecuteWithSignature("setVerticalScrollbarPosition", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setVerticalScrollbarThumbDrawable(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetVerticalScrollbarThumbDrawable(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setVerticalScrollbarThumbDrawable", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setVerticalScrollbarTrackDrawable(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void SetVerticalScrollbarTrackDrawable(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("setVerticalScrollbarTrackDrawable", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setViewTranslationCallback(android.view.translation.ViewTranslationCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Translation.ViewTranslationCallback"/></param>
        public void SetViewTranslationCallback(Android.View.Translation.ViewTranslationCallback arg0)
        {
            IExecuteWithSignature("setViewTranslationCallback", "(Landroid/view/translation/ViewTranslationCallback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setVisibility(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetVisibility(int arg0)
        {
            IExecuteWithSignature("setVisibility", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setWillNotCacheDrawing(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetWillNotCacheDrawing(bool arg0)
        {
            IExecuteWithSignature("setWillNotCacheDrawing", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setWillNotDraw(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetWillNotDraw(bool arg0)
        {
            IExecuteWithSignature("setWillNotDraw", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setWindowInsetsAnimationCallback(android.view.WindowInsetsAnimation.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsetsAnimation.Callback"/></param>
        public void SetWindowInsetsAnimationCallback(Android.View.WindowInsetsAnimation.Callback arg0)
        {
            IExecuteWithSignature("setWindowInsetsAnimationCallback", "(Landroid/view/WindowInsetsAnimation$Callback;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setX(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetX(float arg0)
        {
            IExecuteWithSignature("setX", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setY(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetY(float arg0)
        {
            IExecuteWithSignature("setY", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#setZ(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetZ(float arg0)
        {
            IExecuteWithSignature("setZ", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#startAnimation(android.view.animation.Animation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Animation.Animation"/></param>
        public void StartAnimation(Android.View.Animation.Animation arg0)
        {
            IExecuteWithSignature("startAnimation", "(Landroid/view/animation/Animation;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#stopNestedScroll()"/>
        /// </summary>
        public void StopNestedScroll()
        {
            IExecuteWithSignature("stopNestedScroll", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#transformMatrixToGlobal(android.graphics.Matrix)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Matrix"/></param>
        public void TransformMatrixToGlobal(Android.Graphics.Matrix arg0)
        {
            IExecuteWithSignature("transformMatrixToGlobal", "(Landroid/graphics/Matrix;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#transformMatrixToLocal(android.graphics.Matrix)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Matrix"/></param>
        public void TransformMatrixToLocal(Android.Graphics.Matrix arg0)
        {
            IExecuteWithSignature("transformMatrixToLocal", "(Landroid/graphics/Matrix;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Runnable"/></param>
        public void UnscheduleDrawable(Android.Graphics.Drawable.Drawable arg0, Java.Lang.Runnable arg1)
        {
            IExecute("unscheduleDrawable", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/View.html#unscheduleDrawable(android.graphics.drawable.Drawable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Drawable.Drawable"/></param>
        public void UnscheduleDrawable(Android.Graphics.Drawable.Drawable arg0)
        {
            IExecuteWithSignature("unscheduleDrawable", "(Landroid/graphics/drawable/Drawable;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region AccessibilityDelegate
        public partial class AccessibilityDelegate
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#getAccessibilityNodeProvider(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeProvider"/></returns>
            public Android.View.Accessibility.AccessibilityNodeProvider GetAccessibilityNodeProvider(Android.View.View arg0)
            {
                return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeProvider>("getAccessibilityNodeProvider", "(Landroid/view/View;)Landroid/view/accessibility/AccessibilityNodeProvider;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.Accessibility.AccessibilityEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool DispatchPopulateAccessibilityEvent(Android.View.View arg0, Android.View.Accessibility.AccessibilityEvent arg1)
            {
                return IExecute<bool>("dispatchPopulateAccessibilityEvent", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ViewGroup"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            /// <param name="arg2"><see cref="Android.View.Accessibility.AccessibilityEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool OnRequestSendAccessibilityEvent(Android.View.ViewGroup arg0, Android.View.View arg1, Android.View.Accessibility.AccessibilityEvent arg2)
            {
                return IExecute<bool>("onRequestSendAccessibilityEvent", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#performAccessibilityAction(android.view.View,int,android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool PerformAccessibilityAction(Android.View.View arg0, int arg1, Android.Os.Bundle arg2)
            {
                return IExecute<bool>("performAccessibilityAction", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#addExtraDataToAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            /// <param name="arg3"><see cref="Android.Os.Bundle"/></param>
            public void AddExtraDataToAccessibilityNodeInfo(Android.View.View arg0, Android.View.Accessibility.AccessibilityNodeInfo arg1, Java.Lang.String arg2, Android.Os.Bundle arg3)
            {
                IExecute("addExtraDataToAccessibilityNodeInfo", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.Accessibility.AccessibilityEvent"/></param>
            public void OnInitializeAccessibilityEvent(Android.View.View arg0, Android.View.Accessibility.AccessibilityEvent arg1)
            {
                IExecute("onInitializeAccessibilityEvent", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></param>
            public void OnInitializeAccessibilityNodeInfo(Android.View.View arg0, Android.View.Accessibility.AccessibilityNodeInfo arg1)
            {
                IExecute("onInitializeAccessibilityNodeInfo", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.Accessibility.AccessibilityEvent"/></param>
            public void OnPopulateAccessibilityEvent(Android.View.View arg0, Android.View.Accessibility.AccessibilityEvent arg1)
            {
                IExecute("onPopulateAccessibilityEvent", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#sendAccessibilityEvent(android.view.View,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void SendAccessibilityEvent(Android.View.View arg0, int arg1)
            {
                IExecute("sendAccessibilityEvent", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.Accessibility.AccessibilityEvent"/></param>
            public void SendAccessibilityEventUnchecked(Android.View.View arg0, Android.View.Accessibility.AccessibilityEvent arg1)
            {
                IExecute("sendAccessibilityEventUnchecked", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region BaseSavedState
        public partial class BaseSavedState
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.BaseSavedState.html#%3Cinit%3E(android.os.Parcel,java.lang.ClassLoader)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="Java.Lang.ClassLoader"/></param>
            public BaseSavedState(Android.Os.Parcel arg0, Java.Lang.ClassLoader arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.BaseSavedState.html#%3Cinit%3E(android.os.Parcel)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            public BaseSavedState(Android.Os.Parcel arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.BaseSavedState.html#%3Cinit%3E(android.os.Parcelable)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcelable"/></param>
            public BaseSavedState(Android.Os.Parcelable arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.BaseSavedState.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DragShadowBuilder
        public partial class DragShadowBuilder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.DragShadowBuilder.html#%3Cinit%3E(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            public DragShadowBuilder(Android.View.View arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.DragShadowBuilder.html#getView()"/>
            /// </summary>
            /// <returns><see cref="Android.View.View"/></returns>
            public Android.View.View GetView()
            {
                return IExecuteWithSignature<Android.View.View>("getView", "()Landroid/view/View;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.DragShadowBuilder.html#onDrawShadow(android.graphics.Canvas)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Canvas"/></param>
            public void OnDrawShadow(Android.Graphics.Canvas arg0)
            {
                IExecuteWithSignature("onDrawShadow", "(Landroid/graphics/Canvas;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.DragShadowBuilder.html#onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Point"/></param>
            /// <param name="arg1"><see cref="Android.Graphics.Point"/></param>
            public void OnProvideShadowMetrics(Android.Graphics.Point arg0, Android.Graphics.Point arg1)
            {
                IExecute("onProvideShadowMetrics", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MeasureSpec
        public partial class MeasureSpec
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.MeasureSpec.html#AT_MOST"/>
            /// </summary>
            public static int AT_MOST { get { if (!_AT_MOSTReady) { _AT_MOSTContent = SGetField<int>(LocalBridgeClazz, "AT_MOST"); _AT_MOSTReady = true; } return _AT_MOSTContent; } }
            private static int _AT_MOSTContent = default;
            private static bool _AT_MOSTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.MeasureSpec.html#EXACTLY"/>
            /// </summary>
            public static int EXACTLY { get { if (!_EXACTLYReady) { _EXACTLYContent = SGetField<int>(LocalBridgeClazz, "EXACTLY"); _EXACTLYReady = true; } return _EXACTLYContent; } }
            private static int _EXACTLYContent = default;
            private static bool _EXACTLYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.MeasureSpec.html#UNSPECIFIED"/>
            /// </summary>
            public static int UNSPECIFIED { get { if (!_UNSPECIFIEDReady) { _UNSPECIFIEDContent = SGetField<int>(LocalBridgeClazz, "UNSPECIFIED"); _UNSPECIFIEDReady = true; } return _UNSPECIFIEDContent; } }
            private static int _UNSPECIFIEDContent = default;
            private static bool _UNSPECIFIEDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.MeasureSpec.html#getMode(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="int"/></returns>
            public static int GetMode(int arg0)
            {
                return SExecuteWithSignature<int>(LocalBridgeClazz, "getMode", "(I)I", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.MeasureSpec.html#getSize(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="int"/></returns>
            public static int GetSize(int arg0)
            {
                return SExecuteWithSignature<int>(LocalBridgeClazz, "getSize", "(I)I", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.MeasureSpec.html#makeMeasureSpec(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="int"/></returns>
            public static int MakeMeasureSpec(int arg0, int arg1)
            {
                return SExecute<int>(LocalBridgeClazz, "makeMeasureSpec", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.MeasureSpec.html#toString(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public static Java.Lang.String ToString(int arg0)
            {
                return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "toString", "(I)Ljava/lang/String;", arg0);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnApplyWindowInsetsListener
        public partial class OnApplyWindowInsetsListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnApplyWindowInsetsListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onApplyWindowInsets", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnApplyWindowInsetsEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnApplyWindowInsetsListener.html#onApplyWindowInsets(android.view.View,android.view.WindowInsets)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnApplyWindowInsets"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.View, Android.View.WindowInsets, Android.View.WindowInsets> OnOnApplyWindowInsets { get; set; } = null;

            void OnApplyWindowInsetsEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnApplyWindowInsets != null) ? OnOnApplyWindowInsets : OnApplyWindowInsets;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.WindowInsets>(0));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnApplyWindowInsetsListener.html#onApplyWindowInsets(android.view.View,android.view.WindowInsets)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.WindowInsets"/></param>
            /// <returns><see cref="Android.View.WindowInsets"/></returns>
            public virtual Android.View.WindowInsets OnApplyWindowInsets(Android.View.View arg0, Android.View.WindowInsets arg1)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnApplyWindowInsetsListenerDirect
        public partial class OnApplyWindowInsetsListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnApplyWindowInsetsListener.html#onApplyWindowInsets(android.view.View,android.view.WindowInsets)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.WindowInsets"/></param>
            /// <returns><see cref="Android.View.WindowInsets"/></returns>
            public override Android.View.WindowInsets OnApplyWindowInsets(Android.View.View arg0, Android.View.WindowInsets arg1)
            {
                return IExecute<Android.View.WindowInsets>("onApplyWindowInsets", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnAttachStateChangeListener
        public partial class OnAttachStateChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnAttachStateChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onViewAttachedToWindow", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnViewAttachedToWindowEventHandler));
                AddEventHandler("onViewDetachedFromWindow", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnViewDetachedFromWindowEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html#onViewAttachedToWindow(android.view.View)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnViewAttachedToWindow"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.View> OnOnViewAttachedToWindow { get; set; } = null;

            void OnViewAttachedToWindowEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnViewAttachedToWindow != null) ? OnOnViewAttachedToWindow : OnViewAttachedToWindow;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html#onViewAttachedToWindow(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            public virtual void OnViewAttachedToWindow(Android.View.View arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html#onViewDetachedFromWindow(android.view.View)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnViewDetachedFromWindow"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.View> OnOnViewDetachedFromWindow { get; set; } = null;

            void OnViewDetachedFromWindowEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnViewDetachedFromWindow != null) ? OnOnViewDetachedFromWindow : OnViewDetachedFromWindow;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html#onViewDetachedFromWindow(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            public virtual void OnViewDetachedFromWindow(Android.View.View arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnAttachStateChangeListenerDirect
        public partial class OnAttachStateChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html#onViewAttachedToWindow(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            public override void OnViewAttachedToWindow(Android.View.View arg0)
            {
                IExecuteWithSignature("onViewAttachedToWindow", "(Landroid/view/View;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnAttachStateChangeListener.html#onViewDetachedFromWindow(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            public override void OnViewDetachedFromWindow(Android.View.View arg0)
            {
                IExecuteWithSignature("onViewDetachedFromWindow", "(Landroid/view/View;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnCapturedPointerListener
        public partial class OnCapturedPointerListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnCapturedPointerListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onCapturedPointer", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnCapturedPointerEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnCapturedPointerListener.html#onCapturedPointer(android.view.View,android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnCapturedPointer"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.View, Android.View.MotionEvent, bool> OnOnCapturedPointer { get; set; } = null;

            void OnCapturedPointerEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnCapturedPointer != null) ? OnOnCapturedPointer : OnCapturedPointer;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnCapturedPointerListener.html#onCapturedPointer(android.view.View,android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnCapturedPointer(Android.View.View arg0, Android.View.MotionEvent arg1)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnCapturedPointerListenerDirect
        public partial class OnCapturedPointerListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnCapturedPointerListener.html#onCapturedPointer(android.view.View,android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnCapturedPointer(Android.View.View arg0, Android.View.MotionEvent arg1)
            {
                return IExecute<bool>("onCapturedPointer", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnClickListener
        public partial class OnClickListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnClickListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onClick", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnClickEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnClickListener.html#onClick(android.view.View)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnClick"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.View> OnOnClick { get; set; } = null;

            void OnClickEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnClick != null) ? OnOnClick : OnClick;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnClickListener.html#onClick(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            public virtual void OnClick(Android.View.View arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnClickListenerDirect
        public partial class OnClickListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnClickListener.html#onClick(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            public override void OnClick(Android.View.View arg0)
            {
                IExecuteWithSignature("onClick", "(Landroid/view/View;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnContextClickListener
        public partial class OnContextClickListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnContextClickListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onContextClick", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnContextClickEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnContextClickListener.html#onContextClick(android.view.View)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnContextClick"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.View, bool> OnOnContextClick { get; set; } = null;

            void OnContextClickEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnContextClick != null) ? OnOnContextClick : OnContextClick;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnContextClickListener.html#onContextClick(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnContextClick(Android.View.View arg0)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnContextClickListenerDirect
        public partial class OnContextClickListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnContextClickListener.html#onContextClick(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnContextClick(Android.View.View arg0)
            {
                return IExecuteWithSignature<bool>("onContextClick", "(Landroid/view/View;)Z", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnCreateContextMenuListener
        public partial class OnCreateContextMenuListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnCreateContextMenuListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onCreateContextMenu", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.ContextMenu>>>(OnCreateContextMenuEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnCreateContextMenuListener.html#onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnCreateContextMenu"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.ContextMenu, Android.View.View, Android.View.ContextMenu.ContextMenuInfo> OnOnCreateContextMenu { get; set; } = null;

            void OnCreateContextMenuEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.ContextMenu>> data)
            {
                var methodToExecute = (OnOnCreateContextMenu != null) ? OnOnCreateContextMenu : OnCreateContextMenu;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.View>(0), data.EventData.GetAt<Android.View.ContextMenu.ContextMenuInfo>(1));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnCreateContextMenuListener.html#onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ContextMenu"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            /// <param name="arg2"><see cref="Android.View.ContextMenu.ContextMenuInfo"/></param>
            public virtual void OnCreateContextMenu(Android.View.ContextMenu arg0, Android.View.View arg1, Android.View.ContextMenu.ContextMenuInfo arg2)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnCreateContextMenuListenerDirect
        public partial class OnCreateContextMenuListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnCreateContextMenuListener.html#onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ContextMenu"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            /// <param name="arg2"><see cref="Android.View.ContextMenu.ContextMenuInfo"/></param>
            public override void OnCreateContextMenu(Android.View.ContextMenu arg0, Android.View.View arg1, Android.View.ContextMenu.ContextMenuInfo arg2)
            {
                IExecute("onCreateContextMenu", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnDragListener
        public partial class OnDragListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnDragListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDrag", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnDragEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnDragListener.html#onDrag(android.view.View,android.view.DragEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDrag"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.View, Android.View.DragEvent, bool> OnOnDrag { get; set; } = null;

            void OnDragEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnDrag != null) ? OnOnDrag : OnDrag;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.DragEvent>(0));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnDragListener.html#onDrag(android.view.View,android.view.DragEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.DragEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnDrag(Android.View.View arg0, Android.View.DragEvent arg1)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnDragListenerDirect
        public partial class OnDragListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnDragListener.html#onDrag(android.view.View,android.view.DragEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.DragEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnDrag(Android.View.View arg0, Android.View.DragEvent arg1)
            {
                return IExecute<bool>("onDrag", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnFocusChangeListener
        public partial class OnFocusChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnFocusChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onFocusChange", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnFocusChangeEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnFocusChangeListener.html#onFocusChange(android.view.View,boolean)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnFocusChange"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.View, bool> OnOnFocusChange { get; set; } = null;

            void OnFocusChangeEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnFocusChange != null) ? OnOnFocusChange : OnFocusChange;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<bool>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnFocusChangeListener.html#onFocusChange(android.view.View,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            public virtual void OnFocusChange(Android.View.View arg0, bool arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnFocusChangeListenerDirect
        public partial class OnFocusChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnFocusChangeListener.html#onFocusChange(android.view.View,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            public override void OnFocusChange(Android.View.View arg0, bool arg1)
            {
                IExecute("onFocusChange", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGenericMotionListener
        public partial class OnGenericMotionListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnGenericMotionListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onGenericMotion", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnGenericMotionEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnGenericMotionListener.html#onGenericMotion(android.view.View,android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGenericMotion"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.View, Android.View.MotionEvent, bool> OnOnGenericMotion { get; set; } = null;

            void OnGenericMotionEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnGenericMotion != null) ? OnOnGenericMotion : OnGenericMotion;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnGenericMotionListener.html#onGenericMotion(android.view.View,android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnGenericMotion(Android.View.View arg0, Android.View.MotionEvent arg1)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGenericMotionListenerDirect
        public partial class OnGenericMotionListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnGenericMotionListener.html#onGenericMotion(android.view.View,android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnGenericMotion(Android.View.View arg0, Android.View.MotionEvent arg1)
            {
                return IExecute<bool>("onGenericMotion", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnHoverListener
        public partial class OnHoverListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnHoverListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onHover", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnHoverEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnHoverListener.html#onHover(android.view.View,android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnHover"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.View, Android.View.MotionEvent, bool> OnOnHover { get; set; } = null;

            void OnHoverEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnHover != null) ? OnOnHover : OnHover;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnHoverListener.html#onHover(android.view.View,android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnHover(Android.View.View arg0, Android.View.MotionEvent arg1)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnHoverListenerDirect
        public partial class OnHoverListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnHoverListener.html#onHover(android.view.View,android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnHover(Android.View.View arg0, Android.View.MotionEvent arg1)
            {
                return IExecute<bool>("onHover", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnKeyListener
        public partial class OnKeyListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnKeyListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onKey", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnKeyEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnKeyListener.html#onKey(android.view.View,int,android.view.KeyEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnKey"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.View, int, Android.View.KeyEvent, bool> OnOnKey { get; set; } = null;

            void OnKeyEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnKey != null) ? OnOnKey : OnKey;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<Android.View.KeyEvent>(1));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnKeyListener.html#onKey(android.view.View,int,android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnKey(Android.View.View arg0, int arg1, Android.View.KeyEvent arg2)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnKeyListenerDirect
        public partial class OnKeyListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnKeyListener.html#onKey(android.view.View,int,android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnKey(Android.View.View arg0, int arg1, Android.View.KeyEvent arg2)
            {
                return IExecute<bool>("onKey", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnLayoutChangeListener
        public partial class OnLayoutChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnLayoutChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onLayoutChange", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnLayoutChangeEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnLayoutChangeListener.html#onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnLayoutChange"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.View, int, int, int, int, int, int, int, int> OnOnLayoutChange { get; set; } = null;

            void OnLayoutChangeEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnLayoutChange != null) ? OnOnLayoutChange : OnLayoutChange;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<int>(3), data.EventData.GetAt<int>(4), data.EventData.GetAt<int>(5), data.EventData.GetAt<int>(6), data.EventData.GetAt<int>(7));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnLayoutChangeListener.html#onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="int"/></param>
            /// <param name="arg5"><see cref="int"/></param>
            /// <param name="arg6"><see cref="int"/></param>
            /// <param name="arg7"><see cref="int"/></param>
            /// <param name="arg8"><see cref="int"/></param>
            public virtual void OnLayoutChange(Android.View.View arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnLayoutChangeListenerDirect
        public partial class OnLayoutChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnLayoutChangeListener.html#onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="int"/></param>
            /// <param name="arg5"><see cref="int"/></param>
            /// <param name="arg6"><see cref="int"/></param>
            /// <param name="arg7"><see cref="int"/></param>
            /// <param name="arg8"><see cref="int"/></param>
            public override void OnLayoutChange(Android.View.View arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8)
            {
                IExecute("onLayoutChange", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnLongClickListener
        public partial class OnLongClickListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnLongClickListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onLongClick", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnLongClickEventHandler));
                AddEventHandler("onLongClickUseDefaultHapticFeedback", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnLongClickUseDefaultHapticFeedbackEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnLongClickListener.html#onLongClick(android.view.View)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnLongClick"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.View, bool> OnOnLongClick { get; set; } = null;

            void OnLongClickEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnLongClick != null) ? OnOnLongClick : OnLongClick;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnLongClickListener.html#onLongClick(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnLongClick(Android.View.View arg0)
            {
                return default;
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnLongClickListener.html#onLongClickUseDefaultHapticFeedback(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <returns><see cref="bool"/></returns>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public bool OnLongClickUseDefaultHapticFeedbackDefault(Android.View.View arg0)
            {
                return IExecuteWithSignature<bool>("onLongClickUseDefaultHapticFeedbackDefault", "(Landroid/view/View;)Z", arg0);
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnLongClickListener.html#onLongClickUseDefaultHapticFeedback(android.view.View)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnLongClickUseDefaultHapticFeedback"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.View, bool> OnOnLongClickUseDefaultHapticFeedback { get; set; } = null;

            void OnLongClickUseDefaultHapticFeedbackEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnLongClickUseDefaultHapticFeedback != null) ? OnOnLongClickUseDefaultHapticFeedback : OnLongClickUseDefaultHapticFeedback;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnLongClickListener.html#onLongClickUseDefaultHapticFeedback(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <returns><see cref="bool"/></returns>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="OnLongClickUseDefaultHapticFeedbackDefault"/>; override the method to implement a different behavior</remarks>
            public virtual bool OnLongClickUseDefaultHapticFeedback(Android.View.View arg0)
            {
                return OnLongClickUseDefaultHapticFeedbackDefault(arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnLongClickListenerDirect
        public partial class OnLongClickListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnLongClickListener.html#onLongClick(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnLongClick(Android.View.View arg0)
            {
                return IExecuteWithSignature<bool>("onLongClick", "(Landroid/view/View;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnLongClickListener.html#onLongClickUseDefaultHapticFeedback(android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnLongClickUseDefaultHapticFeedback(Android.View.View arg0)
            {
                return IExecuteWithSignature<bool>("onLongClickUseDefaultHapticFeedback", "(Landroid/view/View;)Z", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnScrollChangeListener
        public partial class OnScrollChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnScrollChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onScrollChange", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnScrollChangeEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnScrollChangeListener.html#onScrollChange(android.view.View,int,int,int,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnScrollChange"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.View, int, int, int, int> OnOnScrollChange { get; set; } = null;

            void OnScrollChangeEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnScrollChange != null) ? OnOnScrollChange : OnScrollChange;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0), data.EventData.GetAt<int>(1), data.EventData.GetAt<int>(2), data.EventData.GetAt<int>(3));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnScrollChangeListener.html#onScrollChange(android.view.View,int,int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="int"/></param>
            public virtual void OnScrollChange(Android.View.View arg0, int arg1, int arg2, int arg3, int arg4)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnScrollChangeListenerDirect
        public partial class OnScrollChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnScrollChangeListener.html#onScrollChange(android.view.View,int,int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="int"/></param>
            public override void OnScrollChange(Android.View.View arg0, int arg1, int arg2, int arg3, int arg4)
            {
                IExecute("onScrollChange", arg0, arg1, arg2, arg3, arg4);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnSystemUiVisibilityChangeListener
        public partial class OnSystemUiVisibilityChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnSystemUiVisibilityChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onSystemUiVisibilityChange", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnSystemUiVisibilityChangeEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnSystemUiVisibilityChangeListener.html#onSystemUiVisibilityChange(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnSystemUiVisibilityChange"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnSystemUiVisibilityChange { get; set; } = null;

            void OnSystemUiVisibilityChangeEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
            {
                var methodToExecute = (OnOnSystemUiVisibilityChange != null) ? OnOnSystemUiVisibilityChange : OnSystemUiVisibilityChange;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnSystemUiVisibilityChangeListener.html#onSystemUiVisibilityChange(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            [global::System.Obsolete()]
            public virtual void OnSystemUiVisibilityChange(int arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnSystemUiVisibilityChangeListenerDirect
        public partial class OnSystemUiVisibilityChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnSystemUiVisibilityChangeListener.html#onSystemUiVisibilityChange(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            [global::System.Obsolete()]
            public override void OnSystemUiVisibilityChange(int arg0)
            {
                IExecuteWithSignature("onSystemUiVisibilityChange", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnTouchListener
        public partial class OnTouchListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnTouchListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onTouch", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnTouchEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnTouchListener.html#onTouch(android.view.View,android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnTouch"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.View, Android.View.MotionEvent, bool> OnOnTouch { get; set; } = null;

            void OnTouchEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnTouch != null) ? OnOnTouch : OnTouch;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.MotionEvent>(0));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnTouchListener.html#onTouch(android.view.View,android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnTouch(Android.View.View arg0, Android.View.MotionEvent arg1)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnTouchListenerDirect
        public partial class OnTouchListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnTouchListener.html#onTouch(android.view.View,android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnTouch(Android.View.View arg0, Android.View.MotionEvent arg1)
            {
                return IExecute<bool>("onTouch", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnUnhandledKeyEventListener
        public partial class OnUnhandledKeyEventListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnUnhandledKeyEventListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onUnhandledKeyEvent", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnUnhandledKeyEventEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/View.OnUnhandledKeyEventListener.html#onUnhandledKeyEvent(android.view.View,android.view.KeyEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnUnhandledKeyEvent"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<Android.View.View, Android.View.KeyEvent, bool> OnOnUnhandledKeyEvent { get; set; } = null;

            void OnUnhandledKeyEventEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnUnhandledKeyEvent != null) ? OnOnUnhandledKeyEvent : OnUnhandledKeyEvent;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.KeyEvent>(0));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnUnhandledKeyEventListener.html#onUnhandledKeyEvent(android.view.View,android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnUnhandledKeyEvent(Android.View.View arg0, Android.View.KeyEvent arg1)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnUnhandledKeyEventListenerDirect
        public partial class OnUnhandledKeyEventListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/View.OnUnhandledKeyEventListener.html#onUnhandledKeyEvent(android.view.View,android.view.KeyEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.KeyEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnUnhandledKeyEvent(Android.View.View arg0, Android.View.KeyEvent arg1)
            {
                return IExecute<bool>("onUnhandledKeyEvent", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
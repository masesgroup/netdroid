/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region Surface declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/Surface.html"/>
    /// </summary>
    public partial class Surface : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.view.Surface";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Surface() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Surface(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region OutOfResourcesException declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.OutOfResourcesException.html"/>
        /// </summary>
        public partial class OutOfResourcesException : Java.Lang.RuntimeException
        {
            const string _bridgeClassName = "android.view.Surface$OutOfResourcesException";
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeException_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region Surface implementation
    public partial class Surface
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#%3Cinit%3E(android.graphics.SurfaceTexture)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.SurfaceTexture"/></param>
        public Surface(Android.Graphics.SurfaceTexture arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#%3Cinit%3E(android.view.SurfaceControl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
        public Surface(Android.View.SurfaceControl arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#CHANGE_FRAME_RATE_ALWAYS"/>
        /// </summary>
        public static int CHANGE_FRAME_RATE_ALWAYS { get { if (!_CHANGE_FRAME_RATE_ALWAYSReady) { _CHANGE_FRAME_RATE_ALWAYSContent = SGetField<int>(LocalBridgeClazz, "CHANGE_FRAME_RATE_ALWAYS"); _CHANGE_FRAME_RATE_ALWAYSReady = true; } return _CHANGE_FRAME_RATE_ALWAYSContent; } }
        private static int _CHANGE_FRAME_RATE_ALWAYSContent = default;
        private static bool _CHANGE_FRAME_RATE_ALWAYSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#CHANGE_FRAME_RATE_ONLY_IF_SEAMLESS"/>
        /// </summary>
        public static int CHANGE_FRAME_RATE_ONLY_IF_SEAMLESS { get { if (!_CHANGE_FRAME_RATE_ONLY_IF_SEAMLESSReady) { _CHANGE_FRAME_RATE_ONLY_IF_SEAMLESSContent = SGetField<int>(LocalBridgeClazz, "CHANGE_FRAME_RATE_ONLY_IF_SEAMLESS"); _CHANGE_FRAME_RATE_ONLY_IF_SEAMLESSReady = true; } return _CHANGE_FRAME_RATE_ONLY_IF_SEAMLESSContent; } }
        private static int _CHANGE_FRAME_RATE_ONLY_IF_SEAMLESSContent = default;
        private static bool _CHANGE_FRAME_RATE_ONLY_IF_SEAMLESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#FRAME_RATE_COMPATIBILITY_DEFAULT"/>
        /// </summary>
        public static int FRAME_RATE_COMPATIBILITY_DEFAULT { get { if (!_FRAME_RATE_COMPATIBILITY_DEFAULTReady) { _FRAME_RATE_COMPATIBILITY_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "FRAME_RATE_COMPATIBILITY_DEFAULT"); _FRAME_RATE_COMPATIBILITY_DEFAULTReady = true; } return _FRAME_RATE_COMPATIBILITY_DEFAULTContent; } }
        private static int _FRAME_RATE_COMPATIBILITY_DEFAULTContent = default;
        private static bool _FRAME_RATE_COMPATIBILITY_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#FRAME_RATE_COMPATIBILITY_FIXED_SOURCE"/>
        /// </summary>
        public static int FRAME_RATE_COMPATIBILITY_FIXED_SOURCE { get { if (!_FRAME_RATE_COMPATIBILITY_FIXED_SOURCEReady) { _FRAME_RATE_COMPATIBILITY_FIXED_SOURCEContent = SGetField<int>(LocalBridgeClazz, "FRAME_RATE_COMPATIBILITY_FIXED_SOURCE"); _FRAME_RATE_COMPATIBILITY_FIXED_SOURCEReady = true; } return _FRAME_RATE_COMPATIBILITY_FIXED_SOURCEContent; } }
        private static int _FRAME_RATE_COMPATIBILITY_FIXED_SOURCEContent = default;
        private static bool _FRAME_RATE_COMPATIBILITY_FIXED_SOURCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#ROTATION_0"/>
        /// </summary>
        public static int ROTATION_0 { get { if (!_ROTATION_0Ready) { _ROTATION_0Content = SGetField<int>(LocalBridgeClazz, "ROTATION_0"); _ROTATION_0Ready = true; } return _ROTATION_0Content; } }
        private static int _ROTATION_0Content = default;
        private static bool _ROTATION_0Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#ROTATION_180"/>
        /// </summary>
        public static int ROTATION_180 { get { if (!_ROTATION_180Ready) { _ROTATION_180Content = SGetField<int>(LocalBridgeClazz, "ROTATION_180"); _ROTATION_180Ready = true; } return _ROTATION_180Content; } }
        private static int _ROTATION_180Content = default;
        private static bool _ROTATION_180Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#ROTATION_270"/>
        /// </summary>
        public static int ROTATION_270 { get { if (!_ROTATION_270Ready) { _ROTATION_270Content = SGetField<int>(LocalBridgeClazz, "ROTATION_270"); _ROTATION_270Ready = true; } return _ROTATION_270Content; } }
        private static int _ROTATION_270Content = default;
        private static bool _ROTATION_270Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#ROTATION_90"/>
        /// </summary>
        public static int ROTATION_90 { get { if (!_ROTATION_90Ready) { _ROTATION_90Content = SGetField<int>(LocalBridgeClazz, "ROTATION_90"); _ROTATION_90Ready = true; } return _ROTATION_90Content; } }
        private static int _ROTATION_90Content = default;
        private static bool _ROTATION_90Ready = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#lockCanvas(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="Android.Graphics.Canvas"/></returns>
        /// <exception cref="Java.Lang.IllegalArgumentException"/>
        /// <exception cref="Android.View.Surface.OutOfResourcesException"/>
        public Android.Graphics.Canvas LockCanvas(Android.Graphics.Rect arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Canvas>("lockCanvas", "(Landroid/graphics/Rect;)Landroid/graphics/Canvas;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#lockHardwareCanvas()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Canvas"/></returns>
        public Android.Graphics.Canvas LockHardwareCanvas()
        {
            return IExecuteWithSignature<Android.Graphics.Canvas>("lockHardwareCanvas", "()Landroid/graphics/Canvas;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#isValid()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsValid()
        {
            return IExecuteWithSignature<bool>("isValid", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#clearFrameRate()"/>
        /// </summary>
        public void ClearFrameRate()
        {
            IExecuteWithSignature("clearFrameRate", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#readFromParcel(android.os.Parcel)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        public void ReadFromParcel(Android.Os.Parcel arg0)
        {
            IExecuteWithSignature("readFromParcel", "(Landroid/os/Parcel;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#release()"/>
        /// </summary>
        public void Release()
        {
            IExecuteWithSignature("release", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#setFrameRate(float,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void SetFrameRate(float arg0, int arg1, int arg2)
        {
            IExecuteWithSignature("setFrameRate", "(FII)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#setFrameRate(float,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetFrameRate(float arg0, int arg1)
        {
            IExecuteWithSignature("setFrameRate", "(FI)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#unlockCanvas(android.graphics.Canvas)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Canvas"/></param>
        [global::System.Obsolete()]
        public void UnlockCanvas(Android.Graphics.Canvas arg0)
        {
            IExecuteWithSignature("unlockCanvas", "(Landroid/graphics/Canvas;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#unlockCanvasAndPost(android.graphics.Canvas)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Canvas"/></param>
        public void UnlockCanvasAndPost(Android.Graphics.Canvas arg0)
        {
            IExecuteWithSignature("unlockCanvasAndPost", "(Landroid/graphics/Canvas;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Surface.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region OutOfResourcesException implementation
        public partial class OutOfResourcesException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
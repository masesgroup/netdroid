/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View.Displayhash
{
    #region DisplayHashResultCallback declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/displayhash/DisplayHashResultCallback.html"/>
    /// </summary>
    public partial class DisplayHashResultCallback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<DisplayHashResultCallback>
    {
        const string _bridgeClassName = "android.view.displayhash.DisplayHashResultCallback";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("DisplayHashResultCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public DisplayHashResultCallback() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("DisplayHashResultCallback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public DisplayHashResultCallback(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region IDisplayHashResultCallback
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IDisplayHashResultCallback
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region DisplayHashResultCallback implementation
    public partial class DisplayHashResultCallback : Android.View.Displayhash.IDisplayHashResultCallback
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/displayhash/DisplayHashResultCallback.html#DISPLAY_HASH_ERROR_INVALID_BOUNDS"/>
        /// </summary>
        public static int DISPLAY_HASH_ERROR_INVALID_BOUNDS { get { if (!_DISPLAY_HASH_ERROR_INVALID_BOUNDSReady) { _DISPLAY_HASH_ERROR_INVALID_BOUNDSContent = SGetField<int>(LocalBridgeClazz, "DISPLAY_HASH_ERROR_INVALID_BOUNDS"); _DISPLAY_HASH_ERROR_INVALID_BOUNDSReady = true; } return _DISPLAY_HASH_ERROR_INVALID_BOUNDSContent; } }
        private static int _DISPLAY_HASH_ERROR_INVALID_BOUNDSContent = default;
        private static bool _DISPLAY_HASH_ERROR_INVALID_BOUNDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/displayhash/DisplayHashResultCallback.html#DISPLAY_HASH_ERROR_INVALID_HASH_ALGORITHM"/>
        /// </summary>
        public static int DISPLAY_HASH_ERROR_INVALID_HASH_ALGORITHM { get { if (!_DISPLAY_HASH_ERROR_INVALID_HASH_ALGORITHMReady) { _DISPLAY_HASH_ERROR_INVALID_HASH_ALGORITHMContent = SGetField<int>(LocalBridgeClazz, "DISPLAY_HASH_ERROR_INVALID_HASH_ALGORITHM"); _DISPLAY_HASH_ERROR_INVALID_HASH_ALGORITHMReady = true; } return _DISPLAY_HASH_ERROR_INVALID_HASH_ALGORITHMContent; } }
        private static int _DISPLAY_HASH_ERROR_INVALID_HASH_ALGORITHMContent = default;
        private static bool _DISPLAY_HASH_ERROR_INVALID_HASH_ALGORITHMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/displayhash/DisplayHashResultCallback.html#DISPLAY_HASH_ERROR_MISSING_WINDOW"/>
        /// </summary>
        public static int DISPLAY_HASH_ERROR_MISSING_WINDOW { get { if (!_DISPLAY_HASH_ERROR_MISSING_WINDOWReady) { _DISPLAY_HASH_ERROR_MISSING_WINDOWContent = SGetField<int>(LocalBridgeClazz, "DISPLAY_HASH_ERROR_MISSING_WINDOW"); _DISPLAY_HASH_ERROR_MISSING_WINDOWReady = true; } return _DISPLAY_HASH_ERROR_MISSING_WINDOWContent; } }
        private static int _DISPLAY_HASH_ERROR_MISSING_WINDOWContent = default;
        private static bool _DISPLAY_HASH_ERROR_MISSING_WINDOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/displayhash/DisplayHashResultCallback.html#DISPLAY_HASH_ERROR_NOT_VISIBLE_ON_SCREEN"/>
        /// </summary>
        public static int DISPLAY_HASH_ERROR_NOT_VISIBLE_ON_SCREEN { get { if (!_DISPLAY_HASH_ERROR_NOT_VISIBLE_ON_SCREENReady) { _DISPLAY_HASH_ERROR_NOT_VISIBLE_ON_SCREENContent = SGetField<int>(LocalBridgeClazz, "DISPLAY_HASH_ERROR_NOT_VISIBLE_ON_SCREEN"); _DISPLAY_HASH_ERROR_NOT_VISIBLE_ON_SCREENReady = true; } return _DISPLAY_HASH_ERROR_NOT_VISIBLE_ON_SCREENContent; } }
        private static int _DISPLAY_HASH_ERROR_NOT_VISIBLE_ON_SCREENContent = default;
        private static bool _DISPLAY_HASH_ERROR_NOT_VISIBLE_ON_SCREENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/displayhash/DisplayHashResultCallback.html#DISPLAY_HASH_ERROR_TOO_MANY_REQUESTS"/>
        /// </summary>
        public static int DISPLAY_HASH_ERROR_TOO_MANY_REQUESTS { get { if (!_DISPLAY_HASH_ERROR_TOO_MANY_REQUESTSReady) { _DISPLAY_HASH_ERROR_TOO_MANY_REQUESTSContent = SGetField<int>(LocalBridgeClazz, "DISPLAY_HASH_ERROR_TOO_MANY_REQUESTS"); _DISPLAY_HASH_ERROR_TOO_MANY_REQUESTSReady = true; } return _DISPLAY_HASH_ERROR_TOO_MANY_REQUESTSContent; } }
        private static int _DISPLAY_HASH_ERROR_TOO_MANY_REQUESTSContent = default;
        private static bool _DISPLAY_HASH_ERROR_TOO_MANY_REQUESTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/displayhash/DisplayHashResultCallback.html#DISPLAY_HASH_ERROR_UNKNOWN"/>
        /// </summary>
        public static int DISPLAY_HASH_ERROR_UNKNOWN { get { if (!_DISPLAY_HASH_ERROR_UNKNOWNReady) { _DISPLAY_HASH_ERROR_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "DISPLAY_HASH_ERROR_UNKNOWN"); _DISPLAY_HASH_ERROR_UNKNOWNReady = true; } return _DISPLAY_HASH_ERROR_UNKNOWNContent; } }
        private static int _DISPLAY_HASH_ERROR_UNKNOWNContent = default;
        private static bool _DISPLAY_HASH_ERROR_UNKNOWNReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/displayhash/DisplayHashResultCallback.html#onDisplayHashError(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void OnDisplayHashError(int arg0)
        {
            IExecuteWithSignature("onDisplayHashError", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/displayhash/DisplayHashResultCallback.html#onDisplayHashResult(android.view.displayhash.DisplayHash)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Displayhash.DisplayHash"/></param>
        public void OnDisplayHashResult(Android.View.Displayhash.DisplayHash arg0)
        {
            IExecuteWithSignature("onDisplayHashResult", "(Landroid/view/displayhash/DisplayHash;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
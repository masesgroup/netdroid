/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region IWindowInsetsController
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IWindowInsetsController
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region WindowInsetsController
    public partial class WindowInsetsController : Android.View.IWindowInsetsController
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.html#APPEARANCE_LIGHT_NAVIGATION_BARS"/>
        /// </summary>
        public static int APPEARANCE_LIGHT_NAVIGATION_BARS { get { if (!_APPEARANCE_LIGHT_NAVIGATION_BARSReady) { _APPEARANCE_LIGHT_NAVIGATION_BARSContent = SGetField<int>(LocalBridgeClazz, "APPEARANCE_LIGHT_NAVIGATION_BARS"); _APPEARANCE_LIGHT_NAVIGATION_BARSReady = true; } return _APPEARANCE_LIGHT_NAVIGATION_BARSContent; } }
        private static int _APPEARANCE_LIGHT_NAVIGATION_BARSContent = default;
        private static bool _APPEARANCE_LIGHT_NAVIGATION_BARSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.html#APPEARANCE_LIGHT_STATUS_BARS"/>
        /// </summary>
        public static int APPEARANCE_LIGHT_STATUS_BARS { get { if (!_APPEARANCE_LIGHT_STATUS_BARSReady) { _APPEARANCE_LIGHT_STATUS_BARSContent = SGetField<int>(LocalBridgeClazz, "APPEARANCE_LIGHT_STATUS_BARS"); _APPEARANCE_LIGHT_STATUS_BARSReady = true; } return _APPEARANCE_LIGHT_STATUS_BARSContent; } }
        private static int _APPEARANCE_LIGHT_STATUS_BARSContent = default;
        private static bool _APPEARANCE_LIGHT_STATUS_BARSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.html#BEHAVIOR_DEFAULT"/>
        /// </summary>
        public static int BEHAVIOR_DEFAULT { get { if (!_BEHAVIOR_DEFAULTReady) { _BEHAVIOR_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "BEHAVIOR_DEFAULT"); _BEHAVIOR_DEFAULTReady = true; } return _BEHAVIOR_DEFAULTContent; } }
        private static int _BEHAVIOR_DEFAULTContent = default;
        private static bool _BEHAVIOR_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.html#BEHAVIOR_SHOW_BARS_BY_SWIPE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int BEHAVIOR_SHOW_BARS_BY_SWIPE { get { if (!_BEHAVIOR_SHOW_BARS_BY_SWIPEReady) { _BEHAVIOR_SHOW_BARS_BY_SWIPEContent = SGetField<int>(LocalBridgeClazz, "BEHAVIOR_SHOW_BARS_BY_SWIPE"); _BEHAVIOR_SHOW_BARS_BY_SWIPEReady = true; } return _BEHAVIOR_SHOW_BARS_BY_SWIPEContent; } }
        private static int _BEHAVIOR_SHOW_BARS_BY_SWIPEContent = default;
        private static bool _BEHAVIOR_SHOW_BARS_BY_SWIPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.html#BEHAVIOR_SHOW_BARS_BY_TOUCH"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int BEHAVIOR_SHOW_BARS_BY_TOUCH { get { if (!_BEHAVIOR_SHOW_BARS_BY_TOUCHReady) { _BEHAVIOR_SHOW_BARS_BY_TOUCHContent = SGetField<int>(LocalBridgeClazz, "BEHAVIOR_SHOW_BARS_BY_TOUCH"); _BEHAVIOR_SHOW_BARS_BY_TOUCHReady = true; } return _BEHAVIOR_SHOW_BARS_BY_TOUCHContent; } }
        private static int _BEHAVIOR_SHOW_BARS_BY_TOUCHContent = default;
        private static bool _BEHAVIOR_SHOW_BARS_BY_TOUCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.html#BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE"/>
        /// </summary>
        public static int BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE { get { if (!_BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPEReady) { _BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPEContent = SGetField<int>(LocalBridgeClazz, "BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE"); _BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPEReady = true; } return _BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPEContent; } }
        private static int _BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPEContent = default;
        private static bool _BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.html#getSystemBarsAppearance()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSystemBarsAppearance()
        {
            return IExecuteWithSignature<int>("getSystemBarsAppearance", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.html#getSystemBarsBehavior()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSystemBarsBehavior()
        {
            return IExecuteWithSignature<int>("getSystemBarsBehavior", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.html#addOnControllableInsetsChangedListener(android.view.WindowInsetsController.OnControllableInsetsChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsetsController.OnControllableInsetsChangedListener"/></param>
        public void AddOnControllableInsetsChangedListener(Android.View.WindowInsetsController.OnControllableInsetsChangedListener arg0)
        {
            IExecuteWithSignature("addOnControllableInsetsChangedListener", "(Landroid/view/WindowInsetsController$OnControllableInsetsChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.html#controlWindowInsetsAnimation(int,long,android.view.animation.Interpolator,android.os.CancellationSignal,android.view.WindowInsetsAnimationControlListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="Android.View.Animation.Interpolator"/></param>
        /// <param name="arg3"><see cref="Android.Os.CancellationSignal"/></param>
        /// <param name="arg4"><see cref="Android.View.WindowInsetsAnimationControlListener"/></param>
        public void ControlWindowInsetsAnimation(int arg0, long arg1, Android.View.Animation.Interpolator arg2, Android.Os.CancellationSignal arg3, Android.View.WindowInsetsAnimationControlListener arg4)
        {
            IExecute("controlWindowInsetsAnimation", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.html#hide(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void Hide(int arg0)
        {
            IExecuteWithSignature("hide", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.html#removeOnControllableInsetsChangedListener(android.view.WindowInsetsController.OnControllableInsetsChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsetsController.OnControllableInsetsChangedListener"/></param>
        public void RemoveOnControllableInsetsChangedListener(Android.View.WindowInsetsController.OnControllableInsetsChangedListener arg0)
        {
            IExecuteWithSignature("removeOnControllableInsetsChangedListener", "(Landroid/view/WindowInsetsController$OnControllableInsetsChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.html#setSystemBarsAppearance(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetSystemBarsAppearance(int arg0, int arg1)
        {
            IExecute("setSystemBarsAppearance", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.html#setSystemBarsBehavior(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetSystemBarsBehavior(int arg0)
        {
            IExecuteWithSignature("setSystemBarsBehavior", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.html#show(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void Show(int arg0)
        {
            IExecuteWithSignature("show", "(I)V", arg0);
        }

        #endregion

        #region Nested classes
        #region OnControllableInsetsChangedListener
        public partial class OnControllableInsetsChangedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnControllableInsetsChangedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onControllableInsetsChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.WindowInsetsController>>>(OnControllableInsetsChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/WindowInsetsController.OnControllableInsetsChangedListener.html#onControllableInsetsChanged(android.view.WindowInsetsController,int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnControllableInsetsChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.WindowInsetsController, int> OnOnControllableInsetsChanged { get; set; } = null;

            void OnControllableInsetsChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.WindowInsetsController>> data)
            {
                var methodToExecute = (OnOnControllableInsetsChanged != null) ? OnOnControllableInsetsChanged : OnControllableInsetsChanged;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.OnControllableInsetsChangedListener.html#onControllableInsetsChanged(android.view.WindowInsetsController,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.WindowInsetsController"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public virtual void OnControllableInsetsChanged(Android.View.WindowInsetsController arg0, int arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnControllableInsetsChangedListenerDirect
        public partial class OnControllableInsetsChangedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsetsController.OnControllableInsetsChangedListener.html#onControllableInsetsChanged(android.view.WindowInsetsController,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.WindowInsetsController"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public override void OnControllableInsetsChanged(Android.View.WindowInsetsController arg0, int arg1)
            {
                IExecute("onControllableInsetsChanged", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
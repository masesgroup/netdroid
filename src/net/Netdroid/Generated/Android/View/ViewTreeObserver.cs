/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region ViewTreeObserver
    public partial class ViewTreeObserver
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#dispatchOnPreDraw()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchOnPreDraw()
        {
            return IExecuteWithSignature<bool>("dispatchOnPreDraw", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#isAlive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAlive()
        {
            return IExecuteWithSignature<bool>("isAlive", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#unregisterFrameCommitCallback(java.lang.Runnable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Runnable"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool UnregisterFrameCommitCallback(Java.Lang.Runnable arg0)
        {
            return IExecuteWithSignature<bool>("unregisterFrameCommitCallback", "(Ljava/lang/Runnable;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnDrawListener(android.view.ViewTreeObserver.OnDrawListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnDrawListener"/></param>
        public void AddOnDrawListener(Android.View.ViewTreeObserver.OnDrawListener arg0)
        {
            IExecuteWithSignature("addOnDrawListener", "(Landroid/view/ViewTreeObserver$OnDrawListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnGlobalFocusChangeListener(android.view.ViewTreeObserver.OnGlobalFocusChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnGlobalFocusChangeListener"/></param>
        public void AddOnGlobalFocusChangeListener(Android.View.ViewTreeObserver.OnGlobalFocusChangeListener arg0)
        {
            IExecuteWithSignature("addOnGlobalFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnGlobalLayoutListener"/></param>
        public void AddOnGlobalLayoutListener(Android.View.ViewTreeObserver.OnGlobalLayoutListener arg0)
        {
            IExecuteWithSignature("addOnGlobalLayoutListener", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnPreDrawListener(android.view.ViewTreeObserver.OnPreDrawListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnPreDrawListener"/></param>
        public void AddOnPreDrawListener(Android.View.ViewTreeObserver.OnPreDrawListener arg0)
        {
            IExecuteWithSignature("addOnPreDrawListener", "(Landroid/view/ViewTreeObserver$OnPreDrawListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnScrollChangedListener(android.view.ViewTreeObserver.OnScrollChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnScrollChangedListener"/></param>
        public void AddOnScrollChangedListener(Android.View.ViewTreeObserver.OnScrollChangedListener arg0)
        {
            IExecuteWithSignature("addOnScrollChangedListener", "(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        public void AddOnSystemGestureExclusionRectsChangedListener(Java.Util.Function.Consumer<Java.Util.List<Android.Graphics.Rect>> arg0)
        {
            IExecuteWithSignature("addOnSystemGestureExclusionRectsChangedListener", "(Ljava/util/function/Consumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnTouchModeChangeListener(android.view.ViewTreeObserver.OnTouchModeChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnTouchModeChangeListener"/></param>
        public void AddOnTouchModeChangeListener(Android.View.ViewTreeObserver.OnTouchModeChangeListener arg0)
        {
            IExecuteWithSignature("addOnTouchModeChangeListener", "(Landroid/view/ViewTreeObserver$OnTouchModeChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnWindowAttachListener(android.view.ViewTreeObserver.OnWindowAttachListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnWindowAttachListener"/></param>
        public void AddOnWindowAttachListener(Android.View.ViewTreeObserver.OnWindowAttachListener arg0)
        {
            IExecuteWithSignature("addOnWindowAttachListener", "(Landroid/view/ViewTreeObserver$OnWindowAttachListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnWindowFocusChangeListener(android.view.ViewTreeObserver.OnWindowFocusChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnWindowFocusChangeListener"/></param>
        public void AddOnWindowFocusChangeListener(Android.View.ViewTreeObserver.OnWindowFocusChangeListener arg0)
        {
            IExecuteWithSignature("addOnWindowFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnWindowFocusChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnWindowVisibilityChangeListener(android.view.ViewTreeObserver.OnWindowVisibilityChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnWindowVisibilityChangeListener"/></param>
        public void AddOnWindowVisibilityChangeListener(Android.View.ViewTreeObserver.OnWindowVisibilityChangeListener arg0)
        {
            IExecuteWithSignature("addOnWindowVisibilityChangeListener", "(Landroid/view/ViewTreeObserver$OnWindowVisibilityChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#dispatchOnDraw()"/>
        /// </summary>
        public void DispatchOnDraw()
        {
            IExecuteWithSignature("dispatchOnDraw", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#dispatchOnGlobalLayout()"/>
        /// </summary>
        public void DispatchOnGlobalLayout()
        {
            IExecuteWithSignature("dispatchOnGlobalLayout", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#registerFrameCommitCallback(java.lang.Runnable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Runnable"/></param>
        public void RegisterFrameCommitCallback(Java.Lang.Runnable arg0)
        {
            IExecuteWithSignature("registerFrameCommitCallback", "(Ljava/lang/Runnable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeGlobalOnLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnGlobalLayoutListener"/></param>
        [global::System.Obsolete()]
        public void RemoveGlobalOnLayoutListener(Android.View.ViewTreeObserver.OnGlobalLayoutListener arg0)
        {
            IExecuteWithSignature("removeGlobalOnLayoutListener", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnDrawListener(android.view.ViewTreeObserver.OnDrawListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnDrawListener"/></param>
        public void RemoveOnDrawListener(Android.View.ViewTreeObserver.OnDrawListener arg0)
        {
            IExecuteWithSignature("removeOnDrawListener", "(Landroid/view/ViewTreeObserver$OnDrawListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver.OnGlobalFocusChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnGlobalFocusChangeListener"/></param>
        public void RemoveOnGlobalFocusChangeListener(Android.View.ViewTreeObserver.OnGlobalFocusChangeListener arg0)
        {
            IExecuteWithSignature("removeOnGlobalFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnGlobalLayoutListener"/></param>
        public void RemoveOnGlobalLayoutListener(Android.View.ViewTreeObserver.OnGlobalLayoutListener arg0)
        {
            IExecuteWithSignature("removeOnGlobalLayoutListener", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnPreDrawListener(android.view.ViewTreeObserver.OnPreDrawListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnPreDrawListener"/></param>
        public void RemoveOnPreDrawListener(Android.View.ViewTreeObserver.OnPreDrawListener arg0)
        {
            IExecuteWithSignature("removeOnPreDrawListener", "(Landroid/view/ViewTreeObserver$OnPreDrawListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnScrollChangedListener(android.view.ViewTreeObserver.OnScrollChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnScrollChangedListener"/></param>
        public void RemoveOnScrollChangedListener(Android.View.ViewTreeObserver.OnScrollChangedListener arg0)
        {
            IExecuteWithSignature("removeOnScrollChangedListener", "(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        public void RemoveOnSystemGestureExclusionRectsChangedListener(Java.Util.Function.Consumer<Java.Util.List<Android.Graphics.Rect>> arg0)
        {
            IExecuteWithSignature("removeOnSystemGestureExclusionRectsChangedListener", "(Ljava/util/function/Consumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnTouchModeChangeListener(android.view.ViewTreeObserver.OnTouchModeChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnTouchModeChangeListener"/></param>
        public void RemoveOnTouchModeChangeListener(Android.View.ViewTreeObserver.OnTouchModeChangeListener arg0)
        {
            IExecuteWithSignature("removeOnTouchModeChangeListener", "(Landroid/view/ViewTreeObserver$OnTouchModeChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnWindowAttachListener(android.view.ViewTreeObserver.OnWindowAttachListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnWindowAttachListener"/></param>
        public void RemoveOnWindowAttachListener(Android.View.ViewTreeObserver.OnWindowAttachListener arg0)
        {
            IExecuteWithSignature("removeOnWindowAttachListener", "(Landroid/view/ViewTreeObserver$OnWindowAttachListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnWindowFocusChangeListener(android.view.ViewTreeObserver.OnWindowFocusChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnWindowFocusChangeListener"/></param>
        public void RemoveOnWindowFocusChangeListener(Android.View.ViewTreeObserver.OnWindowFocusChangeListener arg0)
        {
            IExecuteWithSignature("removeOnWindowFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnWindowFocusChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnWindowVisibilityChangeListener(android.view.ViewTreeObserver.OnWindowVisibilityChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnWindowVisibilityChangeListener"/></param>
        public void RemoveOnWindowVisibilityChangeListener(Android.View.ViewTreeObserver.OnWindowVisibilityChangeListener arg0)
        {
            IExecuteWithSignature("removeOnWindowVisibilityChangeListener", "(Landroid/view/ViewTreeObserver$OnWindowVisibilityChangeListener;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region OnDrawListener
        public partial class OnDrawListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnDrawListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDraw", new global::System.EventHandler<CLRListenerEventArgs<CLREventData>>(OnDrawEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnDrawListener.html#onDraw()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDraw"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnDraw { get; set; } = null;

            void OnDrawEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
            {
                var methodToExecute = (OnOnDraw != null) ? OnOnDraw : OnDraw;
                methodToExecute.Invoke();
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnDrawListener.html#onDraw()"/>
            /// </summary>
            public virtual void OnDraw()
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnDrawListenerDirect
        public partial class OnDrawListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnDrawListener.html#onDraw()"/>
            /// </summary>
            public override void OnDraw()
            {
                IExecuteWithSignature("onDraw", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGlobalFocusChangeListener
        public partial class OnGlobalFocusChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnGlobalFocusChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onGlobalFocusChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnGlobalFocusChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalFocusChangeListener.html#onGlobalFocusChanged(android.view.View,android.view.View)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGlobalFocusChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.View, Android.View.View> OnOnGlobalFocusChanged { get; set; } = null;

            void OnGlobalFocusChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnGlobalFocusChanged != null) ? OnOnGlobalFocusChanged : OnGlobalFocusChanged;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.View>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalFocusChangeListener.html#onGlobalFocusChanged(android.view.View,android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            public virtual void OnGlobalFocusChanged(Android.View.View arg0, Android.View.View arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGlobalFocusChangeListenerDirect
        public partial class OnGlobalFocusChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalFocusChangeListener.html#onGlobalFocusChanged(android.view.View,android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            public override void OnGlobalFocusChanged(Android.View.View arg0, Android.View.View arg1)
            {
                IExecute("onGlobalFocusChanged", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGlobalLayoutListener
        public partial class OnGlobalLayoutListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnGlobalLayoutListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onGlobalLayout", new global::System.EventHandler<CLRListenerEventArgs<CLREventData>>(OnGlobalLayoutEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalLayoutListener.html#onGlobalLayout()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGlobalLayout"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnGlobalLayout { get; set; } = null;

            void OnGlobalLayoutEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
            {
                var methodToExecute = (OnOnGlobalLayout != null) ? OnOnGlobalLayout : OnGlobalLayout;
                methodToExecute.Invoke();
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalLayoutListener.html#onGlobalLayout()"/>
            /// </summary>
            public virtual void OnGlobalLayout()
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGlobalLayoutListenerDirect
        public partial class OnGlobalLayoutListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalLayoutListener.html#onGlobalLayout()"/>
            /// </summary>
            public override void OnGlobalLayout()
            {
                IExecuteWithSignature("onGlobalLayout", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnPreDrawListener
        public partial class OnPreDrawListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnPreDrawListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onPreDraw", new global::System.EventHandler<CLRListenerEventArgs<CLREventData>>(OnPreDrawEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnPreDrawListener.html#onPreDraw()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPreDraw"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<bool> OnOnPreDraw { get; set; } = null;

            void OnPreDrawEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
            {
                var methodToExecute = (OnOnPreDraw != null) ? OnOnPreDraw : OnPreDraw;
                var executionResult = methodToExecute.Invoke();
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnPreDrawListener.html#onPreDraw()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnPreDraw()
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnPreDrawListenerDirect
        public partial class OnPreDrawListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnPreDrawListener.html#onPreDraw()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public override bool OnPreDraw()
            {
                return IExecuteWithSignature<bool>("onPreDraw", "()Z");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnScrollChangedListener
        public partial class OnScrollChangedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnScrollChangedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onScrollChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData>>(OnScrollChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnScrollChangedListener.html#onScrollChanged()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnScrollChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnScrollChanged { get; set; } = null;

            void OnScrollChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
            {
                var methodToExecute = (OnOnScrollChanged != null) ? OnOnScrollChanged : OnScrollChanged;
                methodToExecute.Invoke();
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnScrollChangedListener.html#onScrollChanged()"/>
            /// </summary>
            public virtual void OnScrollChanged()
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnScrollChangedListenerDirect
        public partial class OnScrollChangedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnScrollChangedListener.html#onScrollChanged()"/>
            /// </summary>
            public override void OnScrollChanged()
            {
                IExecuteWithSignature("onScrollChanged", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnTouchModeChangeListener
        public partial class OnTouchModeChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnTouchModeChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onTouchModeChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<bool>>>(OnTouchModeChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnTouchModeChangeListener.html#onTouchModeChanged(boolean)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnTouchModeChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<bool> OnOnTouchModeChanged { get; set; } = null;

            void OnTouchModeChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<bool>> data)
            {
                var methodToExecute = (OnOnTouchModeChanged != null) ? OnOnTouchModeChanged : OnTouchModeChanged;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnTouchModeChangeListener.html#onTouchModeChanged(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public virtual void OnTouchModeChanged(bool arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnTouchModeChangeListenerDirect
        public partial class OnTouchModeChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnTouchModeChangeListener.html#onTouchModeChanged(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public override void OnTouchModeChanged(bool arg0)
            {
                IExecuteWithSignature("onTouchModeChanged", "(Z)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnWindowAttachListener
        public partial class OnWindowAttachListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnWindowAttachListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onWindowAttached", new global::System.EventHandler<CLRListenerEventArgs<CLREventData>>(OnWindowAttachedEventHandler));
                AddEventHandler("onWindowDetached", new global::System.EventHandler<CLRListenerEventArgs<CLREventData>>(OnWindowDetachedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowAttachListener.html#onWindowAttached()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnWindowAttached"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnWindowAttached { get; set; } = null;

            void OnWindowAttachedEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
            {
                var methodToExecute = (OnOnWindowAttached != null) ? OnOnWindowAttached : OnWindowAttached;
                methodToExecute.Invoke();
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowAttachListener.html#onWindowAttached()"/>
            /// </summary>
            public virtual void OnWindowAttached()
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowAttachListener.html#onWindowDetached()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnWindowDetached"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnWindowDetached { get; set; } = null;

            void OnWindowDetachedEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
            {
                var methodToExecute = (OnOnWindowDetached != null) ? OnOnWindowDetached : OnWindowDetached;
                methodToExecute.Invoke();
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowAttachListener.html#onWindowDetached()"/>
            /// </summary>
            public virtual void OnWindowDetached()
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnWindowAttachListenerDirect
        public partial class OnWindowAttachListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowAttachListener.html#onWindowAttached()"/>
            /// </summary>
            public override void OnWindowAttached()
            {
                IExecuteWithSignature("onWindowAttached", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowAttachListener.html#onWindowDetached()"/>
            /// </summary>
            public override void OnWindowDetached()
            {
                IExecuteWithSignature("onWindowDetached", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnWindowFocusChangeListener
        public partial class OnWindowFocusChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnWindowFocusChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onWindowFocusChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<bool>>>(OnWindowFocusChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowFocusChangeListener.html#onWindowFocusChanged(boolean)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnWindowFocusChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<bool> OnOnWindowFocusChanged { get; set; } = null;

            void OnWindowFocusChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<bool>> data)
            {
                var methodToExecute = (OnOnWindowFocusChanged != null) ? OnOnWindowFocusChanged : OnWindowFocusChanged;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowFocusChangeListener.html#onWindowFocusChanged(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public virtual void OnWindowFocusChanged(bool arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnWindowFocusChangeListenerDirect
        public partial class OnWindowFocusChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowFocusChangeListener.html#onWindowFocusChanged(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public override void OnWindowFocusChanged(bool arg0)
            {
                IExecuteWithSignature("onWindowFocusChanged", "(Z)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnWindowVisibilityChangeListener
        public partial class OnWindowVisibilityChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnWindowVisibilityChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onWindowVisibilityChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(OnWindowVisibilityChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowVisibilityChangeListener.html#onWindowVisibilityChanged(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnWindowVisibilityChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnWindowVisibilityChanged { get; set; } = null;

            void OnWindowVisibilityChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
            {
                var methodToExecute = (OnOnWindowVisibilityChanged != null) ? OnOnWindowVisibilityChanged : OnWindowVisibilityChanged;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowVisibilityChangeListener.html#onWindowVisibilityChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public virtual void OnWindowVisibilityChanged(int arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnWindowVisibilityChangeListenerDirect
        public partial class OnWindowVisibilityChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowVisibilityChangeListener.html#onWindowVisibilityChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnWindowVisibilityChanged(int arg0)
            {
                IExecuteWithSignature("onWindowVisibilityChanged", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
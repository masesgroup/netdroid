/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region ViewTreeObserver declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html"/>
    /// </summary>
    public partial class ViewTreeObserver : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ViewTreeObserver>
    {
        const string _bridgeClassName = "android.view.ViewTreeObserver";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ViewTreeObserver() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ViewTreeObserver(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region OnDrawListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnDrawListener.html"/>
        /// </summary>
        public partial class OnDrawListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnDrawListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.view.ViewTreeObserver_OnDrawListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnDrawListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnDrawListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnDrawListenerDirect : OnDrawListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.view.ViewTreeObserver$OnDrawListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnGlobalFocusChangeListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalFocusChangeListener.html"/>
        /// </summary>
        public partial class OnGlobalFocusChangeListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnGlobalFocusChangeListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.view.ViewTreeObserver_OnGlobalFocusChangeListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnGlobalFocusChangeListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnGlobalFocusChangeListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnGlobalFocusChangeListenerDirect : OnGlobalFocusChangeListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.view.ViewTreeObserver$OnGlobalFocusChangeListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnGlobalLayoutListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalLayoutListener.html"/>
        /// </summary>
        public partial class OnGlobalLayoutListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnGlobalLayoutListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.view.ViewTreeObserver_OnGlobalLayoutListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnGlobalLayoutListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnGlobalLayoutListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnGlobalLayoutListenerDirect : OnGlobalLayoutListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.view.ViewTreeObserver$OnGlobalLayoutListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnPreDrawListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnPreDrawListener.html"/>
        /// </summary>
        public partial class OnPreDrawListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnPreDrawListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.view.ViewTreeObserver_OnPreDrawListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnPreDrawListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnPreDrawListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnPreDrawListenerDirect : OnPreDrawListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.view.ViewTreeObserver$OnPreDrawListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnScrollChangedListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnScrollChangedListener.html"/>
        /// </summary>
        public partial class OnScrollChangedListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnScrollChangedListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.view.ViewTreeObserver_OnScrollChangedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnScrollChangedListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnScrollChangedListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnScrollChangedListenerDirect : OnScrollChangedListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.view.ViewTreeObserver$OnScrollChangedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnTouchModeChangeListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnTouchModeChangeListener.html"/>
        /// </summary>
        public partial class OnTouchModeChangeListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnTouchModeChangeListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.view.ViewTreeObserver_OnTouchModeChangeListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnTouchModeChangeListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnTouchModeChangeListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnTouchModeChangeListenerDirect : OnTouchModeChangeListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.view.ViewTreeObserver$OnTouchModeChangeListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnWindowAttachListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowAttachListener.html"/>
        /// </summary>
        public partial class OnWindowAttachListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnWindowAttachListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.view.ViewTreeObserver_OnWindowAttachListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnWindowAttachListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnWindowAttachListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnWindowAttachListenerDirect : OnWindowAttachListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.view.ViewTreeObserver$OnWindowAttachListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnWindowFocusChangeListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowFocusChangeListener.html"/>
        /// </summary>
        public partial class OnWindowFocusChangeListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnWindowFocusChangeListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.view.ViewTreeObserver_OnWindowFocusChangeListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnWindowFocusChangeListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnWindowFocusChangeListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnWindowFocusChangeListenerDirect : OnWindowFocusChangeListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.view.ViewTreeObserver$OnWindowFocusChangeListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region OnWindowVisibilityChangeListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowVisibilityChangeListener.html"/>
        /// </summary>
        public partial class OnWindowVisibilityChangeListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnWindowVisibilityChangeListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.view.ViewTreeObserver_OnWindowVisibilityChangeListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnWindowVisibilityChangeListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnWindowVisibilityChangeListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnWindowVisibilityChangeListenerDirect : OnWindowVisibilityChangeListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.view.ViewTreeObserver$OnWindowVisibilityChangeListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

    
    }
    #endregion

    #region ViewTreeObserver implementation
    public partial class ViewTreeObserver
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#dispatchOnPreDraw()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool DispatchOnPreDraw()
        {
            return IExecuteWithSignature<bool>("dispatchOnPreDraw", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#isAlive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAlive()
        {
            return IExecuteWithSignature<bool>("isAlive", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#unregisterFrameCommitCallback(java.lang.Runnable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Runnable"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool UnregisterFrameCommitCallback(Java.Lang.Runnable arg0)
        {
            return IExecuteWithSignature<bool>("unregisterFrameCommitCallback", "(Ljava/lang/Runnable;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnDrawListener(android.view.ViewTreeObserver.OnDrawListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnDrawListener"/></param>
        public void AddOnDrawListener(Android.View.ViewTreeObserver.OnDrawListener arg0)
        {
            IExecuteWithSignature("addOnDrawListener", "(Landroid/view/ViewTreeObserver$OnDrawListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnGlobalFocusChangeListener(android.view.ViewTreeObserver.OnGlobalFocusChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnGlobalFocusChangeListener"/></param>
        public void AddOnGlobalFocusChangeListener(Android.View.ViewTreeObserver.OnGlobalFocusChangeListener arg0)
        {
            IExecuteWithSignature("addOnGlobalFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnGlobalLayoutListener"/></param>
        public void AddOnGlobalLayoutListener(Android.View.ViewTreeObserver.OnGlobalLayoutListener arg0)
        {
            IExecuteWithSignature("addOnGlobalLayoutListener", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnPreDrawListener(android.view.ViewTreeObserver.OnPreDrawListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnPreDrawListener"/></param>
        public void AddOnPreDrawListener(Android.View.ViewTreeObserver.OnPreDrawListener arg0)
        {
            IExecuteWithSignature("addOnPreDrawListener", "(Landroid/view/ViewTreeObserver$OnPreDrawListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnScrollChangedListener(android.view.ViewTreeObserver.OnScrollChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnScrollChangedListener"/></param>
        public void AddOnScrollChangedListener(Android.View.ViewTreeObserver.OnScrollChangedListener arg0)
        {
            IExecuteWithSignature("addOnScrollChangedListener", "(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        public void AddOnSystemGestureExclusionRectsChangedListener(Java.Util.Function.Consumer<Java.Util.List<Android.Graphics.Rect>> arg0)
        {
            IExecuteWithSignature("addOnSystemGestureExclusionRectsChangedListener", "(Ljava/util/function/Consumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnTouchModeChangeListener(android.view.ViewTreeObserver.OnTouchModeChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnTouchModeChangeListener"/></param>
        public void AddOnTouchModeChangeListener(Android.View.ViewTreeObserver.OnTouchModeChangeListener arg0)
        {
            IExecuteWithSignature("addOnTouchModeChangeListener", "(Landroid/view/ViewTreeObserver$OnTouchModeChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnWindowAttachListener(android.view.ViewTreeObserver.OnWindowAttachListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnWindowAttachListener"/></param>
        public void AddOnWindowAttachListener(Android.View.ViewTreeObserver.OnWindowAttachListener arg0)
        {
            IExecuteWithSignature("addOnWindowAttachListener", "(Landroid/view/ViewTreeObserver$OnWindowAttachListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnWindowFocusChangeListener(android.view.ViewTreeObserver.OnWindowFocusChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnWindowFocusChangeListener"/></param>
        public void AddOnWindowFocusChangeListener(Android.View.ViewTreeObserver.OnWindowFocusChangeListener arg0)
        {
            IExecuteWithSignature("addOnWindowFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnWindowFocusChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnWindowVisibilityChangeListener(android.view.ViewTreeObserver.OnWindowVisibilityChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnWindowVisibilityChangeListener"/></param>
        public void AddOnWindowVisibilityChangeListener(Android.View.ViewTreeObserver.OnWindowVisibilityChangeListener arg0)
        {
            IExecuteWithSignature("addOnWindowVisibilityChangeListener", "(Landroid/view/ViewTreeObserver$OnWindowVisibilityChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#dispatchOnDraw()"/>
        /// </summary>
        public void DispatchOnDraw()
        {
            IExecuteWithSignature("dispatchOnDraw", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#dispatchOnGlobalLayout()"/>
        /// </summary>
        public void DispatchOnGlobalLayout()
        {
            IExecuteWithSignature("dispatchOnGlobalLayout", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#registerFrameCommitCallback(java.lang.Runnable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Runnable"/></param>
        public void RegisterFrameCommitCallback(Java.Lang.Runnable arg0)
        {
            IExecuteWithSignature("registerFrameCommitCallback", "(Ljava/lang/Runnable;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeGlobalOnLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnGlobalLayoutListener"/></param>
        [global::System.Obsolete()]
        public void RemoveGlobalOnLayoutListener(Android.View.ViewTreeObserver.OnGlobalLayoutListener arg0)
        {
            IExecuteWithSignature("removeGlobalOnLayoutListener", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnDrawListener(android.view.ViewTreeObserver.OnDrawListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnDrawListener"/></param>
        public void RemoveOnDrawListener(Android.View.ViewTreeObserver.OnDrawListener arg0)
        {
            IExecuteWithSignature("removeOnDrawListener", "(Landroid/view/ViewTreeObserver$OnDrawListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver.OnGlobalFocusChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnGlobalFocusChangeListener"/></param>
        public void RemoveOnGlobalFocusChangeListener(Android.View.ViewTreeObserver.OnGlobalFocusChangeListener arg0)
        {
            IExecuteWithSignature("removeOnGlobalFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnGlobalLayoutListener"/></param>
        public void RemoveOnGlobalLayoutListener(Android.View.ViewTreeObserver.OnGlobalLayoutListener arg0)
        {
            IExecuteWithSignature("removeOnGlobalLayoutListener", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnPreDrawListener(android.view.ViewTreeObserver.OnPreDrawListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnPreDrawListener"/></param>
        public void RemoveOnPreDrawListener(Android.View.ViewTreeObserver.OnPreDrawListener arg0)
        {
            IExecuteWithSignature("removeOnPreDrawListener", "(Landroid/view/ViewTreeObserver$OnPreDrawListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnScrollChangedListener(android.view.ViewTreeObserver.OnScrollChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnScrollChangedListener"/></param>
        public void RemoveOnScrollChangedListener(Android.View.ViewTreeObserver.OnScrollChangedListener arg0)
        {
            IExecuteWithSignature("removeOnScrollChangedListener", "(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        public void RemoveOnSystemGestureExclusionRectsChangedListener(Java.Util.Function.Consumer<Java.Util.List<Android.Graphics.Rect>> arg0)
        {
            IExecuteWithSignature("removeOnSystemGestureExclusionRectsChangedListener", "(Ljava/util/function/Consumer;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnTouchModeChangeListener(android.view.ViewTreeObserver.OnTouchModeChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnTouchModeChangeListener"/></param>
        public void RemoveOnTouchModeChangeListener(Android.View.ViewTreeObserver.OnTouchModeChangeListener arg0)
        {
            IExecuteWithSignature("removeOnTouchModeChangeListener", "(Landroid/view/ViewTreeObserver$OnTouchModeChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnWindowAttachListener(android.view.ViewTreeObserver.OnWindowAttachListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnWindowAttachListener"/></param>
        public void RemoveOnWindowAttachListener(Android.View.ViewTreeObserver.OnWindowAttachListener arg0)
        {
            IExecuteWithSignature("removeOnWindowAttachListener", "(Landroid/view/ViewTreeObserver$OnWindowAttachListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnWindowFocusChangeListener(android.view.ViewTreeObserver.OnWindowFocusChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnWindowFocusChangeListener"/></param>
        public void RemoveOnWindowFocusChangeListener(Android.View.ViewTreeObserver.OnWindowFocusChangeListener arg0)
        {
            IExecuteWithSignature("removeOnWindowFocusChangeListener", "(Landroid/view/ViewTreeObserver$OnWindowFocusChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnWindowVisibilityChangeListener(android.view.ViewTreeObserver.OnWindowVisibilityChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewTreeObserver.OnWindowVisibilityChangeListener"/></param>
        public void RemoveOnWindowVisibilityChangeListener(Android.View.ViewTreeObserver.OnWindowVisibilityChangeListener arg0)
        {
            IExecuteWithSignature("removeOnWindowVisibilityChangeListener", "(Landroid/view/ViewTreeObserver$OnWindowVisibilityChangeListener;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region OnDrawListener implementation
        public partial class OnDrawListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnDrawListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDraw", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnDrawEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnDrawListener.html#onDraw()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDraw"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnDraw { get; set; } = null;

            bool hasOverrideOnDraw = true;
            void OnDrawEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnDraw = true;
                var methodToExecute = (OnOnDraw != null) ? OnOnDraw : OnDraw;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnDraw;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnDrawListener.html#onDraw()"/>
            /// </summary>
            public virtual void OnDraw()
            {
                hasOverrideOnDraw = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnDrawListenerDirect implementation
        public partial class OnDrawListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnDrawListener.html#onDraw()"/>
            /// </summary>
            public override void OnDraw()
            {
                IExecuteWithSignature("onDraw", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGlobalFocusChangeListener implementation
        public partial class OnGlobalFocusChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnGlobalFocusChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onGlobalFocusChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGlobalFocusChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalFocusChangeListener.html#onGlobalFocusChanged(android.view.View,android.view.View)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGlobalFocusChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.View, Android.View.View> OnOnGlobalFocusChanged { get; set; } = null;

            bool hasOverrideOnGlobalFocusChanged = true;
            void OnGlobalFocusChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnGlobalFocusChanged = true;
                var methodToExecute = (OnOnGlobalFocusChanged != null) ? OnOnGlobalFocusChanged : OnGlobalFocusChanged;
                methodToExecute.Invoke(data.EventData.GetAt<Android.View.View>(0), data.EventData.GetAt<Android.View.View>(1));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnGlobalFocusChanged;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalFocusChangeListener.html#onGlobalFocusChanged(android.view.View,android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            public virtual void OnGlobalFocusChanged(Android.View.View arg0, Android.View.View arg1)
            {
                hasOverrideOnGlobalFocusChanged = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGlobalFocusChangeListenerDirect implementation
        public partial class OnGlobalFocusChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalFocusChangeListener.html#onGlobalFocusChanged(android.view.View,android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            public override void OnGlobalFocusChanged(Android.View.View arg0, Android.View.View arg1)
            {
                IExecuteWithSignature("onGlobalFocusChanged", "(Landroid/view/View;Landroid/view/View;)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGlobalLayoutListener implementation
        public partial class OnGlobalLayoutListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnGlobalLayoutListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onGlobalLayout", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnGlobalLayoutEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalLayoutListener.html#onGlobalLayout()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnGlobalLayout"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnGlobalLayout { get; set; } = null;

            bool hasOverrideOnGlobalLayout = true;
            void OnGlobalLayoutEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnGlobalLayout = true;
                var methodToExecute = (OnOnGlobalLayout != null) ? OnOnGlobalLayout : OnGlobalLayout;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnGlobalLayout;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalLayoutListener.html#onGlobalLayout()"/>
            /// </summary>
            public virtual void OnGlobalLayout()
            {
                hasOverrideOnGlobalLayout = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGlobalLayoutListenerDirect implementation
        public partial class OnGlobalLayoutListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnGlobalLayoutListener.html#onGlobalLayout()"/>
            /// </summary>
            public override void OnGlobalLayout()
            {
                IExecuteWithSignature("onGlobalLayout", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnPreDrawListener implementation
        public partial class OnPreDrawListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnPreDrawListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onPreDraw", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnPreDrawEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnPreDrawListener.html#onPreDraw()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnPreDraw"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Func<bool> OnOnPreDraw { get; set; } = null;

            bool hasOverrideOnPreDraw = true;
            void OnPreDrawEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnPreDraw = true;
                var methodToExecute = (OnOnPreDraw != null) ? OnOnPreDraw : OnPreDraw;
                var executionResult = methodToExecute.Invoke();
                data.EventData.TypedEventData.SetReturnData(hasOverrideOnPreDraw, executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnPreDrawListener.html#onPreDraw()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnPreDraw()
            {
                hasOverrideOnPreDraw = false; return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnPreDrawListenerDirect implementation
        public partial class OnPreDrawListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnPreDrawListener.html#onPreDraw()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public override bool OnPreDraw()
            {
                return IExecuteWithSignature<bool>("onPreDraw", "()Z");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnScrollChangedListener implementation
        public partial class OnScrollChangedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnScrollChangedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onScrollChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnScrollChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnScrollChangedListener.html#onScrollChanged()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnScrollChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnScrollChanged { get; set; } = null;

            bool hasOverrideOnScrollChanged = true;
            void OnScrollChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnScrollChanged = true;
                var methodToExecute = (OnOnScrollChanged != null) ? OnOnScrollChanged : OnScrollChanged;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnScrollChanged;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnScrollChangedListener.html#onScrollChanged()"/>
            /// </summary>
            public virtual void OnScrollChanged()
            {
                hasOverrideOnScrollChanged = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnScrollChangedListenerDirect implementation
        public partial class OnScrollChangedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnScrollChangedListener.html#onScrollChanged()"/>
            /// </summary>
            public override void OnScrollChanged()
            {
                IExecuteWithSignature("onScrollChanged", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnTouchModeChangeListener implementation
        public partial class OnTouchModeChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnTouchModeChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onTouchModeChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnTouchModeChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnTouchModeChangeListener.html#onTouchModeChanged(boolean)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnTouchModeChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<bool> OnOnTouchModeChanged { get; set; } = null;

            bool hasOverrideOnTouchModeChanged = true;
            void OnTouchModeChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnTouchModeChanged = true;
                var methodToExecute = (OnOnTouchModeChanged != null) ? OnOnTouchModeChanged : OnTouchModeChanged;
                methodToExecute.Invoke(data.EventData.GetAt<bool>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnTouchModeChanged;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnTouchModeChangeListener.html#onTouchModeChanged(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public virtual void OnTouchModeChanged(bool arg0)
            {
                hasOverrideOnTouchModeChanged = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnTouchModeChangeListenerDirect implementation
        public partial class OnTouchModeChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnTouchModeChangeListener.html#onTouchModeChanged(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public override void OnTouchModeChanged(bool arg0)
            {
                IExecuteWithSignature("onTouchModeChanged", "(Z)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnWindowAttachListener implementation
        public partial class OnWindowAttachListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnWindowAttachListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onWindowAttached", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnWindowAttachedEventHandler));
                AddEventHandler("onWindowDetached", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnWindowDetachedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowAttachListener.html#onWindowAttached()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnWindowAttached"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnWindowAttached { get; set; } = null;

            bool hasOverrideOnWindowAttached = true;
            void OnWindowAttachedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnWindowAttached = true;
                var methodToExecute = (OnOnWindowAttached != null) ? OnOnWindowAttached : OnWindowAttached;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnWindowAttached;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowAttachListener.html#onWindowAttached()"/>
            /// </summary>
            public virtual void OnWindowAttached()
            {
                hasOverrideOnWindowAttached = false;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowAttachListener.html#onWindowDetached()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnWindowDetached"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnWindowDetached { get; set; } = null;

            bool hasOverrideOnWindowDetached = true;
            void OnWindowDetachedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnWindowDetached = true;
                var methodToExecute = (OnOnWindowDetached != null) ? OnOnWindowDetached : OnWindowDetached;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnWindowDetached;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowAttachListener.html#onWindowDetached()"/>
            /// </summary>
            public virtual void OnWindowDetached()
            {
                hasOverrideOnWindowDetached = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnWindowAttachListenerDirect implementation
        public partial class OnWindowAttachListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowAttachListener.html#onWindowAttached()"/>
            /// </summary>
            public override void OnWindowAttached()
            {
                IExecuteWithSignature("onWindowAttached", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowAttachListener.html#onWindowDetached()"/>
            /// </summary>
            public override void OnWindowDetached()
            {
                IExecuteWithSignature("onWindowDetached", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnWindowFocusChangeListener implementation
        public partial class OnWindowFocusChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnWindowFocusChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onWindowFocusChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnWindowFocusChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowFocusChangeListener.html#onWindowFocusChanged(boolean)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnWindowFocusChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<bool> OnOnWindowFocusChanged { get; set; } = null;

            bool hasOverrideOnWindowFocusChanged = true;
            void OnWindowFocusChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnWindowFocusChanged = true;
                var methodToExecute = (OnOnWindowFocusChanged != null) ? OnOnWindowFocusChanged : OnWindowFocusChanged;
                methodToExecute.Invoke(data.EventData.GetAt<bool>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnWindowFocusChanged;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowFocusChangeListener.html#onWindowFocusChanged(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public virtual void OnWindowFocusChanged(bool arg0)
            {
                hasOverrideOnWindowFocusChanged = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnWindowFocusChangeListenerDirect implementation
        public partial class OnWindowFocusChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowFocusChangeListener.html#onWindowFocusChanged(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public override void OnWindowFocusChanged(bool arg0)
            {
                IExecuteWithSignature("onWindowFocusChanged", "(Z)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnWindowVisibilityChangeListener implementation
        public partial class OnWindowVisibilityChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnWindowVisibilityChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onWindowVisibilityChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnWindowVisibilityChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowVisibilityChangeListener.html#onWindowVisibilityChanged(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnWindowVisibilityChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnWindowVisibilityChanged { get; set; } = null;

            bool hasOverrideOnWindowVisibilityChanged = true;
            void OnWindowVisibilityChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnWindowVisibilityChanged = true;
                var methodToExecute = (OnOnWindowVisibilityChanged != null) ? OnOnWindowVisibilityChanged : OnWindowVisibilityChanged;
                methodToExecute.Invoke(data.EventData.GetAt<int>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnWindowVisibilityChanged;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowVisibilityChangeListener.html#onWindowVisibilityChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public virtual void OnWindowVisibilityChanged(int arg0)
            {
                hasOverrideOnWindowVisibilityChanged = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnWindowVisibilityChangeListenerDirect implementation
        public partial class OnWindowVisibilityChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewTreeObserver.OnWindowVisibilityChangeListener.html#onWindowVisibilityChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnWindowVisibilityChanged(int arg0)
            {
                IExecuteWithSignature("onWindowVisibilityChanged", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region AttachedSurfaceControl declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/AttachedSurfaceControl.html"/>
    /// </summary>
    public partial class AttachedSurfaceControl : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AttachedSurfaceControl>
    {
        const string _bridgeClassName = "android.view.AttachedSurfaceControl";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("AttachedSurfaceControl class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public AttachedSurfaceControl() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("AttachedSurfaceControl class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public AttachedSurfaceControl(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region OnBufferTransformHintChangedListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/AttachedSurfaceControl.OnBufferTransformHintChangedListener.html"/>
        /// </summary>
        public partial class OnBufferTransformHintChangedListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public OnBufferTransformHintChangedListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.view.AttachedSurfaceControl_OnBufferTransformHintChangedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region OnBufferTransformHintChangedListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="OnBufferTransformHintChangedListener"/> or its generic type if there is one
        /// </summary>
        public partial class OnBufferTransformHintChangedListenerDirect : OnBufferTransformHintChangedListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

    
    }
    #endregion

    #region IAttachedSurfaceControl
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IAttachedSurfaceControl
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region AttachedSurfaceControl implementation
    public partial class AttachedSurfaceControl : Android.View.IAttachedSurfaceControl
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/AttachedSurfaceControl.html#buildReparentTransaction(android.view.SurfaceControl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
        /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
        public Android.View.SurfaceControl.Transaction BuildReparentTransaction(Android.View.SurfaceControl arg0)
        {
            return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("buildReparentTransaction", "(Landroid/view/SurfaceControl;)Landroid/view/SurfaceControl$Transaction;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/AttachedSurfaceControl.html#applyTransactionOnDraw(android.view.SurfaceControl.Transaction)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.SurfaceControl.Transaction"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ApplyTransactionOnDraw(Android.View.SurfaceControl.Transaction arg0)
        {
            return IExecuteWithSignature<bool>("applyTransactionOnDraw", "(Landroid/view/SurfaceControl$Transaction;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/AttachedSurfaceControl.html#getInputTransferToken()"/>
        /// </summary>
        /// <returns><see cref="Android.Window.InputTransferToken"/></returns>
        public Android.Window.InputTransferToken GetInputTransferToken()
        {
            return IExecuteWithSignature<Android.Window.InputTransferToken>("getInputTransferToken", "()Landroid/window/InputTransferToken;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/AttachedSurfaceControl.html#getBufferTransformHint()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetBufferTransformHint()
        {
            return IExecuteWithSignature<int>("getBufferTransformHint", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/AttachedSurfaceControl.html#addOnBufferTransformHintChangedListener(android.view.AttachedSurfaceControl.OnBufferTransformHintChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.AttachedSurfaceControl.OnBufferTransformHintChangedListener"/></param>
        public void AddOnBufferTransformHintChangedListener(Android.View.AttachedSurfaceControl.OnBufferTransformHintChangedListener arg0)
        {
            IExecuteWithSignature("addOnBufferTransformHintChangedListener", "(Landroid/view/AttachedSurfaceControl$OnBufferTransformHintChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/AttachedSurfaceControl.html#removeOnBufferTransformHintChangedListener(android.view.AttachedSurfaceControl.OnBufferTransformHintChangedListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.AttachedSurfaceControl.OnBufferTransformHintChangedListener"/></param>
        public void RemoveOnBufferTransformHintChangedListener(Android.View.AttachedSurfaceControl.OnBufferTransformHintChangedListener arg0)
        {
            IExecuteWithSignature("removeOnBufferTransformHintChangedListener", "(Landroid/view/AttachedSurfaceControl$OnBufferTransformHintChangedListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/AttachedSurfaceControl.html#setChildBoundingInsets(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public void SetChildBoundingInsets(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("setChildBoundingInsets", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/AttachedSurfaceControl.html#setTouchableRegion(android.graphics.Region)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Region"/></param>
        public void SetTouchableRegion(Android.Graphics.Region arg0)
        {
            IExecuteWithSignature("setTouchableRegion", "(Landroid/graphics/Region;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region OnBufferTransformHintChangedListener implementation
        public partial class OnBufferTransformHintChangedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnBufferTransformHintChangedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onBufferTransformHintChanged", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnBufferTransformHintChangedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/AttachedSurfaceControl.OnBufferTransformHintChangedListener.html#onBufferTransformHintChanged(int)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnBufferTransformHintChanged"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<int> OnOnBufferTransformHintChanged { get; set; } = null;

            bool hasOverrideOnBufferTransformHintChanged = true;
            void OnBufferTransformHintChangedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnBufferTransformHintChanged = true;
                var methodToExecute = (OnOnBufferTransformHintChanged != null) ? OnOnBufferTransformHintChanged : OnBufferTransformHintChanged;
                methodToExecute.Invoke(data.EventData.GetAt<int>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideOnBufferTransformHintChanged;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/AttachedSurfaceControl.OnBufferTransformHintChangedListener.html#onBufferTransformHintChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public virtual void OnBufferTransformHintChanged(int arg0)
            {
                hasOverrideOnBufferTransformHintChanged = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnBufferTransformHintChangedListenerDirect implementation
        public partial class OnBufferTransformHintChangedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/AttachedSurfaceControl.OnBufferTransformHintChangedListener.html#onBufferTransformHintChanged(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public override void OnBufferTransformHintChanged(int arg0)
            {
                IExecuteWithSignature("onBufferTransformHintChanged", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region PointerIcon
    public partial class PointerIcon
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_ALIAS"/>
        /// </summary>
        public static int TYPE_ALIAS { get { if (!_TYPE_ALIASReady) { _TYPE_ALIASContent = SGetField<int>(LocalBridgeClazz, "TYPE_ALIAS"); _TYPE_ALIASReady = true; } return _TYPE_ALIASContent; } }
        private static int _TYPE_ALIASContent = default;
        private static bool _TYPE_ALIASReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_ALL_SCROLL"/>
        /// </summary>
        public static int TYPE_ALL_SCROLL { get { if (!_TYPE_ALL_SCROLLReady) { _TYPE_ALL_SCROLLContent = SGetField<int>(LocalBridgeClazz, "TYPE_ALL_SCROLL"); _TYPE_ALL_SCROLLReady = true; } return _TYPE_ALL_SCROLLContent; } }
        private static int _TYPE_ALL_SCROLLContent = default;
        private static bool _TYPE_ALL_SCROLLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_ARROW"/>
        /// </summary>
        public static int TYPE_ARROW { get { if (!_TYPE_ARROWReady) { _TYPE_ARROWContent = SGetField<int>(LocalBridgeClazz, "TYPE_ARROW"); _TYPE_ARROWReady = true; } return _TYPE_ARROWContent; } }
        private static int _TYPE_ARROWContent = default;
        private static bool _TYPE_ARROWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_CELL"/>
        /// </summary>
        public static int TYPE_CELL { get { if (!_TYPE_CELLReady) { _TYPE_CELLContent = SGetField<int>(LocalBridgeClazz, "TYPE_CELL"); _TYPE_CELLReady = true; } return _TYPE_CELLContent; } }
        private static int _TYPE_CELLContent = default;
        private static bool _TYPE_CELLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_CONTEXT_MENU"/>
        /// </summary>
        public static int TYPE_CONTEXT_MENU { get { if (!_TYPE_CONTEXT_MENUReady) { _TYPE_CONTEXT_MENUContent = SGetField<int>(LocalBridgeClazz, "TYPE_CONTEXT_MENU"); _TYPE_CONTEXT_MENUReady = true; } return _TYPE_CONTEXT_MENUContent; } }
        private static int _TYPE_CONTEXT_MENUContent = default;
        private static bool _TYPE_CONTEXT_MENUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_COPY"/>
        /// </summary>
        public static int TYPE_COPY { get { if (!_TYPE_COPYReady) { _TYPE_COPYContent = SGetField<int>(LocalBridgeClazz, "TYPE_COPY"); _TYPE_COPYReady = true; } return _TYPE_COPYContent; } }
        private static int _TYPE_COPYContent = default;
        private static bool _TYPE_COPYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_CROSSHAIR"/>
        /// </summary>
        public static int TYPE_CROSSHAIR { get { if (!_TYPE_CROSSHAIRReady) { _TYPE_CROSSHAIRContent = SGetField<int>(LocalBridgeClazz, "TYPE_CROSSHAIR"); _TYPE_CROSSHAIRReady = true; } return _TYPE_CROSSHAIRContent; } }
        private static int _TYPE_CROSSHAIRContent = default;
        private static bool _TYPE_CROSSHAIRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_DEFAULT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int TYPE_DEFAULT { get { if (!_TYPE_DEFAULTReady) { _TYPE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "TYPE_DEFAULT"); _TYPE_DEFAULTReady = true; } return _TYPE_DEFAULTContent; } }
        private static int _TYPE_DEFAULTContent = default;
        private static bool _TYPE_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_GRAB"/>
        /// </summary>
        public static int TYPE_GRAB { get { if (!_TYPE_GRABReady) { _TYPE_GRABContent = SGetField<int>(LocalBridgeClazz, "TYPE_GRAB"); _TYPE_GRABReady = true; } return _TYPE_GRABContent; } }
        private static int _TYPE_GRABContent = default;
        private static bool _TYPE_GRABReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_GRABBING"/>
        /// </summary>
        public static int TYPE_GRABBING { get { if (!_TYPE_GRABBINGReady) { _TYPE_GRABBINGContent = SGetField<int>(LocalBridgeClazz, "TYPE_GRABBING"); _TYPE_GRABBINGReady = true; } return _TYPE_GRABBINGContent; } }
        private static int _TYPE_GRABBINGContent = default;
        private static bool _TYPE_GRABBINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_HAND"/>
        /// </summary>
        public static int TYPE_HAND { get { if (!_TYPE_HANDReady) { _TYPE_HANDContent = SGetField<int>(LocalBridgeClazz, "TYPE_HAND"); _TYPE_HANDReady = true; } return _TYPE_HANDContent; } }
        private static int _TYPE_HANDContent = default;
        private static bool _TYPE_HANDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_HANDWRITING"/>
        /// </summary>
        public static int TYPE_HANDWRITING { get { if (!_TYPE_HANDWRITINGReady) { _TYPE_HANDWRITINGContent = SGetField<int>(LocalBridgeClazz, "TYPE_HANDWRITING"); _TYPE_HANDWRITINGReady = true; } return _TYPE_HANDWRITINGContent; } }
        private static int _TYPE_HANDWRITINGContent = default;
        private static bool _TYPE_HANDWRITINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_HELP"/>
        /// </summary>
        public static int TYPE_HELP { get { if (!_TYPE_HELPReady) { _TYPE_HELPContent = SGetField<int>(LocalBridgeClazz, "TYPE_HELP"); _TYPE_HELPReady = true; } return _TYPE_HELPContent; } }
        private static int _TYPE_HELPContent = default;
        private static bool _TYPE_HELPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_HORIZONTAL_DOUBLE_ARROW"/>
        /// </summary>
        public static int TYPE_HORIZONTAL_DOUBLE_ARROW { get { if (!_TYPE_HORIZONTAL_DOUBLE_ARROWReady) { _TYPE_HORIZONTAL_DOUBLE_ARROWContent = SGetField<int>(LocalBridgeClazz, "TYPE_HORIZONTAL_DOUBLE_ARROW"); _TYPE_HORIZONTAL_DOUBLE_ARROWReady = true; } return _TYPE_HORIZONTAL_DOUBLE_ARROWContent; } }
        private static int _TYPE_HORIZONTAL_DOUBLE_ARROWContent = default;
        private static bool _TYPE_HORIZONTAL_DOUBLE_ARROWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_NO_DROP"/>
        /// </summary>
        public static int TYPE_NO_DROP { get { if (!_TYPE_NO_DROPReady) { _TYPE_NO_DROPContent = SGetField<int>(LocalBridgeClazz, "TYPE_NO_DROP"); _TYPE_NO_DROPReady = true; } return _TYPE_NO_DROPContent; } }
        private static int _TYPE_NO_DROPContent = default;
        private static bool _TYPE_NO_DROPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_NULL"/>
        /// </summary>
        public static int TYPE_NULL { get { if (!_TYPE_NULLReady) { _TYPE_NULLContent = SGetField<int>(LocalBridgeClazz, "TYPE_NULL"); _TYPE_NULLReady = true; } return _TYPE_NULLContent; } }
        private static int _TYPE_NULLContent = default;
        private static bool _TYPE_NULLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_TEXT"/>
        /// </summary>
        public static int TYPE_TEXT { get { if (!_TYPE_TEXTReady) { _TYPE_TEXTContent = SGetField<int>(LocalBridgeClazz, "TYPE_TEXT"); _TYPE_TEXTReady = true; } return _TYPE_TEXTContent; } }
        private static int _TYPE_TEXTContent = default;
        private static bool _TYPE_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW"/>
        /// </summary>
        public static int TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW { get { if (!_TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROWReady) { _TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROWContent = SGetField<int>(LocalBridgeClazz, "TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW"); _TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROWReady = true; } return _TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROWContent; } }
        private static int _TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROWContent = default;
        private static bool _TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW"/>
        /// </summary>
        public static int TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW { get { if (!_TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROWReady) { _TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROWContent = SGetField<int>(LocalBridgeClazz, "TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW"); _TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROWReady = true; } return _TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROWContent; } }
        private static int _TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROWContent = default;
        private static bool _TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_VERTICAL_DOUBLE_ARROW"/>
        /// </summary>
        public static int TYPE_VERTICAL_DOUBLE_ARROW { get { if (!_TYPE_VERTICAL_DOUBLE_ARROWReady) { _TYPE_VERTICAL_DOUBLE_ARROWContent = SGetField<int>(LocalBridgeClazz, "TYPE_VERTICAL_DOUBLE_ARROW"); _TYPE_VERTICAL_DOUBLE_ARROWReady = true; } return _TYPE_VERTICAL_DOUBLE_ARROWContent; } }
        private static int _TYPE_VERTICAL_DOUBLE_ARROWContent = default;
        private static bool _TYPE_VERTICAL_DOUBLE_ARROWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_VERTICAL_TEXT"/>
        /// </summary>
        public static int TYPE_VERTICAL_TEXT { get { if (!_TYPE_VERTICAL_TEXTReady) { _TYPE_VERTICAL_TEXTContent = SGetField<int>(LocalBridgeClazz, "TYPE_VERTICAL_TEXT"); _TYPE_VERTICAL_TEXTReady = true; } return _TYPE_VERTICAL_TEXTContent; } }
        private static int _TYPE_VERTICAL_TEXTContent = default;
        private static bool _TYPE_VERTICAL_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_WAIT"/>
        /// </summary>
        public static int TYPE_WAIT { get { if (!_TYPE_WAITReady) { _TYPE_WAITContent = SGetField<int>(LocalBridgeClazz, "TYPE_WAIT"); _TYPE_WAITReady = true; } return _TYPE_WAITContent; } }
        private static int _TYPE_WAITContent = default;
        private static bool _TYPE_WAITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_ZOOM_IN"/>
        /// </summary>
        public static int TYPE_ZOOM_IN { get { if (!_TYPE_ZOOM_INReady) { _TYPE_ZOOM_INContent = SGetField<int>(LocalBridgeClazz, "TYPE_ZOOM_IN"); _TYPE_ZOOM_INReady = true; } return _TYPE_ZOOM_INContent; } }
        private static int _TYPE_ZOOM_INContent = default;
        private static bool _TYPE_ZOOM_INReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_ZOOM_OUT"/>
        /// </summary>
        public static int TYPE_ZOOM_OUT { get { if (!_TYPE_ZOOM_OUTReady) { _TYPE_ZOOM_OUTContent = SGetField<int>(LocalBridgeClazz, "TYPE_ZOOM_OUT"); _TYPE_ZOOM_OUTReady = true; } return _TYPE_ZOOM_OUTContent; } }
        private static int _TYPE_ZOOM_OUTContent = default;
        private static bool _TYPE_ZOOM_OUTReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#create(android.graphics.Bitmap,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Bitmap"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <returns><see cref="Android.View.PointerIcon"/></returns>
        public static Android.View.PointerIcon Create(Android.Graphics.Bitmap arg0, float arg1, float arg2)
        {
            return SExecute<Android.View.PointerIcon>(LocalBridgeClazz, "create", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#getSystemIcon(android.content.Context,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.View.PointerIcon"/></returns>
        public static Android.View.PointerIcon GetSystemIcon(Android.Content.Context arg0, int arg1)
        {
            return SExecute<Android.View.PointerIcon>(LocalBridgeClazz, "getSystemIcon", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#load(android.content.res.Resources,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.View.PointerIcon"/></returns>
        public static Android.View.PointerIcon Load(Android.Content.Res.Resources arg0, int arg1)
        {
            return SExecute<Android.View.PointerIcon>(LocalBridgeClazz, "load", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/PointerIcon.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
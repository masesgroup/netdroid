/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View.Inputmethod
{
    #region IInputConnection
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IInputConnection
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region InputConnection
    public partial class InputConnection : Android.View.Inputmethod.IInputConnection
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#CURSOR_UPDATE_FILTER_CHARACTER_BOUNDS"/>
        /// </summary>
        public static int CURSOR_UPDATE_FILTER_CHARACTER_BOUNDS { get { if (!_CURSOR_UPDATE_FILTER_CHARACTER_BOUNDSReady) { _CURSOR_UPDATE_FILTER_CHARACTER_BOUNDSContent = SGetField<int>(LocalBridgeClazz, "CURSOR_UPDATE_FILTER_CHARACTER_BOUNDS"); _CURSOR_UPDATE_FILTER_CHARACTER_BOUNDSReady = true; } return _CURSOR_UPDATE_FILTER_CHARACTER_BOUNDSContent; } }
        private static int _CURSOR_UPDATE_FILTER_CHARACTER_BOUNDSContent = default;
        private static bool _CURSOR_UPDATE_FILTER_CHARACTER_BOUNDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#CURSOR_UPDATE_FILTER_EDITOR_BOUNDS"/>
        /// </summary>
        public static int CURSOR_UPDATE_FILTER_EDITOR_BOUNDS { get { if (!_CURSOR_UPDATE_FILTER_EDITOR_BOUNDSReady) { _CURSOR_UPDATE_FILTER_EDITOR_BOUNDSContent = SGetField<int>(LocalBridgeClazz, "CURSOR_UPDATE_FILTER_EDITOR_BOUNDS"); _CURSOR_UPDATE_FILTER_EDITOR_BOUNDSReady = true; } return _CURSOR_UPDATE_FILTER_EDITOR_BOUNDSContent; } }
        private static int _CURSOR_UPDATE_FILTER_EDITOR_BOUNDSContent = default;
        private static bool _CURSOR_UPDATE_FILTER_EDITOR_BOUNDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#CURSOR_UPDATE_FILTER_INSERTION_MARKER"/>
        /// </summary>
        public static int CURSOR_UPDATE_FILTER_INSERTION_MARKER { get { if (!_CURSOR_UPDATE_FILTER_INSERTION_MARKERReady) { _CURSOR_UPDATE_FILTER_INSERTION_MARKERContent = SGetField<int>(LocalBridgeClazz, "CURSOR_UPDATE_FILTER_INSERTION_MARKER"); _CURSOR_UPDATE_FILTER_INSERTION_MARKERReady = true; } return _CURSOR_UPDATE_FILTER_INSERTION_MARKERContent; } }
        private static int _CURSOR_UPDATE_FILTER_INSERTION_MARKERContent = default;
        private static bool _CURSOR_UPDATE_FILTER_INSERTION_MARKERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#CURSOR_UPDATE_FILTER_TEXT_APPEARANCE"/>
        /// </summary>
        public static int CURSOR_UPDATE_FILTER_TEXT_APPEARANCE { get { if (!_CURSOR_UPDATE_FILTER_TEXT_APPEARANCEReady) { _CURSOR_UPDATE_FILTER_TEXT_APPEARANCEContent = SGetField<int>(LocalBridgeClazz, "CURSOR_UPDATE_FILTER_TEXT_APPEARANCE"); _CURSOR_UPDATE_FILTER_TEXT_APPEARANCEReady = true; } return _CURSOR_UPDATE_FILTER_TEXT_APPEARANCEContent; } }
        private static int _CURSOR_UPDATE_FILTER_TEXT_APPEARANCEContent = default;
        private static bool _CURSOR_UPDATE_FILTER_TEXT_APPEARANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#CURSOR_UPDATE_FILTER_VISIBLE_LINE_BOUNDS"/>
        /// </summary>
        public static int CURSOR_UPDATE_FILTER_VISIBLE_LINE_BOUNDS { get { if (!_CURSOR_UPDATE_FILTER_VISIBLE_LINE_BOUNDSReady) { _CURSOR_UPDATE_FILTER_VISIBLE_LINE_BOUNDSContent = SGetField<int>(LocalBridgeClazz, "CURSOR_UPDATE_FILTER_VISIBLE_LINE_BOUNDS"); _CURSOR_UPDATE_FILTER_VISIBLE_LINE_BOUNDSReady = true; } return _CURSOR_UPDATE_FILTER_VISIBLE_LINE_BOUNDSContent; } }
        private static int _CURSOR_UPDATE_FILTER_VISIBLE_LINE_BOUNDSContent = default;
        private static bool _CURSOR_UPDATE_FILTER_VISIBLE_LINE_BOUNDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#CURSOR_UPDATE_IMMEDIATE"/>
        /// </summary>
        public static int CURSOR_UPDATE_IMMEDIATE { get { if (!_CURSOR_UPDATE_IMMEDIATEReady) { _CURSOR_UPDATE_IMMEDIATEContent = SGetField<int>(LocalBridgeClazz, "CURSOR_UPDATE_IMMEDIATE"); _CURSOR_UPDATE_IMMEDIATEReady = true; } return _CURSOR_UPDATE_IMMEDIATEContent; } }
        private static int _CURSOR_UPDATE_IMMEDIATEContent = default;
        private static bool _CURSOR_UPDATE_IMMEDIATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#CURSOR_UPDATE_MONITOR"/>
        /// </summary>
        public static int CURSOR_UPDATE_MONITOR { get { if (!_CURSOR_UPDATE_MONITORReady) { _CURSOR_UPDATE_MONITORContent = SGetField<int>(LocalBridgeClazz, "CURSOR_UPDATE_MONITOR"); _CURSOR_UPDATE_MONITORReady = true; } return _CURSOR_UPDATE_MONITORContent; } }
        private static int _CURSOR_UPDATE_MONITORContent = default;
        private static bool _CURSOR_UPDATE_MONITORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#GET_EXTRACTED_TEXT_MONITOR"/>
        /// </summary>
        public static int GET_EXTRACTED_TEXT_MONITOR { get { if (!_GET_EXTRACTED_TEXT_MONITORReady) { _GET_EXTRACTED_TEXT_MONITORContent = SGetField<int>(LocalBridgeClazz, "GET_EXTRACTED_TEXT_MONITOR"); _GET_EXTRACTED_TEXT_MONITORReady = true; } return _GET_EXTRACTED_TEXT_MONITORContent; } }
        private static int _GET_EXTRACTED_TEXT_MONITORContent = default;
        private static bool _GET_EXTRACTED_TEXT_MONITORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#GET_TEXT_WITH_STYLES"/>
        /// </summary>
        public static int GET_TEXT_WITH_STYLES { get { if (!_GET_TEXT_WITH_STYLESReady) { _GET_TEXT_WITH_STYLESContent = SGetField<int>(LocalBridgeClazz, "GET_TEXT_WITH_STYLES"); _GET_TEXT_WITH_STYLESReady = true; } return _GET_TEXT_WITH_STYLESContent; } }
        private static int _GET_TEXT_WITH_STYLESContent = default;
        private static bool _GET_TEXT_WITH_STYLESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#HANDWRITING_GESTURE_RESULT_CANCELLED"/>
        /// </summary>
        public static int HANDWRITING_GESTURE_RESULT_CANCELLED { get { if (!_HANDWRITING_GESTURE_RESULT_CANCELLEDReady) { _HANDWRITING_GESTURE_RESULT_CANCELLEDContent = SGetField<int>(LocalBridgeClazz, "HANDWRITING_GESTURE_RESULT_CANCELLED"); _HANDWRITING_GESTURE_RESULT_CANCELLEDReady = true; } return _HANDWRITING_GESTURE_RESULT_CANCELLEDContent; } }
        private static int _HANDWRITING_GESTURE_RESULT_CANCELLEDContent = default;
        private static bool _HANDWRITING_GESTURE_RESULT_CANCELLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#HANDWRITING_GESTURE_RESULT_FAILED"/>
        /// </summary>
        public static int HANDWRITING_GESTURE_RESULT_FAILED { get { if (!_HANDWRITING_GESTURE_RESULT_FAILEDReady) { _HANDWRITING_GESTURE_RESULT_FAILEDContent = SGetField<int>(LocalBridgeClazz, "HANDWRITING_GESTURE_RESULT_FAILED"); _HANDWRITING_GESTURE_RESULT_FAILEDReady = true; } return _HANDWRITING_GESTURE_RESULT_FAILEDContent; } }
        private static int _HANDWRITING_GESTURE_RESULT_FAILEDContent = default;
        private static bool _HANDWRITING_GESTURE_RESULT_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#HANDWRITING_GESTURE_RESULT_FALLBACK"/>
        /// </summary>
        public static int HANDWRITING_GESTURE_RESULT_FALLBACK { get { if (!_HANDWRITING_GESTURE_RESULT_FALLBACKReady) { _HANDWRITING_GESTURE_RESULT_FALLBACKContent = SGetField<int>(LocalBridgeClazz, "HANDWRITING_GESTURE_RESULT_FALLBACK"); _HANDWRITING_GESTURE_RESULT_FALLBACKReady = true; } return _HANDWRITING_GESTURE_RESULT_FALLBACKContent; } }
        private static int _HANDWRITING_GESTURE_RESULT_FALLBACKContent = default;
        private static bool _HANDWRITING_GESTURE_RESULT_FALLBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#HANDWRITING_GESTURE_RESULT_SUCCESS"/>
        /// </summary>
        public static int HANDWRITING_GESTURE_RESULT_SUCCESS { get { if (!_HANDWRITING_GESTURE_RESULT_SUCCESSReady) { _HANDWRITING_GESTURE_RESULT_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "HANDWRITING_GESTURE_RESULT_SUCCESS"); _HANDWRITING_GESTURE_RESULT_SUCCESSReady = true; } return _HANDWRITING_GESTURE_RESULT_SUCCESSContent; } }
        private static int _HANDWRITING_GESTURE_RESULT_SUCCESSContent = default;
        private static bool _HANDWRITING_GESTURE_RESULT_SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#HANDWRITING_GESTURE_RESULT_UNKNOWN"/>
        /// </summary>
        public static int HANDWRITING_GESTURE_RESULT_UNKNOWN { get { if (!_HANDWRITING_GESTURE_RESULT_UNKNOWNReady) { _HANDWRITING_GESTURE_RESULT_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "HANDWRITING_GESTURE_RESULT_UNKNOWN"); _HANDWRITING_GESTURE_RESULT_UNKNOWNReady = true; } return _HANDWRITING_GESTURE_RESULT_UNKNOWNContent; } }
        private static int _HANDWRITING_GESTURE_RESULT_UNKNOWNContent = default;
        private static bool _HANDWRITING_GESTURE_RESULT_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#HANDWRITING_GESTURE_RESULT_UNSUPPORTED"/>
        /// </summary>
        public static int HANDWRITING_GESTURE_RESULT_UNSUPPORTED { get { if (!_HANDWRITING_GESTURE_RESULT_UNSUPPORTEDReady) { _HANDWRITING_GESTURE_RESULT_UNSUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "HANDWRITING_GESTURE_RESULT_UNSUPPORTED"); _HANDWRITING_GESTURE_RESULT_UNSUPPORTEDReady = true; } return _HANDWRITING_GESTURE_RESULT_UNSUPPORTEDContent; } }
        private static int _HANDWRITING_GESTURE_RESULT_UNSUPPORTEDContent = default;
        private static bool _HANDWRITING_GESTURE_RESULT_UNSUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#INPUT_CONTENT_GRANT_READ_URI_PERMISSION"/>
        /// </summary>
        public static int INPUT_CONTENT_GRANT_READ_URI_PERMISSION { get { if (!_INPUT_CONTENT_GRANT_READ_URI_PERMISSIONReady) { _INPUT_CONTENT_GRANT_READ_URI_PERMISSIONContent = SGetField<int>(LocalBridgeClazz, "INPUT_CONTENT_GRANT_READ_URI_PERMISSION"); _INPUT_CONTENT_GRANT_READ_URI_PERMISSIONReady = true; } return _INPUT_CONTENT_GRANT_READ_URI_PERMISSIONContent; } }
        private static int _INPUT_CONTENT_GRANT_READ_URI_PERMISSIONContent = default;
        private static bool _INPUT_CONTENT_GRANT_READ_URI_PERMISSIONReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#getHandler()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Handler"/></returns>
        public Android.Os.Handler GetHandler()
        {
            return IExecuteWithSignature<Android.Os.Handler>("getHandler", "()Landroid/os/Handler;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.ExtractedTextRequest"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.View.Inputmethod.ExtractedText"/></returns>
        public Android.View.Inputmethod.ExtractedText GetExtractedText(Android.View.Inputmethod.ExtractedTextRequest arg0, int arg1)
        {
            return IExecute<Android.View.Inputmethod.ExtractedText>("getExtractedText", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#beginBatchEdit()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool BeginBatchEdit()
        {
            return IExecuteWithSignature<bool>("beginBatchEdit", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#clearMetaKeyStates(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ClearMetaKeyStates(int arg0)
        {
            return IExecuteWithSignature<bool>("clearMetaKeyStates", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#commitCompletion(android.view.inputmethod.CompletionInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.CompletionInfo"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CommitCompletion(Android.View.Inputmethod.CompletionInfo arg0)
        {
            return IExecuteWithSignature<bool>("commitCompletion", "(Landroid/view/inputmethod/CompletionInfo;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.InputContentInfo"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CommitContent(Android.View.Inputmethod.InputContentInfo arg0, int arg1, Android.Os.Bundle arg2)
        {
            return IExecute<bool>("commitContent", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#commitCorrection(android.view.inputmethod.CorrectionInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.CorrectionInfo"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CommitCorrection(Android.View.Inputmethod.CorrectionInfo arg0)
        {
            return IExecuteWithSignature<bool>("commitCorrection", "(Landroid/view/inputmethod/CorrectionInfo;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#commitText(java.lang.CharSequence,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CommitText(Java.Lang.CharSequence arg0, int arg1)
        {
            return IExecute<bool>("commitText", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#deleteSurroundingText(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DeleteSurroundingText(int arg0, int arg1)
        {
            return IExecute<bool>("deleteSurroundingText", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#deleteSurroundingTextInCodePoints(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DeleteSurroundingTextInCodePoints(int arg0, int arg1)
        {
            return IExecute<bool>("deleteSurroundingTextInCodePoints", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#endBatchEdit()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool EndBatchEdit()
        {
            return IExecuteWithSignature<bool>("endBatchEdit", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#finishComposingText()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool FinishComposingText()
        {
            return IExecuteWithSignature<bool>("finishComposingText", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#performContextMenuAction(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PerformContextMenuAction(int arg0)
        {
            return IExecuteWithSignature<bool>("performContextMenuAction", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#performEditorAction(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PerformEditorAction(int arg0)
        {
            return IExecuteWithSignature<bool>("performEditorAction", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#performPrivateCommand(java.lang.String,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PerformPrivateCommand(Java.Lang.String arg0, Android.Os.Bundle arg1)
        {
            return IExecute<bool>("performPrivateCommand", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#reportFullscreenMode(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ReportFullscreenMode(bool arg0)
        {
            return IExecuteWithSignature<bool>("reportFullscreenMode", "(Z)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#requestCursorUpdates(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestCursorUpdates(int arg0)
        {
            return IExecuteWithSignature<bool>("requestCursorUpdates", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#sendKeyEvent(android.view.KeyEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.KeyEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SendKeyEvent(Android.View.KeyEvent arg0)
        {
            return IExecuteWithSignature<bool>("sendKeyEvent", "(Landroid/view/KeyEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#setComposingRegion(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetComposingRegion(int arg0, int arg1)
        {
            return IExecute<bool>("setComposingRegion", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#setComposingText(java.lang.CharSequence,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetComposingText(Java.Lang.CharSequence arg0, int arg1)
        {
            return IExecute<bool>("setComposingText", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#setSelection(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetSelection(int arg0, int arg1)
        {
            return IExecute<bool>("setSelection", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#getCursorCapsMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetCursorCapsMode(int arg0)
        {
            return IExecuteWithSignature<int>("getCursorCapsMode", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#getSelectedText(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetSelectedText(int arg0)
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getSelectedText", "(I)Ljava/lang/CharSequence;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#getTextAfterCursor(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetTextAfterCursor(int arg0, int arg1)
        {
            return IExecute<Java.Lang.CharSequence>("getTextAfterCursor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#getTextBeforeCursor(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetTextBeforeCursor(int arg0, int arg1)
        {
            return IExecute<Java.Lang.CharSequence>("getTextBeforeCursor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#closeConnection()"/>
        /// </summary>
        public void CloseConnection()
        {
            IExecuteWithSignature("closeConnection", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#getSurroundingText(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.View.Inputmethod.SurroundingText"/></returns>
        public Android.View.Inputmethod.SurroundingText GetSurroundingText(int arg0, int arg1, int arg2)
        {
            return IExecute<Android.View.Inputmethod.SurroundingText>("getSurroundingText", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#takeSnapshot()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Inputmethod.TextSnapshot"/></returns>
        public Android.View.Inputmethod.TextSnapshot TakeSnapshot()
        {
            return IExecuteWithSignature<Android.View.Inputmethod.TextSnapshot>("takeSnapshot", "()Landroid/view/inputmethod/TextSnapshot;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#commitText(java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.View.Inputmethod.TextAttribute"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CommitText(Java.Lang.CharSequence arg0, int arg1, Android.View.Inputmethod.TextAttribute arg2)
        {
            return IExecute<bool>("commitText", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#performSpellCheck()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool PerformSpellCheck()
        {
            return IExecuteWithSignature<bool>("performSpellCheck", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#previewHandwritingGesture(android.view.inputmethod.PreviewableHandwritingGesture,android.os.CancellationSignal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.PreviewableHandwritingGesture"/></param>
        /// <param name="arg1"><see cref="Android.Os.CancellationSignal"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PreviewHandwritingGesture(Android.View.Inputmethod.PreviewableHandwritingGesture arg0, Android.Os.CancellationSignal arg1)
        {
            return IExecute<bool>("previewHandwritingGesture", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#replaceText(int,int,java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Android.View.Inputmethod.TextAttribute"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ReplaceText(int arg0, int arg1, Java.Lang.CharSequence arg2, int arg3, Android.View.Inputmethod.TextAttribute arg4)
        {
            return IExecute<bool>("replaceText", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#requestCursorUpdates(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestCursorUpdates(int arg0, int arg1)
        {
            return IExecute<bool>("requestCursorUpdates", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#setComposingRegion(int,int,android.view.inputmethod.TextAttribute)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.View.Inputmethod.TextAttribute"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetComposingRegion(int arg0, int arg1, Android.View.Inputmethod.TextAttribute arg2)
        {
            return IExecute<bool>("setComposingRegion", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#setComposingText(java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.View.Inputmethod.TextAttribute"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetComposingText(Java.Lang.CharSequence arg0, int arg1, Android.View.Inputmethod.TextAttribute arg2)
        {
            return IExecute<bool>("setComposingText", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#setImeConsumesInput(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetImeConsumesInput(bool arg0)
        {
            return IExecuteWithSignature<bool>("setImeConsumesInput", "(Z)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#performHandwritingGesture(android.view.inputmethod.HandwritingGesture,java.util.concurrent.Executor,java.util.function.IntConsumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Inputmethod.HandwritingGesture"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.IntConsumer"/></param>
        public void PerformHandwritingGesture(Android.View.Inputmethod.HandwritingGesture arg0, Java.Util.Concurrent.Executor arg1, Java.Util.Function.IntConsumer arg2)
        {
            IExecute("performHandwritingGesture", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/inputmethod/InputConnection.html#requestTextBoundsInfo(android.graphics.RectF,java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.RectF"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.Consumer"/></param>
        public void RequestTextBoundsInfo(Android.Graphics.RectF arg0, Java.Util.Concurrent.Executor arg1, Java.Util.Function.Consumer<Android.View.Inputmethod.TextBoundsInfoResult> arg2)
        {
            IExecute("requestTextBoundsInfo", arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
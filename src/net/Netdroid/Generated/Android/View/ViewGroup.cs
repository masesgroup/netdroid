/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region ViewGroup
    public partial class ViewGroup : Android.View.IViewParent, Android.View.IViewManager
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public ViewGroup(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2, int arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public ViewGroup(Android.Content.Context arg0, Android.Util.AttributeSet arg1, int arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
        public ViewGroup(Android.Content.Context arg0, Android.Util.AttributeSet arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#%3Cinit%3E(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        public ViewGroup(Android.Content.Context arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.View.ViewGroup"/> to <see cref="Android.View.ViewParent"/>
        /// </summary>
        public static implicit operator Android.View.ViewParent(Android.View.ViewGroup t) => t.Cast<Android.View.ViewParent>();
        /// <summary>
        /// Converter from <see cref="Android.View.ViewGroup"/> to <see cref="Android.View.ViewManager"/>
        /// </summary>
        public static implicit operator Android.View.ViewManager(Android.View.ViewGroup t) => t.Cast<Android.View.ViewManager>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#FOCUS_AFTER_DESCENDANTS"/>
        /// </summary>
        public static int FOCUS_AFTER_DESCENDANTS { get { if (!_FOCUS_AFTER_DESCENDANTSReady) { _FOCUS_AFTER_DESCENDANTSContent = SGetField<int>(LocalBridgeClazz, "FOCUS_AFTER_DESCENDANTS"); _FOCUS_AFTER_DESCENDANTSReady = true; } return _FOCUS_AFTER_DESCENDANTSContent; } }
        private static int _FOCUS_AFTER_DESCENDANTSContent = default;
        private static bool _FOCUS_AFTER_DESCENDANTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#FOCUS_BEFORE_DESCENDANTS"/>
        /// </summary>
        public static int FOCUS_BEFORE_DESCENDANTS { get { if (!_FOCUS_BEFORE_DESCENDANTSReady) { _FOCUS_BEFORE_DESCENDANTSContent = SGetField<int>(LocalBridgeClazz, "FOCUS_BEFORE_DESCENDANTS"); _FOCUS_BEFORE_DESCENDANTSReady = true; } return _FOCUS_BEFORE_DESCENDANTSContent; } }
        private static int _FOCUS_BEFORE_DESCENDANTSContent = default;
        private static bool _FOCUS_BEFORE_DESCENDANTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#FOCUS_BLOCK_DESCENDANTS"/>
        /// </summary>
        public static int FOCUS_BLOCK_DESCENDANTS { get { if (!_FOCUS_BLOCK_DESCENDANTSReady) { _FOCUS_BLOCK_DESCENDANTSContent = SGetField<int>(LocalBridgeClazz, "FOCUS_BLOCK_DESCENDANTS"); _FOCUS_BLOCK_DESCENDANTSReady = true; } return _FOCUS_BLOCK_DESCENDANTSContent; } }
        private static int _FOCUS_BLOCK_DESCENDANTSContent = default;
        private static bool _FOCUS_BLOCK_DESCENDANTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#LAYOUT_MODE_CLIP_BOUNDS"/>
        /// </summary>
        public static int LAYOUT_MODE_CLIP_BOUNDS { get { if (!_LAYOUT_MODE_CLIP_BOUNDSReady) { _LAYOUT_MODE_CLIP_BOUNDSContent = SGetField<int>(LocalBridgeClazz, "LAYOUT_MODE_CLIP_BOUNDS"); _LAYOUT_MODE_CLIP_BOUNDSReady = true; } return _LAYOUT_MODE_CLIP_BOUNDSContent; } }
        private static int _LAYOUT_MODE_CLIP_BOUNDSContent = default;
        private static bool _LAYOUT_MODE_CLIP_BOUNDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#LAYOUT_MODE_OPTICAL_BOUNDS"/>
        /// </summary>
        public static int LAYOUT_MODE_OPTICAL_BOUNDS { get { if (!_LAYOUT_MODE_OPTICAL_BOUNDSReady) { _LAYOUT_MODE_OPTICAL_BOUNDSContent = SGetField<int>(LocalBridgeClazz, "LAYOUT_MODE_OPTICAL_BOUNDS"); _LAYOUT_MODE_OPTICAL_BOUNDSReady = true; } return _LAYOUT_MODE_OPTICAL_BOUNDSContent; } }
        private static int _LAYOUT_MODE_OPTICAL_BOUNDSContent = default;
        private static bool _LAYOUT_MODE_OPTICAL_BOUNDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#PERSISTENT_ALL_CACHES"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PERSISTENT_ALL_CACHES { get { if (!_PERSISTENT_ALL_CACHESReady) { _PERSISTENT_ALL_CACHESContent = SGetField<int>(LocalBridgeClazz, "PERSISTENT_ALL_CACHES"); _PERSISTENT_ALL_CACHESReady = true; } return _PERSISTENT_ALL_CACHESContent; } }
        private static int _PERSISTENT_ALL_CACHESContent = default;
        private static bool _PERSISTENT_ALL_CACHESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#PERSISTENT_ANIMATION_CACHE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PERSISTENT_ANIMATION_CACHE { get { if (!_PERSISTENT_ANIMATION_CACHEReady) { _PERSISTENT_ANIMATION_CACHEContent = SGetField<int>(LocalBridgeClazz, "PERSISTENT_ANIMATION_CACHE"); _PERSISTENT_ANIMATION_CACHEReady = true; } return _PERSISTENT_ANIMATION_CACHEContent; } }
        private static int _PERSISTENT_ANIMATION_CACHEContent = default;
        private static bool _PERSISTENT_ANIMATION_CACHEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#PERSISTENT_NO_CACHE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PERSISTENT_NO_CACHE { get { if (!_PERSISTENT_NO_CACHEReady) { _PERSISTENT_NO_CACHEContent = SGetField<int>(LocalBridgeClazz, "PERSISTENT_NO_CACHE"); _PERSISTENT_NO_CACHEReady = true; } return _PERSISTENT_NO_CACHEContent; } }
        private static int _PERSISTENT_NO_CACHEContent = default;
        private static bool _PERSISTENT_NO_CACHEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#PERSISTENT_SCROLLING_CACHE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int PERSISTENT_SCROLLING_CACHE { get { if (!_PERSISTENT_SCROLLING_CACHEReady) { _PERSISTENT_SCROLLING_CACHEContent = SGetField<int>(LocalBridgeClazz, "PERSISTENT_SCROLLING_CACHE"); _PERSISTENT_SCROLLING_CACHEReady = true; } return _PERSISTENT_SCROLLING_CACHEContent; } }
        private static int _PERSISTENT_SCROLLING_CACHEContent = default;
        private static bool _PERSISTENT_SCROLLING_CACHEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getChildMeasureSpec(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int GetChildMeasureSpec(int arg0, int arg1, int arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "getChildMeasureSpec", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getLayoutTransition()"/>
        /// </summary>
        /// <returns><see cref="Android.Animation.LayoutTransition"/></returns>
        public Android.Animation.LayoutTransition GetLayoutTransition()
        {
            return IExecuteWithSignature<Android.Animation.LayoutTransition>("getLayoutTransition", "()Landroid/animation/LayoutTransition;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#startActionModeForChild(android.view.View,android.view.ActionMode.Callback,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.ActionMode.Callback"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Android.View.ActionMode"/></returns>
        public Android.View.ActionMode StartActionModeForChild(Android.View.View arg0, Android.View.ActionMode.Callback arg1, int arg2)
        {
            return IExecute<Android.View.ActionMode>("startActionModeForChild", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#startActionModeForChild(android.view.View,android.view.ActionMode.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.ActionMode.Callback"/></param>
        /// <returns><see cref="Android.View.ActionMode"/></returns>
        public Android.View.ActionMode StartActionModeForChild(Android.View.View arg0, Android.View.ActionMode.Callback arg1)
        {
            return IExecute<Android.View.ActionMode>("startActionModeForChild", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getLayoutAnimationListener()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Animation.Animation.AnimationListener"/></returns>
        public Android.View.Animation.Animation.AnimationListener GetLayoutAnimationListener()
        {
            return IExecuteWithSignature<Android.View.Animation.Animation.AnimationListener>("getLayoutAnimationListener", "()Landroid/view/animation/Animation$AnimationListener;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getLayoutAnimationListener()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Animation.Animation.AnimationListener"/></returns>
        public Android.View.Animation.Animation.AnimationListener GetLayoutAnimationListenerDirect()
        {
            return IExecuteWithSignature<Android.View.Animation.Animation.AnimationListenerDirect, Android.View.Animation.Animation.AnimationListener>("getLayoutAnimationListener", "()Landroid/view/animation/Animation$AnimationListener;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getLayoutAnimation()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Animation.LayoutAnimationController"/></returns>
        public Android.View.Animation.LayoutAnimationController GetLayoutAnimation()
        {
            return IExecuteWithSignature<Android.View.Animation.LayoutAnimationController>("getLayoutAnimation", "()Landroid/view/animation/LayoutAnimationController;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#focusSearch(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.View.View"/></returns>
        public Android.View.View FocusSearch(Android.View.View arg0, int arg1)
        {
            return IExecute<Android.View.View>("focusSearch", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getChildAt(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.View.View"/></returns>
        public Android.View.View GetChildAt(int arg0)
        {
            return IExecuteWithSignature<Android.View.View>("getChildAt", "(I)Landroid/view/View;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getFocusedChild()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View"/></returns>
        public Android.View.View GetFocusedChild()
        {
            return IExecuteWithSignature<Android.View.View>("getFocusedChild", "()Landroid/view/View;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#generateLayoutParams(android.util.AttributeSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.AttributeSet"/></param>
        /// <returns><see cref="Android.View.ViewGroup.LayoutParams"/></returns>
        public Android.View.ViewGroup.LayoutParams GenerateLayoutParams(Android.Util.AttributeSet arg0)
        {
            return IExecuteWithSignature<Android.View.ViewGroup.LayoutParams>("generateLayoutParams", "(Landroid/util/AttributeSet;)Landroid/view/ViewGroup$LayoutParams;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#invalidateChildInParent(int[],android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="Android.View.ViewParent"/></returns>
        [global::System.Obsolete()]
        public Android.View.ViewParent InvalidateChildInParent(int[] arg0, Android.Graphics.Rect arg1)
        {
            return IExecute<Android.View.ViewParent>("invalidateChildInParent", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#findOnBackInvokedDispatcherForChild(android.view.View,android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.View"/></param>
        /// <returns><see cref="Android.Window.OnBackInvokedDispatcher"/></returns>
        public Android.Window.OnBackInvokedDispatcher FindOnBackInvokedDispatcherForChild(Android.View.View arg0, Android.View.View arg1)
        {
            return IExecute<Android.Window.OnBackInvokedDispatcher>("findOnBackInvokedDispatcherForChild", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#addStatesFromChildren()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool AddStatesFromChildren()
        {
            return IExecuteWithSignature<bool>("addStatesFromChildren", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg2"><see cref="Android.Graphics.Point"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GetChildVisibleRect(Android.View.View arg0, Android.Graphics.Rect arg1, Android.Graphics.Point arg2)
        {
            return IExecute<bool>("getChildVisibleRect", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getClipChildren()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetClipChildren()
        {
            return IExecuteWithSignature<bool>("getClipChildren", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getClipToPadding()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetClipToPadding()
        {
            return IExecuteWithSignature<bool>("getClipToPadding", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getTouchscreenBlocksFocus()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool GetTouchscreenBlocksFocus()
        {
            return IExecuteWithSignature<bool>("getTouchscreenBlocksFocus", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#isAlwaysDrawnWithCacheEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsAlwaysDrawnWithCacheEnabled()
        {
            return IExecuteWithSignature<bool>("isAlwaysDrawnWithCacheEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#isAnimationCacheEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool IsAnimationCacheEnabled()
        {
            return IExecuteWithSignature<bool>("isAnimationCacheEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#isLayoutSuppressed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLayoutSuppressed()
        {
            return IExecuteWithSignature<bool>("isLayoutSuppressed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#isMotionEventSplittingEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMotionEventSplittingEnabled()
        {
            return IExecuteWithSignature<bool>("isMotionEventSplittingEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#isTransitionGroup()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTransitionGroup()
        {
            return IExecuteWithSignature<bool>("isTransitionGroup", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#onInterceptHoverEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnInterceptHoverEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("onInterceptHoverEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#onInterceptTouchEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnInterceptTouchEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("onInterceptTouchEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#onNestedFling(android.view.View,float,float,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnNestedFling(Android.View.View arg0, float arg1, float arg2, bool arg3)
        {
            return IExecute<bool>("onNestedFling", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#onNestedPreFling(android.view.View,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnNestedPreFling(Android.View.View arg0, float arg1, float arg2)
        {
            return IExecute<bool>("onNestedPreFling", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#onNestedPrePerformAccessibilityAction(android.view.View,int,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnNestedPrePerformAccessibilityAction(Android.View.View arg0, int arg1, Android.Os.Bundle arg2)
        {
            return IExecute<bool>("onNestedPrePerformAccessibilityAction", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.Accessibility.AccessibilityEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnRequestSendAccessibilityEvent(Android.View.View arg0, Android.View.Accessibility.AccessibilityEvent arg1)
        {
            return IExecute<bool>("onRequestSendAccessibilityEvent", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#onStartNestedScroll(android.view.View,android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.View"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnStartNestedScroll(Android.View.View arg0, Android.View.View arg1, int arg2)
        {
            return IExecute<bool>("onStartNestedScroll", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestChildRectangleOnScreen(Android.View.View arg0, Android.Graphics.Rect arg1, bool arg2)
        {
            return IExecute<bool>("requestChildRectangleOnScreen", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.Accessibility.AccessibilityEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestSendAccessibilityEvent(Android.View.View arg0, Android.View.Accessibility.AccessibilityEvent arg1)
        {
            return IExecute<bool>("requestSendAccessibilityEvent", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#shouldDelayChildPressedState()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool ShouldDelayChildPressedState()
        {
            return IExecuteWithSignature<bool>("shouldDelayChildPressedState", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#showContextMenuForChild(android.view.View,float,float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="float"/></param>
        /// <param name="arg2"><see cref="float"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ShowContextMenuForChild(Android.View.View arg0, float arg1, float arg2)
        {
            return IExecute<bool>("showContextMenuForChild", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#showContextMenuForChild(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ShowContextMenuForChild(Android.View.View arg0)
        {
            return IExecuteWithSignature<bool>("showContextMenuForChild", "(Landroid/view/View;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getChildDrawingOrder(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetChildDrawingOrder(int arg0)
        {
            return IExecuteWithSignature<int>("getChildDrawingOrder", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#invalidateChild(android.view.View,android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
        [global::System.Obsolete()]
        public void InvalidateChild(Android.View.View arg0, Android.Graphics.Rect arg1)
        {
            IExecute("invalidateChild", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
        public void OffsetDescendantRectToMyCoords(Android.View.View arg0, Android.Graphics.Rect arg1)
        {
            IExecute("offsetDescendantRectToMyCoords", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#offsetRectIntoDescendantCoords(android.view.View,android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
        public void OffsetRectIntoDescendantCoords(Android.View.View arg0, Android.Graphics.Rect arg1)
        {
            IExecute("offsetRectIntoDescendantCoords", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getChildCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetChildCount()
        {
            return IExecuteWithSignature<int>("getChildCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getDescendantFocusability()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDescendantFocusability()
        {
            return IExecuteWithSignature<int>("getDescendantFocusability", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getLayoutMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLayoutMode()
        {
            return IExecuteWithSignature<int>("getLayoutMode", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getNestedScrollAxes()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetNestedScrollAxes()
        {
            return IExecuteWithSignature<int>("getNestedScrollAxes", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#getPersistentDrawingCache()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetPersistentDrawingCache()
        {
            return IExecuteWithSignature<int>("getPersistentDrawingCache", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#indexOfChild(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <returns><see cref="int"/></returns>
        public int IndexOfChild(Android.View.View arg0)
        {
            return IExecuteWithSignature<int>("indexOfChild", "(Landroid/view/View;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#addView(android.view.View,android.view.ViewGroup.LayoutParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.ViewGroup.LayoutParams"/></param>
        public void AddView(Android.View.View arg0, Android.View.ViewGroup.LayoutParams arg1)
        {
            IExecute("addView", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#addView(android.view.View,int,android.view.ViewGroup.LayoutParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Android.View.ViewGroup.LayoutParams"/></param>
        public void AddView(Android.View.View arg0, int arg1, Android.View.ViewGroup.LayoutParams arg2)
        {
            IExecute("addView", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#addView(android.view.View,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void AddView(Android.View.View arg0, int arg1, int arg2)
        {
            IExecute("addView", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#addView(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void AddView(Android.View.View arg0, int arg1)
        {
            IExecute("addView", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#addView(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void AddView(Android.View.View arg0)
        {
            IExecuteWithSignature("addView", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#bringChildToFront(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void BringChildToFront(Android.View.View arg0)
        {
            IExecuteWithSignature("bringChildToFront", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#childDrawableStateChanged(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void ChildDrawableStateChanged(Android.View.View arg0)
        {
            IExecuteWithSignature("childDrawableStateChanged", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#childHasTransientStateChanged(android.view.View,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void ChildHasTransientStateChanged(Android.View.View arg0, bool arg1)
        {
            IExecute("childHasTransientStateChanged", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#clearChildFocus(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void ClearChildFocus(Android.View.View arg0)
        {
            IExecuteWithSignature("clearChildFocus", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#clearDisappearingChildren()"/>
        /// </summary>
        public void ClearDisappearingChildren()
        {
            IExecuteWithSignature("clearDisappearingChildren", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#dispatchSetActivated(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void DispatchSetActivated(bool arg0)
        {
            IExecuteWithSignature("dispatchSetActivated", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#dispatchSetSelected(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void DispatchSetSelected(bool arg0)
        {
            IExecuteWithSignature("dispatchSetSelected", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#endViewTransition(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void EndViewTransition(Android.View.View arg0)
        {
            IExecuteWithSignature("endViewTransition", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#focusableViewAvailable(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void FocusableViewAvailable(Android.View.View arg0)
        {
            IExecuteWithSignature("focusableViewAvailable", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.View"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void NotifySubtreeAccessibilityStateChanged(Android.View.View arg0, Android.View.View arg1, int arg2)
        {
            IExecute("notifySubtreeAccessibilityStateChanged", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#onDescendantInvalidated(android.view.View,android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.View"/></param>
        public void OnDescendantInvalidated(Android.View.View arg0, Android.View.View arg1)
        {
            IExecute("onDescendantInvalidated", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#onNestedPreScroll(android.view.View,int,int,int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        public void OnNestedPreScroll(Android.View.View arg0, int arg1, int arg2, int[] arg3)
        {
            IExecute("onNestedPreScroll", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#onNestedScroll(android.view.View,int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        public void OnNestedScroll(Android.View.View arg0, int arg1, int arg2, int arg3, int arg4)
        {
            IExecute("onNestedScroll", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#onNestedScrollAccepted(android.view.View,android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.View"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void OnNestedScrollAccepted(Android.View.View arg0, Android.View.View arg1, int arg2)
        {
            IExecute("onNestedScrollAccepted", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#onStopNestedScroll(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void OnStopNestedScroll(Android.View.View arg0)
        {
            IExecuteWithSignature("onStopNestedScroll", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#onViewAdded(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void OnViewAdded(Android.View.View arg0)
        {
            IExecuteWithSignature("onViewAdded", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#onViewRemoved(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void OnViewRemoved(Android.View.View arg0)
        {
            IExecuteWithSignature("onViewRemoved", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#recomputeViewAttributes(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void RecomputeViewAttributes(Android.View.View arg0)
        {
            IExecuteWithSignature("recomputeViewAttributes", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#removeAllViews()"/>
        /// </summary>
        public void RemoveAllViews()
        {
            IExecuteWithSignature("removeAllViews", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#removeAllViewsInLayout()"/>
        /// </summary>
        public void RemoveAllViewsInLayout()
        {
            IExecuteWithSignature("removeAllViewsInLayout", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#removeView(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void RemoveView(Android.View.View arg0)
        {
            IExecuteWithSignature("removeView", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#removeViewAt(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void RemoveViewAt(int arg0)
        {
            IExecuteWithSignature("removeViewAt", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#removeViewInLayout(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void RemoveViewInLayout(Android.View.View arg0)
        {
            IExecuteWithSignature("removeViewInLayout", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#removeViews(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void RemoveViews(int arg0, int arg1)
        {
            IExecute("removeViews", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#removeViewsInLayout(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void RemoveViewsInLayout(int arg0, int arg1)
        {
            IExecute("removeViewsInLayout", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#requestChildFocus(android.view.View,android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.View"/></param>
        public void RequestChildFocus(Android.View.View arg0, Android.View.View arg1)
        {
            IExecute("requestChildFocus", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#requestDisallowInterceptTouchEvent(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void RequestDisallowInterceptTouchEvent(bool arg0)
        {
            IExecuteWithSignature("requestDisallowInterceptTouchEvent", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#requestTransparentRegion(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void RequestTransparentRegion(Android.View.View arg0)
        {
            IExecuteWithSignature("requestTransparentRegion", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#scheduleLayoutAnimation()"/>
        /// </summary>
        public void ScheduleLayoutAnimation()
        {
            IExecuteWithSignature("scheduleLayoutAnimation", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#setAddStatesFromChildren(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAddStatesFromChildren(bool arg0)
        {
            IExecuteWithSignature("setAddStatesFromChildren", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#setAlwaysDrawnWithCacheEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetAlwaysDrawnWithCacheEnabled(bool arg0)
        {
            IExecuteWithSignature("setAlwaysDrawnWithCacheEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#setAnimationCacheEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        [global::System.Obsolete()]
        public void SetAnimationCacheEnabled(bool arg0)
        {
            IExecuteWithSignature("setAnimationCacheEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#setClipChildren(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetClipChildren(bool arg0)
        {
            IExecuteWithSignature("setClipChildren", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#setClipToPadding(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetClipToPadding(bool arg0)
        {
            IExecuteWithSignature("setClipToPadding", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#setDescendantFocusability(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetDescendantFocusability(int arg0)
        {
            IExecuteWithSignature("setDescendantFocusability", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#setLayoutAnimation(android.view.animation.LayoutAnimationController)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Animation.LayoutAnimationController"/></param>
        public void SetLayoutAnimation(Android.View.Animation.LayoutAnimationController arg0)
        {
            IExecuteWithSignature("setLayoutAnimation", "(Landroid/view/animation/LayoutAnimationController;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#setLayoutAnimationListener(android.view.animation.Animation.AnimationListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Animation.Animation.AnimationListener"/></param>
        public void SetLayoutAnimationListener(Android.View.Animation.Animation.AnimationListener arg0)
        {
            IExecuteWithSignature("setLayoutAnimationListener", "(Landroid/view/animation/Animation$AnimationListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#setLayoutMode(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetLayoutMode(int arg0)
        {
            IExecuteWithSignature("setLayoutMode", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#setLayoutTransition(android.animation.LayoutTransition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Animation.LayoutTransition"/></param>
        public void SetLayoutTransition(Android.Animation.LayoutTransition arg0)
        {
            IExecuteWithSignature("setLayoutTransition", "(Landroid/animation/LayoutTransition;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#setMotionEventSplittingEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetMotionEventSplittingEnabled(bool arg0)
        {
            IExecuteWithSignature("setMotionEventSplittingEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#setOnHierarchyChangeListener(android.view.ViewGroup.OnHierarchyChangeListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.ViewGroup.OnHierarchyChangeListener"/></param>
        public void SetOnHierarchyChangeListener(Android.View.ViewGroup.OnHierarchyChangeListener arg0)
        {
            IExecuteWithSignature("setOnHierarchyChangeListener", "(Landroid/view/ViewGroup$OnHierarchyChangeListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#setPersistentDrawingCache(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void SetPersistentDrawingCache(int arg0)
        {
            IExecuteWithSignature("setPersistentDrawingCache", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#setTouchscreenBlocksFocus(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetTouchscreenBlocksFocus(bool arg0)
        {
            IExecuteWithSignature("setTouchscreenBlocksFocus", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#setTransitionGroup(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetTransitionGroup(bool arg0)
        {
            IExecuteWithSignature("setTransitionGroup", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#startLayoutAnimation()"/>
        /// </summary>
        public void StartLayoutAnimation()
        {
            IExecuteWithSignature("startLayoutAnimation", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#startViewTransition(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void StartViewTransition(Android.View.View arg0)
        {
            IExecuteWithSignature("startViewTransition", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#suppressLayout(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SuppressLayout(bool arg0)
        {
            IExecuteWithSignature("suppressLayout", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/ViewGroup.html#updateViewLayout(android.view.View,android.view.ViewGroup.LayoutParams)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="Android.View.ViewGroup.LayoutParams"/></param>
        public void UpdateViewLayout(Android.View.View arg0, Android.View.ViewGroup.LayoutParams arg1)
        {
            IExecute("updateViewLayout", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region LayoutParams
        public partial class LayoutParams
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
            public LayoutParams(Android.Content.Context arg0, Android.Util.AttributeSet arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#%3Cinit%3E(android.view.ViewGroup.LayoutParams)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ViewGroup.LayoutParams"/></param>
            public LayoutParams(Android.View.ViewGroup.LayoutParams arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#%3Cinit%3E(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public LayoutParams(int arg0, int arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#layoutAnimationParameters"/>
            /// </summary>
            public Android.View.Animation.LayoutAnimationController.AnimationParameters layoutAnimationParameters { get { return IGetField<Android.View.Animation.LayoutAnimationController.AnimationParameters>("layoutAnimationParameters"); } set { ISetField("layoutAnimationParameters", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#height"/>
            /// </summary>
            public int height { get { return IGetField<int>("height"); } set { ISetField("height", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#width"/>
            /// </summary>
            public int width { get { return IGetField<int>("width"); } set { ISetField("width", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#FILL_PARENT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int FILL_PARENT { get { if (!_FILL_PARENTReady) { _FILL_PARENTContent = SGetField<int>(LocalBridgeClazz, "FILL_PARENT"); _FILL_PARENTReady = true; } return _FILL_PARENTContent; } }
            private static int _FILL_PARENTContent = default;
            private static bool _FILL_PARENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#MATCH_PARENT"/>
            /// </summary>
            public static int MATCH_PARENT { get { if (!_MATCH_PARENTReady) { _MATCH_PARENTContent = SGetField<int>(LocalBridgeClazz, "MATCH_PARENT"); _MATCH_PARENTReady = true; } return _MATCH_PARENTContent; } }
            private static int _MATCH_PARENTContent = default;
            private static bool _MATCH_PARENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#WRAP_CONTENT"/>
            /// </summary>
            public static int WRAP_CONTENT { get { if (!_WRAP_CONTENTReady) { _WRAP_CONTENTContent = SGetField<int>(LocalBridgeClazz, "WRAP_CONTENT"); _WRAP_CONTENTReady = true; } return _WRAP_CONTENTContent; } }
            private static int _WRAP_CONTENTContent = default;
            private static bool _WRAP_CONTENTReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.LayoutParams.html#resolveLayoutDirection(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void ResolveLayoutDirection(int arg0)
            {
                IExecuteWithSignature("resolveLayoutDirection", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MarginLayoutParams
        public partial class MarginLayoutParams
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#%3Cinit%3E(android.content.Context,android.util.AttributeSet)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <param name="arg1"><see cref="Android.Util.AttributeSet"/></param>
            public MarginLayoutParams(Android.Content.Context arg0, Android.Util.AttributeSet arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#%3Cinit%3E(android.view.ViewGroup.LayoutParams)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ViewGroup.LayoutParams"/></param>
            public MarginLayoutParams(Android.View.ViewGroup.LayoutParams arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#%3Cinit%3E(android.view.ViewGroup.MarginLayoutParams)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.ViewGroup.MarginLayoutParams"/></param>
            public MarginLayoutParams(Android.View.ViewGroup.MarginLayoutParams arg0)
                : base(arg0)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#%3Cinit%3E(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public MarginLayoutParams(int arg0, int arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#bottomMargin"/>
            /// </summary>
            public int bottomMargin { get { return IGetField<int>("bottomMargin"); } set { ISetField("bottomMargin", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#leftMargin"/>
            /// </summary>
            public int leftMargin { get { return IGetField<int>("leftMargin"); } set { ISetField("leftMargin", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#rightMargin"/>
            /// </summary>
            public int rightMargin { get { return IGetField<int>("rightMargin"); } set { ISetField("rightMargin", value); } }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#topMargin"/>
            /// </summary>
            public int topMargin { get { return IGetField<int>("topMargin"); } set { ISetField("topMargin", value); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#isMarginRelative()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsMarginRelative()
            {
                return IExecuteWithSignature<bool>("isMarginRelative", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#getLayoutDirection()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetLayoutDirection()
            {
                return IExecuteWithSignature<int>("getLayoutDirection", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#getMarginEnd()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetMarginEnd()
            {
                return IExecuteWithSignature<int>("getMarginEnd", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#getMarginStart()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetMarginStart()
            {
                return IExecuteWithSignature<int>("getMarginStart", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#setLayoutDirection(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetLayoutDirection(int arg0)
            {
                IExecuteWithSignature("setLayoutDirection", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#setMarginEnd(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetMarginEnd(int arg0)
            {
                IExecuteWithSignature("setMarginEnd", "(I)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#setMargins(int,int,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            public void SetMargins(int arg0, int arg1, int arg2, int arg3)
            {
                IExecute("setMargins", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html#setMarginStart(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetMarginStart(int arg0)
            {
                IExecuteWithSignature("setMarginStart", "(I)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnHierarchyChangeListener
        public partial class OnHierarchyChangeListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnHierarchyChangeListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onChildViewAdded", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnChildViewAddedEventHandler));
                AddEventHandler("onChildViewRemoved", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.View>>>(OnChildViewRemovedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewGroup.OnHierarchyChangeListener.html#onChildViewAdded(android.view.View,android.view.View)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnChildViewAdded"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.View, Android.View.View> OnOnChildViewAdded { get; set; } = null;

            void OnChildViewAddedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnChildViewAdded != null) ? OnOnChildViewAdded : OnChildViewAdded;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.View>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.OnHierarchyChangeListener.html#onChildViewAdded(android.view.View,android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            public virtual void OnChildViewAdded(Android.View.View arg0, Android.View.View arg1)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/ViewGroup.OnHierarchyChangeListener.html#onChildViewRemoved(android.view.View,android.view.View)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnChildViewRemoved"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Android.View.View, Android.View.View> OnOnChildViewRemoved { get; set; } = null;

            void OnChildViewRemovedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.View>> data)
            {
                var methodToExecute = (OnOnChildViewRemoved != null) ? OnOnChildViewRemoved : OnChildViewRemoved;
                methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.View>(0));
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.OnHierarchyChangeListener.html#onChildViewRemoved(android.view.View,android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            public virtual void OnChildViewRemoved(Android.View.View arg0, Android.View.View arg1)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnHierarchyChangeListenerDirect
        public partial class OnHierarchyChangeListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.OnHierarchyChangeListener.html#onChildViewAdded(android.view.View,android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            public override void OnChildViewAdded(Android.View.View arg0, Android.View.View arg1)
            {
                IExecute("onChildViewAdded", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/ViewGroup.OnHierarchyChangeListener.html#onChildViewRemoved(android.view.View,android.view.View)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.View"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            public override void OnChildViewRemoved(Android.View.View arg0, Android.View.View arg1)
            {
                IExecute("onChildViewRemoved", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
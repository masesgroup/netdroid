/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region WindowInsets declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html"/>
    /// </summary>
    public partial class WindowInsets : MASES.JCOBridge.C2JBridge.JVMBridgeBase<WindowInsets>
    {
        const string _bridgeClassName = "android.view.WindowInsets";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public WindowInsets() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public WindowInsets(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.view.WindowInsets$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Side declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Side.html"/>
        /// </summary>
        public partial class Side : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Side>
        {
            const string _bridgeClassName = "android.view.WindowInsets$Side";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Side() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Side(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Type declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Type.html"/>
        /// </summary>
        public partial class Type : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Type>
        {
            const string _bridgeClassName = "android.view.WindowInsets$Type";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Type() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Type(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region WindowInsets implementation
    public partial class WindowInsets
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#%3Cinit%3E(android.view.WindowInsets)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsets"/></param>
        public WindowInsets(Android.View.WindowInsets arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#CONSUMED"/>
        /// </summary>
        public static Android.View.WindowInsets CONSUMED { get { if (!_CONSUMEDReady) { _CONSUMEDContent = SGetField<Android.View.WindowInsets>(LocalBridgeClazz, "CONSUMED"); _CONSUMEDReady = true; } return _CONSUMEDContent; } }
        private static Android.View.WindowInsets _CONSUMEDContent = default;
        private static bool _CONSUMEDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getInsets(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Graphics.Insets"/></returns>
        public Android.Graphics.Insets GetInsets(int arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Insets>("getInsets", "(I)Landroid/graphics/Insets;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getInsetsIgnoringVisibility(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Graphics.Insets"/></returns>
        public Android.Graphics.Insets GetInsetsIgnoringVisibility(int arg0)
        {
            return IExecuteWithSignature<Android.Graphics.Insets>("getInsetsIgnoringVisibility", "(I)Landroid/graphics/Insets;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getMandatorySystemGestureInsets()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Insets"/></returns>
        [global::System.Obsolete()]
        public Android.Graphics.Insets GetMandatorySystemGestureInsets()
        {
            return IExecuteWithSignature<Android.Graphics.Insets>("getMandatorySystemGestureInsets", "()Landroid/graphics/Insets;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getStableInsets()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Insets"/></returns>
        [global::System.Obsolete()]
        public Android.Graphics.Insets GetStableInsets()
        {
            return IExecuteWithSignature<Android.Graphics.Insets>("getStableInsets", "()Landroid/graphics/Insets;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getSystemGestureInsets()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Insets"/></returns>
        [global::System.Obsolete()]
        public Android.Graphics.Insets GetSystemGestureInsets()
        {
            return IExecuteWithSignature<Android.Graphics.Insets>("getSystemGestureInsets", "()Landroid/graphics/Insets;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getSystemWindowInsets()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Insets"/></returns>
        [global::System.Obsolete()]
        public Android.Graphics.Insets GetSystemWindowInsets()
        {
            return IExecuteWithSignature<Android.Graphics.Insets>("getSystemWindowInsets", "()Landroid/graphics/Insets;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getTappableElementInsets()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Insets"/></returns>
        [global::System.Obsolete()]
        public Android.Graphics.Insets GetTappableElementInsets()
        {
            return IExecuteWithSignature<Android.Graphics.Insets>("getTappableElementInsets", "()Landroid/graphics/Insets;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getPrivacyIndicatorBounds()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.Rect"/></returns>
        public Android.Graphics.Rect GetPrivacyIndicatorBounds()
        {
            return IExecuteWithSignature<Android.Graphics.Rect>("getPrivacyIndicatorBounds", "()Landroid/graphics/Rect;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getFrame()"/>
        /// </summary>
        /// <returns><see cref="Android.Util.Size"/></returns>
        public Android.Util.Size GetFrame()
        {
            return IExecuteWithSignature<Android.Util.Size>("getFrame", "()Landroid/util/Size;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getDisplayCutout()"/>
        /// </summary>
        /// <returns><see cref="Android.View.DisplayCutout"/></returns>
        public Android.View.DisplayCutout GetDisplayCutout()
        {
            return IExecuteWithSignature<Android.View.DisplayCutout>("getDisplayCutout", "()Landroid/view/DisplayCutout;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getDisplayShape()"/>
        /// </summary>
        /// <returns><see cref="Android.View.DisplayShape"/></returns>
        public Android.View.DisplayShape GetDisplayShape()
        {
            return IExecuteWithSignature<Android.View.DisplayShape>("getDisplayShape", "()Landroid/view/DisplayShape;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getRoundedCorner(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.View.RoundedCorner"/></returns>
        public Android.View.RoundedCorner GetRoundedCorner(int arg0)
        {
            return IExecuteWithSignature<Android.View.RoundedCorner>("getRoundedCorner", "(I)Landroid/view/RoundedCorner;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#consumeDisplayCutout()"/>
        /// </summary>
        /// <returns><see cref="Android.View.WindowInsets"/></returns>
        [global::System.Obsolete()]
        public Android.View.WindowInsets ConsumeDisplayCutout()
        {
            return IExecuteWithSignature<Android.View.WindowInsets>("consumeDisplayCutout", "()Landroid/view/WindowInsets;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#consumeStableInsets()"/>
        /// </summary>
        /// <returns><see cref="Android.View.WindowInsets"/></returns>
        [global::System.Obsolete()]
        public Android.View.WindowInsets ConsumeStableInsets()
        {
            return IExecuteWithSignature<Android.View.WindowInsets>("consumeStableInsets", "()Landroid/view/WindowInsets;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#consumeSystemWindowInsets()"/>
        /// </summary>
        /// <returns><see cref="Android.View.WindowInsets"/></returns>
        [global::System.Obsolete()]
        public Android.View.WindowInsets ConsumeSystemWindowInsets()
        {
            return IExecuteWithSignature<Android.View.WindowInsets>("consumeSystemWindowInsets", "()Landroid/view/WindowInsets;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#inset(android.graphics.Insets)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Insets"/></param>
        /// <returns><see cref="Android.View.WindowInsets"/></returns>
        public Android.View.WindowInsets Inset(Android.Graphics.Insets arg0)
        {
            return IExecuteWithSignature<Android.View.WindowInsets>("inset", "(Landroid/graphics/Insets;)Landroid/view/WindowInsets;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#inset(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.View.WindowInsets"/></returns>
        public Android.View.WindowInsets Inset(int arg0, int arg1, int arg2, int arg3)
        {
            return IExecute<Android.View.WindowInsets>("inset", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#replaceSystemWindowInsets(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        /// <returns><see cref="Android.View.WindowInsets"/></returns>
        [global::System.Obsolete()]
        public Android.View.WindowInsets ReplaceSystemWindowInsets(Android.Graphics.Rect arg0)
        {
            return IExecuteWithSignature<Android.View.WindowInsets>("replaceSystemWindowInsets", "(Landroid/graphics/Rect;)Landroid/view/WindowInsets;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#replaceSystemWindowInsets(int,int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.View.WindowInsets"/></returns>
        [global::System.Obsolete()]
        public Android.View.WindowInsets ReplaceSystemWindowInsets(int arg0, int arg1, int arg2, int arg3)
        {
            return IExecute<Android.View.WindowInsets>("replaceSystemWindowInsets", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#hasInsets()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasInsets()
        {
            return IExecuteWithSignature<bool>("hasInsets", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#hasStableInsets()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool HasStableInsets()
        {
            return IExecuteWithSignature<bool>("hasStableInsets", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#hasSystemWindowInsets()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool HasSystemWindowInsets()
        {
            return IExecuteWithSignature<bool>("hasSystemWindowInsets", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#isConsumed()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsConsumed()
        {
            return IExecuteWithSignature<bool>("isConsumed", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#isRound()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsRound()
        {
            return IExecuteWithSignature<bool>("isRound", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#isVisible(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsVisible(int arg0)
        {
            return IExecuteWithSignature<bool>("isVisible", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getStableInsetBottom()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetStableInsetBottom()
        {
            return IExecuteWithSignature<int>("getStableInsetBottom", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getStableInsetLeft()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetStableInsetLeft()
        {
            return IExecuteWithSignature<int>("getStableInsetLeft", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getStableInsetRight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetStableInsetRight()
        {
            return IExecuteWithSignature<int>("getStableInsetRight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getStableInsetTop()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetStableInsetTop()
        {
            return IExecuteWithSignature<int>("getStableInsetTop", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getSystemWindowInsetBottom()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetSystemWindowInsetBottom()
        {
            return IExecuteWithSignature<int>("getSystemWindowInsetBottom", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getSystemWindowInsetLeft()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetSystemWindowInsetLeft()
        {
            return IExecuteWithSignature<int>("getSystemWindowInsetLeft", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getSystemWindowInsetRight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetSystemWindowInsetRight()
        {
            return IExecuteWithSignature<int>("getSystemWindowInsetRight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getSystemWindowInsetTop()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetSystemWindowInsetTop()
        {
            return IExecuteWithSignature<int>("getSystemWindowInsetTop", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getBoundingRects(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Graphics.Rect> GetBoundingRects(int arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Graphics.Rect>>("getBoundingRects", "(I)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsets.html#getBoundingRectsIgnoringVisibility(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Graphics.Rect> GetBoundingRectsIgnoringVisibility(int arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Graphics.Rect>>("getBoundingRectsIgnoringVisibility", "(I)Ljava/util/List;", arg0);
        }

        #endregion

        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#%3Cinit%3E(android.view.WindowInsets)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.WindowInsets"/></param>
            public Builder(Android.View.WindowInsets arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.View.WindowInsets"/></returns>
            public Android.View.WindowInsets Build()
            {
                return IExecuteWithSignature<Android.View.WindowInsets>("build", "()Landroid/view/WindowInsets;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setBoundingRects(int,java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Util.List"/></param>
            /// <returns><see cref="Android.View.WindowInsets.Builder"/></returns>
            public Android.View.WindowInsets.Builder SetBoundingRects(int arg0, Java.Util.List<Android.Graphics.Rect> arg1)
            {
                return IExecute<Android.View.WindowInsets.Builder>("setBoundingRects", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setBoundingRectsIgnoringVisibility(int,java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Util.List"/></param>
            /// <returns><see cref="Android.View.WindowInsets.Builder"/></returns>
            public Android.View.WindowInsets.Builder SetBoundingRectsIgnoringVisibility(int arg0, Java.Util.List<Android.Graphics.Rect> arg1)
            {
                return IExecute<Android.View.WindowInsets.Builder>("setBoundingRectsIgnoringVisibility", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setDisplayCutout(android.view.DisplayCutout)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.DisplayCutout"/></param>
            /// <returns><see cref="Android.View.WindowInsets.Builder"/></returns>
            public Android.View.WindowInsets.Builder SetDisplayCutout(Android.View.DisplayCutout arg0)
            {
                return IExecuteWithSignature<Android.View.WindowInsets.Builder>("setDisplayCutout", "(Landroid/view/DisplayCutout;)Landroid/view/WindowInsets$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setDisplayShape(android.view.DisplayShape)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.DisplayShape"/></param>
            /// <returns><see cref="Android.View.WindowInsets.Builder"/></returns>
            public Android.View.WindowInsets.Builder SetDisplayShape(Android.View.DisplayShape arg0)
            {
                return IExecuteWithSignature<Android.View.WindowInsets.Builder>("setDisplayShape", "(Landroid/view/DisplayShape;)Landroid/view/WindowInsets$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setFrame(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.View.WindowInsets.Builder"/></returns>
            public Android.View.WindowInsets.Builder SetFrame(int arg0, int arg1)
            {
                return IExecute<Android.View.WindowInsets.Builder>("setFrame", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setInsets(int,android.graphics.Insets)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Graphics.Insets"/></param>
            /// <returns><see cref="Android.View.WindowInsets.Builder"/></returns>
            public Android.View.WindowInsets.Builder SetInsets(int arg0, Android.Graphics.Insets arg1)
            {
                return IExecute<Android.View.WindowInsets.Builder>("setInsets", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setInsetsIgnoringVisibility(int,android.graphics.Insets)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.Graphics.Insets"/></param>
            /// <returns><see cref="Android.View.WindowInsets.Builder"/></returns>
            /// <exception cref="Java.Lang.IllegalArgumentException"/>
            public Android.View.WindowInsets.Builder SetInsetsIgnoringVisibility(int arg0, Android.Graphics.Insets arg1)
            {
                return IExecute<Android.View.WindowInsets.Builder>("setInsetsIgnoringVisibility", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setMandatorySystemGestureInsets(android.graphics.Insets)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Insets"/></param>
            /// <returns><see cref="Android.View.WindowInsets.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.View.WindowInsets.Builder SetMandatorySystemGestureInsets(Android.Graphics.Insets arg0)
            {
                return IExecuteWithSignature<Android.View.WindowInsets.Builder>("setMandatorySystemGestureInsets", "(Landroid/graphics/Insets;)Landroid/view/WindowInsets$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setPrivacyIndicatorBounds(android.graphics.Rect)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
            /// <returns><see cref="Android.View.WindowInsets.Builder"/></returns>
            public Android.View.WindowInsets.Builder SetPrivacyIndicatorBounds(Android.Graphics.Rect arg0)
            {
                return IExecuteWithSignature<Android.View.WindowInsets.Builder>("setPrivacyIndicatorBounds", "(Landroid/graphics/Rect;)Landroid/view/WindowInsets$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setRoundedCorner(int,android.view.RoundedCorner)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Android.View.RoundedCorner"/></param>
            /// <returns><see cref="Android.View.WindowInsets.Builder"/></returns>
            public Android.View.WindowInsets.Builder SetRoundedCorner(int arg0, Android.View.RoundedCorner arg1)
            {
                return IExecute<Android.View.WindowInsets.Builder>("setRoundedCorner", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setStableInsets(android.graphics.Insets)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Insets"/></param>
            /// <returns><see cref="Android.View.WindowInsets.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.View.WindowInsets.Builder SetStableInsets(Android.Graphics.Insets arg0)
            {
                return IExecuteWithSignature<Android.View.WindowInsets.Builder>("setStableInsets", "(Landroid/graphics/Insets;)Landroid/view/WindowInsets$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setSystemGestureInsets(android.graphics.Insets)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Insets"/></param>
            /// <returns><see cref="Android.View.WindowInsets.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.View.WindowInsets.Builder SetSystemGestureInsets(Android.Graphics.Insets arg0)
            {
                return IExecuteWithSignature<Android.View.WindowInsets.Builder>("setSystemGestureInsets", "(Landroid/graphics/Insets;)Landroid/view/WindowInsets$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setSystemWindowInsets(android.graphics.Insets)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Insets"/></param>
            /// <returns><see cref="Android.View.WindowInsets.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.View.WindowInsets.Builder SetSystemWindowInsets(Android.Graphics.Insets arg0)
            {
                return IExecuteWithSignature<Android.View.WindowInsets.Builder>("setSystemWindowInsets", "(Landroid/graphics/Insets;)Landroid/view/WindowInsets$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setTappableElementInsets(android.graphics.Insets)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Insets"/></param>
            /// <returns><see cref="Android.View.WindowInsets.Builder"/></returns>
            [global::System.Obsolete()]
            public Android.View.WindowInsets.Builder SetTappableElementInsets(Android.Graphics.Insets arg0)
            {
                return IExecuteWithSignature<Android.View.WindowInsets.Builder>("setTappableElementInsets", "(Landroid/graphics/Insets;)Landroid/view/WindowInsets$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Builder.html#setVisible(int,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            /// <returns><see cref="Android.View.WindowInsets.Builder"/></returns>
            public Android.View.WindowInsets.Builder SetVisible(int arg0, bool arg1)
            {
                return IExecute<Android.View.WindowInsets.Builder>("setVisible", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Side implementation
        public partial class Side
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Side.html#BOTTOM"/>
            /// </summary>
            public static int BOTTOM { get { if (!_BOTTOMReady) { _BOTTOMContent = SGetField<int>(LocalBridgeClazz, "BOTTOM"); _BOTTOMReady = true; } return _BOTTOMContent; } }
            private static int _BOTTOMContent = default;
            private static bool _BOTTOMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Side.html#LEFT"/>
            /// </summary>
            public static int LEFT { get { if (!_LEFTReady) { _LEFTContent = SGetField<int>(LocalBridgeClazz, "LEFT"); _LEFTReady = true; } return _LEFTContent; } }
            private static int _LEFTContent = default;
            private static bool _LEFTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Side.html#RIGHT"/>
            /// </summary>
            public static int RIGHT { get { if (!_RIGHTReady) { _RIGHTContent = SGetField<int>(LocalBridgeClazz, "RIGHT"); _RIGHTReady = true; } return _RIGHTContent; } }
            private static int _RIGHTContent = default;
            private static bool _RIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Side.html#TOP"/>
            /// </summary>
            public static int TOP { get { if (!_TOPReady) { _TOPContent = SGetField<int>(LocalBridgeClazz, "TOP"); _TOPReady = true; } return _TOPContent; } }
            private static int _TOPContent = default;
            private static bool _TOPReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Side.html#all()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public static int All()
            {
                return SExecuteWithSignature<int>(LocalBridgeClazz, "all", "()I");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Type implementation
        public partial class Type
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Type.html#captionBar()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public static int CaptionBar()
            {
                return SExecuteWithSignature<int>(LocalBridgeClazz, "captionBar", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Type.html#displayCutout()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public static int DisplayCutout()
            {
                return SExecuteWithSignature<int>(LocalBridgeClazz, "displayCutout", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Type.html#ime()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public static int Ime()
            {
                return SExecuteWithSignature<int>(LocalBridgeClazz, "ime", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Type.html#mandatorySystemGestures()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public static int MandatorySystemGestures()
            {
                return SExecuteWithSignature<int>(LocalBridgeClazz, "mandatorySystemGestures", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Type.html#navigationBars()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public static int NavigationBars()
            {
                return SExecuteWithSignature<int>(LocalBridgeClazz, "navigationBars", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Type.html#statusBars()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public static int StatusBars()
            {
                return SExecuteWithSignature<int>(LocalBridgeClazz, "statusBars", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Type.html#systemBars()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public static int SystemBars()
            {
                return SExecuteWithSignature<int>(LocalBridgeClazz, "systemBars", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Type.html#systemGestures()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public static int SystemGestures()
            {
                return SExecuteWithSignature<int>(LocalBridgeClazz, "systemGestures", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Type.html#systemOverlays()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public static int SystemOverlays()
            {
                return SExecuteWithSignature<int>(LocalBridgeClazz, "systemOverlays", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsets.Type.html#tappableElement()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public static int TappableElement()
            {
                return SExecuteWithSignature<int>(LocalBridgeClazz, "tappableElement", "()I");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region WindowInsetsAnimation declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.html"/>
    /// </summary>
    public partial class WindowInsetsAnimation : MASES.JCOBridge.C2JBridge.JVMBridgeBase<WindowInsetsAnimation>
    {
        const string _bridgeClassName = "android.view.WindowInsetsAnimation";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public WindowInsetsAnimation() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public WindowInsetsAnimation(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Bounds declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.Bounds.html"/>
        /// </summary>
        public partial class Bounds : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Bounds>
        {
            const string _bridgeClassName = "android.view.WindowInsetsAnimation$Bounds";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Bounds() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Bounds(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Callback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.Callback.html"/>
        /// </summary>
        public partial class Callback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Callback>
        {
            const string _bridgeClassName = "android.view.WindowInsetsAnimation$Callback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("Callback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Callback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("Callback class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Callback(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region WindowInsetsAnimation implementation
    public partial class WindowInsetsAnimation
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.html#%3Cinit%3E(int,android.view.animation.Interpolator,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.View.Animation.Interpolator"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        public WindowInsetsAnimation(int arg0, Android.View.Animation.Interpolator arg1, long arg2)
            : base(arg0, arg1, arg2)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.html#getInterpolator()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Animation.Interpolator"/></returns>
        public Android.View.Animation.Interpolator GetInterpolator()
        {
            return IExecuteWithSignature<Android.View.Animation.Interpolator>("getInterpolator", "()Landroid/view/animation/Interpolator;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.html#getAlpha()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetAlpha()
        {
            return IExecuteWithSignature<float>("getAlpha", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.html#getFraction()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetFraction()
        {
            return IExecuteWithSignature<float>("getFraction", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.html#getInterpolatedFraction()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetInterpolatedFraction()
        {
            return IExecuteWithSignature<float>("getInterpolatedFraction", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.html#getTypeMask()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTypeMask()
        {
            return IExecuteWithSignature<int>("getTypeMask", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.html#getDurationMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetDurationMillis()
        {
            return IExecuteWithSignature<long>("getDurationMillis", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.html#setAlpha(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetAlpha(float arg0)
        {
            IExecuteWithSignature("setAlpha", "(F)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.html#setFraction(float)"/>
        /// </summary>
        /// <param name="arg0"><see cref="float"/></param>
        public void SetFraction(float arg0)
        {
            IExecuteWithSignature("setFraction", "(F)V", arg0);
        }

        #endregion

        #region Nested classes
        #region Bounds implementation
        public partial class Bounds
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.Bounds.html#%3Cinit%3E(android.graphics.Insets,android.graphics.Insets)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Insets"/></param>
            /// <param name="arg1"><see cref="Android.Graphics.Insets"/></param>
            public Bounds(Android.Graphics.Insets arg0, Android.Graphics.Insets arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.Bounds.html#getLowerBound()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Insets"/></returns>
            public Android.Graphics.Insets GetLowerBound()
            {
                return IExecuteWithSignature<Android.Graphics.Insets>("getLowerBound", "()Landroid/graphics/Insets;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.Bounds.html#getUpperBound()"/>
            /// </summary>
            /// <returns><see cref="Android.Graphics.Insets"/></returns>
            public Android.Graphics.Insets GetUpperBound()
            {
                return IExecuteWithSignature<Android.Graphics.Insets>("getUpperBound", "()Landroid/graphics/Insets;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.Bounds.html#inset(android.graphics.Insets)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Insets"/></param>
            /// <returns><see cref="Android.View.WindowInsetsAnimation.Bounds"/></returns>
            public Android.View.WindowInsetsAnimation.Bounds Inset(Android.Graphics.Insets arg0)
            {
                return IExecuteWithSignature<Android.View.WindowInsetsAnimation.Bounds>("inset", "(Landroid/graphics/Insets;)Landroid/view/WindowInsetsAnimation$Bounds;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Callback implementation
        public partial class Callback
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.Callback.html#%3Cinit%3E(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public Callback(int arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.Callback.html#DISPATCH_MODE_CONTINUE_ON_SUBTREE"/>
            /// </summary>
            public static int DISPATCH_MODE_CONTINUE_ON_SUBTREE { get { if (!_DISPATCH_MODE_CONTINUE_ON_SUBTREEReady) { _DISPATCH_MODE_CONTINUE_ON_SUBTREEContent = SGetField<int>(LocalBridgeClazz, "DISPATCH_MODE_CONTINUE_ON_SUBTREE"); _DISPATCH_MODE_CONTINUE_ON_SUBTREEReady = true; } return _DISPATCH_MODE_CONTINUE_ON_SUBTREEContent; } }
            private static int _DISPATCH_MODE_CONTINUE_ON_SUBTREEContent = default;
            private static bool _DISPATCH_MODE_CONTINUE_ON_SUBTREEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.Callback.html#DISPATCH_MODE_STOP"/>
            /// </summary>
            public static int DISPATCH_MODE_STOP { get { if (!_DISPATCH_MODE_STOPReady) { _DISPATCH_MODE_STOPContent = SGetField<int>(LocalBridgeClazz, "DISPATCH_MODE_STOP"); _DISPATCH_MODE_STOPReady = true; } return _DISPATCH_MODE_STOPContent; } }
            private static int _DISPATCH_MODE_STOPContent = default;
            private static bool _DISPATCH_MODE_STOPReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.Callback.html#onProgress(android.view.WindowInsets,java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.WindowInsets"/></param>
            /// <param name="arg1"><see cref="Java.Util.List"/></param>
            /// <returns><see cref="Android.View.WindowInsets"/></returns>
            public Android.View.WindowInsets OnProgress(Android.View.WindowInsets arg0, Java.Util.List<Android.View.WindowInsetsAnimation> arg1)
            {
                return IExecuteWithSignature<Android.View.WindowInsets>("onProgress", "(Landroid/view/WindowInsets;Ljava/util/List;)Landroid/view/WindowInsets;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.Callback.html#onStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation.Bounds)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.WindowInsetsAnimation"/></param>
            /// <param name="arg1"><see cref="Android.View.WindowInsetsAnimation.Bounds"/></param>
            /// <returns><see cref="Android.View.WindowInsetsAnimation.Bounds"/></returns>
            public Android.View.WindowInsetsAnimation.Bounds OnStart(Android.View.WindowInsetsAnimation arg0, Android.View.WindowInsetsAnimation.Bounds arg1)
            {
                return IExecuteWithSignature<Android.View.WindowInsetsAnimation.Bounds>("onStart", "(Landroid/view/WindowInsetsAnimation;Landroid/view/WindowInsetsAnimation$Bounds;)Landroid/view/WindowInsetsAnimation$Bounds;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.Callback.html#getDispatchMode()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetDispatchMode()
            {
                return IExecuteWithSignature<int>("getDispatchMode", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.Callback.html#onEnd(android.view.WindowInsetsAnimation)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.WindowInsetsAnimation"/></param>
            public void OnEnd(Android.View.WindowInsetsAnimation arg0)
            {
                IExecuteWithSignature("onEnd", "(Landroid/view/WindowInsetsAnimation;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimation.Callback.html#onPrepare(android.view.WindowInsetsAnimation)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.WindowInsetsAnimation"/></param>
            public void OnPrepare(Android.View.WindowInsetsAnimation arg0)
            {
                IExecuteWithSignature("onPrepare", "(Landroid/view/WindowInsetsAnimation;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View.Contentcapture
{
    #region ContentCaptureManager declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html"/>
    /// </summary>
    public partial class ContentCaptureManager : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ContentCaptureManager>
    {
        const string _bridgeClassName = "android.view.contentcapture.ContentCaptureManager";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ContentCaptureManager() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ContentCaptureManager(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region ContentCaptureManager implementation
    public partial class ContentCaptureManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html#DATA_SHARE_ERROR_CONCURRENT_REQUEST"/>
        /// </summary>
        public static int DATA_SHARE_ERROR_CONCURRENT_REQUEST { get { if (!_DATA_SHARE_ERROR_CONCURRENT_REQUESTReady) { _DATA_SHARE_ERROR_CONCURRENT_REQUESTContent = SGetField<int>(LocalBridgeClazz, "DATA_SHARE_ERROR_CONCURRENT_REQUEST"); _DATA_SHARE_ERROR_CONCURRENT_REQUESTReady = true; } return _DATA_SHARE_ERROR_CONCURRENT_REQUESTContent; } }
        private static int _DATA_SHARE_ERROR_CONCURRENT_REQUESTContent = default;
        private static bool _DATA_SHARE_ERROR_CONCURRENT_REQUESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html#DATA_SHARE_ERROR_TIMEOUT_INTERRUPTED"/>
        /// </summary>
        public static int DATA_SHARE_ERROR_TIMEOUT_INTERRUPTED { get { if (!_DATA_SHARE_ERROR_TIMEOUT_INTERRUPTEDReady) { _DATA_SHARE_ERROR_TIMEOUT_INTERRUPTEDContent = SGetField<int>(LocalBridgeClazz, "DATA_SHARE_ERROR_TIMEOUT_INTERRUPTED"); _DATA_SHARE_ERROR_TIMEOUT_INTERRUPTEDReady = true; } return _DATA_SHARE_ERROR_TIMEOUT_INTERRUPTEDContent; } }
        private static int _DATA_SHARE_ERROR_TIMEOUT_INTERRUPTEDContent = default;
        private static bool _DATA_SHARE_ERROR_TIMEOUT_INTERRUPTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html#DATA_SHARE_ERROR_UNKNOWN"/>
        /// </summary>
        public static int DATA_SHARE_ERROR_UNKNOWN { get { if (!_DATA_SHARE_ERROR_UNKNOWNReady) { _DATA_SHARE_ERROR_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "DATA_SHARE_ERROR_UNKNOWN"); _DATA_SHARE_ERROR_UNKNOWNReady = true; } return _DATA_SHARE_ERROR_UNKNOWNContent; } }
        private static int _DATA_SHARE_ERROR_UNKNOWNContent = default;
        private static bool _DATA_SHARE_ERROR_UNKNOWNReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html#getServiceComponentName()"/>
        /// </summary>
        /// <returns><see cref="Android.Content.ComponentName"/></returns>
        public Android.Content.ComponentName GetServiceComponentName()
        {
            return IExecuteWithSignature<Android.Content.ComponentName>("getServiceComponentName", "()Landroid/content/ComponentName;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html#isContentCaptureEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsContentCaptureEnabled()
        {
            return IExecuteWithSignature<bool>("isContentCaptureEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html#getContentCaptureConditions()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Android.View.Contentcapture.ContentCaptureCondition> GetContentCaptureConditions()
        {
            return IExecuteWithSignature<Java.Util.Set<Android.View.Contentcapture.ContentCaptureCondition>>("getContentCaptureConditions", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html#removeData(android.view.contentcapture.DataRemovalRequest)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Contentcapture.DataRemovalRequest"/></param>
        public void RemoveData(Android.View.Contentcapture.DataRemovalRequest arg0)
        {
            IExecuteWithSignature("removeData", "(Landroid/view/contentcapture/DataRemovalRequest;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html#setContentCaptureEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetContentCaptureEnabled(bool arg0)
        {
            IExecuteWithSignature("setContentCaptureEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html#shareData(android.view.contentcapture.DataShareRequest,java.util.concurrent.Executor,android.view.contentcapture.DataShareWriteAdapter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Contentcapture.DataShareRequest"/></param>
        /// <param name="arg1"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg2"><see cref="Android.View.Contentcapture.DataShareWriteAdapter"/></param>
        public void ShareData(Android.View.Contentcapture.DataShareRequest arg0, Java.Util.Concurrent.Executor arg1, Android.View.Contentcapture.DataShareWriteAdapter arg2)
        {
            IExecute("shareData", arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
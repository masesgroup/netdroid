/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View.Accessibility
{
    #region AccessibilityEvent declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html"/>
    /// </summary>
    public partial class AccessibilityEvent : Android.View.Accessibility.AccessibilityRecord
    {
        const string _bridgeClassName = "android.view.accessibility.AccessibilityEvent";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public AccessibilityEvent() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public AccessibilityEvent(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region AccessibilityEvent implementation
    public partial class AccessibilityEvent
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#%3Cinit%3E(android.view.accessibility.AccessibilityEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityEvent"/></param>
        public AccessibilityEvent(Android.View.Accessibility.AccessibilityEvent arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#%3Cinit%3E(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public AccessibilityEvent(int arg0)
            : base(arg0)
        {
        }
    
        #endregion
    
        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Android.View.Accessibility.AccessibilityEvent"/> to <see cref="Android.Os.Parcelable"/>
        /// </summary>
        public static implicit operator Android.Os.Parcelable(Android.View.Accessibility.AccessibilityEvent t) => t.Cast<Android.Os.Parcelable>();
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION"/>
        /// </summary>
        public static int CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION { get { if (!_CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTIONReady) { _CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTIONContent = SGetField<int>(LocalBridgeClazz, "CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION"); _CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTIONReady = true; } return _CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTIONContent; } }
        private static int _CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTIONContent = default;
        private static bool _CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#CONTENT_CHANGE_TYPE_CONTENT_INVALID"/>
        /// </summary>
        public static int CONTENT_CHANGE_TYPE_CONTENT_INVALID { get { if (!_CONTENT_CHANGE_TYPE_CONTENT_INVALIDReady) { _CONTENT_CHANGE_TYPE_CONTENT_INVALIDContent = SGetField<int>(LocalBridgeClazz, "CONTENT_CHANGE_TYPE_CONTENT_INVALID"); _CONTENT_CHANGE_TYPE_CONTENT_INVALIDReady = true; } return _CONTENT_CHANGE_TYPE_CONTENT_INVALIDContent; } }
        private static int _CONTENT_CHANGE_TYPE_CONTENT_INVALIDContent = default;
        private static bool _CONTENT_CHANGE_TYPE_CONTENT_INVALIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#CONTENT_CHANGE_TYPE_DRAG_CANCELLED"/>
        /// </summary>
        public static int CONTENT_CHANGE_TYPE_DRAG_CANCELLED { get { if (!_CONTENT_CHANGE_TYPE_DRAG_CANCELLEDReady) { _CONTENT_CHANGE_TYPE_DRAG_CANCELLEDContent = SGetField<int>(LocalBridgeClazz, "CONTENT_CHANGE_TYPE_DRAG_CANCELLED"); _CONTENT_CHANGE_TYPE_DRAG_CANCELLEDReady = true; } return _CONTENT_CHANGE_TYPE_DRAG_CANCELLEDContent; } }
        private static int _CONTENT_CHANGE_TYPE_DRAG_CANCELLEDContent = default;
        private static bool _CONTENT_CHANGE_TYPE_DRAG_CANCELLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#CONTENT_CHANGE_TYPE_DRAG_DROPPED"/>
        /// </summary>
        public static int CONTENT_CHANGE_TYPE_DRAG_DROPPED { get { if (!_CONTENT_CHANGE_TYPE_DRAG_DROPPEDReady) { _CONTENT_CHANGE_TYPE_DRAG_DROPPEDContent = SGetField<int>(LocalBridgeClazz, "CONTENT_CHANGE_TYPE_DRAG_DROPPED"); _CONTENT_CHANGE_TYPE_DRAG_DROPPEDReady = true; } return _CONTENT_CHANGE_TYPE_DRAG_DROPPEDContent; } }
        private static int _CONTENT_CHANGE_TYPE_DRAG_DROPPEDContent = default;
        private static bool _CONTENT_CHANGE_TYPE_DRAG_DROPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#CONTENT_CHANGE_TYPE_DRAG_STARTED"/>
        /// </summary>
        public static int CONTENT_CHANGE_TYPE_DRAG_STARTED { get { if (!_CONTENT_CHANGE_TYPE_DRAG_STARTEDReady) { _CONTENT_CHANGE_TYPE_DRAG_STARTEDContent = SGetField<int>(LocalBridgeClazz, "CONTENT_CHANGE_TYPE_DRAG_STARTED"); _CONTENT_CHANGE_TYPE_DRAG_STARTEDReady = true; } return _CONTENT_CHANGE_TYPE_DRAG_STARTEDContent; } }
        private static int _CONTENT_CHANGE_TYPE_DRAG_STARTEDContent = default;
        private static bool _CONTENT_CHANGE_TYPE_DRAG_STARTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#CONTENT_CHANGE_TYPE_ENABLED"/>
        /// </summary>
        public static int CONTENT_CHANGE_TYPE_ENABLED { get { if (!_CONTENT_CHANGE_TYPE_ENABLEDReady) { _CONTENT_CHANGE_TYPE_ENABLEDContent = SGetField<int>(LocalBridgeClazz, "CONTENT_CHANGE_TYPE_ENABLED"); _CONTENT_CHANGE_TYPE_ENABLEDReady = true; } return _CONTENT_CHANGE_TYPE_ENABLEDContent; } }
        private static int _CONTENT_CHANGE_TYPE_ENABLEDContent = default;
        private static bool _CONTENT_CHANGE_TYPE_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#CONTENT_CHANGE_TYPE_ERROR"/>
        /// </summary>
        public static int CONTENT_CHANGE_TYPE_ERROR { get { if (!_CONTENT_CHANGE_TYPE_ERRORReady) { _CONTENT_CHANGE_TYPE_ERRORContent = SGetField<int>(LocalBridgeClazz, "CONTENT_CHANGE_TYPE_ERROR"); _CONTENT_CHANGE_TYPE_ERRORReady = true; } return _CONTENT_CHANGE_TYPE_ERRORContent; } }
        private static int _CONTENT_CHANGE_TYPE_ERRORContent = default;
        private static bool _CONTENT_CHANGE_TYPE_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#CONTENT_CHANGE_TYPE_PANE_APPEARED"/>
        /// </summary>
        public static int CONTENT_CHANGE_TYPE_PANE_APPEARED { get { if (!_CONTENT_CHANGE_TYPE_PANE_APPEAREDReady) { _CONTENT_CHANGE_TYPE_PANE_APPEAREDContent = SGetField<int>(LocalBridgeClazz, "CONTENT_CHANGE_TYPE_PANE_APPEARED"); _CONTENT_CHANGE_TYPE_PANE_APPEAREDReady = true; } return _CONTENT_CHANGE_TYPE_PANE_APPEAREDContent; } }
        private static int _CONTENT_CHANGE_TYPE_PANE_APPEAREDContent = default;
        private static bool _CONTENT_CHANGE_TYPE_PANE_APPEAREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#CONTENT_CHANGE_TYPE_PANE_DISAPPEARED"/>
        /// </summary>
        public static int CONTENT_CHANGE_TYPE_PANE_DISAPPEARED { get { if (!_CONTENT_CHANGE_TYPE_PANE_DISAPPEAREDReady) { _CONTENT_CHANGE_TYPE_PANE_DISAPPEAREDContent = SGetField<int>(LocalBridgeClazz, "CONTENT_CHANGE_TYPE_PANE_DISAPPEARED"); _CONTENT_CHANGE_TYPE_PANE_DISAPPEAREDReady = true; } return _CONTENT_CHANGE_TYPE_PANE_DISAPPEAREDContent; } }
        private static int _CONTENT_CHANGE_TYPE_PANE_DISAPPEAREDContent = default;
        private static bool _CONTENT_CHANGE_TYPE_PANE_DISAPPEAREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#CONTENT_CHANGE_TYPE_PANE_TITLE"/>
        /// </summary>
        public static int CONTENT_CHANGE_TYPE_PANE_TITLE { get { if (!_CONTENT_CHANGE_TYPE_PANE_TITLEReady) { _CONTENT_CHANGE_TYPE_PANE_TITLEContent = SGetField<int>(LocalBridgeClazz, "CONTENT_CHANGE_TYPE_PANE_TITLE"); _CONTENT_CHANGE_TYPE_PANE_TITLEReady = true; } return _CONTENT_CHANGE_TYPE_PANE_TITLEContent; } }
        private static int _CONTENT_CHANGE_TYPE_PANE_TITLEContent = default;
        private static bool _CONTENT_CHANGE_TYPE_PANE_TITLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#CONTENT_CHANGE_TYPE_STATE_DESCRIPTION"/>
        /// </summary>
        public static int CONTENT_CHANGE_TYPE_STATE_DESCRIPTION { get { if (!_CONTENT_CHANGE_TYPE_STATE_DESCRIPTIONReady) { _CONTENT_CHANGE_TYPE_STATE_DESCRIPTIONContent = SGetField<int>(LocalBridgeClazz, "CONTENT_CHANGE_TYPE_STATE_DESCRIPTION"); _CONTENT_CHANGE_TYPE_STATE_DESCRIPTIONReady = true; } return _CONTENT_CHANGE_TYPE_STATE_DESCRIPTIONContent; } }
        private static int _CONTENT_CHANGE_TYPE_STATE_DESCRIPTIONContent = default;
        private static bool _CONTENT_CHANGE_TYPE_STATE_DESCRIPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#CONTENT_CHANGE_TYPE_SUBTREE"/>
        /// </summary>
        public static int CONTENT_CHANGE_TYPE_SUBTREE { get { if (!_CONTENT_CHANGE_TYPE_SUBTREEReady) { _CONTENT_CHANGE_TYPE_SUBTREEContent = SGetField<int>(LocalBridgeClazz, "CONTENT_CHANGE_TYPE_SUBTREE"); _CONTENT_CHANGE_TYPE_SUBTREEReady = true; } return _CONTENT_CHANGE_TYPE_SUBTREEContent; } }
        private static int _CONTENT_CHANGE_TYPE_SUBTREEContent = default;
        private static bool _CONTENT_CHANGE_TYPE_SUBTREEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#CONTENT_CHANGE_TYPE_TEXT"/>
        /// </summary>
        public static int CONTENT_CHANGE_TYPE_TEXT { get { if (!_CONTENT_CHANGE_TYPE_TEXTReady) { _CONTENT_CHANGE_TYPE_TEXTContent = SGetField<int>(LocalBridgeClazz, "CONTENT_CHANGE_TYPE_TEXT"); _CONTENT_CHANGE_TYPE_TEXTReady = true; } return _CONTENT_CHANGE_TYPE_TEXTContent; } }
        private static int _CONTENT_CHANGE_TYPE_TEXTContent = default;
        private static bool _CONTENT_CHANGE_TYPE_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#CONTENT_CHANGE_TYPE_UNDEFINED"/>
        /// </summary>
        public static int CONTENT_CHANGE_TYPE_UNDEFINED { get { if (!_CONTENT_CHANGE_TYPE_UNDEFINEDReady) { _CONTENT_CHANGE_TYPE_UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "CONTENT_CHANGE_TYPE_UNDEFINED"); _CONTENT_CHANGE_TYPE_UNDEFINEDReady = true; } return _CONTENT_CHANGE_TYPE_UNDEFINEDContent; } }
        private static int _CONTENT_CHANGE_TYPE_UNDEFINEDContent = default;
        private static bool _CONTENT_CHANGE_TYPE_UNDEFINEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#INVALID_POSITION"/>
        /// </summary>
        public static int INVALID_POSITION { get { if (!_INVALID_POSITIONReady) { _INVALID_POSITIONContent = SGetField<int>(LocalBridgeClazz, "INVALID_POSITION"); _INVALID_POSITIONReady = true; } return _INVALID_POSITIONContent; } }
        private static int _INVALID_POSITIONContent = default;
        private static bool _INVALID_POSITIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#MAX_TEXT_LENGTH"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int MAX_TEXT_LENGTH { get { if (!_MAX_TEXT_LENGTHReady) { _MAX_TEXT_LENGTHContent = SGetField<int>(LocalBridgeClazz, "MAX_TEXT_LENGTH"); _MAX_TEXT_LENGTHReady = true; } return _MAX_TEXT_LENGTHContent; } }
        private static int _MAX_TEXT_LENGTHContent = default;
        private static bool _MAX_TEXT_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#SPEECH_STATE_LISTENING_END"/>
        /// </summary>
        public static int SPEECH_STATE_LISTENING_END { get { if (!_SPEECH_STATE_LISTENING_ENDReady) { _SPEECH_STATE_LISTENING_ENDContent = SGetField<int>(LocalBridgeClazz, "SPEECH_STATE_LISTENING_END"); _SPEECH_STATE_LISTENING_ENDReady = true; } return _SPEECH_STATE_LISTENING_ENDContent; } }
        private static int _SPEECH_STATE_LISTENING_ENDContent = default;
        private static bool _SPEECH_STATE_LISTENING_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#SPEECH_STATE_LISTENING_START"/>
        /// </summary>
        public static int SPEECH_STATE_LISTENING_START { get { if (!_SPEECH_STATE_LISTENING_STARTReady) { _SPEECH_STATE_LISTENING_STARTContent = SGetField<int>(LocalBridgeClazz, "SPEECH_STATE_LISTENING_START"); _SPEECH_STATE_LISTENING_STARTReady = true; } return _SPEECH_STATE_LISTENING_STARTContent; } }
        private static int _SPEECH_STATE_LISTENING_STARTContent = default;
        private static bool _SPEECH_STATE_LISTENING_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#SPEECH_STATE_SPEAKING_END"/>
        /// </summary>
        public static int SPEECH_STATE_SPEAKING_END { get { if (!_SPEECH_STATE_SPEAKING_ENDReady) { _SPEECH_STATE_SPEAKING_ENDContent = SGetField<int>(LocalBridgeClazz, "SPEECH_STATE_SPEAKING_END"); _SPEECH_STATE_SPEAKING_ENDReady = true; } return _SPEECH_STATE_SPEAKING_ENDContent; } }
        private static int _SPEECH_STATE_SPEAKING_ENDContent = default;
        private static bool _SPEECH_STATE_SPEAKING_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#SPEECH_STATE_SPEAKING_START"/>
        /// </summary>
        public static int SPEECH_STATE_SPEAKING_START { get { if (!_SPEECH_STATE_SPEAKING_STARTReady) { _SPEECH_STATE_SPEAKING_STARTContent = SGetField<int>(LocalBridgeClazz, "SPEECH_STATE_SPEAKING_START"); _SPEECH_STATE_SPEAKING_STARTReady = true; } return _SPEECH_STATE_SPEAKING_STARTContent; } }
        private static int _SPEECH_STATE_SPEAKING_STARTContent = default;
        private static bool _SPEECH_STATE_SPEAKING_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_ANNOUNCEMENT"/>
        /// </summary>
        public static int TYPE_ANNOUNCEMENT { get { if (!_TYPE_ANNOUNCEMENTReady) { _TYPE_ANNOUNCEMENTContent = SGetField<int>(LocalBridgeClazz, "TYPE_ANNOUNCEMENT"); _TYPE_ANNOUNCEMENTReady = true; } return _TYPE_ANNOUNCEMENTContent; } }
        private static int _TYPE_ANNOUNCEMENTContent = default;
        private static bool _TYPE_ANNOUNCEMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_ASSIST_READING_CONTEXT"/>
        /// </summary>
        public static int TYPE_ASSIST_READING_CONTEXT { get { if (!_TYPE_ASSIST_READING_CONTEXTReady) { _TYPE_ASSIST_READING_CONTEXTContent = SGetField<int>(LocalBridgeClazz, "TYPE_ASSIST_READING_CONTEXT"); _TYPE_ASSIST_READING_CONTEXTReady = true; } return _TYPE_ASSIST_READING_CONTEXTContent; } }
        private static int _TYPE_ASSIST_READING_CONTEXTContent = default;
        private static bool _TYPE_ASSIST_READING_CONTEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_GESTURE_DETECTION_END"/>
        /// </summary>
        public static int TYPE_GESTURE_DETECTION_END { get { if (!_TYPE_GESTURE_DETECTION_ENDReady) { _TYPE_GESTURE_DETECTION_ENDContent = SGetField<int>(LocalBridgeClazz, "TYPE_GESTURE_DETECTION_END"); _TYPE_GESTURE_DETECTION_ENDReady = true; } return _TYPE_GESTURE_DETECTION_ENDContent; } }
        private static int _TYPE_GESTURE_DETECTION_ENDContent = default;
        private static bool _TYPE_GESTURE_DETECTION_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_GESTURE_DETECTION_START"/>
        /// </summary>
        public static int TYPE_GESTURE_DETECTION_START { get { if (!_TYPE_GESTURE_DETECTION_STARTReady) { _TYPE_GESTURE_DETECTION_STARTContent = SGetField<int>(LocalBridgeClazz, "TYPE_GESTURE_DETECTION_START"); _TYPE_GESTURE_DETECTION_STARTReady = true; } return _TYPE_GESTURE_DETECTION_STARTContent; } }
        private static int _TYPE_GESTURE_DETECTION_STARTContent = default;
        private static bool _TYPE_GESTURE_DETECTION_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_NOTIFICATION_STATE_CHANGED"/>
        /// </summary>
        public static int TYPE_NOTIFICATION_STATE_CHANGED { get { if (!_TYPE_NOTIFICATION_STATE_CHANGEDReady) { _TYPE_NOTIFICATION_STATE_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_NOTIFICATION_STATE_CHANGED"); _TYPE_NOTIFICATION_STATE_CHANGEDReady = true; } return _TYPE_NOTIFICATION_STATE_CHANGEDContent; } }
        private static int _TYPE_NOTIFICATION_STATE_CHANGEDContent = default;
        private static bool _TYPE_NOTIFICATION_STATE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_SPEECH_STATE_CHANGE"/>
        /// </summary>
        public static int TYPE_SPEECH_STATE_CHANGE { get { if (!_TYPE_SPEECH_STATE_CHANGEReady) { _TYPE_SPEECH_STATE_CHANGEContent = SGetField<int>(LocalBridgeClazz, "TYPE_SPEECH_STATE_CHANGE"); _TYPE_SPEECH_STATE_CHANGEReady = true; } return _TYPE_SPEECH_STATE_CHANGEContent; } }
        private static int _TYPE_SPEECH_STATE_CHANGEContent = default;
        private static bool _TYPE_SPEECH_STATE_CHANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_TOUCH_EXPLORATION_GESTURE_END"/>
        /// </summary>
        public static int TYPE_TOUCH_EXPLORATION_GESTURE_END { get { if (!_TYPE_TOUCH_EXPLORATION_GESTURE_ENDReady) { _TYPE_TOUCH_EXPLORATION_GESTURE_ENDContent = SGetField<int>(LocalBridgeClazz, "TYPE_TOUCH_EXPLORATION_GESTURE_END"); _TYPE_TOUCH_EXPLORATION_GESTURE_ENDReady = true; } return _TYPE_TOUCH_EXPLORATION_GESTURE_ENDContent; } }
        private static int _TYPE_TOUCH_EXPLORATION_GESTURE_ENDContent = default;
        private static bool _TYPE_TOUCH_EXPLORATION_GESTURE_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_TOUCH_EXPLORATION_GESTURE_START"/>
        /// </summary>
        public static int TYPE_TOUCH_EXPLORATION_GESTURE_START { get { if (!_TYPE_TOUCH_EXPLORATION_GESTURE_STARTReady) { _TYPE_TOUCH_EXPLORATION_GESTURE_STARTContent = SGetField<int>(LocalBridgeClazz, "TYPE_TOUCH_EXPLORATION_GESTURE_START"); _TYPE_TOUCH_EXPLORATION_GESTURE_STARTReady = true; } return _TYPE_TOUCH_EXPLORATION_GESTURE_STARTContent; } }
        private static int _TYPE_TOUCH_EXPLORATION_GESTURE_STARTContent = default;
        private static bool _TYPE_TOUCH_EXPLORATION_GESTURE_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_TOUCH_INTERACTION_END"/>
        /// </summary>
        public static int TYPE_TOUCH_INTERACTION_END { get { if (!_TYPE_TOUCH_INTERACTION_ENDReady) { _TYPE_TOUCH_INTERACTION_ENDContent = SGetField<int>(LocalBridgeClazz, "TYPE_TOUCH_INTERACTION_END"); _TYPE_TOUCH_INTERACTION_ENDReady = true; } return _TYPE_TOUCH_INTERACTION_ENDContent; } }
        private static int _TYPE_TOUCH_INTERACTION_ENDContent = default;
        private static bool _TYPE_TOUCH_INTERACTION_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_TOUCH_INTERACTION_START"/>
        /// </summary>
        public static int TYPE_TOUCH_INTERACTION_START { get { if (!_TYPE_TOUCH_INTERACTION_STARTReady) { _TYPE_TOUCH_INTERACTION_STARTContent = SGetField<int>(LocalBridgeClazz, "TYPE_TOUCH_INTERACTION_START"); _TYPE_TOUCH_INTERACTION_STARTReady = true; } return _TYPE_TOUCH_INTERACTION_STARTContent; } }
        private static int _TYPE_TOUCH_INTERACTION_STARTContent = default;
        private static bool _TYPE_TOUCH_INTERACTION_STARTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED"/>
        /// </summary>
        public static int TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED { get { if (!_TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEAREDReady) { _TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEAREDContent = SGetField<int>(LocalBridgeClazz, "TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED"); _TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEAREDReady = true; } return _TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEAREDContent; } }
        private static int _TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEAREDContent = default;
        private static bool _TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEAREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_VIEW_ACCESSIBILITY_FOCUSED"/>
        /// </summary>
        public static int TYPE_VIEW_ACCESSIBILITY_FOCUSED { get { if (!_TYPE_VIEW_ACCESSIBILITY_FOCUSEDReady) { _TYPE_VIEW_ACCESSIBILITY_FOCUSEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_VIEW_ACCESSIBILITY_FOCUSED"); _TYPE_VIEW_ACCESSIBILITY_FOCUSEDReady = true; } return _TYPE_VIEW_ACCESSIBILITY_FOCUSEDContent; } }
        private static int _TYPE_VIEW_ACCESSIBILITY_FOCUSEDContent = default;
        private static bool _TYPE_VIEW_ACCESSIBILITY_FOCUSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_VIEW_CLICKED"/>
        /// </summary>
        public static int TYPE_VIEW_CLICKED { get { if (!_TYPE_VIEW_CLICKEDReady) { _TYPE_VIEW_CLICKEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_VIEW_CLICKED"); _TYPE_VIEW_CLICKEDReady = true; } return _TYPE_VIEW_CLICKEDContent; } }
        private static int _TYPE_VIEW_CLICKEDContent = default;
        private static bool _TYPE_VIEW_CLICKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_VIEW_CONTEXT_CLICKED"/>
        /// </summary>
        public static int TYPE_VIEW_CONTEXT_CLICKED { get { if (!_TYPE_VIEW_CONTEXT_CLICKEDReady) { _TYPE_VIEW_CONTEXT_CLICKEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_VIEW_CONTEXT_CLICKED"); _TYPE_VIEW_CONTEXT_CLICKEDReady = true; } return _TYPE_VIEW_CONTEXT_CLICKEDContent; } }
        private static int _TYPE_VIEW_CONTEXT_CLICKEDContent = default;
        private static bool _TYPE_VIEW_CONTEXT_CLICKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_VIEW_FOCUSED"/>
        /// </summary>
        public static int TYPE_VIEW_FOCUSED { get { if (!_TYPE_VIEW_FOCUSEDReady) { _TYPE_VIEW_FOCUSEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_VIEW_FOCUSED"); _TYPE_VIEW_FOCUSEDReady = true; } return _TYPE_VIEW_FOCUSEDContent; } }
        private static int _TYPE_VIEW_FOCUSEDContent = default;
        private static bool _TYPE_VIEW_FOCUSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_VIEW_HOVER_ENTER"/>
        /// </summary>
        public static int TYPE_VIEW_HOVER_ENTER { get { if (!_TYPE_VIEW_HOVER_ENTERReady) { _TYPE_VIEW_HOVER_ENTERContent = SGetField<int>(LocalBridgeClazz, "TYPE_VIEW_HOVER_ENTER"); _TYPE_VIEW_HOVER_ENTERReady = true; } return _TYPE_VIEW_HOVER_ENTERContent; } }
        private static int _TYPE_VIEW_HOVER_ENTERContent = default;
        private static bool _TYPE_VIEW_HOVER_ENTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_VIEW_HOVER_EXIT"/>
        /// </summary>
        public static int TYPE_VIEW_HOVER_EXIT { get { if (!_TYPE_VIEW_HOVER_EXITReady) { _TYPE_VIEW_HOVER_EXITContent = SGetField<int>(LocalBridgeClazz, "TYPE_VIEW_HOVER_EXIT"); _TYPE_VIEW_HOVER_EXITReady = true; } return _TYPE_VIEW_HOVER_EXITContent; } }
        private static int _TYPE_VIEW_HOVER_EXITContent = default;
        private static bool _TYPE_VIEW_HOVER_EXITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_VIEW_LONG_CLICKED"/>
        /// </summary>
        public static int TYPE_VIEW_LONG_CLICKED { get { if (!_TYPE_VIEW_LONG_CLICKEDReady) { _TYPE_VIEW_LONG_CLICKEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_VIEW_LONG_CLICKED"); _TYPE_VIEW_LONG_CLICKEDReady = true; } return _TYPE_VIEW_LONG_CLICKEDContent; } }
        private static int _TYPE_VIEW_LONG_CLICKEDContent = default;
        private static bool _TYPE_VIEW_LONG_CLICKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_VIEW_SCROLLED"/>
        /// </summary>
        public static int TYPE_VIEW_SCROLLED { get { if (!_TYPE_VIEW_SCROLLEDReady) { _TYPE_VIEW_SCROLLEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_VIEW_SCROLLED"); _TYPE_VIEW_SCROLLEDReady = true; } return _TYPE_VIEW_SCROLLEDContent; } }
        private static int _TYPE_VIEW_SCROLLEDContent = default;
        private static bool _TYPE_VIEW_SCROLLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_VIEW_SELECTED"/>
        /// </summary>
        public static int TYPE_VIEW_SELECTED { get { if (!_TYPE_VIEW_SELECTEDReady) { _TYPE_VIEW_SELECTEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_VIEW_SELECTED"); _TYPE_VIEW_SELECTEDReady = true; } return _TYPE_VIEW_SELECTEDContent; } }
        private static int _TYPE_VIEW_SELECTEDContent = default;
        private static bool _TYPE_VIEW_SELECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_VIEW_TARGETED_BY_SCROLL"/>
        /// </summary>
        public static int TYPE_VIEW_TARGETED_BY_SCROLL { get { if (!_TYPE_VIEW_TARGETED_BY_SCROLLReady) { _TYPE_VIEW_TARGETED_BY_SCROLLContent = SGetField<int>(LocalBridgeClazz, "TYPE_VIEW_TARGETED_BY_SCROLL"); _TYPE_VIEW_TARGETED_BY_SCROLLReady = true; } return _TYPE_VIEW_TARGETED_BY_SCROLLContent; } }
        private static int _TYPE_VIEW_TARGETED_BY_SCROLLContent = default;
        private static bool _TYPE_VIEW_TARGETED_BY_SCROLLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_VIEW_TEXT_CHANGED"/>
        /// </summary>
        public static int TYPE_VIEW_TEXT_CHANGED { get { if (!_TYPE_VIEW_TEXT_CHANGEDReady) { _TYPE_VIEW_TEXT_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_VIEW_TEXT_CHANGED"); _TYPE_VIEW_TEXT_CHANGEDReady = true; } return _TYPE_VIEW_TEXT_CHANGEDContent; } }
        private static int _TYPE_VIEW_TEXT_CHANGEDContent = default;
        private static bool _TYPE_VIEW_TEXT_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_VIEW_TEXT_SELECTION_CHANGED"/>
        /// </summary>
        public static int TYPE_VIEW_TEXT_SELECTION_CHANGED { get { if (!_TYPE_VIEW_TEXT_SELECTION_CHANGEDReady) { _TYPE_VIEW_TEXT_SELECTION_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_VIEW_TEXT_SELECTION_CHANGED"); _TYPE_VIEW_TEXT_SELECTION_CHANGEDReady = true; } return _TYPE_VIEW_TEXT_SELECTION_CHANGEDContent; } }
        private static int _TYPE_VIEW_TEXT_SELECTION_CHANGEDContent = default;
        private static bool _TYPE_VIEW_TEXT_SELECTION_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY"/>
        /// </summary>
        public static int TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY { get { if (!_TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITYReady) { _TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITYContent = SGetField<int>(LocalBridgeClazz, "TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY"); _TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITYReady = true; } return _TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITYContent; } }
        private static int _TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITYContent = default;
        private static bool _TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_WINDOW_CONTENT_CHANGED"/>
        /// </summary>
        public static int TYPE_WINDOW_CONTENT_CHANGED { get { if (!_TYPE_WINDOW_CONTENT_CHANGEDReady) { _TYPE_WINDOW_CONTENT_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_WINDOW_CONTENT_CHANGED"); _TYPE_WINDOW_CONTENT_CHANGEDReady = true; } return _TYPE_WINDOW_CONTENT_CHANGEDContent; } }
        private static int _TYPE_WINDOW_CONTENT_CHANGEDContent = default;
        private static bool _TYPE_WINDOW_CONTENT_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_WINDOW_STATE_CHANGED"/>
        /// </summary>
        public static int TYPE_WINDOW_STATE_CHANGED { get { if (!_TYPE_WINDOW_STATE_CHANGEDReady) { _TYPE_WINDOW_STATE_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_WINDOW_STATE_CHANGED"); _TYPE_WINDOW_STATE_CHANGEDReady = true; } return _TYPE_WINDOW_STATE_CHANGEDContent; } }
        private static int _TYPE_WINDOW_STATE_CHANGEDContent = default;
        private static bool _TYPE_WINDOW_STATE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPE_WINDOWS_CHANGED"/>
        /// </summary>
        public static int TYPE_WINDOWS_CHANGED { get { if (!_TYPE_WINDOWS_CHANGEDReady) { _TYPE_WINDOWS_CHANGEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_WINDOWS_CHANGED"); _TYPE_WINDOWS_CHANGEDReady = true; } return _TYPE_WINDOWS_CHANGEDContent; } }
        private static int _TYPE_WINDOWS_CHANGEDContent = default;
        private static bool _TYPE_WINDOWS_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#TYPES_ALL_MASK"/>
        /// </summary>
        public static int TYPES_ALL_MASK { get { if (!_TYPES_ALL_MASKReady) { _TYPES_ALL_MASKContent = SGetField<int>(LocalBridgeClazz, "TYPES_ALL_MASK"); _TYPES_ALL_MASKReady = true; } return _TYPES_ALL_MASKContent; } }
        private static int _TYPES_ALL_MASKContent = default;
        private static bool _TYPES_ALL_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#WINDOWS_CHANGE_ACCESSIBILITY_FOCUSED"/>
        /// </summary>
        public static int WINDOWS_CHANGE_ACCESSIBILITY_FOCUSED { get { if (!_WINDOWS_CHANGE_ACCESSIBILITY_FOCUSEDReady) { _WINDOWS_CHANGE_ACCESSIBILITY_FOCUSEDContent = SGetField<int>(LocalBridgeClazz, "WINDOWS_CHANGE_ACCESSIBILITY_FOCUSED"); _WINDOWS_CHANGE_ACCESSIBILITY_FOCUSEDReady = true; } return _WINDOWS_CHANGE_ACCESSIBILITY_FOCUSEDContent; } }
        private static int _WINDOWS_CHANGE_ACCESSIBILITY_FOCUSEDContent = default;
        private static bool _WINDOWS_CHANGE_ACCESSIBILITY_FOCUSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#WINDOWS_CHANGE_ACTIVE"/>
        /// </summary>
        public static int WINDOWS_CHANGE_ACTIVE { get { if (!_WINDOWS_CHANGE_ACTIVEReady) { _WINDOWS_CHANGE_ACTIVEContent = SGetField<int>(LocalBridgeClazz, "WINDOWS_CHANGE_ACTIVE"); _WINDOWS_CHANGE_ACTIVEReady = true; } return _WINDOWS_CHANGE_ACTIVEContent; } }
        private static int _WINDOWS_CHANGE_ACTIVEContent = default;
        private static bool _WINDOWS_CHANGE_ACTIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#WINDOWS_CHANGE_ADDED"/>
        /// </summary>
        public static int WINDOWS_CHANGE_ADDED { get { if (!_WINDOWS_CHANGE_ADDEDReady) { _WINDOWS_CHANGE_ADDEDContent = SGetField<int>(LocalBridgeClazz, "WINDOWS_CHANGE_ADDED"); _WINDOWS_CHANGE_ADDEDReady = true; } return _WINDOWS_CHANGE_ADDEDContent; } }
        private static int _WINDOWS_CHANGE_ADDEDContent = default;
        private static bool _WINDOWS_CHANGE_ADDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#WINDOWS_CHANGE_BOUNDS"/>
        /// </summary>
        public static int WINDOWS_CHANGE_BOUNDS { get { if (!_WINDOWS_CHANGE_BOUNDSReady) { _WINDOWS_CHANGE_BOUNDSContent = SGetField<int>(LocalBridgeClazz, "WINDOWS_CHANGE_BOUNDS"); _WINDOWS_CHANGE_BOUNDSReady = true; } return _WINDOWS_CHANGE_BOUNDSContent; } }
        private static int _WINDOWS_CHANGE_BOUNDSContent = default;
        private static bool _WINDOWS_CHANGE_BOUNDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#WINDOWS_CHANGE_CHILDREN"/>
        /// </summary>
        public static int WINDOWS_CHANGE_CHILDREN { get { if (!_WINDOWS_CHANGE_CHILDRENReady) { _WINDOWS_CHANGE_CHILDRENContent = SGetField<int>(LocalBridgeClazz, "WINDOWS_CHANGE_CHILDREN"); _WINDOWS_CHANGE_CHILDRENReady = true; } return _WINDOWS_CHANGE_CHILDRENContent; } }
        private static int _WINDOWS_CHANGE_CHILDRENContent = default;
        private static bool _WINDOWS_CHANGE_CHILDRENReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#WINDOWS_CHANGE_FOCUSED"/>
        /// </summary>
        public static int WINDOWS_CHANGE_FOCUSED { get { if (!_WINDOWS_CHANGE_FOCUSEDReady) { _WINDOWS_CHANGE_FOCUSEDContent = SGetField<int>(LocalBridgeClazz, "WINDOWS_CHANGE_FOCUSED"); _WINDOWS_CHANGE_FOCUSEDReady = true; } return _WINDOWS_CHANGE_FOCUSEDContent; } }
        private static int _WINDOWS_CHANGE_FOCUSEDContent = default;
        private static bool _WINDOWS_CHANGE_FOCUSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#WINDOWS_CHANGE_LAYER"/>
        /// </summary>
        public static int WINDOWS_CHANGE_LAYER { get { if (!_WINDOWS_CHANGE_LAYERReady) { _WINDOWS_CHANGE_LAYERContent = SGetField<int>(LocalBridgeClazz, "WINDOWS_CHANGE_LAYER"); _WINDOWS_CHANGE_LAYERReady = true; } return _WINDOWS_CHANGE_LAYERContent; } }
        private static int _WINDOWS_CHANGE_LAYERContent = default;
        private static bool _WINDOWS_CHANGE_LAYERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#WINDOWS_CHANGE_PARENT"/>
        /// </summary>
        public static int WINDOWS_CHANGE_PARENT { get { if (!_WINDOWS_CHANGE_PARENTReady) { _WINDOWS_CHANGE_PARENTContent = SGetField<int>(LocalBridgeClazz, "WINDOWS_CHANGE_PARENT"); _WINDOWS_CHANGE_PARENTReady = true; } return _WINDOWS_CHANGE_PARENTContent; } }
        private static int _WINDOWS_CHANGE_PARENTContent = default;
        private static bool _WINDOWS_CHANGE_PARENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#WINDOWS_CHANGE_PIP"/>
        /// </summary>
        public static int WINDOWS_CHANGE_PIP { get { if (!_WINDOWS_CHANGE_PIPReady) { _WINDOWS_CHANGE_PIPContent = SGetField<int>(LocalBridgeClazz, "WINDOWS_CHANGE_PIP"); _WINDOWS_CHANGE_PIPReady = true; } return _WINDOWS_CHANGE_PIPContent; } }
        private static int _WINDOWS_CHANGE_PIPContent = default;
        private static bool _WINDOWS_CHANGE_PIPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#WINDOWS_CHANGE_REMOVED"/>
        /// </summary>
        public static int WINDOWS_CHANGE_REMOVED { get { if (!_WINDOWS_CHANGE_REMOVEDReady) { _WINDOWS_CHANGE_REMOVEDContent = SGetField<int>(LocalBridgeClazz, "WINDOWS_CHANGE_REMOVED"); _WINDOWS_CHANGE_REMOVEDReady = true; } return _WINDOWS_CHANGE_REMOVEDContent; } }
        private static int _WINDOWS_CHANGE_REMOVEDContent = default;
        private static bool _WINDOWS_CHANGE_REMOVEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#WINDOWS_CHANGE_TITLE"/>
        /// </summary>
        public static int WINDOWS_CHANGE_TITLE { get { if (!_WINDOWS_CHANGE_TITLEReady) { _WINDOWS_CHANGE_TITLEContent = SGetField<int>(LocalBridgeClazz, "WINDOWS_CHANGE_TITLE"); _WINDOWS_CHANGE_TITLEReady = true; } return _WINDOWS_CHANGE_TITLEContent; } }
        private static int _WINDOWS_CHANGE_TITLEContent = default;
        private static bool _WINDOWS_CHANGE_TITLEReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#obtain(android.view.accessibility.AccessibilityEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityEvent"/></param>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityEvent"/></returns>
        [global::System.Obsolete()]
        public static Android.View.Accessibility.AccessibilityEvent Obtain(Android.View.Accessibility.AccessibilityEvent arg0)
        {
            return SExecuteWithSignature<Android.View.Accessibility.AccessibilityEvent>(LocalBridgeClazz, "obtain", "(Landroid/view/accessibility/AccessibilityEvent;)Landroid/view/accessibility/AccessibilityEvent;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#obtain(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityEvent"/></returns>
        [global::System.Obsolete()]
        public static Android.View.Accessibility.AccessibilityEvent Obtain(int arg0)
        {
            return SExecuteWithSignature<Android.View.Accessibility.AccessibilityEvent>(LocalBridgeClazz, "obtain", "(I)Landroid/view/accessibility/AccessibilityEvent;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#eventTypeToString(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String EventTypeToString(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "eventTypeToString", "(I)Ljava/lang/String;", arg0);
        }
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#getRecord(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityRecord"/></returns>
        public Android.View.Accessibility.AccessibilityRecord GetRecord(int arg0)
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityRecord>("getRecord", "(I)Landroid/view/accessibility/AccessibilityRecord;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#isAccessibilityDataSensitive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAccessibilityDataSensitive()
        {
            return IExecuteWithSignature<bool>("isAccessibilityDataSensitive", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#getAction()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetAction()
        {
            return IExecuteWithSignature<int>("getAction", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#getContentChangeTypes()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetContentChangeTypes()
        {
            return IExecuteWithSignature<int>("getContentChangeTypes", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#getEventType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetEventType()
        {
            return IExecuteWithSignature<int>("getEventType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#getMovementGranularity()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMovementGranularity()
        {
            return IExecuteWithSignature<int>("getMovementGranularity", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#getRecordCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRecordCount()
        {
            return IExecuteWithSignature<int>("getRecordCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#getSpeechStateChangeTypes()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetSpeechStateChangeTypes()
        {
            return IExecuteWithSignature<int>("getSpeechStateChangeTypes", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#getWindowChanges()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetWindowChanges()
        {
            return IExecuteWithSignature<int>("getWindowChanges", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#getPackageName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetPackageName()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getPackageName", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#getEventTime()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetEventTime()
        {
            return IExecuteWithSignature<long>("getEventTime", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#appendRecord(android.view.accessibility.AccessibilityRecord)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityRecord"/></param>
        public void AppendRecord(Android.View.Accessibility.AccessibilityRecord arg0)
        {
            IExecuteWithSignature("appendRecord", "(Landroid/view/accessibility/AccessibilityRecord;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#initFromParcel(android.os.Parcel)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        public void InitFromParcel(Android.Os.Parcel arg0)
        {
            IExecuteWithSignature("initFromParcel", "(Landroid/os/Parcel;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#setAccessibilityDataSensitive(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAccessibilityDataSensitive(bool arg0)
        {
            IExecuteWithSignature("setAccessibilityDataSensitive", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#setAction(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetAction(int arg0)
        {
            IExecuteWithSignature("setAction", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#setContentChangeTypes(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetContentChangeTypes(int arg0)
        {
            IExecuteWithSignature("setContentChangeTypes", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#setEventTime(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void SetEventTime(long arg0)
        {
            IExecuteWithSignature("setEventTime", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#setEventType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetEventType(int arg0)
        {
            IExecuteWithSignature("setEventType", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#setMovementGranularity(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMovementGranularity(int arg0)
        {
            IExecuteWithSignature("setMovementGranularity", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#setPackageName(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetPackageName(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setPackageName", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#setSpeechStateChangeTypes(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetSpeechStateChangeTypes(int arg0)
        {
            IExecuteWithSignature("setSpeechStateChangeTypes", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
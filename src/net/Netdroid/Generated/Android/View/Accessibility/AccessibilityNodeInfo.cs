/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View.Accessibility
{
    #region AccessibilityNodeInfo declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html"/>
    /// </summary>
    public partial class AccessibilityNodeInfo : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.view.accessibility.AccessibilityNodeInfo";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public AccessibilityNodeInfo() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public AccessibilityNodeInfo(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region AccessibilityAction declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html"/>
        /// </summary>
        public partial class AccessibilityAction : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public AccessibilityAction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public AccessibilityAction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region CollectionInfo declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html"/>
        /// </summary>
        public partial class CollectionInfo : MASES.JCOBridge.C2JBridge.JVMBridgeBase<CollectionInfo>
        {
            const string _bridgeClassName = "android.view.accessibility.AccessibilityNodeInfo$CollectionInfo";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public CollectionInfo() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public CollectionInfo(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class
            #region Builder declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.Builder.html"/>
            /// </summary>
            public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
            {
                const string _bridgeClassName = "android.view.accessibility.AccessibilityNodeInfo$CollectionInfo$Builder";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Builder() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Builder(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

        
        }
        #endregion

        #region CollectionItemInfo declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html"/>
        /// </summary>
        public partial class CollectionItemInfo : MASES.JCOBridge.C2JBridge.JVMBridgeBase<CollectionItemInfo>
        {
            const string _bridgeClassName = "android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public CollectionItemInfo() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public CollectionItemInfo(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class
            #region Builder declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.Builder.html"/>
            /// </summary>
            public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
            {
                const string _bridgeClassName = "android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Builder() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Builder(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

        
        }
        #endregion

        #region ExtraRenderingInfo declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.ExtraRenderingInfo.html"/>
        /// </summary>
        public partial class ExtraRenderingInfo : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ExtraRenderingInfo>
        {
            const string _bridgeClassName = "android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ExtraRenderingInfo() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ExtraRenderingInfo(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region RangeInfo declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.RangeInfo.html"/>
        /// </summary>
        public partial class RangeInfo : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RangeInfo>
        {
            const string _bridgeClassName = "android.view.accessibility.AccessibilityNodeInfo$RangeInfo";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RangeInfo() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RangeInfo(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region TouchDelegateInfo declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.TouchDelegateInfo.html"/>
        /// </summary>
        public partial class TouchDelegateInfo : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TouchDelegateInfo() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TouchDelegateInfo(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region AccessibilityNodeInfo implementation
    public partial class AccessibilityNodeInfo
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#%3Cinit%3E(android.view.accessibility.AccessibilityNodeInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></param>
        public AccessibilityNodeInfo(Android.View.Accessibility.AccessibilityNodeInfo arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#%3Cinit%3E(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public AccessibilityNodeInfo(Android.View.View arg0, int arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#%3Cinit%3E(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public AccessibilityNodeInfo(Android.View.View arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ACCESSIBILITY_FOCUS"/>
        /// </summary>
        public static int ACTION_ACCESSIBILITY_FOCUS { get { if (!_ACTION_ACCESSIBILITY_FOCUSReady) { _ACTION_ACCESSIBILITY_FOCUSContent = SGetField<int>(LocalBridgeClazz, "ACTION_ACCESSIBILITY_FOCUS"); _ACTION_ACCESSIBILITY_FOCUSReady = true; } return _ACTION_ACCESSIBILITY_FOCUSContent; } }
        private static int _ACTION_ACCESSIBILITY_FOCUSContent = default;
        private static bool _ACTION_ACCESSIBILITY_FOCUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_CLEAR_ACCESSIBILITY_FOCUS"/>
        /// </summary>
        public static int ACTION_CLEAR_ACCESSIBILITY_FOCUS { get { if (!_ACTION_CLEAR_ACCESSIBILITY_FOCUSReady) { _ACTION_CLEAR_ACCESSIBILITY_FOCUSContent = SGetField<int>(LocalBridgeClazz, "ACTION_CLEAR_ACCESSIBILITY_FOCUS"); _ACTION_CLEAR_ACCESSIBILITY_FOCUSReady = true; } return _ACTION_CLEAR_ACCESSIBILITY_FOCUSContent; } }
        private static int _ACTION_CLEAR_ACCESSIBILITY_FOCUSContent = default;
        private static bool _ACTION_CLEAR_ACCESSIBILITY_FOCUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_CLEAR_FOCUS"/>
        /// </summary>
        public static int ACTION_CLEAR_FOCUS { get { if (!_ACTION_CLEAR_FOCUSReady) { _ACTION_CLEAR_FOCUSContent = SGetField<int>(LocalBridgeClazz, "ACTION_CLEAR_FOCUS"); _ACTION_CLEAR_FOCUSReady = true; } return _ACTION_CLEAR_FOCUSContent; } }
        private static int _ACTION_CLEAR_FOCUSContent = default;
        private static bool _ACTION_CLEAR_FOCUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_CLEAR_SELECTION"/>
        /// </summary>
        public static int ACTION_CLEAR_SELECTION { get { if (!_ACTION_CLEAR_SELECTIONReady) { _ACTION_CLEAR_SELECTIONContent = SGetField<int>(LocalBridgeClazz, "ACTION_CLEAR_SELECTION"); _ACTION_CLEAR_SELECTIONReady = true; } return _ACTION_CLEAR_SELECTIONContent; } }
        private static int _ACTION_CLEAR_SELECTIONContent = default;
        private static bool _ACTION_CLEAR_SELECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_CLICK"/>
        /// </summary>
        public static int ACTION_CLICK { get { if (!_ACTION_CLICKReady) { _ACTION_CLICKContent = SGetField<int>(LocalBridgeClazz, "ACTION_CLICK"); _ACTION_CLICKReady = true; } return _ACTION_CLICKContent; } }
        private static int _ACTION_CLICKContent = default;
        private static bool _ACTION_CLICKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_COLLAPSE"/>
        /// </summary>
        public static int ACTION_COLLAPSE { get { if (!_ACTION_COLLAPSEReady) { _ACTION_COLLAPSEContent = SGetField<int>(LocalBridgeClazz, "ACTION_COLLAPSE"); _ACTION_COLLAPSEReady = true; } return _ACTION_COLLAPSEContent; } }
        private static int _ACTION_COLLAPSEContent = default;
        private static bool _ACTION_COLLAPSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_COPY"/>
        /// </summary>
        public static int ACTION_COPY { get { if (!_ACTION_COPYReady) { _ACTION_COPYContent = SGetField<int>(LocalBridgeClazz, "ACTION_COPY"); _ACTION_COPYReady = true; } return _ACTION_COPYContent; } }
        private static int _ACTION_COPYContent = default;
        private static bool _ACTION_COPYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_CUT"/>
        /// </summary>
        public static int ACTION_CUT { get { if (!_ACTION_CUTReady) { _ACTION_CUTContent = SGetField<int>(LocalBridgeClazz, "ACTION_CUT"); _ACTION_CUTReady = true; } return _ACTION_CUTContent; } }
        private static int _ACTION_CUTContent = default;
        private static bool _ACTION_CUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_DISMISS"/>
        /// </summary>
        public static int ACTION_DISMISS { get { if (!_ACTION_DISMISSReady) { _ACTION_DISMISSContent = SGetField<int>(LocalBridgeClazz, "ACTION_DISMISS"); _ACTION_DISMISSReady = true; } return _ACTION_DISMISSContent; } }
        private static int _ACTION_DISMISSContent = default;
        private static bool _ACTION_DISMISSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_EXPAND"/>
        /// </summary>
        public static int ACTION_EXPAND { get { if (!_ACTION_EXPANDReady) { _ACTION_EXPANDContent = SGetField<int>(LocalBridgeClazz, "ACTION_EXPAND"); _ACTION_EXPANDReady = true; } return _ACTION_EXPANDContent; } }
        private static int _ACTION_EXPANDContent = default;
        private static bool _ACTION_EXPANDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_FOCUS"/>
        /// </summary>
        public static int ACTION_FOCUS { get { if (!_ACTION_FOCUSReady) { _ACTION_FOCUSContent = SGetField<int>(LocalBridgeClazz, "ACTION_FOCUS"); _ACTION_FOCUSReady = true; } return _ACTION_FOCUSContent; } }
        private static int _ACTION_FOCUSContent = default;
        private static bool _ACTION_FOCUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_LONG_CLICK"/>
        /// </summary>
        public static int ACTION_LONG_CLICK { get { if (!_ACTION_LONG_CLICKReady) { _ACTION_LONG_CLICKContent = SGetField<int>(LocalBridgeClazz, "ACTION_LONG_CLICK"); _ACTION_LONG_CLICKReady = true; } return _ACTION_LONG_CLICKContent; } }
        private static int _ACTION_LONG_CLICKContent = default;
        private static bool _ACTION_LONG_CLICKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_NEXT_AT_MOVEMENT_GRANULARITY"/>
        /// </summary>
        public static int ACTION_NEXT_AT_MOVEMENT_GRANULARITY { get { if (!_ACTION_NEXT_AT_MOVEMENT_GRANULARITYReady) { _ACTION_NEXT_AT_MOVEMENT_GRANULARITYContent = SGetField<int>(LocalBridgeClazz, "ACTION_NEXT_AT_MOVEMENT_GRANULARITY"); _ACTION_NEXT_AT_MOVEMENT_GRANULARITYReady = true; } return _ACTION_NEXT_AT_MOVEMENT_GRANULARITYContent; } }
        private static int _ACTION_NEXT_AT_MOVEMENT_GRANULARITYContent = default;
        private static bool _ACTION_NEXT_AT_MOVEMENT_GRANULARITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_NEXT_HTML_ELEMENT"/>
        /// </summary>
        public static int ACTION_NEXT_HTML_ELEMENT { get { if (!_ACTION_NEXT_HTML_ELEMENTReady) { _ACTION_NEXT_HTML_ELEMENTContent = SGetField<int>(LocalBridgeClazz, "ACTION_NEXT_HTML_ELEMENT"); _ACTION_NEXT_HTML_ELEMENTReady = true; } return _ACTION_NEXT_HTML_ELEMENTContent; } }
        private static int _ACTION_NEXT_HTML_ELEMENTContent = default;
        private static bool _ACTION_NEXT_HTML_ELEMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_PASTE"/>
        /// </summary>
        public static int ACTION_PASTE { get { if (!_ACTION_PASTEReady) { _ACTION_PASTEContent = SGetField<int>(LocalBridgeClazz, "ACTION_PASTE"); _ACTION_PASTEReady = true; } return _ACTION_PASTEContent; } }
        private static int _ACTION_PASTEContent = default;
        private static bool _ACTION_PASTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY"/>
        /// </summary>
        public static int ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY { get { if (!_ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITYReady) { _ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITYContent = SGetField<int>(LocalBridgeClazz, "ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY"); _ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITYReady = true; } return _ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITYContent; } }
        private static int _ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITYContent = default;
        private static bool _ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_PREVIOUS_HTML_ELEMENT"/>
        /// </summary>
        public static int ACTION_PREVIOUS_HTML_ELEMENT { get { if (!_ACTION_PREVIOUS_HTML_ELEMENTReady) { _ACTION_PREVIOUS_HTML_ELEMENTContent = SGetField<int>(LocalBridgeClazz, "ACTION_PREVIOUS_HTML_ELEMENT"); _ACTION_PREVIOUS_HTML_ELEMENTReady = true; } return _ACTION_PREVIOUS_HTML_ELEMENTContent; } }
        private static int _ACTION_PREVIOUS_HTML_ELEMENTContent = default;
        private static bool _ACTION_PREVIOUS_HTML_ELEMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_SCROLL_BACKWARD"/>
        /// </summary>
        public static int ACTION_SCROLL_BACKWARD { get { if (!_ACTION_SCROLL_BACKWARDReady) { _ACTION_SCROLL_BACKWARDContent = SGetField<int>(LocalBridgeClazz, "ACTION_SCROLL_BACKWARD"); _ACTION_SCROLL_BACKWARDReady = true; } return _ACTION_SCROLL_BACKWARDContent; } }
        private static int _ACTION_SCROLL_BACKWARDContent = default;
        private static bool _ACTION_SCROLL_BACKWARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_SCROLL_FORWARD"/>
        /// </summary>
        public static int ACTION_SCROLL_FORWARD { get { if (!_ACTION_SCROLL_FORWARDReady) { _ACTION_SCROLL_FORWARDContent = SGetField<int>(LocalBridgeClazz, "ACTION_SCROLL_FORWARD"); _ACTION_SCROLL_FORWARDReady = true; } return _ACTION_SCROLL_FORWARDContent; } }
        private static int _ACTION_SCROLL_FORWARDContent = default;
        private static bool _ACTION_SCROLL_FORWARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_SELECT"/>
        /// </summary>
        public static int ACTION_SELECT { get { if (!_ACTION_SELECTReady) { _ACTION_SELECTContent = SGetField<int>(LocalBridgeClazz, "ACTION_SELECT"); _ACTION_SELECTReady = true; } return _ACTION_SELECTContent; } }
        private static int _ACTION_SELECTContent = default;
        private static bool _ACTION_SELECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_SET_SELECTION"/>
        /// </summary>
        public static int ACTION_SET_SELECTION { get { if (!_ACTION_SET_SELECTIONReady) { _ACTION_SET_SELECTIONContent = SGetField<int>(LocalBridgeClazz, "ACTION_SET_SELECTION"); _ACTION_SET_SELECTIONReady = true; } return _ACTION_SET_SELECTIONContent; } }
        private static int _ACTION_SET_SELECTIONContent = default;
        private static bool _ACTION_SET_SELECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_SET_TEXT"/>
        /// </summary>
        public static int ACTION_SET_TEXT { get { if (!_ACTION_SET_TEXTReady) { _ACTION_SET_TEXTContent = SGetField<int>(LocalBridgeClazz, "ACTION_SET_TEXT"); _ACTION_SET_TEXTReady = true; } return _ACTION_SET_TEXTContent; } }
        private static int _ACTION_SET_TEXTContent = default;
        private static bool _ACTION_SET_TEXTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_MAX_LENGTH"/>
        /// </summary>
        public static int EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_MAX_LENGTH { get { if (!_EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_MAX_LENGTHReady) { _EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_MAX_LENGTHContent = SGetField<int>(LocalBridgeClazz, "EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_MAX_LENGTH"); _EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_MAX_LENGTHReady = true; } return _EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_MAX_LENGTHContent; } }
        private static int _EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_MAX_LENGTHContent = default;
        private static bool _EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_MAX_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#FLAG_PREFETCH_ANCESTORS"/>
        /// </summary>
        public static int FLAG_PREFETCH_ANCESTORS { get { if (!_FLAG_PREFETCH_ANCESTORSReady) { _FLAG_PREFETCH_ANCESTORSContent = SGetField<int>(LocalBridgeClazz, "FLAG_PREFETCH_ANCESTORS"); _FLAG_PREFETCH_ANCESTORSReady = true; } return _FLAG_PREFETCH_ANCESTORSContent; } }
        private static int _FLAG_PREFETCH_ANCESTORSContent = default;
        private static bool _FLAG_PREFETCH_ANCESTORSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST"/>
        /// </summary>
        public static int FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST { get { if (!_FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRSTReady) { _FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRSTContent = SGetField<int>(LocalBridgeClazz, "FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRST"); _FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRSTReady = true; } return _FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRSTContent; } }
        private static int _FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRSTContent = default;
        private static bool _FLAG_PREFETCH_DESCENDANTS_BREADTH_FIRSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST"/>
        /// </summary>
        public static int FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST { get { if (!_FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRSTReady) { _FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRSTContent = SGetField<int>(LocalBridgeClazz, "FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRST"); _FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRSTReady = true; } return _FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRSTContent; } }
        private static int _FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRSTContent = default;
        private static bool _FLAG_PREFETCH_DESCENDANTS_DEPTH_FIRSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#FLAG_PREFETCH_DESCENDANTS_HYBRID"/>
        /// </summary>
        public static int FLAG_PREFETCH_DESCENDANTS_HYBRID { get { if (!_FLAG_PREFETCH_DESCENDANTS_HYBRIDReady) { _FLAG_PREFETCH_DESCENDANTS_HYBRIDContent = SGetField<int>(LocalBridgeClazz, "FLAG_PREFETCH_DESCENDANTS_HYBRID"); _FLAG_PREFETCH_DESCENDANTS_HYBRIDReady = true; } return _FLAG_PREFETCH_DESCENDANTS_HYBRIDContent; } }
        private static int _FLAG_PREFETCH_DESCENDANTS_HYBRIDContent = default;
        private static bool _FLAG_PREFETCH_DESCENDANTS_HYBRIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#FLAG_PREFETCH_SIBLINGS"/>
        /// </summary>
        public static int FLAG_PREFETCH_SIBLINGS { get { if (!_FLAG_PREFETCH_SIBLINGSReady) { _FLAG_PREFETCH_SIBLINGSContent = SGetField<int>(LocalBridgeClazz, "FLAG_PREFETCH_SIBLINGS"); _FLAG_PREFETCH_SIBLINGSReady = true; } return _FLAG_PREFETCH_SIBLINGSContent; } }
        private static int _FLAG_PREFETCH_SIBLINGSContent = default;
        private static bool _FLAG_PREFETCH_SIBLINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#FLAG_PREFETCH_UNINTERRUPTIBLE"/>
        /// </summary>
        public static int FLAG_PREFETCH_UNINTERRUPTIBLE { get { if (!_FLAG_PREFETCH_UNINTERRUPTIBLEReady) { _FLAG_PREFETCH_UNINTERRUPTIBLEContent = SGetField<int>(LocalBridgeClazz, "FLAG_PREFETCH_UNINTERRUPTIBLE"); _FLAG_PREFETCH_UNINTERRUPTIBLEReady = true; } return _FLAG_PREFETCH_UNINTERRUPTIBLEContent; } }
        private static int _FLAG_PREFETCH_UNINTERRUPTIBLEContent = default;
        private static bool _FLAG_PREFETCH_UNINTERRUPTIBLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#FOCUS_ACCESSIBILITY"/>
        /// </summary>
        public static int FOCUS_ACCESSIBILITY { get { if (!_FOCUS_ACCESSIBILITYReady) { _FOCUS_ACCESSIBILITYContent = SGetField<int>(LocalBridgeClazz, "FOCUS_ACCESSIBILITY"); _FOCUS_ACCESSIBILITYReady = true; } return _FOCUS_ACCESSIBILITYContent; } }
        private static int _FOCUS_ACCESSIBILITYContent = default;
        private static bool _FOCUS_ACCESSIBILITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#FOCUS_INPUT"/>
        /// </summary>
        public static int FOCUS_INPUT { get { if (!_FOCUS_INPUTReady) { _FOCUS_INPUTContent = SGetField<int>(LocalBridgeClazz, "FOCUS_INPUT"); _FOCUS_INPUTReady = true; } return _FOCUS_INPUTContent; } }
        private static int _FOCUS_INPUTContent = default;
        private static bool _FOCUS_INPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#MAX_NUMBER_OF_PREFETCHED_NODES"/>
        /// </summary>
        public static int MAX_NUMBER_OF_PREFETCHED_NODES { get { if (!_MAX_NUMBER_OF_PREFETCHED_NODESReady) { _MAX_NUMBER_OF_PREFETCHED_NODESContent = SGetField<int>(LocalBridgeClazz, "MAX_NUMBER_OF_PREFETCHED_NODES"); _MAX_NUMBER_OF_PREFETCHED_NODESReady = true; } return _MAX_NUMBER_OF_PREFETCHED_NODESContent; } }
        private static int _MAX_NUMBER_OF_PREFETCHED_NODESContent = default;
        private static bool _MAX_NUMBER_OF_PREFETCHED_NODESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#MOVEMENT_GRANULARITY_CHARACTER"/>
        /// </summary>
        public static int MOVEMENT_GRANULARITY_CHARACTER { get { if (!_MOVEMENT_GRANULARITY_CHARACTERReady) { _MOVEMENT_GRANULARITY_CHARACTERContent = SGetField<int>(LocalBridgeClazz, "MOVEMENT_GRANULARITY_CHARACTER"); _MOVEMENT_GRANULARITY_CHARACTERReady = true; } return _MOVEMENT_GRANULARITY_CHARACTERContent; } }
        private static int _MOVEMENT_GRANULARITY_CHARACTERContent = default;
        private static bool _MOVEMENT_GRANULARITY_CHARACTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#MOVEMENT_GRANULARITY_LINE"/>
        /// </summary>
        public static int MOVEMENT_GRANULARITY_LINE { get { if (!_MOVEMENT_GRANULARITY_LINEReady) { _MOVEMENT_GRANULARITY_LINEContent = SGetField<int>(LocalBridgeClazz, "MOVEMENT_GRANULARITY_LINE"); _MOVEMENT_GRANULARITY_LINEReady = true; } return _MOVEMENT_GRANULARITY_LINEContent; } }
        private static int _MOVEMENT_GRANULARITY_LINEContent = default;
        private static bool _MOVEMENT_GRANULARITY_LINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#MOVEMENT_GRANULARITY_PAGE"/>
        /// </summary>
        public static int MOVEMENT_GRANULARITY_PAGE { get { if (!_MOVEMENT_GRANULARITY_PAGEReady) { _MOVEMENT_GRANULARITY_PAGEContent = SGetField<int>(LocalBridgeClazz, "MOVEMENT_GRANULARITY_PAGE"); _MOVEMENT_GRANULARITY_PAGEReady = true; } return _MOVEMENT_GRANULARITY_PAGEContent; } }
        private static int _MOVEMENT_GRANULARITY_PAGEContent = default;
        private static bool _MOVEMENT_GRANULARITY_PAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#MOVEMENT_GRANULARITY_PARAGRAPH"/>
        /// </summary>
        public static int MOVEMENT_GRANULARITY_PARAGRAPH { get { if (!_MOVEMENT_GRANULARITY_PARAGRAPHReady) { _MOVEMENT_GRANULARITY_PARAGRAPHContent = SGetField<int>(LocalBridgeClazz, "MOVEMENT_GRANULARITY_PARAGRAPH"); _MOVEMENT_GRANULARITY_PARAGRAPHReady = true; } return _MOVEMENT_GRANULARITY_PARAGRAPHContent; } }
        private static int _MOVEMENT_GRANULARITY_PARAGRAPHContent = default;
        private static bool _MOVEMENT_GRANULARITY_PARAGRAPHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#MOVEMENT_GRANULARITY_WORD"/>
        /// </summary>
        public static int MOVEMENT_GRANULARITY_WORD { get { if (!_MOVEMENT_GRANULARITY_WORDReady) { _MOVEMENT_GRANULARITY_WORDContent = SGetField<int>(LocalBridgeClazz, "MOVEMENT_GRANULARITY_WORD"); _MOVEMENT_GRANULARITY_WORDReady = true; } return _MOVEMENT_GRANULARITY_WORDContent; } }
        private static int _MOVEMENT_GRANULARITY_WORDContent = default;
        private static bool _MOVEMENT_GRANULARITY_WORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_COLUMN_INT"/>
        /// </summary>
        public static Java.Lang.String ACTION_ARGUMENT_COLUMN_INT { get { if (!_ACTION_ARGUMENT_COLUMN_INTReady) { _ACTION_ARGUMENT_COLUMN_INTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ARGUMENT_COLUMN_INT"); _ACTION_ARGUMENT_COLUMN_INTReady = true; } return _ACTION_ARGUMENT_COLUMN_INTContent; } }
        private static Java.Lang.String _ACTION_ARGUMENT_COLUMN_INTContent = default;
        private static bool _ACTION_ARGUMENT_COLUMN_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_DIRECTION_INT"/>
        /// </summary>
        public static Java.Lang.String ACTION_ARGUMENT_DIRECTION_INT { get { if (!_ACTION_ARGUMENT_DIRECTION_INTReady) { _ACTION_ARGUMENT_DIRECTION_INTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ARGUMENT_DIRECTION_INT"); _ACTION_ARGUMENT_DIRECTION_INTReady = true; } return _ACTION_ARGUMENT_DIRECTION_INTContent; } }
        private static Java.Lang.String _ACTION_ARGUMENT_DIRECTION_INTContent = default;
        private static bool _ACTION_ARGUMENT_DIRECTION_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN"/>
        /// </summary>
        public static Java.Lang.String ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN { get { if (!_ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEANReady) { _ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEANContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN"); _ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEANReady = true; } return _ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEANContent; } }
        private static Java.Lang.String _ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEANContent = default;
        private static bool _ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEANReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_HTML_ELEMENT_STRING"/>
        /// </summary>
        public static Java.Lang.String ACTION_ARGUMENT_HTML_ELEMENT_STRING { get { if (!_ACTION_ARGUMENT_HTML_ELEMENT_STRINGReady) { _ACTION_ARGUMENT_HTML_ELEMENT_STRINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ARGUMENT_HTML_ELEMENT_STRING"); _ACTION_ARGUMENT_HTML_ELEMENT_STRINGReady = true; } return _ACTION_ARGUMENT_HTML_ELEMENT_STRINGContent; } }
        private static Java.Lang.String _ACTION_ARGUMENT_HTML_ELEMENT_STRINGContent = default;
        private static bool _ACTION_ARGUMENT_HTML_ELEMENT_STRINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_MOVE_WINDOW_X"/>
        /// </summary>
        public static Java.Lang.String ACTION_ARGUMENT_MOVE_WINDOW_X { get { if (!_ACTION_ARGUMENT_MOVE_WINDOW_XReady) { _ACTION_ARGUMENT_MOVE_WINDOW_XContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ARGUMENT_MOVE_WINDOW_X"); _ACTION_ARGUMENT_MOVE_WINDOW_XReady = true; } return _ACTION_ARGUMENT_MOVE_WINDOW_XContent; } }
        private static Java.Lang.String _ACTION_ARGUMENT_MOVE_WINDOW_XContent = default;
        private static bool _ACTION_ARGUMENT_MOVE_WINDOW_XReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_MOVE_WINDOW_Y"/>
        /// </summary>
        public static Java.Lang.String ACTION_ARGUMENT_MOVE_WINDOW_Y { get { if (!_ACTION_ARGUMENT_MOVE_WINDOW_YReady) { _ACTION_ARGUMENT_MOVE_WINDOW_YContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ARGUMENT_MOVE_WINDOW_Y"); _ACTION_ARGUMENT_MOVE_WINDOW_YReady = true; } return _ACTION_ARGUMENT_MOVE_WINDOW_YContent; } }
        private static Java.Lang.String _ACTION_ARGUMENT_MOVE_WINDOW_YContent = default;
        private static bool _ACTION_ARGUMENT_MOVE_WINDOW_YReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT"/>
        /// </summary>
        public static Java.Lang.String ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT { get { if (!_ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INTReady) { _ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT"); _ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INTReady = true; } return _ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INTContent; } }
        private static Java.Lang.String _ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INTContent = default;
        private static bool _ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INT"/>
        /// </summary>
        public static Java.Lang.String ACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INT { get { if (!_ACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INTReady) { _ACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INT"); _ACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INTReady = true; } return _ACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INTContent; } }
        private static Java.Lang.String _ACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INTContent = default;
        private static bool _ACTION_ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_PROGRESS_VALUE"/>
        /// </summary>
        public static Java.Lang.String ACTION_ARGUMENT_PROGRESS_VALUE { get { if (!_ACTION_ARGUMENT_PROGRESS_VALUEReady) { _ACTION_ARGUMENT_PROGRESS_VALUEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ARGUMENT_PROGRESS_VALUE"); _ACTION_ARGUMENT_PROGRESS_VALUEReady = true; } return _ACTION_ARGUMENT_PROGRESS_VALUEContent; } }
        private static Java.Lang.String _ACTION_ARGUMENT_PROGRESS_VALUEContent = default;
        private static bool _ACTION_ARGUMENT_PROGRESS_VALUEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_ROW_INT"/>
        /// </summary>
        public static Java.Lang.String ACTION_ARGUMENT_ROW_INT { get { if (!_ACTION_ARGUMENT_ROW_INTReady) { _ACTION_ARGUMENT_ROW_INTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ARGUMENT_ROW_INT"); _ACTION_ARGUMENT_ROW_INTReady = true; } return _ACTION_ARGUMENT_ROW_INTContent; } }
        private static Java.Lang.String _ACTION_ARGUMENT_ROW_INTContent = default;
        private static bool _ACTION_ARGUMENT_ROW_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_SCROLL_AMOUNT_FLOAT"/>
        /// </summary>
        public static Java.Lang.String ACTION_ARGUMENT_SCROLL_AMOUNT_FLOAT { get { if (!_ACTION_ARGUMENT_SCROLL_AMOUNT_FLOATReady) { _ACTION_ARGUMENT_SCROLL_AMOUNT_FLOATContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ARGUMENT_SCROLL_AMOUNT_FLOAT"); _ACTION_ARGUMENT_SCROLL_AMOUNT_FLOATReady = true; } return _ACTION_ARGUMENT_SCROLL_AMOUNT_FLOATContent; } }
        private static Java.Lang.String _ACTION_ARGUMENT_SCROLL_AMOUNT_FLOATContent = default;
        private static bool _ACTION_ARGUMENT_SCROLL_AMOUNT_FLOATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_SELECTION_END_INT"/>
        /// </summary>
        public static Java.Lang.String ACTION_ARGUMENT_SELECTION_END_INT { get { if (!_ACTION_ARGUMENT_SELECTION_END_INTReady) { _ACTION_ARGUMENT_SELECTION_END_INTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ARGUMENT_SELECTION_END_INT"); _ACTION_ARGUMENT_SELECTION_END_INTReady = true; } return _ACTION_ARGUMENT_SELECTION_END_INTContent; } }
        private static Java.Lang.String _ACTION_ARGUMENT_SELECTION_END_INTContent = default;
        private static bool _ACTION_ARGUMENT_SELECTION_END_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_SELECTION_START_INT"/>
        /// </summary>
        public static Java.Lang.String ACTION_ARGUMENT_SELECTION_START_INT { get { if (!_ACTION_ARGUMENT_SELECTION_START_INTReady) { _ACTION_ARGUMENT_SELECTION_START_INTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ARGUMENT_SELECTION_START_INT"); _ACTION_ARGUMENT_SELECTION_START_INTReady = true; } return _ACTION_ARGUMENT_SELECTION_START_INTContent; } }
        private static Java.Lang.String _ACTION_ARGUMENT_SELECTION_START_INTContent = default;
        private static bool _ACTION_ARGUMENT_SELECTION_START_INTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE"/>
        /// </summary>
        public static Java.Lang.String ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE { get { if (!_ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCEReady) { _ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE"); _ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCEReady = true; } return _ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCEContent; } }
        private static Java.Lang.String _ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCEContent = default;
        private static bool _ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#EXTRA_DATA_RENDERING_INFO_KEY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DATA_RENDERING_INFO_KEY { get { if (!_EXTRA_DATA_RENDERING_INFO_KEYReady) { _EXTRA_DATA_RENDERING_INFO_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DATA_RENDERING_INFO_KEY"); _EXTRA_DATA_RENDERING_INFO_KEYReady = true; } return _EXTRA_DATA_RENDERING_INFO_KEYContent; } }
        private static Java.Lang.String _EXTRA_DATA_RENDERING_INFO_KEYContent = default;
        private static bool _EXTRA_DATA_RENDERING_INFO_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH { get { if (!_EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTHReady) { _EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH"); _EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTHReady = true; } return _EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTHContent; } }
        private static Java.Lang.String _EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTHContent = default;
        private static bool _EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX { get { if (!_EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEXReady) { _EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX"); _EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEXReady = true; } return _EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEXContent; } }
        private static Java.Lang.String _EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEXContent = default;
        private static bool _EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY { get { if (!_EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEYReady) { _EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY"); _EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEYReady = true; } return _EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEYContent; } }
        private static Java.Lang.String _EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEYContent = default;
        private static bool _EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEYReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#obtain()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        [global::System.Obsolete()]
        public static Android.View.Accessibility.AccessibilityNodeInfo Obtain()
        {
            return SExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>(LocalBridgeClazz, "obtain", "()Landroid/view/accessibility/AccessibilityNodeInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#obtain(android.view.accessibility.AccessibilityNodeInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></param>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        [global::System.Obsolete()]
        public static Android.View.Accessibility.AccessibilityNodeInfo Obtain(Android.View.Accessibility.AccessibilityNodeInfo arg0)
        {
            return SExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>(LocalBridgeClazz, "obtain", "(Landroid/view/accessibility/AccessibilityNodeInfo;)Landroid/view/accessibility/AccessibilityNodeInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#obtain(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        [global::System.Obsolete()]
        public static Android.View.Accessibility.AccessibilityNodeInfo Obtain(Android.View.View arg0, int arg1)
        {
            return SExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>(LocalBridgeClazz, "obtain", "(Landroid/view/View;I)Landroid/view/accessibility/AccessibilityNodeInfo;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#obtain(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        [global::System.Obsolete()]
        public static Android.View.Accessibility.AccessibilityNodeInfo Obtain(Android.View.View arg0)
        {
            return SExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>(LocalBridgeClazz, "obtain", "(Landroid/view/View;)Landroid/view/accessibility/AccessibilityNodeInfo;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getExtras()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetExtras()
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getExtras", "()Landroid/os/Bundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#findFocus(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo FindFocus(int arg0)
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>("findFocus", "(I)Landroid/view/accessibility/AccessibilityNodeInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#focusSearch(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo FocusSearch(int arg0)
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>("focusSearch", "(I)Landroid/view/accessibility/AccessibilityNodeInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getChild(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo GetChild(int arg0, int arg1)
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>("getChild", "(II)Landroid/view/accessibility/AccessibilityNodeInfo;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getChild(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo GetChild(int arg0)
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>("getChild", "(I)Landroid/view/accessibility/AccessibilityNodeInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getLabeledBy()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo GetLabeledBy()
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>("getLabeledBy", "()Landroid/view/accessibility/AccessibilityNodeInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getLabelFor()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo GetLabelFor()
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>("getLabelFor", "()Landroid/view/accessibility/AccessibilityNodeInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getParent()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo GetParent()
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>("getParent", "()Landroid/view/accessibility/AccessibilityNodeInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getParent(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo GetParent(int arg0)
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>("getParent", "(I)Landroid/view/accessibility/AccessibilityNodeInfo;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getTraversalAfter()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo GetTraversalAfter()
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>("getTraversalAfter", "()Landroid/view/accessibility/AccessibilityNodeInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getTraversalBefore()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo GetTraversalBefore()
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>("getTraversalBefore", "()Landroid/view/accessibility/AccessibilityNodeInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getCollectionInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo GetCollectionInfo()
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo>("getCollectionInfo", "()Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getCollectionItemInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo GetCollectionItemInfo()
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo>("getCollectionItemInfo", "()Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getExtraRenderingInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.ExtraRenderingInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo.ExtraRenderingInfo GetExtraRenderingInfo()
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.ExtraRenderingInfo>("getExtraRenderingInfo", "()Landroid/view/accessibility/AccessibilityNodeInfo$ExtraRenderingInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getRangeInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.RangeInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo.RangeInfo GetRangeInfo()
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.RangeInfo>("getRangeInfo", "()Landroid/view/accessibility/AccessibilityNodeInfo$RangeInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getTouchDelegateInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.TouchDelegateInfo"/></returns>
        public Android.View.Accessibility.AccessibilityNodeInfo.TouchDelegateInfo GetTouchDelegateInfo()
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.TouchDelegateInfo>("getTouchDelegateInfo", "()Landroid/view/accessibility/AccessibilityNodeInfo$TouchDelegateInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getWindow()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Accessibility.AccessibilityWindowInfo"/></returns>
        public Android.View.Accessibility.AccessibilityWindowInfo GetWindow()
        {
            return IExecuteWithSignature<Android.View.Accessibility.AccessibilityWindowInfo>("getWindow", "()Landroid/view/accessibility/AccessibilityWindowInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#canOpenPopup()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool CanOpenPopup()
        {
            return IExecuteWithSignature<bool>("canOpenPopup", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#hasRequestInitialAccessibilityFocus()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool HasRequestInitialAccessibilityFocus()
        {
            return IExecuteWithSignature<bool>("hasRequestInitialAccessibilityFocus", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isAccessibilityDataSensitive()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAccessibilityDataSensitive()
        {
            return IExecuteWithSignature<bool>("isAccessibilityDataSensitive", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isAccessibilityFocused()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsAccessibilityFocused()
        {
            return IExecuteWithSignature<bool>("isAccessibilityFocused", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isCheckable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsCheckable()
        {
            return IExecuteWithSignature<bool>("isCheckable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isChecked()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsChecked()
        {
            return IExecuteWithSignature<bool>("isChecked", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isClickable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsClickable()
        {
            return IExecuteWithSignature<bool>("isClickable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isContentInvalid()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsContentInvalid()
        {
            return IExecuteWithSignature<bool>("isContentInvalid", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isContextClickable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsContextClickable()
        {
            return IExecuteWithSignature<bool>("isContextClickable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isDismissable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsDismissable()
        {
            return IExecuteWithSignature<bool>("isDismissable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isEditable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEditable()
        {
            return IExecuteWithSignature<bool>("isEditable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEnabled()
        {
            return IExecuteWithSignature<bool>("isEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isFocusable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFocusable()
        {
            return IExecuteWithSignature<bool>("isFocusable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isFocused()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFocused()
        {
            return IExecuteWithSignature<bool>("isFocused", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isGranularScrollingSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsGranularScrollingSupported()
        {
            return IExecuteWithSignature<bool>("isGranularScrollingSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isHeading()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHeading()
        {
            return IExecuteWithSignature<bool>("isHeading", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isImportantForAccessibility()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsImportantForAccessibility()
        {
            return IExecuteWithSignature<bool>("isImportantForAccessibility", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isLongClickable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLongClickable()
        {
            return IExecuteWithSignature<bool>("isLongClickable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isMultiLine()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMultiLine()
        {
            return IExecuteWithSignature<bool>("isMultiLine", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isPassword()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsPassword()
        {
            return IExecuteWithSignature<bool>("isPassword", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isScreenReaderFocusable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsScreenReaderFocusable()
        {
            return IExecuteWithSignature<bool>("isScreenReaderFocusable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isScrollable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsScrollable()
        {
            return IExecuteWithSignature<bool>("isScrollable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isSelected()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsSelected()
        {
            return IExecuteWithSignature<bool>("isSelected", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isShowingHintText()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsShowingHintText()
        {
            return IExecuteWithSignature<bool>("isShowingHintText", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isTextEntryKey()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTextEntryKey()
        {
            return IExecuteWithSignature<bool>("isTextEntryKey", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isTextSelectable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsTextSelectable()
        {
            return IExecuteWithSignature<bool>("isTextSelectable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isVisibleToUser()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsVisibleToUser()
        {
            return IExecuteWithSignature<bool>("isVisibleToUser", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#performAction(int,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PerformAction(int arg0, Android.Os.Bundle arg1)
        {
            return IExecuteWithSignature<bool>("performAction", "(ILandroid/os/Bundle;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#performAction(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PerformAction(int arg0)
        {
            return IExecuteWithSignature<bool>("performAction", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#refresh()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool Refresh()
        {
            return IExecuteWithSignature<bool>("refresh", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#refreshWithExtraData(java.lang.String,android.os.Bundle)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Android.Os.Bundle"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RefreshWithExtraData(Java.Lang.String arg0, Android.Os.Bundle arg1)
        {
            return IExecuteWithSignature<bool>("refreshWithExtraData", "(Ljava/lang/String;Landroid/os/Bundle;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#removeAction(android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RemoveAction(Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction arg0)
        {
            return IExecuteWithSignature<bool>("removeAction", "(Landroid/view/accessibility/AccessibilityNodeInfo$AccessibilityAction;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#removeChild(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RemoveChild(Android.View.View arg0, int arg1)
        {
            return IExecuteWithSignature<bool>("removeChild", "(Landroid/view/View;I)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#removeChild(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RemoveChild(Android.View.View arg0)
        {
            return IExecuteWithSignature<bool>("removeChild", "(Landroid/view/View;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getActions()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetActions()
        {
            return IExecuteWithSignature<int>("getActions", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getChildCount()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetChildCount()
        {
            return IExecuteWithSignature<int>("getChildCount", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getDrawingOrder()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDrawingOrder()
        {
            return IExecuteWithSignature<int>("getDrawingOrder", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getInputType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetInputType()
        {
            return IExecuteWithSignature<int>("getInputType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getLiveRegion()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetLiveRegion()
        {
            return IExecuteWithSignature<int>("getLiveRegion", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getMaxTextLength()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMaxTextLength()
        {
            return IExecuteWithSignature<int>("getMaxTextLength", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getMovementGranularities()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetMovementGranularities()
        {
            return IExecuteWithSignature<int>("getMovementGranularities", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getTextSelectionEnd()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTextSelectionEnd()
        {
            return IExecuteWithSignature<int>("getTextSelectionEnd", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getTextSelectionStart()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetTextSelectionStart()
        {
            return IExecuteWithSignature<int>("getTextSelectionStart", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getWindowId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetWindowId()
        {
            return IExecuteWithSignature<int>("getWindowId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getClassName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetClassName()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getClassName", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getContainerTitle()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetContainerTitle()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getContainerTitle", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getContentDescription()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetContentDescription()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getContentDescription", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getError()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetError()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getError", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getHintText()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetHintText()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getHintText", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getPackageName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetPackageName()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getPackageName", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getPaneTitle()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetPaneTitle()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getPaneTitle", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getStateDescription()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetStateDescription()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getStateDescription", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getText()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetText()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getText", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getTooltipText()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.CharSequence"/></returns>
        public Java.Lang.CharSequence GetTooltipText()
        {
            return IExecuteWithSignature<Java.Lang.CharSequence>("getTooltipText", "()Ljava/lang/CharSequence;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getUniqueId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetUniqueId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getUniqueId", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getViewIdResourceName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetViewIdResourceName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getViewIdResourceName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getMinDurationBetweenContentChanges()"/>
        /// </summary>
        /// <returns><see cref="Java.Time.Duration"/></returns>
        public Java.Time.Duration GetMinDurationBetweenContentChanges()
        {
            return IExecuteWithSignature<Java.Time.Duration>("getMinDurationBetweenContentChanges", "()Ljava/time/Duration;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#findAccessibilityNodeInfosByText(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.View.Accessibility.AccessibilityNodeInfo> FindAccessibilityNodeInfosByText(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.View.Accessibility.AccessibilityNodeInfo>>("findAccessibilityNodeInfosByText", "(Ljava/lang/String;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#findAccessibilityNodeInfosByViewId(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.View.Accessibility.AccessibilityNodeInfo> FindAccessibilityNodeInfosByViewId(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.View.Accessibility.AccessibilityNodeInfo>>("findAccessibilityNodeInfosByViewId", "(Ljava/lang/String;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getActionList()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction> GetActionList()
        {
            return IExecuteWithSignature<Java.Util.List<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>>("getActionList", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getAvailableExtraData()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> GetAvailableExtraData()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("getAvailableExtraData", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#addAction(android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction"/></param>
        public void AddAction(Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction arg0)
        {
            IExecuteWithSignature("addAction", "(Landroid/view/accessibility/AccessibilityNodeInfo$AccessibilityAction;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#addAction(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void AddAction(int arg0)
        {
            IExecuteWithSignature("addAction", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#addChild(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void AddChild(Android.View.View arg0, int arg1)
        {
            IExecuteWithSignature("addChild", "(Landroid/view/View;I)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#addChild(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void AddChild(Android.View.View arg0)
        {
            IExecuteWithSignature("addChild", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getBoundsInParent(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        [global::System.Obsolete()]
        public void GetBoundsInParent(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("getBoundsInParent", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getBoundsInScreen(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public void GetBoundsInScreen(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("getBoundsInScreen", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getBoundsInWindow(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public void GetBoundsInWindow(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("getBoundsInWindow", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#recycle()"/>
        /// </summary>
        [global::System.Obsolete()]
        public void Recycle()
        {
            IExecuteWithSignature("recycle", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#removeAction(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        [global::System.Obsolete()]
        public void RemoveAction(int arg0)
        {
            IExecuteWithSignature("removeAction", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setAccessibilityDataSensitive(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAccessibilityDataSensitive(bool arg0)
        {
            IExecuteWithSignature("setAccessibilityDataSensitive", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setAccessibilityFocused(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetAccessibilityFocused(bool arg0)
        {
            IExecuteWithSignature("setAccessibilityFocused", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setAvailableExtraData(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void SetAvailableExtraData(Java.Util.List<Java.Lang.String> arg0)
        {
            IExecuteWithSignature("setAvailableExtraData", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setBoundsInParent(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        [global::System.Obsolete()]
        public void SetBoundsInParent(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("setBoundsInParent", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setBoundsInScreen(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public void SetBoundsInScreen(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("setBoundsInScreen", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setBoundsInWindow(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        public void SetBoundsInWindow(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("setBoundsInWindow", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setCanOpenPopup(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetCanOpenPopup(bool arg0)
        {
            IExecuteWithSignature("setCanOpenPopup", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setCheckable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetCheckable(bool arg0)
        {
            IExecuteWithSignature("setCheckable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setChecked(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetChecked(bool arg0)
        {
            IExecuteWithSignature("setChecked", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setClassName(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetClassName(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setClassName", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setClickable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetClickable(bool arg0)
        {
            IExecuteWithSignature("setClickable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setCollectionInfo(android.view.accessibility.AccessibilityNodeInfo.CollectionInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo"/></param>
        public void SetCollectionInfo(Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo arg0)
        {
            IExecuteWithSignature("setCollectionInfo", "(Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setCollectionItemInfo(android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo"/></param>
        public void SetCollectionItemInfo(Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo arg0)
        {
            IExecuteWithSignature("setCollectionItemInfo", "(Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setContainerTitle(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetContainerTitle(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setContainerTitle", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setContentDescription(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetContentDescription(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setContentDescription", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setContentInvalid(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetContentInvalid(bool arg0)
        {
            IExecuteWithSignature("setContentInvalid", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setContextClickable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetContextClickable(bool arg0)
        {
            IExecuteWithSignature("setContextClickable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setDismissable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetDismissable(bool arg0)
        {
            IExecuteWithSignature("setDismissable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setDrawingOrder(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetDrawingOrder(int arg0)
        {
            IExecuteWithSignature("setDrawingOrder", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setEditable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetEditable(bool arg0)
        {
            IExecuteWithSignature("setEditable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetEnabled(bool arg0)
        {
            IExecuteWithSignature("setEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setError(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetError(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setError", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setFocusable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFocusable(bool arg0)
        {
            IExecuteWithSignature("setFocusable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setFocused(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetFocused(bool arg0)
        {
            IExecuteWithSignature("setFocused", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setGranularScrollingSupported(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetGranularScrollingSupported(bool arg0)
        {
            IExecuteWithSignature("setGranularScrollingSupported", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setHeading(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetHeading(bool arg0)
        {
            IExecuteWithSignature("setHeading", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setHintText(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetHintText(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setHintText", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setImportantForAccessibility(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetImportantForAccessibility(bool arg0)
        {
            IExecuteWithSignature("setImportantForAccessibility", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setInputType(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetInputType(int arg0)
        {
            IExecuteWithSignature("setInputType", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setLabeledBy(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetLabeledBy(Android.View.View arg0, int arg1)
        {
            IExecuteWithSignature("setLabeledBy", "(Landroid/view/View;I)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setLabeledBy(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void SetLabeledBy(Android.View.View arg0)
        {
            IExecuteWithSignature("setLabeledBy", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setLabelFor(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetLabelFor(Android.View.View arg0, int arg1)
        {
            IExecuteWithSignature("setLabelFor", "(Landroid/view/View;I)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setLabelFor(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void SetLabelFor(Android.View.View arg0)
        {
            IExecuteWithSignature("setLabelFor", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setLiveRegion(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetLiveRegion(int arg0)
        {
            IExecuteWithSignature("setLiveRegion", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setLongClickable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetLongClickable(bool arg0)
        {
            IExecuteWithSignature("setLongClickable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setMaxTextLength(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMaxTextLength(int arg0)
        {
            IExecuteWithSignature("setMaxTextLength", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setMinDurationBetweenContentChanges(java.time.Duration)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Time.Duration"/></param>
        public void SetMinDurationBetweenContentChanges(Java.Time.Duration arg0)
        {
            IExecuteWithSignature("setMinDurationBetweenContentChanges", "(Ljava/time/Duration;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setMovementGranularities(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetMovementGranularities(int arg0)
        {
            IExecuteWithSignature("setMovementGranularities", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setMultiLine(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetMultiLine(bool arg0)
        {
            IExecuteWithSignature("setMultiLine", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setPackageName(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetPackageName(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setPackageName", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setPaneTitle(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetPaneTitle(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setPaneTitle", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setParent(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetParent(Android.View.View arg0, int arg1)
        {
            IExecuteWithSignature("setParent", "(Landroid/view/View;I)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setParent(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void SetParent(Android.View.View arg0)
        {
            IExecuteWithSignature("setParent", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setPassword(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetPassword(bool arg0)
        {
            IExecuteWithSignature("setPassword", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setQueryFromAppProcessEnabled(android.view.View,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        public void SetQueryFromAppProcessEnabled(Android.View.View arg0, bool arg1)
        {
            IExecuteWithSignature("setQueryFromAppProcessEnabled", "(Landroid/view/View;Z)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setRangeInfo(android.view.accessibility.AccessibilityNodeInfo.RangeInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityNodeInfo.RangeInfo"/></param>
        public void SetRangeInfo(Android.View.Accessibility.AccessibilityNodeInfo.RangeInfo arg0)
        {
            IExecuteWithSignature("setRangeInfo", "(Landroid/view/accessibility/AccessibilityNodeInfo$RangeInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setRequestInitialAccessibilityFocus(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetRequestInitialAccessibilityFocus(bool arg0)
        {
            IExecuteWithSignature("setRequestInitialAccessibilityFocus", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setScreenReaderFocusable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetScreenReaderFocusable(bool arg0)
        {
            IExecuteWithSignature("setScreenReaderFocusable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setScrollable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetScrollable(bool arg0)
        {
            IExecuteWithSignature("setScrollable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setSelected(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetSelected(bool arg0)
        {
            IExecuteWithSignature("setSelected", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setShowingHintText(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetShowingHintText(bool arg0)
        {
            IExecuteWithSignature("setShowingHintText", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setSource(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetSource(Android.View.View arg0, int arg1)
        {
            IExecuteWithSignature("setSource", "(Landroid/view/View;I)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setSource(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void SetSource(Android.View.View arg0)
        {
            IExecuteWithSignature("setSource", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setStateDescription(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetStateDescription(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setStateDescription", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setText(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetText(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setText", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTextEntryKey(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetTextEntryKey(bool arg0)
        {
            IExecuteWithSignature("setTextEntryKey", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTextSelectable(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetTextSelectable(bool arg0)
        {
            IExecuteWithSignature("setTextSelectable", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTextSelection(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetTextSelection(int arg0, int arg1)
        {
            IExecuteWithSignature("setTextSelection", "(II)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTooltipText(java.lang.CharSequence)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.CharSequence"/></param>
        public void SetTooltipText(Java.Lang.CharSequence arg0)
        {
            IExecuteWithSignature("setTooltipText", "(Ljava/lang/CharSequence;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTouchDelegateInfo(android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.Accessibility.AccessibilityNodeInfo.TouchDelegateInfo"/></param>
        public void SetTouchDelegateInfo(Android.View.Accessibility.AccessibilityNodeInfo.TouchDelegateInfo arg0)
        {
            IExecuteWithSignature("setTouchDelegateInfo", "(Landroid/view/accessibility/AccessibilityNodeInfo$TouchDelegateInfo;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTraversalAfter(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetTraversalAfter(Android.View.View arg0, int arg1)
        {
            IExecuteWithSignature("setTraversalAfter", "(Landroid/view/View;I)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTraversalAfter(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void SetTraversalAfter(Android.View.View arg0)
        {
            IExecuteWithSignature("setTraversalAfter", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTraversalBefore(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void SetTraversalBefore(Android.View.View arg0, int arg1)
        {
            IExecuteWithSignature("setTraversalBefore", "(Landroid/view/View;I)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTraversalBefore(android.view.View)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        public void SetTraversalBefore(Android.View.View arg0)
        {
            IExecuteWithSignature("setTraversalBefore", "(Landroid/view/View;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setUniqueId(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetUniqueId(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setUniqueId", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setViewIdResourceName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void SetViewIdResourceName(Java.Lang.String arg0)
        {
            IExecuteWithSignature("setViewIdResourceName", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setVisibleToUser(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetVisibleToUser(bool arg0)
        {
            IExecuteWithSignature("setVisibleToUser", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region AccessibilityAction implementation
        public partial class AccessibilityAction
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#%3Cinit%3E(int,java.lang.CharSequence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Lang.CharSequence"/></param>
            public AccessibilityAction(int arg0, Java.Lang.CharSequence arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_ACCESSIBILITY_FOCUS"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_ACCESSIBILITY_FOCUS { get { if (!_ACTION_ACCESSIBILITY_FOCUSReady) { _ACTION_ACCESSIBILITY_FOCUSContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_ACCESSIBILITY_FOCUS"); _ACTION_ACCESSIBILITY_FOCUSReady = true; } return _ACTION_ACCESSIBILITY_FOCUSContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_ACCESSIBILITY_FOCUSContent = default;
            private static bool _ACTION_ACCESSIBILITY_FOCUSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_CLEAR_ACCESSIBILITY_FOCUS"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_CLEAR_ACCESSIBILITY_FOCUS { get { if (!_ACTION_CLEAR_ACCESSIBILITY_FOCUSReady) { _ACTION_CLEAR_ACCESSIBILITY_FOCUSContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_CLEAR_ACCESSIBILITY_FOCUS"); _ACTION_CLEAR_ACCESSIBILITY_FOCUSReady = true; } return _ACTION_CLEAR_ACCESSIBILITY_FOCUSContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_CLEAR_ACCESSIBILITY_FOCUSContent = default;
            private static bool _ACTION_CLEAR_ACCESSIBILITY_FOCUSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_CLEAR_FOCUS"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_CLEAR_FOCUS { get { if (!_ACTION_CLEAR_FOCUSReady) { _ACTION_CLEAR_FOCUSContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_CLEAR_FOCUS"); _ACTION_CLEAR_FOCUSReady = true; } return _ACTION_CLEAR_FOCUSContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_CLEAR_FOCUSContent = default;
            private static bool _ACTION_CLEAR_FOCUSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_CLEAR_SELECTION"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_CLEAR_SELECTION { get { if (!_ACTION_CLEAR_SELECTIONReady) { _ACTION_CLEAR_SELECTIONContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_CLEAR_SELECTION"); _ACTION_CLEAR_SELECTIONReady = true; } return _ACTION_CLEAR_SELECTIONContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_CLEAR_SELECTIONContent = default;
            private static bool _ACTION_CLEAR_SELECTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_CLICK"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_CLICK { get { if (!_ACTION_CLICKReady) { _ACTION_CLICKContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_CLICK"); _ACTION_CLICKReady = true; } return _ACTION_CLICKContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_CLICKContent = default;
            private static bool _ACTION_CLICKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_COLLAPSE"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_COLLAPSE { get { if (!_ACTION_COLLAPSEReady) { _ACTION_COLLAPSEContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_COLLAPSE"); _ACTION_COLLAPSEReady = true; } return _ACTION_COLLAPSEContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_COLLAPSEContent = default;
            private static bool _ACTION_COLLAPSEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_CONTEXT_CLICK"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_CONTEXT_CLICK { get { if (!_ACTION_CONTEXT_CLICKReady) { _ACTION_CONTEXT_CLICKContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_CONTEXT_CLICK"); _ACTION_CONTEXT_CLICKReady = true; } return _ACTION_CONTEXT_CLICKContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_CONTEXT_CLICKContent = default;
            private static bool _ACTION_CONTEXT_CLICKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_COPY"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_COPY { get { if (!_ACTION_COPYReady) { _ACTION_COPYContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_COPY"); _ACTION_COPYReady = true; } return _ACTION_COPYContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_COPYContent = default;
            private static bool _ACTION_COPYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_CUT"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_CUT { get { if (!_ACTION_CUTReady) { _ACTION_CUTContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_CUT"); _ACTION_CUTReady = true; } return _ACTION_CUTContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_CUTContent = default;
            private static bool _ACTION_CUTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_DISMISS"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_DISMISS { get { if (!_ACTION_DISMISSReady) { _ACTION_DISMISSContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_DISMISS"); _ACTION_DISMISSReady = true; } return _ACTION_DISMISSContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_DISMISSContent = default;
            private static bool _ACTION_DISMISSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_DRAG_CANCEL"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_DRAG_CANCEL { get { if (!_ACTION_DRAG_CANCELReady) { _ACTION_DRAG_CANCELContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_DRAG_CANCEL"); _ACTION_DRAG_CANCELReady = true; } return _ACTION_DRAG_CANCELContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_DRAG_CANCELContent = default;
            private static bool _ACTION_DRAG_CANCELReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_DRAG_DROP"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_DRAG_DROP { get { if (!_ACTION_DRAG_DROPReady) { _ACTION_DRAG_DROPContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_DRAG_DROP"); _ACTION_DRAG_DROPReady = true; } return _ACTION_DRAG_DROPContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_DRAG_DROPContent = default;
            private static bool _ACTION_DRAG_DROPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_DRAG_START"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_DRAG_START { get { if (!_ACTION_DRAG_STARTReady) { _ACTION_DRAG_STARTContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_DRAG_START"); _ACTION_DRAG_STARTReady = true; } return _ACTION_DRAG_STARTContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_DRAG_STARTContent = default;
            private static bool _ACTION_DRAG_STARTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_EXPAND"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_EXPAND { get { if (!_ACTION_EXPANDReady) { _ACTION_EXPANDContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_EXPAND"); _ACTION_EXPANDReady = true; } return _ACTION_EXPANDContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_EXPANDContent = default;
            private static bool _ACTION_EXPANDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_FOCUS"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_FOCUS { get { if (!_ACTION_FOCUSReady) { _ACTION_FOCUSContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_FOCUS"); _ACTION_FOCUSReady = true; } return _ACTION_FOCUSContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_FOCUSContent = default;
            private static bool _ACTION_FOCUSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_HIDE_TOOLTIP"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_HIDE_TOOLTIP { get { if (!_ACTION_HIDE_TOOLTIPReady) { _ACTION_HIDE_TOOLTIPContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_HIDE_TOOLTIP"); _ACTION_HIDE_TOOLTIPReady = true; } return _ACTION_HIDE_TOOLTIPContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_HIDE_TOOLTIPContent = default;
            private static bool _ACTION_HIDE_TOOLTIPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_IME_ENTER"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_IME_ENTER { get { if (!_ACTION_IME_ENTERReady) { _ACTION_IME_ENTERContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_IME_ENTER"); _ACTION_IME_ENTERReady = true; } return _ACTION_IME_ENTERContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_IME_ENTERContent = default;
            private static bool _ACTION_IME_ENTERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_LONG_CLICK"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_LONG_CLICK { get { if (!_ACTION_LONG_CLICKReady) { _ACTION_LONG_CLICKContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_LONG_CLICK"); _ACTION_LONG_CLICKReady = true; } return _ACTION_LONG_CLICKContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_LONG_CLICKContent = default;
            private static bool _ACTION_LONG_CLICKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_MOVE_WINDOW"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_MOVE_WINDOW { get { if (!_ACTION_MOVE_WINDOWReady) { _ACTION_MOVE_WINDOWContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_MOVE_WINDOW"); _ACTION_MOVE_WINDOWReady = true; } return _ACTION_MOVE_WINDOWContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_MOVE_WINDOWContent = default;
            private static bool _ACTION_MOVE_WINDOWReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_NEXT_AT_MOVEMENT_GRANULARITY"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_NEXT_AT_MOVEMENT_GRANULARITY { get { if (!_ACTION_NEXT_AT_MOVEMENT_GRANULARITYReady) { _ACTION_NEXT_AT_MOVEMENT_GRANULARITYContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_NEXT_AT_MOVEMENT_GRANULARITY"); _ACTION_NEXT_AT_MOVEMENT_GRANULARITYReady = true; } return _ACTION_NEXT_AT_MOVEMENT_GRANULARITYContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_NEXT_AT_MOVEMENT_GRANULARITYContent = default;
            private static bool _ACTION_NEXT_AT_MOVEMENT_GRANULARITYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_NEXT_HTML_ELEMENT"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_NEXT_HTML_ELEMENT { get { if (!_ACTION_NEXT_HTML_ELEMENTReady) { _ACTION_NEXT_HTML_ELEMENTContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_NEXT_HTML_ELEMENT"); _ACTION_NEXT_HTML_ELEMENTReady = true; } return _ACTION_NEXT_HTML_ELEMENTContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_NEXT_HTML_ELEMENTContent = default;
            private static bool _ACTION_NEXT_HTML_ELEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_PAGE_DOWN"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_PAGE_DOWN { get { if (!_ACTION_PAGE_DOWNReady) { _ACTION_PAGE_DOWNContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_PAGE_DOWN"); _ACTION_PAGE_DOWNReady = true; } return _ACTION_PAGE_DOWNContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_PAGE_DOWNContent = default;
            private static bool _ACTION_PAGE_DOWNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_PAGE_LEFT"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_PAGE_LEFT { get { if (!_ACTION_PAGE_LEFTReady) { _ACTION_PAGE_LEFTContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_PAGE_LEFT"); _ACTION_PAGE_LEFTReady = true; } return _ACTION_PAGE_LEFTContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_PAGE_LEFTContent = default;
            private static bool _ACTION_PAGE_LEFTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_PAGE_RIGHT"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_PAGE_RIGHT { get { if (!_ACTION_PAGE_RIGHTReady) { _ACTION_PAGE_RIGHTContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_PAGE_RIGHT"); _ACTION_PAGE_RIGHTReady = true; } return _ACTION_PAGE_RIGHTContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_PAGE_RIGHTContent = default;
            private static bool _ACTION_PAGE_RIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_PAGE_UP"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_PAGE_UP { get { if (!_ACTION_PAGE_UPReady) { _ACTION_PAGE_UPContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_PAGE_UP"); _ACTION_PAGE_UPReady = true; } return _ACTION_PAGE_UPContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_PAGE_UPContent = default;
            private static bool _ACTION_PAGE_UPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_PASTE"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_PASTE { get { if (!_ACTION_PASTEReady) { _ACTION_PASTEContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_PASTE"); _ACTION_PASTEReady = true; } return _ACTION_PASTEContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_PASTEContent = default;
            private static bool _ACTION_PASTEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_PRESS_AND_HOLD"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_PRESS_AND_HOLD { get { if (!_ACTION_PRESS_AND_HOLDReady) { _ACTION_PRESS_AND_HOLDContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_PRESS_AND_HOLD"); _ACTION_PRESS_AND_HOLDReady = true; } return _ACTION_PRESS_AND_HOLDContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_PRESS_AND_HOLDContent = default;
            private static bool _ACTION_PRESS_AND_HOLDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY { get { if (!_ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITYReady) { _ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITYContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY"); _ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITYReady = true; } return _ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITYContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITYContent = default;
            private static bool _ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_PREVIOUS_HTML_ELEMENT"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_PREVIOUS_HTML_ELEMENT { get { if (!_ACTION_PREVIOUS_HTML_ELEMENTReady) { _ACTION_PREVIOUS_HTML_ELEMENTContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_PREVIOUS_HTML_ELEMENT"); _ACTION_PREVIOUS_HTML_ELEMENTReady = true; } return _ACTION_PREVIOUS_HTML_ELEMENTContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_PREVIOUS_HTML_ELEMENTContent = default;
            private static bool _ACTION_PREVIOUS_HTML_ELEMENTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_SCROLL_BACKWARD"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_SCROLL_BACKWARD { get { if (!_ACTION_SCROLL_BACKWARDReady) { _ACTION_SCROLL_BACKWARDContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_SCROLL_BACKWARD"); _ACTION_SCROLL_BACKWARDReady = true; } return _ACTION_SCROLL_BACKWARDContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_SCROLL_BACKWARDContent = default;
            private static bool _ACTION_SCROLL_BACKWARDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_SCROLL_DOWN"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_SCROLL_DOWN { get { if (!_ACTION_SCROLL_DOWNReady) { _ACTION_SCROLL_DOWNContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_SCROLL_DOWN"); _ACTION_SCROLL_DOWNReady = true; } return _ACTION_SCROLL_DOWNContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_SCROLL_DOWNContent = default;
            private static bool _ACTION_SCROLL_DOWNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_SCROLL_FORWARD"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_SCROLL_FORWARD { get { if (!_ACTION_SCROLL_FORWARDReady) { _ACTION_SCROLL_FORWARDContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_SCROLL_FORWARD"); _ACTION_SCROLL_FORWARDReady = true; } return _ACTION_SCROLL_FORWARDContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_SCROLL_FORWARDContent = default;
            private static bool _ACTION_SCROLL_FORWARDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_SCROLL_IN_DIRECTION"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_SCROLL_IN_DIRECTION { get { if (!_ACTION_SCROLL_IN_DIRECTIONReady) { _ACTION_SCROLL_IN_DIRECTIONContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_SCROLL_IN_DIRECTION"); _ACTION_SCROLL_IN_DIRECTIONReady = true; } return _ACTION_SCROLL_IN_DIRECTIONContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_SCROLL_IN_DIRECTIONContent = default;
            private static bool _ACTION_SCROLL_IN_DIRECTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_SCROLL_LEFT"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_SCROLL_LEFT { get { if (!_ACTION_SCROLL_LEFTReady) { _ACTION_SCROLL_LEFTContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_SCROLL_LEFT"); _ACTION_SCROLL_LEFTReady = true; } return _ACTION_SCROLL_LEFTContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_SCROLL_LEFTContent = default;
            private static bool _ACTION_SCROLL_LEFTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_SCROLL_RIGHT"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_SCROLL_RIGHT { get { if (!_ACTION_SCROLL_RIGHTReady) { _ACTION_SCROLL_RIGHTContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_SCROLL_RIGHT"); _ACTION_SCROLL_RIGHTReady = true; } return _ACTION_SCROLL_RIGHTContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_SCROLL_RIGHTContent = default;
            private static bool _ACTION_SCROLL_RIGHTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_SCROLL_TO_POSITION"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_SCROLL_TO_POSITION { get { if (!_ACTION_SCROLL_TO_POSITIONReady) { _ACTION_SCROLL_TO_POSITIONContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_SCROLL_TO_POSITION"); _ACTION_SCROLL_TO_POSITIONReady = true; } return _ACTION_SCROLL_TO_POSITIONContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_SCROLL_TO_POSITIONContent = default;
            private static bool _ACTION_SCROLL_TO_POSITIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_SCROLL_UP"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_SCROLL_UP { get { if (!_ACTION_SCROLL_UPReady) { _ACTION_SCROLL_UPContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_SCROLL_UP"); _ACTION_SCROLL_UPReady = true; } return _ACTION_SCROLL_UPContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_SCROLL_UPContent = default;
            private static bool _ACTION_SCROLL_UPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_SELECT"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_SELECT { get { if (!_ACTION_SELECTReady) { _ACTION_SELECTContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_SELECT"); _ACTION_SELECTReady = true; } return _ACTION_SELECTContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_SELECTContent = default;
            private static bool _ACTION_SELECTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_SET_PROGRESS"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_SET_PROGRESS { get { if (!_ACTION_SET_PROGRESSReady) { _ACTION_SET_PROGRESSContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_SET_PROGRESS"); _ACTION_SET_PROGRESSReady = true; } return _ACTION_SET_PROGRESSContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_SET_PROGRESSContent = default;
            private static bool _ACTION_SET_PROGRESSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_SET_SELECTION"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_SET_SELECTION { get { if (!_ACTION_SET_SELECTIONReady) { _ACTION_SET_SELECTIONContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_SET_SELECTION"); _ACTION_SET_SELECTIONReady = true; } return _ACTION_SET_SELECTIONContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_SET_SELECTIONContent = default;
            private static bool _ACTION_SET_SELECTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_SET_TEXT"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_SET_TEXT { get { if (!_ACTION_SET_TEXTReady) { _ACTION_SET_TEXTContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_SET_TEXT"); _ACTION_SET_TEXTReady = true; } return _ACTION_SET_TEXTContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_SET_TEXTContent = default;
            private static bool _ACTION_SET_TEXTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_SHOW_ON_SCREEN"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_SHOW_ON_SCREEN { get { if (!_ACTION_SHOW_ON_SCREENReady) { _ACTION_SHOW_ON_SCREENContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_SHOW_ON_SCREEN"); _ACTION_SHOW_ON_SCREENReady = true; } return _ACTION_SHOW_ON_SCREENContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_SHOW_ON_SCREENContent = default;
            private static bool _ACTION_SHOW_ON_SCREENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_SHOW_TEXT_SUGGESTIONS"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_SHOW_TEXT_SUGGESTIONS { get { if (!_ACTION_SHOW_TEXT_SUGGESTIONSReady) { _ACTION_SHOW_TEXT_SUGGESTIONSContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_SHOW_TEXT_SUGGESTIONS"); _ACTION_SHOW_TEXT_SUGGESTIONSReady = true; } return _ACTION_SHOW_TEXT_SUGGESTIONSContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_SHOW_TEXT_SUGGESTIONSContent = default;
            private static bool _ACTION_SHOW_TEXT_SUGGESTIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#ACTION_SHOW_TOOLTIP"/>
            /// </summary>
            public static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction ACTION_SHOW_TOOLTIP { get { if (!_ACTION_SHOW_TOOLTIPReady) { _ACTION_SHOW_TOOLTIPContent = SGetField<Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction>(LocalBridgeClazz, "ACTION_SHOW_TOOLTIP"); _ACTION_SHOW_TOOLTIPReady = true; } return _ACTION_SHOW_TOOLTIPContent; } }
            private static Android.View.Accessibility.AccessibilityNodeInfo.AccessibilityAction _ACTION_SHOW_TOOLTIPContent = default;
            private static bool _ACTION_SHOW_TOOLTIPReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#getId()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetId()
            {
                return IExecuteWithSignature<int>("getId", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#getLabel()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.CharSequence"/></returns>
            public Java.Lang.CharSequence GetLabel()
            {
                return IExecuteWithSignature<Java.Lang.CharSequence>("getLabel", "()Ljava/lang/CharSequence;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.AccessibilityAction.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region CollectionInfo implementation
        public partial class CollectionInfo
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#%3Cinit%3E(int,int,boolean,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="bool"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            public CollectionInfo(int arg0, int arg1, bool arg2, int arg3)
                : base(arg0, arg1, arg2, arg3)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#%3Cinit%3E(int,int,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="bool"/></param>
            public CollectionInfo(int arg0, int arg1, bool arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#SELECTION_MODE_MULTIPLE"/>
            /// </summary>
            public static int SELECTION_MODE_MULTIPLE { get { if (!_SELECTION_MODE_MULTIPLEReady) { _SELECTION_MODE_MULTIPLEContent = SGetField<int>(LocalBridgeClazz, "SELECTION_MODE_MULTIPLE"); _SELECTION_MODE_MULTIPLEReady = true; } return _SELECTION_MODE_MULTIPLEContent; } }
            private static int _SELECTION_MODE_MULTIPLEContent = default;
            private static bool _SELECTION_MODE_MULTIPLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#SELECTION_MODE_NONE"/>
            /// </summary>
            public static int SELECTION_MODE_NONE { get { if (!_SELECTION_MODE_NONEReady) { _SELECTION_MODE_NONEContent = SGetField<int>(LocalBridgeClazz, "SELECTION_MODE_NONE"); _SELECTION_MODE_NONEReady = true; } return _SELECTION_MODE_NONEContent; } }
            private static int _SELECTION_MODE_NONEContent = default;
            private static bool _SELECTION_MODE_NONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#SELECTION_MODE_SINGLE"/>
            /// </summary>
            public static int SELECTION_MODE_SINGLE { get { if (!_SELECTION_MODE_SINGLEReady) { _SELECTION_MODE_SINGLEContent = SGetField<int>(LocalBridgeClazz, "SELECTION_MODE_SINGLE"); _SELECTION_MODE_SINGLEReady = true; } return _SELECTION_MODE_SINGLEContent; } }
            private static int _SELECTION_MODE_SINGLEContent = default;
            private static bool _SELECTION_MODE_SINGLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#UNDEFINED"/>
            /// </summary>
            public static int UNDEFINED { get { if (!_UNDEFINEDReady) { _UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "UNDEFINED"); _UNDEFINEDReady = true; } return _UNDEFINEDContent; } }
            private static int _UNDEFINEDContent = default;
            private static bool _UNDEFINEDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#obtain(int,int,boolean,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="bool"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo"/></returns>
            [global::System.Obsolete()]
            public static Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo Obtain(int arg0, int arg1, bool arg2, int arg3)
            {
                return SExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo>(LocalBridgeClazz, "obtain", "(IIZI)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo;", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#obtain(int,int,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="bool"/></param>
            /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo"/></returns>
            [global::System.Obsolete()]
            public static Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo Obtain(int arg0, int arg1, bool arg2)
            {
                return SExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo>(LocalBridgeClazz, "obtain", "(IIZ)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo;", arg0, arg1, arg2);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#isHierarchical()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsHierarchical()
            {
                return IExecuteWithSignature<bool>("isHierarchical", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#getColumnCount()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetColumnCount()
            {
                return IExecuteWithSignature<int>("getColumnCount", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#getImportantForAccessibilityItemCount()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetImportantForAccessibilityItemCount()
            {
                return IExecuteWithSignature<int>("getImportantForAccessibilityItemCount", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#getItemCount()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetItemCount()
            {
                return IExecuteWithSignature<int>("getItemCount", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#getRowCount()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetRowCount()
            {
                return IExecuteWithSignature<int>("getRowCount", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#getSelectionMode()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetSelectionMode()
            {
                return IExecuteWithSignature<int>("getSelectionMode", "()I");
            }

            #endregion

            #region Nested classes
            #region Builder implementation
            public partial class Builder
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo"/></returns>
                public Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo Build()
                {
                    return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo>("build", "()Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.Builder.html#setColumnCount(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder"/></returns>
                public Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder SetColumnCount(int arg0)
                {
                    return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder>("setColumnCount", "(I)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.Builder.html#setHierarchical(boolean)"/>
                /// </summary>
                /// <param name="arg0"><see cref="bool"/></param>
                /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder"/></returns>
                public Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder SetHierarchical(bool arg0)
                {
                    return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder>("setHierarchical", "(Z)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.Builder.html#setImportantForAccessibilityItemCount(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder"/></returns>
                public Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder SetImportantForAccessibilityItemCount(int arg0)
                {
                    return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder>("setImportantForAccessibilityItemCount", "(I)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.Builder.html#setItemCount(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder"/></returns>
                public Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder SetItemCount(int arg0)
                {
                    return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder>("setItemCount", "(I)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.Builder.html#setRowCount(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder"/></returns>
                public Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder SetRowCount(int arg0)
                {
                    return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder>("setRowCount", "(I)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.Builder.html#setSelectionMode(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder"/></returns>
                public Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder SetSelectionMode(int arg0)
                {
                    return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionInfo.Builder>("setSelectionMode", "(I)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo$Builder;", arg0);
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region CollectionItemInfo implementation
        public partial class CollectionItemInfo
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#%3Cinit%3E(int,int,int,int,boolean,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="bool"/></param>
            /// <param name="arg5"><see cref="bool"/></param>
            public CollectionItemInfo(int arg0, int arg1, int arg2, int arg3, bool arg4, bool arg5)
                : base(arg0, arg1, arg2, arg3, arg4, arg5)
            {
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#%3Cinit%3E(int,int,int,int,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="bool"/></param>
            public CollectionItemInfo(int arg0, int arg1, int arg2, int arg3, bool arg4)
                : base(arg0, arg1, arg2, arg3, arg4)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#obtain(int,int,int,int,boolean,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="bool"/></param>
            /// <param name="arg5"><see cref="bool"/></param>
            /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo"/></returns>
            [global::System.Obsolete()]
            public static Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo Obtain(int arg0, int arg1, int arg2, int arg3, bool arg4, bool arg5)
            {
                return SExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo>(LocalBridgeClazz, "obtain", "(IIIIZZ)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo;", arg0, arg1, arg2, arg3, arg4, arg5);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#obtain(int,int,int,int,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="bool"/></param>
            /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo"/></returns>
            [global::System.Obsolete()]
            public static Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo Obtain(int arg0, int arg1, int arg2, int arg3, bool arg4)
            {
                return SExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo>(LocalBridgeClazz, "obtain", "(IIIIZ)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo;", arg0, arg1, arg2, arg3, arg4);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#isHeading()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            [global::System.Obsolete()]
            public bool IsHeading()
            {
                return IExecuteWithSignature<bool>("isHeading", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#isSelected()"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsSelected()
            {
                return IExecuteWithSignature<bool>("isSelected", "()Z");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#getColumnIndex()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetColumnIndex()
            {
                return IExecuteWithSignature<int>("getColumnIndex", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#getColumnSpan()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetColumnSpan()
            {
                return IExecuteWithSignature<int>("getColumnSpan", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#getRowIndex()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetRowIndex()
            {
                return IExecuteWithSignature<int>("getRowIndex", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#getRowSpan()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetRowSpan()
            {
                return IExecuteWithSignature<int>("getRowSpan", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#getColumnTitle()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetColumnTitle()
            {
                return IExecuteWithSignature<Java.Lang.String>("getColumnTitle", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#getRowTitle()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetRowTitle()
            {
                return IExecuteWithSignature<Java.Lang.String>("getRowTitle", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes
            #region Builder implementation
            public partial class Builder
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo"/></returns>
                public Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo Build()
                {
                    return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo>("build", "()Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo;");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.Builder.html#setColumnIndex(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder"/></returns>
                public Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder SetColumnIndex(int arg0)
                {
                    return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder>("setColumnIndex", "(I)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.Builder.html#setColumnSpan(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder"/></returns>
                public Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder SetColumnSpan(int arg0)
                {
                    return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder>("setColumnSpan", "(I)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.Builder.html#setColumnTitle(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder"/></returns>
                public Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder SetColumnTitle(Java.Lang.String arg0)
                {
                    return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder>("setColumnTitle", "(Ljava/lang/String;)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.Builder.html#setHeading(boolean)"/>
                /// </summary>
                /// <param name="arg0"><see cref="bool"/></param>
                /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder"/></returns>
                public Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder SetHeading(bool arg0)
                {
                    return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder>("setHeading", "(Z)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.Builder.html#setRowIndex(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder"/></returns>
                public Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder SetRowIndex(int arg0)
                {
                    return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder>("setRowIndex", "(I)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.Builder.html#setRowSpan(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder"/></returns>
                public Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder SetRowSpan(int arg0)
                {
                    return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder>("setRowSpan", "(I)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.Builder.html#setRowTitle(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder"/></returns>
                public Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder SetRowTitle(Java.Lang.String arg0)
                {
                    return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder>("setRowTitle", "(Ljava/lang/String;)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo$Builder;", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.Builder.html#setSelected(boolean)"/>
                /// </summary>
                /// <param name="arg0"><see cref="bool"/></param>
                /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder"/></returns>
                public Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder SetSelected(bool arg0)
                {
                    return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.CollectionItemInfo.Builder>("setSelected", "(Z)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo$Builder;", arg0);
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ExtraRenderingInfo implementation
        public partial class ExtraRenderingInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.ExtraRenderingInfo.html#getLayoutSize()"/>
            /// </summary>
            /// <returns><see cref="Android.Util.Size"/></returns>
            public Android.Util.Size GetLayoutSize()
            {
                return IExecuteWithSignature<Android.Util.Size>("getLayoutSize", "()Landroid/util/Size;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.ExtraRenderingInfo.html#getTextSizeInPx()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetTextSizeInPx()
            {
                return IExecuteWithSignature<float>("getTextSizeInPx", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.ExtraRenderingInfo.html#getTextSizeUnit()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetTextSizeUnit()
            {
                return IExecuteWithSignature<int>("getTextSizeUnit", "()I");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RangeInfo implementation
        public partial class RangeInfo
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.RangeInfo.html#%3Cinit%3E(int,float,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            public RangeInfo(int arg0, float arg1, float arg2, float arg3)
                : base(arg0, arg1, arg2, arg3)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.RangeInfo.html#RANGE_TYPE_FLOAT"/>
            /// </summary>
            public static int RANGE_TYPE_FLOAT { get { if (!_RANGE_TYPE_FLOATReady) { _RANGE_TYPE_FLOATContent = SGetField<int>(LocalBridgeClazz, "RANGE_TYPE_FLOAT"); _RANGE_TYPE_FLOATReady = true; } return _RANGE_TYPE_FLOATContent; } }
            private static int _RANGE_TYPE_FLOATContent = default;
            private static bool _RANGE_TYPE_FLOATReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.RangeInfo.html#RANGE_TYPE_INT"/>
            /// </summary>
            public static int RANGE_TYPE_INT { get { if (!_RANGE_TYPE_INTReady) { _RANGE_TYPE_INTContent = SGetField<int>(LocalBridgeClazz, "RANGE_TYPE_INT"); _RANGE_TYPE_INTReady = true; } return _RANGE_TYPE_INTContent; } }
            private static int _RANGE_TYPE_INTContent = default;
            private static bool _RANGE_TYPE_INTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.RangeInfo.html#RANGE_TYPE_PERCENT"/>
            /// </summary>
            public static int RANGE_TYPE_PERCENT { get { if (!_RANGE_TYPE_PERCENTReady) { _RANGE_TYPE_PERCENTContent = SGetField<int>(LocalBridgeClazz, "RANGE_TYPE_PERCENT"); _RANGE_TYPE_PERCENTReady = true; } return _RANGE_TYPE_PERCENTContent; } }
            private static int _RANGE_TYPE_PERCENTContent = default;
            private static bool _RANGE_TYPE_PERCENTReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.RangeInfo.html#obtain(int,float,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo.RangeInfo"/></returns>
            [global::System.Obsolete()]
            public static Android.View.Accessibility.AccessibilityNodeInfo.RangeInfo Obtain(int arg0, float arg1, float arg2, float arg3)
            {
                return SExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo.RangeInfo>(LocalBridgeClazz, "obtain", "(IFFF)Landroid/view/accessibility/AccessibilityNodeInfo$RangeInfo;", arg0, arg1, arg2, arg3);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.RangeInfo.html#getCurrent()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetCurrent()
            {
                return IExecuteWithSignature<float>("getCurrent", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.RangeInfo.html#getMax()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetMax()
            {
                return IExecuteWithSignature<float>("getMax", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.RangeInfo.html#getMin()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetMin()
            {
                return IExecuteWithSignature<float>("getMin", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.RangeInfo.html#getType()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetType()
            {
                return IExecuteWithSignature<int>("getType", "()I");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TouchDelegateInfo implementation
        public partial class TouchDelegateInfo
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.TouchDelegateInfo.html#%3Cinit%3E(java.util.Map)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Map"/></param>
            public TouchDelegateInfo(Java.Util.Map<Android.Graphics.Region, Android.View.View> arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.TouchDelegateInfo.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.TouchDelegateInfo.html#getRegionAt(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.Graphics.Region"/></returns>
            public Android.Graphics.Region GetRegionAt(int arg0)
            {
                return IExecuteWithSignature<Android.Graphics.Region>("getRegionAt", "(I)Landroid/graphics/Region;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.TouchDelegateInfo.html#getTargetForRegion(android.graphics.Region)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Graphics.Region"/></param>
            /// <returns><see cref="Android.View.Accessibility.AccessibilityNodeInfo"/></returns>
            public Android.View.Accessibility.AccessibilityNodeInfo GetTargetForRegion(Android.Graphics.Region arg0)
            {
                return IExecuteWithSignature<Android.View.Accessibility.AccessibilityNodeInfo>("getTargetForRegion", "(Landroid/graphics/Region;)Landroid/view/accessibility/AccessibilityNodeInfo;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.TouchDelegateInfo.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.TouchDelegateInfo.html#getRegionCount()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetRegionCount()
            {
                return IExecuteWithSignature<int>("getRegionCount", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.TouchDelegateInfo.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View.Accessibility
{
    #region AccessibilityRequestPreparer declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityRequestPreparer.html"/>
    /// </summary>
    public partial class AccessibilityRequestPreparer : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AccessibilityRequestPreparer>
    {
        const string _bridgeClassName = "android.view.accessibility.AccessibilityRequestPreparer";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("AccessibilityRequestPreparer class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public AccessibilityRequestPreparer() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("AccessibilityRequestPreparer class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public AccessibilityRequestPreparer(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region AccessibilityRequestPreparer implementation
    public partial class AccessibilityRequestPreparer
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityRequestPreparer.html#%3Cinit%3E(android.view.View,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.View"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public AccessibilityRequestPreparer(Android.View.View arg0, int arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityRequestPreparer.html#REQUEST_TYPE_EXTRA_DATA"/>
        /// </summary>
        public static int REQUEST_TYPE_EXTRA_DATA { get { if (!_REQUEST_TYPE_EXTRA_DATAReady) { _REQUEST_TYPE_EXTRA_DATAContent = SGetField<int>(LocalBridgeClazz, "REQUEST_TYPE_EXTRA_DATA"); _REQUEST_TYPE_EXTRA_DATAReady = true; } return _REQUEST_TYPE_EXTRA_DATAContent; } }
        private static int _REQUEST_TYPE_EXTRA_DATAContent = default;
        private static bool _REQUEST_TYPE_EXTRA_DATAReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityRequestPreparer.html#onPrepareExtraData(int,java.lang.String,android.os.Bundle,android.os.Message)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Android.Os.Bundle"/></param>
        /// <param name="arg3"><see cref="Android.Os.Message"/></param>
        public void OnPrepareExtraData(int arg0, Java.Lang.String arg1, Android.Os.Bundle arg2, Android.Os.Message arg3)
        {
            IExecuteWithSignature("onPrepareExtraData", "(ILjava/lang/String;Landroid/os/Bundle;Landroid/os/Message;)V", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/accessibility/AccessibilityRequestPreparer.html#getView()"/>
        /// </summary>
        /// <returns><see cref="Android.View.View"/></returns>
        public Android.View.View GetView()
        {
            return IExecuteWithSignature<Android.View.View>("getView", "()Landroid/view/View;");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
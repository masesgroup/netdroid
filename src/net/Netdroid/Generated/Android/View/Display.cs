/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region Display declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/Display.html"/>
    /// </summary>
    public partial class Display : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Display>
    {
        const string _bridgeClassName = "android.view.Display";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Display() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Display(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region HdrCapabilities declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.HdrCapabilities.html"/>
        /// </summary>
        public partial class HdrCapabilities : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.view.Display$HdrCapabilities";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public HdrCapabilities() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public HdrCapabilities(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Mode declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.Mode.html"/>
        /// </summary>
        public partial class Mode : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.view.Display$Mode";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Mode() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Mode(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region Display implementation
    public partial class Display
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#DEFAULT_DISPLAY"/>
        /// </summary>
        public static int DEFAULT_DISPLAY { get { if (!_DEFAULT_DISPLAYReady) { _DEFAULT_DISPLAYContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_DISPLAY"); _DEFAULT_DISPLAYReady = true; } return _DEFAULT_DISPLAYContent; } }
        private static int _DEFAULT_DISPLAYContent = default;
        private static bool _DEFAULT_DISPLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#FLAG_PRESENTATION"/>
        /// </summary>
        public static int FLAG_PRESENTATION { get { if (!_FLAG_PRESENTATIONReady) { _FLAG_PRESENTATIONContent = SGetField<int>(LocalBridgeClazz, "FLAG_PRESENTATION"); _FLAG_PRESENTATIONReady = true; } return _FLAG_PRESENTATIONContent; } }
        private static int _FLAG_PRESENTATIONContent = default;
        private static bool _FLAG_PRESENTATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#FLAG_PRIVATE"/>
        /// </summary>
        public static int FLAG_PRIVATE { get { if (!_FLAG_PRIVATEReady) { _FLAG_PRIVATEContent = SGetField<int>(LocalBridgeClazz, "FLAG_PRIVATE"); _FLAG_PRIVATEReady = true; } return _FLAG_PRIVATEContent; } }
        private static int _FLAG_PRIVATEContent = default;
        private static bool _FLAG_PRIVATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#FLAG_ROUND"/>
        /// </summary>
        public static int FLAG_ROUND { get { if (!_FLAG_ROUNDReady) { _FLAG_ROUNDContent = SGetField<int>(LocalBridgeClazz, "FLAG_ROUND"); _FLAG_ROUNDReady = true; } return _FLAG_ROUNDContent; } }
        private static int _FLAG_ROUNDContent = default;
        private static bool _FLAG_ROUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#FLAG_SECURE"/>
        /// </summary>
        public static int FLAG_SECURE { get { if (!_FLAG_SECUREReady) { _FLAG_SECUREContent = SGetField<int>(LocalBridgeClazz, "FLAG_SECURE"); _FLAG_SECUREReady = true; } return _FLAG_SECUREContent; } }
        private static int _FLAG_SECUREContent = default;
        private static bool _FLAG_SECUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#FLAG_SUPPORTS_PROTECTED_BUFFERS"/>
        /// </summary>
        public static int FLAG_SUPPORTS_PROTECTED_BUFFERS { get { if (!_FLAG_SUPPORTS_PROTECTED_BUFFERSReady) { _FLAG_SUPPORTS_PROTECTED_BUFFERSContent = SGetField<int>(LocalBridgeClazz, "FLAG_SUPPORTS_PROTECTED_BUFFERS"); _FLAG_SUPPORTS_PROTECTED_BUFFERSReady = true; } return _FLAG_SUPPORTS_PROTECTED_BUFFERSContent; } }
        private static int _FLAG_SUPPORTS_PROTECTED_BUFFERSContent = default;
        private static bool _FLAG_SUPPORTS_PROTECTED_BUFFERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#INVALID_DISPLAY"/>
        /// </summary>
        public static int INVALID_DISPLAY { get { if (!_INVALID_DISPLAYReady) { _INVALID_DISPLAYContent = SGetField<int>(LocalBridgeClazz, "INVALID_DISPLAY"); _INVALID_DISPLAYReady = true; } return _INVALID_DISPLAYContent; } }
        private static int _INVALID_DISPLAYContent = default;
        private static bool _INVALID_DISPLAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#STATE_DOZE"/>
        /// </summary>
        public static int STATE_DOZE { get { if (!_STATE_DOZEReady) { _STATE_DOZEContent = SGetField<int>(LocalBridgeClazz, "STATE_DOZE"); _STATE_DOZEReady = true; } return _STATE_DOZEContent; } }
        private static int _STATE_DOZEContent = default;
        private static bool _STATE_DOZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#STATE_DOZE_SUSPEND"/>
        /// </summary>
        public static int STATE_DOZE_SUSPEND { get { if (!_STATE_DOZE_SUSPENDReady) { _STATE_DOZE_SUSPENDContent = SGetField<int>(LocalBridgeClazz, "STATE_DOZE_SUSPEND"); _STATE_DOZE_SUSPENDReady = true; } return _STATE_DOZE_SUSPENDContent; } }
        private static int _STATE_DOZE_SUSPENDContent = default;
        private static bool _STATE_DOZE_SUSPENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#STATE_OFF"/>
        /// </summary>
        public static int STATE_OFF { get { if (!_STATE_OFFReady) { _STATE_OFFContent = SGetField<int>(LocalBridgeClazz, "STATE_OFF"); _STATE_OFFReady = true; } return _STATE_OFFContent; } }
        private static int _STATE_OFFContent = default;
        private static bool _STATE_OFFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#STATE_ON"/>
        /// </summary>
        public static int STATE_ON { get { if (!_STATE_ONReady) { _STATE_ONContent = SGetField<int>(LocalBridgeClazz, "STATE_ON"); _STATE_ONReady = true; } return _STATE_ONContent; } }
        private static int _STATE_ONContent = default;
        private static bool _STATE_ONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#STATE_ON_SUSPEND"/>
        /// </summary>
        public static int STATE_ON_SUSPEND { get { if (!_STATE_ON_SUSPENDReady) { _STATE_ON_SUSPENDContent = SGetField<int>(LocalBridgeClazz, "STATE_ON_SUSPEND"); _STATE_ON_SUSPENDReady = true; } return _STATE_ON_SUSPENDContent; } }
        private static int _STATE_ON_SUSPENDContent = default;
        private static bool _STATE_ON_SUSPENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#STATE_UNKNOWN"/>
        /// </summary>
        public static int STATE_UNKNOWN { get { if (!_STATE_UNKNOWNReady) { _STATE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "STATE_UNKNOWN"); _STATE_UNKNOWNReady = true; } return _STATE_UNKNOWNContent; } }
        private static int _STATE_UNKNOWNContent = default;
        private static bool _STATE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#STATE_VR"/>
        /// </summary>
        public static int STATE_VR { get { if (!_STATE_VRReady) { _STATE_VRContent = SGetField<int>(LocalBridgeClazz, "STATE_VR"); _STATE_VRReady = true; } return _STATE_VRContent; } }
        private static int _STATE_VRContent = default;
        private static bool _STATE_VRReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getPreferredWideGamutColorSpace()"/>
        /// </summary>
        /// <returns><see cref="Android.Graphics.ColorSpace"/></returns>
        public Android.Graphics.ColorSpace GetPreferredWideGamutColorSpace()
        {
            return IExecuteWithSignature<Android.Graphics.ColorSpace>("getPreferredWideGamutColorSpace", "()Landroid/graphics/ColorSpace;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getDeviceProductInfo()"/>
        /// </summary>
        /// <returns><see cref="Android.Hardware.Display.DeviceProductInfo"/></returns>
        public Android.Hardware.Display.DeviceProductInfo GetDeviceProductInfo()
        {
            return IExecuteWithSignature<Android.Hardware.Display.DeviceProductInfo>("getDeviceProductInfo", "()Landroid/hardware/display/DeviceProductInfo;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getOverlaySupport()"/>
        /// </summary>
        /// <returns><see cref="Android.Hardware.OverlayProperties"/></returns>
        public Android.Hardware.OverlayProperties GetOverlaySupport()
        {
            return IExecuteWithSignature<Android.Hardware.OverlayProperties>("getOverlaySupport", "()Landroid/hardware/OverlayProperties;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getHdrCapabilities()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Display.HdrCapabilities"/></returns>
        public Android.View.Display.HdrCapabilities GetHdrCapabilities()
        {
            return IExecuteWithSignature<Android.View.Display.HdrCapabilities>("getHdrCapabilities", "()Landroid/view/Display$HdrCapabilities;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getMode()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Display.Mode"/></returns>
        public Android.View.Display.Mode GetMode()
        {
            return IExecuteWithSignature<Android.View.Display.Mode>("getMode", "()Landroid/view/Display$Mode;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getSupportedModes()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Display.Mode"/></returns>
        public Android.View.Display.Mode[] GetSupportedModes()
        {
            return IExecuteWithSignatureArray<Android.View.Display.Mode>("getSupportedModes", "()[Landroid/view/Display$Mode;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getCutout()"/>
        /// </summary>
        /// <returns><see cref="Android.View.DisplayCutout"/></returns>
        public Android.View.DisplayCutout GetCutout()
        {
            return IExecuteWithSignature<Android.View.DisplayCutout>("getCutout", "()Landroid/view/DisplayCutout;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getShape()"/>
        /// </summary>
        /// <returns><see cref="Android.View.DisplayShape"/></returns>
        public Android.View.DisplayShape GetShape()
        {
            return IExecuteWithSignature<Android.View.DisplayShape>("getShape", "()Landroid/view/DisplayShape;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getRoundedCorner(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.View.RoundedCorner"/></returns>
        public Android.View.RoundedCorner GetRoundedCorner(int arg0)
        {
            return IExecuteWithSignature<Android.View.RoundedCorner>("getRoundedCorner", "(I)Landroid/view/RoundedCorner;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#isHdr()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHdr()
        {
            return IExecuteWithSignature<bool>("isHdr", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#isHdrSdrRatioAvailable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsHdrSdrRatioAvailable()
        {
            return IExecuteWithSignature<bool>("isHdrSdrRatioAvailable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#isMinimalPostProcessingSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMinimalPostProcessingSupported()
        {
            return IExecuteWithSignature<bool>("isMinimalPostProcessingSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#isValid()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsValid()
        {
            return IExecuteWithSignature<bool>("isValid", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#isWideColorGamut()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsWideColorGamut()
        {
            return IExecuteWithSignature<bool>("isWideColorGamut", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getHdrSdrRatio()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetHdrSdrRatio()
        {
            return IExecuteWithSignature<float>("getHdrSdrRatio", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getRefreshRate()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float GetRefreshRate()
        {
            return IExecuteWithSignature<float>("getRefreshRate", "()F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getSupportedRefreshRates()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        [global::System.Obsolete()]
        public float[] GetSupportedRefreshRates()
        {
            return IExecuteWithSignatureArray<float>("getSupportedRefreshRates", "()[F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getDisplayId()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetDisplayId()
        {
            return IExecuteWithSignature<int>("getDisplayId", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getFlags()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetFlags()
        {
            return IExecuteWithSignature<int>("getFlags", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getHeight()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetHeight()
        {
            return IExecuteWithSignature<int>("getHeight", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getOrientation()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetOrientation()
        {
            return IExecuteWithSignature<int>("getOrientation", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getPixelFormat()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetPixelFormat()
        {
            return IExecuteWithSignature<int>("getPixelFormat", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getRotation()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetRotation()
        {
            return IExecuteWithSignature<int>("getRotation", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetState()
        {
            return IExecuteWithSignature<int>("getState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getWidth()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetWidth()
        {
            return IExecuteWithSignature<int>("getWidth", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getAppVsyncOffsetNanos()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetAppVsyncOffsetNanos()
        {
            return IExecuteWithSignature<long>("getAppVsyncOffsetNanos", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getPresentationDeadlineNanos()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetPresentationDeadlineNanos()
        {
            return IExecuteWithSignature<long>("getPresentationDeadlineNanos", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getCurrentSizeRange(android.graphics.Point,android.graphics.Point)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Point"/></param>
        /// <param name="arg1"><see cref="Android.Graphics.Point"/></param>
        public void GetCurrentSizeRange(Android.Graphics.Point arg0, Android.Graphics.Point arg1)
        {
            IExecuteWithSignature("getCurrentSizeRange", "(Landroid/graphics/Point;Landroid/graphics/Point;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getMetrics(android.util.DisplayMetrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.DisplayMetrics"/></param>
        [global::System.Obsolete()]
        public void GetMetrics(Android.Util.DisplayMetrics arg0)
        {
            IExecuteWithSignature("getMetrics", "(Landroid/util/DisplayMetrics;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getRealMetrics(android.util.DisplayMetrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Util.DisplayMetrics"/></param>
        [global::System.Obsolete()]
        public void GetRealMetrics(Android.Util.DisplayMetrics arg0)
        {
            IExecuteWithSignature("getRealMetrics", "(Landroid/util/DisplayMetrics;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getRealSize(android.graphics.Point)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Point"/></param>
        [global::System.Obsolete()]
        public void GetRealSize(Android.Graphics.Point arg0)
        {
            IExecuteWithSignature("getRealSize", "(Landroid/graphics/Point;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getRectSize(android.graphics.Rect)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Rect"/></param>
        [global::System.Obsolete()]
        public void GetRectSize(Android.Graphics.Rect arg0)
        {
            IExecuteWithSignature("getRectSize", "(Landroid/graphics/Rect;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#getSize(android.graphics.Point)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Graphics.Point"/></param>
        [global::System.Obsolete()]
        public void GetSize(Android.Graphics.Point arg0)
        {
            IExecuteWithSignature("getSize", "(Landroid/graphics/Point;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#registerHdrSdrRatioChangedListener(java.util.concurrent.Executor,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void RegisterHdrSdrRatioChangedListener(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Android.View.Display> arg1)
        {
            IExecuteWithSignature("registerHdrSdrRatioChangedListener", "(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/Display.html#unregisterHdrSdrRatioChangedListener(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        public void UnregisterHdrSdrRatioChangedListener(Java.Util.Function.Consumer<Android.View.Display> arg0)
        {
            IExecuteWithSignature("unregisterHdrSdrRatioChangedListener", "(Ljava/util/function/Consumer;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region HdrCapabilities implementation
        public partial class HdrCapabilities
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.HdrCapabilities.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.HdrCapabilities.html#INVALID_LUMINANCE"/>
            /// </summary>
            public static float INVALID_LUMINANCE { get { if (!_INVALID_LUMINANCEReady) { _INVALID_LUMINANCEContent = SGetField<float>(LocalBridgeClazz, "INVALID_LUMINANCE"); _INVALID_LUMINANCEReady = true; } return _INVALID_LUMINANCEContent; } }
            private static float _INVALID_LUMINANCEContent = default;
            private static bool _INVALID_LUMINANCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.HdrCapabilities.html#HDR_TYPE_DOLBY_VISION"/>
            /// </summary>
            public static int HDR_TYPE_DOLBY_VISION { get { if (!_HDR_TYPE_DOLBY_VISIONReady) { _HDR_TYPE_DOLBY_VISIONContent = SGetField<int>(LocalBridgeClazz, "HDR_TYPE_DOLBY_VISION"); _HDR_TYPE_DOLBY_VISIONReady = true; } return _HDR_TYPE_DOLBY_VISIONContent; } }
            private static int _HDR_TYPE_DOLBY_VISIONContent = default;
            private static bool _HDR_TYPE_DOLBY_VISIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.HdrCapabilities.html#HDR_TYPE_HDR10"/>
            /// </summary>
            public static int HDR_TYPE_HDR10 { get { if (!_HDR_TYPE_HDR10Ready) { _HDR_TYPE_HDR10Content = SGetField<int>(LocalBridgeClazz, "HDR_TYPE_HDR10"); _HDR_TYPE_HDR10Ready = true; } return _HDR_TYPE_HDR10Content; } }
            private static int _HDR_TYPE_HDR10Content = default;
            private static bool _HDR_TYPE_HDR10Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.HdrCapabilities.html#HDR_TYPE_HDR10_PLUS"/>
            /// </summary>
            public static int HDR_TYPE_HDR10_PLUS { get { if (!_HDR_TYPE_HDR10_PLUSReady) { _HDR_TYPE_HDR10_PLUSContent = SGetField<int>(LocalBridgeClazz, "HDR_TYPE_HDR10_PLUS"); _HDR_TYPE_HDR10_PLUSReady = true; } return _HDR_TYPE_HDR10_PLUSContent; } }
            private static int _HDR_TYPE_HDR10_PLUSContent = default;
            private static bool _HDR_TYPE_HDR10_PLUSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.HdrCapabilities.html#HDR_TYPE_HLG"/>
            /// </summary>
            public static int HDR_TYPE_HLG { get { if (!_HDR_TYPE_HLGReady) { _HDR_TYPE_HLGContent = SGetField<int>(LocalBridgeClazz, "HDR_TYPE_HLG"); _HDR_TYPE_HLGReady = true; } return _HDR_TYPE_HLGContent; } }
            private static int _HDR_TYPE_HLGContent = default;
            private static bool _HDR_TYPE_HLGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.HdrCapabilities.html#HDR_TYPE_INVALID"/>
            /// </summary>
            public static int HDR_TYPE_INVALID { get { if (!_HDR_TYPE_INVALIDReady) { _HDR_TYPE_INVALIDContent = SGetField<int>(LocalBridgeClazz, "HDR_TYPE_INVALID"); _HDR_TYPE_INVALIDReady = true; } return _HDR_TYPE_INVALIDContent; } }
            private static int _HDR_TYPE_INVALIDContent = default;
            private static bool _HDR_TYPE_INVALIDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.HdrCapabilities.html#getDesiredMaxAverageLuminance()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetDesiredMaxAverageLuminance()
            {
                return IExecuteWithSignature<float>("getDesiredMaxAverageLuminance", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.HdrCapabilities.html#getDesiredMaxLuminance()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetDesiredMaxLuminance()
            {
                return IExecuteWithSignature<float>("getDesiredMaxLuminance", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.HdrCapabilities.html#getDesiredMinLuminance()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetDesiredMinLuminance()
            {
                return IExecuteWithSignature<float>("getDesiredMinLuminance", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.HdrCapabilities.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.HdrCapabilities.html#getSupportedHdrTypes()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            [global::System.Obsolete()]
            public int[] GetSupportedHdrTypes()
            {
                return IExecuteWithSignatureArray<int>("getSupportedHdrTypes", "()[I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.HdrCapabilities.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Mode implementation
        public partial class Mode
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.Mode.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.Mode.html#getRefreshRate()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float GetRefreshRate()
            {
                return IExecuteWithSignature<float>("getRefreshRate", "()F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.Mode.html#getAlternativeRefreshRates()"/>
            /// </summary>
            /// <returns><see cref="float"/></returns>
            public float[] GetAlternativeRefreshRates()
            {
                return IExecuteWithSignatureArray<float>("getAlternativeRefreshRates", "()[F");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.Mode.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.Mode.html#getModeId()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetModeId()
            {
                return IExecuteWithSignature<int>("getModeId", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.Mode.html#getPhysicalHeight()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetPhysicalHeight()
            {
                return IExecuteWithSignature<int>("getPhysicalHeight", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.Mode.html#getPhysicalWidth()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetPhysicalWidth()
            {
                return IExecuteWithSignature<int>("getPhysicalWidth", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.Mode.html#getSupportedHdrTypes()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int[] GetSupportedHdrTypes()
            {
                return IExecuteWithSignatureArray<int>("getSupportedHdrTypes", "()[I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/Display.Mode.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
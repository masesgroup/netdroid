/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.10.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region WindowInsetsAnimationControlListener declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimationControlListener.html"/>
    /// </summary>
    public partial class WindowInsetsAnimationControlListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
    {
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public WindowInsetsAnimationControlListener() { InitializeHandlers(); }
    
        const string _bridgeClassName = "org.mases.netdroid.generated.android.view.WindowInsetsAnimationControlListener";
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
        
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
    
    
        // TODO: complete the class
    
    }
    #endregion
    
    #region WindowInsetsAnimationControlListenerDirect declaration
    /// <summary>
    /// Direct override of <see cref="WindowInsetsAnimationControlListener"/> or its generic type if there is one
    /// </summary>
    public partial class WindowInsetsAnimationControlListenerDirect : WindowInsetsAnimationControlListener
    {
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
        /// </summary>
        public override bool AutoInit => false;
    
        /// <inheritdoc />
        protected override void InitializeHandlers() { }
    
        const string _bridgeClassName = "android.view.WindowInsetsAnimationControlListener";
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    }
    #endregion

    #region IWindowInsetsAnimationControlListener
    /// <summary>
    /// .NET interface for org.mases.netdroid.generated.android.view.WindowInsetsAnimationControlListener implementing <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimationControlListener.html"/>
    /// </summary>
    public partial interface IWindowInsetsAnimationControlListener
    {
        #region Instance methods
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion

    #region WindowInsetsAnimationControlListener implementation
    public partial class WindowInsetsAnimationControlListener : Android.View.IWindowInsetsAnimationControlListener
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// Handlers initializer for <see cref="WindowInsetsAnimationControlListener"/>
        /// </summary>
        protected virtual void InitializeHandlers()
        {
            AddEventHandler("onCancelled", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnCancelledEventHandler));
            AddEventHandler("onFinished", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnFinishedEventHandler));
            AddEventHandler("onReady", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnReadyEventHandler));

        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimationControlListener.html#onCancelled(android.view.WindowInsetsAnimationController)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnCancelled"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<Android.View.WindowInsetsAnimationController> OnOnCancelled { get; set; } = null;
        
        bool hasOverrideOnCancelled = true;
        void OnCancelledEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideOnCancelled = true;
            var methodToExecute = (OnOnCancelled != null) ? OnOnCancelled : OnCancelled;
            methodToExecute.Invoke(data.EventData.GetAt<Android.View.WindowInsetsAnimationController>(0));
            data.EventData.TypedEventData.HasOverride = hasOverrideOnCancelled;
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimationControlListener.html#onCancelled(android.view.WindowInsetsAnimationController)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsetsAnimationController"/></param>
        public virtual void OnCancelled(Android.View.WindowInsetsAnimationController arg0)
        {
            hasOverrideOnCancelled = false;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimationControlListener.html#onFinished(android.view.WindowInsetsAnimationController)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnFinished"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<Android.View.WindowInsetsAnimationController> OnOnFinished { get; set; } = null;
        
        bool hasOverrideOnFinished = true;
        void OnFinishedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideOnFinished = true;
            var methodToExecute = (OnOnFinished != null) ? OnOnFinished : OnFinished;
            methodToExecute.Invoke(data.EventData.GetAt<Android.View.WindowInsetsAnimationController>(0));
            data.EventData.TypedEventData.HasOverride = hasOverrideOnFinished;
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimationControlListener.html#onFinished(android.view.WindowInsetsAnimationController)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsetsAnimationController"/></param>
        public virtual void OnFinished(Android.View.WindowInsetsAnimationController arg0)
        {
            hasOverrideOnFinished = false;
        }
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimationControlListener.html#onReady(android.view.WindowInsetsAnimationController,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnOnReady"/> has a value it takes precedence over corresponding class method</remarks>
        public global::System.Action<Android.View.WindowInsetsAnimationController, int> OnOnReady { get; set; } = null;
        
        bool hasOverrideOnReady = true;
        void OnReadyEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
        {
            hasOverrideOnReady = true;
            var methodToExecute = (OnOnReady != null) ? OnOnReady : OnReady;
            methodToExecute.Invoke(data.EventData.GetAt<Android.View.WindowInsetsAnimationController>(0), data.EventData.GetAt<int>(1));
            data.EventData.TypedEventData.HasOverride = hasOverrideOnReady;
        }
        
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimationControlListener.html#onReady(android.view.WindowInsetsAnimationController,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsetsAnimationController"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public virtual void OnReady(Android.View.WindowInsetsAnimationController arg0, int arg1)
        {
            hasOverrideOnReady = false;
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion

    #region WindowInsetsAnimationControlListenerDirect implementation
    public partial class WindowInsetsAnimationControlListenerDirect : Android.View.IWindowInsetsAnimationControlListener
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimationControlListener.html#onCancelled(android.view.WindowInsetsAnimationController)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsetsAnimationController"/></param>
        public override void OnCancelled(Android.View.WindowInsetsAnimationController arg0)
        {
            IExecuteWithSignature("onCancelled", "(Landroid/view/WindowInsetsAnimationController;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimationControlListener.html#onFinished(android.view.WindowInsetsAnimationController)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsetsAnimationController"/></param>
        public override void OnFinished(Android.View.WindowInsetsAnimationController arg0)
        {
            IExecuteWithSignature("onFinished", "(Landroid/view/WindowInsetsAnimationController;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/WindowInsetsAnimationControlListener.html#onReady(android.view.WindowInsetsAnimationController,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.WindowInsetsAnimationController"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public override void OnReady(Android.View.WindowInsetsAnimationController arg0, int arg1)
        {
            IExecuteWithSignature("onReady", "(Landroid/view/WindowInsetsAnimationController;I)V", arg0, arg1);
        }
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region SurfaceControl declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.html"/>
    /// </summary>
    public partial class SurfaceControl : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.view.SurfaceControl";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public SurfaceControl() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public SurfaceControl(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.view.SurfaceControl$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Transaction declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html"/>
        /// </summary>
        public partial class Transaction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Transaction>
        {
            const string _bridgeClassName = "android.view.SurfaceControl$Transaction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Transaction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Transaction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region TransactionCommittedListener declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.TransactionCommittedListener.html"/>
        /// </summary>
        public partial class TransactionCommittedListener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TransactionCommittedListener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.netdroid.generated.android.view.SurfaceControl_TransactionCommittedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region TransactionCommittedListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="TransactionCommittedListener"/> or its generic type if there is one
        /// </summary>
        public partial class TransactionCommittedListenerDirect : TransactionCommittedListener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "android.view.SurfaceControl$TransactionCommittedListener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region TransactionStats declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.TransactionStats.html"/>
        /// </summary>
        public partial class TransactionStats : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TransactionStats>
        {
            const string _bridgeClassName = "android.view.SurfaceControl$TransactionStats";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TransactionStats() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TransactionStats(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region TrustedPresentationThresholds declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.TrustedPresentationThresholds.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class TrustedPresentationThresholds : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TrustedPresentationThresholds>
        {
            const string _bridgeClassName = "android.view.SurfaceControl$TrustedPresentationThresholds";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TrustedPresentationThresholds() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TrustedPresentationThresholds(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region SurfaceControl implementation
    public partial class SurfaceControl
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.html#BUFFER_TRANSFORM_IDENTITY"/>
        /// </summary>
        public static int BUFFER_TRANSFORM_IDENTITY { get { if (!_BUFFER_TRANSFORM_IDENTITYReady) { _BUFFER_TRANSFORM_IDENTITYContent = SGetField<int>(LocalBridgeClazz, "BUFFER_TRANSFORM_IDENTITY"); _BUFFER_TRANSFORM_IDENTITYReady = true; } return _BUFFER_TRANSFORM_IDENTITYContent; } }
        private static int _BUFFER_TRANSFORM_IDENTITYContent = default;
        private static bool _BUFFER_TRANSFORM_IDENTITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.html#BUFFER_TRANSFORM_MIRROR_HORIZONTAL"/>
        /// </summary>
        public static int BUFFER_TRANSFORM_MIRROR_HORIZONTAL { get { if (!_BUFFER_TRANSFORM_MIRROR_HORIZONTALReady) { _BUFFER_TRANSFORM_MIRROR_HORIZONTALContent = SGetField<int>(LocalBridgeClazz, "BUFFER_TRANSFORM_MIRROR_HORIZONTAL"); _BUFFER_TRANSFORM_MIRROR_HORIZONTALReady = true; } return _BUFFER_TRANSFORM_MIRROR_HORIZONTALContent; } }
        private static int _BUFFER_TRANSFORM_MIRROR_HORIZONTALContent = default;
        private static bool _BUFFER_TRANSFORM_MIRROR_HORIZONTALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.html#BUFFER_TRANSFORM_MIRROR_VERTICAL"/>
        /// </summary>
        public static int BUFFER_TRANSFORM_MIRROR_VERTICAL { get { if (!_BUFFER_TRANSFORM_MIRROR_VERTICALReady) { _BUFFER_TRANSFORM_MIRROR_VERTICALContent = SGetField<int>(LocalBridgeClazz, "BUFFER_TRANSFORM_MIRROR_VERTICAL"); _BUFFER_TRANSFORM_MIRROR_VERTICALReady = true; } return _BUFFER_TRANSFORM_MIRROR_VERTICALContent; } }
        private static int _BUFFER_TRANSFORM_MIRROR_VERTICALContent = default;
        private static bool _BUFFER_TRANSFORM_MIRROR_VERTICALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.html#BUFFER_TRANSFORM_ROTATE_180"/>
        /// </summary>
        public static int BUFFER_TRANSFORM_ROTATE_180 { get { if (!_BUFFER_TRANSFORM_ROTATE_180Ready) { _BUFFER_TRANSFORM_ROTATE_180Content = SGetField<int>(LocalBridgeClazz, "BUFFER_TRANSFORM_ROTATE_180"); _BUFFER_TRANSFORM_ROTATE_180Ready = true; } return _BUFFER_TRANSFORM_ROTATE_180Content; } }
        private static int _BUFFER_TRANSFORM_ROTATE_180Content = default;
        private static bool _BUFFER_TRANSFORM_ROTATE_180Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.html#BUFFER_TRANSFORM_ROTATE_270"/>
        /// </summary>
        public static int BUFFER_TRANSFORM_ROTATE_270 { get { if (!_BUFFER_TRANSFORM_ROTATE_270Ready) { _BUFFER_TRANSFORM_ROTATE_270Content = SGetField<int>(LocalBridgeClazz, "BUFFER_TRANSFORM_ROTATE_270"); _BUFFER_TRANSFORM_ROTATE_270Ready = true; } return _BUFFER_TRANSFORM_ROTATE_270Content; } }
        private static int _BUFFER_TRANSFORM_ROTATE_270Content = default;
        private static bool _BUFFER_TRANSFORM_ROTATE_270Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.html#BUFFER_TRANSFORM_ROTATE_90"/>
        /// </summary>
        public static int BUFFER_TRANSFORM_ROTATE_90 { get { if (!_BUFFER_TRANSFORM_ROTATE_90Ready) { _BUFFER_TRANSFORM_ROTATE_90Content = SGetField<int>(LocalBridgeClazz, "BUFFER_TRANSFORM_ROTATE_90"); _BUFFER_TRANSFORM_ROTATE_90Ready = true; } return _BUFFER_TRANSFORM_ROTATE_90Content; } }
        private static int _BUFFER_TRANSFORM_ROTATE_90Content = default;
        private static bool _BUFFER_TRANSFORM_ROTATE_90Ready = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.html#isValid()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsValid()
        {
            return IExecuteWithSignature<bool>("isValid", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.html#readFromParcel(android.os.Parcel)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        public void ReadFromParcel(Android.Os.Parcel arg0)
        {
            IExecuteWithSignature("readFromParcel", "(Landroid/os/Parcel;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.html#release()"/>
        /// </summary>
        public void Release()
        {
            IExecuteWithSignature("release", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Builder.html#build()"/>
            /// </summary>
            /// <returns><see cref="Android.View.SurfaceControl"/></returns>
            public Android.View.SurfaceControl Build()
            {
                return IExecuteWithSignature<Android.View.SurfaceControl>("build", "()Landroid/view/SurfaceControl;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Builder.html#setBufferSize(int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Builder"/></returns>
            public Android.View.SurfaceControl.Builder SetBufferSize(int arg0, int arg1)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Builder>("setBufferSize", "(II)Landroid/view/SurfaceControl$Builder;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Builder.html#setFormat(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Builder"/></returns>
            public Android.View.SurfaceControl.Builder SetFormat(int arg0)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Builder>("setFormat", "(I)Landroid/view/SurfaceControl$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Builder.html#setHidden(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Builder"/></returns>
            public Android.View.SurfaceControl.Builder SetHidden(bool arg0)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Builder>("setHidden", "(Z)Landroid/view/SurfaceControl$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Builder.html#setName(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Builder"/></returns>
            public Android.View.SurfaceControl.Builder SetName(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Builder>("setName", "(Ljava/lang/String;)Landroid/view/SurfaceControl$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Builder.html#setOpaque(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Builder"/></returns>
            public Android.View.SurfaceControl.Builder SetOpaque(bool arg0)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Builder>("setOpaque", "(Z)Landroid/view/SurfaceControl$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Builder.html#setParent(android.view.SurfaceControl)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Builder"/></returns>
            public Android.View.SurfaceControl.Builder SetParent(Android.View.SurfaceControl arg0)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Builder>("setParent", "(Landroid/view/SurfaceControl;)Landroid/view/SurfaceControl$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Transaction implementation
        public partial class Transaction : Java.Io.ICloseable, Android.Os.IParcelable
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.View.SurfaceControl.Transaction"/> to <see cref="Java.Io.Closeable"/>
            /// </summary>
            public static implicit operator Java.Io.Closeable(Android.View.SurfaceControl.Transaction t) => t.Cast<Java.Io.Closeable>();
            /// <summary>
            /// Converter from <see cref="Android.View.SurfaceControl.Transaction"/> to <see cref="Android.Os.Parcelable"/>
            /// </summary>
            public static implicit operator Android.Os.Parcelable(Android.View.SurfaceControl.Transaction t) => t.Cast<Android.Os.Parcelable>();

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#addTransactionCommittedListener(java.util.concurrent.Executor,android.view.SurfaceControl.TransactionCommittedListener)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
            /// <param name="arg1"><see cref="Android.View.SurfaceControl.TransactionCommittedListener"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction AddTransactionCommittedListener(Java.Util.Concurrent.Executor arg0, Android.View.SurfaceControl.TransactionCommittedListener arg1)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("addTransactionCommittedListener", "(Ljava/util/concurrent/Executor;Landroid/view/SurfaceControl$TransactionCommittedListener;)Landroid/view/SurfaceControl$Transaction;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#addTransactionCompletedListener(java.util.concurrent.Executor,java.util.function.Consumer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Concurrent.Executor"/></param>
            /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction AddTransactionCompletedListener(Java.Util.Concurrent.Executor arg0, Java.Util.Function.Consumer<Android.View.SurfaceControl.TransactionStats> arg1)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("addTransactionCompletedListener", "(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)Landroid/view/SurfaceControl$Transaction;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#clearFrameRate(android.view.SurfaceControl)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction ClearFrameRate(Android.View.SurfaceControl arg0)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("clearFrameRate", "(Landroid/view/SurfaceControl;)Landroid/view/SurfaceControl$Transaction;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#clearTrustedPresentationCallback(android.view.SurfaceControl)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            [global::System.Obsolete()]
            public Android.View.SurfaceControl.Transaction ClearTrustedPresentationCallback(Android.View.SurfaceControl arg0)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("clearTrustedPresentationCallback", "(Landroid/view/SurfaceControl;)Landroid/view/SurfaceControl$Transaction;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#merge(android.view.SurfaceControl.Transaction)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl.Transaction"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction Merge(Android.View.SurfaceControl.Transaction arg0)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("merge", "(Landroid/view/SurfaceControl$Transaction;)Landroid/view/SurfaceControl$Transaction;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#reparent(android.view.SurfaceControl,android.view.SurfaceControl)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="Android.View.SurfaceControl"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction Reparent(Android.View.SurfaceControl arg0, Android.View.SurfaceControl arg1)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("reparent", "(Landroid/view/SurfaceControl;Landroid/view/SurfaceControl;)Landroid/view/SurfaceControl$Transaction;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setAlpha(android.view.SurfaceControl,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetAlpha(Android.View.SurfaceControl arg0, float arg1)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setAlpha", "(Landroid/view/SurfaceControl;F)Landroid/view/SurfaceControl$Transaction;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer,android.hardware.SyncFence,java.util.function.Consumer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="Android.Hardware.HardwareBuffer"/></param>
            /// <param name="arg2"><see cref="Android.Hardware.SyncFence"/></param>
            /// <param name="arg3"><see cref="Java.Util.Function.Consumer"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetBuffer(Android.View.SurfaceControl arg0, Android.Hardware.HardwareBuffer arg1, Android.Hardware.SyncFence arg2, Java.Util.Function.Consumer<Android.Hardware.SyncFence> arg3)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setBuffer", "(Landroid/view/SurfaceControl;Landroid/hardware/HardwareBuffer;Landroid/hardware/SyncFence;Ljava/util/function/Consumer;)Landroid/view/SurfaceControl$Transaction;", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer,android.hardware.SyncFence)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="Android.Hardware.HardwareBuffer"/></param>
            /// <param name="arg2"><see cref="Android.Hardware.SyncFence"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetBuffer(Android.View.SurfaceControl arg0, Android.Hardware.HardwareBuffer arg1, Android.Hardware.SyncFence arg2)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setBuffer", "(Landroid/view/SurfaceControl;Landroid/hardware/HardwareBuffer;Landroid/hardware/SyncFence;)Landroid/view/SurfaceControl$Transaction;", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="Android.Hardware.HardwareBuffer"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetBuffer(Android.View.SurfaceControl arg0, Android.Hardware.HardwareBuffer arg1)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setBuffer", "(Landroid/view/SurfaceControl;Landroid/hardware/HardwareBuffer;)Landroid/view/SurfaceControl$Transaction;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setBufferSize(android.view.SurfaceControl,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetBufferSize(Android.View.SurfaceControl arg0, int arg1, int arg2)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setBufferSize", "(Landroid/view/SurfaceControl;II)Landroid/view/SurfaceControl$Transaction;", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setBufferTransform(android.view.SurfaceControl,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetBufferTransform(Android.View.SurfaceControl arg0, int arg1)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setBufferTransform", "(Landroid/view/SurfaceControl;I)Landroid/view/SurfaceControl$Transaction;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setCrop(android.view.SurfaceControl,android.graphics.Rect)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetCrop(Android.View.SurfaceControl arg0, Android.Graphics.Rect arg1)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setCrop", "(Landroid/view/SurfaceControl;Landroid/graphics/Rect;)Landroid/view/SurfaceControl$Transaction;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setDamageRegion(android.view.SurfaceControl,android.graphics.Region)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="Android.Graphics.Region"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetDamageRegion(Android.View.SurfaceControl arg0, Android.Graphics.Region arg1)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setDamageRegion", "(Landroid/view/SurfaceControl;Landroid/graphics/Region;)Landroid/view/SurfaceControl$Transaction;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setDataSpace(android.view.SurfaceControl,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetDataSpace(Android.View.SurfaceControl arg0, int arg1)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setDataSpace", "(Landroid/view/SurfaceControl;I)Landroid/view/SurfaceControl$Transaction;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setDesiredHdrHeadroom(android.view.SurfaceControl,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetDesiredHdrHeadroom(Android.View.SurfaceControl arg0, float arg1)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setDesiredHdrHeadroom", "(Landroid/view/SurfaceControl;F)Landroid/view/SurfaceControl$Transaction;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setDesiredPresentTimeNanos(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetDesiredPresentTimeNanos(long arg0)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setDesiredPresentTimeNanos", "(J)Landroid/view/SurfaceControl$Transaction;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setExtendedRangeBrightness(android.view.SurfaceControl,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetExtendedRangeBrightness(Android.View.SurfaceControl arg0, float arg1, float arg2)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setExtendedRangeBrightness", "(Landroid/view/SurfaceControl;FF)Landroid/view/SurfaceControl$Transaction;", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setFrameRate(android.view.SurfaceControl,float,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetFrameRate(Android.View.SurfaceControl arg0, float arg1, int arg2, int arg3)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setFrameRate", "(Landroid/view/SurfaceControl;FII)Landroid/view/SurfaceControl$Transaction;", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setFrameRate(android.view.SurfaceControl,float,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetFrameRate(Android.View.SurfaceControl arg0, float arg1, int arg2)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setFrameRate", "(Landroid/view/SurfaceControl;FI)Landroid/view/SurfaceControl$Transaction;", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setFrameTimeline(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetFrameTimeline(long arg0)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setFrameTimeline", "(J)Landroid/view/SurfaceControl$Transaction;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setGeometry(android.view.SurfaceControl,android.graphics.Rect,android.graphics.Rect,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
            /// <param name="arg2"><see cref="Android.Graphics.Rect"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            [global::System.Obsolete()]
            public Android.View.SurfaceControl.Transaction SetGeometry(Android.View.SurfaceControl arg0, Android.Graphics.Rect arg1, Android.Graphics.Rect arg2, int arg3)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setGeometry", "(Landroid/view/SurfaceControl;Landroid/graphics/Rect;Landroid/graphics/Rect;I)Landroid/view/SurfaceControl$Transaction;", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setLayer(android.view.SurfaceControl,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetLayer(Android.View.SurfaceControl arg0, int arg1)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setLayer", "(Landroid/view/SurfaceControl;I)Landroid/view/SurfaceControl$Transaction;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setOpaque(android.view.SurfaceControl,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetOpaque(Android.View.SurfaceControl arg0, bool arg1)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setOpaque", "(Landroid/view/SurfaceControl;Z)Landroid/view/SurfaceControl$Transaction;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setPosition(android.view.SurfaceControl,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetPosition(Android.View.SurfaceControl arg0, float arg1, float arg2)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setPosition", "(Landroid/view/SurfaceControl;FF)Landroid/view/SurfaceControl$Transaction;", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setScale(android.view.SurfaceControl,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetScale(Android.View.SurfaceControl arg0, float arg1, float arg2)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setScale", "(Landroid/view/SurfaceControl;FF)Landroid/view/SurfaceControl$Transaction;", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setTrustedPresentationCallback(android.view.SurfaceControl,android.view.SurfaceControl.TrustedPresentationThresholds,java.util.concurrent.Executor,java.util.function.Consumer)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="Android.View.SurfaceControl.TrustedPresentationThresholds"/></param>
            /// <param name="arg2"><see cref="Java.Util.Concurrent.Executor"/></param>
            /// <param name="arg3"><see cref="Java.Util.Function.Consumer"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            [global::System.Obsolete()]
            public Android.View.SurfaceControl.Transaction SetTrustedPresentationCallback(Android.View.SurfaceControl arg0, Android.View.SurfaceControl.TrustedPresentationThresholds arg1, Java.Util.Concurrent.Executor arg2, Java.Util.Function.Consumer<Java.Lang.Boolean> arg3)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setTrustedPresentationCallback", "(Landroid/view/SurfaceControl;Landroid/view/SurfaceControl$TrustedPresentationThresholds;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)Landroid/view/SurfaceControl$Transaction;", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#setVisibility(android.view.SurfaceControl,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.SurfaceControl"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            /// <returns><see cref="Android.View.SurfaceControl.Transaction"/></returns>
            public Android.View.SurfaceControl.Transaction SetVisibility(Android.View.SurfaceControl arg0, bool arg1)
            {
                return IExecuteWithSignature<Android.View.SurfaceControl.Transaction>("setVisibility", "(Landroid/view/SurfaceControl;Z)Landroid/view/SurfaceControl$Transaction;", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#apply()"/>
            /// </summary>
            public void Apply()
            {
                IExecuteWithSignature("apply", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#close()"/>
            /// </summary>
            public void Close()
            {
                IExecuteWithSignature("close", "()V");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.Transaction.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TransactionCommittedListener implementation
        public partial class TransactionCommittedListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="TransactionCommittedListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onTransactionCommitted", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(OnTransactionCommittedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/SurfaceControl.TransactionCommittedListener.html#onTransactionCommitted()"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnTransactionCommitted"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnOnTransactionCommitted { get; set; } = null;

            bool hasOverrideOnTransactionCommitted = true;
            void OnTransactionCommittedEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideOnTransactionCommitted = true;
                var methodToExecute = (OnOnTransactionCommitted != null) ? OnOnTransactionCommitted : OnTransactionCommitted;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideOnTransactionCommitted;
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.TransactionCommittedListener.html#onTransactionCommitted()"/>
            /// </summary>
            public virtual void OnTransactionCommitted()
            {
                hasOverrideOnTransactionCommitted = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TransactionCommittedListenerDirect implementation
        public partial class TransactionCommittedListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.TransactionCommittedListener.html#onTransactionCommitted()"/>
            /// </summary>
            public override void OnTransactionCommitted()
            {
                IExecuteWithSignature("onTransactionCommitted", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TransactionStats implementation
        public partial class TransactionStats
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.TransactionStats.html#getPresentFence()"/>
            /// </summary>
            /// <returns><see cref="Android.Hardware.SyncFence"/></returns>
            public Android.Hardware.SyncFence GetPresentFence()
            {
                return IExecuteWithSignature<Android.Hardware.SyncFence>("getPresentFence", "()Landroid/hardware/SyncFence;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.TransactionStats.html#getLatchTimeNanos()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long GetLatchTimeNanos()
            {
                return IExecuteWithSignature<long>("getLatchTimeNanos", "()J");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TrustedPresentationThresholds implementation
        public partial class TrustedPresentationThresholds
        {
            #region Constructors
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/SurfaceControl.TrustedPresentationThresholds.html#%3Cinit%3E(float,float,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <param name="arg1"><see cref="float"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            [global::System.Obsolete()]
            public TrustedPresentationThresholds(float arg0, float arg1, int arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
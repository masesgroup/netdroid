/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View.Textclassifier
{
    #region TextClassifierEvent declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html"/>
    /// </summary>
    public partial class TextClassifierEvent : Android.Os.Parcelable
    {
        const string _bridgeClassName = "android.view.textclassifier.TextClassifierEvent";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("TextClassifierEvent class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public TextClassifierEvent() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("TextClassifierEvent class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public TextClassifierEvent(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "android.view.textclassifier.TextClassifierEvent$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("Builder class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("Builder class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Builder(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Builder<T> declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html"/>
        /// </summary>
        /// <typeparam name="T"><see cref="Android.View.Textclassifier.TextClassifierEvent.Builder{T}"/></typeparam>
        public partial class Builder<T> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder<T>> where T : Android.View.Textclassifier.TextClassifierEvent.Builder<T>
        {
            const string _bridgeClassName = "android.view.textclassifier.TextClassifierEvent$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("Builder class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("Builder class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Builder(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ConversationActionsEvent declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.ConversationActionsEvent.html"/>
        /// </summary>
        public partial class ConversationActionsEvent : Android.View.Textclassifier.TextClassifierEvent
        {
            const string _bridgeClassName = "android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ConversationActionsEvent() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ConversationActionsEvent(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class
            #region Builder declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.ConversationActionsEvent.Builder.html"/>
            /// </summary>
            public partial class Builder : Android.View.Textclassifier.TextClassifierEvent.Builder<Android.View.Textclassifier.TextClassifierEvent.ConversationActionsEvent.Builder>
            {
                const string _bridgeClassName = "android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent$Builder";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Builder() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Builder(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

        
        }
        #endregion

        #region LanguageDetectionEvent declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.LanguageDetectionEvent.html"/>
        /// </summary>
        public partial class LanguageDetectionEvent : Android.View.Textclassifier.TextClassifierEvent
        {
            const string _bridgeClassName = "android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public LanguageDetectionEvent() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public LanguageDetectionEvent(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class
            #region Builder declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.LanguageDetectionEvent.Builder.html"/>
            /// </summary>
            public partial class Builder : Android.View.Textclassifier.TextClassifierEvent.Builder<Android.View.Textclassifier.TextClassifierEvent.LanguageDetectionEvent.Builder>
            {
                const string _bridgeClassName = "android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent$Builder";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Builder() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Builder(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

        
        }
        #endregion

        #region TextLinkifyEvent declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextLinkifyEvent.html"/>
        /// </summary>
        public partial class TextLinkifyEvent : Android.View.Textclassifier.TextClassifierEvent
        {
            const string _bridgeClassName = "android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TextLinkifyEvent() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TextLinkifyEvent(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class
            #region Builder declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextLinkifyEvent.Builder.html"/>
            /// </summary>
            public partial class Builder : Android.View.Textclassifier.TextClassifierEvent.Builder<Android.View.Textclassifier.TextClassifierEvent.TextLinkifyEvent.Builder>
            {
                const string _bridgeClassName = "android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent$Builder";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Builder() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Builder(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

        
        }
        #endregion

        #region TextSelectionEvent declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextSelectionEvent.html"/>
        /// </summary>
        public partial class TextSelectionEvent : Android.View.Textclassifier.TextClassifierEvent
        {
            const string _bridgeClassName = "android.view.textclassifier.TextClassifierEvent$TextSelectionEvent";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TextSelectionEvent() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TextSelectionEvent(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class
            #region Builder declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextSelectionEvent.Builder.html"/>
            /// </summary>
            public partial class Builder : Android.View.Textclassifier.TextClassifierEvent.Builder<Android.View.Textclassifier.TextClassifierEvent.TextSelectionEvent.Builder>
            {
                const string _bridgeClassName = "android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Builder() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Builder(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

        
        }
        #endregion

    
    }
    #endregion

    #region TextClassifierEvent implementation
    public partial class TextClassifierEvent
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#CATEGORY_CONVERSATION_ACTIONS"/>
        /// </summary>
        public static int CATEGORY_CONVERSATION_ACTIONS { get { if (!_CATEGORY_CONVERSATION_ACTIONSReady) { _CATEGORY_CONVERSATION_ACTIONSContent = SGetField<int>(LocalBridgeClazz, "CATEGORY_CONVERSATION_ACTIONS"); _CATEGORY_CONVERSATION_ACTIONSReady = true; } return _CATEGORY_CONVERSATION_ACTIONSContent; } }
        private static int _CATEGORY_CONVERSATION_ACTIONSContent = default;
        private static bool _CATEGORY_CONVERSATION_ACTIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#CATEGORY_LANGUAGE_DETECTION"/>
        /// </summary>
        public static int CATEGORY_LANGUAGE_DETECTION { get { if (!_CATEGORY_LANGUAGE_DETECTIONReady) { _CATEGORY_LANGUAGE_DETECTIONContent = SGetField<int>(LocalBridgeClazz, "CATEGORY_LANGUAGE_DETECTION"); _CATEGORY_LANGUAGE_DETECTIONReady = true; } return _CATEGORY_LANGUAGE_DETECTIONContent; } }
        private static int _CATEGORY_LANGUAGE_DETECTIONContent = default;
        private static bool _CATEGORY_LANGUAGE_DETECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#CATEGORY_LINKIFY"/>
        /// </summary>
        public static int CATEGORY_LINKIFY { get { if (!_CATEGORY_LINKIFYReady) { _CATEGORY_LINKIFYContent = SGetField<int>(LocalBridgeClazz, "CATEGORY_LINKIFY"); _CATEGORY_LINKIFYReady = true; } return _CATEGORY_LINKIFYContent; } }
        private static int _CATEGORY_LINKIFYContent = default;
        private static bool _CATEGORY_LINKIFYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#CATEGORY_SELECTION"/>
        /// </summary>
        public static int CATEGORY_SELECTION { get { if (!_CATEGORY_SELECTIONReady) { _CATEGORY_SELECTIONContent = SGetField<int>(LocalBridgeClazz, "CATEGORY_SELECTION"); _CATEGORY_SELECTIONReady = true; } return _CATEGORY_SELECTIONContent; } }
        private static int _CATEGORY_SELECTIONContent = default;
        private static bool _CATEGORY_SELECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_ACTIONS_GENERATED"/>
        /// </summary>
        public static int TYPE_ACTIONS_GENERATED { get { if (!_TYPE_ACTIONS_GENERATEDReady) { _TYPE_ACTIONS_GENERATEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_ACTIONS_GENERATED"); _TYPE_ACTIONS_GENERATEDReady = true; } return _TYPE_ACTIONS_GENERATEDContent; } }
        private static int _TYPE_ACTIONS_GENERATEDContent = default;
        private static bool _TYPE_ACTIONS_GENERATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_ACTIONS_SHOWN"/>
        /// </summary>
        public static int TYPE_ACTIONS_SHOWN { get { if (!_TYPE_ACTIONS_SHOWNReady) { _TYPE_ACTIONS_SHOWNContent = SGetField<int>(LocalBridgeClazz, "TYPE_ACTIONS_SHOWN"); _TYPE_ACTIONS_SHOWNReady = true; } return _TYPE_ACTIONS_SHOWNContent; } }
        private static int _TYPE_ACTIONS_SHOWNContent = default;
        private static bool _TYPE_ACTIONS_SHOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_AUTO_SELECTION"/>
        /// </summary>
        public static int TYPE_AUTO_SELECTION { get { if (!_TYPE_AUTO_SELECTIONReady) { _TYPE_AUTO_SELECTIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_AUTO_SELECTION"); _TYPE_AUTO_SELECTIONReady = true; } return _TYPE_AUTO_SELECTIONContent; } }
        private static int _TYPE_AUTO_SELECTIONContent = default;
        private static bool _TYPE_AUTO_SELECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_COPY_ACTION"/>
        /// </summary>
        public static int TYPE_COPY_ACTION { get { if (!_TYPE_COPY_ACTIONReady) { _TYPE_COPY_ACTIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_COPY_ACTION"); _TYPE_COPY_ACTIONReady = true; } return _TYPE_COPY_ACTIONContent; } }
        private static int _TYPE_COPY_ACTIONContent = default;
        private static bool _TYPE_COPY_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_CUT_ACTION"/>
        /// </summary>
        public static int TYPE_CUT_ACTION { get { if (!_TYPE_CUT_ACTIONReady) { _TYPE_CUT_ACTIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_CUT_ACTION"); _TYPE_CUT_ACTIONReady = true; } return _TYPE_CUT_ACTIONContent; } }
        private static int _TYPE_CUT_ACTIONContent = default;
        private static bool _TYPE_CUT_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_LINK_CLICKED"/>
        /// </summary>
        public static int TYPE_LINK_CLICKED { get { if (!_TYPE_LINK_CLICKEDReady) { _TYPE_LINK_CLICKEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_LINK_CLICKED"); _TYPE_LINK_CLICKEDReady = true; } return _TYPE_LINK_CLICKEDContent; } }
        private static int _TYPE_LINK_CLICKEDContent = default;
        private static bool _TYPE_LINK_CLICKEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_LINKS_GENERATED"/>
        /// </summary>
        public static int TYPE_LINKS_GENERATED { get { if (!_TYPE_LINKS_GENERATEDReady) { _TYPE_LINKS_GENERATEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_LINKS_GENERATED"); _TYPE_LINKS_GENERATEDReady = true; } return _TYPE_LINKS_GENERATEDContent; } }
        private static int _TYPE_LINKS_GENERATEDContent = default;
        private static bool _TYPE_LINKS_GENERATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_MANUAL_REPLY"/>
        /// </summary>
        public static int TYPE_MANUAL_REPLY { get { if (!_TYPE_MANUAL_REPLYReady) { _TYPE_MANUAL_REPLYContent = SGetField<int>(LocalBridgeClazz, "TYPE_MANUAL_REPLY"); _TYPE_MANUAL_REPLYReady = true; } return _TYPE_MANUAL_REPLYContent; } }
        private static int _TYPE_MANUAL_REPLYContent = default;
        private static bool _TYPE_MANUAL_REPLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_OTHER_ACTION"/>
        /// </summary>
        public static int TYPE_OTHER_ACTION { get { if (!_TYPE_OTHER_ACTIONReady) { _TYPE_OTHER_ACTIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_OTHER_ACTION"); _TYPE_OTHER_ACTIONReady = true; } return _TYPE_OTHER_ACTIONContent; } }
        private static int _TYPE_OTHER_ACTIONContent = default;
        private static bool _TYPE_OTHER_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_OVERTYPE"/>
        /// </summary>
        public static int TYPE_OVERTYPE { get { if (!_TYPE_OVERTYPEReady) { _TYPE_OVERTYPEContent = SGetField<int>(LocalBridgeClazz, "TYPE_OVERTYPE"); _TYPE_OVERTYPEReady = true; } return _TYPE_OVERTYPEContent; } }
        private static int _TYPE_OVERTYPEContent = default;
        private static bool _TYPE_OVERTYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_PASTE_ACTION"/>
        /// </summary>
        public static int TYPE_PASTE_ACTION { get { if (!_TYPE_PASTE_ACTIONReady) { _TYPE_PASTE_ACTIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_PASTE_ACTION"); _TYPE_PASTE_ACTIONReady = true; } return _TYPE_PASTE_ACTIONContent; } }
        private static int _TYPE_PASTE_ACTIONContent = default;
        private static bool _TYPE_PASTE_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_SELECT_ALL"/>
        /// </summary>
        public static int TYPE_SELECT_ALL { get { if (!_TYPE_SELECT_ALLReady) { _TYPE_SELECT_ALLContent = SGetField<int>(LocalBridgeClazz, "TYPE_SELECT_ALL"); _TYPE_SELECT_ALLReady = true; } return _TYPE_SELECT_ALLContent; } }
        private static int _TYPE_SELECT_ALLContent = default;
        private static bool _TYPE_SELECT_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_SELECTION_DESTROYED"/>
        /// </summary>
        public static int TYPE_SELECTION_DESTROYED { get { if (!_TYPE_SELECTION_DESTROYEDReady) { _TYPE_SELECTION_DESTROYEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_SELECTION_DESTROYED"); _TYPE_SELECTION_DESTROYEDReady = true; } return _TYPE_SELECTION_DESTROYEDContent; } }
        private static int _TYPE_SELECTION_DESTROYEDContent = default;
        private static bool _TYPE_SELECTION_DESTROYEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_SELECTION_DRAG"/>
        /// </summary>
        public static int TYPE_SELECTION_DRAG { get { if (!_TYPE_SELECTION_DRAGReady) { _TYPE_SELECTION_DRAGContent = SGetField<int>(LocalBridgeClazz, "TYPE_SELECTION_DRAG"); _TYPE_SELECTION_DRAGReady = true; } return _TYPE_SELECTION_DRAGContent; } }
        private static int _TYPE_SELECTION_DRAGContent = default;
        private static bool _TYPE_SELECTION_DRAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_SELECTION_MODIFIED"/>
        /// </summary>
        public static int TYPE_SELECTION_MODIFIED { get { if (!_TYPE_SELECTION_MODIFIEDReady) { _TYPE_SELECTION_MODIFIEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_SELECTION_MODIFIED"); _TYPE_SELECTION_MODIFIEDReady = true; } return _TYPE_SELECTION_MODIFIEDContent; } }
        private static int _TYPE_SELECTION_MODIFIEDContent = default;
        private static bool _TYPE_SELECTION_MODIFIEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_SELECTION_RESET"/>
        /// </summary>
        public static int TYPE_SELECTION_RESET { get { if (!_TYPE_SELECTION_RESETReady) { _TYPE_SELECTION_RESETContent = SGetField<int>(LocalBridgeClazz, "TYPE_SELECTION_RESET"); _TYPE_SELECTION_RESETReady = true; } return _TYPE_SELECTION_RESETContent; } }
        private static int _TYPE_SELECTION_RESETContent = default;
        private static bool _TYPE_SELECTION_RESETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_SELECTION_STARTED"/>
        /// </summary>
        public static int TYPE_SELECTION_STARTED { get { if (!_TYPE_SELECTION_STARTEDReady) { _TYPE_SELECTION_STARTEDContent = SGetField<int>(LocalBridgeClazz, "TYPE_SELECTION_STARTED"); _TYPE_SELECTION_STARTEDReady = true; } return _TYPE_SELECTION_STARTEDContent; } }
        private static int _TYPE_SELECTION_STARTEDContent = default;
        private static bool _TYPE_SELECTION_STARTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_SHARE_ACTION"/>
        /// </summary>
        public static int TYPE_SHARE_ACTION { get { if (!_TYPE_SHARE_ACTIONReady) { _TYPE_SHARE_ACTIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_SHARE_ACTION"); _TYPE_SHARE_ACTIONReady = true; } return _TYPE_SHARE_ACTIONContent; } }
        private static int _TYPE_SHARE_ACTIONContent = default;
        private static bool _TYPE_SHARE_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_SMART_ACTION"/>
        /// </summary>
        public static int TYPE_SMART_ACTION { get { if (!_TYPE_SMART_ACTIONReady) { _TYPE_SMART_ACTIONContent = SGetField<int>(LocalBridgeClazz, "TYPE_SMART_ACTION"); _TYPE_SMART_ACTIONReady = true; } return _TYPE_SMART_ACTIONContent; } }
        private static int _TYPE_SMART_ACTIONContent = default;
        private static bool _TYPE_SMART_ACTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_SMART_SELECTION_MULTI"/>
        /// </summary>
        public static int TYPE_SMART_SELECTION_MULTI { get { if (!_TYPE_SMART_SELECTION_MULTIReady) { _TYPE_SMART_SELECTION_MULTIContent = SGetField<int>(LocalBridgeClazz, "TYPE_SMART_SELECTION_MULTI"); _TYPE_SMART_SELECTION_MULTIReady = true; } return _TYPE_SMART_SELECTION_MULTIContent; } }
        private static int _TYPE_SMART_SELECTION_MULTIContent = default;
        private static bool _TYPE_SMART_SELECTION_MULTIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#TYPE_SMART_SELECTION_SINGLE"/>
        /// </summary>
        public static int TYPE_SMART_SELECTION_SINGLE { get { if (!_TYPE_SMART_SELECTION_SINGLEReady) { _TYPE_SMART_SELECTION_SINGLEContent = SGetField<int>(LocalBridgeClazz, "TYPE_SMART_SELECTION_SINGLE"); _TYPE_SMART_SELECTION_SINGLEReady = true; } return _TYPE_SMART_SELECTION_SINGLEContent; } }
        private static int _TYPE_SMART_SELECTION_SINGLEContent = default;
        private static bool _TYPE_SMART_SELECTION_SINGLEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#getLocale()"/>
        /// </summary>
        /// <returns><see cref="Android.Icu.Util.ULocale"/></returns>
        public Android.Icu.Util.ULocale GetLocale()
        {
            return IExecuteWithSignature<Android.Icu.Util.ULocale>("getLocale", "()Landroid/icu/util/ULocale;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#getExtras()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.Bundle"/></returns>
        public Android.Os.Bundle GetExtras()
        {
            return IExecuteWithSignature<Android.Os.Bundle>("getExtras", "()Landroid/os/Bundle;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#getEventContext()"/>
        /// </summary>
        /// <returns><see cref="Android.View.Textclassifier.TextClassificationContext"/></returns>
        public Android.View.Textclassifier.TextClassificationContext GetEventContext()
        {
            return IExecute<Android.View.Textclassifier.TextClassificationContext>("getEventContext");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#getScores()"/>
        /// </summary>
        /// <returns><see cref="float"/></returns>
        public float[] GetScores()
        {
            return IExecuteWithSignatureArray<float>("getScores", "()[F");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#getEventCategory()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetEventCategory()
        {
            return IExecuteWithSignature<int>("getEventCategory", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#getEventIndex()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetEventIndex()
        {
            return IExecuteWithSignature<int>("getEventIndex", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#getEventType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetEventType()
        {
            return IExecuteWithSignature<int>("getEventType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#getActionIndices()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int[] GetActionIndices()
        {
            return IExecuteWithSignatureArray<int>("getActionIndices", "()[I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#getModelName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetModelName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getModelName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#getResultId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetResultId()
        {
            return IExecuteWithSignature<Java.Lang.String>("getResultId", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#getEntityTypes()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String[] GetEntityTypes()
        {
            return IExecuteWithSignatureArray<Java.Lang.String>("getEntityTypes", "()[Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecuteWithSignature("writeToParcel", "(Landroid/os/Parcel;I)V", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setActionIndices(int[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.Builder"/></returns>
            public Android.View.Textclassifier.TextClassifierEvent.Builder SetActionIndices(params int[] arg0)
            {
                if (arg0.Length == 0) return IExecuteWithSignature<Android.View.Textclassifier.TextClassifierEvent.Builder>("setActionIndices", "([I)Landroid/view/textclassifier/TextClassifierEvent$Builder;"); else return IExecuteWithSignature<Android.View.Textclassifier.TextClassifierEvent.Builder>("setActionIndices", "([I)Landroid/view/textclassifier/TextClassifierEvent$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setEntityTypes(java.lang.String[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.Builder"/></returns>
            public Android.View.Textclassifier.TextClassifierEvent.Builder SetEntityTypes(params Java.Lang.String[] arg0)
            {
                if (arg0.Length == 0) return IExecuteWithSignature<Android.View.Textclassifier.TextClassifierEvent.Builder>("setEntityTypes", "([Ljava/lang/String;)Landroid/view/textclassifier/TextClassifierEvent$Builder;"); else return IExecuteWithSignature<Android.View.Textclassifier.TextClassifierEvent.Builder>("setEntityTypes", "([Ljava/lang/String;)Landroid/view/textclassifier/TextClassifierEvent$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setEventContext(android.view.textclassifier.TextClassificationContext)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.Textclassifier.TextClassificationContext"/></param>
            /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.Builder"/></returns>
            public Android.View.Textclassifier.TextClassifierEvent.Builder SetEventContext(Android.View.Textclassifier.TextClassificationContext arg0)
            {
                return IExecute<Android.View.Textclassifier.TextClassifierEvent.Builder>("setEventContext", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setEventIndex(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.Builder"/></returns>
            public Android.View.Textclassifier.TextClassifierEvent.Builder SetEventIndex(int arg0)
            {
                return IExecuteWithSignature<Android.View.Textclassifier.TextClassifierEvent.Builder>("setEventIndex", "(I)Landroid/view/textclassifier/TextClassifierEvent$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setExtras(android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
            /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.Builder"/></returns>
            public Android.View.Textclassifier.TextClassifierEvent.Builder SetExtras(Android.Os.Bundle arg0)
            {
                return IExecuteWithSignature<Android.View.Textclassifier.TextClassifierEvent.Builder>("setExtras", "(Landroid/os/Bundle;)Landroid/view/textclassifier/TextClassifierEvent$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setLocale(android.icu.util.ULocale)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Icu.Util.ULocale"/></param>
            /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.Builder"/></returns>
            public Android.View.Textclassifier.TextClassifierEvent.Builder SetLocale(Android.Icu.Util.ULocale arg0)
            {
                return IExecuteWithSignature<Android.View.Textclassifier.TextClassifierEvent.Builder>("setLocale", "(Landroid/icu/util/ULocale;)Landroid/view/textclassifier/TextClassifierEvent$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setModelName(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.Builder"/></returns>
            public Android.View.Textclassifier.TextClassifierEvent.Builder SetModelName(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.View.Textclassifier.TextClassifierEvent.Builder>("setModelName", "(Ljava/lang/String;)Landroid/view/textclassifier/TextClassifierEvent$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setResultId(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.Builder"/></returns>
            public Android.View.Textclassifier.TextClassifierEvent.Builder SetResultId(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<Android.View.Textclassifier.TextClassifierEvent.Builder>("setResultId", "(Ljava/lang/String;)Landroid/view/textclassifier/TextClassifierEvent$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setScores(float[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.Builder"/></returns>
            public Android.View.Textclassifier.TextClassifierEvent.Builder SetScores(params float[] arg0)
            {
                if (arg0.Length == 0) return IExecuteWithSignature<Android.View.Textclassifier.TextClassifierEvent.Builder>("setScores", "([F)Landroid/view/textclassifier/TextClassifierEvent$Builder;"); else return IExecuteWithSignature<Android.View.Textclassifier.TextClassifierEvent.Builder>("setScores", "([F)Landroid/view/textclassifier/TextClassifierEvent$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Builder<T> implementation
        public partial class Builder<T>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.View.Textclassifier.TextClassifierEvent.Builder{T}"/> to <see cref="Android.View.Textclassifier.TextClassifierEvent.Builder"/>
            /// </summary>
            public static implicit operator Android.View.Textclassifier.TextClassifierEvent.Builder(Android.View.Textclassifier.TextClassifierEvent.Builder<T> t) => t.Cast<Android.View.Textclassifier.TextClassifierEvent.Builder>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setActionIndices(int[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><typeparamref name="T"/></returns>
            public T SetActionIndices(params int[] arg0)
            {
                if (arg0.Length == 0) return IExecuteWithSignature<T>("setActionIndices", "([I)Landroid/view/textclassifier/TextClassifierEvent$Builder;"); else return IExecuteWithSignature<T>("setActionIndices", "([I)Landroid/view/textclassifier/TextClassifierEvent$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setEntityTypes(java.lang.String[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><typeparamref name="T"/></returns>
            public T SetEntityTypes(params Java.Lang.String[] arg0)
            {
                if (arg0.Length == 0) return IExecuteWithSignature<T>("setEntityTypes", "([Ljava/lang/String;)Landroid/view/textclassifier/TextClassifierEvent$Builder;"); else return IExecuteWithSignature<T>("setEntityTypes", "([Ljava/lang/String;)Landroid/view/textclassifier/TextClassifierEvent$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setEventContext(android.view.textclassifier.TextClassificationContext)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.Textclassifier.TextClassificationContext"/></param>
            /// <returns><typeparamref name="T"/></returns>
            public T SetEventContext(Android.View.Textclassifier.TextClassificationContext arg0)
            {
                return IExecute<T>("setEventContext", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setEventIndex(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><typeparamref name="T"/></returns>
            public T SetEventIndex(int arg0)
            {
                return IExecuteWithSignature<T>("setEventIndex", "(I)Landroid/view/textclassifier/TextClassifierEvent$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setExtras(android.os.Bundle)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Bundle"/></param>
            /// <returns><typeparamref name="T"/></returns>
            public T SetExtras(Android.Os.Bundle arg0)
            {
                return IExecuteWithSignature<T>("setExtras", "(Landroid/os/Bundle;)Landroid/view/textclassifier/TextClassifierEvent$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setLocale(android.icu.util.ULocale)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Icu.Util.ULocale"/></param>
            /// <returns><typeparamref name="T"/></returns>
            public T SetLocale(Android.Icu.Util.ULocale arg0)
            {
                return IExecuteWithSignature<T>("setLocale", "(Landroid/icu/util/ULocale;)Landroid/view/textclassifier/TextClassifierEvent$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setModelName(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><typeparamref name="T"/></returns>
            public T SetModelName(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<T>("setModelName", "(Ljava/lang/String;)Landroid/view/textclassifier/TextClassifierEvent$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setResultId(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><typeparamref name="T"/></returns>
            public T SetResultId(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<T>("setResultId", "(Ljava/lang/String;)Landroid/view/textclassifier/TextClassifierEvent$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.Builder.html#setScores(float[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="float"/></param>
            /// <returns><typeparamref name="T"/></returns>
            public T SetScores(params float[] arg0)
            {
                if (arg0.Length == 0) return IExecuteWithSignature<T>("setScores", "([F)Landroid/view/textclassifier/TextClassifierEvent$Builder;"); else return IExecuteWithSignature<T>("setScores", "([F)Landroid/view/textclassifier/TextClassifierEvent$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ConversationActionsEvent implementation
        public partial class ConversationActionsEvent
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.ConversationActionsEvent.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes
            #region Builder implementation
            public partial class Builder
            {
                #region Constructors
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.ConversationActionsEvent.Builder.html#%3Cinit%3E(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                public Builder(int arg0)
                    : base(arg0)
                {
                }

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.ConversationActionsEvent.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.ConversationActionsEvent"/></returns>
                public Android.View.Textclassifier.TextClassifierEvent.ConversationActionsEvent Build()
                {
                    return IExecute<Android.View.Textclassifier.TextClassifierEvent.ConversationActionsEvent>("build");
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region LanguageDetectionEvent implementation
        public partial class LanguageDetectionEvent
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.LanguageDetectionEvent.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes
            #region Builder implementation
            public partial class Builder
            {
                #region Constructors
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.LanguageDetectionEvent.Builder.html#%3Cinit%3E(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                public Builder(int arg0)
                    : base(arg0)
                {
                }

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.LanguageDetectionEvent.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.LanguageDetectionEvent"/></returns>
                public Android.View.Textclassifier.TextClassifierEvent.LanguageDetectionEvent Build()
                {
                    return IExecute<Android.View.Textclassifier.TextClassifierEvent.LanguageDetectionEvent>("build");
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TextLinkifyEvent implementation
        public partial class TextLinkifyEvent
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextLinkifyEvent.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes
            #region Builder implementation
            public partial class Builder
            {
                #region Constructors
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextLinkifyEvent.Builder.html#%3Cinit%3E(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                public Builder(int arg0)
                    : base(arg0)
                {
                }

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextLinkifyEvent.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.TextLinkifyEvent"/></returns>
                public Android.View.Textclassifier.TextClassifierEvent.TextLinkifyEvent Build()
                {
                    return IExecute<Android.View.Textclassifier.TextClassifierEvent.TextLinkifyEvent>("build");
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TextSelectionEvent implementation
        public partial class TextSelectionEvent
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextSelectionEvent.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextSelectionEvent.html#getRelativeSuggestedWordEndIndex()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetRelativeSuggestedWordEndIndex()
            {
                return IExecuteWithSignature<int>("getRelativeSuggestedWordEndIndex", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextSelectionEvent.html#getRelativeSuggestedWordStartIndex()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetRelativeSuggestedWordStartIndex()
            {
                return IExecuteWithSignature<int>("getRelativeSuggestedWordStartIndex", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextSelectionEvent.html#getRelativeWordEndIndex()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetRelativeWordEndIndex()
            {
                return IExecuteWithSignature<int>("getRelativeWordEndIndex", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextSelectionEvent.html#getRelativeWordStartIndex()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetRelativeWordStartIndex()
            {
                return IExecuteWithSignature<int>("getRelativeWordStartIndex", "()I");
            }

            #endregion

            #region Nested classes
            #region Builder implementation
            public partial class Builder
            {
                #region Constructors
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextSelectionEvent.Builder.html#%3Cinit%3E(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                public Builder(int arg0)
                    : base(arg0)
                {
                }

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields

                #endregion

                #region Static methods

                #endregion

                #region Instance methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextSelectionEvent.Builder.html#build()"/>
                /// </summary>
                /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.TextSelectionEvent"/></returns>
                public Android.View.Textclassifier.TextClassifierEvent.TextSelectionEvent Build()
                {
                    return IExecute<Android.View.Textclassifier.TextClassifierEvent.TextSelectionEvent>("build");
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextSelectionEvent.Builder.html#setRelativeSuggestedWordEndIndex(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.TextSelectionEvent.Builder"/></returns>
                public Android.View.Textclassifier.TextClassifierEvent.TextSelectionEvent.Builder SetRelativeSuggestedWordEndIndex(int arg0)
                {
                    return IExecute<Android.View.Textclassifier.TextClassifierEvent.TextSelectionEvent.Builder>("setRelativeSuggestedWordEndIndex", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextSelectionEvent.Builder.html#setRelativeSuggestedWordStartIndex(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.TextSelectionEvent.Builder"/></returns>
                public Android.View.Textclassifier.TextClassifierEvent.TextSelectionEvent.Builder SetRelativeSuggestedWordStartIndex(int arg0)
                {
                    return IExecute<Android.View.Textclassifier.TextClassifierEvent.TextSelectionEvent.Builder>("setRelativeSuggestedWordStartIndex", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextSelectionEvent.Builder.html#setRelativeWordEndIndex(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.TextSelectionEvent.Builder"/></returns>
                public Android.View.Textclassifier.TextClassifierEvent.TextSelectionEvent.Builder SetRelativeWordEndIndex(int arg0)
                {
                    return IExecute<Android.View.Textclassifier.TextClassifierEvent.TextSelectionEvent.Builder>("setRelativeWordEndIndex", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/view/textclassifier/TextClassifierEvent.TextSelectionEvent.Builder.html#setRelativeWordStartIndex(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="Android.View.Textclassifier.TextClassifierEvent.TextSelectionEvent.Builder"/></returns>
                public Android.View.Textclassifier.TextClassifierEvent.TextSelectionEvent.Builder SetRelativeWordStartIndex(int arg0)
                {
                    return IExecute<Android.View.Textclassifier.TextClassifierEvent.TextSelectionEvent.Builder>("setRelativeWordStartIndex", arg0);
                }

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.View
{
    #region GestureDetector
    public partial class GestureDetector
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#%3Cinit%3E(android.content.Context,android.view.GestureDetector.OnGestureListener,android.os.Handler,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.View.GestureDetector.OnGestureListener"/></param>
        /// <param name="arg2"><see cref="Android.Os.Handler"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        public GestureDetector(Android.Content.Context arg0, Android.View.GestureDetector.OnGestureListener arg1, Android.Os.Handler arg2, bool arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#%3Cinit%3E(android.content.Context,android.view.GestureDetector.OnGestureListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.View.GestureDetector.OnGestureListener"/></param>
        /// <param name="arg2"><see cref="Android.Os.Handler"/></param>
        public GestureDetector(Android.Content.Context arg0, Android.View.GestureDetector.OnGestureListener arg1, Android.Os.Handler arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#%3Cinit%3E(android.content.Context,android.view.GestureDetector.OnGestureListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.View.GestureDetector.OnGestureListener"/></param>
        public GestureDetector(Android.Content.Context arg0, Android.View.GestureDetector.OnGestureListener arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#%3Cinit%3E(android.view.GestureDetector.OnGestureListener,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.GestureDetector.OnGestureListener"/></param>
        /// <param name="arg1"><see cref="Android.Os.Handler"/></param>
        [System.Obsolete()]
        public GestureDetector(Android.View.GestureDetector.OnGestureListener arg0, Android.Os.Handler arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#%3Cinit%3E(android.view.GestureDetector.OnGestureListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.GestureDetector.OnGestureListener"/></param>
        [System.Obsolete()]
        public GestureDetector(Android.View.GestureDetector.OnGestureListener arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#isLongpressEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLongpressEnabled()
        {
            return IExecuteWithSignature<bool>("isLongpressEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#onGenericMotionEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnGenericMotionEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("onGenericMotionEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#onTouchEvent(android.view.MotionEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnTouchEvent(Android.View.MotionEvent arg0)
        {
            return IExecuteWithSignature<bool>("onTouchEvent", "(Landroid/view/MotionEvent;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#setContextClickListener(android.view.GestureDetector.OnContextClickListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.GestureDetector.OnContextClickListener"/></param>
        public void SetContextClickListener(Android.View.GestureDetector.OnContextClickListener arg0)
        {
            IExecuteWithSignature("setContextClickListener", "(Landroid/view/GestureDetector$OnContextClickListener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#setIsLongpressEnabled(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetIsLongpressEnabled(bool arg0)
        {
            IExecuteWithSignature("setIsLongpressEnabled", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/view/GestureDetector.html#setOnDoubleTapListener(android.view.GestureDetector.OnDoubleTapListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.View.GestureDetector.OnDoubleTapListener"/></param>
        public void SetOnDoubleTapListener(Android.View.GestureDetector.OnDoubleTapListener arg0)
        {
            IExecuteWithSignature("setOnDoubleTapListener", "(Landroid/view/GestureDetector$OnDoubleTapListener;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region OnContextClickListener
        public partial class OnContextClickListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnContextClickListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onContextClick", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnContextClickEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnContextClickListener.html#onContextClick(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnContextClick"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.View.MotionEvent, bool> OnOnContextClick { get; set; } = null;

            void OnContextClickEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnContextClick != null) ? OnOnContextClick : OnContextClick;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnContextClickListener.html#onContextClick(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnContextClick(Android.View.MotionEvent arg0)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnContextClickListenerDirect
        public partial class OnContextClickListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnContextClickListener.html#onContextClick(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnContextClick(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onContextClick", "(Landroid/view/MotionEvent;)Z", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnDoubleTapListener
        public partial class OnDoubleTapListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnDoubleTapListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDoubleTap", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnDoubleTapEventHandler));
                AddEventHandler("onDoubleTapEvent", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnDoubleTapEventEventHandler));
                AddEventHandler("onSingleTapConfirmed", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnSingleTapConfirmedEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onDoubleTap(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDoubleTap"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.View.MotionEvent, bool> OnOnDoubleTap { get; set; } = null;

            void OnDoubleTapEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnDoubleTap != null) ? OnOnDoubleTap : OnDoubleTap;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onDoubleTap(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnDoubleTap(Android.View.MotionEvent arg0)
            {
                return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onDoubleTapEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDoubleTapEvent"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.View.MotionEvent, bool> OnOnDoubleTapEvent { get; set; } = null;

            void OnDoubleTapEventEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnDoubleTapEvent != null) ? OnOnDoubleTapEvent : OnDoubleTapEvent;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onDoubleTapEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnDoubleTapEvent(Android.View.MotionEvent arg0)
            {
                return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onSingleTapConfirmed(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnSingleTapConfirmed"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.View.MotionEvent, bool> OnOnSingleTapConfirmed { get; set; } = null;

            void OnSingleTapConfirmedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnSingleTapConfirmed != null) ? OnOnSingleTapConfirmed : OnSingleTapConfirmed;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onSingleTapConfirmed(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnSingleTapConfirmed(Android.View.MotionEvent arg0)
            {
                return default;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnDoubleTapListenerDirect
        public partial class OnDoubleTapListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onDoubleTap(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnDoubleTap(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onDoubleTap", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onDoubleTapEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnDoubleTapEvent(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onDoubleTapEvent", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnDoubleTapListener.html#onSingleTapConfirmed(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnSingleTapConfirmed(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onSingleTapConfirmed", "(Landroid/view/MotionEvent;)Z", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGestureListener
        public partial class OnGestureListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="OnGestureListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onDown", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnDownEventHandler));
                AddEventHandler("onFling", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnFlingEventHandler));
                AddEventHandler("onScroll", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnScrollEventHandler));
                AddEventHandler("onSingleTapUp", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnSingleTapUpEventHandler));
                AddEventHandler("onLongPress", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnLongPressEventHandler));
                AddEventHandler("onShowPress", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnShowPressEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onDown(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDown"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.View.MotionEvent, bool> OnOnDown { get; set; } = null;

            void OnDownEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnDown != null) ? OnOnDown : OnDown;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onDown(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnDown(Android.View.MotionEvent arg0)
            {
                return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnFling"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.View.MotionEvent, Android.View.MotionEvent, float, float, bool> OnOnFling { get; set; } = null;

            void OnFlingEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnFling != null) ? OnOnFling : OnFling;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.MotionEvent>(0), data.EventData.GetAt<float>(1), data.EventData.GetAt<float>(2));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnFling(Android.View.MotionEvent arg0, Android.View.MotionEvent arg1, float arg2, float arg3)
            {
                return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnScroll"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.View.MotionEvent, Android.View.MotionEvent, float, float, bool> OnOnScroll { get; set; } = null;

            void OnScrollEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnScroll != null) ? OnOnScroll : OnScroll;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.MotionEvent>(0), data.EventData.GetAt<float>(1), data.EventData.GetAt<float>(2));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnScroll(Android.View.MotionEvent arg0, Android.View.MotionEvent arg1, float arg2, float arg3)
            {
                return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onSingleTapUp(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnSingleTapUp"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.View.MotionEvent, bool> OnOnSingleTapUp { get; set; } = null;

            void OnSingleTapUpEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnSingleTapUp != null) ? OnOnSingleTapUp : OnSingleTapUp;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onSingleTapUp(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnSingleTapUp(Android.View.MotionEvent arg0)
            {
                return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onLongPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnLongPress"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.View.MotionEvent> OnOnLongPress { get; set; } = null;

            void OnLongPressEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnLongPress != null) ? OnOnLongPress : OnLongPress;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onLongPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            public virtual void OnLongPress(Android.View.MotionEvent arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onShowPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnShowPress"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.View.MotionEvent> OnOnShowPress { get; set; } = null;

            void OnShowPressEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnShowPress != null) ? OnOnShowPress : OnShowPress;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onShowPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            public virtual void OnShowPress(Android.View.MotionEvent arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OnGestureListenerDirect
        public partial class OnGestureListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onDown(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnDown(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onDown", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnFling(Android.View.MotionEvent arg0, Android.View.MotionEvent arg1, float arg2, float arg3)
            {
                return IExecute<bool>("onFling", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnScroll(Android.View.MotionEvent arg0, Android.View.MotionEvent arg1, float arg2, float arg3)
            {
                return IExecute<bool>("onScroll", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onSingleTapUp(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnSingleTapUp(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onSingleTapUp", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onLongPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            public override void OnLongPress(Android.View.MotionEvent arg0)
            {
                IExecuteWithSignature("onLongPress", "(Landroid/view/MotionEvent;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html#onShowPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            public override void OnShowPress(Android.View.MotionEvent arg0)
            {
                IExecuteWithSignature("onShowPress", "(Landroid/view/MotionEvent;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SimpleOnGestureListener
        public partial class SimpleOnGestureListener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="SimpleOnGestureListener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("onContextClick", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnContextClickEventHandler));
                AddEventHandler("onDoubleTap", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnDoubleTapEventHandler));
                AddEventHandler("onDoubleTapEvent", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnDoubleTapEventEventHandler));
                AddEventHandler("onDown", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnDownEventHandler));
                AddEventHandler("onFling", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnFlingEventHandler));
                AddEventHandler("onScroll", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnScrollEventHandler));
                AddEventHandler("onSingleTapConfirmed", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnSingleTapConfirmedEventHandler));
                AddEventHandler("onSingleTapUp", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnSingleTapUpEventHandler));
                AddEventHandler("onLongPress", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnLongPressEventHandler));
                AddEventHandler("onShowPress", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>>>(OnShowPressEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onContextClick(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnContextClick"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.View.MotionEvent, bool> OnOnContextClick { get; set; } = null;

            void OnContextClickEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnContextClick != null) ? OnOnContextClick : OnContextClick;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onContextClick(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnContextClick(Android.View.MotionEvent arg0)
            {
                return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDoubleTap(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDoubleTap"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.View.MotionEvent, bool> OnOnDoubleTap { get; set; } = null;

            void OnDoubleTapEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnDoubleTap != null) ? OnOnDoubleTap : OnDoubleTap;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDoubleTap(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnDoubleTap(Android.View.MotionEvent arg0)
            {
                return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDoubleTapEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDoubleTapEvent"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.View.MotionEvent, bool> OnOnDoubleTapEvent { get; set; } = null;

            void OnDoubleTapEventEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnDoubleTapEvent != null) ? OnOnDoubleTapEvent : OnDoubleTapEvent;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDoubleTapEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnDoubleTapEvent(Android.View.MotionEvent arg0)
            {
                return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDown(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnDown"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.View.MotionEvent, bool> OnOnDown { get; set; } = null;

            void OnDownEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnDown != null) ? OnOnDown : OnDown;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDown(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnDown(Android.View.MotionEvent arg0)
            {
                return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnFling"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.View.MotionEvent, Android.View.MotionEvent, float, float, bool> OnOnFling { get; set; } = null;

            void OnFlingEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnFling != null) ? OnOnFling : OnFling;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.MotionEvent>(0), data.EventData.GetAt<float>(1), data.EventData.GetAt<float>(2));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnFling(Android.View.MotionEvent arg0, Android.View.MotionEvent arg1, float arg2, float arg3)
            {
                return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnScroll"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.View.MotionEvent, Android.View.MotionEvent, float, float, bool> OnOnScroll { get; set; } = null;

            void OnScrollEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnScroll != null) ? OnOnScroll : OnScroll;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.View.MotionEvent>(0), data.EventData.GetAt<float>(1), data.EventData.GetAt<float>(2));
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnScroll(Android.View.MotionEvent arg0, Android.View.MotionEvent arg1, float arg2, float arg3)
            {
                return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onSingleTapConfirmed(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnSingleTapConfirmed"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.View.MotionEvent, bool> OnOnSingleTapConfirmed { get; set; } = null;

            void OnSingleTapConfirmedEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnSingleTapConfirmed != null) ? OnOnSingleTapConfirmed : OnSingleTapConfirmed;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onSingleTapConfirmed(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnSingleTapConfirmed(Android.View.MotionEvent arg0)
            {
                return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onSingleTapUp(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnSingleTapUp"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Func<Android.View.MotionEvent, bool> OnOnSingleTapUp { get; set; } = null;

            void OnSingleTapUpEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnSingleTapUp != null) ? OnOnSingleTapUp : OnSingleTapUp;
                var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
                data.SetReturnValue(executionResult);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onSingleTapUp(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public virtual bool OnSingleTapUp(Android.View.MotionEvent arg0)
            {
                return default;
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onLongPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnLongPress"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.View.MotionEvent> OnOnLongPress { get; set; } = null;

            void OnLongPressEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnLongPress != null) ? OnOnLongPress : OnLongPress;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onLongPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            public virtual void OnLongPress(Android.View.MotionEvent arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onShowPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <remarks>If <see cref="OnOnShowPress"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Android.View.MotionEvent> OnOnShowPress { get; set; } = null;

            void OnShowPressEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.View.MotionEvent>> data)
            {
                var methodToExecute = (OnOnShowPress != null) ? OnOnShowPress : OnShowPress;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onShowPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            public virtual void OnShowPress(Android.View.MotionEvent arg0)
            {
                
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SimpleOnGestureListenerDirect
        public partial class SimpleOnGestureListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onContextClick(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnContextClick(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onContextClick", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDoubleTap(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnDoubleTap(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onDoubleTap", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDoubleTapEvent(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnDoubleTapEvent(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onDoubleTapEvent", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onDown(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnDown(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onDown", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnFling(Android.View.MotionEvent arg0, Android.View.MotionEvent arg1, float arg2, float arg3)
            {
                return IExecute<bool>("onFling", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg1"><see cref="Android.View.MotionEvent"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <param name="arg3"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnScroll(Android.View.MotionEvent arg0, Android.View.MotionEvent arg1, float arg2, float arg3)
            {
                return IExecute<bool>("onScroll", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onSingleTapConfirmed(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnSingleTapConfirmed(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onSingleTapConfirmed", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onSingleTapUp(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            /// <returns><see cref="bool"/></returns>
            public override bool OnSingleTapUp(Android.View.MotionEvent arg0)
            {
                return IExecuteWithSignature<bool>("onSingleTapUp", "(Landroid/view/MotionEvent;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onLongPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            public override void OnLongPress(Android.View.MotionEvent arg0)
            {
                IExecuteWithSignature("onLongPress", "(Landroid/view/MotionEvent;)V", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html#onShowPress(android.view.MotionEvent)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.View.MotionEvent"/></param>
            public override void OnShowPress(Android.View.MotionEvent arg0)
            {
                IExecuteWithSignature("onShowPress", "(Landroid/view/MotionEvent;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
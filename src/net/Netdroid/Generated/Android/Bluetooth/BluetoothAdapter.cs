/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Bluetooth
{
    #region BluetoothAdapter
    public partial class BluetoothAdapter
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        
        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#checkBluetoothAddress(java.lang.String)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCheckBluetoothAddress"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Java.Lang.String, bool> OnCheckBluetoothAddress { get; set; } = null;

        void CheckBluetoothAddressEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
        {
            var methodToExecute = (OnCheckBluetoothAddress != null) ? OnCheckBluetoothAddress : CheckBluetoothAddress;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#checkBluetoothAddress(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public virtual bool CheckBluetoothAddress(Java.Lang.String arg0)
        {
            return default;
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// Handlers initializer for <see cref="BluetoothAdapter"/>
        /// </summary>
        protected virtual void InitializeHandlers()
        {
            AddEventHandler("getRemoteDevice", new System.EventHandler<CLRListenerEventArgs<CLREventData<byte[]>>>(GetRemoteDeviceEventHandler));
            AddEventHandler("getRemoteDevice1", new System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(GetRemoteDevice1EventHandler));
            AddEventHandler("getRemoteLeDevice", new System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(GetRemoteLeDeviceEventHandler));
            AddEventHandler("listenUsingInsecureL2capChannel", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(ListenUsingInsecureL2capChannelEventHandler));
            AddEventHandler("listenUsingInsecureRfcommWithServiceRecord", new System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(ListenUsingInsecureRfcommWithServiceRecordEventHandler));
            AddEventHandler("listenUsingL2capChannel", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(ListenUsingL2capChannelEventHandler));
            AddEventHandler("listenUsingRfcommWithServiceRecord", new System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(ListenUsingRfcommWithServiceRecordEventHandler));
            AddEventHandler("getBluetoothLeAdvertiser", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetBluetoothLeAdvertiserEventHandler));
            AddEventHandler("getBluetoothLeScanner", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetBluetoothLeScannerEventHandler));
            AddEventHandler("cancelDiscovery", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(CancelDiscoveryEventHandler));
            AddEventHandler("getProfileProxy", new System.EventHandler<CLRListenerEventArgs<CLREventData<Android.Content.Context>>>(GetProfileProxyEventHandler));
            AddEventHandler("isDiscovering", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IsDiscoveringEventHandler));
            AddEventHandler("isEnabled", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IsEnabledEventHandler));
            AddEventHandler("isLe2MPhySupported", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IsLe2MPhySupportedEventHandler));
            AddEventHandler("isLeCodedPhySupported", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IsLeCodedPhySupportedEventHandler));
            AddEventHandler("isLeExtendedAdvertisingSupported", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IsLeExtendedAdvertisingSupportedEventHandler));
            AddEventHandler("isLePeriodicAdvertisingSupported", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IsLePeriodicAdvertisingSupportedEventHandler));
            AddEventHandler("isMultipleAdvertisementSupported", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IsMultipleAdvertisementSupportedEventHandler));
            AddEventHandler("isOffloadedFilteringSupported", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IsOffloadedFilteringSupportedEventHandler));
            AddEventHandler("isOffloadedScanBatchingSupported", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IsOffloadedScanBatchingSupportedEventHandler));
            AddEventHandler("setName", new System.EventHandler<CLRListenerEventArgs<CLREventData<Java.Lang.String>>>(SetNameEventHandler));
            AddEventHandler("startDiscovery", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(StartDiscoveryEventHandler));
            AddEventHandler("getLeMaximumAdvertisingDataLength", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetLeMaximumAdvertisingDataLengthEventHandler));
            AddEventHandler("getMaxConnectedAudioDevices", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetMaxConnectedAudioDevicesEventHandler));
            AddEventHandler("getProfileConnectionState", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(GetProfileConnectionStateEventHandler));
            AddEventHandler("getScanMode", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetScanModeEventHandler));
            AddEventHandler("getState", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetStateEventHandler));
            AddEventHandler("isLeAudioBroadcastAssistantSupported", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IsLeAudioBroadcastAssistantSupportedEventHandler));
            AddEventHandler("isLeAudioBroadcastSourceSupported", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IsLeAudioBroadcastSourceSupportedEventHandler));
            AddEventHandler("isLeAudioSupported", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(IsLeAudioSupportedEventHandler));
            AddEventHandler("getAddress", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetAddressEventHandler));
            AddEventHandler("getName", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetNameEventHandler));
            AddEventHandler("getDiscoverableTimeout", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetDiscoverableTimeoutEventHandler));
            AddEventHandler("getBondedDevices", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(GetBondedDevicesEventHandler));
            AddEventHandler("closeProfileProxy", new System.EventHandler<CLRListenerEventArgs<CLREventData<int>>>(CloseProfileProxyEventHandler));

        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteDevice(byte[])"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetRemoteDevice"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<byte[], Android.Bluetooth.BluetoothDevice> OnGetRemoteDevice { get; set; } = null;

        void GetRemoteDeviceEventHandler(object sender, CLRListenerEventArgs<CLREventData<byte[]>> data)
        {
            var methodToExecute = (OnGetRemoteDevice != null) ? OnGetRemoteDevice : GetRemoteDevice;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteDevice(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothDevice"/></returns>
        public virtual Android.Bluetooth.BluetoothDevice GetRemoteDevice(byte[] arg0)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteDevice(java.lang.String)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetRemoteDevice1"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Java.Lang.String, Android.Bluetooth.BluetoothDevice> OnGetRemoteDevice1 { get; set; } = null;

        void GetRemoteDevice1EventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
        {
            var methodToExecute = (OnGetRemoteDevice1 != null) ? OnGetRemoteDevice1 : GetRemoteDevice;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteDevice(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothDevice"/></returns>
        public virtual Android.Bluetooth.BluetoothDevice GetRemoteDevice(Java.Lang.String arg0)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteLeDevice(java.lang.String,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetRemoteLeDevice"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Java.Lang.String, int, Android.Bluetooth.BluetoothDevice> OnGetRemoteLeDevice { get; set; } = null;

        void GetRemoteLeDeviceEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
        {
            var methodToExecute = (OnGetRemoteLeDevice != null) ? OnGetRemoteLeDevice : GetRemoteLeDevice;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<int>(0));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteLeDevice(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothDevice"/></returns>
        public virtual Android.Bluetooth.BluetoothDevice GetRemoteLeDevice(Java.Lang.String arg0, int arg1)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingInsecureL2capChannel()"/>
        /// </summary>
        /// <remarks>If <see cref="OnListenUsingInsecureL2capChannel"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Bluetooth.BluetoothServerSocket> OnListenUsingInsecureL2capChannel { get; set; } = null;

        void ListenUsingInsecureL2capChannelEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnListenUsingInsecureL2capChannel != null) ? OnListenUsingInsecureL2capChannel : ListenUsingInsecureL2capChannel;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingInsecureL2capChannel()"/>
        /// </summary>
        /// <returns><see cref="Android.Bluetooth.BluetoothServerSocket"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public virtual Android.Bluetooth.BluetoothServerSocket ListenUsingInsecureL2capChannel()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)"/>
        /// </summary>
        /// <remarks>If <see cref="OnListenUsingInsecureRfcommWithServiceRecord"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Java.Lang.String, Java.Util.UUID, Android.Bluetooth.BluetoothServerSocket> OnListenUsingInsecureRfcommWithServiceRecord { get; set; } = null;

        void ListenUsingInsecureRfcommWithServiceRecordEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
        {
            var methodToExecute = (OnListenUsingInsecureRfcommWithServiceRecord != null) ? OnListenUsingInsecureRfcommWithServiceRecord : ListenUsingInsecureRfcommWithServiceRecord;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Java.Util.UUID>(0));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.UUID"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothServerSocket"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public virtual Android.Bluetooth.BluetoothServerSocket ListenUsingInsecureRfcommWithServiceRecord(Java.Lang.String arg0, Java.Util.UUID arg1)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingL2capChannel()"/>
        /// </summary>
        /// <remarks>If <see cref="OnListenUsingL2capChannel"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Bluetooth.BluetoothServerSocket> OnListenUsingL2capChannel { get; set; } = null;

        void ListenUsingL2capChannelEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnListenUsingL2capChannel != null) ? OnListenUsingL2capChannel : ListenUsingL2capChannel;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingL2capChannel()"/>
        /// </summary>
        /// <returns><see cref="Android.Bluetooth.BluetoothServerSocket"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public virtual Android.Bluetooth.BluetoothServerSocket ListenUsingL2capChannel()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)"/>
        /// </summary>
        /// <remarks>If <see cref="OnListenUsingRfcommWithServiceRecord"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Java.Lang.String, Java.Util.UUID, Android.Bluetooth.BluetoothServerSocket> OnListenUsingRfcommWithServiceRecord { get; set; } = null;

        void ListenUsingRfcommWithServiceRecordEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
        {
            var methodToExecute = (OnListenUsingRfcommWithServiceRecord != null) ? OnListenUsingRfcommWithServiceRecord : ListenUsingRfcommWithServiceRecord;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Java.Util.UUID>(0));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.UUID"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothServerSocket"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public virtual Android.Bluetooth.BluetoothServerSocket ListenUsingRfcommWithServiceRecord(Java.Lang.String arg0, Java.Util.UUID arg1)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBluetoothLeAdvertiser()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetBluetoothLeAdvertiser"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Bluetooth.Le.BluetoothLeAdvertiser> OnGetBluetoothLeAdvertiser { get; set; } = null;

        void GetBluetoothLeAdvertiserEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetBluetoothLeAdvertiser != null) ? OnGetBluetoothLeAdvertiser : GetBluetoothLeAdvertiser;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBluetoothLeAdvertiser()"/>
        /// </summary>
        /// <returns><see cref="Android.Bluetooth.Le.BluetoothLeAdvertiser"/></returns>
        public virtual Android.Bluetooth.Le.BluetoothLeAdvertiser GetBluetoothLeAdvertiser()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBluetoothLeScanner()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetBluetoothLeScanner"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Bluetooth.Le.BluetoothLeScanner> OnGetBluetoothLeScanner { get; set; } = null;

        void GetBluetoothLeScannerEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetBluetoothLeScanner != null) ? OnGetBluetoothLeScanner : GetBluetoothLeScanner;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBluetoothLeScanner()"/>
        /// </summary>
        /// <returns><see cref="Android.Bluetooth.Le.BluetoothLeScanner"/></returns>
        public virtual Android.Bluetooth.Le.BluetoothLeScanner GetBluetoothLeScanner()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#cancelDiscovery()"/>
        /// </summary>
        /// <remarks>If <see cref="OnCancelDiscovery"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<bool> OnCancelDiscovery { get; set; } = null;

        void CancelDiscoveryEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnCancelDiscovery != null) ? OnCancelDiscovery : CancelDiscovery;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#cancelDiscovery()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool CancelDiscovery()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile.ServiceListener,int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetProfileProxy"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Android.Content.Context, Android.Bluetooth.BluetoothProfile.ServiceListener, int, bool> OnGetProfileProxy { get; set; } = null;

        void GetProfileProxyEventHandler(object sender, CLRListenerEventArgs<CLREventData<Android.Content.Context>> data)
        {
            var methodToExecute = (OnGetProfileProxy != null) ? OnGetProfileProxy : GetProfileProxy;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Bluetooth.BluetoothProfile.ServiceListener>(0), data.EventData.GetAt<int>(1));
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile.ServiceListener,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Bluetooth.BluetoothProfile.ServiceListener"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public virtual bool GetProfileProxy(Android.Content.Context arg0, Android.Bluetooth.BluetoothProfile.ServiceListener arg1, int arg2)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isDiscovering()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsDiscovering"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<bool> OnIsDiscovering { get; set; } = null;

        void IsDiscoveringEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIsDiscovering != null) ? OnIsDiscovering : IsDiscovering;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isDiscovering()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool IsDiscovering()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isEnabled()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsEnabled"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<bool> OnIsEnabled { get; set; } = null;

        void IsEnabledEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIsEnabled != null) ? OnIsEnabled : IsEnabled;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool IsEnabled()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLe2MPhySupported()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsLe2MPhySupported"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<bool> OnIsLe2MPhySupported { get; set; } = null;

        void IsLe2MPhySupportedEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIsLe2MPhySupported != null) ? OnIsLe2MPhySupported : IsLe2MPhySupported;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLe2MPhySupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool IsLe2MPhySupported()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeCodedPhySupported()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsLeCodedPhySupported"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<bool> OnIsLeCodedPhySupported { get; set; } = null;

        void IsLeCodedPhySupportedEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIsLeCodedPhySupported != null) ? OnIsLeCodedPhySupported : IsLeCodedPhySupported;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeCodedPhySupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool IsLeCodedPhySupported()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeExtendedAdvertisingSupported()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsLeExtendedAdvertisingSupported"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<bool> OnIsLeExtendedAdvertisingSupported { get; set; } = null;

        void IsLeExtendedAdvertisingSupportedEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIsLeExtendedAdvertisingSupported != null) ? OnIsLeExtendedAdvertisingSupported : IsLeExtendedAdvertisingSupported;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeExtendedAdvertisingSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool IsLeExtendedAdvertisingSupported()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLePeriodicAdvertisingSupported()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsLePeriodicAdvertisingSupported"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<bool> OnIsLePeriodicAdvertisingSupported { get; set; } = null;

        void IsLePeriodicAdvertisingSupportedEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIsLePeriodicAdvertisingSupported != null) ? OnIsLePeriodicAdvertisingSupported : IsLePeriodicAdvertisingSupported;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLePeriodicAdvertisingSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool IsLePeriodicAdvertisingSupported()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isMultipleAdvertisementSupported()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsMultipleAdvertisementSupported"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<bool> OnIsMultipleAdvertisementSupported { get; set; } = null;

        void IsMultipleAdvertisementSupportedEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIsMultipleAdvertisementSupported != null) ? OnIsMultipleAdvertisementSupported : IsMultipleAdvertisementSupported;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isMultipleAdvertisementSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool IsMultipleAdvertisementSupported()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isOffloadedFilteringSupported()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsOffloadedFilteringSupported"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<bool> OnIsOffloadedFilteringSupported { get; set; } = null;

        void IsOffloadedFilteringSupportedEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIsOffloadedFilteringSupported != null) ? OnIsOffloadedFilteringSupported : IsOffloadedFilteringSupported;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isOffloadedFilteringSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool IsOffloadedFilteringSupported()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isOffloadedScanBatchingSupported()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsOffloadedScanBatchingSupported"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<bool> OnIsOffloadedScanBatchingSupported { get; set; } = null;

        void IsOffloadedScanBatchingSupportedEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIsOffloadedScanBatchingSupported != null) ? OnIsOffloadedScanBatchingSupported : IsOffloadedScanBatchingSupported;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isOffloadedScanBatchingSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool IsOffloadedScanBatchingSupported()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#setName(java.lang.String)"/>
        /// </summary>
        /// <remarks>If <see cref="OnSetName"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Java.Lang.String, bool> OnSetName { get; set; } = null;

        void SetNameEventHandler(object sender, CLRListenerEventArgs<CLREventData<Java.Lang.String>> data)
        {
            var methodToExecute = (OnSetName != null) ? OnSetName : SetName;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#setName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public virtual bool SetName(Java.Lang.String arg0)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#startDiscovery()"/>
        /// </summary>
        /// <remarks>If <see cref="OnStartDiscovery"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<bool> OnStartDiscovery { get; set; } = null;

        void StartDiscoveryEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnStartDiscovery != null) ? OnStartDiscovery : StartDiscovery;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#startDiscovery()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public virtual bool StartDiscovery()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getLeMaximumAdvertisingDataLength()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetLeMaximumAdvertisingDataLength"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<int> OnGetLeMaximumAdvertisingDataLength { get; set; } = null;

        void GetLeMaximumAdvertisingDataLengthEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetLeMaximumAdvertisingDataLength != null) ? OnGetLeMaximumAdvertisingDataLength : GetLeMaximumAdvertisingDataLength;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getLeMaximumAdvertisingDataLength()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public virtual int GetLeMaximumAdvertisingDataLength()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getMaxConnectedAudioDevices()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetMaxConnectedAudioDevices"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<int> OnGetMaxConnectedAudioDevices { get; set; } = null;

        void GetMaxConnectedAudioDevicesEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetMaxConnectedAudioDevices != null) ? OnGetMaxConnectedAudioDevices : GetMaxConnectedAudioDevices;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getMaxConnectedAudioDevices()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public virtual int GetMaxConnectedAudioDevices()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getProfileConnectionState(int)"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetProfileConnectionState"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<int, int> OnGetProfileConnectionState { get; set; } = null;

        void GetProfileConnectionStateEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnGetProfileConnectionState != null) ? OnGetProfileConnectionState : GetProfileConnectionState;
            var executionResult = methodToExecute.Invoke(data.EventData.TypedEventData);
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getProfileConnectionState(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public virtual int GetProfileConnectionState(int arg0)
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getScanMode()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetScanMode"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<int> OnGetScanMode { get; set; } = null;

        void GetScanModeEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetScanMode != null) ? OnGetScanMode : GetScanMode;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getScanMode()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public virtual int GetScanMode()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getState()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetState"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<int> OnGetState { get; set; } = null;

        void GetStateEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetState != null) ? OnGetState : GetState;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public virtual int GetState()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeAudioBroadcastAssistantSupported()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsLeAudioBroadcastAssistantSupported"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<int> OnIsLeAudioBroadcastAssistantSupported { get; set; } = null;

        void IsLeAudioBroadcastAssistantSupportedEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIsLeAudioBroadcastAssistantSupported != null) ? OnIsLeAudioBroadcastAssistantSupported : IsLeAudioBroadcastAssistantSupported;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeAudioBroadcastAssistantSupported()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public virtual int IsLeAudioBroadcastAssistantSupported()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeAudioBroadcastSourceSupported()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsLeAudioBroadcastSourceSupported"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<int> OnIsLeAudioBroadcastSourceSupported { get; set; } = null;

        void IsLeAudioBroadcastSourceSupportedEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIsLeAudioBroadcastSourceSupported != null) ? OnIsLeAudioBroadcastSourceSupported : IsLeAudioBroadcastSourceSupported;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeAudioBroadcastSourceSupported()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public virtual int IsLeAudioBroadcastSourceSupported()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeAudioSupported()"/>
        /// </summary>
        /// <remarks>If <see cref="OnIsLeAudioSupported"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<int> OnIsLeAudioSupported { get; set; } = null;

        void IsLeAudioSupportedEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnIsLeAudioSupported != null) ? OnIsLeAudioSupported : IsLeAudioSupported;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeAudioSupported()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public virtual int IsLeAudioSupported()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getAddress()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetAddress"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Java.Lang.String> OnGetAddress { get; set; } = null;

        void GetAddressEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetAddress != null) ? OnGetAddress : GetAddress;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getAddress()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public virtual Java.Lang.String GetAddress()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getName()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetName"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Java.Lang.String> OnGetName { get; set; } = null;

        void GetNameEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetName != null) ? OnGetName : GetName;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public virtual Java.Lang.String GetName()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getDiscoverableTimeout()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetDiscoverableTimeout"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Java.Time.Duration> OnGetDiscoverableTimeout { get; set; } = null;

        void GetDiscoverableTimeoutEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetDiscoverableTimeout != null) ? OnGetDiscoverableTimeout : GetDiscoverableTimeout;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getDiscoverableTimeout()"/>
        /// </summary>
        /// <returns><see cref="Java.Time.Duration"/></returns>
        public virtual Java.Time.Duration GetDiscoverableTimeout()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBondedDevices()"/>
        /// </summary>
        /// <remarks>If <see cref="OnGetBondedDevices"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Func<Java.Util.Set<Android.Bluetooth.BluetoothDevice>> OnGetBondedDevices { get; set; } = null;

        void GetBondedDevicesEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
        {
            var methodToExecute = (OnGetBondedDevices != null) ? OnGetBondedDevices : GetBondedDevices;
            var executionResult = methodToExecute.Invoke();
            data.SetReturnValue(executionResult);
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBondedDevices()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public virtual Java.Util.Set<Android.Bluetooth.BluetoothDevice> GetBondedDevices()
        {
            return default;
        }

        /// <summary>
        /// Handler for <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#closeProfileProxy(int,android.bluetooth.BluetoothProfile)"/>
        /// </summary>
        /// <remarks>If <see cref="OnCloseProfileProxy"/> has a value it takes precedence over corresponding class method</remarks>
        public System.Action<int, Android.Bluetooth.BluetoothProfile> OnCloseProfileProxy { get; set; } = null;

        void CloseProfileProxyEventHandler(object sender, CLRListenerEventArgs<CLREventData<int>> data)
        {
            var methodToExecute = (OnCloseProfileProxy != null) ? OnCloseProfileProxy : CloseProfileProxy;
            methodToExecute.Invoke(data.EventData.TypedEventData, data.EventData.GetAt<Android.Bluetooth.BluetoothProfile>(0));
        }

        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#closeProfileProxy(int,android.bluetooth.BluetoothProfile)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Bluetooth.BluetoothProfile"/></param>
        public virtual void CloseProfileProxy(int arg0, Android.Bluetooth.BluetoothProfile arg1)
        {
            
        }

        #endregion

        #region Nested classes
        #region LeScanCallback
        public partial class LeScanCallback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.LeScanCallback.html#onLeScan(android.bluetooth.BluetoothDevice,int,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="byte"/></param>
            public void OnLeScan(Android.Bluetooth.BluetoothDevice arg0, int arg1, byte[] arg2)
            {
                IExecute("onLeScan", arg0, arg1, arg2);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion

    #region BluetoothAdapterDirect
    public partial class BluetoothAdapterDirect
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getAddress()"/> 
        /// </summary>
        public Java.Lang.String Address
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getAddress", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBluetoothLeAdvertiser()"/> 
        /// </summary>
        public Android.Bluetooth.Le.BluetoothLeAdvertiser BluetoothLeAdvertiser
        {
            get { return IExecuteWithSignature<Android.Bluetooth.Le.BluetoothLeAdvertiser>("getBluetoothLeAdvertiser", "()Landroid/bluetooth/le/BluetoothLeAdvertiser;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBluetoothLeScanner()"/> 
        /// </summary>
        public Android.Bluetooth.Le.BluetoothLeScanner BluetoothLeScanner
        {
            get { return IExecuteWithSignature<Android.Bluetooth.Le.BluetoothLeScanner>("getBluetoothLeScanner", "()Landroid/bluetooth/le/BluetoothLeScanner;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBondedDevices()"/> 
        /// </summary>
        public Java.Util.Set<Android.Bluetooth.BluetoothDevice> BondedDevices
        {
            get { return IExecuteWithSignature<Java.Util.Set<Android.Bluetooth.BluetoothDevice>>("getBondedDevices", "()Ljava/util/Set;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getDiscoverableTimeout()"/> 
        /// </summary>
        public Java.Time.Duration DiscoverableTimeout
        {
            get { return IExecuteWithSignature<Java.Time.Duration>("getDiscoverableTimeout", "()Ljava/time/Duration;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getLeMaximumAdvertisingDataLength()"/> 
        /// </summary>
        public int LeMaximumAdvertisingDataLength
        {
            get { return IExecuteWithSignature<int>("getLeMaximumAdvertisingDataLength", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getMaxConnectedAudioDevices()"/> 
        /// </summary>
        public int MaxConnectedAudioDevices
        {
            get { return IExecuteWithSignature<int>("getMaxConnectedAudioDevices", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getName()"/> 
        /// </summary>
        public Java.Lang.String Name
        {
            get { return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getScanMode()"/> 
        /// </summary>
        public int ScanMode
        {
            get { return IExecuteWithSignature<int>("getScanMode", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getState()"/> 
        /// </summary>
        public int State
        {
            get { return IExecuteWithSignature<int>("getState", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteDevice(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothDevice"/></returns>
        public override Android.Bluetooth.BluetoothDevice GetRemoteDevice(byte[] arg0)
        {
            return IExecuteWithSignature<Android.Bluetooth.BluetoothDevice>("getRemoteDevice", "([B)Landroid/bluetooth/BluetoothDevice;", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteDevice(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothDevice"/></returns>
        public override Android.Bluetooth.BluetoothDevice GetRemoteDevice(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Android.Bluetooth.BluetoothDevice>("getRemoteDevice", "(Ljava/lang/String;)Landroid/bluetooth/BluetoothDevice;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteLeDevice(java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothDevice"/></returns>
        public override Android.Bluetooth.BluetoothDevice GetRemoteLeDevice(Java.Lang.String arg0, int arg1)
        {
            return IExecute<Android.Bluetooth.BluetoothDevice>("getRemoteLeDevice", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingInsecureL2capChannel()"/>
        /// </summary>
        /// <returns><see cref="Android.Bluetooth.BluetoothServerSocket"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public override Android.Bluetooth.BluetoothServerSocket ListenUsingInsecureL2capChannel()
        {
            return IExecuteWithSignature<Android.Bluetooth.BluetoothServerSocket>("listenUsingInsecureL2capChannel", "()Landroid/bluetooth/BluetoothServerSocket;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.UUID"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothServerSocket"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public override Android.Bluetooth.BluetoothServerSocket ListenUsingInsecureRfcommWithServiceRecord(Java.Lang.String arg0, Java.Util.UUID arg1)
        {
            return IExecute<Android.Bluetooth.BluetoothServerSocket>("listenUsingInsecureRfcommWithServiceRecord", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingL2capChannel()"/>
        /// </summary>
        /// <returns><see cref="Android.Bluetooth.BluetoothServerSocket"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public override Android.Bluetooth.BluetoothServerSocket ListenUsingL2capChannel()
        {
            return IExecuteWithSignature<Android.Bluetooth.BluetoothServerSocket>("listenUsingL2capChannel", "()Landroid/bluetooth/BluetoothServerSocket;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.UUID"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothServerSocket"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public override Android.Bluetooth.BluetoothServerSocket ListenUsingRfcommWithServiceRecord(Java.Lang.String arg0, Java.Util.UUID arg1)
        {
            return IExecute<Android.Bluetooth.BluetoothServerSocket>("listenUsingRfcommWithServiceRecord", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#cancelDiscovery()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool CancelDiscovery()
        {
            return IExecuteWithSignature<bool>("cancelDiscovery", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile.ServiceListener,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="Android.Bluetooth.BluetoothProfile.ServiceListener"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public override bool GetProfileProxy(Android.Content.Context arg0, Android.Bluetooth.BluetoothProfile.ServiceListener arg1, int arg2)
        {
            return IExecute<bool>("getProfileProxy", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isDiscovering()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool IsDiscovering()
        {
            return IExecuteWithSignature<bool>("isDiscovering", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool IsEnabled()
        {
            return IExecuteWithSignature<bool>("isEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLe2MPhySupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool IsLe2MPhySupported()
        {
            return IExecuteWithSignature<bool>("isLe2MPhySupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeCodedPhySupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool IsLeCodedPhySupported()
        {
            return IExecuteWithSignature<bool>("isLeCodedPhySupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeExtendedAdvertisingSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool IsLeExtendedAdvertisingSupported()
        {
            return IExecuteWithSignature<bool>("isLeExtendedAdvertisingSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLePeriodicAdvertisingSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool IsLePeriodicAdvertisingSupported()
        {
            return IExecuteWithSignature<bool>("isLePeriodicAdvertisingSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isMultipleAdvertisementSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool IsMultipleAdvertisementSupported()
        {
            return IExecuteWithSignature<bool>("isMultipleAdvertisementSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isOffloadedFilteringSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool IsOffloadedFilteringSupported()
        {
            return IExecuteWithSignature<bool>("isOffloadedFilteringSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isOffloadedScanBatchingSupported()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool IsOffloadedScanBatchingSupported()
        {
            return IExecuteWithSignature<bool>("isOffloadedScanBatchingSupported", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#setName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public override bool SetName(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("setName", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#startDiscovery()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public override bool StartDiscovery()
        {
            return IExecuteWithSignature<bool>("startDiscovery", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getProfileConnectionState(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public override int GetProfileConnectionState(int arg0)
        {
            return IExecuteWithSignature<int>("getProfileConnectionState", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeAudioBroadcastAssistantSupported()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public override int IsLeAudioBroadcastAssistantSupported()
        {
            return IExecuteWithSignature<int>("isLeAudioBroadcastAssistantSupported", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeAudioBroadcastSourceSupported()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public override int IsLeAudioBroadcastSourceSupported()
        {
            return IExecuteWithSignature<int>("isLeAudioBroadcastSourceSupported", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeAudioSupported()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public override int IsLeAudioSupported()
        {
            return IExecuteWithSignature<int>("isLeAudioSupported", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#closeProfileProxy(int,android.bluetooth.BluetoothProfile)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Android.Bluetooth.BluetoothProfile"/></param>
        public override void CloseProfileProxy(int arg0, Android.Bluetooth.BluetoothProfile arg1)
        {
            IExecute("closeProfileProxy", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
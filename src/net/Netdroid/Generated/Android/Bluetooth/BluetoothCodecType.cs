/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Bluetooth
{
    #region BluetoothCodecType
    public partial class BluetoothCodecType
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#CODEC_ID_AAC"/>
        /// </summary>
        public static long CODEC_ID_AAC { get { if (!_CODEC_ID_AACReady) { _CODEC_ID_AACContent = SGetField<long>(LocalBridgeClazz, "CODEC_ID_AAC"); _CODEC_ID_AACReady = true; } return _CODEC_ID_AACContent; } }
        private static long _CODEC_ID_AACContent = default;
        private static bool _CODEC_ID_AACReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#CODEC_ID_APTX"/>
        /// </summary>
        public static long CODEC_ID_APTX { get { if (!_CODEC_ID_APTXReady) { _CODEC_ID_APTXContent = SGetField<long>(LocalBridgeClazz, "CODEC_ID_APTX"); _CODEC_ID_APTXReady = true; } return _CODEC_ID_APTXContent; } }
        private static long _CODEC_ID_APTXContent = default;
        private static bool _CODEC_ID_APTXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#CODEC_ID_APTX_HD"/>
        /// </summary>
        public static long CODEC_ID_APTX_HD { get { if (!_CODEC_ID_APTX_HDReady) { _CODEC_ID_APTX_HDContent = SGetField<long>(LocalBridgeClazz, "CODEC_ID_APTX_HD"); _CODEC_ID_APTX_HDReady = true; } return _CODEC_ID_APTX_HDContent; } }
        private static long _CODEC_ID_APTX_HDContent = default;
        private static bool _CODEC_ID_APTX_HDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#CODEC_ID_LDAC"/>
        /// </summary>
        public static long CODEC_ID_LDAC { get { if (!_CODEC_ID_LDACReady) { _CODEC_ID_LDACContent = SGetField<long>(LocalBridgeClazz, "CODEC_ID_LDAC"); _CODEC_ID_LDACReady = true; } return _CODEC_ID_LDACContent; } }
        private static long _CODEC_ID_LDACContent = default;
        private static bool _CODEC_ID_LDACReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#CODEC_ID_OPUS"/>
        /// </summary>
        public static long CODEC_ID_OPUS { get { if (!_CODEC_ID_OPUSReady) { _CODEC_ID_OPUSContent = SGetField<long>(LocalBridgeClazz, "CODEC_ID_OPUS"); _CODEC_ID_OPUSReady = true; } return _CODEC_ID_OPUSContent; } }
        private static long _CODEC_ID_OPUSContent = default;
        private static bool _CODEC_ID_OPUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#CODEC_ID_SBC"/>
        /// </summary>
        public static long CODEC_ID_SBC { get { if (!_CODEC_ID_SBCReady) { _CODEC_ID_SBCContent = SGetField<long>(LocalBridgeClazz, "CODEC_ID_SBC"); _CODEC_ID_SBCReady = true; } return _CODEC_ID_SBCContent; } }
        private static long _CODEC_ID_SBCContent = default;
        private static bool _CODEC_ID_SBCReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#isMandatoryCodec()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsMandatoryCodec()
        {
            return IExecuteWithSignature<bool>("isMandatoryCodec", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#getCodecName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetCodecName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getCodecName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#getCodecId()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long GetCodecId()
        {
            return IExecuteWithSignature<long>("getCodecId", "()J");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothCodecType.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
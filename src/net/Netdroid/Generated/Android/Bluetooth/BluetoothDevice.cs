/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Bluetooth
{
    #region BluetoothDevice
    public partial class BluetoothDevice
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ADDRESS_TYPE_PUBLIC"/>
        /// </summary>
        public static int ADDRESS_TYPE_PUBLIC { get { if (!_ADDRESS_TYPE_PUBLICReady) { _ADDRESS_TYPE_PUBLICContent = SGetField<int>(LocalBridgeClazz, "ADDRESS_TYPE_PUBLIC"); _ADDRESS_TYPE_PUBLICReady = true; } return _ADDRESS_TYPE_PUBLICContent; } }
        private static int _ADDRESS_TYPE_PUBLICContent = default;
        private static bool _ADDRESS_TYPE_PUBLICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ADDRESS_TYPE_RANDOM"/>
        /// </summary>
        public static int ADDRESS_TYPE_RANDOM { get { if (!_ADDRESS_TYPE_RANDOMReady) { _ADDRESS_TYPE_RANDOMContent = SGetField<int>(LocalBridgeClazz, "ADDRESS_TYPE_RANDOM"); _ADDRESS_TYPE_RANDOMReady = true; } return _ADDRESS_TYPE_RANDOMContent; } }
        private static int _ADDRESS_TYPE_RANDOMContent = default;
        private static bool _ADDRESS_TYPE_RANDOMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ADDRESS_TYPE_UNKNOWN"/>
        /// </summary>
        public static int ADDRESS_TYPE_UNKNOWN { get { if (!_ADDRESS_TYPE_UNKNOWNReady) { _ADDRESS_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "ADDRESS_TYPE_UNKNOWN"); _ADDRESS_TYPE_UNKNOWNReady = true; } return _ADDRESS_TYPE_UNKNOWNContent; } }
        private static int _ADDRESS_TYPE_UNKNOWNContent = default;
        private static bool _ADDRESS_TYPE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#BOND_BONDED"/>
        /// </summary>
        public static int BOND_BONDED { get { if (!_BOND_BONDEDReady) { _BOND_BONDEDContent = SGetField<int>(LocalBridgeClazz, "BOND_BONDED"); _BOND_BONDEDReady = true; } return _BOND_BONDEDContent; } }
        private static int _BOND_BONDEDContent = default;
        private static bool _BOND_BONDEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#BOND_BONDING"/>
        /// </summary>
        public static int BOND_BONDING { get { if (!_BOND_BONDINGReady) { _BOND_BONDINGContent = SGetField<int>(LocalBridgeClazz, "BOND_BONDING"); _BOND_BONDINGReady = true; } return _BOND_BONDINGContent; } }
        private static int _BOND_BONDINGContent = default;
        private static bool _BOND_BONDINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#BOND_NONE"/>
        /// </summary>
        public static int BOND_NONE { get { if (!_BOND_NONEReady) { _BOND_NONEContent = SGetField<int>(LocalBridgeClazz, "BOND_NONE"); _BOND_NONEReady = true; } return _BOND_NONEContent; } }
        private static int _BOND_NONEContent = default;
        private static bool _BOND_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#DEVICE_TYPE_CLASSIC"/>
        /// </summary>
        public static int DEVICE_TYPE_CLASSIC { get { if (!_DEVICE_TYPE_CLASSICReady) { _DEVICE_TYPE_CLASSICContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_CLASSIC"); _DEVICE_TYPE_CLASSICReady = true; } return _DEVICE_TYPE_CLASSICContent; } }
        private static int _DEVICE_TYPE_CLASSICContent = default;
        private static bool _DEVICE_TYPE_CLASSICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#DEVICE_TYPE_DUAL"/>
        /// </summary>
        public static int DEVICE_TYPE_DUAL { get { if (!_DEVICE_TYPE_DUALReady) { _DEVICE_TYPE_DUALContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_DUAL"); _DEVICE_TYPE_DUALReady = true; } return _DEVICE_TYPE_DUALContent; } }
        private static int _DEVICE_TYPE_DUALContent = default;
        private static bool _DEVICE_TYPE_DUALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#DEVICE_TYPE_LE"/>
        /// </summary>
        public static int DEVICE_TYPE_LE { get { if (!_DEVICE_TYPE_LEReady) { _DEVICE_TYPE_LEContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_LE"); _DEVICE_TYPE_LEReady = true; } return _DEVICE_TYPE_LEContent; } }
        private static int _DEVICE_TYPE_LEContent = default;
        private static bool _DEVICE_TYPE_LEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#DEVICE_TYPE_UNKNOWN"/>
        /// </summary>
        public static int DEVICE_TYPE_UNKNOWN { get { if (!_DEVICE_TYPE_UNKNOWNReady) { _DEVICE_TYPE_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "DEVICE_TYPE_UNKNOWN"); _DEVICE_TYPE_UNKNOWNReady = true; } return _DEVICE_TYPE_UNKNOWNContent; } }
        private static int _DEVICE_TYPE_UNKNOWNContent = default;
        private static bool _DEVICE_TYPE_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ERROR"/>
        /// </summary>
        public static int ERROR { get { if (!_ERRORReady) { _ERRORContent = SGetField<int>(LocalBridgeClazz, "ERROR"); _ERRORReady = true; } return _ERRORContent; } }
        private static int _ERRORContent = default;
        private static bool _ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PAIRING_VARIANT_PASSKEY_CONFIRMATION"/>
        /// </summary>
        public static int PAIRING_VARIANT_PASSKEY_CONFIRMATION { get { if (!_PAIRING_VARIANT_PASSKEY_CONFIRMATIONReady) { _PAIRING_VARIANT_PASSKEY_CONFIRMATIONContent = SGetField<int>(LocalBridgeClazz, "PAIRING_VARIANT_PASSKEY_CONFIRMATION"); _PAIRING_VARIANT_PASSKEY_CONFIRMATIONReady = true; } return _PAIRING_VARIANT_PASSKEY_CONFIRMATIONContent; } }
        private static int _PAIRING_VARIANT_PASSKEY_CONFIRMATIONContent = default;
        private static bool _PAIRING_VARIANT_PASSKEY_CONFIRMATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PAIRING_VARIANT_PIN"/>
        /// </summary>
        public static int PAIRING_VARIANT_PIN { get { if (!_PAIRING_VARIANT_PINReady) { _PAIRING_VARIANT_PINContent = SGetField<int>(LocalBridgeClazz, "PAIRING_VARIANT_PIN"); _PAIRING_VARIANT_PINReady = true; } return _PAIRING_VARIANT_PINContent; } }
        private static int _PAIRING_VARIANT_PINContent = default;
        private static bool _PAIRING_VARIANT_PINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_1M"/>
        /// </summary>
        public static int PHY_LE_1M { get { if (!_PHY_LE_1MReady) { _PHY_LE_1MContent = SGetField<int>(LocalBridgeClazz, "PHY_LE_1M"); _PHY_LE_1MReady = true; } return _PHY_LE_1MContent; } }
        private static int _PHY_LE_1MContent = default;
        private static bool _PHY_LE_1MReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_1M_MASK"/>
        /// </summary>
        public static int PHY_LE_1M_MASK { get { if (!_PHY_LE_1M_MASKReady) { _PHY_LE_1M_MASKContent = SGetField<int>(LocalBridgeClazz, "PHY_LE_1M_MASK"); _PHY_LE_1M_MASKReady = true; } return _PHY_LE_1M_MASKContent; } }
        private static int _PHY_LE_1M_MASKContent = default;
        private static bool _PHY_LE_1M_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_2M"/>
        /// </summary>
        public static int PHY_LE_2M { get { if (!_PHY_LE_2MReady) { _PHY_LE_2MContent = SGetField<int>(LocalBridgeClazz, "PHY_LE_2M"); _PHY_LE_2MReady = true; } return _PHY_LE_2MContent; } }
        private static int _PHY_LE_2MContent = default;
        private static bool _PHY_LE_2MReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_2M_MASK"/>
        /// </summary>
        public static int PHY_LE_2M_MASK { get { if (!_PHY_LE_2M_MASKReady) { _PHY_LE_2M_MASKContent = SGetField<int>(LocalBridgeClazz, "PHY_LE_2M_MASK"); _PHY_LE_2M_MASKReady = true; } return _PHY_LE_2M_MASKContent; } }
        private static int _PHY_LE_2M_MASKContent = default;
        private static bool _PHY_LE_2M_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_CODED"/>
        /// </summary>
        public static int PHY_LE_CODED { get { if (!_PHY_LE_CODEDReady) { _PHY_LE_CODEDContent = SGetField<int>(LocalBridgeClazz, "PHY_LE_CODED"); _PHY_LE_CODEDReady = true; } return _PHY_LE_CODEDContent; } }
        private static int _PHY_LE_CODEDContent = default;
        private static bool _PHY_LE_CODEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_CODED_MASK"/>
        /// </summary>
        public static int PHY_LE_CODED_MASK { get { if (!_PHY_LE_CODED_MASKReady) { _PHY_LE_CODED_MASKContent = SGetField<int>(LocalBridgeClazz, "PHY_LE_CODED_MASK"); _PHY_LE_CODED_MASKReady = true; } return _PHY_LE_CODED_MASKContent; } }
        private static int _PHY_LE_CODED_MASKContent = default;
        private static bool _PHY_LE_CODED_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_OPTION_NO_PREFERRED"/>
        /// </summary>
        public static int PHY_OPTION_NO_PREFERRED { get { if (!_PHY_OPTION_NO_PREFERREDReady) { _PHY_OPTION_NO_PREFERREDContent = SGetField<int>(LocalBridgeClazz, "PHY_OPTION_NO_PREFERRED"); _PHY_OPTION_NO_PREFERREDReady = true; } return _PHY_OPTION_NO_PREFERREDContent; } }
        private static int _PHY_OPTION_NO_PREFERREDContent = default;
        private static bool _PHY_OPTION_NO_PREFERREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_OPTION_S2"/>
        /// </summary>
        public static int PHY_OPTION_S2 { get { if (!_PHY_OPTION_S2Ready) { _PHY_OPTION_S2Content = SGetField<int>(LocalBridgeClazz, "PHY_OPTION_S2"); _PHY_OPTION_S2Ready = true; } return _PHY_OPTION_S2Content; } }
        private static int _PHY_OPTION_S2Content = default;
        private static bool _PHY_OPTION_S2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_OPTION_S8"/>
        /// </summary>
        public static int PHY_OPTION_S8 { get { if (!_PHY_OPTION_S8Ready) { _PHY_OPTION_S8Content = SGetField<int>(LocalBridgeClazz, "PHY_OPTION_S8"); _PHY_OPTION_S8Ready = true; } return _PHY_OPTION_S8Content; } }
        private static int _PHY_OPTION_S8Content = default;
        private static bool _PHY_OPTION_S8Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#TRANSPORT_AUTO"/>
        /// </summary>
        public static int TRANSPORT_AUTO { get { if (!_TRANSPORT_AUTOReady) { _TRANSPORT_AUTOContent = SGetField<int>(LocalBridgeClazz, "TRANSPORT_AUTO"); _TRANSPORT_AUTOReady = true; } return _TRANSPORT_AUTOContent; } }
        private static int _TRANSPORT_AUTOContent = default;
        private static bool _TRANSPORT_AUTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#TRANSPORT_BREDR"/>
        /// </summary>
        public static int TRANSPORT_BREDR { get { if (!_TRANSPORT_BREDRReady) { _TRANSPORT_BREDRContent = SGetField<int>(LocalBridgeClazz, "TRANSPORT_BREDR"); _TRANSPORT_BREDRReady = true; } return _TRANSPORT_BREDRContent; } }
        private static int _TRANSPORT_BREDRContent = default;
        private static bool _TRANSPORT_BREDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#TRANSPORT_LE"/>
        /// </summary>
        public static int TRANSPORT_LE { get { if (!_TRANSPORT_LEReady) { _TRANSPORT_LEContent = SGetField<int>(LocalBridgeClazz, "TRANSPORT_LE"); _TRANSPORT_LEReady = true; } return _TRANSPORT_LEContent; } }
        private static int _TRANSPORT_LEContent = default;
        private static bool _TRANSPORT_LEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_ACL_CONNECTED"/>
        /// </summary>
        public static Java.Lang.String ACTION_ACL_CONNECTED { get { if (!_ACTION_ACL_CONNECTEDReady) { _ACTION_ACL_CONNECTEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ACL_CONNECTED"); _ACTION_ACL_CONNECTEDReady = true; } return _ACTION_ACL_CONNECTEDContent; } }
        private static Java.Lang.String _ACTION_ACL_CONNECTEDContent = default;
        private static bool _ACTION_ACL_CONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_ACL_DISCONNECT_REQUESTED"/>
        /// </summary>
        public static Java.Lang.String ACTION_ACL_DISCONNECT_REQUESTED { get { if (!_ACTION_ACL_DISCONNECT_REQUESTEDReady) { _ACTION_ACL_DISCONNECT_REQUESTEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ACL_DISCONNECT_REQUESTED"); _ACTION_ACL_DISCONNECT_REQUESTEDReady = true; } return _ACTION_ACL_DISCONNECT_REQUESTEDContent; } }
        private static Java.Lang.String _ACTION_ACL_DISCONNECT_REQUESTEDContent = default;
        private static bool _ACTION_ACL_DISCONNECT_REQUESTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_ACL_DISCONNECTED"/>
        /// </summary>
        public static Java.Lang.String ACTION_ACL_DISCONNECTED { get { if (!_ACTION_ACL_DISCONNECTEDReady) { _ACTION_ACL_DISCONNECTEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ACL_DISCONNECTED"); _ACTION_ACL_DISCONNECTEDReady = true; } return _ACTION_ACL_DISCONNECTEDContent; } }
        private static Java.Lang.String _ACTION_ACL_DISCONNECTEDContent = default;
        private static bool _ACTION_ACL_DISCONNECTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_ALIAS_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_ALIAS_CHANGED { get { if (!_ACTION_ALIAS_CHANGEDReady) { _ACTION_ALIAS_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ALIAS_CHANGED"); _ACTION_ALIAS_CHANGEDReady = true; } return _ACTION_ALIAS_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_ALIAS_CHANGEDContent = default;
        private static bool _ACTION_ALIAS_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_BOND_STATE_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_BOND_STATE_CHANGED { get { if (!_ACTION_BOND_STATE_CHANGEDReady) { _ACTION_BOND_STATE_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_BOND_STATE_CHANGED"); _ACTION_BOND_STATE_CHANGEDReady = true; } return _ACTION_BOND_STATE_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_BOND_STATE_CHANGEDContent = default;
        private static bool _ACTION_BOND_STATE_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_CLASS_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_CLASS_CHANGED { get { if (!_ACTION_CLASS_CHANGEDReady) { _ACTION_CLASS_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CLASS_CHANGED"); _ACTION_CLASS_CHANGEDReady = true; } return _ACTION_CLASS_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_CLASS_CHANGEDContent = default;
        private static bool _ACTION_CLASS_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_FOUND"/>
        /// </summary>
        public static Java.Lang.String ACTION_FOUND { get { if (!_ACTION_FOUNDReady) { _ACTION_FOUNDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_FOUND"); _ACTION_FOUNDReady = true; } return _ACTION_FOUNDContent; } }
        private static Java.Lang.String _ACTION_FOUNDContent = default;
        private static bool _ACTION_FOUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_NAME_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_NAME_CHANGED { get { if (!_ACTION_NAME_CHANGEDReady) { _ACTION_NAME_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NAME_CHANGED"); _ACTION_NAME_CHANGEDReady = true; } return _ACTION_NAME_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_NAME_CHANGEDContent = default;
        private static bool _ACTION_NAME_CHANGEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_PAIRING_REQUEST"/>
        /// </summary>
        public static Java.Lang.String ACTION_PAIRING_REQUEST { get { if (!_ACTION_PAIRING_REQUESTReady) { _ACTION_PAIRING_REQUESTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_PAIRING_REQUEST"); _ACTION_PAIRING_REQUESTReady = true; } return _ACTION_PAIRING_REQUESTContent; } }
        private static Java.Lang.String _ACTION_PAIRING_REQUESTContent = default;
        private static bool _ACTION_PAIRING_REQUESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_UUID"/>
        /// </summary>
        public static Java.Lang.String ACTION_UUID { get { if (!_ACTION_UUIDReady) { _ACTION_UUIDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_UUID"); _ACTION_UUIDReady = true; } return _ACTION_UUIDContent; } }
        private static Java.Lang.String _ACTION_UUIDContent = default;
        private static bool _ACTION_UUIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_BOND_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_BOND_STATE { get { if (!_EXTRA_BOND_STATEReady) { _EXTRA_BOND_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_BOND_STATE"); _EXTRA_BOND_STATEReady = true; } return _EXTRA_BOND_STATEContent; } }
        private static Java.Lang.String _EXTRA_BOND_STATEContent = default;
        private static bool _EXTRA_BOND_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_CLASS"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CLASS { get { if (!_EXTRA_CLASSReady) { _EXTRA_CLASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CLASS"); _EXTRA_CLASSReady = true; } return _EXTRA_CLASSContent; } }
        private static Java.Lang.String _EXTRA_CLASSContent = default;
        private static bool _EXTRA_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_DEVICE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DEVICE { get { if (!_EXTRA_DEVICEReady) { _EXTRA_DEVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DEVICE"); _EXTRA_DEVICEReady = true; } return _EXTRA_DEVICEContent; } }
        private static Java.Lang.String _EXTRA_DEVICEContent = default;
        private static bool _EXTRA_DEVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_IS_COORDINATED_SET_MEMBER"/>
        /// </summary>
        public static Java.Lang.String EXTRA_IS_COORDINATED_SET_MEMBER { get { if (!_EXTRA_IS_COORDINATED_SET_MEMBERReady) { _EXTRA_IS_COORDINATED_SET_MEMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_IS_COORDINATED_SET_MEMBER"); _EXTRA_IS_COORDINATED_SET_MEMBERReady = true; } return _EXTRA_IS_COORDINATED_SET_MEMBERContent; } }
        private static Java.Lang.String _EXTRA_IS_COORDINATED_SET_MEMBERContent = default;
        private static bool _EXTRA_IS_COORDINATED_SET_MEMBERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_NAME"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NAME { get { if (!_EXTRA_NAMEReady) { _EXTRA_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NAME"); _EXTRA_NAMEReady = true; } return _EXTRA_NAMEContent; } }
        private static Java.Lang.String _EXTRA_NAMEContent = default;
        private static bool _EXTRA_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_PAIRING_KEY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PAIRING_KEY { get { if (!_EXTRA_PAIRING_KEYReady) { _EXTRA_PAIRING_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PAIRING_KEY"); _EXTRA_PAIRING_KEYReady = true; } return _EXTRA_PAIRING_KEYContent; } }
        private static Java.Lang.String _EXTRA_PAIRING_KEYContent = default;
        private static bool _EXTRA_PAIRING_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_PAIRING_VARIANT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PAIRING_VARIANT { get { if (!_EXTRA_PAIRING_VARIANTReady) { _EXTRA_PAIRING_VARIANTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PAIRING_VARIANT"); _EXTRA_PAIRING_VARIANTReady = true; } return _EXTRA_PAIRING_VARIANTContent; } }
        private static Java.Lang.String _EXTRA_PAIRING_VARIANTContent = default;
        private static bool _EXTRA_PAIRING_VARIANTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_PREVIOUS_BOND_STATE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_PREVIOUS_BOND_STATE { get { if (!_EXTRA_PREVIOUS_BOND_STATEReady) { _EXTRA_PREVIOUS_BOND_STATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PREVIOUS_BOND_STATE"); _EXTRA_PREVIOUS_BOND_STATEReady = true; } return _EXTRA_PREVIOUS_BOND_STATEContent; } }
        private static Java.Lang.String _EXTRA_PREVIOUS_BOND_STATEContent = default;
        private static bool _EXTRA_PREVIOUS_BOND_STATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_RSSI"/>
        /// </summary>
        public static Java.Lang.String EXTRA_RSSI { get { if (!_EXTRA_RSSIReady) { _EXTRA_RSSIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_RSSI"); _EXTRA_RSSIReady = true; } return _EXTRA_RSSIContent; } }
        private static Java.Lang.String _EXTRA_RSSIContent = default;
        private static bool _EXTRA_RSSIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_TRANSPORT"/>
        /// </summary>
        public static Java.Lang.String EXTRA_TRANSPORT { get { if (!_EXTRA_TRANSPORTReady) { _EXTRA_TRANSPORTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_TRANSPORT"); _EXTRA_TRANSPORTReady = true; } return _EXTRA_TRANSPORTContent; } }
        private static Java.Lang.String _EXTRA_TRANSPORTContent = default;
        private static bool _EXTRA_TRANSPORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_UUID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_UUID { get { if (!_EXTRA_UUIDReady) { _EXTRA_UUIDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_UUID"); _EXTRA_UUIDReady = true; } return _EXTRA_UUIDContent; } }
        private static Java.Lang.String _EXTRA_UUIDContent = default;
        private static bool _EXTRA_UUIDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getBluetoothClass()"/>
        /// </summary>
        /// <returns><see cref="Android.Bluetooth.BluetoothClass"/></returns>
        public Android.Bluetooth.BluetoothClass GetBluetoothClass()
        {
            return IExecuteWithSignature<Android.Bluetooth.BluetoothClass>("getBluetoothClass", "()Landroid/bluetooth/BluetoothClass;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback,int,int,android.os.Handler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Android.Bluetooth.BluetoothGattCallback"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="Android.Os.Handler"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothGatt"/></returns>
        public Android.Bluetooth.BluetoothGatt ConnectGatt(Android.Content.Context arg0, bool arg1, Android.Bluetooth.BluetoothGattCallback arg2, int arg3, int arg4, Android.Os.Handler arg5)
        {
            return IExecute<Android.Bluetooth.BluetoothGatt>("connectGatt", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Android.Bluetooth.BluetoothGattCallback"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothGatt"/></returns>
        public Android.Bluetooth.BluetoothGatt ConnectGatt(Android.Content.Context arg0, bool arg1, Android.Bluetooth.BluetoothGattCallback arg2, int arg3, int arg4)
        {
            return IExecute<Android.Bluetooth.BluetoothGatt>("connectGatt", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Android.Bluetooth.BluetoothGattCallback"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothGatt"/></returns>
        public Android.Bluetooth.BluetoothGatt ConnectGatt(Android.Content.Context arg0, bool arg1, Android.Bluetooth.BluetoothGattCallback arg2, int arg3)
        {
            return IExecute<Android.Bluetooth.BluetoothGatt>("connectGatt", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Android.Bluetooth.BluetoothGattCallback"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothGatt"/></returns>
        public Android.Bluetooth.BluetoothGatt ConnectGatt(Android.Content.Context arg0, bool arg1, Android.Bluetooth.BluetoothGattCallback arg2)
        {
            return IExecute<Android.Bluetooth.BluetoothGatt>("connectGatt", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createInsecureL2capChannel(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothSocket"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Android.Bluetooth.BluetoothSocket CreateInsecureL2capChannel(int arg0)
        {
            return IExecuteWithSignature<Android.Bluetooth.BluetoothSocket>("createInsecureL2capChannel", "(I)Landroid/bluetooth/BluetoothSocket;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createInsecureRfcommSocketToServiceRecord(java.util.UUID)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.UUID"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothSocket"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Android.Bluetooth.BluetoothSocket CreateInsecureRfcommSocketToServiceRecord(Java.Util.UUID arg0)
        {
            return IExecuteWithSignature<Android.Bluetooth.BluetoothSocket>("createInsecureRfcommSocketToServiceRecord", "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createL2capChannel(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothSocket"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Android.Bluetooth.BluetoothSocket CreateL2capChannel(int arg0)
        {
            return IExecuteWithSignature<Android.Bluetooth.BluetoothSocket>("createL2capChannel", "(I)Landroid/bluetooth/BluetoothSocket;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createRfcommSocketToServiceRecord(java.util.UUID)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.UUID"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothSocket"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Android.Bluetooth.BluetoothSocket CreateRfcommSocketToServiceRecord(Java.Util.UUID arg0)
        {
            return IExecuteWithSignature<Android.Bluetooth.BluetoothSocket>("createRfcommSocketToServiceRecord", "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getUuids()"/>
        /// </summary>
        /// <returns><see cref="Android.Os.ParcelUuid"/></returns>
        public Android.Os.ParcelUuid[] GetUuids()
        {
            return IExecuteWithSignatureArray<Android.Os.ParcelUuid>("getUuids", "()[Landroid/os/ParcelUuid;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createBond()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool CreateBond()
        {
            return IExecuteWithSignature<bool>("createBond", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#fetchUuidsWithSdp()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool FetchUuidsWithSdp()
        {
            return IExecuteWithSignature<bool>("fetchUuidsWithSdp", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#setPairingConfirmation(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPairingConfirmation(bool arg0)
        {
            return IExecuteWithSignature<bool>("setPairingConfirmation", "(Z)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#setPin(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetPin(byte[] arg0)
        {
            return IExecuteWithSignature<bool>("setPin", "([B)Z", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getBondState()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetBondState()
        {
            return IExecuteWithSignature<int>("getBondState", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getType()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int GetType()
        {
            return IExecuteWithSignature<int>("getType", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#setAlias(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="int"/></returns>
        public int SetAlias(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<int>("setAlias", "(Ljava/lang/String;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getAddress()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetAddress()
        {
            return IExecuteWithSignature<Java.Lang.String>("getAddress", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getAlias()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetAlias()
        {
            return IExecuteWithSignature<Java.Lang.String>("getAlias", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String GetName()
        {
            return IExecuteWithSignature<Java.Lang.String>("getName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.5.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Bluetooth
{
    #region BluetoothHidDevice
    public partial class BluetoothHidDevice
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_INVALID_PARAM"/>
        /// </summary>
        public static byte ERROR_RSP_INVALID_PARAM { get { if (!_ERROR_RSP_INVALID_PARAMReady) { _ERROR_RSP_INVALID_PARAMContent = SGetField<byte>(LocalBridgeClazz, "ERROR_RSP_INVALID_PARAM"); _ERROR_RSP_INVALID_PARAMReady = true; } return _ERROR_RSP_INVALID_PARAMContent; } }
        private static byte _ERROR_RSP_INVALID_PARAMContent = default;
        private static bool _ERROR_RSP_INVALID_PARAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_INVALID_RPT_ID"/>
        /// </summary>
        public static byte ERROR_RSP_INVALID_RPT_ID { get { if (!_ERROR_RSP_INVALID_RPT_IDReady) { _ERROR_RSP_INVALID_RPT_IDContent = SGetField<byte>(LocalBridgeClazz, "ERROR_RSP_INVALID_RPT_ID"); _ERROR_RSP_INVALID_RPT_IDReady = true; } return _ERROR_RSP_INVALID_RPT_IDContent; } }
        private static byte _ERROR_RSP_INVALID_RPT_IDContent = default;
        private static bool _ERROR_RSP_INVALID_RPT_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_NOT_READY"/>
        /// </summary>
        public static byte ERROR_RSP_NOT_READY { get { if (!_ERROR_RSP_NOT_READYReady) { _ERROR_RSP_NOT_READYContent = SGetField<byte>(LocalBridgeClazz, "ERROR_RSP_NOT_READY"); _ERROR_RSP_NOT_READYReady = true; } return _ERROR_RSP_NOT_READYContent; } }
        private static byte _ERROR_RSP_NOT_READYContent = default;
        private static bool _ERROR_RSP_NOT_READYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_SUCCESS"/>
        /// </summary>
        public static byte ERROR_RSP_SUCCESS { get { if (!_ERROR_RSP_SUCCESSReady) { _ERROR_RSP_SUCCESSContent = SGetField<byte>(LocalBridgeClazz, "ERROR_RSP_SUCCESS"); _ERROR_RSP_SUCCESSReady = true; } return _ERROR_RSP_SUCCESSContent; } }
        private static byte _ERROR_RSP_SUCCESSContent = default;
        private static bool _ERROR_RSP_SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_UNKNOWN"/>
        /// </summary>
        public static byte ERROR_RSP_UNKNOWN { get { if (!_ERROR_RSP_UNKNOWNReady) { _ERROR_RSP_UNKNOWNContent = SGetField<byte>(LocalBridgeClazz, "ERROR_RSP_UNKNOWN"); _ERROR_RSP_UNKNOWNReady = true; } return _ERROR_RSP_UNKNOWNContent; } }
        private static byte _ERROR_RSP_UNKNOWNContent = default;
        private static bool _ERROR_RSP_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ERROR_RSP_UNSUPPORTED_REQ"/>
        /// </summary>
        public static byte ERROR_RSP_UNSUPPORTED_REQ { get { if (!_ERROR_RSP_UNSUPPORTED_REQReady) { _ERROR_RSP_UNSUPPORTED_REQContent = SGetField<byte>(LocalBridgeClazz, "ERROR_RSP_UNSUPPORTED_REQ"); _ERROR_RSP_UNSUPPORTED_REQReady = true; } return _ERROR_RSP_UNSUPPORTED_REQContent; } }
        private static byte _ERROR_RSP_UNSUPPORTED_REQContent = default;
        private static bool _ERROR_RSP_UNSUPPORTED_REQReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#PROTOCOL_BOOT_MODE"/>
        /// </summary>
        public static byte PROTOCOL_BOOT_MODE { get { if (!_PROTOCOL_BOOT_MODEReady) { _PROTOCOL_BOOT_MODEContent = SGetField<byte>(LocalBridgeClazz, "PROTOCOL_BOOT_MODE"); _PROTOCOL_BOOT_MODEReady = true; } return _PROTOCOL_BOOT_MODEContent; } }
        private static byte _PROTOCOL_BOOT_MODEContent = default;
        private static bool _PROTOCOL_BOOT_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#PROTOCOL_REPORT_MODE"/>
        /// </summary>
        public static byte PROTOCOL_REPORT_MODE { get { if (!_PROTOCOL_REPORT_MODEReady) { _PROTOCOL_REPORT_MODEContent = SGetField<byte>(LocalBridgeClazz, "PROTOCOL_REPORT_MODE"); _PROTOCOL_REPORT_MODEReady = true; } return _PROTOCOL_REPORT_MODEContent; } }
        private static byte _PROTOCOL_REPORT_MODEContent = default;
        private static bool _PROTOCOL_REPORT_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#REPORT_TYPE_FEATURE"/>
        /// </summary>
        public static byte REPORT_TYPE_FEATURE { get { if (!_REPORT_TYPE_FEATUREReady) { _REPORT_TYPE_FEATUREContent = SGetField<byte>(LocalBridgeClazz, "REPORT_TYPE_FEATURE"); _REPORT_TYPE_FEATUREReady = true; } return _REPORT_TYPE_FEATUREContent; } }
        private static byte _REPORT_TYPE_FEATUREContent = default;
        private static bool _REPORT_TYPE_FEATUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#REPORT_TYPE_INPUT"/>
        /// </summary>
        public static byte REPORT_TYPE_INPUT { get { if (!_REPORT_TYPE_INPUTReady) { _REPORT_TYPE_INPUTContent = SGetField<byte>(LocalBridgeClazz, "REPORT_TYPE_INPUT"); _REPORT_TYPE_INPUTReady = true; } return _REPORT_TYPE_INPUTContent; } }
        private static byte _REPORT_TYPE_INPUTContent = default;
        private static bool _REPORT_TYPE_INPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#REPORT_TYPE_OUTPUT"/>
        /// </summary>
        public static byte REPORT_TYPE_OUTPUT { get { if (!_REPORT_TYPE_OUTPUTReady) { _REPORT_TYPE_OUTPUTContent = SGetField<byte>(LocalBridgeClazz, "REPORT_TYPE_OUTPUT"); _REPORT_TYPE_OUTPUTReady = true; } return _REPORT_TYPE_OUTPUTContent; } }
        private static byte _REPORT_TYPE_OUTPUTContent = default;
        private static bool _REPORT_TYPE_OUTPUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS1_COMBO"/>
        /// </summary>
        public static byte SUBCLASS1_COMBO { get { if (!_SUBCLASS1_COMBOReady) { _SUBCLASS1_COMBOContent = SGetField<byte>(LocalBridgeClazz, "SUBCLASS1_COMBO"); _SUBCLASS1_COMBOReady = true; } return _SUBCLASS1_COMBOContent; } }
        private static byte _SUBCLASS1_COMBOContent = default;
        private static bool _SUBCLASS1_COMBOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS1_KEYBOARD"/>
        /// </summary>
        public static byte SUBCLASS1_KEYBOARD { get { if (!_SUBCLASS1_KEYBOARDReady) { _SUBCLASS1_KEYBOARDContent = SGetField<byte>(LocalBridgeClazz, "SUBCLASS1_KEYBOARD"); _SUBCLASS1_KEYBOARDReady = true; } return _SUBCLASS1_KEYBOARDContent; } }
        private static byte _SUBCLASS1_KEYBOARDContent = default;
        private static bool _SUBCLASS1_KEYBOARDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS1_MOUSE"/>
        /// </summary>
        public static byte SUBCLASS1_MOUSE { get { if (!_SUBCLASS1_MOUSEReady) { _SUBCLASS1_MOUSEContent = SGetField<byte>(LocalBridgeClazz, "SUBCLASS1_MOUSE"); _SUBCLASS1_MOUSEReady = true; } return _SUBCLASS1_MOUSEContent; } }
        private static byte _SUBCLASS1_MOUSEContent = default;
        private static bool _SUBCLASS1_MOUSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS1_NONE"/>
        /// </summary>
        public static byte SUBCLASS1_NONE { get { if (!_SUBCLASS1_NONEReady) { _SUBCLASS1_NONEContent = SGetField<byte>(LocalBridgeClazz, "SUBCLASS1_NONE"); _SUBCLASS1_NONEReady = true; } return _SUBCLASS1_NONEContent; } }
        private static byte _SUBCLASS1_NONEContent = default;
        private static bool _SUBCLASS1_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_CARD_READER"/>
        /// </summary>
        public static byte SUBCLASS2_CARD_READER { get { if (!_SUBCLASS2_CARD_READERReady) { _SUBCLASS2_CARD_READERContent = SGetField<byte>(LocalBridgeClazz, "SUBCLASS2_CARD_READER"); _SUBCLASS2_CARD_READERReady = true; } return _SUBCLASS2_CARD_READERContent; } }
        private static byte _SUBCLASS2_CARD_READERContent = default;
        private static bool _SUBCLASS2_CARD_READERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_DIGITIZER_TABLET"/>
        /// </summary>
        public static byte SUBCLASS2_DIGITIZER_TABLET { get { if (!_SUBCLASS2_DIGITIZER_TABLETReady) { _SUBCLASS2_DIGITIZER_TABLETContent = SGetField<byte>(LocalBridgeClazz, "SUBCLASS2_DIGITIZER_TABLET"); _SUBCLASS2_DIGITIZER_TABLETReady = true; } return _SUBCLASS2_DIGITIZER_TABLETContent; } }
        private static byte _SUBCLASS2_DIGITIZER_TABLETContent = default;
        private static bool _SUBCLASS2_DIGITIZER_TABLETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_GAMEPAD"/>
        /// </summary>
        public static byte SUBCLASS2_GAMEPAD { get { if (!_SUBCLASS2_GAMEPADReady) { _SUBCLASS2_GAMEPADContent = SGetField<byte>(LocalBridgeClazz, "SUBCLASS2_GAMEPAD"); _SUBCLASS2_GAMEPADReady = true; } return _SUBCLASS2_GAMEPADContent; } }
        private static byte _SUBCLASS2_GAMEPADContent = default;
        private static bool _SUBCLASS2_GAMEPADReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_JOYSTICK"/>
        /// </summary>
        public static byte SUBCLASS2_JOYSTICK { get { if (!_SUBCLASS2_JOYSTICKReady) { _SUBCLASS2_JOYSTICKContent = SGetField<byte>(LocalBridgeClazz, "SUBCLASS2_JOYSTICK"); _SUBCLASS2_JOYSTICKReady = true; } return _SUBCLASS2_JOYSTICKContent; } }
        private static byte _SUBCLASS2_JOYSTICKContent = default;
        private static bool _SUBCLASS2_JOYSTICKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_REMOTE_CONTROL"/>
        /// </summary>
        public static byte SUBCLASS2_REMOTE_CONTROL { get { if (!_SUBCLASS2_REMOTE_CONTROLReady) { _SUBCLASS2_REMOTE_CONTROLContent = SGetField<byte>(LocalBridgeClazz, "SUBCLASS2_REMOTE_CONTROL"); _SUBCLASS2_REMOTE_CONTROLReady = true; } return _SUBCLASS2_REMOTE_CONTROLContent; } }
        private static byte _SUBCLASS2_REMOTE_CONTROLContent = default;
        private static bool _SUBCLASS2_REMOTE_CONTROLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_SENSING_DEVICE"/>
        /// </summary>
        public static byte SUBCLASS2_SENSING_DEVICE { get { if (!_SUBCLASS2_SENSING_DEVICEReady) { _SUBCLASS2_SENSING_DEVICEContent = SGetField<byte>(LocalBridgeClazz, "SUBCLASS2_SENSING_DEVICE"); _SUBCLASS2_SENSING_DEVICEReady = true; } return _SUBCLASS2_SENSING_DEVICEContent; } }
        private static byte _SUBCLASS2_SENSING_DEVICEContent = default;
        private static bool _SUBCLASS2_SENSING_DEVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#SUBCLASS2_UNCATEGORIZED"/>
        /// </summary>
        public static byte SUBCLASS2_UNCATEGORIZED { get { if (!_SUBCLASS2_UNCATEGORIZEDReady) { _SUBCLASS2_UNCATEGORIZEDContent = SGetField<byte>(LocalBridgeClazz, "SUBCLASS2_UNCATEGORIZED"); _SUBCLASS2_UNCATEGORIZEDReady = true; } return _SUBCLASS2_UNCATEGORIZEDContent; } }
        private static byte _SUBCLASS2_UNCATEGORIZEDContent = default;
        private static bool _SUBCLASS2_UNCATEGORIZEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#ACTION_CONNECTION_STATE_CHANGED"/>
        /// </summary>
        public static Java.Lang.String ACTION_CONNECTION_STATE_CHANGED { get { if (!_ACTION_CONNECTION_STATE_CHANGEDReady) { _ACTION_CONNECTION_STATE_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CONNECTION_STATE_CHANGED"); _ACTION_CONNECTION_STATE_CHANGEDReady = true; } return _ACTION_CONNECTION_STATE_CHANGEDContent; } }
        private static Java.Lang.String _ACTION_CONNECTION_STATE_CHANGEDContent = default;
        private static bool _ACTION_CONNECTION_STATE_CHANGEDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#connect(android.bluetooth.BluetoothDevice)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Connect(Android.Bluetooth.BluetoothDevice arg0)
        {
            return IExecuteWithSignature<bool>("connect", "(Landroid/bluetooth/BluetoothDevice;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#disconnect(android.bluetooth.BluetoothDevice)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Disconnect(Android.Bluetooth.BluetoothDevice arg0)
        {
            return IExecuteWithSignature<bool>("disconnect", "(Landroid/bluetooth/BluetoothDevice;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,android.bluetooth.BluetoothHidDeviceAppQosSettings,java.util.concurrent.Executor,android.bluetooth.BluetoothHidDevice.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothHidDeviceAppSdpSettings"/></param>
        /// <param name="arg1"><see cref="Android.Bluetooth.BluetoothHidDeviceAppQosSettings"/></param>
        /// <param name="arg2"><see cref="Android.Bluetooth.BluetoothHidDeviceAppQosSettings"/></param>
        /// <param name="arg3"><see cref="Java.Util.Concurrent.Executor"/></param>
        /// <param name="arg4"><see cref="Android.Bluetooth.BluetoothHidDevice.Callback"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RegisterApp(Android.Bluetooth.BluetoothHidDeviceAppSdpSettings arg0, Android.Bluetooth.BluetoothHidDeviceAppQosSettings arg1, Android.Bluetooth.BluetoothHidDeviceAppQosSettings arg2, Java.Util.Concurrent.Executor arg3, Android.Bluetooth.BluetoothHidDevice.Callback arg4)
        {
            return IExecute<bool>("registerApp", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#replyReport(android.bluetooth.BluetoothDevice,byte,byte,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        /// <param name="arg3"><see cref="byte"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ReplyReport(Android.Bluetooth.BluetoothDevice arg0, byte arg1, byte arg2, byte[] arg3)
        {
            return IExecute<bool>("replyReport", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#reportError(android.bluetooth.BluetoothDevice,byte)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ReportError(Android.Bluetooth.BluetoothDevice arg0, byte arg1)
        {
            return IExecute<bool>("reportError", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#sendReport(android.bluetooth.BluetoothDevice,int,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SendReport(Android.Bluetooth.BluetoothDevice arg0, int arg1, byte[] arg2)
        {
            return IExecute<bool>("sendReport", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#unregisterApp()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool UnregisterApp()
        {
            return IExecuteWithSignature<bool>("unregisterApp", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#getConnectionState(android.bluetooth.BluetoothDevice)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetConnectionState(Android.Bluetooth.BluetoothDevice arg0)
        {
            return IExecuteWithSignature<int>("getConnectionState", "(Landroid/bluetooth/BluetoothDevice;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#getConnectedDevices()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Bluetooth.BluetoothDevice> GetConnectedDevices()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Bluetooth.BluetoothDevice>>("getConnectedDevices", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.html#getDevicesMatchingConnectionStates(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Bluetooth.BluetoothDevice> GetDevicesMatchingConnectionStates(int[] arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Bluetooth.BluetoothDevice>>("getDevicesMatchingConnectionStates", "([I)Ljava/util/List;", new object[] { arg0 });
        }

        #endregion

        #region Nested classes
        #region Callback
        public partial class Callback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onAppStatusChanged(android.bluetooth.BluetoothDevice,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            public void OnAppStatusChanged(Android.Bluetooth.BluetoothDevice arg0, bool arg1)
            {
                IExecute("onAppStatusChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onConnectionStateChanged(android.bluetooth.BluetoothDevice,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void OnConnectionStateChanged(Android.Bluetooth.BluetoothDevice arg0, int arg1)
            {
                IExecute("onConnectionStateChanged", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onGetReport(android.bluetooth.BluetoothDevice,byte,byte,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="byte"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            public void OnGetReport(Android.Bluetooth.BluetoothDevice arg0, byte arg1, byte arg2, int arg3)
            {
                IExecute("onGetReport", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onInterruptData(android.bluetooth.BluetoothDevice,byte,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="byte"/></param>
            public void OnInterruptData(Android.Bluetooth.BluetoothDevice arg0, byte arg1, byte[] arg2)
            {
                IExecute("onInterruptData", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onSetProtocol(android.bluetooth.BluetoothDevice,byte)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            public void OnSetProtocol(Android.Bluetooth.BluetoothDevice arg0, byte arg1)
            {
                IExecute("onSetProtocol", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onSetReport(android.bluetooth.BluetoothDevice,byte,byte,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <param name="arg2"><see cref="byte"/></param>
            /// <param name="arg3"><see cref="byte"/></param>
            public void OnSetReport(Android.Bluetooth.BluetoothDevice arg0, byte arg1, byte arg2, byte[] arg3)
            {
                IExecute("onSetReport", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothHidDevice.Callback.html#onVirtualCableUnplug(android.bluetooth.BluetoothDevice)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
            public void OnVirtualCableUnplug(Android.Bluetooth.BluetoothDevice arg0)
            {
                IExecuteWithSignature("onVirtualCableUnplug", "(Landroid/bluetooth/BluetoothDevice;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Bluetooth.Le
{
    #region ScanResult
    public partial class ScanResult
    {
        #region Constructors
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#%3Cinit%3E(android.bluetooth.BluetoothDevice,int,int,int,int,int,int,int,android.bluetooth.le.ScanRecord,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="Android.Bluetooth.Le.ScanRecord"/></param>
        /// <param name="arg9"><see cref="long"/></param>
        public ScanResult(Android.Bluetooth.BluetoothDevice arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, Android.Bluetooth.Le.ScanRecord arg8, long arg9)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#CREATOR"/>
        /// </summary>
        public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
        private static Android.Os.Parcelable.Creator _CREATORContent = default;
        private static bool _CREATORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#DATA_COMPLETE"/>
        /// </summary>
        public static int DATA_COMPLETE { get { if (!_DATA_COMPLETEReady) { _DATA_COMPLETEContent = SGetField<int>(LocalBridgeClazz, "DATA_COMPLETE"); _DATA_COMPLETEReady = true; } return _DATA_COMPLETEContent; } }
        private static int _DATA_COMPLETEContent = default;
        private static bool _DATA_COMPLETEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#DATA_TRUNCATED"/>
        /// </summary>
        public static int DATA_TRUNCATED { get { if (!_DATA_TRUNCATEDReady) { _DATA_TRUNCATEDContent = SGetField<int>(LocalBridgeClazz, "DATA_TRUNCATED"); _DATA_TRUNCATEDReady = true; } return _DATA_TRUNCATEDContent; } }
        private static int _DATA_TRUNCATEDContent = default;
        private static bool _DATA_TRUNCATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#PERIODIC_INTERVAL_NOT_PRESENT"/>
        /// </summary>
        public static int PERIODIC_INTERVAL_NOT_PRESENT { get { if (!_PERIODIC_INTERVAL_NOT_PRESENTReady) { _PERIODIC_INTERVAL_NOT_PRESENTContent = SGetField<int>(LocalBridgeClazz, "PERIODIC_INTERVAL_NOT_PRESENT"); _PERIODIC_INTERVAL_NOT_PRESENTReady = true; } return _PERIODIC_INTERVAL_NOT_PRESENTContent; } }
        private static int _PERIODIC_INTERVAL_NOT_PRESENTContent = default;
        private static bool _PERIODIC_INTERVAL_NOT_PRESENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#PHY_UNUSED"/>
        /// </summary>
        public static int PHY_UNUSED { get { if (!_PHY_UNUSEDReady) { _PHY_UNUSEDContent = SGetField<int>(LocalBridgeClazz, "PHY_UNUSED"); _PHY_UNUSEDReady = true; } return _PHY_UNUSEDContent; } }
        private static int _PHY_UNUSEDContent = default;
        private static bool _PHY_UNUSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#SID_NOT_PRESENT"/>
        /// </summary>
        public static int SID_NOT_PRESENT { get { if (!_SID_NOT_PRESENTReady) { _SID_NOT_PRESENTContent = SGetField<int>(LocalBridgeClazz, "SID_NOT_PRESENT"); _SID_NOT_PRESENTReady = true; } return _SID_NOT_PRESENTContent; } }
        private static int _SID_NOT_PRESENTContent = default;
        private static bool _SID_NOT_PRESENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#TX_POWER_NOT_PRESENT"/>
        /// </summary>
        public static int TX_POWER_NOT_PRESENT { get { if (!_TX_POWER_NOT_PRESENTReady) { _TX_POWER_NOT_PRESENTContent = SGetField<int>(LocalBridgeClazz, "TX_POWER_NOT_PRESENT"); _TX_POWER_NOT_PRESENTReady = true; } return _TX_POWER_NOT_PRESENTContent; } }
        private static int _TX_POWER_NOT_PRESENTContent = default;
        private static bool _TX_POWER_NOT_PRESENTReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getAdvertisingSid()"/> 
        /// </summary>
        public int AdvertisingSid
        {
            get { return IExecuteWithSignature<int>("getAdvertisingSid", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getDataStatus()"/> 
        /// </summary>
        public int DataStatus
        {
            get { return IExecuteWithSignature<int>("getDataStatus", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getDevice()"/> 
        /// </summary>
        public Android.Bluetooth.BluetoothDevice Device
        {
            get { return IExecuteWithSignature<Android.Bluetooth.BluetoothDevice>("getDevice", "()Landroid/bluetooth/BluetoothDevice;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getPeriodicAdvertisingInterval()"/> 
        /// </summary>
        public int PeriodicAdvertisingInterval
        {
            get { return IExecuteWithSignature<int>("getPeriodicAdvertisingInterval", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getPrimaryPhy()"/> 
        /// </summary>
        public int PrimaryPhy
        {
            get { return IExecuteWithSignature<int>("getPrimaryPhy", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getRssi()"/> 
        /// </summary>
        public int Rssi
        {
            get { return IExecuteWithSignature<int>("getRssi", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getScanRecord()"/> 
        /// </summary>
        public Android.Bluetooth.Le.ScanRecord ScanRecord
        {
            get { return IExecuteWithSignature<Android.Bluetooth.Le.ScanRecord>("getScanRecord", "()Landroid/bluetooth/le/ScanRecord;"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getSecondaryPhy()"/> 
        /// </summary>
        public int SecondaryPhy
        {
            get { return IExecuteWithSignature<int>("getSecondaryPhy", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getTimestampNanos()"/> 
        /// </summary>
        public long TimestampNanos
        {
            get { return IExecuteWithSignature<long>("getTimestampNanos", "()J"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#getTxPower()"/> 
        /// </summary>
        public int TxPower
        {
            get { return IExecuteWithSignature<int>("getTxPower", "()I"); }
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#isConnectable()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsConnectable()
        {
            return IExecuteWithSignature<bool>("isConnectable", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#isLegacy()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsLegacy()
        {
            return IExecuteWithSignature<bool>("isLegacy", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#describeContents()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DescribeContents()
        {
            return IExecuteWithSignature<int>("describeContents", "()I");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/le/ScanResult.html#writeToParcel(android.os.Parcel,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
        {
            IExecute("writeToParcel", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
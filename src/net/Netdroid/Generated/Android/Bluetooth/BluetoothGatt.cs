/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Bluetooth
{
    #region BluetoothGatt declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html"/>
    /// </summary>
    public partial class BluetoothGatt : Android.Bluetooth.BluetoothProfile
    {
        const string _bridgeClassName = "android.bluetooth.BluetoothGatt";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public BluetoothGatt() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public BluetoothGatt(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region BluetoothGatt implementation
    public partial class BluetoothGatt
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#CONNECTION_PRIORITY_BALANCED"/>
        /// </summary>
        public static int CONNECTION_PRIORITY_BALANCED { get { if (!_CONNECTION_PRIORITY_BALANCEDReady) { _CONNECTION_PRIORITY_BALANCEDContent = SGetField<int>(LocalBridgeClazz, "CONNECTION_PRIORITY_BALANCED"); _CONNECTION_PRIORITY_BALANCEDReady = true; } return _CONNECTION_PRIORITY_BALANCEDContent; } }
        private static int _CONNECTION_PRIORITY_BALANCEDContent = default;
        private static bool _CONNECTION_PRIORITY_BALANCEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#CONNECTION_PRIORITY_DCK"/>
        /// </summary>
        public static int CONNECTION_PRIORITY_DCK { get { if (!_CONNECTION_PRIORITY_DCKReady) { _CONNECTION_PRIORITY_DCKContent = SGetField<int>(LocalBridgeClazz, "CONNECTION_PRIORITY_DCK"); _CONNECTION_PRIORITY_DCKReady = true; } return _CONNECTION_PRIORITY_DCKContent; } }
        private static int _CONNECTION_PRIORITY_DCKContent = default;
        private static bool _CONNECTION_PRIORITY_DCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#CONNECTION_PRIORITY_HIGH"/>
        /// </summary>
        public static int CONNECTION_PRIORITY_HIGH { get { if (!_CONNECTION_PRIORITY_HIGHReady) { _CONNECTION_PRIORITY_HIGHContent = SGetField<int>(LocalBridgeClazz, "CONNECTION_PRIORITY_HIGH"); _CONNECTION_PRIORITY_HIGHReady = true; } return _CONNECTION_PRIORITY_HIGHContent; } }
        private static int _CONNECTION_PRIORITY_HIGHContent = default;
        private static bool _CONNECTION_PRIORITY_HIGHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#CONNECTION_PRIORITY_LOW_POWER"/>
        /// </summary>
        public static int CONNECTION_PRIORITY_LOW_POWER { get { if (!_CONNECTION_PRIORITY_LOW_POWERReady) { _CONNECTION_PRIORITY_LOW_POWERContent = SGetField<int>(LocalBridgeClazz, "CONNECTION_PRIORITY_LOW_POWER"); _CONNECTION_PRIORITY_LOW_POWERReady = true; } return _CONNECTION_PRIORITY_LOW_POWERContent; } }
        private static int _CONNECTION_PRIORITY_LOW_POWERContent = default;
        private static bool _CONNECTION_PRIORITY_LOW_POWERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_CONNECTION_CONGESTED"/>
        /// </summary>
        public static int GATT_CONNECTION_CONGESTED { get { if (!_GATT_CONNECTION_CONGESTEDReady) { _GATT_CONNECTION_CONGESTEDContent = SGetField<int>(LocalBridgeClazz, "GATT_CONNECTION_CONGESTED"); _GATT_CONNECTION_CONGESTEDReady = true; } return _GATT_CONNECTION_CONGESTEDContent; } }
        private static int _GATT_CONNECTION_CONGESTEDContent = default;
        private static bool _GATT_CONNECTION_CONGESTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_CONNECTION_TIMEOUT"/>
        /// </summary>
        public static int GATT_CONNECTION_TIMEOUT { get { if (!_GATT_CONNECTION_TIMEOUTReady) { _GATT_CONNECTION_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "GATT_CONNECTION_TIMEOUT"); _GATT_CONNECTION_TIMEOUTReady = true; } return _GATT_CONNECTION_TIMEOUTContent; } }
        private static int _GATT_CONNECTION_TIMEOUTContent = default;
        private static bool _GATT_CONNECTION_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_FAILURE"/>
        /// </summary>
        public static int GATT_FAILURE { get { if (!_GATT_FAILUREReady) { _GATT_FAILUREContent = SGetField<int>(LocalBridgeClazz, "GATT_FAILURE"); _GATT_FAILUREReady = true; } return _GATT_FAILUREContent; } }
        private static int _GATT_FAILUREContent = default;
        private static bool _GATT_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_INSUFFICIENT_AUTHENTICATION"/>
        /// </summary>
        public static int GATT_INSUFFICIENT_AUTHENTICATION { get { if (!_GATT_INSUFFICIENT_AUTHENTICATIONReady) { _GATT_INSUFFICIENT_AUTHENTICATIONContent = SGetField<int>(LocalBridgeClazz, "GATT_INSUFFICIENT_AUTHENTICATION"); _GATT_INSUFFICIENT_AUTHENTICATIONReady = true; } return _GATT_INSUFFICIENT_AUTHENTICATIONContent; } }
        private static int _GATT_INSUFFICIENT_AUTHENTICATIONContent = default;
        private static bool _GATT_INSUFFICIENT_AUTHENTICATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_INSUFFICIENT_AUTHORIZATION"/>
        /// </summary>
        public static int GATT_INSUFFICIENT_AUTHORIZATION { get { if (!_GATT_INSUFFICIENT_AUTHORIZATIONReady) { _GATT_INSUFFICIENT_AUTHORIZATIONContent = SGetField<int>(LocalBridgeClazz, "GATT_INSUFFICIENT_AUTHORIZATION"); _GATT_INSUFFICIENT_AUTHORIZATIONReady = true; } return _GATT_INSUFFICIENT_AUTHORIZATIONContent; } }
        private static int _GATT_INSUFFICIENT_AUTHORIZATIONContent = default;
        private static bool _GATT_INSUFFICIENT_AUTHORIZATIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_INSUFFICIENT_ENCRYPTION"/>
        /// </summary>
        public static int GATT_INSUFFICIENT_ENCRYPTION { get { if (!_GATT_INSUFFICIENT_ENCRYPTIONReady) { _GATT_INSUFFICIENT_ENCRYPTIONContent = SGetField<int>(LocalBridgeClazz, "GATT_INSUFFICIENT_ENCRYPTION"); _GATT_INSUFFICIENT_ENCRYPTIONReady = true; } return _GATT_INSUFFICIENT_ENCRYPTIONContent; } }
        private static int _GATT_INSUFFICIENT_ENCRYPTIONContent = default;
        private static bool _GATT_INSUFFICIENT_ENCRYPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_INVALID_ATTRIBUTE_LENGTH"/>
        /// </summary>
        public static int GATT_INVALID_ATTRIBUTE_LENGTH { get { if (!_GATT_INVALID_ATTRIBUTE_LENGTHReady) { _GATT_INVALID_ATTRIBUTE_LENGTHContent = SGetField<int>(LocalBridgeClazz, "GATT_INVALID_ATTRIBUTE_LENGTH"); _GATT_INVALID_ATTRIBUTE_LENGTHReady = true; } return _GATT_INVALID_ATTRIBUTE_LENGTHContent; } }
        private static int _GATT_INVALID_ATTRIBUTE_LENGTHContent = default;
        private static bool _GATT_INVALID_ATTRIBUTE_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_INVALID_OFFSET"/>
        /// </summary>
        public static int GATT_INVALID_OFFSET { get { if (!_GATT_INVALID_OFFSETReady) { _GATT_INVALID_OFFSETContent = SGetField<int>(LocalBridgeClazz, "GATT_INVALID_OFFSET"); _GATT_INVALID_OFFSETReady = true; } return _GATT_INVALID_OFFSETContent; } }
        private static int _GATT_INVALID_OFFSETContent = default;
        private static bool _GATT_INVALID_OFFSETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_READ_NOT_PERMITTED"/>
        /// </summary>
        public static int GATT_READ_NOT_PERMITTED { get { if (!_GATT_READ_NOT_PERMITTEDReady) { _GATT_READ_NOT_PERMITTEDContent = SGetField<int>(LocalBridgeClazz, "GATT_READ_NOT_PERMITTED"); _GATT_READ_NOT_PERMITTEDReady = true; } return _GATT_READ_NOT_PERMITTEDContent; } }
        private static int _GATT_READ_NOT_PERMITTEDContent = default;
        private static bool _GATT_READ_NOT_PERMITTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_REQUEST_NOT_SUPPORTED"/>
        /// </summary>
        public static int GATT_REQUEST_NOT_SUPPORTED { get { if (!_GATT_REQUEST_NOT_SUPPORTEDReady) { _GATT_REQUEST_NOT_SUPPORTEDContent = SGetField<int>(LocalBridgeClazz, "GATT_REQUEST_NOT_SUPPORTED"); _GATT_REQUEST_NOT_SUPPORTEDReady = true; } return _GATT_REQUEST_NOT_SUPPORTEDContent; } }
        private static int _GATT_REQUEST_NOT_SUPPORTEDContent = default;
        private static bool _GATT_REQUEST_NOT_SUPPORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_SUCCESS"/>
        /// </summary>
        public static int GATT_SUCCESS { get { if (!_GATT_SUCCESSReady) { _GATT_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "GATT_SUCCESS"); _GATT_SUCCESSReady = true; } return _GATT_SUCCESSContent; } }
        private static int _GATT_SUCCESSContent = default;
        private static bool _GATT_SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#GATT_WRITE_NOT_PERMITTED"/>
        /// </summary>
        public static int GATT_WRITE_NOT_PERMITTED { get { if (!_GATT_WRITE_NOT_PERMITTEDReady) { _GATT_WRITE_NOT_PERMITTEDContent = SGetField<int>(LocalBridgeClazz, "GATT_WRITE_NOT_PERMITTED"); _GATT_WRITE_NOT_PERMITTEDReady = true; } return _GATT_WRITE_NOT_PERMITTEDContent; } }
        private static int _GATT_WRITE_NOT_PERMITTEDContent = default;
        private static bool _GATT_WRITE_NOT_PERMITTEDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getDevice()"/>
        /// </summary>
        /// <returns><see cref="Android.Bluetooth.BluetoothDevice"/></returns>
        public Android.Bluetooth.BluetoothDevice GetDevice()
        {
            return IExecuteWithSignature<Android.Bluetooth.BluetoothDevice>("getDevice", "()Landroid/bluetooth/BluetoothDevice;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getService(java.util.UUID)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.UUID"/></param>
        /// <returns><see cref="Android.Bluetooth.BluetoothGattService"/></returns>
        public Android.Bluetooth.BluetoothGattService GetService(Java.Util.UUID arg0)
        {
            return IExecuteWithSignature<Android.Bluetooth.BluetoothGattService>("getService", "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothGattService;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#beginReliableWrite()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool BeginReliableWrite()
        {
            return IExecuteWithSignature<bool>("beginReliableWrite", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#connect()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool Connect()
        {
            return IExecuteWithSignature<bool>("connect", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#discoverServices()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool DiscoverServices()
        {
            return IExecuteWithSignature<bool>("discoverServices", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#executeReliableWrite()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool ExecuteReliableWrite()
        {
            return IExecuteWithSignature<bool>("executeReliableWrite", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#readCharacteristic(android.bluetooth.BluetoothGattCharacteristic)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothGattCharacteristic"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ReadCharacteristic(Android.Bluetooth.BluetoothGattCharacteristic arg0)
        {
            return IExecuteWithSignature<bool>("readCharacteristic", "(Landroid/bluetooth/BluetoothGattCharacteristic;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#readDescriptor(android.bluetooth.BluetoothGattDescriptor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothGattDescriptor"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ReadDescriptor(Android.Bluetooth.BluetoothGattDescriptor arg0)
        {
            return IExecuteWithSignature<bool>("readDescriptor", "(Landroid/bluetooth/BluetoothGattDescriptor;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#readRemoteRssi()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool ReadRemoteRssi()
        {
            return IExecuteWithSignature<bool>("readRemoteRssi", "()Z");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#requestConnectionPriority(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestConnectionPriority(int arg0)
        {
            return IExecuteWithSignature<bool>("requestConnectionPriority", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#requestMtu(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RequestMtu(int arg0)
        {
            return IExecuteWithSignature<bool>("requestMtu", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothGattCharacteristic"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetCharacteristicNotification(Android.Bluetooth.BluetoothGattCharacteristic arg0, bool arg1)
        {
            return IExecute<bool>("setCharacteristicNotification", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothGattCharacteristic"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool WriteCharacteristic(Android.Bluetooth.BluetoothGattCharacteristic arg0)
        {
            return IExecuteWithSignature<bool>("writeCharacteristic", "(Landroid/bluetooth/BluetoothGattCharacteristic;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#writeDescriptor(android.bluetooth.BluetoothGattDescriptor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothGattDescriptor"/></param>
        /// <returns><see cref="bool"/></returns>
        [global::System.Obsolete()]
        public bool WriteDescriptor(Android.Bluetooth.BluetoothGattDescriptor arg0)
        {
            return IExecuteWithSignature<bool>("writeDescriptor", "(Landroid/bluetooth/BluetoothGattDescriptor;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getConnectionState(android.bluetooth.BluetoothDevice)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
        /// <returns><see cref="int"/></returns>
        [global::System.Obsolete()]
        public int GetConnectionState(Android.Bluetooth.BluetoothDevice arg0)
        {
            return IExecuteWithSignature<int>("getConnectionState", "(Landroid/bluetooth/BluetoothDevice;)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic,byte[],int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothGattCharacteristic"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int WriteCharacteristic(Android.Bluetooth.BluetoothGattCharacteristic arg0, byte[] arg1, int arg2)
        {
            return IExecute<int>("writeCharacteristic", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#writeDescriptor(android.bluetooth.BluetoothGattDescriptor,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothGattDescriptor"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <returns><see cref="int"/></returns>
        public int WriteDescriptor(Android.Bluetooth.BluetoothGattDescriptor arg0, byte[] arg1)
        {
            return IExecute<int>("writeDescriptor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getConnectedDevices()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        [global::System.Obsolete()]
        public Java.Util.List<Android.Bluetooth.BluetoothDevice> GetConnectedDevices()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Bluetooth.BluetoothDevice>>("getConnectedDevices", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getDevicesMatchingConnectionStates(int[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        [global::System.Obsolete()]
        public Java.Util.List<Android.Bluetooth.BluetoothDevice> GetDevicesMatchingConnectionStates(int[] arg0)
        {
            return IExecuteWithSignature<Java.Util.List<Android.Bluetooth.BluetoothDevice>>("getDevicesMatchingConnectionStates", "([I)Ljava/util/List;", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#getServices()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Android.Bluetooth.BluetoothGattService> GetServices()
        {
            return IExecuteWithSignature<Java.Util.List<Android.Bluetooth.BluetoothGattService>>("getServices", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#abortReliableWrite()"/>
        /// </summary>
        public void AbortReliableWrite()
        {
            IExecuteWithSignature("abortReliableWrite", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#abortReliableWrite(android.bluetooth.BluetoothDevice)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Bluetooth.BluetoothDevice"/></param>
        [global::System.Obsolete()]
        public void AbortReliableWrite(Android.Bluetooth.BluetoothDevice arg0)
        {
            IExecuteWithSignature("abortReliableWrite", "(Landroid/bluetooth/BluetoothDevice;)V", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#disconnect()"/>
        /// </summary>
        public void Disconnect()
        {
            IExecuteWithSignature("disconnect", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#readPhy()"/>
        /// </summary>
        public void ReadPhy()
        {
            IExecuteWithSignature("readPhy", "()V");
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/bluetooth/BluetoothGatt.html#setPreferredPhy(int,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public void SetPreferredPhy(int arg0, int arg1, int arg2)
        {
            IExecute("setPreferredPhy", arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
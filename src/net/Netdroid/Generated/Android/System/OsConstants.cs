/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.1.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.System
{
    #region OsConstants
    public partial class OsConstants
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_2_C_BIND"/>
        /// </summary>
        public static int _SC_2_C_BIND { get { if (!__SC_2_C_BINDReady) { __SC_2_C_BINDContent = SGetField<int>(LocalBridgeClazz, "_SC_2_C_BIND"); __SC_2_C_BINDReady = true; } return __SC_2_C_BINDContent; } }
        private static int __SC_2_C_BINDContent = default;
        private static bool __SC_2_C_BINDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_2_C_DEV"/>
        /// </summary>
        public static int _SC_2_C_DEV { get { if (!__SC_2_C_DEVReady) { __SC_2_C_DEVContent = SGetField<int>(LocalBridgeClazz, "_SC_2_C_DEV"); __SC_2_C_DEVReady = true; } return __SC_2_C_DEVContent; } }
        private static int __SC_2_C_DEVContent = default;
        private static bool __SC_2_C_DEVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_2_C_VERSION"/>
        /// </summary>
        public static int _SC_2_C_VERSION { get { if (!__SC_2_C_VERSIONReady) { __SC_2_C_VERSIONContent = SGetField<int>(LocalBridgeClazz, "_SC_2_C_VERSION"); __SC_2_C_VERSIONReady = true; } return __SC_2_C_VERSIONContent; } }
        private static int __SC_2_C_VERSIONContent = default;
        private static bool __SC_2_C_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_2_CHAR_TERM"/>
        /// </summary>
        public static int _SC_2_CHAR_TERM { get { if (!__SC_2_CHAR_TERMReady) { __SC_2_CHAR_TERMContent = SGetField<int>(LocalBridgeClazz, "_SC_2_CHAR_TERM"); __SC_2_CHAR_TERMReady = true; } return __SC_2_CHAR_TERMContent; } }
        private static int __SC_2_CHAR_TERMContent = default;
        private static bool __SC_2_CHAR_TERMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_2_FORT_DEV"/>
        /// </summary>
        public static int _SC_2_FORT_DEV { get { if (!__SC_2_FORT_DEVReady) { __SC_2_FORT_DEVContent = SGetField<int>(LocalBridgeClazz, "_SC_2_FORT_DEV"); __SC_2_FORT_DEVReady = true; } return __SC_2_FORT_DEVContent; } }
        private static int __SC_2_FORT_DEVContent = default;
        private static bool __SC_2_FORT_DEVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_2_FORT_RUN"/>
        /// </summary>
        public static int _SC_2_FORT_RUN { get { if (!__SC_2_FORT_RUNReady) { __SC_2_FORT_RUNContent = SGetField<int>(LocalBridgeClazz, "_SC_2_FORT_RUN"); __SC_2_FORT_RUNReady = true; } return __SC_2_FORT_RUNContent; } }
        private static int __SC_2_FORT_RUNContent = default;
        private static bool __SC_2_FORT_RUNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_2_LOCALEDEF"/>
        /// </summary>
        public static int _SC_2_LOCALEDEF { get { if (!__SC_2_LOCALEDEFReady) { __SC_2_LOCALEDEFContent = SGetField<int>(LocalBridgeClazz, "_SC_2_LOCALEDEF"); __SC_2_LOCALEDEFReady = true; } return __SC_2_LOCALEDEFContent; } }
        private static int __SC_2_LOCALEDEFContent = default;
        private static bool __SC_2_LOCALEDEFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_2_SW_DEV"/>
        /// </summary>
        public static int _SC_2_SW_DEV { get { if (!__SC_2_SW_DEVReady) { __SC_2_SW_DEVContent = SGetField<int>(LocalBridgeClazz, "_SC_2_SW_DEV"); __SC_2_SW_DEVReady = true; } return __SC_2_SW_DEVContent; } }
        private static int __SC_2_SW_DEVContent = default;
        private static bool __SC_2_SW_DEVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_2_UPE"/>
        /// </summary>
        public static int _SC_2_UPE { get { if (!__SC_2_UPEReady) { __SC_2_UPEContent = SGetField<int>(LocalBridgeClazz, "_SC_2_UPE"); __SC_2_UPEReady = true; } return __SC_2_UPEContent; } }
        private static int __SC_2_UPEContent = default;
        private static bool __SC_2_UPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_2_VERSION"/>
        /// </summary>
        public static int _SC_2_VERSION { get { if (!__SC_2_VERSIONReady) { __SC_2_VERSIONContent = SGetField<int>(LocalBridgeClazz, "_SC_2_VERSION"); __SC_2_VERSIONReady = true; } return __SC_2_VERSIONContent; } }
        private static int __SC_2_VERSIONContent = default;
        private static bool __SC_2_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_AIO_LISTIO_MAX"/>
        /// </summary>
        public static int _SC_AIO_LISTIO_MAX { get { if (!__SC_AIO_LISTIO_MAXReady) { __SC_AIO_LISTIO_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_AIO_LISTIO_MAX"); __SC_AIO_LISTIO_MAXReady = true; } return __SC_AIO_LISTIO_MAXContent; } }
        private static int __SC_AIO_LISTIO_MAXContent = default;
        private static bool __SC_AIO_LISTIO_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_AIO_MAX"/>
        /// </summary>
        public static int _SC_AIO_MAX { get { if (!__SC_AIO_MAXReady) { __SC_AIO_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_AIO_MAX"); __SC_AIO_MAXReady = true; } return __SC_AIO_MAXContent; } }
        private static int __SC_AIO_MAXContent = default;
        private static bool __SC_AIO_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_AIO_PRIO_DELTA_MAX"/>
        /// </summary>
        public static int _SC_AIO_PRIO_DELTA_MAX { get { if (!__SC_AIO_PRIO_DELTA_MAXReady) { __SC_AIO_PRIO_DELTA_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_AIO_PRIO_DELTA_MAX"); __SC_AIO_PRIO_DELTA_MAXReady = true; } return __SC_AIO_PRIO_DELTA_MAXContent; } }
        private static int __SC_AIO_PRIO_DELTA_MAXContent = default;
        private static bool __SC_AIO_PRIO_DELTA_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_ARG_MAX"/>
        /// </summary>
        public static int _SC_ARG_MAX { get { if (!__SC_ARG_MAXReady) { __SC_ARG_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_ARG_MAX"); __SC_ARG_MAXReady = true; } return __SC_ARG_MAXContent; } }
        private static int __SC_ARG_MAXContent = default;
        private static bool __SC_ARG_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_ASYNCHRONOUS_IO"/>
        /// </summary>
        public static int _SC_ASYNCHRONOUS_IO { get { if (!__SC_ASYNCHRONOUS_IOReady) { __SC_ASYNCHRONOUS_IOContent = SGetField<int>(LocalBridgeClazz, "_SC_ASYNCHRONOUS_IO"); __SC_ASYNCHRONOUS_IOReady = true; } return __SC_ASYNCHRONOUS_IOContent; } }
        private static int __SC_ASYNCHRONOUS_IOContent = default;
        private static bool __SC_ASYNCHRONOUS_IOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_ATEXIT_MAX"/>
        /// </summary>
        public static int _SC_ATEXIT_MAX { get { if (!__SC_ATEXIT_MAXReady) { __SC_ATEXIT_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_ATEXIT_MAX"); __SC_ATEXIT_MAXReady = true; } return __SC_ATEXIT_MAXContent; } }
        private static int __SC_ATEXIT_MAXContent = default;
        private static bool __SC_ATEXIT_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_AVPHYS_PAGES"/>
        /// </summary>
        public static int _SC_AVPHYS_PAGES { get { if (!__SC_AVPHYS_PAGESReady) { __SC_AVPHYS_PAGESContent = SGetField<int>(LocalBridgeClazz, "_SC_AVPHYS_PAGES"); __SC_AVPHYS_PAGESReady = true; } return __SC_AVPHYS_PAGESContent; } }
        private static int __SC_AVPHYS_PAGESContent = default;
        private static bool __SC_AVPHYS_PAGESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_BC_BASE_MAX"/>
        /// </summary>
        public static int _SC_BC_BASE_MAX { get { if (!__SC_BC_BASE_MAXReady) { __SC_BC_BASE_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_BC_BASE_MAX"); __SC_BC_BASE_MAXReady = true; } return __SC_BC_BASE_MAXContent; } }
        private static int __SC_BC_BASE_MAXContent = default;
        private static bool __SC_BC_BASE_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_BC_DIM_MAX"/>
        /// </summary>
        public static int _SC_BC_DIM_MAX { get { if (!__SC_BC_DIM_MAXReady) { __SC_BC_DIM_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_BC_DIM_MAX"); __SC_BC_DIM_MAXReady = true; } return __SC_BC_DIM_MAXContent; } }
        private static int __SC_BC_DIM_MAXContent = default;
        private static bool __SC_BC_DIM_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_BC_SCALE_MAX"/>
        /// </summary>
        public static int _SC_BC_SCALE_MAX { get { if (!__SC_BC_SCALE_MAXReady) { __SC_BC_SCALE_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_BC_SCALE_MAX"); __SC_BC_SCALE_MAXReady = true; } return __SC_BC_SCALE_MAXContent; } }
        private static int __SC_BC_SCALE_MAXContent = default;
        private static bool __SC_BC_SCALE_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_BC_STRING_MAX"/>
        /// </summary>
        public static int _SC_BC_STRING_MAX { get { if (!__SC_BC_STRING_MAXReady) { __SC_BC_STRING_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_BC_STRING_MAX"); __SC_BC_STRING_MAXReady = true; } return __SC_BC_STRING_MAXContent; } }
        private static int __SC_BC_STRING_MAXContent = default;
        private static bool __SC_BC_STRING_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_CHILD_MAX"/>
        /// </summary>
        public static int _SC_CHILD_MAX { get { if (!__SC_CHILD_MAXReady) { __SC_CHILD_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_CHILD_MAX"); __SC_CHILD_MAXReady = true; } return __SC_CHILD_MAXContent; } }
        private static int __SC_CHILD_MAXContent = default;
        private static bool __SC_CHILD_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_CLK_TCK"/>
        /// </summary>
        public static int _SC_CLK_TCK { get { if (!__SC_CLK_TCKReady) { __SC_CLK_TCKContent = SGetField<int>(LocalBridgeClazz, "_SC_CLK_TCK"); __SC_CLK_TCKReady = true; } return __SC_CLK_TCKContent; } }
        private static int __SC_CLK_TCKContent = default;
        private static bool __SC_CLK_TCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_COLL_WEIGHTS_MAX"/>
        /// </summary>
        public static int _SC_COLL_WEIGHTS_MAX { get { if (!__SC_COLL_WEIGHTS_MAXReady) { __SC_COLL_WEIGHTS_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_COLL_WEIGHTS_MAX"); __SC_COLL_WEIGHTS_MAXReady = true; } return __SC_COLL_WEIGHTS_MAXContent; } }
        private static int __SC_COLL_WEIGHTS_MAXContent = default;
        private static bool __SC_COLL_WEIGHTS_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_DELAYTIMER_MAX"/>
        /// </summary>
        public static int _SC_DELAYTIMER_MAX { get { if (!__SC_DELAYTIMER_MAXReady) { __SC_DELAYTIMER_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_DELAYTIMER_MAX"); __SC_DELAYTIMER_MAXReady = true; } return __SC_DELAYTIMER_MAXContent; } }
        private static int __SC_DELAYTIMER_MAXContent = default;
        private static bool __SC_DELAYTIMER_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_EXPR_NEST_MAX"/>
        /// </summary>
        public static int _SC_EXPR_NEST_MAX { get { if (!__SC_EXPR_NEST_MAXReady) { __SC_EXPR_NEST_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_EXPR_NEST_MAX"); __SC_EXPR_NEST_MAXReady = true; } return __SC_EXPR_NEST_MAXContent; } }
        private static int __SC_EXPR_NEST_MAXContent = default;
        private static bool __SC_EXPR_NEST_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_FSYNC"/>
        /// </summary>
        public static int _SC_FSYNC { get { if (!__SC_FSYNCReady) { __SC_FSYNCContent = SGetField<int>(LocalBridgeClazz, "_SC_FSYNC"); __SC_FSYNCReady = true; } return __SC_FSYNCContent; } }
        private static int __SC_FSYNCContent = default;
        private static bool __SC_FSYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_GETGR_R_SIZE_MAX"/>
        /// </summary>
        public static int _SC_GETGR_R_SIZE_MAX { get { if (!__SC_GETGR_R_SIZE_MAXReady) { __SC_GETGR_R_SIZE_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_GETGR_R_SIZE_MAX"); __SC_GETGR_R_SIZE_MAXReady = true; } return __SC_GETGR_R_SIZE_MAXContent; } }
        private static int __SC_GETGR_R_SIZE_MAXContent = default;
        private static bool __SC_GETGR_R_SIZE_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_GETPW_R_SIZE_MAX"/>
        /// </summary>
        public static int _SC_GETPW_R_SIZE_MAX { get { if (!__SC_GETPW_R_SIZE_MAXReady) { __SC_GETPW_R_SIZE_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_GETPW_R_SIZE_MAX"); __SC_GETPW_R_SIZE_MAXReady = true; } return __SC_GETPW_R_SIZE_MAXContent; } }
        private static int __SC_GETPW_R_SIZE_MAXContent = default;
        private static bool __SC_GETPW_R_SIZE_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_IOV_MAX"/>
        /// </summary>
        public static int _SC_IOV_MAX { get { if (!__SC_IOV_MAXReady) { __SC_IOV_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_IOV_MAX"); __SC_IOV_MAXReady = true; } return __SC_IOV_MAXContent; } }
        private static int __SC_IOV_MAXContent = default;
        private static bool __SC_IOV_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_JOB_CONTROL"/>
        /// </summary>
        public static int _SC_JOB_CONTROL { get { if (!__SC_JOB_CONTROLReady) { __SC_JOB_CONTROLContent = SGetField<int>(LocalBridgeClazz, "_SC_JOB_CONTROL"); __SC_JOB_CONTROLReady = true; } return __SC_JOB_CONTROLContent; } }
        private static int __SC_JOB_CONTROLContent = default;
        private static bool __SC_JOB_CONTROLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_LINE_MAX"/>
        /// </summary>
        public static int _SC_LINE_MAX { get { if (!__SC_LINE_MAXReady) { __SC_LINE_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_LINE_MAX"); __SC_LINE_MAXReady = true; } return __SC_LINE_MAXContent; } }
        private static int __SC_LINE_MAXContent = default;
        private static bool __SC_LINE_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_LOGIN_NAME_MAX"/>
        /// </summary>
        public static int _SC_LOGIN_NAME_MAX { get { if (!__SC_LOGIN_NAME_MAXReady) { __SC_LOGIN_NAME_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_LOGIN_NAME_MAX"); __SC_LOGIN_NAME_MAXReady = true; } return __SC_LOGIN_NAME_MAXContent; } }
        private static int __SC_LOGIN_NAME_MAXContent = default;
        private static bool __SC_LOGIN_NAME_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_MAPPED_FILES"/>
        /// </summary>
        public static int _SC_MAPPED_FILES { get { if (!__SC_MAPPED_FILESReady) { __SC_MAPPED_FILESContent = SGetField<int>(LocalBridgeClazz, "_SC_MAPPED_FILES"); __SC_MAPPED_FILESReady = true; } return __SC_MAPPED_FILESContent; } }
        private static int __SC_MAPPED_FILESContent = default;
        private static bool __SC_MAPPED_FILESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_MEMLOCK"/>
        /// </summary>
        public static int _SC_MEMLOCK { get { if (!__SC_MEMLOCKReady) { __SC_MEMLOCKContent = SGetField<int>(LocalBridgeClazz, "_SC_MEMLOCK"); __SC_MEMLOCKReady = true; } return __SC_MEMLOCKContent; } }
        private static int __SC_MEMLOCKContent = default;
        private static bool __SC_MEMLOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_MEMLOCK_RANGE"/>
        /// </summary>
        public static int _SC_MEMLOCK_RANGE { get { if (!__SC_MEMLOCK_RANGEReady) { __SC_MEMLOCK_RANGEContent = SGetField<int>(LocalBridgeClazz, "_SC_MEMLOCK_RANGE"); __SC_MEMLOCK_RANGEReady = true; } return __SC_MEMLOCK_RANGEContent; } }
        private static int __SC_MEMLOCK_RANGEContent = default;
        private static bool __SC_MEMLOCK_RANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_MEMORY_PROTECTION"/>
        /// </summary>
        public static int _SC_MEMORY_PROTECTION { get { if (!__SC_MEMORY_PROTECTIONReady) { __SC_MEMORY_PROTECTIONContent = SGetField<int>(LocalBridgeClazz, "_SC_MEMORY_PROTECTION"); __SC_MEMORY_PROTECTIONReady = true; } return __SC_MEMORY_PROTECTIONContent; } }
        private static int __SC_MEMORY_PROTECTIONContent = default;
        private static bool __SC_MEMORY_PROTECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_MESSAGE_PASSING"/>
        /// </summary>
        public static int _SC_MESSAGE_PASSING { get { if (!__SC_MESSAGE_PASSINGReady) { __SC_MESSAGE_PASSINGContent = SGetField<int>(LocalBridgeClazz, "_SC_MESSAGE_PASSING"); __SC_MESSAGE_PASSINGReady = true; } return __SC_MESSAGE_PASSINGContent; } }
        private static int __SC_MESSAGE_PASSINGContent = default;
        private static bool __SC_MESSAGE_PASSINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_MQ_OPEN_MAX"/>
        /// </summary>
        public static int _SC_MQ_OPEN_MAX { get { if (!__SC_MQ_OPEN_MAXReady) { __SC_MQ_OPEN_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_MQ_OPEN_MAX"); __SC_MQ_OPEN_MAXReady = true; } return __SC_MQ_OPEN_MAXContent; } }
        private static int __SC_MQ_OPEN_MAXContent = default;
        private static bool __SC_MQ_OPEN_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_MQ_PRIO_MAX"/>
        /// </summary>
        public static int _SC_MQ_PRIO_MAX { get { if (!__SC_MQ_PRIO_MAXReady) { __SC_MQ_PRIO_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_MQ_PRIO_MAX"); __SC_MQ_PRIO_MAXReady = true; } return __SC_MQ_PRIO_MAXContent; } }
        private static int __SC_MQ_PRIO_MAXContent = default;
        private static bool __SC_MQ_PRIO_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_NGROUPS_MAX"/>
        /// </summary>
        public static int _SC_NGROUPS_MAX { get { if (!__SC_NGROUPS_MAXReady) { __SC_NGROUPS_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_NGROUPS_MAX"); __SC_NGROUPS_MAXReady = true; } return __SC_NGROUPS_MAXContent; } }
        private static int __SC_NGROUPS_MAXContent = default;
        private static bool __SC_NGROUPS_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_NPROCESSORS_CONF"/>
        /// </summary>
        public static int _SC_NPROCESSORS_CONF { get { if (!__SC_NPROCESSORS_CONFReady) { __SC_NPROCESSORS_CONFContent = SGetField<int>(LocalBridgeClazz, "_SC_NPROCESSORS_CONF"); __SC_NPROCESSORS_CONFReady = true; } return __SC_NPROCESSORS_CONFContent; } }
        private static int __SC_NPROCESSORS_CONFContent = default;
        private static bool __SC_NPROCESSORS_CONFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_NPROCESSORS_ONLN"/>
        /// </summary>
        public static int _SC_NPROCESSORS_ONLN { get { if (!__SC_NPROCESSORS_ONLNReady) { __SC_NPROCESSORS_ONLNContent = SGetField<int>(LocalBridgeClazz, "_SC_NPROCESSORS_ONLN"); __SC_NPROCESSORS_ONLNReady = true; } return __SC_NPROCESSORS_ONLNContent; } }
        private static int __SC_NPROCESSORS_ONLNContent = default;
        private static bool __SC_NPROCESSORS_ONLNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_OPEN_MAX"/>
        /// </summary>
        public static int _SC_OPEN_MAX { get { if (!__SC_OPEN_MAXReady) { __SC_OPEN_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_OPEN_MAX"); __SC_OPEN_MAXReady = true; } return __SC_OPEN_MAXContent; } }
        private static int __SC_OPEN_MAXContent = default;
        private static bool __SC_OPEN_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_PAGE_SIZE"/>
        /// </summary>
        public static int _SC_PAGE_SIZE { get { if (!__SC_PAGE_SIZEReady) { __SC_PAGE_SIZEContent = SGetField<int>(LocalBridgeClazz, "_SC_PAGE_SIZE"); __SC_PAGE_SIZEReady = true; } return __SC_PAGE_SIZEContent; } }
        private static int __SC_PAGE_SIZEContent = default;
        private static bool __SC_PAGE_SIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_PAGESIZE"/>
        /// </summary>
        public static int _SC_PAGESIZE { get { if (!__SC_PAGESIZEReady) { __SC_PAGESIZEContent = SGetField<int>(LocalBridgeClazz, "_SC_PAGESIZE"); __SC_PAGESIZEReady = true; } return __SC_PAGESIZEContent; } }
        private static int __SC_PAGESIZEContent = default;
        private static bool __SC_PAGESIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_PASS_MAX"/>
        /// </summary>
        public static int _SC_PASS_MAX { get { if (!__SC_PASS_MAXReady) { __SC_PASS_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_PASS_MAX"); __SC_PASS_MAXReady = true; } return __SC_PASS_MAXContent; } }
        private static int __SC_PASS_MAXContent = default;
        private static bool __SC_PASS_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_PHYS_PAGES"/>
        /// </summary>
        public static int _SC_PHYS_PAGES { get { if (!__SC_PHYS_PAGESReady) { __SC_PHYS_PAGESContent = SGetField<int>(LocalBridgeClazz, "_SC_PHYS_PAGES"); __SC_PHYS_PAGESReady = true; } return __SC_PHYS_PAGESContent; } }
        private static int __SC_PHYS_PAGESContent = default;
        private static bool __SC_PHYS_PAGESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_PRIORITIZED_IO"/>
        /// </summary>
        public static int _SC_PRIORITIZED_IO { get { if (!__SC_PRIORITIZED_IOReady) { __SC_PRIORITIZED_IOContent = SGetField<int>(LocalBridgeClazz, "_SC_PRIORITIZED_IO"); __SC_PRIORITIZED_IOReady = true; } return __SC_PRIORITIZED_IOContent; } }
        private static int __SC_PRIORITIZED_IOContent = default;
        private static bool __SC_PRIORITIZED_IOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_PRIORITY_SCHEDULING"/>
        /// </summary>
        public static int _SC_PRIORITY_SCHEDULING { get { if (!__SC_PRIORITY_SCHEDULINGReady) { __SC_PRIORITY_SCHEDULINGContent = SGetField<int>(LocalBridgeClazz, "_SC_PRIORITY_SCHEDULING"); __SC_PRIORITY_SCHEDULINGReady = true; } return __SC_PRIORITY_SCHEDULINGContent; } }
        private static int __SC_PRIORITY_SCHEDULINGContent = default;
        private static bool __SC_PRIORITY_SCHEDULINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_RE_DUP_MAX"/>
        /// </summary>
        public static int _SC_RE_DUP_MAX { get { if (!__SC_RE_DUP_MAXReady) { __SC_RE_DUP_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_RE_DUP_MAX"); __SC_RE_DUP_MAXReady = true; } return __SC_RE_DUP_MAXContent; } }
        private static int __SC_RE_DUP_MAXContent = default;
        private static bool __SC_RE_DUP_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_REALTIME_SIGNALS"/>
        /// </summary>
        public static int _SC_REALTIME_SIGNALS { get { if (!__SC_REALTIME_SIGNALSReady) { __SC_REALTIME_SIGNALSContent = SGetField<int>(LocalBridgeClazz, "_SC_REALTIME_SIGNALS"); __SC_REALTIME_SIGNALSReady = true; } return __SC_REALTIME_SIGNALSContent; } }
        private static int __SC_REALTIME_SIGNALSContent = default;
        private static bool __SC_REALTIME_SIGNALSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_RTSIG_MAX"/>
        /// </summary>
        public static int _SC_RTSIG_MAX { get { if (!__SC_RTSIG_MAXReady) { __SC_RTSIG_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_RTSIG_MAX"); __SC_RTSIG_MAXReady = true; } return __SC_RTSIG_MAXContent; } }
        private static int __SC_RTSIG_MAXContent = default;
        private static bool __SC_RTSIG_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_SAVED_IDS"/>
        /// </summary>
        public static int _SC_SAVED_IDS { get { if (!__SC_SAVED_IDSReady) { __SC_SAVED_IDSContent = SGetField<int>(LocalBridgeClazz, "_SC_SAVED_IDS"); __SC_SAVED_IDSReady = true; } return __SC_SAVED_IDSContent; } }
        private static int __SC_SAVED_IDSContent = default;
        private static bool __SC_SAVED_IDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_SEM_NSEMS_MAX"/>
        /// </summary>
        public static int _SC_SEM_NSEMS_MAX { get { if (!__SC_SEM_NSEMS_MAXReady) { __SC_SEM_NSEMS_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_SEM_NSEMS_MAX"); __SC_SEM_NSEMS_MAXReady = true; } return __SC_SEM_NSEMS_MAXContent; } }
        private static int __SC_SEM_NSEMS_MAXContent = default;
        private static bool __SC_SEM_NSEMS_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_SEM_VALUE_MAX"/>
        /// </summary>
        public static int _SC_SEM_VALUE_MAX { get { if (!__SC_SEM_VALUE_MAXReady) { __SC_SEM_VALUE_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_SEM_VALUE_MAX"); __SC_SEM_VALUE_MAXReady = true; } return __SC_SEM_VALUE_MAXContent; } }
        private static int __SC_SEM_VALUE_MAXContent = default;
        private static bool __SC_SEM_VALUE_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_SEMAPHORES"/>
        /// </summary>
        public static int _SC_SEMAPHORES { get { if (!__SC_SEMAPHORESReady) { __SC_SEMAPHORESContent = SGetField<int>(LocalBridgeClazz, "_SC_SEMAPHORES"); __SC_SEMAPHORESReady = true; } return __SC_SEMAPHORESContent; } }
        private static int __SC_SEMAPHORESContent = default;
        private static bool __SC_SEMAPHORESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_SHARED_MEMORY_OBJECTS"/>
        /// </summary>
        public static int _SC_SHARED_MEMORY_OBJECTS { get { if (!__SC_SHARED_MEMORY_OBJECTSReady) { __SC_SHARED_MEMORY_OBJECTSContent = SGetField<int>(LocalBridgeClazz, "_SC_SHARED_MEMORY_OBJECTS"); __SC_SHARED_MEMORY_OBJECTSReady = true; } return __SC_SHARED_MEMORY_OBJECTSContent; } }
        private static int __SC_SHARED_MEMORY_OBJECTSContent = default;
        private static bool __SC_SHARED_MEMORY_OBJECTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_SIGQUEUE_MAX"/>
        /// </summary>
        public static int _SC_SIGQUEUE_MAX { get { if (!__SC_SIGQUEUE_MAXReady) { __SC_SIGQUEUE_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_SIGQUEUE_MAX"); __SC_SIGQUEUE_MAXReady = true; } return __SC_SIGQUEUE_MAXContent; } }
        private static int __SC_SIGQUEUE_MAXContent = default;
        private static bool __SC_SIGQUEUE_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_STREAM_MAX"/>
        /// </summary>
        public static int _SC_STREAM_MAX { get { if (!__SC_STREAM_MAXReady) { __SC_STREAM_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_STREAM_MAX"); __SC_STREAM_MAXReady = true; } return __SC_STREAM_MAXContent; } }
        private static int __SC_STREAM_MAXContent = default;
        private static bool __SC_STREAM_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_SYNCHRONIZED_IO"/>
        /// </summary>
        public static int _SC_SYNCHRONIZED_IO { get { if (!__SC_SYNCHRONIZED_IOReady) { __SC_SYNCHRONIZED_IOContent = SGetField<int>(LocalBridgeClazz, "_SC_SYNCHRONIZED_IO"); __SC_SYNCHRONIZED_IOReady = true; } return __SC_SYNCHRONIZED_IOContent; } }
        private static int __SC_SYNCHRONIZED_IOContent = default;
        private static bool __SC_SYNCHRONIZED_IOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_THREAD_ATTR_STACKADDR"/>
        /// </summary>
        public static int _SC_THREAD_ATTR_STACKADDR { get { if (!__SC_THREAD_ATTR_STACKADDRReady) { __SC_THREAD_ATTR_STACKADDRContent = SGetField<int>(LocalBridgeClazz, "_SC_THREAD_ATTR_STACKADDR"); __SC_THREAD_ATTR_STACKADDRReady = true; } return __SC_THREAD_ATTR_STACKADDRContent; } }
        private static int __SC_THREAD_ATTR_STACKADDRContent = default;
        private static bool __SC_THREAD_ATTR_STACKADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_THREAD_ATTR_STACKSIZE"/>
        /// </summary>
        public static int _SC_THREAD_ATTR_STACKSIZE { get { if (!__SC_THREAD_ATTR_STACKSIZEReady) { __SC_THREAD_ATTR_STACKSIZEContent = SGetField<int>(LocalBridgeClazz, "_SC_THREAD_ATTR_STACKSIZE"); __SC_THREAD_ATTR_STACKSIZEReady = true; } return __SC_THREAD_ATTR_STACKSIZEContent; } }
        private static int __SC_THREAD_ATTR_STACKSIZEContent = default;
        private static bool __SC_THREAD_ATTR_STACKSIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_THREAD_DESTRUCTOR_ITERATIONS"/>
        /// </summary>
        public static int _SC_THREAD_DESTRUCTOR_ITERATIONS { get { if (!__SC_THREAD_DESTRUCTOR_ITERATIONSReady) { __SC_THREAD_DESTRUCTOR_ITERATIONSContent = SGetField<int>(LocalBridgeClazz, "_SC_THREAD_DESTRUCTOR_ITERATIONS"); __SC_THREAD_DESTRUCTOR_ITERATIONSReady = true; } return __SC_THREAD_DESTRUCTOR_ITERATIONSContent; } }
        private static int __SC_THREAD_DESTRUCTOR_ITERATIONSContent = default;
        private static bool __SC_THREAD_DESTRUCTOR_ITERATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_THREAD_KEYS_MAX"/>
        /// </summary>
        public static int _SC_THREAD_KEYS_MAX { get { if (!__SC_THREAD_KEYS_MAXReady) { __SC_THREAD_KEYS_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_THREAD_KEYS_MAX"); __SC_THREAD_KEYS_MAXReady = true; } return __SC_THREAD_KEYS_MAXContent; } }
        private static int __SC_THREAD_KEYS_MAXContent = default;
        private static bool __SC_THREAD_KEYS_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_THREAD_PRIO_INHERIT"/>
        /// </summary>
        public static int _SC_THREAD_PRIO_INHERIT { get { if (!__SC_THREAD_PRIO_INHERITReady) { __SC_THREAD_PRIO_INHERITContent = SGetField<int>(LocalBridgeClazz, "_SC_THREAD_PRIO_INHERIT"); __SC_THREAD_PRIO_INHERITReady = true; } return __SC_THREAD_PRIO_INHERITContent; } }
        private static int __SC_THREAD_PRIO_INHERITContent = default;
        private static bool __SC_THREAD_PRIO_INHERITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_THREAD_PRIO_PROTECT"/>
        /// </summary>
        public static int _SC_THREAD_PRIO_PROTECT { get { if (!__SC_THREAD_PRIO_PROTECTReady) { __SC_THREAD_PRIO_PROTECTContent = SGetField<int>(LocalBridgeClazz, "_SC_THREAD_PRIO_PROTECT"); __SC_THREAD_PRIO_PROTECTReady = true; } return __SC_THREAD_PRIO_PROTECTContent; } }
        private static int __SC_THREAD_PRIO_PROTECTContent = default;
        private static bool __SC_THREAD_PRIO_PROTECTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_THREAD_PRIORITY_SCHEDULING"/>
        /// </summary>
        public static int _SC_THREAD_PRIORITY_SCHEDULING { get { if (!__SC_THREAD_PRIORITY_SCHEDULINGReady) { __SC_THREAD_PRIORITY_SCHEDULINGContent = SGetField<int>(LocalBridgeClazz, "_SC_THREAD_PRIORITY_SCHEDULING"); __SC_THREAD_PRIORITY_SCHEDULINGReady = true; } return __SC_THREAD_PRIORITY_SCHEDULINGContent; } }
        private static int __SC_THREAD_PRIORITY_SCHEDULINGContent = default;
        private static bool __SC_THREAD_PRIORITY_SCHEDULINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_THREAD_SAFE_FUNCTIONS"/>
        /// </summary>
        public static int _SC_THREAD_SAFE_FUNCTIONS { get { if (!__SC_THREAD_SAFE_FUNCTIONSReady) { __SC_THREAD_SAFE_FUNCTIONSContent = SGetField<int>(LocalBridgeClazz, "_SC_THREAD_SAFE_FUNCTIONS"); __SC_THREAD_SAFE_FUNCTIONSReady = true; } return __SC_THREAD_SAFE_FUNCTIONSContent; } }
        private static int __SC_THREAD_SAFE_FUNCTIONSContent = default;
        private static bool __SC_THREAD_SAFE_FUNCTIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_THREAD_STACK_MIN"/>
        /// </summary>
        public static int _SC_THREAD_STACK_MIN { get { if (!__SC_THREAD_STACK_MINReady) { __SC_THREAD_STACK_MINContent = SGetField<int>(LocalBridgeClazz, "_SC_THREAD_STACK_MIN"); __SC_THREAD_STACK_MINReady = true; } return __SC_THREAD_STACK_MINContent; } }
        private static int __SC_THREAD_STACK_MINContent = default;
        private static bool __SC_THREAD_STACK_MINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_THREAD_THREADS_MAX"/>
        /// </summary>
        public static int _SC_THREAD_THREADS_MAX { get { if (!__SC_THREAD_THREADS_MAXReady) { __SC_THREAD_THREADS_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_THREAD_THREADS_MAX"); __SC_THREAD_THREADS_MAXReady = true; } return __SC_THREAD_THREADS_MAXContent; } }
        private static int __SC_THREAD_THREADS_MAXContent = default;
        private static bool __SC_THREAD_THREADS_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_THREADS"/>
        /// </summary>
        public static int _SC_THREADS { get { if (!__SC_THREADSReady) { __SC_THREADSContent = SGetField<int>(LocalBridgeClazz, "_SC_THREADS"); __SC_THREADSReady = true; } return __SC_THREADSContent; } }
        private static int __SC_THREADSContent = default;
        private static bool __SC_THREADSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_TIMER_MAX"/>
        /// </summary>
        public static int _SC_TIMER_MAX { get { if (!__SC_TIMER_MAXReady) { __SC_TIMER_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_TIMER_MAX"); __SC_TIMER_MAXReady = true; } return __SC_TIMER_MAXContent; } }
        private static int __SC_TIMER_MAXContent = default;
        private static bool __SC_TIMER_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_TIMERS"/>
        /// </summary>
        public static int _SC_TIMERS { get { if (!__SC_TIMERSReady) { __SC_TIMERSContent = SGetField<int>(LocalBridgeClazz, "_SC_TIMERS"); __SC_TIMERSReady = true; } return __SC_TIMERSContent; } }
        private static int __SC_TIMERSContent = default;
        private static bool __SC_TIMERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_TTY_NAME_MAX"/>
        /// </summary>
        public static int _SC_TTY_NAME_MAX { get { if (!__SC_TTY_NAME_MAXReady) { __SC_TTY_NAME_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_TTY_NAME_MAX"); __SC_TTY_NAME_MAXReady = true; } return __SC_TTY_NAME_MAXContent; } }
        private static int __SC_TTY_NAME_MAXContent = default;
        private static bool __SC_TTY_NAME_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_TZNAME_MAX"/>
        /// </summary>
        public static int _SC_TZNAME_MAX { get { if (!__SC_TZNAME_MAXReady) { __SC_TZNAME_MAXContent = SGetField<int>(LocalBridgeClazz, "_SC_TZNAME_MAX"); __SC_TZNAME_MAXReady = true; } return __SC_TZNAME_MAXContent; } }
        private static int __SC_TZNAME_MAXContent = default;
        private static bool __SC_TZNAME_MAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_VERSION"/>
        /// </summary>
        public static int _SC_VERSION { get { if (!__SC_VERSIONReady) { __SC_VERSIONContent = SGetField<int>(LocalBridgeClazz, "_SC_VERSION"); __SC_VERSIONReady = true; } return __SC_VERSIONContent; } }
        private static int __SC_VERSIONContent = default;
        private static bool __SC_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_XBS5_ILP32_OFF32"/>
        /// </summary>
        public static int _SC_XBS5_ILP32_OFF32 { get { if (!__SC_XBS5_ILP32_OFF32Ready) { __SC_XBS5_ILP32_OFF32Content = SGetField<int>(LocalBridgeClazz, "_SC_XBS5_ILP32_OFF32"); __SC_XBS5_ILP32_OFF32Ready = true; } return __SC_XBS5_ILP32_OFF32Content; } }
        private static int __SC_XBS5_ILP32_OFF32Content = default;
        private static bool __SC_XBS5_ILP32_OFF32Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_XBS5_ILP32_OFFBIG"/>
        /// </summary>
        public static int _SC_XBS5_ILP32_OFFBIG { get { if (!__SC_XBS5_ILP32_OFFBIGReady) { __SC_XBS5_ILP32_OFFBIGContent = SGetField<int>(LocalBridgeClazz, "_SC_XBS5_ILP32_OFFBIG"); __SC_XBS5_ILP32_OFFBIGReady = true; } return __SC_XBS5_ILP32_OFFBIGContent; } }
        private static int __SC_XBS5_ILP32_OFFBIGContent = default;
        private static bool __SC_XBS5_ILP32_OFFBIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_XBS5_LP64_OFF64"/>
        /// </summary>
        public static int _SC_XBS5_LP64_OFF64 { get { if (!__SC_XBS5_LP64_OFF64Ready) { __SC_XBS5_LP64_OFF64Content = SGetField<int>(LocalBridgeClazz, "_SC_XBS5_LP64_OFF64"); __SC_XBS5_LP64_OFF64Ready = true; } return __SC_XBS5_LP64_OFF64Content; } }
        private static int __SC_XBS5_LP64_OFF64Content = default;
        private static bool __SC_XBS5_LP64_OFF64Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_XBS5_LPBIG_OFFBIG"/>
        /// </summary>
        public static int _SC_XBS5_LPBIG_OFFBIG { get { if (!__SC_XBS5_LPBIG_OFFBIGReady) { __SC_XBS5_LPBIG_OFFBIGContent = SGetField<int>(LocalBridgeClazz, "_SC_XBS5_LPBIG_OFFBIG"); __SC_XBS5_LPBIG_OFFBIGReady = true; } return __SC_XBS5_LPBIG_OFFBIGContent; } }
        private static int __SC_XBS5_LPBIG_OFFBIGContent = default;
        private static bool __SC_XBS5_LPBIG_OFFBIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_XOPEN_CRYPT"/>
        /// </summary>
        public static int _SC_XOPEN_CRYPT { get { if (!__SC_XOPEN_CRYPTReady) { __SC_XOPEN_CRYPTContent = SGetField<int>(LocalBridgeClazz, "_SC_XOPEN_CRYPT"); __SC_XOPEN_CRYPTReady = true; } return __SC_XOPEN_CRYPTContent; } }
        private static int __SC_XOPEN_CRYPTContent = default;
        private static bool __SC_XOPEN_CRYPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_XOPEN_ENH_I18N"/>
        /// </summary>
        public static int _SC_XOPEN_ENH_I18N { get { if (!__SC_XOPEN_ENH_I18NReady) { __SC_XOPEN_ENH_I18NContent = SGetField<int>(LocalBridgeClazz, "_SC_XOPEN_ENH_I18N"); __SC_XOPEN_ENH_I18NReady = true; } return __SC_XOPEN_ENH_I18NContent; } }
        private static int __SC_XOPEN_ENH_I18NContent = default;
        private static bool __SC_XOPEN_ENH_I18NReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_XOPEN_LEGACY"/>
        /// </summary>
        public static int _SC_XOPEN_LEGACY { get { if (!__SC_XOPEN_LEGACYReady) { __SC_XOPEN_LEGACYContent = SGetField<int>(LocalBridgeClazz, "_SC_XOPEN_LEGACY"); __SC_XOPEN_LEGACYReady = true; } return __SC_XOPEN_LEGACYContent; } }
        private static int __SC_XOPEN_LEGACYContent = default;
        private static bool __SC_XOPEN_LEGACYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_XOPEN_REALTIME"/>
        /// </summary>
        public static int _SC_XOPEN_REALTIME { get { if (!__SC_XOPEN_REALTIMEReady) { __SC_XOPEN_REALTIMEContent = SGetField<int>(LocalBridgeClazz, "_SC_XOPEN_REALTIME"); __SC_XOPEN_REALTIMEReady = true; } return __SC_XOPEN_REALTIMEContent; } }
        private static int __SC_XOPEN_REALTIMEContent = default;
        private static bool __SC_XOPEN_REALTIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_XOPEN_REALTIME_THREADS"/>
        /// </summary>
        public static int _SC_XOPEN_REALTIME_THREADS { get { if (!__SC_XOPEN_REALTIME_THREADSReady) { __SC_XOPEN_REALTIME_THREADSContent = SGetField<int>(LocalBridgeClazz, "_SC_XOPEN_REALTIME_THREADS"); __SC_XOPEN_REALTIME_THREADSReady = true; } return __SC_XOPEN_REALTIME_THREADSContent; } }
        private static int __SC_XOPEN_REALTIME_THREADSContent = default;
        private static bool __SC_XOPEN_REALTIME_THREADSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_XOPEN_SHM"/>
        /// </summary>
        public static int _SC_XOPEN_SHM { get { if (!__SC_XOPEN_SHMReady) { __SC_XOPEN_SHMContent = SGetField<int>(LocalBridgeClazz, "_SC_XOPEN_SHM"); __SC_XOPEN_SHMReady = true; } return __SC_XOPEN_SHMContent; } }
        private static int __SC_XOPEN_SHMContent = default;
        private static bool __SC_XOPEN_SHMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_XOPEN_UNIX"/>
        /// </summary>
        public static int _SC_XOPEN_UNIX { get { if (!__SC_XOPEN_UNIXReady) { __SC_XOPEN_UNIXContent = SGetField<int>(LocalBridgeClazz, "_SC_XOPEN_UNIX"); __SC_XOPEN_UNIXReady = true; } return __SC_XOPEN_UNIXContent; } }
        private static int __SC_XOPEN_UNIXContent = default;
        private static bool __SC_XOPEN_UNIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_XOPEN_VERSION"/>
        /// </summary>
        public static int _SC_XOPEN_VERSION { get { if (!__SC_XOPEN_VERSIONReady) { __SC_XOPEN_VERSIONContent = SGetField<int>(LocalBridgeClazz, "_SC_XOPEN_VERSION"); __SC_XOPEN_VERSIONReady = true; } return __SC_XOPEN_VERSIONContent; } }
        private static int __SC_XOPEN_VERSIONContent = default;
        private static bool __SC_XOPEN_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#_SC_XOPEN_XCU_VERSION"/>
        /// </summary>
        public static int _SC_XOPEN_XCU_VERSION { get { if (!__SC_XOPEN_XCU_VERSIONReady) { __SC_XOPEN_XCU_VERSIONContent = SGetField<int>(LocalBridgeClazz, "_SC_XOPEN_XCU_VERSION"); __SC_XOPEN_XCU_VERSIONReady = true; } return __SC_XOPEN_XCU_VERSIONContent; } }
        private static int __SC_XOPEN_XCU_VERSIONContent = default;
        private static bool __SC_XOPEN_XCU_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#AF_INET"/>
        /// </summary>
        public static int AF_INET { get { if (!_AF_INETReady) { _AF_INETContent = SGetField<int>(LocalBridgeClazz, "AF_INET"); _AF_INETReady = true; } return _AF_INETContent; } }
        private static int _AF_INETContent = default;
        private static bool _AF_INETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#AF_INET6"/>
        /// </summary>
        public static int AF_INET6 { get { if (!_AF_INET6Ready) { _AF_INET6Content = SGetField<int>(LocalBridgeClazz, "AF_INET6"); _AF_INET6Ready = true; } return _AF_INET6Content; } }
        private static int _AF_INET6Content = default;
        private static bool _AF_INET6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#AF_NETLINK"/>
        /// </summary>
        public static int AF_NETLINK { get { if (!_AF_NETLINKReady) { _AF_NETLINKContent = SGetField<int>(LocalBridgeClazz, "AF_NETLINK"); _AF_NETLINKReady = true; } return _AF_NETLINKContent; } }
        private static int _AF_NETLINKContent = default;
        private static bool _AF_NETLINKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#AF_PACKET"/>
        /// </summary>
        public static int AF_PACKET { get { if (!_AF_PACKETReady) { _AF_PACKETContent = SGetField<int>(LocalBridgeClazz, "AF_PACKET"); _AF_PACKETReady = true; } return _AF_PACKETContent; } }
        private static int _AF_PACKETContent = default;
        private static bool _AF_PACKETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#AF_UNIX"/>
        /// </summary>
        public static int AF_UNIX { get { if (!_AF_UNIXReady) { _AF_UNIXContent = SGetField<int>(LocalBridgeClazz, "AF_UNIX"); _AF_UNIXReady = true; } return _AF_UNIXContent; } }
        private static int _AF_UNIXContent = default;
        private static bool _AF_UNIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#AF_UNSPEC"/>
        /// </summary>
        public static int AF_UNSPEC { get { if (!_AF_UNSPECReady) { _AF_UNSPECContent = SGetField<int>(LocalBridgeClazz, "AF_UNSPEC"); _AF_UNSPECReady = true; } return _AF_UNSPECContent; } }
        private static int _AF_UNSPECContent = default;
        private static bool _AF_UNSPECReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#AF_VSOCK"/>
        /// </summary>
        public static int AF_VSOCK { get { if (!_AF_VSOCKReady) { _AF_VSOCKContent = SGetField<int>(LocalBridgeClazz, "AF_VSOCK"); _AF_VSOCKReady = true; } return _AF_VSOCKContent; } }
        private static int _AF_VSOCKContent = default;
        private static bool _AF_VSOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#AI_ADDRCONFIG"/>
        /// </summary>
        public static int AI_ADDRCONFIG { get { if (!_AI_ADDRCONFIGReady) { _AI_ADDRCONFIGContent = SGetField<int>(LocalBridgeClazz, "AI_ADDRCONFIG"); _AI_ADDRCONFIGReady = true; } return _AI_ADDRCONFIGContent; } }
        private static int _AI_ADDRCONFIGContent = default;
        private static bool _AI_ADDRCONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#AI_ALL"/>
        /// </summary>
        public static int AI_ALL { get { if (!_AI_ALLReady) { _AI_ALLContent = SGetField<int>(LocalBridgeClazz, "AI_ALL"); _AI_ALLReady = true; } return _AI_ALLContent; } }
        private static int _AI_ALLContent = default;
        private static bool _AI_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#AI_CANONNAME"/>
        /// </summary>
        public static int AI_CANONNAME { get { if (!_AI_CANONNAMEReady) { _AI_CANONNAMEContent = SGetField<int>(LocalBridgeClazz, "AI_CANONNAME"); _AI_CANONNAMEReady = true; } return _AI_CANONNAMEContent; } }
        private static int _AI_CANONNAMEContent = default;
        private static bool _AI_CANONNAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#AI_NUMERICHOST"/>
        /// </summary>
        public static int AI_NUMERICHOST { get { if (!_AI_NUMERICHOSTReady) { _AI_NUMERICHOSTContent = SGetField<int>(LocalBridgeClazz, "AI_NUMERICHOST"); _AI_NUMERICHOSTReady = true; } return _AI_NUMERICHOSTContent; } }
        private static int _AI_NUMERICHOSTContent = default;
        private static bool _AI_NUMERICHOSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#AI_NUMERICSERV"/>
        /// </summary>
        public static int AI_NUMERICSERV { get { if (!_AI_NUMERICSERVReady) { _AI_NUMERICSERVContent = SGetField<int>(LocalBridgeClazz, "AI_NUMERICSERV"); _AI_NUMERICSERVReady = true; } return _AI_NUMERICSERVContent; } }
        private static int _AI_NUMERICSERVContent = default;
        private static bool _AI_NUMERICSERVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#AI_PASSIVE"/>
        /// </summary>
        public static int AI_PASSIVE { get { if (!_AI_PASSIVEReady) { _AI_PASSIVEContent = SGetField<int>(LocalBridgeClazz, "AI_PASSIVE"); _AI_PASSIVEReady = true; } return _AI_PASSIVEContent; } }
        private static int _AI_PASSIVEContent = default;
        private static bool _AI_PASSIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#AI_V4MAPPED"/>
        /// </summary>
        public static int AI_V4MAPPED { get { if (!_AI_V4MAPPEDReady) { _AI_V4MAPPEDContent = SGetField<int>(LocalBridgeClazz, "AI_V4MAPPED"); _AI_V4MAPPEDReady = true; } return _AI_V4MAPPEDContent; } }
        private static int _AI_V4MAPPEDContent = default;
        private static bool _AI_V4MAPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ARPHRD_ETHER"/>
        /// </summary>
        public static int ARPHRD_ETHER { get { if (!_ARPHRD_ETHERReady) { _ARPHRD_ETHERContent = SGetField<int>(LocalBridgeClazz, "ARPHRD_ETHER"); _ARPHRD_ETHERReady = true; } return _ARPHRD_ETHERContent; } }
        private static int _ARPHRD_ETHERContent = default;
        private static bool _ARPHRD_ETHERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_AUDIT_CONTROL"/>
        /// </summary>
        public static int CAP_AUDIT_CONTROL { get { if (!_CAP_AUDIT_CONTROLReady) { _CAP_AUDIT_CONTROLContent = SGetField<int>(LocalBridgeClazz, "CAP_AUDIT_CONTROL"); _CAP_AUDIT_CONTROLReady = true; } return _CAP_AUDIT_CONTROLContent; } }
        private static int _CAP_AUDIT_CONTROLContent = default;
        private static bool _CAP_AUDIT_CONTROLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_AUDIT_WRITE"/>
        /// </summary>
        public static int CAP_AUDIT_WRITE { get { if (!_CAP_AUDIT_WRITEReady) { _CAP_AUDIT_WRITEContent = SGetField<int>(LocalBridgeClazz, "CAP_AUDIT_WRITE"); _CAP_AUDIT_WRITEReady = true; } return _CAP_AUDIT_WRITEContent; } }
        private static int _CAP_AUDIT_WRITEContent = default;
        private static bool _CAP_AUDIT_WRITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_BLOCK_SUSPEND"/>
        /// </summary>
        public static int CAP_BLOCK_SUSPEND { get { if (!_CAP_BLOCK_SUSPENDReady) { _CAP_BLOCK_SUSPENDContent = SGetField<int>(LocalBridgeClazz, "CAP_BLOCK_SUSPEND"); _CAP_BLOCK_SUSPENDReady = true; } return _CAP_BLOCK_SUSPENDContent; } }
        private static int _CAP_BLOCK_SUSPENDContent = default;
        private static bool _CAP_BLOCK_SUSPENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_CHOWN"/>
        /// </summary>
        public static int CAP_CHOWN { get { if (!_CAP_CHOWNReady) { _CAP_CHOWNContent = SGetField<int>(LocalBridgeClazz, "CAP_CHOWN"); _CAP_CHOWNReady = true; } return _CAP_CHOWNContent; } }
        private static int _CAP_CHOWNContent = default;
        private static bool _CAP_CHOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_DAC_OVERRIDE"/>
        /// </summary>
        public static int CAP_DAC_OVERRIDE { get { if (!_CAP_DAC_OVERRIDEReady) { _CAP_DAC_OVERRIDEContent = SGetField<int>(LocalBridgeClazz, "CAP_DAC_OVERRIDE"); _CAP_DAC_OVERRIDEReady = true; } return _CAP_DAC_OVERRIDEContent; } }
        private static int _CAP_DAC_OVERRIDEContent = default;
        private static bool _CAP_DAC_OVERRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_DAC_READ_SEARCH"/>
        /// </summary>
        public static int CAP_DAC_READ_SEARCH { get { if (!_CAP_DAC_READ_SEARCHReady) { _CAP_DAC_READ_SEARCHContent = SGetField<int>(LocalBridgeClazz, "CAP_DAC_READ_SEARCH"); _CAP_DAC_READ_SEARCHReady = true; } return _CAP_DAC_READ_SEARCHContent; } }
        private static int _CAP_DAC_READ_SEARCHContent = default;
        private static bool _CAP_DAC_READ_SEARCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_FOWNER"/>
        /// </summary>
        public static int CAP_FOWNER { get { if (!_CAP_FOWNERReady) { _CAP_FOWNERContent = SGetField<int>(LocalBridgeClazz, "CAP_FOWNER"); _CAP_FOWNERReady = true; } return _CAP_FOWNERContent; } }
        private static int _CAP_FOWNERContent = default;
        private static bool _CAP_FOWNERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_FSETID"/>
        /// </summary>
        public static int CAP_FSETID { get { if (!_CAP_FSETIDReady) { _CAP_FSETIDContent = SGetField<int>(LocalBridgeClazz, "CAP_FSETID"); _CAP_FSETIDReady = true; } return _CAP_FSETIDContent; } }
        private static int _CAP_FSETIDContent = default;
        private static bool _CAP_FSETIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_IPC_LOCK"/>
        /// </summary>
        public static int CAP_IPC_LOCK { get { if (!_CAP_IPC_LOCKReady) { _CAP_IPC_LOCKContent = SGetField<int>(LocalBridgeClazz, "CAP_IPC_LOCK"); _CAP_IPC_LOCKReady = true; } return _CAP_IPC_LOCKContent; } }
        private static int _CAP_IPC_LOCKContent = default;
        private static bool _CAP_IPC_LOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_IPC_OWNER"/>
        /// </summary>
        public static int CAP_IPC_OWNER { get { if (!_CAP_IPC_OWNERReady) { _CAP_IPC_OWNERContent = SGetField<int>(LocalBridgeClazz, "CAP_IPC_OWNER"); _CAP_IPC_OWNERReady = true; } return _CAP_IPC_OWNERContent; } }
        private static int _CAP_IPC_OWNERContent = default;
        private static bool _CAP_IPC_OWNERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_KILL"/>
        /// </summary>
        public static int CAP_KILL { get { if (!_CAP_KILLReady) { _CAP_KILLContent = SGetField<int>(LocalBridgeClazz, "CAP_KILL"); _CAP_KILLReady = true; } return _CAP_KILLContent; } }
        private static int _CAP_KILLContent = default;
        private static bool _CAP_KILLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_LAST_CAP"/>
        /// </summary>
        public static int CAP_LAST_CAP { get { if (!_CAP_LAST_CAPReady) { _CAP_LAST_CAPContent = SGetField<int>(LocalBridgeClazz, "CAP_LAST_CAP"); _CAP_LAST_CAPReady = true; } return _CAP_LAST_CAPContent; } }
        private static int _CAP_LAST_CAPContent = default;
        private static bool _CAP_LAST_CAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_LEASE"/>
        /// </summary>
        public static int CAP_LEASE { get { if (!_CAP_LEASEReady) { _CAP_LEASEContent = SGetField<int>(LocalBridgeClazz, "CAP_LEASE"); _CAP_LEASEReady = true; } return _CAP_LEASEContent; } }
        private static int _CAP_LEASEContent = default;
        private static bool _CAP_LEASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_LINUX_IMMUTABLE"/>
        /// </summary>
        public static int CAP_LINUX_IMMUTABLE { get { if (!_CAP_LINUX_IMMUTABLEReady) { _CAP_LINUX_IMMUTABLEContent = SGetField<int>(LocalBridgeClazz, "CAP_LINUX_IMMUTABLE"); _CAP_LINUX_IMMUTABLEReady = true; } return _CAP_LINUX_IMMUTABLEContent; } }
        private static int _CAP_LINUX_IMMUTABLEContent = default;
        private static bool _CAP_LINUX_IMMUTABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_MAC_ADMIN"/>
        /// </summary>
        public static int CAP_MAC_ADMIN { get { if (!_CAP_MAC_ADMINReady) { _CAP_MAC_ADMINContent = SGetField<int>(LocalBridgeClazz, "CAP_MAC_ADMIN"); _CAP_MAC_ADMINReady = true; } return _CAP_MAC_ADMINContent; } }
        private static int _CAP_MAC_ADMINContent = default;
        private static bool _CAP_MAC_ADMINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_MAC_OVERRIDE"/>
        /// </summary>
        public static int CAP_MAC_OVERRIDE { get { if (!_CAP_MAC_OVERRIDEReady) { _CAP_MAC_OVERRIDEContent = SGetField<int>(LocalBridgeClazz, "CAP_MAC_OVERRIDE"); _CAP_MAC_OVERRIDEReady = true; } return _CAP_MAC_OVERRIDEContent; } }
        private static int _CAP_MAC_OVERRIDEContent = default;
        private static bool _CAP_MAC_OVERRIDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_MKNOD"/>
        /// </summary>
        public static int CAP_MKNOD { get { if (!_CAP_MKNODReady) { _CAP_MKNODContent = SGetField<int>(LocalBridgeClazz, "CAP_MKNOD"); _CAP_MKNODReady = true; } return _CAP_MKNODContent; } }
        private static int _CAP_MKNODContent = default;
        private static bool _CAP_MKNODReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_NET_ADMIN"/>
        /// </summary>
        public static int CAP_NET_ADMIN { get { if (!_CAP_NET_ADMINReady) { _CAP_NET_ADMINContent = SGetField<int>(LocalBridgeClazz, "CAP_NET_ADMIN"); _CAP_NET_ADMINReady = true; } return _CAP_NET_ADMINContent; } }
        private static int _CAP_NET_ADMINContent = default;
        private static bool _CAP_NET_ADMINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_NET_BIND_SERVICE"/>
        /// </summary>
        public static int CAP_NET_BIND_SERVICE { get { if (!_CAP_NET_BIND_SERVICEReady) { _CAP_NET_BIND_SERVICEContent = SGetField<int>(LocalBridgeClazz, "CAP_NET_BIND_SERVICE"); _CAP_NET_BIND_SERVICEReady = true; } return _CAP_NET_BIND_SERVICEContent; } }
        private static int _CAP_NET_BIND_SERVICEContent = default;
        private static bool _CAP_NET_BIND_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_NET_BROADCAST"/>
        /// </summary>
        public static int CAP_NET_BROADCAST { get { if (!_CAP_NET_BROADCASTReady) { _CAP_NET_BROADCASTContent = SGetField<int>(LocalBridgeClazz, "CAP_NET_BROADCAST"); _CAP_NET_BROADCASTReady = true; } return _CAP_NET_BROADCASTContent; } }
        private static int _CAP_NET_BROADCASTContent = default;
        private static bool _CAP_NET_BROADCASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_NET_RAW"/>
        /// </summary>
        public static int CAP_NET_RAW { get { if (!_CAP_NET_RAWReady) { _CAP_NET_RAWContent = SGetField<int>(LocalBridgeClazz, "CAP_NET_RAW"); _CAP_NET_RAWReady = true; } return _CAP_NET_RAWContent; } }
        private static int _CAP_NET_RAWContent = default;
        private static bool _CAP_NET_RAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_SETFCAP"/>
        /// </summary>
        public static int CAP_SETFCAP { get { if (!_CAP_SETFCAPReady) { _CAP_SETFCAPContent = SGetField<int>(LocalBridgeClazz, "CAP_SETFCAP"); _CAP_SETFCAPReady = true; } return _CAP_SETFCAPContent; } }
        private static int _CAP_SETFCAPContent = default;
        private static bool _CAP_SETFCAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_SETGID"/>
        /// </summary>
        public static int CAP_SETGID { get { if (!_CAP_SETGIDReady) { _CAP_SETGIDContent = SGetField<int>(LocalBridgeClazz, "CAP_SETGID"); _CAP_SETGIDReady = true; } return _CAP_SETGIDContent; } }
        private static int _CAP_SETGIDContent = default;
        private static bool _CAP_SETGIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_SETPCAP"/>
        /// </summary>
        public static int CAP_SETPCAP { get { if (!_CAP_SETPCAPReady) { _CAP_SETPCAPContent = SGetField<int>(LocalBridgeClazz, "CAP_SETPCAP"); _CAP_SETPCAPReady = true; } return _CAP_SETPCAPContent; } }
        private static int _CAP_SETPCAPContent = default;
        private static bool _CAP_SETPCAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_SETUID"/>
        /// </summary>
        public static int CAP_SETUID { get { if (!_CAP_SETUIDReady) { _CAP_SETUIDContent = SGetField<int>(LocalBridgeClazz, "CAP_SETUID"); _CAP_SETUIDReady = true; } return _CAP_SETUIDContent; } }
        private static int _CAP_SETUIDContent = default;
        private static bool _CAP_SETUIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_SYS_ADMIN"/>
        /// </summary>
        public static int CAP_SYS_ADMIN { get { if (!_CAP_SYS_ADMINReady) { _CAP_SYS_ADMINContent = SGetField<int>(LocalBridgeClazz, "CAP_SYS_ADMIN"); _CAP_SYS_ADMINReady = true; } return _CAP_SYS_ADMINContent; } }
        private static int _CAP_SYS_ADMINContent = default;
        private static bool _CAP_SYS_ADMINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_SYS_BOOT"/>
        /// </summary>
        public static int CAP_SYS_BOOT { get { if (!_CAP_SYS_BOOTReady) { _CAP_SYS_BOOTContent = SGetField<int>(LocalBridgeClazz, "CAP_SYS_BOOT"); _CAP_SYS_BOOTReady = true; } return _CAP_SYS_BOOTContent; } }
        private static int _CAP_SYS_BOOTContent = default;
        private static bool _CAP_SYS_BOOTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_SYS_CHROOT"/>
        /// </summary>
        public static int CAP_SYS_CHROOT { get { if (!_CAP_SYS_CHROOTReady) { _CAP_SYS_CHROOTContent = SGetField<int>(LocalBridgeClazz, "CAP_SYS_CHROOT"); _CAP_SYS_CHROOTReady = true; } return _CAP_SYS_CHROOTContent; } }
        private static int _CAP_SYS_CHROOTContent = default;
        private static bool _CAP_SYS_CHROOTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_SYS_MODULE"/>
        /// </summary>
        public static int CAP_SYS_MODULE { get { if (!_CAP_SYS_MODULEReady) { _CAP_SYS_MODULEContent = SGetField<int>(LocalBridgeClazz, "CAP_SYS_MODULE"); _CAP_SYS_MODULEReady = true; } return _CAP_SYS_MODULEContent; } }
        private static int _CAP_SYS_MODULEContent = default;
        private static bool _CAP_SYS_MODULEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_SYS_NICE"/>
        /// </summary>
        public static int CAP_SYS_NICE { get { if (!_CAP_SYS_NICEReady) { _CAP_SYS_NICEContent = SGetField<int>(LocalBridgeClazz, "CAP_SYS_NICE"); _CAP_SYS_NICEReady = true; } return _CAP_SYS_NICEContent; } }
        private static int _CAP_SYS_NICEContent = default;
        private static bool _CAP_SYS_NICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_SYS_PACCT"/>
        /// </summary>
        public static int CAP_SYS_PACCT { get { if (!_CAP_SYS_PACCTReady) { _CAP_SYS_PACCTContent = SGetField<int>(LocalBridgeClazz, "CAP_SYS_PACCT"); _CAP_SYS_PACCTReady = true; } return _CAP_SYS_PACCTContent; } }
        private static int _CAP_SYS_PACCTContent = default;
        private static bool _CAP_SYS_PACCTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_SYS_PTRACE"/>
        /// </summary>
        public static int CAP_SYS_PTRACE { get { if (!_CAP_SYS_PTRACEReady) { _CAP_SYS_PTRACEContent = SGetField<int>(LocalBridgeClazz, "CAP_SYS_PTRACE"); _CAP_SYS_PTRACEReady = true; } return _CAP_SYS_PTRACEContent; } }
        private static int _CAP_SYS_PTRACEContent = default;
        private static bool _CAP_SYS_PTRACEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_SYS_RAWIO"/>
        /// </summary>
        public static int CAP_SYS_RAWIO { get { if (!_CAP_SYS_RAWIOReady) { _CAP_SYS_RAWIOContent = SGetField<int>(LocalBridgeClazz, "CAP_SYS_RAWIO"); _CAP_SYS_RAWIOReady = true; } return _CAP_SYS_RAWIOContent; } }
        private static int _CAP_SYS_RAWIOContent = default;
        private static bool _CAP_SYS_RAWIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_SYS_RESOURCE"/>
        /// </summary>
        public static int CAP_SYS_RESOURCE { get { if (!_CAP_SYS_RESOURCEReady) { _CAP_SYS_RESOURCEContent = SGetField<int>(LocalBridgeClazz, "CAP_SYS_RESOURCE"); _CAP_SYS_RESOURCEReady = true; } return _CAP_SYS_RESOURCEContent; } }
        private static int _CAP_SYS_RESOURCEContent = default;
        private static bool _CAP_SYS_RESOURCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_SYS_TIME"/>
        /// </summary>
        public static int CAP_SYS_TIME { get { if (!_CAP_SYS_TIMEReady) { _CAP_SYS_TIMEContent = SGetField<int>(LocalBridgeClazz, "CAP_SYS_TIME"); _CAP_SYS_TIMEReady = true; } return _CAP_SYS_TIMEContent; } }
        private static int _CAP_SYS_TIMEContent = default;
        private static bool _CAP_SYS_TIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_SYS_TTY_CONFIG"/>
        /// </summary>
        public static int CAP_SYS_TTY_CONFIG { get { if (!_CAP_SYS_TTY_CONFIGReady) { _CAP_SYS_TTY_CONFIGContent = SGetField<int>(LocalBridgeClazz, "CAP_SYS_TTY_CONFIG"); _CAP_SYS_TTY_CONFIGReady = true; } return _CAP_SYS_TTY_CONFIGContent; } }
        private static int _CAP_SYS_TTY_CONFIGContent = default;
        private static bool _CAP_SYS_TTY_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_SYSLOG"/>
        /// </summary>
        public static int CAP_SYSLOG { get { if (!_CAP_SYSLOGReady) { _CAP_SYSLOGContent = SGetField<int>(LocalBridgeClazz, "CAP_SYSLOG"); _CAP_SYSLOGReady = true; } return _CAP_SYSLOGContent; } }
        private static int _CAP_SYSLOGContent = default;
        private static bool _CAP_SYSLOGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#CAP_WAKE_ALARM"/>
        /// </summary>
        public static int CAP_WAKE_ALARM { get { if (!_CAP_WAKE_ALARMReady) { _CAP_WAKE_ALARMContent = SGetField<int>(LocalBridgeClazz, "CAP_WAKE_ALARM"); _CAP_WAKE_ALARMReady = true; } return _CAP_WAKE_ALARMContent; } }
        private static int _CAP_WAKE_ALARMContent = default;
        private static bool _CAP_WAKE_ALARMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#E2BIG"/>
        /// </summary>
        public static int E2BIG { get { if (!_E2BIGReady) { _E2BIGContent = SGetField<int>(LocalBridgeClazz, "E2BIG"); _E2BIGReady = true; } return _E2BIGContent; } }
        private static int _E2BIGContent = default;
        private static bool _E2BIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EACCES"/>
        /// </summary>
        public static int EACCES { get { if (!_EACCESReady) { _EACCESContent = SGetField<int>(LocalBridgeClazz, "EACCES"); _EACCESReady = true; } return _EACCESContent; } }
        private static int _EACCESContent = default;
        private static bool _EACCESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EADDRINUSE"/>
        /// </summary>
        public static int EADDRINUSE { get { if (!_EADDRINUSEReady) { _EADDRINUSEContent = SGetField<int>(LocalBridgeClazz, "EADDRINUSE"); _EADDRINUSEReady = true; } return _EADDRINUSEContent; } }
        private static int _EADDRINUSEContent = default;
        private static bool _EADDRINUSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EADDRNOTAVAIL"/>
        /// </summary>
        public static int EADDRNOTAVAIL { get { if (!_EADDRNOTAVAILReady) { _EADDRNOTAVAILContent = SGetField<int>(LocalBridgeClazz, "EADDRNOTAVAIL"); _EADDRNOTAVAILReady = true; } return _EADDRNOTAVAILContent; } }
        private static int _EADDRNOTAVAILContent = default;
        private static bool _EADDRNOTAVAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EAFNOSUPPORT"/>
        /// </summary>
        public static int EAFNOSUPPORT { get { if (!_EAFNOSUPPORTReady) { _EAFNOSUPPORTContent = SGetField<int>(LocalBridgeClazz, "EAFNOSUPPORT"); _EAFNOSUPPORTReady = true; } return _EAFNOSUPPORTContent; } }
        private static int _EAFNOSUPPORTContent = default;
        private static bool _EAFNOSUPPORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EAGAIN"/>
        /// </summary>
        public static int EAGAIN { get { if (!_EAGAINReady) { _EAGAINContent = SGetField<int>(LocalBridgeClazz, "EAGAIN"); _EAGAINReady = true; } return _EAGAINContent; } }
        private static int _EAGAINContent = default;
        private static bool _EAGAINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EAI_AGAIN"/>
        /// </summary>
        public static int EAI_AGAIN { get { if (!_EAI_AGAINReady) { _EAI_AGAINContent = SGetField<int>(LocalBridgeClazz, "EAI_AGAIN"); _EAI_AGAINReady = true; } return _EAI_AGAINContent; } }
        private static int _EAI_AGAINContent = default;
        private static bool _EAI_AGAINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EAI_BADFLAGS"/>
        /// </summary>
        public static int EAI_BADFLAGS { get { if (!_EAI_BADFLAGSReady) { _EAI_BADFLAGSContent = SGetField<int>(LocalBridgeClazz, "EAI_BADFLAGS"); _EAI_BADFLAGSReady = true; } return _EAI_BADFLAGSContent; } }
        private static int _EAI_BADFLAGSContent = default;
        private static bool _EAI_BADFLAGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EAI_FAIL"/>
        /// </summary>
        public static int EAI_FAIL { get { if (!_EAI_FAILReady) { _EAI_FAILContent = SGetField<int>(LocalBridgeClazz, "EAI_FAIL"); _EAI_FAILReady = true; } return _EAI_FAILContent; } }
        private static int _EAI_FAILContent = default;
        private static bool _EAI_FAILReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EAI_FAMILY"/>
        /// </summary>
        public static int EAI_FAMILY { get { if (!_EAI_FAMILYReady) { _EAI_FAMILYContent = SGetField<int>(LocalBridgeClazz, "EAI_FAMILY"); _EAI_FAMILYReady = true; } return _EAI_FAMILYContent; } }
        private static int _EAI_FAMILYContent = default;
        private static bool _EAI_FAMILYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EAI_MEMORY"/>
        /// </summary>
        public static int EAI_MEMORY { get { if (!_EAI_MEMORYReady) { _EAI_MEMORYContent = SGetField<int>(LocalBridgeClazz, "EAI_MEMORY"); _EAI_MEMORYReady = true; } return _EAI_MEMORYContent; } }
        private static int _EAI_MEMORYContent = default;
        private static bool _EAI_MEMORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EAI_NODATA"/>
        /// </summary>
        public static int EAI_NODATA { get { if (!_EAI_NODATAReady) { _EAI_NODATAContent = SGetField<int>(LocalBridgeClazz, "EAI_NODATA"); _EAI_NODATAReady = true; } return _EAI_NODATAContent; } }
        private static int _EAI_NODATAContent = default;
        private static bool _EAI_NODATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EAI_NONAME"/>
        /// </summary>
        public static int EAI_NONAME { get { if (!_EAI_NONAMEReady) { _EAI_NONAMEContent = SGetField<int>(LocalBridgeClazz, "EAI_NONAME"); _EAI_NONAMEReady = true; } return _EAI_NONAMEContent; } }
        private static int _EAI_NONAMEContent = default;
        private static bool _EAI_NONAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EAI_OVERFLOW"/>
        /// </summary>
        public static int EAI_OVERFLOW { get { if (!_EAI_OVERFLOWReady) { _EAI_OVERFLOWContent = SGetField<int>(LocalBridgeClazz, "EAI_OVERFLOW"); _EAI_OVERFLOWReady = true; } return _EAI_OVERFLOWContent; } }
        private static int _EAI_OVERFLOWContent = default;
        private static bool _EAI_OVERFLOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EAI_SERVICE"/>
        /// </summary>
        public static int EAI_SERVICE { get { if (!_EAI_SERVICEReady) { _EAI_SERVICEContent = SGetField<int>(LocalBridgeClazz, "EAI_SERVICE"); _EAI_SERVICEReady = true; } return _EAI_SERVICEContent; } }
        private static int _EAI_SERVICEContent = default;
        private static bool _EAI_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EAI_SOCKTYPE"/>
        /// </summary>
        public static int EAI_SOCKTYPE { get { if (!_EAI_SOCKTYPEReady) { _EAI_SOCKTYPEContent = SGetField<int>(LocalBridgeClazz, "EAI_SOCKTYPE"); _EAI_SOCKTYPEReady = true; } return _EAI_SOCKTYPEContent; } }
        private static int _EAI_SOCKTYPEContent = default;
        private static bool _EAI_SOCKTYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EAI_SYSTEM"/>
        /// </summary>
        public static int EAI_SYSTEM { get { if (!_EAI_SYSTEMReady) { _EAI_SYSTEMContent = SGetField<int>(LocalBridgeClazz, "EAI_SYSTEM"); _EAI_SYSTEMReady = true; } return _EAI_SYSTEMContent; } }
        private static int _EAI_SYSTEMContent = default;
        private static bool _EAI_SYSTEMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EALREADY"/>
        /// </summary>
        public static int EALREADY { get { if (!_EALREADYReady) { _EALREADYContent = SGetField<int>(LocalBridgeClazz, "EALREADY"); _EALREADYReady = true; } return _EALREADYContent; } }
        private static int _EALREADYContent = default;
        private static bool _EALREADYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EBADF"/>
        /// </summary>
        public static int EBADF { get { if (!_EBADFReady) { _EBADFContent = SGetField<int>(LocalBridgeClazz, "EBADF"); _EBADFReady = true; } return _EBADFContent; } }
        private static int _EBADFContent = default;
        private static bool _EBADFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EBADMSG"/>
        /// </summary>
        public static int EBADMSG { get { if (!_EBADMSGReady) { _EBADMSGContent = SGetField<int>(LocalBridgeClazz, "EBADMSG"); _EBADMSGReady = true; } return _EBADMSGContent; } }
        private static int _EBADMSGContent = default;
        private static bool _EBADMSGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EBUSY"/>
        /// </summary>
        public static int EBUSY { get { if (!_EBUSYReady) { _EBUSYContent = SGetField<int>(LocalBridgeClazz, "EBUSY"); _EBUSYReady = true; } return _EBUSYContent; } }
        private static int _EBUSYContent = default;
        private static bool _EBUSYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ECANCELED"/>
        /// </summary>
        public static int ECANCELED { get { if (!_ECANCELEDReady) { _ECANCELEDContent = SGetField<int>(LocalBridgeClazz, "ECANCELED"); _ECANCELEDReady = true; } return _ECANCELEDContent; } }
        private static int _ECANCELEDContent = default;
        private static bool _ECANCELEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ECHILD"/>
        /// </summary>
        public static int ECHILD { get { if (!_ECHILDReady) { _ECHILDContent = SGetField<int>(LocalBridgeClazz, "ECHILD"); _ECHILDReady = true; } return _ECHILDContent; } }
        private static int _ECHILDContent = default;
        private static bool _ECHILDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ECONNABORTED"/>
        /// </summary>
        public static int ECONNABORTED { get { if (!_ECONNABORTEDReady) { _ECONNABORTEDContent = SGetField<int>(LocalBridgeClazz, "ECONNABORTED"); _ECONNABORTEDReady = true; } return _ECONNABORTEDContent; } }
        private static int _ECONNABORTEDContent = default;
        private static bool _ECONNABORTEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ECONNREFUSED"/>
        /// </summary>
        public static int ECONNREFUSED { get { if (!_ECONNREFUSEDReady) { _ECONNREFUSEDContent = SGetField<int>(LocalBridgeClazz, "ECONNREFUSED"); _ECONNREFUSEDReady = true; } return _ECONNREFUSEDContent; } }
        private static int _ECONNREFUSEDContent = default;
        private static bool _ECONNREFUSEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ECONNRESET"/>
        /// </summary>
        public static int ECONNRESET { get { if (!_ECONNRESETReady) { _ECONNRESETContent = SGetField<int>(LocalBridgeClazz, "ECONNRESET"); _ECONNRESETReady = true; } return _ECONNRESETContent; } }
        private static int _ECONNRESETContent = default;
        private static bool _ECONNRESETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EDEADLK"/>
        /// </summary>
        public static int EDEADLK { get { if (!_EDEADLKReady) { _EDEADLKContent = SGetField<int>(LocalBridgeClazz, "EDEADLK"); _EDEADLKReady = true; } return _EDEADLKContent; } }
        private static int _EDEADLKContent = default;
        private static bool _EDEADLKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EDESTADDRREQ"/>
        /// </summary>
        public static int EDESTADDRREQ { get { if (!_EDESTADDRREQReady) { _EDESTADDRREQContent = SGetField<int>(LocalBridgeClazz, "EDESTADDRREQ"); _EDESTADDRREQReady = true; } return _EDESTADDRREQContent; } }
        private static int _EDESTADDRREQContent = default;
        private static bool _EDESTADDRREQReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EDOM"/>
        /// </summary>
        public static int EDOM { get { if (!_EDOMReady) { _EDOMContent = SGetField<int>(LocalBridgeClazz, "EDOM"); _EDOMReady = true; } return _EDOMContent; } }
        private static int _EDOMContent = default;
        private static bool _EDOMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EDQUOT"/>
        /// </summary>
        public static int EDQUOT { get { if (!_EDQUOTReady) { _EDQUOTContent = SGetField<int>(LocalBridgeClazz, "EDQUOT"); _EDQUOTReady = true; } return _EDQUOTContent; } }
        private static int _EDQUOTContent = default;
        private static bool _EDQUOTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EEXIST"/>
        /// </summary>
        public static int EEXIST { get { if (!_EEXISTReady) { _EEXISTContent = SGetField<int>(LocalBridgeClazz, "EEXIST"); _EEXISTReady = true; } return _EEXISTContent; } }
        private static int _EEXISTContent = default;
        private static bool _EEXISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EFAULT"/>
        /// </summary>
        public static int EFAULT { get { if (!_EFAULTReady) { _EFAULTContent = SGetField<int>(LocalBridgeClazz, "EFAULT"); _EFAULTReady = true; } return _EFAULTContent; } }
        private static int _EFAULTContent = default;
        private static bool _EFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EFBIG"/>
        /// </summary>
        public static int EFBIG { get { if (!_EFBIGReady) { _EFBIGContent = SGetField<int>(LocalBridgeClazz, "EFBIG"); _EFBIGReady = true; } return _EFBIGContent; } }
        private static int _EFBIGContent = default;
        private static bool _EFBIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EHOSTUNREACH"/>
        /// </summary>
        public static int EHOSTUNREACH { get { if (!_EHOSTUNREACHReady) { _EHOSTUNREACHContent = SGetField<int>(LocalBridgeClazz, "EHOSTUNREACH"); _EHOSTUNREACHReady = true; } return _EHOSTUNREACHContent; } }
        private static int _EHOSTUNREACHContent = default;
        private static bool _EHOSTUNREACHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EIDRM"/>
        /// </summary>
        public static int EIDRM { get { if (!_EIDRMReady) { _EIDRMContent = SGetField<int>(LocalBridgeClazz, "EIDRM"); _EIDRMReady = true; } return _EIDRMContent; } }
        private static int _EIDRMContent = default;
        private static bool _EIDRMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EILSEQ"/>
        /// </summary>
        public static int EILSEQ { get { if (!_EILSEQReady) { _EILSEQContent = SGetField<int>(LocalBridgeClazz, "EILSEQ"); _EILSEQReady = true; } return _EILSEQContent; } }
        private static int _EILSEQContent = default;
        private static bool _EILSEQReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EINPROGRESS"/>
        /// </summary>
        public static int EINPROGRESS { get { if (!_EINPROGRESSReady) { _EINPROGRESSContent = SGetField<int>(LocalBridgeClazz, "EINPROGRESS"); _EINPROGRESSReady = true; } return _EINPROGRESSContent; } }
        private static int _EINPROGRESSContent = default;
        private static bool _EINPROGRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EINTR"/>
        /// </summary>
        public static int EINTR { get { if (!_EINTRReady) { _EINTRContent = SGetField<int>(LocalBridgeClazz, "EINTR"); _EINTRReady = true; } return _EINTRContent; } }
        private static int _EINTRContent = default;
        private static bool _EINTRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EINVAL"/>
        /// </summary>
        public static int EINVAL { get { if (!_EINVALReady) { _EINVALContent = SGetField<int>(LocalBridgeClazz, "EINVAL"); _EINVALReady = true; } return _EINVALContent; } }
        private static int _EINVALContent = default;
        private static bool _EINVALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EIO"/>
        /// </summary>
        public static int EIO { get { if (!_EIOReady) { _EIOContent = SGetField<int>(LocalBridgeClazz, "EIO"); _EIOReady = true; } return _EIOContent; } }
        private static int _EIOContent = default;
        private static bool _EIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EISCONN"/>
        /// </summary>
        public static int EISCONN { get { if (!_EISCONNReady) { _EISCONNContent = SGetField<int>(LocalBridgeClazz, "EISCONN"); _EISCONNReady = true; } return _EISCONNContent; } }
        private static int _EISCONNContent = default;
        private static bool _EISCONNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EISDIR"/>
        /// </summary>
        public static int EISDIR { get { if (!_EISDIRReady) { _EISDIRContent = SGetField<int>(LocalBridgeClazz, "EISDIR"); _EISDIRReady = true; } return _EISDIRContent; } }
        private static int _EISDIRContent = default;
        private static bool _EISDIRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ELOOP"/>
        /// </summary>
        public static int ELOOP { get { if (!_ELOOPReady) { _ELOOPContent = SGetField<int>(LocalBridgeClazz, "ELOOP"); _ELOOPReady = true; } return _ELOOPContent; } }
        private static int _ELOOPContent = default;
        private static bool _ELOOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EMFILE"/>
        /// </summary>
        public static int EMFILE { get { if (!_EMFILEReady) { _EMFILEContent = SGetField<int>(LocalBridgeClazz, "EMFILE"); _EMFILEReady = true; } return _EMFILEContent; } }
        private static int _EMFILEContent = default;
        private static bool _EMFILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EMLINK"/>
        /// </summary>
        public static int EMLINK { get { if (!_EMLINKReady) { _EMLINKContent = SGetField<int>(LocalBridgeClazz, "EMLINK"); _EMLINKReady = true; } return _EMLINKContent; } }
        private static int _EMLINKContent = default;
        private static bool _EMLINKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EMSGSIZE"/>
        /// </summary>
        public static int EMSGSIZE { get { if (!_EMSGSIZEReady) { _EMSGSIZEContent = SGetField<int>(LocalBridgeClazz, "EMSGSIZE"); _EMSGSIZEReady = true; } return _EMSGSIZEContent; } }
        private static int _EMSGSIZEContent = default;
        private static bool _EMSGSIZEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EMULTIHOP"/>
        /// </summary>
        public static int EMULTIHOP { get { if (!_EMULTIHOPReady) { _EMULTIHOPContent = SGetField<int>(LocalBridgeClazz, "EMULTIHOP"); _EMULTIHOPReady = true; } return _EMULTIHOPContent; } }
        private static int _EMULTIHOPContent = default;
        private static bool _EMULTIHOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENAMETOOLONG"/>
        /// </summary>
        public static int ENAMETOOLONG { get { if (!_ENAMETOOLONGReady) { _ENAMETOOLONGContent = SGetField<int>(LocalBridgeClazz, "ENAMETOOLONG"); _ENAMETOOLONGReady = true; } return _ENAMETOOLONGContent; } }
        private static int _ENAMETOOLONGContent = default;
        private static bool _ENAMETOOLONGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENETDOWN"/>
        /// </summary>
        public static int ENETDOWN { get { if (!_ENETDOWNReady) { _ENETDOWNContent = SGetField<int>(LocalBridgeClazz, "ENETDOWN"); _ENETDOWNReady = true; } return _ENETDOWNContent; } }
        private static int _ENETDOWNContent = default;
        private static bool _ENETDOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENETRESET"/>
        /// </summary>
        public static int ENETRESET { get { if (!_ENETRESETReady) { _ENETRESETContent = SGetField<int>(LocalBridgeClazz, "ENETRESET"); _ENETRESETReady = true; } return _ENETRESETContent; } }
        private static int _ENETRESETContent = default;
        private static bool _ENETRESETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENETUNREACH"/>
        /// </summary>
        public static int ENETUNREACH { get { if (!_ENETUNREACHReady) { _ENETUNREACHContent = SGetField<int>(LocalBridgeClazz, "ENETUNREACH"); _ENETUNREACHReady = true; } return _ENETUNREACHContent; } }
        private static int _ENETUNREACHContent = default;
        private static bool _ENETUNREACHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENFILE"/>
        /// </summary>
        public static int ENFILE { get { if (!_ENFILEReady) { _ENFILEContent = SGetField<int>(LocalBridgeClazz, "ENFILE"); _ENFILEReady = true; } return _ENFILEContent; } }
        private static int _ENFILEContent = default;
        private static bool _ENFILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOBUFS"/>
        /// </summary>
        public static int ENOBUFS { get { if (!_ENOBUFSReady) { _ENOBUFSContent = SGetField<int>(LocalBridgeClazz, "ENOBUFS"); _ENOBUFSReady = true; } return _ENOBUFSContent; } }
        private static int _ENOBUFSContent = default;
        private static bool _ENOBUFSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENODATA"/>
        /// </summary>
        public static int ENODATA { get { if (!_ENODATAReady) { _ENODATAContent = SGetField<int>(LocalBridgeClazz, "ENODATA"); _ENODATAReady = true; } return _ENODATAContent; } }
        private static int _ENODATAContent = default;
        private static bool _ENODATAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENODEV"/>
        /// </summary>
        public static int ENODEV { get { if (!_ENODEVReady) { _ENODEVContent = SGetField<int>(LocalBridgeClazz, "ENODEV"); _ENODEVReady = true; } return _ENODEVContent; } }
        private static int _ENODEVContent = default;
        private static bool _ENODEVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOENT"/>
        /// </summary>
        public static int ENOENT { get { if (!_ENOENTReady) { _ENOENTContent = SGetField<int>(LocalBridgeClazz, "ENOENT"); _ENOENTReady = true; } return _ENOENTContent; } }
        private static int _ENOENTContent = default;
        private static bool _ENOENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOEXEC"/>
        /// </summary>
        public static int ENOEXEC { get { if (!_ENOEXECReady) { _ENOEXECContent = SGetField<int>(LocalBridgeClazz, "ENOEXEC"); _ENOEXECReady = true; } return _ENOEXECContent; } }
        private static int _ENOEXECContent = default;
        private static bool _ENOEXECReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOLCK"/>
        /// </summary>
        public static int ENOLCK { get { if (!_ENOLCKReady) { _ENOLCKContent = SGetField<int>(LocalBridgeClazz, "ENOLCK"); _ENOLCKReady = true; } return _ENOLCKContent; } }
        private static int _ENOLCKContent = default;
        private static bool _ENOLCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOLINK"/>
        /// </summary>
        public static int ENOLINK { get { if (!_ENOLINKReady) { _ENOLINKContent = SGetField<int>(LocalBridgeClazz, "ENOLINK"); _ENOLINKReady = true; } return _ENOLINKContent; } }
        private static int _ENOLINKContent = default;
        private static bool _ENOLINKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOMEM"/>
        /// </summary>
        public static int ENOMEM { get { if (!_ENOMEMReady) { _ENOMEMContent = SGetField<int>(LocalBridgeClazz, "ENOMEM"); _ENOMEMReady = true; } return _ENOMEMContent; } }
        private static int _ENOMEMContent = default;
        private static bool _ENOMEMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOMSG"/>
        /// </summary>
        public static int ENOMSG { get { if (!_ENOMSGReady) { _ENOMSGContent = SGetField<int>(LocalBridgeClazz, "ENOMSG"); _ENOMSGReady = true; } return _ENOMSGContent; } }
        private static int _ENOMSGContent = default;
        private static bool _ENOMSGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENONET"/>
        /// </summary>
        public static int ENONET { get { if (!_ENONETReady) { _ENONETContent = SGetField<int>(LocalBridgeClazz, "ENONET"); _ENONETReady = true; } return _ENONETContent; } }
        private static int _ENONETContent = default;
        private static bool _ENONETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOPROTOOPT"/>
        /// </summary>
        public static int ENOPROTOOPT { get { if (!_ENOPROTOOPTReady) { _ENOPROTOOPTContent = SGetField<int>(LocalBridgeClazz, "ENOPROTOOPT"); _ENOPROTOOPTReady = true; } return _ENOPROTOOPTContent; } }
        private static int _ENOPROTOOPTContent = default;
        private static bool _ENOPROTOOPTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOSPC"/>
        /// </summary>
        public static int ENOSPC { get { if (!_ENOSPCReady) { _ENOSPCContent = SGetField<int>(LocalBridgeClazz, "ENOSPC"); _ENOSPCReady = true; } return _ENOSPCContent; } }
        private static int _ENOSPCContent = default;
        private static bool _ENOSPCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOSR"/>
        /// </summary>
        public static int ENOSR { get { if (!_ENOSRReady) { _ENOSRContent = SGetField<int>(LocalBridgeClazz, "ENOSR"); _ENOSRReady = true; } return _ENOSRContent; } }
        private static int _ENOSRContent = default;
        private static bool _ENOSRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOSTR"/>
        /// </summary>
        public static int ENOSTR { get { if (!_ENOSTRReady) { _ENOSTRContent = SGetField<int>(LocalBridgeClazz, "ENOSTR"); _ENOSTRReady = true; } return _ENOSTRContent; } }
        private static int _ENOSTRContent = default;
        private static bool _ENOSTRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOSYS"/>
        /// </summary>
        public static int ENOSYS { get { if (!_ENOSYSReady) { _ENOSYSContent = SGetField<int>(LocalBridgeClazz, "ENOSYS"); _ENOSYSReady = true; } return _ENOSYSContent; } }
        private static int _ENOSYSContent = default;
        private static bool _ENOSYSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOTCONN"/>
        /// </summary>
        public static int ENOTCONN { get { if (!_ENOTCONNReady) { _ENOTCONNContent = SGetField<int>(LocalBridgeClazz, "ENOTCONN"); _ENOTCONNReady = true; } return _ENOTCONNContent; } }
        private static int _ENOTCONNContent = default;
        private static bool _ENOTCONNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOTDIR"/>
        /// </summary>
        public static int ENOTDIR { get { if (!_ENOTDIRReady) { _ENOTDIRContent = SGetField<int>(LocalBridgeClazz, "ENOTDIR"); _ENOTDIRReady = true; } return _ENOTDIRContent; } }
        private static int _ENOTDIRContent = default;
        private static bool _ENOTDIRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOTEMPTY"/>
        /// </summary>
        public static int ENOTEMPTY { get { if (!_ENOTEMPTYReady) { _ENOTEMPTYContent = SGetField<int>(LocalBridgeClazz, "ENOTEMPTY"); _ENOTEMPTYReady = true; } return _ENOTEMPTYContent; } }
        private static int _ENOTEMPTYContent = default;
        private static bool _ENOTEMPTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOTSOCK"/>
        /// </summary>
        public static int ENOTSOCK { get { if (!_ENOTSOCKReady) { _ENOTSOCKContent = SGetField<int>(LocalBridgeClazz, "ENOTSOCK"); _ENOTSOCKReady = true; } return _ENOTSOCKContent; } }
        private static int _ENOTSOCKContent = default;
        private static bool _ENOTSOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOTSUP"/>
        /// </summary>
        public static int ENOTSUP { get { if (!_ENOTSUPReady) { _ENOTSUPContent = SGetField<int>(LocalBridgeClazz, "ENOTSUP"); _ENOTSUPReady = true; } return _ENOTSUPContent; } }
        private static int _ENOTSUPContent = default;
        private static bool _ENOTSUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENOTTY"/>
        /// </summary>
        public static int ENOTTY { get { if (!_ENOTTYReady) { _ENOTTYContent = SGetField<int>(LocalBridgeClazz, "ENOTTY"); _ENOTTYReady = true; } return _ENOTTYContent; } }
        private static int _ENOTTYContent = default;
        private static bool _ENOTTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ENXIO"/>
        /// </summary>
        public static int ENXIO { get { if (!_ENXIOReady) { _ENXIOContent = SGetField<int>(LocalBridgeClazz, "ENXIO"); _ENXIOReady = true; } return _ENXIOContent; } }
        private static int _ENXIOContent = default;
        private static bool _ENXIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EOPNOTSUPP"/>
        /// </summary>
        public static int EOPNOTSUPP { get { if (!_EOPNOTSUPPReady) { _EOPNOTSUPPContent = SGetField<int>(LocalBridgeClazz, "EOPNOTSUPP"); _EOPNOTSUPPReady = true; } return _EOPNOTSUPPContent; } }
        private static int _EOPNOTSUPPContent = default;
        private static bool _EOPNOTSUPPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EOVERFLOW"/>
        /// </summary>
        public static int EOVERFLOW { get { if (!_EOVERFLOWReady) { _EOVERFLOWContent = SGetField<int>(LocalBridgeClazz, "EOVERFLOW"); _EOVERFLOWReady = true; } return _EOVERFLOWContent; } }
        private static int _EOVERFLOWContent = default;
        private static bool _EOVERFLOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EPERM"/>
        /// </summary>
        public static int EPERM { get { if (!_EPERMReady) { _EPERMContent = SGetField<int>(LocalBridgeClazz, "EPERM"); _EPERMReady = true; } return _EPERMContent; } }
        private static int _EPERMContent = default;
        private static bool _EPERMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EPIPE"/>
        /// </summary>
        public static int EPIPE { get { if (!_EPIPEReady) { _EPIPEContent = SGetField<int>(LocalBridgeClazz, "EPIPE"); _EPIPEReady = true; } return _EPIPEContent; } }
        private static int _EPIPEContent = default;
        private static bool _EPIPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EPROTO"/>
        /// </summary>
        public static int EPROTO { get { if (!_EPROTOReady) { _EPROTOContent = SGetField<int>(LocalBridgeClazz, "EPROTO"); _EPROTOReady = true; } return _EPROTOContent; } }
        private static int _EPROTOContent = default;
        private static bool _EPROTOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EPROTONOSUPPORT"/>
        /// </summary>
        public static int EPROTONOSUPPORT { get { if (!_EPROTONOSUPPORTReady) { _EPROTONOSUPPORTContent = SGetField<int>(LocalBridgeClazz, "EPROTONOSUPPORT"); _EPROTONOSUPPORTReady = true; } return _EPROTONOSUPPORTContent; } }
        private static int _EPROTONOSUPPORTContent = default;
        private static bool _EPROTONOSUPPORTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EPROTOTYPE"/>
        /// </summary>
        public static int EPROTOTYPE { get { if (!_EPROTOTYPEReady) { _EPROTOTYPEContent = SGetField<int>(LocalBridgeClazz, "EPROTOTYPE"); _EPROTOTYPEReady = true; } return _EPROTOTYPEContent; } }
        private static int _EPROTOTYPEContent = default;
        private static bool _EPROTOTYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ERANGE"/>
        /// </summary>
        public static int ERANGE { get { if (!_ERANGEReady) { _ERANGEContent = SGetField<int>(LocalBridgeClazz, "ERANGE"); _ERANGEReady = true; } return _ERANGEContent; } }
        private static int _ERANGEContent = default;
        private static bool _ERANGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EROFS"/>
        /// </summary>
        public static int EROFS { get { if (!_EROFSReady) { _EROFSContent = SGetField<int>(LocalBridgeClazz, "EROFS"); _EROFSReady = true; } return _EROFSContent; } }
        private static int _EROFSContent = default;
        private static bool _EROFSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ESPIPE"/>
        /// </summary>
        public static int ESPIPE { get { if (!_ESPIPEReady) { _ESPIPEContent = SGetField<int>(LocalBridgeClazz, "ESPIPE"); _ESPIPEReady = true; } return _ESPIPEContent; } }
        private static int _ESPIPEContent = default;
        private static bool _ESPIPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ESRCH"/>
        /// </summary>
        public static int ESRCH { get { if (!_ESRCHReady) { _ESRCHContent = SGetField<int>(LocalBridgeClazz, "ESRCH"); _ESRCHReady = true; } return _ESRCHContent; } }
        private static int _ESRCHContent = default;
        private static bool _ESRCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ESTALE"/>
        /// </summary>
        public static int ESTALE { get { if (!_ESTALEReady) { _ESTALEContent = SGetField<int>(LocalBridgeClazz, "ESTALE"); _ESTALEReady = true; } return _ESTALEContent; } }
        private static int _ESTALEContent = default;
        private static bool _ESTALEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ETH_P_ALL"/>
        /// </summary>
        public static int ETH_P_ALL { get { if (!_ETH_P_ALLReady) { _ETH_P_ALLContent = SGetField<int>(LocalBridgeClazz, "ETH_P_ALL"); _ETH_P_ALLReady = true; } return _ETH_P_ALLContent; } }
        private static int _ETH_P_ALLContent = default;
        private static bool _ETH_P_ALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ETH_P_ARP"/>
        /// </summary>
        public static int ETH_P_ARP { get { if (!_ETH_P_ARPReady) { _ETH_P_ARPContent = SGetField<int>(LocalBridgeClazz, "ETH_P_ARP"); _ETH_P_ARPReady = true; } return _ETH_P_ARPContent; } }
        private static int _ETH_P_ARPContent = default;
        private static bool _ETH_P_ARPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ETH_P_IP"/>
        /// </summary>
        public static int ETH_P_IP { get { if (!_ETH_P_IPReady) { _ETH_P_IPContent = SGetField<int>(LocalBridgeClazz, "ETH_P_IP"); _ETH_P_IPReady = true; } return _ETH_P_IPContent; } }
        private static int _ETH_P_IPContent = default;
        private static bool _ETH_P_IPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ETH_P_IPV6"/>
        /// </summary>
        public static int ETH_P_IPV6 { get { if (!_ETH_P_IPV6Ready) { _ETH_P_IPV6Content = SGetField<int>(LocalBridgeClazz, "ETH_P_IPV6"); _ETH_P_IPV6Ready = true; } return _ETH_P_IPV6Content; } }
        private static int _ETH_P_IPV6Content = default;
        private static bool _ETH_P_IPV6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ETIME"/>
        /// </summary>
        public static int ETIME { get { if (!_ETIMEReady) { _ETIMEContent = SGetField<int>(LocalBridgeClazz, "ETIME"); _ETIMEReady = true; } return _ETIMEContent; } }
        private static int _ETIMEContent = default;
        private static bool _ETIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ETIMEDOUT"/>
        /// </summary>
        public static int ETIMEDOUT { get { if (!_ETIMEDOUTReady) { _ETIMEDOUTContent = SGetField<int>(LocalBridgeClazz, "ETIMEDOUT"); _ETIMEDOUTReady = true; } return _ETIMEDOUTContent; } }
        private static int _ETIMEDOUTContent = default;
        private static bool _ETIMEDOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ETXTBSY"/>
        /// </summary>
        public static int ETXTBSY { get { if (!_ETXTBSYReady) { _ETXTBSYContent = SGetField<int>(LocalBridgeClazz, "ETXTBSY"); _ETXTBSYReady = true; } return _ETXTBSYContent; } }
        private static int _ETXTBSYContent = default;
        private static bool _ETXTBSYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EXDEV"/>
        /// </summary>
        public static int EXDEV { get { if (!_EXDEVReady) { _EXDEVContent = SGetField<int>(LocalBridgeClazz, "EXDEV"); _EXDEVReady = true; } return _EXDEVContent; } }
        private static int _EXDEVContent = default;
        private static bool _EXDEVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EXIT_FAILURE"/>
        /// </summary>
        public static int EXIT_FAILURE { get { if (!_EXIT_FAILUREReady) { _EXIT_FAILUREContent = SGetField<int>(LocalBridgeClazz, "EXIT_FAILURE"); _EXIT_FAILUREReady = true; } return _EXIT_FAILUREContent; } }
        private static int _EXIT_FAILUREContent = default;
        private static bool _EXIT_FAILUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#EXIT_SUCCESS"/>
        /// </summary>
        public static int EXIT_SUCCESS { get { if (!_EXIT_SUCCESSReady) { _EXIT_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "EXIT_SUCCESS"); _EXIT_SUCCESSReady = true; } return _EXIT_SUCCESSContent; } }
        private static int _EXIT_SUCCESSContent = default;
        private static bool _EXIT_SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_DUPFD"/>
        /// </summary>
        public static int F_DUPFD { get { if (!_F_DUPFDReady) { _F_DUPFDContent = SGetField<int>(LocalBridgeClazz, "F_DUPFD"); _F_DUPFDReady = true; } return _F_DUPFDContent; } }
        private static int _F_DUPFDContent = default;
        private static bool _F_DUPFDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_DUPFD_CLOEXEC"/>
        /// </summary>
        public static int F_DUPFD_CLOEXEC { get { if (!_F_DUPFD_CLOEXECReady) { _F_DUPFD_CLOEXECContent = SGetField<int>(LocalBridgeClazz, "F_DUPFD_CLOEXEC"); _F_DUPFD_CLOEXECReady = true; } return _F_DUPFD_CLOEXECContent; } }
        private static int _F_DUPFD_CLOEXECContent = default;
        private static bool _F_DUPFD_CLOEXECReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_GETFD"/>
        /// </summary>
        public static int F_GETFD { get { if (!_F_GETFDReady) { _F_GETFDContent = SGetField<int>(LocalBridgeClazz, "F_GETFD"); _F_GETFDReady = true; } return _F_GETFDContent; } }
        private static int _F_GETFDContent = default;
        private static bool _F_GETFDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_GETFL"/>
        /// </summary>
        public static int F_GETFL { get { if (!_F_GETFLReady) { _F_GETFLContent = SGetField<int>(LocalBridgeClazz, "F_GETFL"); _F_GETFLReady = true; } return _F_GETFLContent; } }
        private static int _F_GETFLContent = default;
        private static bool _F_GETFLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_GETLK"/>
        /// </summary>
        public static int F_GETLK { get { if (!_F_GETLKReady) { _F_GETLKContent = SGetField<int>(LocalBridgeClazz, "F_GETLK"); _F_GETLKReady = true; } return _F_GETLKContent; } }
        private static int _F_GETLKContent = default;
        private static bool _F_GETLKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_GETLK64"/>
        /// </summary>
        public static int F_GETLK64 { get { if (!_F_GETLK64Ready) { _F_GETLK64Content = SGetField<int>(LocalBridgeClazz, "F_GETLK64"); _F_GETLK64Ready = true; } return _F_GETLK64Content; } }
        private static int _F_GETLK64Content = default;
        private static bool _F_GETLK64Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_GETOWN"/>
        /// </summary>
        public static int F_GETOWN { get { if (!_F_GETOWNReady) { _F_GETOWNContent = SGetField<int>(LocalBridgeClazz, "F_GETOWN"); _F_GETOWNReady = true; } return _F_GETOWNContent; } }
        private static int _F_GETOWNContent = default;
        private static bool _F_GETOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_OK"/>
        /// </summary>
        public static int F_OK { get { if (!_F_OKReady) { _F_OKContent = SGetField<int>(LocalBridgeClazz, "F_OK"); _F_OKReady = true; } return _F_OKContent; } }
        private static int _F_OKContent = default;
        private static bool _F_OKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_RDLCK"/>
        /// </summary>
        public static int F_RDLCK { get { if (!_F_RDLCKReady) { _F_RDLCKContent = SGetField<int>(LocalBridgeClazz, "F_RDLCK"); _F_RDLCKReady = true; } return _F_RDLCKContent; } }
        private static int _F_RDLCKContent = default;
        private static bool _F_RDLCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_SETFD"/>
        /// </summary>
        public static int F_SETFD { get { if (!_F_SETFDReady) { _F_SETFDContent = SGetField<int>(LocalBridgeClazz, "F_SETFD"); _F_SETFDReady = true; } return _F_SETFDContent; } }
        private static int _F_SETFDContent = default;
        private static bool _F_SETFDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_SETFL"/>
        /// </summary>
        public static int F_SETFL { get { if (!_F_SETFLReady) { _F_SETFLContent = SGetField<int>(LocalBridgeClazz, "F_SETFL"); _F_SETFLReady = true; } return _F_SETFLContent; } }
        private static int _F_SETFLContent = default;
        private static bool _F_SETFLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_SETLK"/>
        /// </summary>
        public static int F_SETLK { get { if (!_F_SETLKReady) { _F_SETLKContent = SGetField<int>(LocalBridgeClazz, "F_SETLK"); _F_SETLKReady = true; } return _F_SETLKContent; } }
        private static int _F_SETLKContent = default;
        private static bool _F_SETLKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_SETLK64"/>
        /// </summary>
        public static int F_SETLK64 { get { if (!_F_SETLK64Ready) { _F_SETLK64Content = SGetField<int>(LocalBridgeClazz, "F_SETLK64"); _F_SETLK64Ready = true; } return _F_SETLK64Content; } }
        private static int _F_SETLK64Content = default;
        private static bool _F_SETLK64Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_SETLKW"/>
        /// </summary>
        public static int F_SETLKW { get { if (!_F_SETLKWReady) { _F_SETLKWContent = SGetField<int>(LocalBridgeClazz, "F_SETLKW"); _F_SETLKWReady = true; } return _F_SETLKWContent; } }
        private static int _F_SETLKWContent = default;
        private static bool _F_SETLKWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_SETLKW64"/>
        /// </summary>
        public static int F_SETLKW64 { get { if (!_F_SETLKW64Ready) { _F_SETLKW64Content = SGetField<int>(LocalBridgeClazz, "F_SETLKW64"); _F_SETLKW64Ready = true; } return _F_SETLKW64Content; } }
        private static int _F_SETLKW64Content = default;
        private static bool _F_SETLKW64Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_SETOWN"/>
        /// </summary>
        public static int F_SETOWN { get { if (!_F_SETOWNReady) { _F_SETOWNContent = SGetField<int>(LocalBridgeClazz, "F_SETOWN"); _F_SETOWNReady = true; } return _F_SETOWNContent; } }
        private static int _F_SETOWNContent = default;
        private static bool _F_SETOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_UNLCK"/>
        /// </summary>
        public static int F_UNLCK { get { if (!_F_UNLCKReady) { _F_UNLCKContent = SGetField<int>(LocalBridgeClazz, "F_UNLCK"); _F_UNLCKReady = true; } return _F_UNLCKContent; } }
        private static int _F_UNLCKContent = default;
        private static bool _F_UNLCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#F_WRLCK"/>
        /// </summary>
        public static int F_WRLCK { get { if (!_F_WRLCKReady) { _F_WRLCKContent = SGetField<int>(LocalBridgeClazz, "F_WRLCK"); _F_WRLCKReady = true; } return _F_WRLCKContent; } }
        private static int _F_WRLCKContent = default;
        private static bool _F_WRLCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#FD_CLOEXEC"/>
        /// </summary>
        public static int FD_CLOEXEC { get { if (!_FD_CLOEXECReady) { _FD_CLOEXECContent = SGetField<int>(LocalBridgeClazz, "FD_CLOEXEC"); _FD_CLOEXECReady = true; } return _FD_CLOEXECContent; } }
        private static int _FD_CLOEXECContent = default;
        private static bool _FD_CLOEXECReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#FIONREAD"/>
        /// </summary>
        public static int FIONREAD { get { if (!_FIONREADReady) { _FIONREADContent = SGetField<int>(LocalBridgeClazz, "FIONREAD"); _FIONREADReady = true; } return _FIONREADContent; } }
        private static int _FIONREADContent = default;
        private static bool _FIONREADReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ICMP_ECHO"/>
        /// </summary>
        public static int ICMP_ECHO { get { if (!_ICMP_ECHOReady) { _ICMP_ECHOContent = SGetField<int>(LocalBridgeClazz, "ICMP_ECHO"); _ICMP_ECHOReady = true; } return _ICMP_ECHOContent; } }
        private static int _ICMP_ECHOContent = default;
        private static bool _ICMP_ECHOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ICMP_ECHOREPLY"/>
        /// </summary>
        public static int ICMP_ECHOREPLY { get { if (!_ICMP_ECHOREPLYReady) { _ICMP_ECHOREPLYContent = SGetField<int>(LocalBridgeClazz, "ICMP_ECHOREPLY"); _ICMP_ECHOREPLYReady = true; } return _ICMP_ECHOREPLYContent; } }
        private static int _ICMP_ECHOREPLYContent = default;
        private static bool _ICMP_ECHOREPLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ICMP6_ECHO_REPLY"/>
        /// </summary>
        public static int ICMP6_ECHO_REPLY { get { if (!_ICMP6_ECHO_REPLYReady) { _ICMP6_ECHO_REPLYContent = SGetField<int>(LocalBridgeClazz, "ICMP6_ECHO_REPLY"); _ICMP6_ECHO_REPLYReady = true; } return _ICMP6_ECHO_REPLYContent; } }
        private static int _ICMP6_ECHO_REPLYContent = default;
        private static bool _ICMP6_ECHO_REPLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ICMP6_ECHO_REQUEST"/>
        /// </summary>
        public static int ICMP6_ECHO_REQUEST { get { if (!_ICMP6_ECHO_REQUESTReady) { _ICMP6_ECHO_REQUESTContent = SGetField<int>(LocalBridgeClazz, "ICMP6_ECHO_REQUEST"); _ICMP6_ECHO_REQUESTReady = true; } return _ICMP6_ECHO_REQUESTContent; } }
        private static int _ICMP6_ECHO_REQUESTContent = default;
        private static bool _ICMP6_ECHO_REQUESTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFA_F_DADFAILED"/>
        /// </summary>
        public static int IFA_F_DADFAILED { get { if (!_IFA_F_DADFAILEDReady) { _IFA_F_DADFAILEDContent = SGetField<int>(LocalBridgeClazz, "IFA_F_DADFAILED"); _IFA_F_DADFAILEDReady = true; } return _IFA_F_DADFAILEDContent; } }
        private static int _IFA_F_DADFAILEDContent = default;
        private static bool _IFA_F_DADFAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFA_F_DEPRECATED"/>
        /// </summary>
        public static int IFA_F_DEPRECATED { get { if (!_IFA_F_DEPRECATEDReady) { _IFA_F_DEPRECATEDContent = SGetField<int>(LocalBridgeClazz, "IFA_F_DEPRECATED"); _IFA_F_DEPRECATEDReady = true; } return _IFA_F_DEPRECATEDContent; } }
        private static int _IFA_F_DEPRECATEDContent = default;
        private static bool _IFA_F_DEPRECATEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFA_F_HOMEADDRESS"/>
        /// </summary>
        public static int IFA_F_HOMEADDRESS { get { if (!_IFA_F_HOMEADDRESSReady) { _IFA_F_HOMEADDRESSContent = SGetField<int>(LocalBridgeClazz, "IFA_F_HOMEADDRESS"); _IFA_F_HOMEADDRESSReady = true; } return _IFA_F_HOMEADDRESSContent; } }
        private static int _IFA_F_HOMEADDRESSContent = default;
        private static bool _IFA_F_HOMEADDRESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFA_F_MANAGETEMPADDR"/>
        /// </summary>
        public static int IFA_F_MANAGETEMPADDR { get { if (!_IFA_F_MANAGETEMPADDRReady) { _IFA_F_MANAGETEMPADDRContent = SGetField<int>(LocalBridgeClazz, "IFA_F_MANAGETEMPADDR"); _IFA_F_MANAGETEMPADDRReady = true; } return _IFA_F_MANAGETEMPADDRContent; } }
        private static int _IFA_F_MANAGETEMPADDRContent = default;
        private static bool _IFA_F_MANAGETEMPADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFA_F_NODAD"/>
        /// </summary>
        public static int IFA_F_NODAD { get { if (!_IFA_F_NODADReady) { _IFA_F_NODADContent = SGetField<int>(LocalBridgeClazz, "IFA_F_NODAD"); _IFA_F_NODADReady = true; } return _IFA_F_NODADContent; } }
        private static int _IFA_F_NODADContent = default;
        private static bool _IFA_F_NODADReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFA_F_NOPREFIXROUTE"/>
        /// </summary>
        public static int IFA_F_NOPREFIXROUTE { get { if (!_IFA_F_NOPREFIXROUTEReady) { _IFA_F_NOPREFIXROUTEContent = SGetField<int>(LocalBridgeClazz, "IFA_F_NOPREFIXROUTE"); _IFA_F_NOPREFIXROUTEReady = true; } return _IFA_F_NOPREFIXROUTEContent; } }
        private static int _IFA_F_NOPREFIXROUTEContent = default;
        private static bool _IFA_F_NOPREFIXROUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFA_F_OPTIMISTIC"/>
        /// </summary>
        public static int IFA_F_OPTIMISTIC { get { if (!_IFA_F_OPTIMISTICReady) { _IFA_F_OPTIMISTICContent = SGetField<int>(LocalBridgeClazz, "IFA_F_OPTIMISTIC"); _IFA_F_OPTIMISTICReady = true; } return _IFA_F_OPTIMISTICContent; } }
        private static int _IFA_F_OPTIMISTICContent = default;
        private static bool _IFA_F_OPTIMISTICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFA_F_PERMANENT"/>
        /// </summary>
        public static int IFA_F_PERMANENT { get { if (!_IFA_F_PERMANENTReady) { _IFA_F_PERMANENTContent = SGetField<int>(LocalBridgeClazz, "IFA_F_PERMANENT"); _IFA_F_PERMANENTReady = true; } return _IFA_F_PERMANENTContent; } }
        private static int _IFA_F_PERMANENTContent = default;
        private static bool _IFA_F_PERMANENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFA_F_SECONDARY"/>
        /// </summary>
        public static int IFA_F_SECONDARY { get { if (!_IFA_F_SECONDARYReady) { _IFA_F_SECONDARYContent = SGetField<int>(LocalBridgeClazz, "IFA_F_SECONDARY"); _IFA_F_SECONDARYReady = true; } return _IFA_F_SECONDARYContent; } }
        private static int _IFA_F_SECONDARYContent = default;
        private static bool _IFA_F_SECONDARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFA_F_TEMPORARY"/>
        /// </summary>
        public static int IFA_F_TEMPORARY { get { if (!_IFA_F_TEMPORARYReady) { _IFA_F_TEMPORARYContent = SGetField<int>(LocalBridgeClazz, "IFA_F_TEMPORARY"); _IFA_F_TEMPORARYReady = true; } return _IFA_F_TEMPORARYContent; } }
        private static int _IFA_F_TEMPORARYContent = default;
        private static bool _IFA_F_TEMPORARYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFA_F_TENTATIVE"/>
        /// </summary>
        public static int IFA_F_TENTATIVE { get { if (!_IFA_F_TENTATIVEReady) { _IFA_F_TENTATIVEContent = SGetField<int>(LocalBridgeClazz, "IFA_F_TENTATIVE"); _IFA_F_TENTATIVEReady = true; } return _IFA_F_TENTATIVEContent; } }
        private static int _IFA_F_TENTATIVEContent = default;
        private static bool _IFA_F_TENTATIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFF_ALLMULTI"/>
        /// </summary>
        public static int IFF_ALLMULTI { get { if (!_IFF_ALLMULTIReady) { _IFF_ALLMULTIContent = SGetField<int>(LocalBridgeClazz, "IFF_ALLMULTI"); _IFF_ALLMULTIReady = true; } return _IFF_ALLMULTIContent; } }
        private static int _IFF_ALLMULTIContent = default;
        private static bool _IFF_ALLMULTIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFF_AUTOMEDIA"/>
        /// </summary>
        public static int IFF_AUTOMEDIA { get { if (!_IFF_AUTOMEDIAReady) { _IFF_AUTOMEDIAContent = SGetField<int>(LocalBridgeClazz, "IFF_AUTOMEDIA"); _IFF_AUTOMEDIAReady = true; } return _IFF_AUTOMEDIAContent; } }
        private static int _IFF_AUTOMEDIAContent = default;
        private static bool _IFF_AUTOMEDIAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFF_BROADCAST"/>
        /// </summary>
        public static int IFF_BROADCAST { get { if (!_IFF_BROADCASTReady) { _IFF_BROADCASTContent = SGetField<int>(LocalBridgeClazz, "IFF_BROADCAST"); _IFF_BROADCASTReady = true; } return _IFF_BROADCASTContent; } }
        private static int _IFF_BROADCASTContent = default;
        private static bool _IFF_BROADCASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFF_DEBUG"/>
        /// </summary>
        public static int IFF_DEBUG { get { if (!_IFF_DEBUGReady) { _IFF_DEBUGContent = SGetField<int>(LocalBridgeClazz, "IFF_DEBUG"); _IFF_DEBUGReady = true; } return _IFF_DEBUGContent; } }
        private static int _IFF_DEBUGContent = default;
        private static bool _IFF_DEBUGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFF_DYNAMIC"/>
        /// </summary>
        public static int IFF_DYNAMIC { get { if (!_IFF_DYNAMICReady) { _IFF_DYNAMICContent = SGetField<int>(LocalBridgeClazz, "IFF_DYNAMIC"); _IFF_DYNAMICReady = true; } return _IFF_DYNAMICContent; } }
        private static int _IFF_DYNAMICContent = default;
        private static bool _IFF_DYNAMICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFF_LOOPBACK"/>
        /// </summary>
        public static int IFF_LOOPBACK { get { if (!_IFF_LOOPBACKReady) { _IFF_LOOPBACKContent = SGetField<int>(LocalBridgeClazz, "IFF_LOOPBACK"); _IFF_LOOPBACKReady = true; } return _IFF_LOOPBACKContent; } }
        private static int _IFF_LOOPBACKContent = default;
        private static bool _IFF_LOOPBACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFF_MASTER"/>
        /// </summary>
        public static int IFF_MASTER { get { if (!_IFF_MASTERReady) { _IFF_MASTERContent = SGetField<int>(LocalBridgeClazz, "IFF_MASTER"); _IFF_MASTERReady = true; } return _IFF_MASTERContent; } }
        private static int _IFF_MASTERContent = default;
        private static bool _IFF_MASTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFF_MULTICAST"/>
        /// </summary>
        public static int IFF_MULTICAST { get { if (!_IFF_MULTICASTReady) { _IFF_MULTICASTContent = SGetField<int>(LocalBridgeClazz, "IFF_MULTICAST"); _IFF_MULTICASTReady = true; } return _IFF_MULTICASTContent; } }
        private static int _IFF_MULTICASTContent = default;
        private static bool _IFF_MULTICASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFF_NOARP"/>
        /// </summary>
        public static int IFF_NOARP { get { if (!_IFF_NOARPReady) { _IFF_NOARPContent = SGetField<int>(LocalBridgeClazz, "IFF_NOARP"); _IFF_NOARPReady = true; } return _IFF_NOARPContent; } }
        private static int _IFF_NOARPContent = default;
        private static bool _IFF_NOARPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFF_NOTRAILERS"/>
        /// </summary>
        public static int IFF_NOTRAILERS { get { if (!_IFF_NOTRAILERSReady) { _IFF_NOTRAILERSContent = SGetField<int>(LocalBridgeClazz, "IFF_NOTRAILERS"); _IFF_NOTRAILERSReady = true; } return _IFF_NOTRAILERSContent; } }
        private static int _IFF_NOTRAILERSContent = default;
        private static bool _IFF_NOTRAILERSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFF_POINTOPOINT"/>
        /// </summary>
        public static int IFF_POINTOPOINT { get { if (!_IFF_POINTOPOINTReady) { _IFF_POINTOPOINTContent = SGetField<int>(LocalBridgeClazz, "IFF_POINTOPOINT"); _IFF_POINTOPOINTReady = true; } return _IFF_POINTOPOINTContent; } }
        private static int _IFF_POINTOPOINTContent = default;
        private static bool _IFF_POINTOPOINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFF_PORTSEL"/>
        /// </summary>
        public static int IFF_PORTSEL { get { if (!_IFF_PORTSELReady) { _IFF_PORTSELContent = SGetField<int>(LocalBridgeClazz, "IFF_PORTSEL"); _IFF_PORTSELReady = true; } return _IFF_PORTSELContent; } }
        private static int _IFF_PORTSELContent = default;
        private static bool _IFF_PORTSELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFF_PROMISC"/>
        /// </summary>
        public static int IFF_PROMISC { get { if (!_IFF_PROMISCReady) { _IFF_PROMISCContent = SGetField<int>(LocalBridgeClazz, "IFF_PROMISC"); _IFF_PROMISCReady = true; } return _IFF_PROMISCContent; } }
        private static int _IFF_PROMISCContent = default;
        private static bool _IFF_PROMISCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFF_RUNNING"/>
        /// </summary>
        public static int IFF_RUNNING { get { if (!_IFF_RUNNINGReady) { _IFF_RUNNINGContent = SGetField<int>(LocalBridgeClazz, "IFF_RUNNING"); _IFF_RUNNINGReady = true; } return _IFF_RUNNINGContent; } }
        private static int _IFF_RUNNINGContent = default;
        private static bool _IFF_RUNNINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFF_SLAVE"/>
        /// </summary>
        public static int IFF_SLAVE { get { if (!_IFF_SLAVEReady) { _IFF_SLAVEContent = SGetField<int>(LocalBridgeClazz, "IFF_SLAVE"); _IFF_SLAVEReady = true; } return _IFF_SLAVEContent; } }
        private static int _IFF_SLAVEContent = default;
        private static bool _IFF_SLAVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IFF_UP"/>
        /// </summary>
        public static int IFF_UP { get { if (!_IFF_UPReady) { _IFF_UPContent = SGetField<int>(LocalBridgeClazz, "IFF_UP"); _IFF_UPReady = true; } return _IFF_UPContent; } }
        private static int _IFF_UPContent = default;
        private static bool _IFF_UPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IP_MULTICAST_IF"/>
        /// </summary>
        public static int IP_MULTICAST_IF { get { if (!_IP_MULTICAST_IFReady) { _IP_MULTICAST_IFContent = SGetField<int>(LocalBridgeClazz, "IP_MULTICAST_IF"); _IP_MULTICAST_IFReady = true; } return _IP_MULTICAST_IFContent; } }
        private static int _IP_MULTICAST_IFContent = default;
        private static bool _IP_MULTICAST_IFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IP_MULTICAST_LOOP"/>
        /// </summary>
        public static int IP_MULTICAST_LOOP { get { if (!_IP_MULTICAST_LOOPReady) { _IP_MULTICAST_LOOPContent = SGetField<int>(LocalBridgeClazz, "IP_MULTICAST_LOOP"); _IP_MULTICAST_LOOPReady = true; } return _IP_MULTICAST_LOOPContent; } }
        private static int _IP_MULTICAST_LOOPContent = default;
        private static bool _IP_MULTICAST_LOOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IP_MULTICAST_TTL"/>
        /// </summary>
        public static int IP_MULTICAST_TTL { get { if (!_IP_MULTICAST_TTLReady) { _IP_MULTICAST_TTLContent = SGetField<int>(LocalBridgeClazz, "IP_MULTICAST_TTL"); _IP_MULTICAST_TTLReady = true; } return _IP_MULTICAST_TTLContent; } }
        private static int _IP_MULTICAST_TTLContent = default;
        private static bool _IP_MULTICAST_TTLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IP_TOS"/>
        /// </summary>
        public static int IP_TOS { get { if (!_IP_TOSReady) { _IP_TOSContent = SGetField<int>(LocalBridgeClazz, "IP_TOS"); _IP_TOSReady = true; } return _IP_TOSContent; } }
        private static int _IP_TOSContent = default;
        private static bool _IP_TOSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IP_TTL"/>
        /// </summary>
        public static int IP_TTL { get { if (!_IP_TTLReady) { _IP_TTLContent = SGetField<int>(LocalBridgeClazz, "IP_TTL"); _IP_TTLReady = true; } return _IP_TTLContent; } }
        private static int _IP_TTLContent = default;
        private static bool _IP_TTLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPPROTO_ICMP"/>
        /// </summary>
        public static int IPPROTO_ICMP { get { if (!_IPPROTO_ICMPReady) { _IPPROTO_ICMPContent = SGetField<int>(LocalBridgeClazz, "IPPROTO_ICMP"); _IPPROTO_ICMPReady = true; } return _IPPROTO_ICMPContent; } }
        private static int _IPPROTO_ICMPContent = default;
        private static bool _IPPROTO_ICMPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPPROTO_ICMPV6"/>
        /// </summary>
        public static int IPPROTO_ICMPV6 { get { if (!_IPPROTO_ICMPV6Ready) { _IPPROTO_ICMPV6Content = SGetField<int>(LocalBridgeClazz, "IPPROTO_ICMPV6"); _IPPROTO_ICMPV6Ready = true; } return _IPPROTO_ICMPV6Content; } }
        private static int _IPPROTO_ICMPV6Content = default;
        private static bool _IPPROTO_ICMPV6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPPROTO_IP"/>
        /// </summary>
        public static int IPPROTO_IP { get { if (!_IPPROTO_IPReady) { _IPPROTO_IPContent = SGetField<int>(LocalBridgeClazz, "IPPROTO_IP"); _IPPROTO_IPReady = true; } return _IPPROTO_IPContent; } }
        private static int _IPPROTO_IPContent = default;
        private static bool _IPPROTO_IPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPPROTO_IPV6"/>
        /// </summary>
        public static int IPPROTO_IPV6 { get { if (!_IPPROTO_IPV6Ready) { _IPPROTO_IPV6Content = SGetField<int>(LocalBridgeClazz, "IPPROTO_IPV6"); _IPPROTO_IPV6Ready = true; } return _IPPROTO_IPV6Content; } }
        private static int _IPPROTO_IPV6Content = default;
        private static bool _IPPROTO_IPV6Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPPROTO_RAW"/>
        /// </summary>
        public static int IPPROTO_RAW { get { if (!_IPPROTO_RAWReady) { _IPPROTO_RAWContent = SGetField<int>(LocalBridgeClazz, "IPPROTO_RAW"); _IPPROTO_RAWReady = true; } return _IPPROTO_RAWContent; } }
        private static int _IPPROTO_RAWContent = default;
        private static bool _IPPROTO_RAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPPROTO_TCP"/>
        /// </summary>
        public static int IPPROTO_TCP { get { if (!_IPPROTO_TCPReady) { _IPPROTO_TCPContent = SGetField<int>(LocalBridgeClazz, "IPPROTO_TCP"); _IPPROTO_TCPReady = true; } return _IPPROTO_TCPContent; } }
        private static int _IPPROTO_TCPContent = default;
        private static bool _IPPROTO_TCPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPPROTO_UDP"/>
        /// </summary>
        public static int IPPROTO_UDP { get { if (!_IPPROTO_UDPReady) { _IPPROTO_UDPContent = SGetField<int>(LocalBridgeClazz, "IPPROTO_UDP"); _IPPROTO_UDPReady = true; } return _IPPROTO_UDPContent; } }
        private static int _IPPROTO_UDPContent = default;
        private static bool _IPPROTO_UDPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPV6_CHECKSUM"/>
        /// </summary>
        public static int IPV6_CHECKSUM { get { if (!_IPV6_CHECKSUMReady) { _IPV6_CHECKSUMContent = SGetField<int>(LocalBridgeClazz, "IPV6_CHECKSUM"); _IPV6_CHECKSUMReady = true; } return _IPV6_CHECKSUMContent; } }
        private static int _IPV6_CHECKSUMContent = default;
        private static bool _IPV6_CHECKSUMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPV6_MULTICAST_HOPS"/>
        /// </summary>
        public static int IPV6_MULTICAST_HOPS { get { if (!_IPV6_MULTICAST_HOPSReady) { _IPV6_MULTICAST_HOPSContent = SGetField<int>(LocalBridgeClazz, "IPV6_MULTICAST_HOPS"); _IPV6_MULTICAST_HOPSReady = true; } return _IPV6_MULTICAST_HOPSContent; } }
        private static int _IPV6_MULTICAST_HOPSContent = default;
        private static bool _IPV6_MULTICAST_HOPSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPV6_MULTICAST_IF"/>
        /// </summary>
        public static int IPV6_MULTICAST_IF { get { if (!_IPV6_MULTICAST_IFReady) { _IPV6_MULTICAST_IFContent = SGetField<int>(LocalBridgeClazz, "IPV6_MULTICAST_IF"); _IPV6_MULTICAST_IFReady = true; } return _IPV6_MULTICAST_IFContent; } }
        private static int _IPV6_MULTICAST_IFContent = default;
        private static bool _IPV6_MULTICAST_IFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPV6_MULTICAST_LOOP"/>
        /// </summary>
        public static int IPV6_MULTICAST_LOOP { get { if (!_IPV6_MULTICAST_LOOPReady) { _IPV6_MULTICAST_LOOPContent = SGetField<int>(LocalBridgeClazz, "IPV6_MULTICAST_LOOP"); _IPV6_MULTICAST_LOOPReady = true; } return _IPV6_MULTICAST_LOOPContent; } }
        private static int _IPV6_MULTICAST_LOOPContent = default;
        private static bool _IPV6_MULTICAST_LOOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPV6_RECVDSTOPTS"/>
        /// </summary>
        public static int IPV6_RECVDSTOPTS { get { if (!_IPV6_RECVDSTOPTSReady) { _IPV6_RECVDSTOPTSContent = SGetField<int>(LocalBridgeClazz, "IPV6_RECVDSTOPTS"); _IPV6_RECVDSTOPTSReady = true; } return _IPV6_RECVDSTOPTSContent; } }
        private static int _IPV6_RECVDSTOPTSContent = default;
        private static bool _IPV6_RECVDSTOPTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPV6_RECVHOPLIMIT"/>
        /// </summary>
        public static int IPV6_RECVHOPLIMIT { get { if (!_IPV6_RECVHOPLIMITReady) { _IPV6_RECVHOPLIMITContent = SGetField<int>(LocalBridgeClazz, "IPV6_RECVHOPLIMIT"); _IPV6_RECVHOPLIMITReady = true; } return _IPV6_RECVHOPLIMITContent; } }
        private static int _IPV6_RECVHOPLIMITContent = default;
        private static bool _IPV6_RECVHOPLIMITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPV6_RECVHOPOPTS"/>
        /// </summary>
        public static int IPV6_RECVHOPOPTS { get { if (!_IPV6_RECVHOPOPTSReady) { _IPV6_RECVHOPOPTSContent = SGetField<int>(LocalBridgeClazz, "IPV6_RECVHOPOPTS"); _IPV6_RECVHOPOPTSReady = true; } return _IPV6_RECVHOPOPTSContent; } }
        private static int _IPV6_RECVHOPOPTSContent = default;
        private static bool _IPV6_RECVHOPOPTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPV6_RECVPKTINFO"/>
        /// </summary>
        public static int IPV6_RECVPKTINFO { get { if (!_IPV6_RECVPKTINFOReady) { _IPV6_RECVPKTINFOContent = SGetField<int>(LocalBridgeClazz, "IPV6_RECVPKTINFO"); _IPV6_RECVPKTINFOReady = true; } return _IPV6_RECVPKTINFOContent; } }
        private static int _IPV6_RECVPKTINFOContent = default;
        private static bool _IPV6_RECVPKTINFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPV6_RECVRTHDR"/>
        /// </summary>
        public static int IPV6_RECVRTHDR { get { if (!_IPV6_RECVRTHDRReady) { _IPV6_RECVRTHDRContent = SGetField<int>(LocalBridgeClazz, "IPV6_RECVRTHDR"); _IPV6_RECVRTHDRReady = true; } return _IPV6_RECVRTHDRContent; } }
        private static int _IPV6_RECVRTHDRContent = default;
        private static bool _IPV6_RECVRTHDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPV6_RECVTCLASS"/>
        /// </summary>
        public static int IPV6_RECVTCLASS { get { if (!_IPV6_RECVTCLASSReady) { _IPV6_RECVTCLASSContent = SGetField<int>(LocalBridgeClazz, "IPV6_RECVTCLASS"); _IPV6_RECVTCLASSReady = true; } return _IPV6_RECVTCLASSContent; } }
        private static int _IPV6_RECVTCLASSContent = default;
        private static bool _IPV6_RECVTCLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPV6_TCLASS"/>
        /// </summary>
        public static int IPV6_TCLASS { get { if (!_IPV6_TCLASSReady) { _IPV6_TCLASSContent = SGetField<int>(LocalBridgeClazz, "IPV6_TCLASS"); _IPV6_TCLASSReady = true; } return _IPV6_TCLASSContent; } }
        private static int _IPV6_TCLASSContent = default;
        private static bool _IPV6_TCLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPV6_UNICAST_HOPS"/>
        /// </summary>
        public static int IPV6_UNICAST_HOPS { get { if (!_IPV6_UNICAST_HOPSReady) { _IPV6_UNICAST_HOPSContent = SGetField<int>(LocalBridgeClazz, "IPV6_UNICAST_HOPS"); _IPV6_UNICAST_HOPSReady = true; } return _IPV6_UNICAST_HOPSContent; } }
        private static int _IPV6_UNICAST_HOPSContent = default;
        private static bool _IPV6_UNICAST_HOPSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#IPV6_V6ONLY"/>
        /// </summary>
        public static int IPV6_V6ONLY { get { if (!_IPV6_V6ONLYReady) { _IPV6_V6ONLYContent = SGetField<int>(LocalBridgeClazz, "IPV6_V6ONLY"); _IPV6_V6ONLYReady = true; } return _IPV6_V6ONLYContent; } }
        private static int _IPV6_V6ONLYContent = default;
        private static bool _IPV6_V6ONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MAP_ANONYMOUS"/>
        /// </summary>
        public static int MAP_ANONYMOUS { get { if (!_MAP_ANONYMOUSReady) { _MAP_ANONYMOUSContent = SGetField<int>(LocalBridgeClazz, "MAP_ANONYMOUS"); _MAP_ANONYMOUSReady = true; } return _MAP_ANONYMOUSContent; } }
        private static int _MAP_ANONYMOUSContent = default;
        private static bool _MAP_ANONYMOUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MAP_FIXED"/>
        /// </summary>
        public static int MAP_FIXED { get { if (!_MAP_FIXEDReady) { _MAP_FIXEDContent = SGetField<int>(LocalBridgeClazz, "MAP_FIXED"); _MAP_FIXEDReady = true; } return _MAP_FIXEDContent; } }
        private static int _MAP_FIXEDContent = default;
        private static bool _MAP_FIXEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MAP_PRIVATE"/>
        /// </summary>
        public static int MAP_PRIVATE { get { if (!_MAP_PRIVATEReady) { _MAP_PRIVATEContent = SGetField<int>(LocalBridgeClazz, "MAP_PRIVATE"); _MAP_PRIVATEReady = true; } return _MAP_PRIVATEContent; } }
        private static int _MAP_PRIVATEContent = default;
        private static bool _MAP_PRIVATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MAP_SHARED"/>
        /// </summary>
        public static int MAP_SHARED { get { if (!_MAP_SHAREDReady) { _MAP_SHAREDContent = SGetField<int>(LocalBridgeClazz, "MAP_SHARED"); _MAP_SHAREDReady = true; } return _MAP_SHAREDContent; } }
        private static int _MAP_SHAREDContent = default;
        private static bool _MAP_SHAREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MCAST_BLOCK_SOURCE"/>
        /// </summary>
        public static int MCAST_BLOCK_SOURCE { get { if (!_MCAST_BLOCK_SOURCEReady) { _MCAST_BLOCK_SOURCEContent = SGetField<int>(LocalBridgeClazz, "MCAST_BLOCK_SOURCE"); _MCAST_BLOCK_SOURCEReady = true; } return _MCAST_BLOCK_SOURCEContent; } }
        private static int _MCAST_BLOCK_SOURCEContent = default;
        private static bool _MCAST_BLOCK_SOURCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MCAST_JOIN_GROUP"/>
        /// </summary>
        public static int MCAST_JOIN_GROUP { get { if (!_MCAST_JOIN_GROUPReady) { _MCAST_JOIN_GROUPContent = SGetField<int>(LocalBridgeClazz, "MCAST_JOIN_GROUP"); _MCAST_JOIN_GROUPReady = true; } return _MCAST_JOIN_GROUPContent; } }
        private static int _MCAST_JOIN_GROUPContent = default;
        private static bool _MCAST_JOIN_GROUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MCAST_JOIN_SOURCE_GROUP"/>
        /// </summary>
        public static int MCAST_JOIN_SOURCE_GROUP { get { if (!_MCAST_JOIN_SOURCE_GROUPReady) { _MCAST_JOIN_SOURCE_GROUPContent = SGetField<int>(LocalBridgeClazz, "MCAST_JOIN_SOURCE_GROUP"); _MCAST_JOIN_SOURCE_GROUPReady = true; } return _MCAST_JOIN_SOURCE_GROUPContent; } }
        private static int _MCAST_JOIN_SOURCE_GROUPContent = default;
        private static bool _MCAST_JOIN_SOURCE_GROUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MCAST_LEAVE_GROUP"/>
        /// </summary>
        public static int MCAST_LEAVE_GROUP { get { if (!_MCAST_LEAVE_GROUPReady) { _MCAST_LEAVE_GROUPContent = SGetField<int>(LocalBridgeClazz, "MCAST_LEAVE_GROUP"); _MCAST_LEAVE_GROUPReady = true; } return _MCAST_LEAVE_GROUPContent; } }
        private static int _MCAST_LEAVE_GROUPContent = default;
        private static bool _MCAST_LEAVE_GROUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MCAST_LEAVE_SOURCE_GROUP"/>
        /// </summary>
        public static int MCAST_LEAVE_SOURCE_GROUP { get { if (!_MCAST_LEAVE_SOURCE_GROUPReady) { _MCAST_LEAVE_SOURCE_GROUPContent = SGetField<int>(LocalBridgeClazz, "MCAST_LEAVE_SOURCE_GROUP"); _MCAST_LEAVE_SOURCE_GROUPReady = true; } return _MCAST_LEAVE_SOURCE_GROUPContent; } }
        private static int _MCAST_LEAVE_SOURCE_GROUPContent = default;
        private static bool _MCAST_LEAVE_SOURCE_GROUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MCAST_UNBLOCK_SOURCE"/>
        /// </summary>
        public static int MCAST_UNBLOCK_SOURCE { get { if (!_MCAST_UNBLOCK_SOURCEReady) { _MCAST_UNBLOCK_SOURCEContent = SGetField<int>(LocalBridgeClazz, "MCAST_UNBLOCK_SOURCE"); _MCAST_UNBLOCK_SOURCEReady = true; } return _MCAST_UNBLOCK_SOURCEContent; } }
        private static int _MCAST_UNBLOCK_SOURCEContent = default;
        private static bool _MCAST_UNBLOCK_SOURCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MCL_CURRENT"/>
        /// </summary>
        public static int MCL_CURRENT { get { if (!_MCL_CURRENTReady) { _MCL_CURRENTContent = SGetField<int>(LocalBridgeClazz, "MCL_CURRENT"); _MCL_CURRENTReady = true; } return _MCL_CURRENTContent; } }
        private static int _MCL_CURRENTContent = default;
        private static bool _MCL_CURRENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MCL_FUTURE"/>
        /// </summary>
        public static int MCL_FUTURE { get { if (!_MCL_FUTUREReady) { _MCL_FUTUREContent = SGetField<int>(LocalBridgeClazz, "MCL_FUTURE"); _MCL_FUTUREReady = true; } return _MCL_FUTUREContent; } }
        private static int _MCL_FUTUREContent = default;
        private static bool _MCL_FUTUREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MFD_CLOEXEC"/>
        /// </summary>
        public static int MFD_CLOEXEC { get { if (!_MFD_CLOEXECReady) { _MFD_CLOEXECContent = SGetField<int>(LocalBridgeClazz, "MFD_CLOEXEC"); _MFD_CLOEXECReady = true; } return _MFD_CLOEXECContent; } }
        private static int _MFD_CLOEXECContent = default;
        private static bool _MFD_CLOEXECReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MS_ASYNC"/>
        /// </summary>
        public static int MS_ASYNC { get { if (!_MS_ASYNCReady) { _MS_ASYNCContent = SGetField<int>(LocalBridgeClazz, "MS_ASYNC"); _MS_ASYNCReady = true; } return _MS_ASYNCContent; } }
        private static int _MS_ASYNCContent = default;
        private static bool _MS_ASYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MS_INVALIDATE"/>
        /// </summary>
        public static int MS_INVALIDATE { get { if (!_MS_INVALIDATEReady) { _MS_INVALIDATEContent = SGetField<int>(LocalBridgeClazz, "MS_INVALIDATE"); _MS_INVALIDATEReady = true; } return _MS_INVALIDATEContent; } }
        private static int _MS_INVALIDATEContent = default;
        private static bool _MS_INVALIDATEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MS_SYNC"/>
        /// </summary>
        public static int MS_SYNC { get { if (!_MS_SYNCReady) { _MS_SYNCContent = SGetField<int>(LocalBridgeClazz, "MS_SYNC"); _MS_SYNCReady = true; } return _MS_SYNCContent; } }
        private static int _MS_SYNCContent = default;
        private static bool _MS_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MSG_CTRUNC"/>
        /// </summary>
        public static int MSG_CTRUNC { get { if (!_MSG_CTRUNCReady) { _MSG_CTRUNCContent = SGetField<int>(LocalBridgeClazz, "MSG_CTRUNC"); _MSG_CTRUNCReady = true; } return _MSG_CTRUNCContent; } }
        private static int _MSG_CTRUNCContent = default;
        private static bool _MSG_CTRUNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MSG_DONTROUTE"/>
        /// </summary>
        public static int MSG_DONTROUTE { get { if (!_MSG_DONTROUTEReady) { _MSG_DONTROUTEContent = SGetField<int>(LocalBridgeClazz, "MSG_DONTROUTE"); _MSG_DONTROUTEReady = true; } return _MSG_DONTROUTEContent; } }
        private static int _MSG_DONTROUTEContent = default;
        private static bool _MSG_DONTROUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MSG_EOR"/>
        /// </summary>
        public static int MSG_EOR { get { if (!_MSG_EORReady) { _MSG_EORContent = SGetField<int>(LocalBridgeClazz, "MSG_EOR"); _MSG_EORReady = true; } return _MSG_EORContent; } }
        private static int _MSG_EORContent = default;
        private static bool _MSG_EORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MSG_OOB"/>
        /// </summary>
        public static int MSG_OOB { get { if (!_MSG_OOBReady) { _MSG_OOBContent = SGetField<int>(LocalBridgeClazz, "MSG_OOB"); _MSG_OOBReady = true; } return _MSG_OOBContent; } }
        private static int _MSG_OOBContent = default;
        private static bool _MSG_OOBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MSG_PEEK"/>
        /// </summary>
        public static int MSG_PEEK { get { if (!_MSG_PEEKReady) { _MSG_PEEKContent = SGetField<int>(LocalBridgeClazz, "MSG_PEEK"); _MSG_PEEKReady = true; } return _MSG_PEEKContent; } }
        private static int _MSG_PEEKContent = default;
        private static bool _MSG_PEEKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MSG_TRUNC"/>
        /// </summary>
        public static int MSG_TRUNC { get { if (!_MSG_TRUNCReady) { _MSG_TRUNCContent = SGetField<int>(LocalBridgeClazz, "MSG_TRUNC"); _MSG_TRUNCReady = true; } return _MSG_TRUNCContent; } }
        private static int _MSG_TRUNCContent = default;
        private static bool _MSG_TRUNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#MSG_WAITALL"/>
        /// </summary>
        public static int MSG_WAITALL { get { if (!_MSG_WAITALLReady) { _MSG_WAITALLContent = SGetField<int>(LocalBridgeClazz, "MSG_WAITALL"); _MSG_WAITALLReady = true; } return _MSG_WAITALLContent; } }
        private static int _MSG_WAITALLContent = default;
        private static bool _MSG_WAITALLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#NETLINK_INET_DIAG"/>
        /// </summary>
        public static int NETLINK_INET_DIAG { get { if (!_NETLINK_INET_DIAGReady) { _NETLINK_INET_DIAGContent = SGetField<int>(LocalBridgeClazz, "NETLINK_INET_DIAG"); _NETLINK_INET_DIAGReady = true; } return _NETLINK_INET_DIAGContent; } }
        private static int _NETLINK_INET_DIAGContent = default;
        private static bool _NETLINK_INET_DIAGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#NETLINK_NETFILTER"/>
        /// </summary>
        public static int NETLINK_NETFILTER { get { if (!_NETLINK_NETFILTERReady) { _NETLINK_NETFILTERContent = SGetField<int>(LocalBridgeClazz, "NETLINK_NETFILTER"); _NETLINK_NETFILTERReady = true; } return _NETLINK_NETFILTERContent; } }
        private static int _NETLINK_NETFILTERContent = default;
        private static bool _NETLINK_NETFILTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#NETLINK_ROUTE"/>
        /// </summary>
        public static int NETLINK_ROUTE { get { if (!_NETLINK_ROUTEReady) { _NETLINK_ROUTEContent = SGetField<int>(LocalBridgeClazz, "NETLINK_ROUTE"); _NETLINK_ROUTEReady = true; } return _NETLINK_ROUTEContent; } }
        private static int _NETLINK_ROUTEContent = default;
        private static bool _NETLINK_ROUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#NI_DGRAM"/>
        /// </summary>
        public static int NI_DGRAM { get { if (!_NI_DGRAMReady) { _NI_DGRAMContent = SGetField<int>(LocalBridgeClazz, "NI_DGRAM"); _NI_DGRAMReady = true; } return _NI_DGRAMContent; } }
        private static int _NI_DGRAMContent = default;
        private static bool _NI_DGRAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#NI_NAMEREQD"/>
        /// </summary>
        public static int NI_NAMEREQD { get { if (!_NI_NAMEREQDReady) { _NI_NAMEREQDContent = SGetField<int>(LocalBridgeClazz, "NI_NAMEREQD"); _NI_NAMEREQDReady = true; } return _NI_NAMEREQDContent; } }
        private static int _NI_NAMEREQDContent = default;
        private static bool _NI_NAMEREQDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#NI_NOFQDN"/>
        /// </summary>
        public static int NI_NOFQDN { get { if (!_NI_NOFQDNReady) { _NI_NOFQDNContent = SGetField<int>(LocalBridgeClazz, "NI_NOFQDN"); _NI_NOFQDNReady = true; } return _NI_NOFQDNContent; } }
        private static int _NI_NOFQDNContent = default;
        private static bool _NI_NOFQDNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#NI_NUMERICHOST"/>
        /// </summary>
        public static int NI_NUMERICHOST { get { if (!_NI_NUMERICHOSTReady) { _NI_NUMERICHOSTContent = SGetField<int>(LocalBridgeClazz, "NI_NUMERICHOST"); _NI_NUMERICHOSTReady = true; } return _NI_NUMERICHOSTContent; } }
        private static int _NI_NUMERICHOSTContent = default;
        private static bool _NI_NUMERICHOSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#NI_NUMERICSERV"/>
        /// </summary>
        public static int NI_NUMERICSERV { get { if (!_NI_NUMERICSERVReady) { _NI_NUMERICSERVContent = SGetField<int>(LocalBridgeClazz, "NI_NUMERICSERV"); _NI_NUMERICSERVReady = true; } return _NI_NUMERICSERVContent; } }
        private static int _NI_NUMERICSERVContent = default;
        private static bool _NI_NUMERICSERVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#O_ACCMODE"/>
        /// </summary>
        public static int O_ACCMODE { get { if (!_O_ACCMODEReady) { _O_ACCMODEContent = SGetField<int>(LocalBridgeClazz, "O_ACCMODE"); _O_ACCMODEReady = true; } return _O_ACCMODEContent; } }
        private static int _O_ACCMODEContent = default;
        private static bool _O_ACCMODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#O_APPEND"/>
        /// </summary>
        public static int O_APPEND { get { if (!_O_APPENDReady) { _O_APPENDContent = SGetField<int>(LocalBridgeClazz, "O_APPEND"); _O_APPENDReady = true; } return _O_APPENDContent; } }
        private static int _O_APPENDContent = default;
        private static bool _O_APPENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#O_CLOEXEC"/>
        /// </summary>
        public static int O_CLOEXEC { get { if (!_O_CLOEXECReady) { _O_CLOEXECContent = SGetField<int>(LocalBridgeClazz, "O_CLOEXEC"); _O_CLOEXECReady = true; } return _O_CLOEXECContent; } }
        private static int _O_CLOEXECContent = default;
        private static bool _O_CLOEXECReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#O_CREAT"/>
        /// </summary>
        public static int O_CREAT { get { if (!_O_CREATReady) { _O_CREATContent = SGetField<int>(LocalBridgeClazz, "O_CREAT"); _O_CREATReady = true; } return _O_CREATContent; } }
        private static int _O_CREATContent = default;
        private static bool _O_CREATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#O_DSYNC"/>
        /// </summary>
        public static int O_DSYNC { get { if (!_O_DSYNCReady) { _O_DSYNCContent = SGetField<int>(LocalBridgeClazz, "O_DSYNC"); _O_DSYNCReady = true; } return _O_DSYNCContent; } }
        private static int _O_DSYNCContent = default;
        private static bool _O_DSYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#O_EXCL"/>
        /// </summary>
        public static int O_EXCL { get { if (!_O_EXCLReady) { _O_EXCLContent = SGetField<int>(LocalBridgeClazz, "O_EXCL"); _O_EXCLReady = true; } return _O_EXCLContent; } }
        private static int _O_EXCLContent = default;
        private static bool _O_EXCLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#O_NOCTTY"/>
        /// </summary>
        public static int O_NOCTTY { get { if (!_O_NOCTTYReady) { _O_NOCTTYContent = SGetField<int>(LocalBridgeClazz, "O_NOCTTY"); _O_NOCTTYReady = true; } return _O_NOCTTYContent; } }
        private static int _O_NOCTTYContent = default;
        private static bool _O_NOCTTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#O_NOFOLLOW"/>
        /// </summary>
        public static int O_NOFOLLOW { get { if (!_O_NOFOLLOWReady) { _O_NOFOLLOWContent = SGetField<int>(LocalBridgeClazz, "O_NOFOLLOW"); _O_NOFOLLOWReady = true; } return _O_NOFOLLOWContent; } }
        private static int _O_NOFOLLOWContent = default;
        private static bool _O_NOFOLLOWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#O_NONBLOCK"/>
        /// </summary>
        public static int O_NONBLOCK { get { if (!_O_NONBLOCKReady) { _O_NONBLOCKContent = SGetField<int>(LocalBridgeClazz, "O_NONBLOCK"); _O_NONBLOCKReady = true; } return _O_NONBLOCKContent; } }
        private static int _O_NONBLOCKContent = default;
        private static bool _O_NONBLOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#O_RDONLY"/>
        /// </summary>
        public static int O_RDONLY { get { if (!_O_RDONLYReady) { _O_RDONLYContent = SGetField<int>(LocalBridgeClazz, "O_RDONLY"); _O_RDONLYReady = true; } return _O_RDONLYContent; } }
        private static int _O_RDONLYContent = default;
        private static bool _O_RDONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#O_RDWR"/>
        /// </summary>
        public static int O_RDWR { get { if (!_O_RDWRReady) { _O_RDWRContent = SGetField<int>(LocalBridgeClazz, "O_RDWR"); _O_RDWRReady = true; } return _O_RDWRContent; } }
        private static int _O_RDWRContent = default;
        private static bool _O_RDWRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#O_SYNC"/>
        /// </summary>
        public static int O_SYNC { get { if (!_O_SYNCReady) { _O_SYNCContent = SGetField<int>(LocalBridgeClazz, "O_SYNC"); _O_SYNCReady = true; } return _O_SYNCContent; } }
        private static int _O_SYNCContent = default;
        private static bool _O_SYNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#O_TRUNC"/>
        /// </summary>
        public static int O_TRUNC { get { if (!_O_TRUNCReady) { _O_TRUNCContent = SGetField<int>(LocalBridgeClazz, "O_TRUNC"); _O_TRUNCReady = true; } return _O_TRUNCContent; } }
        private static int _O_TRUNCContent = default;
        private static bool _O_TRUNCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#O_WRONLY"/>
        /// </summary>
        public static int O_WRONLY { get { if (!_O_WRONLYReady) { _O_WRONLYContent = SGetField<int>(LocalBridgeClazz, "O_WRONLY"); _O_WRONLYReady = true; } return _O_WRONLYContent; } }
        private static int _O_WRONLYContent = default;
        private static bool _O_WRONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#POLLERR"/>
        /// </summary>
        public static int POLLERR { get { if (!_POLLERRReady) { _POLLERRContent = SGetField<int>(LocalBridgeClazz, "POLLERR"); _POLLERRReady = true; } return _POLLERRContent; } }
        private static int _POLLERRContent = default;
        private static bool _POLLERRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#POLLHUP"/>
        /// </summary>
        public static int POLLHUP { get { if (!_POLLHUPReady) { _POLLHUPContent = SGetField<int>(LocalBridgeClazz, "POLLHUP"); _POLLHUPReady = true; } return _POLLHUPContent; } }
        private static int _POLLHUPContent = default;
        private static bool _POLLHUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#POLLIN"/>
        /// </summary>
        public static int POLLIN { get { if (!_POLLINReady) { _POLLINContent = SGetField<int>(LocalBridgeClazz, "POLLIN"); _POLLINReady = true; } return _POLLINContent; } }
        private static int _POLLINContent = default;
        private static bool _POLLINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#POLLNVAL"/>
        /// </summary>
        public static int POLLNVAL { get { if (!_POLLNVALReady) { _POLLNVALContent = SGetField<int>(LocalBridgeClazz, "POLLNVAL"); _POLLNVALReady = true; } return _POLLNVALContent; } }
        private static int _POLLNVALContent = default;
        private static bool _POLLNVALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#POLLOUT"/>
        /// </summary>
        public static int POLLOUT { get { if (!_POLLOUTReady) { _POLLOUTContent = SGetField<int>(LocalBridgeClazz, "POLLOUT"); _POLLOUTReady = true; } return _POLLOUTContent; } }
        private static int _POLLOUTContent = default;
        private static bool _POLLOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#POLLPRI"/>
        /// </summary>
        public static int POLLPRI { get { if (!_POLLPRIReady) { _POLLPRIContent = SGetField<int>(LocalBridgeClazz, "POLLPRI"); _POLLPRIReady = true; } return _POLLPRIContent; } }
        private static int _POLLPRIContent = default;
        private static bool _POLLPRIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#POLLRDBAND"/>
        /// </summary>
        public static int POLLRDBAND { get { if (!_POLLRDBANDReady) { _POLLRDBANDContent = SGetField<int>(LocalBridgeClazz, "POLLRDBAND"); _POLLRDBANDReady = true; } return _POLLRDBANDContent; } }
        private static int _POLLRDBANDContent = default;
        private static bool _POLLRDBANDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#POLLRDNORM"/>
        /// </summary>
        public static int POLLRDNORM { get { if (!_POLLRDNORMReady) { _POLLRDNORMContent = SGetField<int>(LocalBridgeClazz, "POLLRDNORM"); _POLLRDNORMReady = true; } return _POLLRDNORMContent; } }
        private static int _POLLRDNORMContent = default;
        private static bool _POLLRDNORMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#POLLWRBAND"/>
        /// </summary>
        public static int POLLWRBAND { get { if (!_POLLWRBANDReady) { _POLLWRBANDContent = SGetField<int>(LocalBridgeClazz, "POLLWRBAND"); _POLLWRBANDReady = true; } return _POLLWRBANDContent; } }
        private static int _POLLWRBANDContent = default;
        private static bool _POLLWRBANDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#POLLWRNORM"/>
        /// </summary>
        public static int POLLWRNORM { get { if (!_POLLWRNORMReady) { _POLLWRNORMContent = SGetField<int>(LocalBridgeClazz, "POLLWRNORM"); _POLLWRNORMReady = true; } return _POLLWRNORMContent; } }
        private static int _POLLWRNORMContent = default;
        private static bool _POLLWRNORMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#PR_GET_DUMPABLE"/>
        /// </summary>
        public static int PR_GET_DUMPABLE { get { if (!_PR_GET_DUMPABLEReady) { _PR_GET_DUMPABLEContent = SGetField<int>(LocalBridgeClazz, "PR_GET_DUMPABLE"); _PR_GET_DUMPABLEReady = true; } return _PR_GET_DUMPABLEContent; } }
        private static int _PR_GET_DUMPABLEContent = default;
        private static bool _PR_GET_DUMPABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#PR_SET_DUMPABLE"/>
        /// </summary>
        public static int PR_SET_DUMPABLE { get { if (!_PR_SET_DUMPABLEReady) { _PR_SET_DUMPABLEContent = SGetField<int>(LocalBridgeClazz, "PR_SET_DUMPABLE"); _PR_SET_DUMPABLEReady = true; } return _PR_SET_DUMPABLEContent; } }
        private static int _PR_SET_DUMPABLEContent = default;
        private static bool _PR_SET_DUMPABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#PR_SET_NO_NEW_PRIVS"/>
        /// </summary>
        public static int PR_SET_NO_NEW_PRIVS { get { if (!_PR_SET_NO_NEW_PRIVSReady) { _PR_SET_NO_NEW_PRIVSContent = SGetField<int>(LocalBridgeClazz, "PR_SET_NO_NEW_PRIVS"); _PR_SET_NO_NEW_PRIVSReady = true; } return _PR_SET_NO_NEW_PRIVSContent; } }
        private static int _PR_SET_NO_NEW_PRIVSContent = default;
        private static bool _PR_SET_NO_NEW_PRIVSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#PROT_EXEC"/>
        /// </summary>
        public static int PROT_EXEC { get { if (!_PROT_EXECReady) { _PROT_EXECContent = SGetField<int>(LocalBridgeClazz, "PROT_EXEC"); _PROT_EXECReady = true; } return _PROT_EXECContent; } }
        private static int _PROT_EXECContent = default;
        private static bool _PROT_EXECReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#PROT_NONE"/>
        /// </summary>
        public static int PROT_NONE { get { if (!_PROT_NONEReady) { _PROT_NONEContent = SGetField<int>(LocalBridgeClazz, "PROT_NONE"); _PROT_NONEReady = true; } return _PROT_NONEContent; } }
        private static int _PROT_NONEContent = default;
        private static bool _PROT_NONEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#PROT_READ"/>
        /// </summary>
        public static int PROT_READ { get { if (!_PROT_READReady) { _PROT_READContent = SGetField<int>(LocalBridgeClazz, "PROT_READ"); _PROT_READReady = true; } return _PROT_READContent; } }
        private static int _PROT_READContent = default;
        private static bool _PROT_READReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#PROT_WRITE"/>
        /// </summary>
        public static int PROT_WRITE { get { if (!_PROT_WRITEReady) { _PROT_WRITEContent = SGetField<int>(LocalBridgeClazz, "PROT_WRITE"); _PROT_WRITEReady = true; } return _PROT_WRITEContent; } }
        private static int _PROT_WRITEContent = default;
        private static bool _PROT_WRITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#R_OK"/>
        /// </summary>
        public static int R_OK { get { if (!_R_OKReady) { _R_OKContent = SGetField<int>(LocalBridgeClazz, "R_OK"); _R_OKReady = true; } return _R_OKContent; } }
        private static int _R_OKContent = default;
        private static bool _R_OKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#RT_SCOPE_HOST"/>
        /// </summary>
        public static int RT_SCOPE_HOST { get { if (!_RT_SCOPE_HOSTReady) { _RT_SCOPE_HOSTContent = SGetField<int>(LocalBridgeClazz, "RT_SCOPE_HOST"); _RT_SCOPE_HOSTReady = true; } return _RT_SCOPE_HOSTContent; } }
        private static int _RT_SCOPE_HOSTContent = default;
        private static bool _RT_SCOPE_HOSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#RT_SCOPE_LINK"/>
        /// </summary>
        public static int RT_SCOPE_LINK { get { if (!_RT_SCOPE_LINKReady) { _RT_SCOPE_LINKContent = SGetField<int>(LocalBridgeClazz, "RT_SCOPE_LINK"); _RT_SCOPE_LINKReady = true; } return _RT_SCOPE_LINKContent; } }
        private static int _RT_SCOPE_LINKContent = default;
        private static bool _RT_SCOPE_LINKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#RT_SCOPE_NOWHERE"/>
        /// </summary>
        public static int RT_SCOPE_NOWHERE { get { if (!_RT_SCOPE_NOWHEREReady) { _RT_SCOPE_NOWHEREContent = SGetField<int>(LocalBridgeClazz, "RT_SCOPE_NOWHERE"); _RT_SCOPE_NOWHEREReady = true; } return _RT_SCOPE_NOWHEREContent; } }
        private static int _RT_SCOPE_NOWHEREContent = default;
        private static bool _RT_SCOPE_NOWHEREReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#RT_SCOPE_SITE"/>
        /// </summary>
        public static int RT_SCOPE_SITE { get { if (!_RT_SCOPE_SITEReady) { _RT_SCOPE_SITEContent = SGetField<int>(LocalBridgeClazz, "RT_SCOPE_SITE"); _RT_SCOPE_SITEReady = true; } return _RT_SCOPE_SITEContent; } }
        private static int _RT_SCOPE_SITEContent = default;
        private static bool _RT_SCOPE_SITEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#RT_SCOPE_UNIVERSE"/>
        /// </summary>
        public static int RT_SCOPE_UNIVERSE { get { if (!_RT_SCOPE_UNIVERSEReady) { _RT_SCOPE_UNIVERSEContent = SGetField<int>(LocalBridgeClazz, "RT_SCOPE_UNIVERSE"); _RT_SCOPE_UNIVERSEReady = true; } return _RT_SCOPE_UNIVERSEContent; } }
        private static int _RT_SCOPE_UNIVERSEContent = default;
        private static bool _RT_SCOPE_UNIVERSEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#RTMGRP_NEIGH"/>
        /// </summary>
        public static int RTMGRP_NEIGH { get { if (!_RTMGRP_NEIGHReady) { _RTMGRP_NEIGHContent = SGetField<int>(LocalBridgeClazz, "RTMGRP_NEIGH"); _RTMGRP_NEIGHReady = true; } return _RTMGRP_NEIGHContent; } }
        private static int _RTMGRP_NEIGHContent = default;
        private static bool _RTMGRP_NEIGHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IFBLK"/>
        /// </summary>
        public static int S_IFBLK { get { if (!_S_IFBLKReady) { _S_IFBLKContent = SGetField<int>(LocalBridgeClazz, "S_IFBLK"); _S_IFBLKReady = true; } return _S_IFBLKContent; } }
        private static int _S_IFBLKContent = default;
        private static bool _S_IFBLKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IFCHR"/>
        /// </summary>
        public static int S_IFCHR { get { if (!_S_IFCHRReady) { _S_IFCHRContent = SGetField<int>(LocalBridgeClazz, "S_IFCHR"); _S_IFCHRReady = true; } return _S_IFCHRContent; } }
        private static int _S_IFCHRContent = default;
        private static bool _S_IFCHRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IFDIR"/>
        /// </summary>
        public static int S_IFDIR { get { if (!_S_IFDIRReady) { _S_IFDIRContent = SGetField<int>(LocalBridgeClazz, "S_IFDIR"); _S_IFDIRReady = true; } return _S_IFDIRContent; } }
        private static int _S_IFDIRContent = default;
        private static bool _S_IFDIRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IFIFO"/>
        /// </summary>
        public static int S_IFIFO { get { if (!_S_IFIFOReady) { _S_IFIFOContent = SGetField<int>(LocalBridgeClazz, "S_IFIFO"); _S_IFIFOReady = true; } return _S_IFIFOContent; } }
        private static int _S_IFIFOContent = default;
        private static bool _S_IFIFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IFLNK"/>
        /// </summary>
        public static int S_IFLNK { get { if (!_S_IFLNKReady) { _S_IFLNKContent = SGetField<int>(LocalBridgeClazz, "S_IFLNK"); _S_IFLNKReady = true; } return _S_IFLNKContent; } }
        private static int _S_IFLNKContent = default;
        private static bool _S_IFLNKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IFMT"/>
        /// </summary>
        public static int S_IFMT { get { if (!_S_IFMTReady) { _S_IFMTContent = SGetField<int>(LocalBridgeClazz, "S_IFMT"); _S_IFMTReady = true; } return _S_IFMTContent; } }
        private static int _S_IFMTContent = default;
        private static bool _S_IFMTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IFREG"/>
        /// </summary>
        public static int S_IFREG { get { if (!_S_IFREGReady) { _S_IFREGContent = SGetField<int>(LocalBridgeClazz, "S_IFREG"); _S_IFREGReady = true; } return _S_IFREGContent; } }
        private static int _S_IFREGContent = default;
        private static bool _S_IFREGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IFSOCK"/>
        /// </summary>
        public static int S_IFSOCK { get { if (!_S_IFSOCKReady) { _S_IFSOCKContent = SGetField<int>(LocalBridgeClazz, "S_IFSOCK"); _S_IFSOCKReady = true; } return _S_IFSOCKContent; } }
        private static int _S_IFSOCKContent = default;
        private static bool _S_IFSOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IRGRP"/>
        /// </summary>
        public static int S_IRGRP { get { if (!_S_IRGRPReady) { _S_IRGRPContent = SGetField<int>(LocalBridgeClazz, "S_IRGRP"); _S_IRGRPReady = true; } return _S_IRGRPContent; } }
        private static int _S_IRGRPContent = default;
        private static bool _S_IRGRPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IROTH"/>
        /// </summary>
        public static int S_IROTH { get { if (!_S_IROTHReady) { _S_IROTHContent = SGetField<int>(LocalBridgeClazz, "S_IROTH"); _S_IROTHReady = true; } return _S_IROTHContent; } }
        private static int _S_IROTHContent = default;
        private static bool _S_IROTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IRUSR"/>
        /// </summary>
        public static int S_IRUSR { get { if (!_S_IRUSRReady) { _S_IRUSRContent = SGetField<int>(LocalBridgeClazz, "S_IRUSR"); _S_IRUSRReady = true; } return _S_IRUSRContent; } }
        private static int _S_IRUSRContent = default;
        private static bool _S_IRUSRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IRWXG"/>
        /// </summary>
        public static int S_IRWXG { get { if (!_S_IRWXGReady) { _S_IRWXGContent = SGetField<int>(LocalBridgeClazz, "S_IRWXG"); _S_IRWXGReady = true; } return _S_IRWXGContent; } }
        private static int _S_IRWXGContent = default;
        private static bool _S_IRWXGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IRWXO"/>
        /// </summary>
        public static int S_IRWXO { get { if (!_S_IRWXOReady) { _S_IRWXOContent = SGetField<int>(LocalBridgeClazz, "S_IRWXO"); _S_IRWXOReady = true; } return _S_IRWXOContent; } }
        private static int _S_IRWXOContent = default;
        private static bool _S_IRWXOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IRWXU"/>
        /// </summary>
        public static int S_IRWXU { get { if (!_S_IRWXUReady) { _S_IRWXUContent = SGetField<int>(LocalBridgeClazz, "S_IRWXU"); _S_IRWXUReady = true; } return _S_IRWXUContent; } }
        private static int _S_IRWXUContent = default;
        private static bool _S_IRWXUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_ISGID"/>
        /// </summary>
        public static int S_ISGID { get { if (!_S_ISGIDReady) { _S_ISGIDContent = SGetField<int>(LocalBridgeClazz, "S_ISGID"); _S_ISGIDReady = true; } return _S_ISGIDContent; } }
        private static int _S_ISGIDContent = default;
        private static bool _S_ISGIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_ISUID"/>
        /// </summary>
        public static int S_ISUID { get { if (!_S_ISUIDReady) { _S_ISUIDContent = SGetField<int>(LocalBridgeClazz, "S_ISUID"); _S_ISUIDReady = true; } return _S_ISUIDContent; } }
        private static int _S_ISUIDContent = default;
        private static bool _S_ISUIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_ISVTX"/>
        /// </summary>
        public static int S_ISVTX { get { if (!_S_ISVTXReady) { _S_ISVTXContent = SGetField<int>(LocalBridgeClazz, "S_ISVTX"); _S_ISVTXReady = true; } return _S_ISVTXContent; } }
        private static int _S_ISVTXContent = default;
        private static bool _S_ISVTXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IWGRP"/>
        /// </summary>
        public static int S_IWGRP { get { if (!_S_IWGRPReady) { _S_IWGRPContent = SGetField<int>(LocalBridgeClazz, "S_IWGRP"); _S_IWGRPReady = true; } return _S_IWGRPContent; } }
        private static int _S_IWGRPContent = default;
        private static bool _S_IWGRPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IWOTH"/>
        /// </summary>
        public static int S_IWOTH { get { if (!_S_IWOTHReady) { _S_IWOTHContent = SGetField<int>(LocalBridgeClazz, "S_IWOTH"); _S_IWOTHReady = true; } return _S_IWOTHContent; } }
        private static int _S_IWOTHContent = default;
        private static bool _S_IWOTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IWUSR"/>
        /// </summary>
        public static int S_IWUSR { get { if (!_S_IWUSRReady) { _S_IWUSRContent = SGetField<int>(LocalBridgeClazz, "S_IWUSR"); _S_IWUSRReady = true; } return _S_IWUSRContent; } }
        private static int _S_IWUSRContent = default;
        private static bool _S_IWUSRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IXGRP"/>
        /// </summary>
        public static int S_IXGRP { get { if (!_S_IXGRPReady) { _S_IXGRPContent = SGetField<int>(LocalBridgeClazz, "S_IXGRP"); _S_IXGRPReady = true; } return _S_IXGRPContent; } }
        private static int _S_IXGRPContent = default;
        private static bool _S_IXGRPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IXOTH"/>
        /// </summary>
        public static int S_IXOTH { get { if (!_S_IXOTHReady) { _S_IXOTHContent = SGetField<int>(LocalBridgeClazz, "S_IXOTH"); _S_IXOTHReady = true; } return _S_IXOTHContent; } }
        private static int _S_IXOTHContent = default;
        private static bool _S_IXOTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_IXUSR"/>
        /// </summary>
        public static int S_IXUSR { get { if (!_S_IXUSRReady) { _S_IXUSRContent = SGetField<int>(LocalBridgeClazz, "S_IXUSR"); _S_IXUSRReady = true; } return _S_IXUSRContent; } }
        private static int _S_IXUSRContent = default;
        private static bool _S_IXUSRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SEEK_CUR"/>
        /// </summary>
        public static int SEEK_CUR { get { if (!_SEEK_CURReady) { _SEEK_CURContent = SGetField<int>(LocalBridgeClazz, "SEEK_CUR"); _SEEK_CURReady = true; } return _SEEK_CURContent; } }
        private static int _SEEK_CURContent = default;
        private static bool _SEEK_CURReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SEEK_END"/>
        /// </summary>
        public static int SEEK_END { get { if (!_SEEK_ENDReady) { _SEEK_ENDContent = SGetField<int>(LocalBridgeClazz, "SEEK_END"); _SEEK_ENDReady = true; } return _SEEK_ENDContent; } }
        private static int _SEEK_ENDContent = default;
        private static bool _SEEK_ENDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SEEK_SET"/>
        /// </summary>
        public static int SEEK_SET { get { if (!_SEEK_SETReady) { _SEEK_SETContent = SGetField<int>(LocalBridgeClazz, "SEEK_SET"); _SEEK_SETReady = true; } return _SEEK_SETContent; } }
        private static int _SEEK_SETContent = default;
        private static bool _SEEK_SETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SHUT_RD"/>
        /// </summary>
        public static int SHUT_RD { get { if (!_SHUT_RDReady) { _SHUT_RDContent = SGetField<int>(LocalBridgeClazz, "SHUT_RD"); _SHUT_RDReady = true; } return _SHUT_RDContent; } }
        private static int _SHUT_RDContent = default;
        private static bool _SHUT_RDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SHUT_RDWR"/>
        /// </summary>
        public static int SHUT_RDWR { get { if (!_SHUT_RDWRReady) { _SHUT_RDWRContent = SGetField<int>(LocalBridgeClazz, "SHUT_RDWR"); _SHUT_RDWRReady = true; } return _SHUT_RDWRContent; } }
        private static int _SHUT_RDWRContent = default;
        private static bool _SHUT_RDWRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SHUT_WR"/>
        /// </summary>
        public static int SHUT_WR { get { if (!_SHUT_WRReady) { _SHUT_WRContent = SGetField<int>(LocalBridgeClazz, "SHUT_WR"); _SHUT_WRReady = true; } return _SHUT_WRContent; } }
        private static int _SHUT_WRContent = default;
        private static bool _SHUT_WRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGABRT"/>
        /// </summary>
        public static int SIGABRT { get { if (!_SIGABRTReady) { _SIGABRTContent = SGetField<int>(LocalBridgeClazz, "SIGABRT"); _SIGABRTReady = true; } return _SIGABRTContent; } }
        private static int _SIGABRTContent = default;
        private static bool _SIGABRTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGALRM"/>
        /// </summary>
        public static int SIGALRM { get { if (!_SIGALRMReady) { _SIGALRMContent = SGetField<int>(LocalBridgeClazz, "SIGALRM"); _SIGALRMReady = true; } return _SIGALRMContent; } }
        private static int _SIGALRMContent = default;
        private static bool _SIGALRMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGBUS"/>
        /// </summary>
        public static int SIGBUS { get { if (!_SIGBUSReady) { _SIGBUSContent = SGetField<int>(LocalBridgeClazz, "SIGBUS"); _SIGBUSReady = true; } return _SIGBUSContent; } }
        private static int _SIGBUSContent = default;
        private static bool _SIGBUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGCHLD"/>
        /// </summary>
        public static int SIGCHLD { get { if (!_SIGCHLDReady) { _SIGCHLDContent = SGetField<int>(LocalBridgeClazz, "SIGCHLD"); _SIGCHLDReady = true; } return _SIGCHLDContent; } }
        private static int _SIGCHLDContent = default;
        private static bool _SIGCHLDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGCONT"/>
        /// </summary>
        public static int SIGCONT { get { if (!_SIGCONTReady) { _SIGCONTContent = SGetField<int>(LocalBridgeClazz, "SIGCONT"); _SIGCONTReady = true; } return _SIGCONTContent; } }
        private static int _SIGCONTContent = default;
        private static bool _SIGCONTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGFPE"/>
        /// </summary>
        public static int SIGFPE { get { if (!_SIGFPEReady) { _SIGFPEContent = SGetField<int>(LocalBridgeClazz, "SIGFPE"); _SIGFPEReady = true; } return _SIGFPEContent; } }
        private static int _SIGFPEContent = default;
        private static bool _SIGFPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGHUP"/>
        /// </summary>
        public static int SIGHUP { get { if (!_SIGHUPReady) { _SIGHUPContent = SGetField<int>(LocalBridgeClazz, "SIGHUP"); _SIGHUPReady = true; } return _SIGHUPContent; } }
        private static int _SIGHUPContent = default;
        private static bool _SIGHUPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGILL"/>
        /// </summary>
        public static int SIGILL { get { if (!_SIGILLReady) { _SIGILLContent = SGetField<int>(LocalBridgeClazz, "SIGILL"); _SIGILLReady = true; } return _SIGILLContent; } }
        private static int _SIGILLContent = default;
        private static bool _SIGILLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGINT"/>
        /// </summary>
        public static int SIGINT { get { if (!_SIGINTReady) { _SIGINTContent = SGetField<int>(LocalBridgeClazz, "SIGINT"); _SIGINTReady = true; } return _SIGINTContent; } }
        private static int _SIGINTContent = default;
        private static bool _SIGINTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGIO"/>
        /// </summary>
        public static int SIGIO { get { if (!_SIGIOReady) { _SIGIOContent = SGetField<int>(LocalBridgeClazz, "SIGIO"); _SIGIOReady = true; } return _SIGIOContent; } }
        private static int _SIGIOContent = default;
        private static bool _SIGIOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGKILL"/>
        /// </summary>
        public static int SIGKILL { get { if (!_SIGKILLReady) { _SIGKILLContent = SGetField<int>(LocalBridgeClazz, "SIGKILL"); _SIGKILLReady = true; } return _SIGKILLContent; } }
        private static int _SIGKILLContent = default;
        private static bool _SIGKILLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGPIPE"/>
        /// </summary>
        public static int SIGPIPE { get { if (!_SIGPIPEReady) { _SIGPIPEContent = SGetField<int>(LocalBridgeClazz, "SIGPIPE"); _SIGPIPEReady = true; } return _SIGPIPEContent; } }
        private static int _SIGPIPEContent = default;
        private static bool _SIGPIPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGPROF"/>
        /// </summary>
        public static int SIGPROF { get { if (!_SIGPROFReady) { _SIGPROFContent = SGetField<int>(LocalBridgeClazz, "SIGPROF"); _SIGPROFReady = true; } return _SIGPROFContent; } }
        private static int _SIGPROFContent = default;
        private static bool _SIGPROFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGPWR"/>
        /// </summary>
        public static int SIGPWR { get { if (!_SIGPWRReady) { _SIGPWRContent = SGetField<int>(LocalBridgeClazz, "SIGPWR"); _SIGPWRReady = true; } return _SIGPWRContent; } }
        private static int _SIGPWRContent = default;
        private static bool _SIGPWRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGQUIT"/>
        /// </summary>
        public static int SIGQUIT { get { if (!_SIGQUITReady) { _SIGQUITContent = SGetField<int>(LocalBridgeClazz, "SIGQUIT"); _SIGQUITReady = true; } return _SIGQUITContent; } }
        private static int _SIGQUITContent = default;
        private static bool _SIGQUITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGRTMAX"/>
        /// </summary>
        public static int SIGRTMAX { get { if (!_SIGRTMAXReady) { _SIGRTMAXContent = SGetField<int>(LocalBridgeClazz, "SIGRTMAX"); _SIGRTMAXReady = true; } return _SIGRTMAXContent; } }
        private static int _SIGRTMAXContent = default;
        private static bool _SIGRTMAXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGRTMIN"/>
        /// </summary>
        public static int SIGRTMIN { get { if (!_SIGRTMINReady) { _SIGRTMINContent = SGetField<int>(LocalBridgeClazz, "SIGRTMIN"); _SIGRTMINReady = true; } return _SIGRTMINContent; } }
        private static int _SIGRTMINContent = default;
        private static bool _SIGRTMINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGSEGV"/>
        /// </summary>
        public static int SIGSEGV { get { if (!_SIGSEGVReady) { _SIGSEGVContent = SGetField<int>(LocalBridgeClazz, "SIGSEGV"); _SIGSEGVReady = true; } return _SIGSEGVContent; } }
        private static int _SIGSEGVContent = default;
        private static bool _SIGSEGVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGSTKFLT"/>
        /// </summary>
        public static int SIGSTKFLT { get { if (!_SIGSTKFLTReady) { _SIGSTKFLTContent = SGetField<int>(LocalBridgeClazz, "SIGSTKFLT"); _SIGSTKFLTReady = true; } return _SIGSTKFLTContent; } }
        private static int _SIGSTKFLTContent = default;
        private static bool _SIGSTKFLTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGSTOP"/>
        /// </summary>
        public static int SIGSTOP { get { if (!_SIGSTOPReady) { _SIGSTOPContent = SGetField<int>(LocalBridgeClazz, "SIGSTOP"); _SIGSTOPReady = true; } return _SIGSTOPContent; } }
        private static int _SIGSTOPContent = default;
        private static bool _SIGSTOPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGSYS"/>
        /// </summary>
        public static int SIGSYS { get { if (!_SIGSYSReady) { _SIGSYSContent = SGetField<int>(LocalBridgeClazz, "SIGSYS"); _SIGSYSReady = true; } return _SIGSYSContent; } }
        private static int _SIGSYSContent = default;
        private static bool _SIGSYSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGTERM"/>
        /// </summary>
        public static int SIGTERM { get { if (!_SIGTERMReady) { _SIGTERMContent = SGetField<int>(LocalBridgeClazz, "SIGTERM"); _SIGTERMReady = true; } return _SIGTERMContent; } }
        private static int _SIGTERMContent = default;
        private static bool _SIGTERMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGTRAP"/>
        /// </summary>
        public static int SIGTRAP { get { if (!_SIGTRAPReady) { _SIGTRAPContent = SGetField<int>(LocalBridgeClazz, "SIGTRAP"); _SIGTRAPReady = true; } return _SIGTRAPContent; } }
        private static int _SIGTRAPContent = default;
        private static bool _SIGTRAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGTSTP"/>
        /// </summary>
        public static int SIGTSTP { get { if (!_SIGTSTPReady) { _SIGTSTPContent = SGetField<int>(LocalBridgeClazz, "SIGTSTP"); _SIGTSTPReady = true; } return _SIGTSTPContent; } }
        private static int _SIGTSTPContent = default;
        private static bool _SIGTSTPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGTTIN"/>
        /// </summary>
        public static int SIGTTIN { get { if (!_SIGTTINReady) { _SIGTTINContent = SGetField<int>(LocalBridgeClazz, "SIGTTIN"); _SIGTTINReady = true; } return _SIGTTINContent; } }
        private static int _SIGTTINContent = default;
        private static bool _SIGTTINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGTTOU"/>
        /// </summary>
        public static int SIGTTOU { get { if (!_SIGTTOUReady) { _SIGTTOUContent = SGetField<int>(LocalBridgeClazz, "SIGTTOU"); _SIGTTOUReady = true; } return _SIGTTOUContent; } }
        private static int _SIGTTOUContent = default;
        private static bool _SIGTTOUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGURG"/>
        /// </summary>
        public static int SIGURG { get { if (!_SIGURGReady) { _SIGURGContent = SGetField<int>(LocalBridgeClazz, "SIGURG"); _SIGURGReady = true; } return _SIGURGContent; } }
        private static int _SIGURGContent = default;
        private static bool _SIGURGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGUSR1"/>
        /// </summary>
        public static int SIGUSR1 { get { if (!_SIGUSR1Ready) { _SIGUSR1Content = SGetField<int>(LocalBridgeClazz, "SIGUSR1"); _SIGUSR1Ready = true; } return _SIGUSR1Content; } }
        private static int _SIGUSR1Content = default;
        private static bool _SIGUSR1Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGUSR2"/>
        /// </summary>
        public static int SIGUSR2 { get { if (!_SIGUSR2Ready) { _SIGUSR2Content = SGetField<int>(LocalBridgeClazz, "SIGUSR2"); _SIGUSR2Ready = true; } return _SIGUSR2Content; } }
        private static int _SIGUSR2Content = default;
        private static bool _SIGUSR2Ready = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGVTALRM"/>
        /// </summary>
        public static int SIGVTALRM { get { if (!_SIGVTALRMReady) { _SIGVTALRMContent = SGetField<int>(LocalBridgeClazz, "SIGVTALRM"); _SIGVTALRMReady = true; } return _SIGVTALRMContent; } }
        private static int _SIGVTALRMContent = default;
        private static bool _SIGVTALRMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGWINCH"/>
        /// </summary>
        public static int SIGWINCH { get { if (!_SIGWINCHReady) { _SIGWINCHContent = SGetField<int>(LocalBridgeClazz, "SIGWINCH"); _SIGWINCHReady = true; } return _SIGWINCHContent; } }
        private static int _SIGWINCHContent = default;
        private static bool _SIGWINCHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGXCPU"/>
        /// </summary>
        public static int SIGXCPU { get { if (!_SIGXCPUReady) { _SIGXCPUContent = SGetField<int>(LocalBridgeClazz, "SIGXCPU"); _SIGXCPUReady = true; } return _SIGXCPUContent; } }
        private static int _SIGXCPUContent = default;
        private static bool _SIGXCPUReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIGXFSZ"/>
        /// </summary>
        public static int SIGXFSZ { get { if (!_SIGXFSZReady) { _SIGXFSZContent = SGetField<int>(LocalBridgeClazz, "SIGXFSZ"); _SIGXFSZReady = true; } return _SIGXFSZContent; } }
        private static int _SIGXFSZContent = default;
        private static bool _SIGXFSZReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIOCGIFADDR"/>
        /// </summary>
        public static int SIOCGIFADDR { get { if (!_SIOCGIFADDRReady) { _SIOCGIFADDRContent = SGetField<int>(LocalBridgeClazz, "SIOCGIFADDR"); _SIOCGIFADDRReady = true; } return _SIOCGIFADDRContent; } }
        private static int _SIOCGIFADDRContent = default;
        private static bool _SIOCGIFADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIOCGIFBRDADDR"/>
        /// </summary>
        public static int SIOCGIFBRDADDR { get { if (!_SIOCGIFBRDADDRReady) { _SIOCGIFBRDADDRContent = SGetField<int>(LocalBridgeClazz, "SIOCGIFBRDADDR"); _SIOCGIFBRDADDRReady = true; } return _SIOCGIFBRDADDRContent; } }
        private static int _SIOCGIFBRDADDRContent = default;
        private static bool _SIOCGIFBRDADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIOCGIFDSTADDR"/>
        /// </summary>
        public static int SIOCGIFDSTADDR { get { if (!_SIOCGIFDSTADDRReady) { _SIOCGIFDSTADDRContent = SGetField<int>(LocalBridgeClazz, "SIOCGIFDSTADDR"); _SIOCGIFDSTADDRReady = true; } return _SIOCGIFDSTADDRContent; } }
        private static int _SIOCGIFDSTADDRContent = default;
        private static bool _SIOCGIFDSTADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SIOCGIFNETMASK"/>
        /// </summary>
        public static int SIOCGIFNETMASK { get { if (!_SIOCGIFNETMASKReady) { _SIOCGIFNETMASKContent = SGetField<int>(LocalBridgeClazz, "SIOCGIFNETMASK"); _SIOCGIFNETMASKReady = true; } return _SIOCGIFNETMASKContent; } }
        private static int _SIOCGIFNETMASKContent = default;
        private static bool _SIOCGIFNETMASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_BINDTODEVICE"/>
        /// </summary>
        public static int SO_BINDTODEVICE { get { if (!_SO_BINDTODEVICEReady) { _SO_BINDTODEVICEContent = SGetField<int>(LocalBridgeClazz, "SO_BINDTODEVICE"); _SO_BINDTODEVICEReady = true; } return _SO_BINDTODEVICEContent; } }
        private static int _SO_BINDTODEVICEContent = default;
        private static bool _SO_BINDTODEVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_BROADCAST"/>
        /// </summary>
        public static int SO_BROADCAST { get { if (!_SO_BROADCASTReady) { _SO_BROADCASTContent = SGetField<int>(LocalBridgeClazz, "SO_BROADCAST"); _SO_BROADCASTReady = true; } return _SO_BROADCASTContent; } }
        private static int _SO_BROADCASTContent = default;
        private static bool _SO_BROADCASTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_DEBUG"/>
        /// </summary>
        public static int SO_DEBUG { get { if (!_SO_DEBUGReady) { _SO_DEBUGContent = SGetField<int>(LocalBridgeClazz, "SO_DEBUG"); _SO_DEBUGReady = true; } return _SO_DEBUGContent; } }
        private static int _SO_DEBUGContent = default;
        private static bool _SO_DEBUGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_DONTROUTE"/>
        /// </summary>
        public static int SO_DONTROUTE { get { if (!_SO_DONTROUTEReady) { _SO_DONTROUTEContent = SGetField<int>(LocalBridgeClazz, "SO_DONTROUTE"); _SO_DONTROUTEReady = true; } return _SO_DONTROUTEContent; } }
        private static int _SO_DONTROUTEContent = default;
        private static bool _SO_DONTROUTEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_ERROR"/>
        /// </summary>
        public static int SO_ERROR { get { if (!_SO_ERRORReady) { _SO_ERRORContent = SGetField<int>(LocalBridgeClazz, "SO_ERROR"); _SO_ERRORReady = true; } return _SO_ERRORContent; } }
        private static int _SO_ERRORContent = default;
        private static bool _SO_ERRORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_KEEPALIVE"/>
        /// </summary>
        public static int SO_KEEPALIVE { get { if (!_SO_KEEPALIVEReady) { _SO_KEEPALIVEContent = SGetField<int>(LocalBridgeClazz, "SO_KEEPALIVE"); _SO_KEEPALIVEReady = true; } return _SO_KEEPALIVEContent; } }
        private static int _SO_KEEPALIVEContent = default;
        private static bool _SO_KEEPALIVEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_LINGER"/>
        /// </summary>
        public static int SO_LINGER { get { if (!_SO_LINGERReady) { _SO_LINGERContent = SGetField<int>(LocalBridgeClazz, "SO_LINGER"); _SO_LINGERReady = true; } return _SO_LINGERContent; } }
        private static int _SO_LINGERContent = default;
        private static bool _SO_LINGERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_OOBINLINE"/>
        /// </summary>
        public static int SO_OOBINLINE { get { if (!_SO_OOBINLINEReady) { _SO_OOBINLINEContent = SGetField<int>(LocalBridgeClazz, "SO_OOBINLINE"); _SO_OOBINLINEReady = true; } return _SO_OOBINLINEContent; } }
        private static int _SO_OOBINLINEContent = default;
        private static bool _SO_OOBINLINEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_PASSCRED"/>
        /// </summary>
        public static int SO_PASSCRED { get { if (!_SO_PASSCREDReady) { _SO_PASSCREDContent = SGetField<int>(LocalBridgeClazz, "SO_PASSCRED"); _SO_PASSCREDReady = true; } return _SO_PASSCREDContent; } }
        private static int _SO_PASSCREDContent = default;
        private static bool _SO_PASSCREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_PEERCRED"/>
        /// </summary>
        public static int SO_PEERCRED { get { if (!_SO_PEERCREDReady) { _SO_PEERCREDContent = SGetField<int>(LocalBridgeClazz, "SO_PEERCRED"); _SO_PEERCREDReady = true; } return _SO_PEERCREDContent; } }
        private static int _SO_PEERCREDContent = default;
        private static bool _SO_PEERCREDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_RCVBUF"/>
        /// </summary>
        public static int SO_RCVBUF { get { if (!_SO_RCVBUFReady) { _SO_RCVBUFContent = SGetField<int>(LocalBridgeClazz, "SO_RCVBUF"); _SO_RCVBUFReady = true; } return _SO_RCVBUFContent; } }
        private static int _SO_RCVBUFContent = default;
        private static bool _SO_RCVBUFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_RCVLOWAT"/>
        /// </summary>
        public static int SO_RCVLOWAT { get { if (!_SO_RCVLOWATReady) { _SO_RCVLOWATContent = SGetField<int>(LocalBridgeClazz, "SO_RCVLOWAT"); _SO_RCVLOWATReady = true; } return _SO_RCVLOWATContent; } }
        private static int _SO_RCVLOWATContent = default;
        private static bool _SO_RCVLOWATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_RCVTIMEO"/>
        /// </summary>
        public static int SO_RCVTIMEO { get { if (!_SO_RCVTIMEOReady) { _SO_RCVTIMEOContent = SGetField<int>(LocalBridgeClazz, "SO_RCVTIMEO"); _SO_RCVTIMEOReady = true; } return _SO_RCVTIMEOContent; } }
        private static int _SO_RCVTIMEOContent = default;
        private static bool _SO_RCVTIMEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_REUSEADDR"/>
        /// </summary>
        public static int SO_REUSEADDR { get { if (!_SO_REUSEADDRReady) { _SO_REUSEADDRContent = SGetField<int>(LocalBridgeClazz, "SO_REUSEADDR"); _SO_REUSEADDRReady = true; } return _SO_REUSEADDRContent; } }
        private static int _SO_REUSEADDRContent = default;
        private static bool _SO_REUSEADDRReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_SNDBUF"/>
        /// </summary>
        public static int SO_SNDBUF { get { if (!_SO_SNDBUFReady) { _SO_SNDBUFContent = SGetField<int>(LocalBridgeClazz, "SO_SNDBUF"); _SO_SNDBUFReady = true; } return _SO_SNDBUFContent; } }
        private static int _SO_SNDBUFContent = default;
        private static bool _SO_SNDBUFReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_SNDLOWAT"/>
        /// </summary>
        public static int SO_SNDLOWAT { get { if (!_SO_SNDLOWATReady) { _SO_SNDLOWATContent = SGetField<int>(LocalBridgeClazz, "SO_SNDLOWAT"); _SO_SNDLOWATReady = true; } return _SO_SNDLOWATContent; } }
        private static int _SO_SNDLOWATContent = default;
        private static bool _SO_SNDLOWATReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_SNDTIMEO"/>
        /// </summary>
        public static int SO_SNDTIMEO { get { if (!_SO_SNDTIMEOReady) { _SO_SNDTIMEOContent = SGetField<int>(LocalBridgeClazz, "SO_SNDTIMEO"); _SO_SNDTIMEOReady = true; } return _SO_SNDTIMEOContent; } }
        private static int _SO_SNDTIMEOContent = default;
        private static bool _SO_SNDTIMEOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SO_TYPE"/>
        /// </summary>
        public static int SO_TYPE { get { if (!_SO_TYPEReady) { _SO_TYPEContent = SGetField<int>(LocalBridgeClazz, "SO_TYPE"); _SO_TYPEReady = true; } return _SO_TYPEContent; } }
        private static int _SO_TYPEContent = default;
        private static bool _SO_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SOCK_CLOEXEC"/>
        /// </summary>
        public static int SOCK_CLOEXEC { get { if (!_SOCK_CLOEXECReady) { _SOCK_CLOEXECContent = SGetField<int>(LocalBridgeClazz, "SOCK_CLOEXEC"); _SOCK_CLOEXECReady = true; } return _SOCK_CLOEXECContent; } }
        private static int _SOCK_CLOEXECContent = default;
        private static bool _SOCK_CLOEXECReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SOCK_DGRAM"/>
        /// </summary>
        public static int SOCK_DGRAM { get { if (!_SOCK_DGRAMReady) { _SOCK_DGRAMContent = SGetField<int>(LocalBridgeClazz, "SOCK_DGRAM"); _SOCK_DGRAMReady = true; } return _SOCK_DGRAMContent; } }
        private static int _SOCK_DGRAMContent = default;
        private static bool _SOCK_DGRAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SOCK_NONBLOCK"/>
        /// </summary>
        public static int SOCK_NONBLOCK { get { if (!_SOCK_NONBLOCKReady) { _SOCK_NONBLOCKContent = SGetField<int>(LocalBridgeClazz, "SOCK_NONBLOCK"); _SOCK_NONBLOCKReady = true; } return _SOCK_NONBLOCKContent; } }
        private static int _SOCK_NONBLOCKContent = default;
        private static bool _SOCK_NONBLOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SOCK_RAW"/>
        /// </summary>
        public static int SOCK_RAW { get { if (!_SOCK_RAWReady) { _SOCK_RAWContent = SGetField<int>(LocalBridgeClazz, "SOCK_RAW"); _SOCK_RAWReady = true; } return _SOCK_RAWContent; } }
        private static int _SOCK_RAWContent = default;
        private static bool _SOCK_RAWReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SOCK_SEQPACKET"/>
        /// </summary>
        public static int SOCK_SEQPACKET { get { if (!_SOCK_SEQPACKETReady) { _SOCK_SEQPACKETContent = SGetField<int>(LocalBridgeClazz, "SOCK_SEQPACKET"); _SOCK_SEQPACKETReady = true; } return _SOCK_SEQPACKETContent; } }
        private static int _SOCK_SEQPACKETContent = default;
        private static bool _SOCK_SEQPACKETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SOCK_STREAM"/>
        /// </summary>
        public static int SOCK_STREAM { get { if (!_SOCK_STREAMReady) { _SOCK_STREAMContent = SGetField<int>(LocalBridgeClazz, "SOCK_STREAM"); _SOCK_STREAMReady = true; } return _SOCK_STREAMContent; } }
        private static int _SOCK_STREAMContent = default;
        private static bool _SOCK_STREAMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SOL_SOCKET"/>
        /// </summary>
        public static int SOL_SOCKET { get { if (!_SOL_SOCKETReady) { _SOL_SOCKETContent = SGetField<int>(LocalBridgeClazz, "SOL_SOCKET"); _SOL_SOCKETReady = true; } return _SOL_SOCKETContent; } }
        private static int _SOL_SOCKETContent = default;
        private static bool _SOL_SOCKETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#SOL_UDP"/>
        /// </summary>
        public static int SOL_UDP { get { if (!_SOL_UDPReady) { _SOL_UDPContent = SGetField<int>(LocalBridgeClazz, "SOL_UDP"); _SOL_UDPReady = true; } return _SOL_UDPContent; } }
        private static int _SOL_UDPContent = default;
        private static bool _SOL_UDPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ST_MANDLOCK"/>
        /// </summary>
        public static int ST_MANDLOCK { get { if (!_ST_MANDLOCKReady) { _ST_MANDLOCKContent = SGetField<int>(LocalBridgeClazz, "ST_MANDLOCK"); _ST_MANDLOCKReady = true; } return _ST_MANDLOCKContent; } }
        private static int _ST_MANDLOCKContent = default;
        private static bool _ST_MANDLOCKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ST_NOATIME"/>
        /// </summary>
        public static int ST_NOATIME { get { if (!_ST_NOATIMEReady) { _ST_NOATIMEContent = SGetField<int>(LocalBridgeClazz, "ST_NOATIME"); _ST_NOATIMEReady = true; } return _ST_NOATIMEContent; } }
        private static int _ST_NOATIMEContent = default;
        private static bool _ST_NOATIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ST_NODEV"/>
        /// </summary>
        public static int ST_NODEV { get { if (!_ST_NODEVReady) { _ST_NODEVContent = SGetField<int>(LocalBridgeClazz, "ST_NODEV"); _ST_NODEVReady = true; } return _ST_NODEVContent; } }
        private static int _ST_NODEVContent = default;
        private static bool _ST_NODEVReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ST_NODIRATIME"/>
        /// </summary>
        public static int ST_NODIRATIME { get { if (!_ST_NODIRATIMEReady) { _ST_NODIRATIMEContent = SGetField<int>(LocalBridgeClazz, "ST_NODIRATIME"); _ST_NODIRATIMEReady = true; } return _ST_NODIRATIMEContent; } }
        private static int _ST_NODIRATIMEContent = default;
        private static bool _ST_NODIRATIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ST_NOEXEC"/>
        /// </summary>
        public static int ST_NOEXEC { get { if (!_ST_NOEXECReady) { _ST_NOEXECContent = SGetField<int>(LocalBridgeClazz, "ST_NOEXEC"); _ST_NOEXECReady = true; } return _ST_NOEXECContent; } }
        private static int _ST_NOEXECContent = default;
        private static bool _ST_NOEXECReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ST_NOSUID"/>
        /// </summary>
        public static int ST_NOSUID { get { if (!_ST_NOSUIDReady) { _ST_NOSUIDContent = SGetField<int>(LocalBridgeClazz, "ST_NOSUID"); _ST_NOSUIDReady = true; } return _ST_NOSUIDContent; } }
        private static int _ST_NOSUIDContent = default;
        private static bool _ST_NOSUIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ST_RDONLY"/>
        /// </summary>
        public static int ST_RDONLY { get { if (!_ST_RDONLYReady) { _ST_RDONLYContent = SGetField<int>(LocalBridgeClazz, "ST_RDONLY"); _ST_RDONLYReady = true; } return _ST_RDONLYContent; } }
        private static int _ST_RDONLYContent = default;
        private static bool _ST_RDONLYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ST_RELATIME"/>
        /// </summary>
        public static int ST_RELATIME { get { if (!_ST_RELATIMEReady) { _ST_RELATIMEContent = SGetField<int>(LocalBridgeClazz, "ST_RELATIME"); _ST_RELATIMEReady = true; } return _ST_RELATIMEContent; } }
        private static int _ST_RELATIMEContent = default;
        private static bool _ST_RELATIMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#ST_SYNCHRONOUS"/>
        /// </summary>
        public static int ST_SYNCHRONOUS { get { if (!_ST_SYNCHRONOUSReady) { _ST_SYNCHRONOUSContent = SGetField<int>(LocalBridgeClazz, "ST_SYNCHRONOUS"); _ST_SYNCHRONOUSReady = true; } return _ST_SYNCHRONOUSContent; } }
        private static int _ST_SYNCHRONOUSContent = default;
        private static bool _ST_SYNCHRONOUSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#STDERR_FILENO"/>
        /// </summary>
        public static int STDERR_FILENO { get { if (!_STDERR_FILENOReady) { _STDERR_FILENOContent = SGetField<int>(LocalBridgeClazz, "STDERR_FILENO"); _STDERR_FILENOReady = true; } return _STDERR_FILENOContent; } }
        private static int _STDERR_FILENOContent = default;
        private static bool _STDERR_FILENOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#STDIN_FILENO"/>
        /// </summary>
        public static int STDIN_FILENO { get { if (!_STDIN_FILENOReady) { _STDIN_FILENOContent = SGetField<int>(LocalBridgeClazz, "STDIN_FILENO"); _STDIN_FILENOReady = true; } return _STDIN_FILENOContent; } }
        private static int _STDIN_FILENOContent = default;
        private static bool _STDIN_FILENOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#STDOUT_FILENO"/>
        /// </summary>
        public static int STDOUT_FILENO { get { if (!_STDOUT_FILENOReady) { _STDOUT_FILENOContent = SGetField<int>(LocalBridgeClazz, "STDOUT_FILENO"); _STDOUT_FILENOReady = true; } return _STDOUT_FILENOContent; } }
        private static int _STDOUT_FILENOContent = default;
        private static bool _STDOUT_FILENOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#TCP_NODELAY"/>
        /// </summary>
        public static int TCP_NODELAY { get { if (!_TCP_NODELAYReady) { _TCP_NODELAYContent = SGetField<int>(LocalBridgeClazz, "TCP_NODELAY"); _TCP_NODELAYReady = true; } return _TCP_NODELAYContent; } }
        private static int _TCP_NODELAYContent = default;
        private static bool _TCP_NODELAYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#TCP_USER_TIMEOUT"/>
        /// </summary>
        public static int TCP_USER_TIMEOUT { get { if (!_TCP_USER_TIMEOUTReady) { _TCP_USER_TIMEOUTContent = SGetField<int>(LocalBridgeClazz, "TCP_USER_TIMEOUT"); _TCP_USER_TIMEOUTReady = true; } return _TCP_USER_TIMEOUTContent; } }
        private static int _TCP_USER_TIMEOUTContent = default;
        private static bool _TCP_USER_TIMEOUTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#UDP_GRO"/>
        /// </summary>
        public static int UDP_GRO { get { if (!_UDP_GROReady) { _UDP_GROContent = SGetField<int>(LocalBridgeClazz, "UDP_GRO"); _UDP_GROReady = true; } return _UDP_GROContent; } }
        private static int _UDP_GROContent = default;
        private static bool _UDP_GROReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#UDP_SEGMENT"/>
        /// </summary>
        public static int UDP_SEGMENT { get { if (!_UDP_SEGMENTReady) { _UDP_SEGMENTContent = SGetField<int>(LocalBridgeClazz, "UDP_SEGMENT"); _UDP_SEGMENTReady = true; } return _UDP_SEGMENTContent; } }
        private static int _UDP_SEGMENTContent = default;
        private static bool _UDP_SEGMENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#VMADDR_CID_ANY"/>
        /// </summary>
        public static int VMADDR_CID_ANY { get { if (!_VMADDR_CID_ANYReady) { _VMADDR_CID_ANYContent = SGetField<int>(LocalBridgeClazz, "VMADDR_CID_ANY"); _VMADDR_CID_ANYReady = true; } return _VMADDR_CID_ANYContent; } }
        private static int _VMADDR_CID_ANYContent = default;
        private static bool _VMADDR_CID_ANYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#VMADDR_CID_HOST"/>
        /// </summary>
        public static int VMADDR_CID_HOST { get { if (!_VMADDR_CID_HOSTReady) { _VMADDR_CID_HOSTContent = SGetField<int>(LocalBridgeClazz, "VMADDR_CID_HOST"); _VMADDR_CID_HOSTReady = true; } return _VMADDR_CID_HOSTContent; } }
        private static int _VMADDR_CID_HOSTContent = default;
        private static bool _VMADDR_CID_HOSTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#VMADDR_CID_LOCAL"/>
        /// </summary>
        public static int VMADDR_CID_LOCAL { get { if (!_VMADDR_CID_LOCALReady) { _VMADDR_CID_LOCALContent = SGetField<int>(LocalBridgeClazz, "VMADDR_CID_LOCAL"); _VMADDR_CID_LOCALReady = true; } return _VMADDR_CID_LOCALContent; } }
        private static int _VMADDR_CID_LOCALContent = default;
        private static bool _VMADDR_CID_LOCALReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#VMADDR_PORT_ANY"/>
        /// </summary>
        public static int VMADDR_PORT_ANY { get { if (!_VMADDR_PORT_ANYReady) { _VMADDR_PORT_ANYContent = SGetField<int>(LocalBridgeClazz, "VMADDR_PORT_ANY"); _VMADDR_PORT_ANYReady = true; } return _VMADDR_PORT_ANYContent; } }
        private static int _VMADDR_PORT_ANYContent = default;
        private static bool _VMADDR_PORT_ANYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#W_OK"/>
        /// </summary>
        public static int W_OK { get { if (!_W_OKReady) { _W_OKContent = SGetField<int>(LocalBridgeClazz, "W_OK"); _W_OKReady = true; } return _W_OKContent; } }
        private static int _W_OKContent = default;
        private static bool _W_OKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#WCONTINUED"/>
        /// </summary>
        public static int WCONTINUED { get { if (!_WCONTINUEDReady) { _WCONTINUEDContent = SGetField<int>(LocalBridgeClazz, "WCONTINUED"); _WCONTINUEDReady = true; } return _WCONTINUEDContent; } }
        private static int _WCONTINUEDContent = default;
        private static bool _WCONTINUEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#WEXITED"/>
        /// </summary>
        public static int WEXITED { get { if (!_WEXITEDReady) { _WEXITEDContent = SGetField<int>(LocalBridgeClazz, "WEXITED"); _WEXITEDReady = true; } return _WEXITEDContent; } }
        private static int _WEXITEDContent = default;
        private static bool _WEXITEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#WNOHANG"/>
        /// </summary>
        public static int WNOHANG { get { if (!_WNOHANGReady) { _WNOHANGContent = SGetField<int>(LocalBridgeClazz, "WNOHANG"); _WNOHANGReady = true; } return _WNOHANGContent; } }
        private static int _WNOHANGContent = default;
        private static bool _WNOHANGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#WNOWAIT"/>
        /// </summary>
        public static int WNOWAIT { get { if (!_WNOWAITReady) { _WNOWAITContent = SGetField<int>(LocalBridgeClazz, "WNOWAIT"); _WNOWAITReady = true; } return _WNOWAITContent; } }
        private static int _WNOWAITContent = default;
        private static bool _WNOWAITReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#WSTOPPED"/>
        /// </summary>
        public static int WSTOPPED { get { if (!_WSTOPPEDReady) { _WSTOPPEDContent = SGetField<int>(LocalBridgeClazz, "WSTOPPED"); _WSTOPPEDReady = true; } return _WSTOPPEDContent; } }
        private static int _WSTOPPEDContent = default;
        private static bool _WSTOPPEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#WUNTRACED"/>
        /// </summary>
        public static int WUNTRACED { get { if (!_WUNTRACEDReady) { _WUNTRACEDContent = SGetField<int>(LocalBridgeClazz, "WUNTRACED"); _WUNTRACEDReady = true; } return _WUNTRACEDContent; } }
        private static int _WUNTRACEDContent = default;
        private static bool _WUNTRACEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#X_OK"/>
        /// </summary>
        public static int X_OK { get { if (!_X_OKReady) { _X_OKContent = SGetField<int>(LocalBridgeClazz, "X_OK"); _X_OKReady = true; } return _X_OKContent; } }
        private static int _X_OKContent = default;
        private static bool _X_OKReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_ISBLK(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool S_ISBLK(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "S_ISBLK", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_ISCHR(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool S_ISCHR(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "S_ISCHR", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_ISDIR(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool S_ISDIR(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "S_ISDIR", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_ISFIFO(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool S_ISFIFO(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "S_ISFIFO", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_ISLNK(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool S_ISLNK(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "S_ISLNK", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_ISREG(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool S_ISREG(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "S_ISREG", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#S_ISSOCK(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool S_ISSOCK(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "S_ISSOCK", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#WCOREDUMP(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool WCOREDUMP(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "WCOREDUMP", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#WIFEXITED(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool WIFEXITED(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "WIFEXITED", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#WIFSIGNALED(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool WIFSIGNALED(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "WIFSIGNALED", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#WIFSTOPPED(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool WIFSTOPPED(int arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "WIFSTOPPED", "(I)Z", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#WEXITSTATUS(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int WEXITSTATUS(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "WEXITSTATUS", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#WSTOPSIG(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int WSTOPSIG(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "WSTOPSIG", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#WTERMSIG(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int WTERMSIG(int arg0)
        {
            return SExecuteWithSignature<int>(LocalBridgeClazz, "WTERMSIG", "(I)I", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#errnoName(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String ErrnoName(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "errnoName", "(I)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/system/OsConstants.html#gaiName(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String GaiName(int arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "gaiName", "(I)Ljava/lang/String;", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}
/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.2.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Provider
{
    #region Settings
    public partial class Settings
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ADD_WIFI_RESULT_ADD_OR_UPDATE_FAILED"/>
        /// </summary>
        public static int ADD_WIFI_RESULT_ADD_OR_UPDATE_FAILED { get { if (!_ADD_WIFI_RESULT_ADD_OR_UPDATE_FAILEDReady) { _ADD_WIFI_RESULT_ADD_OR_UPDATE_FAILEDContent = SGetField<int>(LocalBridgeClazz, "ADD_WIFI_RESULT_ADD_OR_UPDATE_FAILED"); _ADD_WIFI_RESULT_ADD_OR_UPDATE_FAILEDReady = true; } return _ADD_WIFI_RESULT_ADD_OR_UPDATE_FAILEDContent; } }
        private static int _ADD_WIFI_RESULT_ADD_OR_UPDATE_FAILEDContent = default;
        private static bool _ADD_WIFI_RESULT_ADD_OR_UPDATE_FAILEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ADD_WIFI_RESULT_ALREADY_EXISTS"/>
        /// </summary>
        public static int ADD_WIFI_RESULT_ALREADY_EXISTS { get { if (!_ADD_WIFI_RESULT_ALREADY_EXISTSReady) { _ADD_WIFI_RESULT_ALREADY_EXISTSContent = SGetField<int>(LocalBridgeClazz, "ADD_WIFI_RESULT_ALREADY_EXISTS"); _ADD_WIFI_RESULT_ALREADY_EXISTSReady = true; } return _ADD_WIFI_RESULT_ALREADY_EXISTSContent; } }
        private static int _ADD_WIFI_RESULT_ALREADY_EXISTSContent = default;
        private static bool _ADD_WIFI_RESULT_ALREADY_EXISTSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ADD_WIFI_RESULT_SUCCESS"/>
        /// </summary>
        public static int ADD_WIFI_RESULT_SUCCESS { get { if (!_ADD_WIFI_RESULT_SUCCESSReady) { _ADD_WIFI_RESULT_SUCCESSContent = SGetField<int>(LocalBridgeClazz, "ADD_WIFI_RESULT_SUCCESS"); _ADD_WIFI_RESULT_SUCCESSReady = true; } return _ADD_WIFI_RESULT_SUCCESSContent; } }
        private static int _ADD_WIFI_RESULT_SUCCESSContent = default;
        private static bool _ADD_WIFI_RESULT_SUCCESSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#SUPERVISOR_VERIFICATION_SETTING_BIOMETRICS"/>
        /// </summary>
        public static int SUPERVISOR_VERIFICATION_SETTING_BIOMETRICS { get { if (!_SUPERVISOR_VERIFICATION_SETTING_BIOMETRICSReady) { _SUPERVISOR_VERIFICATION_SETTING_BIOMETRICSContent = SGetField<int>(LocalBridgeClazz, "SUPERVISOR_VERIFICATION_SETTING_BIOMETRICS"); _SUPERVISOR_VERIFICATION_SETTING_BIOMETRICSReady = true; } return _SUPERVISOR_VERIFICATION_SETTING_BIOMETRICSContent; } }
        private static int _SUPERVISOR_VERIFICATION_SETTING_BIOMETRICSContent = default;
        private static bool _SUPERVISOR_VERIFICATION_SETTING_BIOMETRICSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#SUPERVISOR_VERIFICATION_SETTING_UNKNOWN"/>
        /// </summary>
        public static int SUPERVISOR_VERIFICATION_SETTING_UNKNOWN { get { if (!_SUPERVISOR_VERIFICATION_SETTING_UNKNOWNReady) { _SUPERVISOR_VERIFICATION_SETTING_UNKNOWNContent = SGetField<int>(LocalBridgeClazz, "SUPERVISOR_VERIFICATION_SETTING_UNKNOWN"); _SUPERVISOR_VERIFICATION_SETTING_UNKNOWNReady = true; } return _SUPERVISOR_VERIFICATION_SETTING_UNKNOWNContent; } }
        private static int _SUPERVISOR_VERIFICATION_SETTING_UNKNOWNContent = default;
        private static bool _SUPERVISOR_VERIFICATION_SETTING_UNKNOWNReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_ACCESSIBILITY_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_ACCESSIBILITY_SETTINGS { get { if (!_ACTION_ACCESSIBILITY_SETTINGSReady) { _ACTION_ACCESSIBILITY_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ACCESSIBILITY_SETTINGS"); _ACTION_ACCESSIBILITY_SETTINGSReady = true; } return _ACTION_ACCESSIBILITY_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_ACCESSIBILITY_SETTINGSContent = default;
        private static bool _ACTION_ACCESSIBILITY_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_ADD_ACCOUNT"/>
        /// </summary>
        public static Java.Lang.String ACTION_ADD_ACCOUNT { get { if (!_ACTION_ADD_ACCOUNTReady) { _ACTION_ADD_ACCOUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ADD_ACCOUNT"); _ACTION_ADD_ACCOUNTReady = true; } return _ACTION_ADD_ACCOUNTContent; } }
        private static Java.Lang.String _ACTION_ADD_ACCOUNTContent = default;
        private static bool _ACTION_ADD_ACCOUNTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_ADVANCED_MEMORY_PROTECTION_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_ADVANCED_MEMORY_PROTECTION_SETTINGS { get { if (!_ACTION_ADVANCED_MEMORY_PROTECTION_SETTINGSReady) { _ACTION_ADVANCED_MEMORY_PROTECTION_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ADVANCED_MEMORY_PROTECTION_SETTINGS"); _ACTION_ADVANCED_MEMORY_PROTECTION_SETTINGSReady = true; } return _ACTION_ADVANCED_MEMORY_PROTECTION_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_ADVANCED_MEMORY_PROTECTION_SETTINGSContent = default;
        private static bool _ACTION_ADVANCED_MEMORY_PROTECTION_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_AIRPLANE_MODE_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_AIRPLANE_MODE_SETTINGS { get { if (!_ACTION_AIRPLANE_MODE_SETTINGSReady) { _ACTION_AIRPLANE_MODE_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_AIRPLANE_MODE_SETTINGS"); _ACTION_AIRPLANE_MODE_SETTINGSReady = true; } return _ACTION_AIRPLANE_MODE_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_AIRPLANE_MODE_SETTINGSContent = default;
        private static bool _ACTION_AIRPLANE_MODE_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_ALL_APPS_NOTIFICATION_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_ALL_APPS_NOTIFICATION_SETTINGS { get { if (!_ACTION_ALL_APPS_NOTIFICATION_SETTINGSReady) { _ACTION_ALL_APPS_NOTIFICATION_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ALL_APPS_NOTIFICATION_SETTINGS"); _ACTION_ALL_APPS_NOTIFICATION_SETTINGSReady = true; } return _ACTION_ALL_APPS_NOTIFICATION_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_ALL_APPS_NOTIFICATION_SETTINGSContent = default;
        private static bool _ACTION_ALL_APPS_NOTIFICATION_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_APN_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_APN_SETTINGS { get { if (!_ACTION_APN_SETTINGSReady) { _ACTION_APN_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_APN_SETTINGS"); _ACTION_APN_SETTINGSReady = true; } return _ACTION_APN_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_APN_SETTINGSContent = default;
        private static bool _ACTION_APN_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_APP_LOCALE_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_APP_LOCALE_SETTINGS { get { if (!_ACTION_APP_LOCALE_SETTINGSReady) { _ACTION_APP_LOCALE_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_APP_LOCALE_SETTINGS"); _ACTION_APP_LOCALE_SETTINGSReady = true; } return _ACTION_APP_LOCALE_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_APP_LOCALE_SETTINGSContent = default;
        private static bool _ACTION_APP_LOCALE_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_APP_NOTIFICATION_BUBBLE_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_APP_NOTIFICATION_BUBBLE_SETTINGS { get { if (!_ACTION_APP_NOTIFICATION_BUBBLE_SETTINGSReady) { _ACTION_APP_NOTIFICATION_BUBBLE_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_APP_NOTIFICATION_BUBBLE_SETTINGS"); _ACTION_APP_NOTIFICATION_BUBBLE_SETTINGSReady = true; } return _ACTION_APP_NOTIFICATION_BUBBLE_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_APP_NOTIFICATION_BUBBLE_SETTINGSContent = default;
        private static bool _ACTION_APP_NOTIFICATION_BUBBLE_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_APP_NOTIFICATION_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_APP_NOTIFICATION_SETTINGS { get { if (!_ACTION_APP_NOTIFICATION_SETTINGSReady) { _ACTION_APP_NOTIFICATION_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_APP_NOTIFICATION_SETTINGS"); _ACTION_APP_NOTIFICATION_SETTINGSReady = true; } return _ACTION_APP_NOTIFICATION_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_APP_NOTIFICATION_SETTINGSContent = default;
        private static bool _ACTION_APP_NOTIFICATION_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_APP_OPEN_BY_DEFAULT_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_APP_OPEN_BY_DEFAULT_SETTINGS { get { if (!_ACTION_APP_OPEN_BY_DEFAULT_SETTINGSReady) { _ACTION_APP_OPEN_BY_DEFAULT_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_APP_OPEN_BY_DEFAULT_SETTINGS"); _ACTION_APP_OPEN_BY_DEFAULT_SETTINGSReady = true; } return _ACTION_APP_OPEN_BY_DEFAULT_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_APP_OPEN_BY_DEFAULT_SETTINGSContent = default;
        private static bool _ACTION_APP_OPEN_BY_DEFAULT_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_APP_SEARCH_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_APP_SEARCH_SETTINGS { get { if (!_ACTION_APP_SEARCH_SETTINGSReady) { _ACTION_APP_SEARCH_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_APP_SEARCH_SETTINGS"); _ACTION_APP_SEARCH_SETTINGSReady = true; } return _ACTION_APP_SEARCH_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_APP_SEARCH_SETTINGSContent = default;
        private static bool _ACTION_APP_SEARCH_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_APP_USAGE_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_APP_USAGE_SETTINGS { get { if (!_ACTION_APP_USAGE_SETTINGSReady) { _ACTION_APP_USAGE_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_APP_USAGE_SETTINGS"); _ACTION_APP_USAGE_SETTINGSReady = true; } return _ACTION_APP_USAGE_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_APP_USAGE_SETTINGSContent = default;
        private static bool _ACTION_APP_USAGE_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_APPLICATION_DETAILS_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_APPLICATION_DETAILS_SETTINGS { get { if (!_ACTION_APPLICATION_DETAILS_SETTINGSReady) { _ACTION_APPLICATION_DETAILS_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_APPLICATION_DETAILS_SETTINGS"); _ACTION_APPLICATION_DETAILS_SETTINGSReady = true; } return _ACTION_APPLICATION_DETAILS_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_APPLICATION_DETAILS_SETTINGSContent = default;
        private static bool _ACTION_APPLICATION_DETAILS_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_APPLICATION_DEVELOPMENT_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_APPLICATION_DEVELOPMENT_SETTINGS { get { if (!_ACTION_APPLICATION_DEVELOPMENT_SETTINGSReady) { _ACTION_APPLICATION_DEVELOPMENT_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_APPLICATION_DEVELOPMENT_SETTINGS"); _ACTION_APPLICATION_DEVELOPMENT_SETTINGSReady = true; } return _ACTION_APPLICATION_DEVELOPMENT_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_APPLICATION_DEVELOPMENT_SETTINGSContent = default;
        private static bool _ACTION_APPLICATION_DEVELOPMENT_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_APPLICATION_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_APPLICATION_SETTINGS { get { if (!_ACTION_APPLICATION_SETTINGSReady) { _ACTION_APPLICATION_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_APPLICATION_SETTINGS"); _ACTION_APPLICATION_SETTINGSReady = true; } return _ACTION_APPLICATION_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_APPLICATION_SETTINGSContent = default;
        private static bool _ACTION_APPLICATION_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_AUTO_ROTATE_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_AUTO_ROTATE_SETTINGS { get { if (!_ACTION_AUTO_ROTATE_SETTINGSReady) { _ACTION_AUTO_ROTATE_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_AUTO_ROTATE_SETTINGS"); _ACTION_AUTO_ROTATE_SETTINGSReady = true; } return _ACTION_AUTO_ROTATE_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_AUTO_ROTATE_SETTINGSContent = default;
        private static bool _ACTION_AUTO_ROTATE_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_BATTERY_SAVER_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_BATTERY_SAVER_SETTINGS { get { if (!_ACTION_BATTERY_SAVER_SETTINGSReady) { _ACTION_BATTERY_SAVER_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_BATTERY_SAVER_SETTINGS"); _ACTION_BATTERY_SAVER_SETTINGSReady = true; } return _ACTION_BATTERY_SAVER_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_BATTERY_SAVER_SETTINGSContent = default;
        private static bool _ACTION_BATTERY_SAVER_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_BIOMETRIC_ENROLL"/>
        /// </summary>
        public static Java.Lang.String ACTION_BIOMETRIC_ENROLL { get { if (!_ACTION_BIOMETRIC_ENROLLReady) { _ACTION_BIOMETRIC_ENROLLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_BIOMETRIC_ENROLL"); _ACTION_BIOMETRIC_ENROLLReady = true; } return _ACTION_BIOMETRIC_ENROLLContent; } }
        private static Java.Lang.String _ACTION_BIOMETRIC_ENROLLContent = default;
        private static bool _ACTION_BIOMETRIC_ENROLLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_BLUETOOTH_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_BLUETOOTH_SETTINGS { get { if (!_ACTION_BLUETOOTH_SETTINGSReady) { _ACTION_BLUETOOTH_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_BLUETOOTH_SETTINGS"); _ACTION_BLUETOOTH_SETTINGSReady = true; } return _ACTION_BLUETOOTH_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_BLUETOOTH_SETTINGSContent = default;
        private static bool _ACTION_BLUETOOTH_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_CAPTIONING_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_CAPTIONING_SETTINGS { get { if (!_ACTION_CAPTIONING_SETTINGSReady) { _ACTION_CAPTIONING_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CAPTIONING_SETTINGS"); _ACTION_CAPTIONING_SETTINGSReady = true; } return _ACTION_CAPTIONING_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_CAPTIONING_SETTINGSContent = default;
        private static bool _ACTION_CAPTIONING_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_CAST_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_CAST_SETTINGS { get { if (!_ACTION_CAST_SETTINGSReady) { _ACTION_CAST_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CAST_SETTINGS"); _ACTION_CAST_SETTINGSReady = true; } return _ACTION_CAST_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_CAST_SETTINGSContent = default;
        private static bool _ACTION_CAST_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_CHANNEL_NOTIFICATION_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_CHANNEL_NOTIFICATION_SETTINGS { get { if (!_ACTION_CHANNEL_NOTIFICATION_SETTINGSReady) { _ACTION_CHANNEL_NOTIFICATION_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CHANNEL_NOTIFICATION_SETTINGS"); _ACTION_CHANNEL_NOTIFICATION_SETTINGSReady = true; } return _ACTION_CHANNEL_NOTIFICATION_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_CHANNEL_NOTIFICATION_SETTINGSContent = default;
        private static bool _ACTION_CHANNEL_NOTIFICATION_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_CONDITION_PROVIDER_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_CONDITION_PROVIDER_SETTINGS { get { if (!_ACTION_CONDITION_PROVIDER_SETTINGSReady) { _ACTION_CONDITION_PROVIDER_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CONDITION_PROVIDER_SETTINGS"); _ACTION_CONDITION_PROVIDER_SETTINGSReady = true; } return _ACTION_CONDITION_PROVIDER_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_CONDITION_PROVIDER_SETTINGSContent = default;
        private static bool _ACTION_CONDITION_PROVIDER_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_DATA_ROAMING_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_DATA_ROAMING_SETTINGS { get { if (!_ACTION_DATA_ROAMING_SETTINGSReady) { _ACTION_DATA_ROAMING_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_DATA_ROAMING_SETTINGS"); _ACTION_DATA_ROAMING_SETTINGSReady = true; } return _ACTION_DATA_ROAMING_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_DATA_ROAMING_SETTINGSContent = default;
        private static bool _ACTION_DATA_ROAMING_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_DATA_USAGE_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_DATA_USAGE_SETTINGS { get { if (!_ACTION_DATA_USAGE_SETTINGSReady) { _ACTION_DATA_USAGE_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_DATA_USAGE_SETTINGS"); _ACTION_DATA_USAGE_SETTINGSReady = true; } return _ACTION_DATA_USAGE_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_DATA_USAGE_SETTINGSContent = default;
        private static bool _ACTION_DATA_USAGE_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_DATE_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_DATE_SETTINGS { get { if (!_ACTION_DATE_SETTINGSReady) { _ACTION_DATE_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_DATE_SETTINGS"); _ACTION_DATE_SETTINGSReady = true; } return _ACTION_DATE_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_DATE_SETTINGSContent = default;
        private static bool _ACTION_DATE_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_DEVICE_INFO_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_DEVICE_INFO_SETTINGS { get { if (!_ACTION_DEVICE_INFO_SETTINGSReady) { _ACTION_DEVICE_INFO_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_DEVICE_INFO_SETTINGS"); _ACTION_DEVICE_INFO_SETTINGSReady = true; } return _ACTION_DEVICE_INFO_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_DEVICE_INFO_SETTINGSContent = default;
        private static bool _ACTION_DEVICE_INFO_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_DISPLAY_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_DISPLAY_SETTINGS { get { if (!_ACTION_DISPLAY_SETTINGSReady) { _ACTION_DISPLAY_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_DISPLAY_SETTINGS"); _ACTION_DISPLAY_SETTINGSReady = true; } return _ACTION_DISPLAY_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_DISPLAY_SETTINGSContent = default;
        private static bool _ACTION_DISPLAY_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_DREAM_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_DREAM_SETTINGS { get { if (!_ACTION_DREAM_SETTINGSReady) { _ACTION_DREAM_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_DREAM_SETTINGS"); _ACTION_DREAM_SETTINGSReady = true; } return _ACTION_DREAM_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_DREAM_SETTINGSContent = default;
        private static bool _ACTION_DREAM_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_FINGERPRINT_ENROLL"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String ACTION_FINGERPRINT_ENROLL { get { if (!_ACTION_FINGERPRINT_ENROLLReady) { _ACTION_FINGERPRINT_ENROLLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_FINGERPRINT_ENROLL"); _ACTION_FINGERPRINT_ENROLLReady = true; } return _ACTION_FINGERPRINT_ENROLLContent; } }
        private static Java.Lang.String _ACTION_FINGERPRINT_ENROLLContent = default;
        private static bool _ACTION_FINGERPRINT_ENROLLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_HARD_KEYBOARD_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_HARD_KEYBOARD_SETTINGS { get { if (!_ACTION_HARD_KEYBOARD_SETTINGSReady) { _ACTION_HARD_KEYBOARD_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_HARD_KEYBOARD_SETTINGS"); _ACTION_HARD_KEYBOARD_SETTINGSReady = true; } return _ACTION_HARD_KEYBOARD_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_HARD_KEYBOARD_SETTINGSContent = default;
        private static bool _ACTION_HARD_KEYBOARD_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_HOME_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_HOME_SETTINGS { get { if (!_ACTION_HOME_SETTINGSReady) { _ACTION_HOME_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_HOME_SETTINGS"); _ACTION_HOME_SETTINGSReady = true; } return _ACTION_HOME_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_HOME_SETTINGSContent = default;
        private static bool _ACTION_HOME_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS { get { if (!_ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGSReady) { _ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS"); _ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGSReady = true; } return _ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGSContent = default;
        private static bool _ACTION_IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS { get { if (!_ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGSReady) { _ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGS"); _ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGSReady = true; } return _ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGSContent = default;
        private static bool _ACTION_IGNORE_BATTERY_OPTIMIZATION_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_INPUT_METHOD_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_INPUT_METHOD_SETTINGS { get { if (!_ACTION_INPUT_METHOD_SETTINGSReady) { _ACTION_INPUT_METHOD_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_INPUT_METHOD_SETTINGS"); _ACTION_INPUT_METHOD_SETTINGSReady = true; } return _ACTION_INPUT_METHOD_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_INPUT_METHOD_SETTINGSContent = default;
        private static bool _ACTION_INPUT_METHOD_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_INPUT_METHOD_SUBTYPE_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_INPUT_METHOD_SUBTYPE_SETTINGS { get { if (!_ACTION_INPUT_METHOD_SUBTYPE_SETTINGSReady) { _ACTION_INPUT_METHOD_SUBTYPE_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_INPUT_METHOD_SUBTYPE_SETTINGS"); _ACTION_INPUT_METHOD_SUBTYPE_SETTINGSReady = true; } return _ACTION_INPUT_METHOD_SUBTYPE_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_INPUT_METHOD_SUBTYPE_SETTINGSContent = default;
        private static bool _ACTION_INPUT_METHOD_SUBTYPE_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_INTERNAL_STORAGE_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_INTERNAL_STORAGE_SETTINGS { get { if (!_ACTION_INTERNAL_STORAGE_SETTINGSReady) { _ACTION_INTERNAL_STORAGE_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_INTERNAL_STORAGE_SETTINGS"); _ACTION_INTERNAL_STORAGE_SETTINGSReady = true; } return _ACTION_INTERNAL_STORAGE_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_INTERNAL_STORAGE_SETTINGSContent = default;
        private static bool _ACTION_INTERNAL_STORAGE_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_LOCALE_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_LOCALE_SETTINGS { get { if (!_ACTION_LOCALE_SETTINGSReady) { _ACTION_LOCALE_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_LOCALE_SETTINGS"); _ACTION_LOCALE_SETTINGSReady = true; } return _ACTION_LOCALE_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_LOCALE_SETTINGSContent = default;
        private static bool _ACTION_LOCALE_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_LOCATION_SOURCE_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_LOCATION_SOURCE_SETTINGS { get { if (!_ACTION_LOCATION_SOURCE_SETTINGSReady) { _ACTION_LOCATION_SOURCE_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_LOCATION_SOURCE_SETTINGS"); _ACTION_LOCATION_SOURCE_SETTINGSReady = true; } return _ACTION_LOCATION_SOURCE_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_LOCATION_SOURCE_SETTINGSContent = default;
        private static bool _ACTION_LOCATION_SOURCE_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS { get { if (!_ACTION_MANAGE_ALL_APPLICATIONS_SETTINGSReady) { _ACTION_MANAGE_ALL_APPLICATIONS_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MANAGE_ALL_APPLICATIONS_SETTINGS"); _ACTION_MANAGE_ALL_APPLICATIONS_SETTINGSReady = true; } return _ACTION_MANAGE_ALL_APPLICATIONS_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_MANAGE_ALL_APPLICATIONS_SETTINGSContent = default;
        private static bool _ACTION_MANAGE_ALL_APPLICATIONS_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION"/>
        /// </summary>
        public static Java.Lang.String ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION { get { if (!_ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSIONReady) { _ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION"); _ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSIONReady = true; } return _ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSIONContent; } }
        private static Java.Lang.String _ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSIONContent = default;
        private static bool _ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_MANAGE_ALL_SIM_PROFILES_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_MANAGE_ALL_SIM_PROFILES_SETTINGS { get { if (!_ACTION_MANAGE_ALL_SIM_PROFILES_SETTINGSReady) { _ACTION_MANAGE_ALL_SIM_PROFILES_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MANAGE_ALL_SIM_PROFILES_SETTINGS"); _ACTION_MANAGE_ALL_SIM_PROFILES_SETTINGSReady = true; } return _ACTION_MANAGE_ALL_SIM_PROFILES_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_MANAGE_ALL_SIM_PROFILES_SETTINGSContent = default;
        private static bool _ACTION_MANAGE_ALL_SIM_PROFILES_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION"/>
        /// </summary>
        public static Java.Lang.String ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION { get { if (!_ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSIONReady) { _ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION"); _ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSIONReady = true; } return _ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSIONContent; } }
        private static Java.Lang.String _ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSIONContent = default;
        private static bool _ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENT"/>
        /// </summary>
        public static Java.Lang.String ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENT { get { if (!_ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENTReady) { _ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENT"); _ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENTReady = true; } return _ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENTContent; } }
        private static Java.Lang.String _ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENTContent = default;
        private static bool _ACTION_MANAGE_APP_USE_FULL_SCREEN_INTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_MANAGE_APPLICATIONS_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_MANAGE_APPLICATIONS_SETTINGS { get { if (!_ACTION_MANAGE_APPLICATIONS_SETTINGSReady) { _ACTION_MANAGE_APPLICATIONS_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MANAGE_APPLICATIONS_SETTINGS"); _ACTION_MANAGE_APPLICATIONS_SETTINGSReady = true; } return _ACTION_MANAGE_APPLICATIONS_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_MANAGE_APPLICATIONS_SETTINGSContent = default;
        private static bool _ACTION_MANAGE_APPLICATIONS_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_MANAGE_DEFAULT_APPS_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_MANAGE_DEFAULT_APPS_SETTINGS { get { if (!_ACTION_MANAGE_DEFAULT_APPS_SETTINGSReady) { _ACTION_MANAGE_DEFAULT_APPS_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MANAGE_DEFAULT_APPS_SETTINGS"); _ACTION_MANAGE_DEFAULT_APPS_SETTINGSReady = true; } return _ACTION_MANAGE_DEFAULT_APPS_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_MANAGE_DEFAULT_APPS_SETTINGSContent = default;
        private static bool _ACTION_MANAGE_DEFAULT_APPS_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_MANAGE_OVERLAY_PERMISSION"/>
        /// </summary>
        public static Java.Lang.String ACTION_MANAGE_OVERLAY_PERMISSION { get { if (!_ACTION_MANAGE_OVERLAY_PERMISSIONReady) { _ACTION_MANAGE_OVERLAY_PERMISSIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MANAGE_OVERLAY_PERMISSION"); _ACTION_MANAGE_OVERLAY_PERMISSIONReady = true; } return _ACTION_MANAGE_OVERLAY_PERMISSIONContent; } }
        private static Java.Lang.String _ACTION_MANAGE_OVERLAY_PERMISSIONContent = default;
        private static bool _ACTION_MANAGE_OVERLAY_PERMISSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_MANAGE_SUPERVISOR_RESTRICTED_SETTING"/>
        /// </summary>
        public static Java.Lang.String ACTION_MANAGE_SUPERVISOR_RESTRICTED_SETTING { get { if (!_ACTION_MANAGE_SUPERVISOR_RESTRICTED_SETTINGReady) { _ACTION_MANAGE_SUPERVISOR_RESTRICTED_SETTINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MANAGE_SUPERVISOR_RESTRICTED_SETTING"); _ACTION_MANAGE_SUPERVISOR_RESTRICTED_SETTINGReady = true; } return _ACTION_MANAGE_SUPERVISOR_RESTRICTED_SETTINGContent; } }
        private static Java.Lang.String _ACTION_MANAGE_SUPERVISOR_RESTRICTED_SETTINGContent = default;
        private static bool _ACTION_MANAGE_SUPERVISOR_RESTRICTED_SETTINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_MANAGE_UNKNOWN_APP_SOURCES"/>
        /// </summary>
        public static Java.Lang.String ACTION_MANAGE_UNKNOWN_APP_SOURCES { get { if (!_ACTION_MANAGE_UNKNOWN_APP_SOURCESReady) { _ACTION_MANAGE_UNKNOWN_APP_SOURCESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MANAGE_UNKNOWN_APP_SOURCES"); _ACTION_MANAGE_UNKNOWN_APP_SOURCESReady = true; } return _ACTION_MANAGE_UNKNOWN_APP_SOURCESContent; } }
        private static Java.Lang.String _ACTION_MANAGE_UNKNOWN_APP_SOURCESContent = default;
        private static bool _ACTION_MANAGE_UNKNOWN_APP_SOURCESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_MANAGE_WRITE_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_MANAGE_WRITE_SETTINGS { get { if (!_ACTION_MANAGE_WRITE_SETTINGSReady) { _ACTION_MANAGE_WRITE_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MANAGE_WRITE_SETTINGS"); _ACTION_MANAGE_WRITE_SETTINGSReady = true; } return _ACTION_MANAGE_WRITE_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_MANAGE_WRITE_SETTINGSContent = default;
        private static bool _ACTION_MANAGE_WRITE_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_MEMORY_CARD_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_MEMORY_CARD_SETTINGS { get { if (!_ACTION_MEMORY_CARD_SETTINGSReady) { _ACTION_MEMORY_CARD_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_MEMORY_CARD_SETTINGS"); _ACTION_MEMORY_CARD_SETTINGSReady = true; } return _ACTION_MEMORY_CARD_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_MEMORY_CARD_SETTINGSContent = default;
        private static bool _ACTION_MEMORY_CARD_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_NETWORK_OPERATOR_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_NETWORK_OPERATOR_SETTINGS { get { if (!_ACTION_NETWORK_OPERATOR_SETTINGSReady) { _ACTION_NETWORK_OPERATOR_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NETWORK_OPERATOR_SETTINGS"); _ACTION_NETWORK_OPERATOR_SETTINGSReady = true; } return _ACTION_NETWORK_OPERATOR_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_NETWORK_OPERATOR_SETTINGSContent = default;
        private static bool _ACTION_NETWORK_OPERATOR_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_NFC_PAYMENT_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_NFC_PAYMENT_SETTINGS { get { if (!_ACTION_NFC_PAYMENT_SETTINGSReady) { _ACTION_NFC_PAYMENT_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NFC_PAYMENT_SETTINGS"); _ACTION_NFC_PAYMENT_SETTINGSReady = true; } return _ACTION_NFC_PAYMENT_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_NFC_PAYMENT_SETTINGSContent = default;
        private static bool _ACTION_NFC_PAYMENT_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_NFC_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_NFC_SETTINGS { get { if (!_ACTION_NFC_SETTINGSReady) { _ACTION_NFC_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NFC_SETTINGS"); _ACTION_NFC_SETTINGSReady = true; } return _ACTION_NFC_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_NFC_SETTINGSContent = default;
        private static bool _ACTION_NFC_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_NFCSHARING_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_NFCSHARING_SETTINGS { get { if (!_ACTION_NFCSHARING_SETTINGSReady) { _ACTION_NFCSHARING_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NFCSHARING_SETTINGS"); _ACTION_NFCSHARING_SETTINGSReady = true; } return _ACTION_NFCSHARING_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_NFCSHARING_SETTINGSContent = default;
        private static bool _ACTION_NFCSHARING_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_NIGHT_DISPLAY_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_NIGHT_DISPLAY_SETTINGS { get { if (!_ACTION_NIGHT_DISPLAY_SETTINGSReady) { _ACTION_NIGHT_DISPLAY_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NIGHT_DISPLAY_SETTINGS"); _ACTION_NIGHT_DISPLAY_SETTINGSReady = true; } return _ACTION_NIGHT_DISPLAY_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_NIGHT_DISPLAY_SETTINGSContent = default;
        private static bool _ACTION_NIGHT_DISPLAY_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_NOTIFICATION_ASSISTANT_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_NOTIFICATION_ASSISTANT_SETTINGS { get { if (!_ACTION_NOTIFICATION_ASSISTANT_SETTINGSReady) { _ACTION_NOTIFICATION_ASSISTANT_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NOTIFICATION_ASSISTANT_SETTINGS"); _ACTION_NOTIFICATION_ASSISTANT_SETTINGSReady = true; } return _ACTION_NOTIFICATION_ASSISTANT_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_NOTIFICATION_ASSISTANT_SETTINGSContent = default;
        private static bool _ACTION_NOTIFICATION_ASSISTANT_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_NOTIFICATION_LISTENER_DETAIL_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_NOTIFICATION_LISTENER_DETAIL_SETTINGS { get { if (!_ACTION_NOTIFICATION_LISTENER_DETAIL_SETTINGSReady) { _ACTION_NOTIFICATION_LISTENER_DETAIL_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NOTIFICATION_LISTENER_DETAIL_SETTINGS"); _ACTION_NOTIFICATION_LISTENER_DETAIL_SETTINGSReady = true; } return _ACTION_NOTIFICATION_LISTENER_DETAIL_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_NOTIFICATION_LISTENER_DETAIL_SETTINGSContent = default;
        private static bool _ACTION_NOTIFICATION_LISTENER_DETAIL_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_NOTIFICATION_LISTENER_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_NOTIFICATION_LISTENER_SETTINGS { get { if (!_ACTION_NOTIFICATION_LISTENER_SETTINGSReady) { _ACTION_NOTIFICATION_LISTENER_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NOTIFICATION_LISTENER_SETTINGS"); _ACTION_NOTIFICATION_LISTENER_SETTINGSReady = true; } return _ACTION_NOTIFICATION_LISTENER_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_NOTIFICATION_LISTENER_SETTINGSContent = default;
        private static bool _ACTION_NOTIFICATION_LISTENER_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS { get { if (!_ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGSReady) { _ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS"); _ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGSReady = true; } return _ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGSContent = default;
        private static bool _ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_PRINT_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_PRINT_SETTINGS { get { if (!_ACTION_PRINT_SETTINGSReady) { _ACTION_PRINT_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_PRINT_SETTINGS"); _ACTION_PRINT_SETTINGSReady = true; } return _ACTION_PRINT_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_PRINT_SETTINGSContent = default;
        private static bool _ACTION_PRINT_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_PRIVACY_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_PRIVACY_SETTINGS { get { if (!_ACTION_PRIVACY_SETTINGSReady) { _ACTION_PRIVACY_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_PRIVACY_SETTINGS"); _ACTION_PRIVACY_SETTINGSReady = true; } return _ACTION_PRIVACY_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_PRIVACY_SETTINGSContent = default;
        private static bool _ACTION_PRIVACY_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_PROCESS_WIFI_EASY_CONNECT_URI"/>
        /// </summary>
        public static Java.Lang.String ACTION_PROCESS_WIFI_EASY_CONNECT_URI { get { if (!_ACTION_PROCESS_WIFI_EASY_CONNECT_URIReady) { _ACTION_PROCESS_WIFI_EASY_CONNECT_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_PROCESS_WIFI_EASY_CONNECT_URI"); _ACTION_PROCESS_WIFI_EASY_CONNECT_URIReady = true; } return _ACTION_PROCESS_WIFI_EASY_CONNECT_URIContent; } }
        private static Java.Lang.String _ACTION_PROCESS_WIFI_EASY_CONNECT_URIContent = default;
        private static bool _ACTION_PROCESS_WIFI_EASY_CONNECT_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_QUICK_ACCESS_WALLET_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_QUICK_ACCESS_WALLET_SETTINGS { get { if (!_ACTION_QUICK_ACCESS_WALLET_SETTINGSReady) { _ACTION_QUICK_ACCESS_WALLET_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_QUICK_ACCESS_WALLET_SETTINGS"); _ACTION_QUICK_ACCESS_WALLET_SETTINGSReady = true; } return _ACTION_QUICK_ACCESS_WALLET_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_QUICK_ACCESS_WALLET_SETTINGSContent = default;
        private static bool _ACTION_QUICK_ACCESS_WALLET_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_QUICK_LAUNCH_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_QUICK_LAUNCH_SETTINGS { get { if (!_ACTION_QUICK_LAUNCH_SETTINGSReady) { _ACTION_QUICK_LAUNCH_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_QUICK_LAUNCH_SETTINGS"); _ACTION_QUICK_LAUNCH_SETTINGSReady = true; } return _ACTION_QUICK_LAUNCH_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_QUICK_LAUNCH_SETTINGSContent = default;
        private static bool _ACTION_QUICK_LAUNCH_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_REGIONAL_PREFERENCES_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_REGIONAL_PREFERENCES_SETTINGS { get { if (!_ACTION_REGIONAL_PREFERENCES_SETTINGSReady) { _ACTION_REGIONAL_PREFERENCES_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_REGIONAL_PREFERENCES_SETTINGS"); _ACTION_REGIONAL_PREFERENCES_SETTINGSReady = true; } return _ACTION_REGIONAL_PREFERENCES_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_REGIONAL_PREFERENCES_SETTINGSContent = default;
        private static bool _ACTION_REGIONAL_PREFERENCES_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS"/>
        /// </summary>
        public static Java.Lang.String ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS { get { if (!_ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONSReady) { _ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS"); _ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONSReady = true; } return _ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONSContent; } }
        private static Java.Lang.String _ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONSContent = default;
        private static bool _ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_REQUEST_MANAGE_MEDIA"/>
        /// </summary>
        public static Java.Lang.String ACTION_REQUEST_MANAGE_MEDIA { get { if (!_ACTION_REQUEST_MANAGE_MEDIAReady) { _ACTION_REQUEST_MANAGE_MEDIAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_REQUEST_MANAGE_MEDIA"); _ACTION_REQUEST_MANAGE_MEDIAReady = true; } return _ACTION_REQUEST_MANAGE_MEDIAContent; } }
        private static Java.Lang.String _ACTION_REQUEST_MANAGE_MEDIAContent = default;
        private static bool _ACTION_REQUEST_MANAGE_MEDIAReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_REQUEST_SCHEDULE_EXACT_ALARM"/>
        /// </summary>
        public static Java.Lang.String ACTION_REQUEST_SCHEDULE_EXACT_ALARM { get { if (!_ACTION_REQUEST_SCHEDULE_EXACT_ALARMReady) { _ACTION_REQUEST_SCHEDULE_EXACT_ALARMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_REQUEST_SCHEDULE_EXACT_ALARM"); _ACTION_REQUEST_SCHEDULE_EXACT_ALARMReady = true; } return _ACTION_REQUEST_SCHEDULE_EXACT_ALARMContent; } }
        private static Java.Lang.String _ACTION_REQUEST_SCHEDULE_EXACT_ALARMContent = default;
        private static bool _ACTION_REQUEST_SCHEDULE_EXACT_ALARMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_REQUEST_SET_AUTOFILL_SERVICE"/>
        /// </summary>
        public static Java.Lang.String ACTION_REQUEST_SET_AUTOFILL_SERVICE { get { if (!_ACTION_REQUEST_SET_AUTOFILL_SERVICEReady) { _ACTION_REQUEST_SET_AUTOFILL_SERVICEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_REQUEST_SET_AUTOFILL_SERVICE"); _ACTION_REQUEST_SET_AUTOFILL_SERVICEReady = true; } return _ACTION_REQUEST_SET_AUTOFILL_SERVICEContent; } }
        private static Java.Lang.String _ACTION_REQUEST_SET_AUTOFILL_SERVICEContent = default;
        private static bool _ACTION_REQUEST_SET_AUTOFILL_SERVICEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_SEARCH_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_SEARCH_SETTINGS { get { if (!_ACTION_SEARCH_SETTINGSReady) { _ACTION_SEARCH_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SEARCH_SETTINGS"); _ACTION_SEARCH_SETTINGSReady = true; } return _ACTION_SEARCH_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_SEARCH_SETTINGSContent = default;
        private static bool _ACTION_SEARCH_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_SECURITY_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_SECURITY_SETTINGS { get { if (!_ACTION_SECURITY_SETTINGSReady) { _ACTION_SECURITY_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SECURITY_SETTINGS"); _ACTION_SECURITY_SETTINGSReady = true; } return _ACTION_SECURITY_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_SECURITY_SETTINGSContent = default;
        private static bool _ACTION_SECURITY_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_SETTINGS { get { if (!_ACTION_SETTINGSReady) { _ACTION_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SETTINGS"); _ACTION_SETTINGSReady = true; } return _ACTION_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_SETTINGSContent = default;
        private static bool _ACTION_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_SETTINGS_EMBED_DEEP_LINK_ACTIVITY"/>
        /// </summary>
        public static Java.Lang.String ACTION_SETTINGS_EMBED_DEEP_LINK_ACTIVITY { get { if (!_ACTION_SETTINGS_EMBED_DEEP_LINK_ACTIVITYReady) { _ACTION_SETTINGS_EMBED_DEEP_LINK_ACTIVITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SETTINGS_EMBED_DEEP_LINK_ACTIVITY"); _ACTION_SETTINGS_EMBED_DEEP_LINK_ACTIVITYReady = true; } return _ACTION_SETTINGS_EMBED_DEEP_LINK_ACTIVITYContent; } }
        private static Java.Lang.String _ACTION_SETTINGS_EMBED_DEEP_LINK_ACTIVITYContent = default;
        private static bool _ACTION_SETTINGS_EMBED_DEEP_LINK_ACTIVITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_SHOW_REGULATORY_INFO"/>
        /// </summary>
        public static Java.Lang.String ACTION_SHOW_REGULATORY_INFO { get { if (!_ACTION_SHOW_REGULATORY_INFOReady) { _ACTION_SHOW_REGULATORY_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SHOW_REGULATORY_INFO"); _ACTION_SHOW_REGULATORY_INFOReady = true; } return _ACTION_SHOW_REGULATORY_INFOContent; } }
        private static Java.Lang.String _ACTION_SHOW_REGULATORY_INFOContent = default;
        private static bool _ACTION_SHOW_REGULATORY_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_SHOW_WORK_POLICY_INFO"/>
        /// </summary>
        public static Java.Lang.String ACTION_SHOW_WORK_POLICY_INFO { get { if (!_ACTION_SHOW_WORK_POLICY_INFOReady) { _ACTION_SHOW_WORK_POLICY_INFOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SHOW_WORK_POLICY_INFO"); _ACTION_SHOW_WORK_POLICY_INFOReady = true; } return _ACTION_SHOW_WORK_POLICY_INFOContent; } }
        private static Java.Lang.String _ACTION_SHOW_WORK_POLICY_INFOContent = default;
        private static bool _ACTION_SHOW_WORK_POLICY_INFOReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_SOUND_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_SOUND_SETTINGS { get { if (!_ACTION_SOUND_SETTINGSReady) { _ACTION_SOUND_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SOUND_SETTINGS"); _ACTION_SOUND_SETTINGSReady = true; } return _ACTION_SOUND_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_SOUND_SETTINGSContent = default;
        private static bool _ACTION_SOUND_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_STORAGE_VOLUME_ACCESS_SETTINGS"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String ACTION_STORAGE_VOLUME_ACCESS_SETTINGS { get { if (!_ACTION_STORAGE_VOLUME_ACCESS_SETTINGSReady) { _ACTION_STORAGE_VOLUME_ACCESS_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_STORAGE_VOLUME_ACCESS_SETTINGS"); _ACTION_STORAGE_VOLUME_ACCESS_SETTINGSReady = true; } return _ACTION_STORAGE_VOLUME_ACCESS_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_STORAGE_VOLUME_ACCESS_SETTINGSContent = default;
        private static bool _ACTION_STORAGE_VOLUME_ACCESS_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_SYNC_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_SYNC_SETTINGS { get { if (!_ACTION_SYNC_SETTINGSReady) { _ACTION_SYNC_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SYNC_SETTINGS"); _ACTION_SYNC_SETTINGSReady = true; } return _ACTION_SYNC_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_SYNC_SETTINGSContent = default;
        private static bool _ACTION_SYNC_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_USAGE_ACCESS_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_USAGE_ACCESS_SETTINGS { get { if (!_ACTION_USAGE_ACCESS_SETTINGSReady) { _ACTION_USAGE_ACCESS_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_USAGE_ACCESS_SETTINGS"); _ACTION_USAGE_ACCESS_SETTINGSReady = true; } return _ACTION_USAGE_ACCESS_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_USAGE_ACCESS_SETTINGSContent = default;
        private static bool _ACTION_USAGE_ACCESS_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_USER_DICTIONARY_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_USER_DICTIONARY_SETTINGS { get { if (!_ACTION_USER_DICTIONARY_SETTINGSReady) { _ACTION_USER_DICTIONARY_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_USER_DICTIONARY_SETTINGS"); _ACTION_USER_DICTIONARY_SETTINGSReady = true; } return _ACTION_USER_DICTIONARY_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_USER_DICTIONARY_SETTINGSContent = default;
        private static bool _ACTION_USER_DICTIONARY_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_VOICE_CONTROL_AIRPLANE_MODE"/>
        /// </summary>
        public static Java.Lang.String ACTION_VOICE_CONTROL_AIRPLANE_MODE { get { if (!_ACTION_VOICE_CONTROL_AIRPLANE_MODEReady) { _ACTION_VOICE_CONTROL_AIRPLANE_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_VOICE_CONTROL_AIRPLANE_MODE"); _ACTION_VOICE_CONTROL_AIRPLANE_MODEReady = true; } return _ACTION_VOICE_CONTROL_AIRPLANE_MODEContent; } }
        private static Java.Lang.String _ACTION_VOICE_CONTROL_AIRPLANE_MODEContent = default;
        private static bool _ACTION_VOICE_CONTROL_AIRPLANE_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_VOICE_CONTROL_BATTERY_SAVER_MODE"/>
        /// </summary>
        public static Java.Lang.String ACTION_VOICE_CONTROL_BATTERY_SAVER_MODE { get { if (!_ACTION_VOICE_CONTROL_BATTERY_SAVER_MODEReady) { _ACTION_VOICE_CONTROL_BATTERY_SAVER_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_VOICE_CONTROL_BATTERY_SAVER_MODE"); _ACTION_VOICE_CONTROL_BATTERY_SAVER_MODEReady = true; } return _ACTION_VOICE_CONTROL_BATTERY_SAVER_MODEContent; } }
        private static Java.Lang.String _ACTION_VOICE_CONTROL_BATTERY_SAVER_MODEContent = default;
        private static bool _ACTION_VOICE_CONTROL_BATTERY_SAVER_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODE"/>
        /// </summary>
        public static Java.Lang.String ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODE { get { if (!_ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODEReady) { _ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODE"); _ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODEReady = true; } return _ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODEContent; } }
        private static Java.Lang.String _ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODEContent = default;
        private static bool _ACTION_VOICE_CONTROL_DO_NOT_DISTURB_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_VOICE_INPUT_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_VOICE_INPUT_SETTINGS { get { if (!_ACTION_VOICE_INPUT_SETTINGSReady) { _ACTION_VOICE_INPUT_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_VOICE_INPUT_SETTINGS"); _ACTION_VOICE_INPUT_SETTINGSReady = true; } return _ACTION_VOICE_INPUT_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_VOICE_INPUT_SETTINGSContent = default;
        private static bool _ACTION_VOICE_INPUT_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_VPN_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_VPN_SETTINGS { get { if (!_ACTION_VPN_SETTINGSReady) { _ACTION_VPN_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_VPN_SETTINGS"); _ACTION_VPN_SETTINGSReady = true; } return _ACTION_VPN_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_VPN_SETTINGSContent = default;
        private static bool _ACTION_VPN_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_VR_LISTENER_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_VR_LISTENER_SETTINGS { get { if (!_ACTION_VR_LISTENER_SETTINGSReady) { _ACTION_VR_LISTENER_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_VR_LISTENER_SETTINGS"); _ACTION_VR_LISTENER_SETTINGSReady = true; } return _ACTION_VR_LISTENER_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_VR_LISTENER_SETTINGSContent = default;
        private static bool _ACTION_VR_LISTENER_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_WEBVIEW_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_WEBVIEW_SETTINGS { get { if (!_ACTION_WEBVIEW_SETTINGSReady) { _ACTION_WEBVIEW_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_WEBVIEW_SETTINGS"); _ACTION_WEBVIEW_SETTINGSReady = true; } return _ACTION_WEBVIEW_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_WEBVIEW_SETTINGSContent = default;
        private static bool _ACTION_WEBVIEW_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_WIFI_ADD_NETWORKS"/>
        /// </summary>
        public static Java.Lang.String ACTION_WIFI_ADD_NETWORKS { get { if (!_ACTION_WIFI_ADD_NETWORKSReady) { _ACTION_WIFI_ADD_NETWORKSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_WIFI_ADD_NETWORKS"); _ACTION_WIFI_ADD_NETWORKSReady = true; } return _ACTION_WIFI_ADD_NETWORKSContent; } }
        private static Java.Lang.String _ACTION_WIFI_ADD_NETWORKSContent = default;
        private static bool _ACTION_WIFI_ADD_NETWORKSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_WIFI_IP_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_WIFI_IP_SETTINGS { get { if (!_ACTION_WIFI_IP_SETTINGSReady) { _ACTION_WIFI_IP_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_WIFI_IP_SETTINGS"); _ACTION_WIFI_IP_SETTINGSReady = true; } return _ACTION_WIFI_IP_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_WIFI_IP_SETTINGSContent = default;
        private static bool _ACTION_WIFI_IP_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_WIFI_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_WIFI_SETTINGS { get { if (!_ACTION_WIFI_SETTINGSReady) { _ACTION_WIFI_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_WIFI_SETTINGS"); _ACTION_WIFI_SETTINGSReady = true; } return _ACTION_WIFI_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_WIFI_SETTINGSContent = default;
        private static bool _ACTION_WIFI_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_WIRELESS_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_WIRELESS_SETTINGS { get { if (!_ACTION_WIRELESS_SETTINGSReady) { _ACTION_WIRELESS_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_WIRELESS_SETTINGS"); _ACTION_WIRELESS_SETTINGSReady = true; } return _ACTION_WIRELESS_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_WIRELESS_SETTINGSContent = default;
        private static bool _ACTION_WIRELESS_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#ACTION_ZEN_MODE_PRIORITY_SETTINGS"/>
        /// </summary>
        public static Java.Lang.String ACTION_ZEN_MODE_PRIORITY_SETTINGS { get { if (!_ACTION_ZEN_MODE_PRIORITY_SETTINGSReady) { _ACTION_ZEN_MODE_PRIORITY_SETTINGSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_ZEN_MODE_PRIORITY_SETTINGS"); _ACTION_ZEN_MODE_PRIORITY_SETTINGSReady = true; } return _ACTION_ZEN_MODE_PRIORITY_SETTINGSContent; } }
        private static Java.Lang.String _ACTION_ZEN_MODE_PRIORITY_SETTINGSContent = default;
        private static bool _ACTION_ZEN_MODE_PRIORITY_SETTINGSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#AUTHORITY"/>
        /// </summary>
        public static Java.Lang.String AUTHORITY { get { if (!_AUTHORITYReady) { _AUTHORITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTHORITY"); _AUTHORITYReady = true; } return _AUTHORITYContent; } }
        private static Java.Lang.String _AUTHORITYContent = default;
        private static bool _AUTHORITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_ACCOUNT_TYPES"/>
        /// </summary>
        public static Java.Lang.String EXTRA_ACCOUNT_TYPES { get { if (!_EXTRA_ACCOUNT_TYPESReady) { _EXTRA_ACCOUNT_TYPESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ACCOUNT_TYPES"); _EXTRA_ACCOUNT_TYPESReady = true; } return _EXTRA_ACCOUNT_TYPESContent; } }
        private static Java.Lang.String _EXTRA_ACCOUNT_TYPESContent = default;
        private static bool _EXTRA_ACCOUNT_TYPESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_AIRPLANE_MODE_ENABLED"/>
        /// </summary>
        public static Java.Lang.String EXTRA_AIRPLANE_MODE_ENABLED { get { if (!_EXTRA_AIRPLANE_MODE_ENABLEDReady) { _EXTRA_AIRPLANE_MODE_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_AIRPLANE_MODE_ENABLED"); _EXTRA_AIRPLANE_MODE_ENABLEDReady = true; } return _EXTRA_AIRPLANE_MODE_ENABLEDContent; } }
        private static Java.Lang.String _EXTRA_AIRPLANE_MODE_ENABLEDContent = default;
        private static bool _EXTRA_AIRPLANE_MODE_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_APP_PACKAGE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_APP_PACKAGE { get { if (!_EXTRA_APP_PACKAGEReady) { _EXTRA_APP_PACKAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_APP_PACKAGE"); _EXTRA_APP_PACKAGEReady = true; } return _EXTRA_APP_PACKAGEContent; } }
        private static Java.Lang.String _EXTRA_APP_PACKAGEContent = default;
        private static bool _EXTRA_APP_PACKAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_AUTHORITIES"/>
        /// </summary>
        public static Java.Lang.String EXTRA_AUTHORITIES { get { if (!_EXTRA_AUTHORITIESReady) { _EXTRA_AUTHORITIESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_AUTHORITIES"); _EXTRA_AUTHORITIESReady = true; } return _EXTRA_AUTHORITIESContent; } }
        private static Java.Lang.String _EXTRA_AUTHORITIESContent = default;
        private static bool _EXTRA_AUTHORITIESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_BATTERY_SAVER_MODE_ENABLED"/>
        /// </summary>
        public static Java.Lang.String EXTRA_BATTERY_SAVER_MODE_ENABLED { get { if (!_EXTRA_BATTERY_SAVER_MODE_ENABLEDReady) { _EXTRA_BATTERY_SAVER_MODE_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_BATTERY_SAVER_MODE_ENABLED"); _EXTRA_BATTERY_SAVER_MODE_ENABLEDReady = true; } return _EXTRA_BATTERY_SAVER_MODE_ENABLEDContent; } }
        private static Java.Lang.String _EXTRA_BATTERY_SAVER_MODE_ENABLEDContent = default;
        private static bool _EXTRA_BATTERY_SAVER_MODE_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_BIOMETRIC_AUTHENTICATORS_ALLOWED"/>
        /// </summary>
        public static Java.Lang.String EXTRA_BIOMETRIC_AUTHENTICATORS_ALLOWED { get { if (!_EXTRA_BIOMETRIC_AUTHENTICATORS_ALLOWEDReady) { _EXTRA_BIOMETRIC_AUTHENTICATORS_ALLOWEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_BIOMETRIC_AUTHENTICATORS_ALLOWED"); _EXTRA_BIOMETRIC_AUTHENTICATORS_ALLOWEDReady = true; } return _EXTRA_BIOMETRIC_AUTHENTICATORS_ALLOWEDContent; } }
        private static Java.Lang.String _EXTRA_BIOMETRIC_AUTHENTICATORS_ALLOWEDContent = default;
        private static bool _EXTRA_BIOMETRIC_AUTHENTICATORS_ALLOWEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_CHANNEL_FILTER_LIST"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CHANNEL_FILTER_LIST { get { if (!_EXTRA_CHANNEL_FILTER_LISTReady) { _EXTRA_CHANNEL_FILTER_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CHANNEL_FILTER_LIST"); _EXTRA_CHANNEL_FILTER_LISTReady = true; } return _EXTRA_CHANNEL_FILTER_LISTContent; } }
        private static Java.Lang.String _EXTRA_CHANNEL_FILTER_LISTContent = default;
        private static bool _EXTRA_CHANNEL_FILTER_LISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_CHANNEL_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CHANNEL_ID { get { if (!_EXTRA_CHANNEL_IDReady) { _EXTRA_CHANNEL_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CHANNEL_ID"); _EXTRA_CHANNEL_IDReady = true; } return _EXTRA_CHANNEL_IDContent; } }
        private static Java.Lang.String _EXTRA_CHANNEL_IDContent = default;
        private static bool _EXTRA_CHANNEL_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_CONVERSATION_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_CONVERSATION_ID { get { if (!_EXTRA_CONVERSATION_IDReady) { _EXTRA_CONVERSATION_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CONVERSATION_ID"); _EXTRA_CONVERSATION_IDReady = true; } return _EXTRA_CONVERSATION_IDContent; } }
        private static Java.Lang.String _EXTRA_CONVERSATION_IDContent = default;
        private static bool _EXTRA_CONVERSATION_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_DO_NOT_DISTURB_MODE_ENABLED"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DO_NOT_DISTURB_MODE_ENABLED { get { if (!_EXTRA_DO_NOT_DISTURB_MODE_ENABLEDReady) { _EXTRA_DO_NOT_DISTURB_MODE_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DO_NOT_DISTURB_MODE_ENABLED"); _EXTRA_DO_NOT_DISTURB_MODE_ENABLEDReady = true; } return _EXTRA_DO_NOT_DISTURB_MODE_ENABLEDContent; } }
        private static Java.Lang.String _EXTRA_DO_NOT_DISTURB_MODE_ENABLEDContent = default;
        private static bool _EXTRA_DO_NOT_DISTURB_MODE_ENABLEDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_DO_NOT_DISTURB_MODE_MINUTES"/>
        /// </summary>
        public static Java.Lang.String EXTRA_DO_NOT_DISTURB_MODE_MINUTES { get { if (!_EXTRA_DO_NOT_DISTURB_MODE_MINUTESReady) { _EXTRA_DO_NOT_DISTURB_MODE_MINUTESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DO_NOT_DISTURB_MODE_MINUTES"); _EXTRA_DO_NOT_DISTURB_MODE_MINUTESReady = true; } return _EXTRA_DO_NOT_DISTURB_MODE_MINUTESContent; } }
        private static Java.Lang.String _EXTRA_DO_NOT_DISTURB_MODE_MINUTESContent = default;
        private static bool _EXTRA_DO_NOT_DISTURB_MODE_MINUTESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_EASY_CONNECT_ATTEMPTED_SSID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_EASY_CONNECT_ATTEMPTED_SSID { get { if (!_EXTRA_EASY_CONNECT_ATTEMPTED_SSIDReady) { _EXTRA_EASY_CONNECT_ATTEMPTED_SSIDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_EASY_CONNECT_ATTEMPTED_SSID"); _EXTRA_EASY_CONNECT_ATTEMPTED_SSIDReady = true; } return _EXTRA_EASY_CONNECT_ATTEMPTED_SSIDContent; } }
        private static Java.Lang.String _EXTRA_EASY_CONNECT_ATTEMPTED_SSIDContent = default;
        private static bool _EXTRA_EASY_CONNECT_ATTEMPTED_SSIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_EASY_CONNECT_BAND_LIST"/>
        /// </summary>
        public static Java.Lang.String EXTRA_EASY_CONNECT_BAND_LIST { get { if (!_EXTRA_EASY_CONNECT_BAND_LISTReady) { _EXTRA_EASY_CONNECT_BAND_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_EASY_CONNECT_BAND_LIST"); _EXTRA_EASY_CONNECT_BAND_LISTReady = true; } return _EXTRA_EASY_CONNECT_BAND_LISTContent; } }
        private static Java.Lang.String _EXTRA_EASY_CONNECT_BAND_LISTContent = default;
        private static bool _EXTRA_EASY_CONNECT_BAND_LISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_EASY_CONNECT_CHANNEL_LIST"/>
        /// </summary>
        public static Java.Lang.String EXTRA_EASY_CONNECT_CHANNEL_LIST { get { if (!_EXTRA_EASY_CONNECT_CHANNEL_LISTReady) { _EXTRA_EASY_CONNECT_CHANNEL_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_EASY_CONNECT_CHANNEL_LIST"); _EXTRA_EASY_CONNECT_CHANNEL_LISTReady = true; } return _EXTRA_EASY_CONNECT_CHANNEL_LISTContent; } }
        private static Java.Lang.String _EXTRA_EASY_CONNECT_CHANNEL_LISTContent = default;
        private static bool _EXTRA_EASY_CONNECT_CHANNEL_LISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_EASY_CONNECT_ERROR_CODE"/>
        /// </summary>
        public static Java.Lang.String EXTRA_EASY_CONNECT_ERROR_CODE { get { if (!_EXTRA_EASY_CONNECT_ERROR_CODEReady) { _EXTRA_EASY_CONNECT_ERROR_CODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_EASY_CONNECT_ERROR_CODE"); _EXTRA_EASY_CONNECT_ERROR_CODEReady = true; } return _EXTRA_EASY_CONNECT_ERROR_CODEContent; } }
        private static Java.Lang.String _EXTRA_EASY_CONNECT_ERROR_CODEContent = default;
        private static bool _EXTRA_EASY_CONNECT_ERROR_CODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_INPUT_METHOD_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_INPUT_METHOD_ID { get { if (!_EXTRA_INPUT_METHOD_IDReady) { _EXTRA_INPUT_METHOD_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_INPUT_METHOD_ID"); _EXTRA_INPUT_METHOD_IDReady = true; } return _EXTRA_INPUT_METHOD_IDContent; } }
        private static Java.Lang.String _EXTRA_INPUT_METHOD_IDContent = default;
        private static bool _EXTRA_INPUT_METHOD_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_NOTIFICATION_LISTENER_COMPONENT_NAME"/>
        /// </summary>
        public static Java.Lang.String EXTRA_NOTIFICATION_LISTENER_COMPONENT_NAME { get { if (!_EXTRA_NOTIFICATION_LISTENER_COMPONENT_NAMEReady) { _EXTRA_NOTIFICATION_LISTENER_COMPONENT_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_NOTIFICATION_LISTENER_COMPONENT_NAME"); _EXTRA_NOTIFICATION_LISTENER_COMPONENT_NAMEReady = true; } return _EXTRA_NOTIFICATION_LISTENER_COMPONENT_NAMEContent; } }
        private static Java.Lang.String _EXTRA_NOTIFICATION_LISTENER_COMPONENT_NAMEContent = default;
        private static bool _EXTRA_NOTIFICATION_LISTENER_COMPONENT_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_HIGHLIGHT_MENU_KEY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_HIGHLIGHT_MENU_KEY { get { if (!_EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_HIGHLIGHT_MENU_KEYReady) { _EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_HIGHLIGHT_MENU_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_HIGHLIGHT_MENU_KEY"); _EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_HIGHLIGHT_MENU_KEYReady = true; } return _EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_HIGHLIGHT_MENU_KEYContent; } }
        private static Java.Lang.String _EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_HIGHLIGHT_MENU_KEYContent = default;
        private static bool _EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_HIGHLIGHT_MENU_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URI"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URI { get { if (!_EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URIReady) { _EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URI"); _EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URIReady = true; } return _EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URIContent; } }
        private static Java.Lang.String _EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URIContent = default;
        private static bool _EXTRA_SETTINGS_EMBEDDED_DEEP_LINK_INTENT_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_SUB_ID"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SUB_ID { get { if (!_EXTRA_SUB_IDReady) { _EXTRA_SUB_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SUB_ID"); _EXTRA_SUB_IDReady = true; } return _EXTRA_SUB_IDContent; } }
        private static Java.Lang.String _EXTRA_SUB_IDContent = default;
        private static bool _EXTRA_SUB_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_SUPERVISOR_RESTRICTED_SETTING_KEY"/>
        /// </summary>
        public static Java.Lang.String EXTRA_SUPERVISOR_RESTRICTED_SETTING_KEY { get { if (!_EXTRA_SUPERVISOR_RESTRICTED_SETTING_KEYReady) { _EXTRA_SUPERVISOR_RESTRICTED_SETTING_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_SUPERVISOR_RESTRICTED_SETTING_KEY"); _EXTRA_SUPERVISOR_RESTRICTED_SETTING_KEYReady = true; } return _EXTRA_SUPERVISOR_RESTRICTED_SETTING_KEYContent; } }
        private static Java.Lang.String _EXTRA_SUPERVISOR_RESTRICTED_SETTING_KEYContent = default;
        private static bool _EXTRA_SUPERVISOR_RESTRICTED_SETTING_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_WIFI_NETWORK_LIST"/>
        /// </summary>
        public static Java.Lang.String EXTRA_WIFI_NETWORK_LIST { get { if (!_EXTRA_WIFI_NETWORK_LISTReady) { _EXTRA_WIFI_NETWORK_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_WIFI_NETWORK_LIST"); _EXTRA_WIFI_NETWORK_LISTReady = true; } return _EXTRA_WIFI_NETWORK_LISTContent; } }
        private static Java.Lang.String _EXTRA_WIFI_NETWORK_LISTContent = default;
        private static bool _EXTRA_WIFI_NETWORK_LISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#EXTRA_WIFI_NETWORK_RESULT_LIST"/>
        /// </summary>
        public static Java.Lang.String EXTRA_WIFI_NETWORK_RESULT_LIST { get { if (!_EXTRA_WIFI_NETWORK_RESULT_LISTReady) { _EXTRA_WIFI_NETWORK_RESULT_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_WIFI_NETWORK_RESULT_LIST"); _EXTRA_WIFI_NETWORK_RESULT_LISTReady = true; } return _EXTRA_WIFI_NETWORK_RESULT_LISTContent; } }
        private static Java.Lang.String _EXTRA_WIFI_NETWORK_RESULT_LISTContent = default;
        private static bool _EXTRA_WIFI_NETWORK_RESULT_LISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#INTENT_CATEGORY_USAGE_ACCESS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String INTENT_CATEGORY_USAGE_ACCESS_CONFIG { get { if (!_INTENT_CATEGORY_USAGE_ACCESS_CONFIGReady) { _INTENT_CATEGORY_USAGE_ACCESS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTENT_CATEGORY_USAGE_ACCESS_CONFIG"); _INTENT_CATEGORY_USAGE_ACCESS_CONFIGReady = true; } return _INTENT_CATEGORY_USAGE_ACCESS_CONFIGContent; } }
        private static Java.Lang.String _INTENT_CATEGORY_USAGE_ACCESS_CONFIGContent = default;
        private static bool _INTENT_CATEGORY_USAGE_ACCESS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#METADATA_USAGE_ACCESS_REASON"/>
        /// </summary>
        public static Java.Lang.String METADATA_USAGE_ACCESS_REASON { get { if (!_METADATA_USAGE_ACCESS_REASONReady) { _METADATA_USAGE_ACCESS_REASONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_USAGE_ACCESS_REASON"); _METADATA_USAGE_ACCESS_REASONReady = true; } return _METADATA_USAGE_ACCESS_REASONContent; } }
        private static Java.Lang.String _METADATA_USAGE_ACCESS_REASONContent = default;
        private static bool _METADATA_USAGE_ACCESS_REASONReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/Settings.html#canDrawOverlays(android.content.Context)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Android.Content.Context"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool CanDrawOverlays(Android.Content.Context arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "canDrawOverlays", "(Landroid/content/Context;)Z", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region Global
        public partial class Global
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_SLEEP_POLICY_DEFAULT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WIFI_SLEEP_POLICY_DEFAULT { get { if (!_WIFI_SLEEP_POLICY_DEFAULTReady) { _WIFI_SLEEP_POLICY_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "WIFI_SLEEP_POLICY_DEFAULT"); _WIFI_SLEEP_POLICY_DEFAULTReady = true; } return _WIFI_SLEEP_POLICY_DEFAULTContent; } }
            private static int _WIFI_SLEEP_POLICY_DEFAULTContent = default;
            private static bool _WIFI_SLEEP_POLICY_DEFAULTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_SLEEP_POLICY_NEVER"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WIFI_SLEEP_POLICY_NEVER { get { if (!_WIFI_SLEEP_POLICY_NEVERReady) { _WIFI_SLEEP_POLICY_NEVERContent = SGetField<int>(LocalBridgeClazz, "WIFI_SLEEP_POLICY_NEVER"); _WIFI_SLEEP_POLICY_NEVERReady = true; } return _WIFI_SLEEP_POLICY_NEVERContent; } }
            private static int _WIFI_SLEEP_POLICY_NEVERContent = default;
            private static bool _WIFI_SLEEP_POLICY_NEVERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED { get { if (!_WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGEDReady) { _WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED"); _WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGEDReady = true; } return _WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGEDContent; } }
            private static int _WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGEDContent = default;
            private static bool _WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#ADB_ENABLED"/>
            /// </summary>
            public static Java.Lang.String ADB_ENABLED { get { if (!_ADB_ENABLEDReady) { _ADB_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ADB_ENABLED"); _ADB_ENABLEDReady = true; } return _ADB_ENABLEDContent; } }
            private static Java.Lang.String _ADB_ENABLEDContent = default;
            private static bool _ADB_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#AIRPLANE_MODE_ON"/>
            /// </summary>
            public static Java.Lang.String AIRPLANE_MODE_ON { get { if (!_AIRPLANE_MODE_ONReady) { _AIRPLANE_MODE_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AIRPLANE_MODE_ON"); _AIRPLANE_MODE_ONReady = true; } return _AIRPLANE_MODE_ONContent; } }
            private static Java.Lang.String _AIRPLANE_MODE_ONContent = default;
            private static bool _AIRPLANE_MODE_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#AIRPLANE_MODE_RADIOS"/>
            /// </summary>
            public static Java.Lang.String AIRPLANE_MODE_RADIOS { get { if (!_AIRPLANE_MODE_RADIOSReady) { _AIRPLANE_MODE_RADIOSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AIRPLANE_MODE_RADIOS"); _AIRPLANE_MODE_RADIOSReady = true; } return _AIRPLANE_MODE_RADIOSContent; } }
            private static Java.Lang.String _AIRPLANE_MODE_RADIOSContent = default;
            private static bool _AIRPLANE_MODE_RADIOSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#ALWAYS_FINISH_ACTIVITIES"/>
            /// </summary>
            public static Java.Lang.String ALWAYS_FINISH_ACTIVITIES { get { if (!_ALWAYS_FINISH_ACTIVITIESReady) { _ALWAYS_FINISH_ACTIVITIESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALWAYS_FINISH_ACTIVITIES"); _ALWAYS_FINISH_ACTIVITIESReady = true; } return _ALWAYS_FINISH_ACTIVITIESContent; } }
            private static Java.Lang.String _ALWAYS_FINISH_ACTIVITIESContent = default;
            private static bool _ALWAYS_FINISH_ACTIVITIESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#ANIMATOR_DURATION_SCALE"/>
            /// </summary>
            public static Java.Lang.String ANIMATOR_DURATION_SCALE { get { if (!_ANIMATOR_DURATION_SCALEReady) { _ANIMATOR_DURATION_SCALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ANIMATOR_DURATION_SCALE"); _ANIMATOR_DURATION_SCALEReady = true; } return _ANIMATOR_DURATION_SCALEContent; } }
            private static Java.Lang.String _ANIMATOR_DURATION_SCALEContent = default;
            private static bool _ANIMATOR_DURATION_SCALEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#APPLY_RAMPING_RINGER"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String APPLY_RAMPING_RINGER { get { if (!_APPLY_RAMPING_RINGERReady) { _APPLY_RAMPING_RINGERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "APPLY_RAMPING_RINGER"); _APPLY_RAMPING_RINGERReady = true; } return _APPLY_RAMPING_RINGERContent; } }
            private static Java.Lang.String _APPLY_RAMPING_RINGERContent = default;
            private static bool _APPLY_RAMPING_RINGERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#AUTO_TIME"/>
            /// </summary>
            public static Java.Lang.String AUTO_TIME { get { if (!_AUTO_TIMEReady) { _AUTO_TIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTO_TIME"); _AUTO_TIMEReady = true; } return _AUTO_TIMEContent; } }
            private static Java.Lang.String _AUTO_TIMEContent = default;
            private static bool _AUTO_TIMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#AUTO_TIME_ZONE"/>
            /// </summary>
            public static Java.Lang.String AUTO_TIME_ZONE { get { if (!_AUTO_TIME_ZONEReady) { _AUTO_TIME_ZONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTO_TIME_ZONE"); _AUTO_TIME_ZONEReady = true; } return _AUTO_TIME_ZONEContent; } }
            private static Java.Lang.String _AUTO_TIME_ZONEContent = default;
            private static bool _AUTO_TIME_ZONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#BLUETOOTH_ON"/>
            /// </summary>
            public static Java.Lang.String BLUETOOTH_ON { get { if (!_BLUETOOTH_ONReady) { _BLUETOOTH_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BLUETOOTH_ON"); _BLUETOOTH_ONReady = true; } return _BLUETOOTH_ONContent; } }
            private static Java.Lang.String _BLUETOOTH_ONContent = default;
            private static bool _BLUETOOTH_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#BOOT_COUNT"/>
            /// </summary>
            public static Java.Lang.String BOOT_COUNT { get { if (!_BOOT_COUNTReady) { _BOOT_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BOOT_COUNT"); _BOOT_COUNTReady = true; } return _BOOT_COUNTContent; } }
            private static Java.Lang.String _BOOT_COUNTContent = default;
            private static bool _BOOT_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#CONTACT_METADATA_SYNC_ENABLED"/>
            /// </summary>
            public static Java.Lang.String CONTACT_METADATA_SYNC_ENABLED { get { if (!_CONTACT_METADATA_SYNC_ENABLEDReady) { _CONTACT_METADATA_SYNC_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTACT_METADATA_SYNC_ENABLED"); _CONTACT_METADATA_SYNC_ENABLEDReady = true; } return _CONTACT_METADATA_SYNC_ENABLEDContent; } }
            private static Java.Lang.String _CONTACT_METADATA_SYNC_ENABLEDContent = default;
            private static bool _CONTACT_METADATA_SYNC_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#DATA_ROAMING"/>
            /// </summary>
            public static Java.Lang.String DATA_ROAMING { get { if (!_DATA_ROAMINGReady) { _DATA_ROAMINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATA_ROAMING"); _DATA_ROAMINGReady = true; } return _DATA_ROAMINGContent; } }
            private static Java.Lang.String _DATA_ROAMINGContent = default;
            private static bool _DATA_ROAMINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#DEBUG_APP"/>
            /// </summary>
            public static Java.Lang.String DEBUG_APP { get { if (!_DEBUG_APPReady) { _DEBUG_APPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEBUG_APP"); _DEBUG_APPReady = true; } return _DEBUG_APPContent; } }
            private static Java.Lang.String _DEBUG_APPContent = default;
            private static bool _DEBUG_APPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#DEVELOPMENT_SETTINGS_ENABLED"/>
            /// </summary>
            public static Java.Lang.String DEVELOPMENT_SETTINGS_ENABLED { get { if (!_DEVELOPMENT_SETTINGS_ENABLEDReady) { _DEVELOPMENT_SETTINGS_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEVELOPMENT_SETTINGS_ENABLED"); _DEVELOPMENT_SETTINGS_ENABLEDReady = true; } return _DEVELOPMENT_SETTINGS_ENABLEDContent; } }
            private static Java.Lang.String _DEVELOPMENT_SETTINGS_ENABLEDContent = default;
            private static bool _DEVELOPMENT_SETTINGS_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#DEVICE_NAME"/>
            /// </summary>
            public static Java.Lang.String DEVICE_NAME { get { if (!_DEVICE_NAMEReady) { _DEVICE_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEVICE_NAME"); _DEVICE_NAMEReady = true; } return _DEVICE_NAMEContent; } }
            private static Java.Lang.String _DEVICE_NAMEContent = default;
            private static bool _DEVICE_NAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#DEVICE_PROVISIONED"/>
            /// </summary>
            public static Java.Lang.String DEVICE_PROVISIONED { get { if (!_DEVICE_PROVISIONEDReady) { _DEVICE_PROVISIONEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEVICE_PROVISIONED"); _DEVICE_PROVISIONEDReady = true; } return _DEVICE_PROVISIONEDContent; } }
            private static Java.Lang.String _DEVICE_PROVISIONEDContent = default;
            private static bool _DEVICE_PROVISIONEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#HTTP_PROXY"/>
            /// </summary>
            public static Java.Lang.String HTTP_PROXY { get { if (!_HTTP_PROXYReady) { _HTTP_PROXYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HTTP_PROXY"); _HTTP_PROXYReady = true; } return _HTTP_PROXYContent; } }
            private static Java.Lang.String _HTTP_PROXYContent = default;
            private static bool _HTTP_PROXYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#INSTALL_NON_MARKET_APPS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String INSTALL_NON_MARKET_APPS { get { if (!_INSTALL_NON_MARKET_APPSReady) { _INSTALL_NON_MARKET_APPSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INSTALL_NON_MARKET_APPS"); _INSTALL_NON_MARKET_APPSReady = true; } return _INSTALL_NON_MARKET_APPSContent; } }
            private static Java.Lang.String _INSTALL_NON_MARKET_APPSContent = default;
            private static bool _INSTALL_NON_MARKET_APPSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#MODE_RINGER"/>
            /// </summary>
            public static Java.Lang.String MODE_RINGER { get { if (!_MODE_RINGERReady) { _MODE_RINGERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MODE_RINGER"); _MODE_RINGERReady = true; } return _MODE_RINGERContent; } }
            private static Java.Lang.String _MODE_RINGERContent = default;
            private static bool _MODE_RINGERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#NETWORK_PREFERENCE"/>
            /// </summary>
            public static Java.Lang.String NETWORK_PREFERENCE { get { if (!_NETWORK_PREFERENCEReady) { _NETWORK_PREFERENCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NETWORK_PREFERENCE"); _NETWORK_PREFERENCEReady = true; } return _NETWORK_PREFERENCEContent; } }
            private static Java.Lang.String _NETWORK_PREFERENCEContent = default;
            private static bool _NETWORK_PREFERENCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#RADIO_BLUETOOTH"/>
            /// </summary>
            public static Java.Lang.String RADIO_BLUETOOTH { get { if (!_RADIO_BLUETOOTHReady) { _RADIO_BLUETOOTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RADIO_BLUETOOTH"); _RADIO_BLUETOOTHReady = true; } return _RADIO_BLUETOOTHContent; } }
            private static Java.Lang.String _RADIO_BLUETOOTHContent = default;
            private static bool _RADIO_BLUETOOTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#RADIO_CELL"/>
            /// </summary>
            public static Java.Lang.String RADIO_CELL { get { if (!_RADIO_CELLReady) { _RADIO_CELLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RADIO_CELL"); _RADIO_CELLReady = true; } return _RADIO_CELLContent; } }
            private static Java.Lang.String _RADIO_CELLContent = default;
            private static bool _RADIO_CELLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#RADIO_NFC"/>
            /// </summary>
            public static Java.Lang.String RADIO_NFC { get { if (!_RADIO_NFCReady) { _RADIO_NFCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RADIO_NFC"); _RADIO_NFCReady = true; } return _RADIO_NFCContent; } }
            private static Java.Lang.String _RADIO_NFCContent = default;
            private static bool _RADIO_NFCReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#RADIO_WIFI"/>
            /// </summary>
            public static Java.Lang.String RADIO_WIFI { get { if (!_RADIO_WIFIReady) { _RADIO_WIFIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RADIO_WIFI"); _RADIO_WIFIReady = true; } return _RADIO_WIFIContent; } }
            private static Java.Lang.String _RADIO_WIFIContent = default;
            private static bool _RADIO_WIFIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#SECURE_FRP_MODE"/>
            /// </summary>
            public static Java.Lang.String SECURE_FRP_MODE { get { if (!_SECURE_FRP_MODEReady) { _SECURE_FRP_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SECURE_FRP_MODE"); _SECURE_FRP_MODEReady = true; } return _SECURE_FRP_MODEContent; } }
            private static Java.Lang.String _SECURE_FRP_MODEContent = default;
            private static bool _SECURE_FRP_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#SHOW_PROCESSES"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String SHOW_PROCESSES { get { if (!_SHOW_PROCESSESReady) { _SHOW_PROCESSESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SHOW_PROCESSES"); _SHOW_PROCESSESReady = true; } return _SHOW_PROCESSESContent; } }
            private static Java.Lang.String _SHOW_PROCESSESContent = default;
            private static bool _SHOW_PROCESSESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#STAY_ON_WHILE_PLUGGED_IN"/>
            /// </summary>
            public static Java.Lang.String STAY_ON_WHILE_PLUGGED_IN { get { if (!_STAY_ON_WHILE_PLUGGED_INReady) { _STAY_ON_WHILE_PLUGGED_INContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STAY_ON_WHILE_PLUGGED_IN"); _STAY_ON_WHILE_PLUGGED_INReady = true; } return _STAY_ON_WHILE_PLUGGED_INContent; } }
            private static Java.Lang.String _STAY_ON_WHILE_PLUGGED_INContent = default;
            private static bool _STAY_ON_WHILE_PLUGGED_INReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#TRANSITION_ANIMATION_SCALE"/>
            /// </summary>
            public static Java.Lang.String TRANSITION_ANIMATION_SCALE { get { if (!_TRANSITION_ANIMATION_SCALEReady) { _TRANSITION_ANIMATION_SCALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TRANSITION_ANIMATION_SCALE"); _TRANSITION_ANIMATION_SCALEReady = true; } return _TRANSITION_ANIMATION_SCALEContent; } }
            private static Java.Lang.String _TRANSITION_ANIMATION_SCALEContent = default;
            private static bool _TRANSITION_ANIMATION_SCALEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#USB_MASS_STORAGE_ENABLED"/>
            /// </summary>
            public static Java.Lang.String USB_MASS_STORAGE_ENABLED { get { if (!_USB_MASS_STORAGE_ENABLEDReady) { _USB_MASS_STORAGE_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USB_MASS_STORAGE_ENABLED"); _USB_MASS_STORAGE_ENABLEDReady = true; } return _USB_MASS_STORAGE_ENABLEDContent; } }
            private static Java.Lang.String _USB_MASS_STORAGE_ENABLEDContent = default;
            private static bool _USB_MASS_STORAGE_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#USE_GOOGLE_MAIL"/>
            /// </summary>
            public static Java.Lang.String USE_GOOGLE_MAIL { get { if (!_USE_GOOGLE_MAILReady) { _USE_GOOGLE_MAILContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USE_GOOGLE_MAIL"); _USE_GOOGLE_MAILReady = true; } return _USE_GOOGLE_MAILContent; } }
            private static Java.Lang.String _USE_GOOGLE_MAILContent = default;
            private static bool _USE_GOOGLE_MAILReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#WAIT_FOR_DEBUGGER"/>
            /// </summary>
            public static Java.Lang.String WAIT_FOR_DEBUGGER { get { if (!_WAIT_FOR_DEBUGGERReady) { _WAIT_FOR_DEBUGGERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WAIT_FOR_DEBUGGER"); _WAIT_FOR_DEBUGGERReady = true; } return _WAIT_FOR_DEBUGGERContent; } }
            private static Java.Lang.String _WAIT_FOR_DEBUGGERContent = default;
            private static bool _WAIT_FOR_DEBUGGERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN"/>
            /// </summary>
            public static Java.Lang.String WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN { get { if (!_WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWNReady) { _WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWNContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN"); _WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWNReady = true; } return _WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWNContent; } }
            private static Java.Lang.String _WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWNContent = default;
            private static bool _WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_MAX_DHCP_RETRY_COUNT"/>
            /// </summary>
            public static Java.Lang.String WIFI_MAX_DHCP_RETRY_COUNT { get { if (!_WIFI_MAX_DHCP_RETRY_COUNTReady) { _WIFI_MAX_DHCP_RETRY_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_MAX_DHCP_RETRY_COUNT"); _WIFI_MAX_DHCP_RETRY_COUNTReady = true; } return _WIFI_MAX_DHCP_RETRY_COUNTContent; } }
            private static Java.Lang.String _WIFI_MAX_DHCP_RETRY_COUNTContent = default;
            private static bool _WIFI_MAX_DHCP_RETRY_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS"/>
            /// </summary>
            public static Java.Lang.String WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS { get { if (!_WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSReady) { _WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS"); _WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSReady = true; } return _WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSContent; } }
            private static Java.Lang.String _WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSContent = default;
            private static bool _WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON { get { if (!_WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONReady) { _WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON"); _WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONReady = true; } return _WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONContent; } }
            private static Java.Lang.String _WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONContent = default;
            private static bool _WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY { get { if (!_WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYReady) { _WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY"); _WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYReady = true; } return _WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYContent; } }
            private static Java.Lang.String _WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYContent = default;
            private static bool _WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_NUM_OPEN_NETWORKS_KEPT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_NUM_OPEN_NETWORKS_KEPT { get { if (!_WIFI_NUM_OPEN_NETWORKS_KEPTReady) { _WIFI_NUM_OPEN_NETWORKS_KEPTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_NUM_OPEN_NETWORKS_KEPT"); _WIFI_NUM_OPEN_NETWORKS_KEPTReady = true; } return _WIFI_NUM_OPEN_NETWORKS_KEPTContent; } }
            private static Java.Lang.String _WIFI_NUM_OPEN_NETWORKS_KEPTContent = default;
            private static bool _WIFI_NUM_OPEN_NETWORKS_KEPTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_ON"/>
            /// </summary>
            public static Java.Lang.String WIFI_ON { get { if (!_WIFI_ONReady) { _WIFI_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_ON"); _WIFI_ONReady = true; } return _WIFI_ONContent; } }
            private static Java.Lang.String _WIFI_ONContent = default;
            private static bool _WIFI_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_SLEEP_POLICY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_SLEEP_POLICY { get { if (!_WIFI_SLEEP_POLICYReady) { _WIFI_SLEEP_POLICYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_SLEEP_POLICY"); _WIFI_SLEEP_POLICYReady = true; } return _WIFI_SLEEP_POLICYContent; } }
            private static Java.Lang.String _WIFI_SLEEP_POLICYContent = default;
            private static bool _WIFI_SLEEP_POLICYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#WIFI_WATCHDOG_ON"/>
            /// </summary>
            public static Java.Lang.String WIFI_WATCHDOG_ON { get { if (!_WIFI_WATCHDOG_ONReady) { _WIFI_WATCHDOG_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_ON"); _WIFI_WATCHDOG_ONReady = true; } return _WIFI_WATCHDOG_ONContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_ONContent = default;
            private static bool _WIFI_WATCHDOG_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#WINDOW_ANIMATION_SCALE"/>
            /// </summary>
            public static Java.Lang.String WINDOW_ANIMATION_SCALE { get { if (!_WINDOW_ANIMATION_SCALEReady) { _WINDOW_ANIMATION_SCALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WINDOW_ANIMATION_SCALE"); _WINDOW_ANIMATION_SCALEReady = true; } return _WINDOW_ANIMATION_SCALEContent; } }
            private static Java.Lang.String _WINDOW_ANIMATION_SCALEContent = default;
            private static bool _WINDOW_ANIMATION_SCALEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#getUriFor(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public static Android.Net.Uri GetUriFor(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getUriFor", "(Ljava/lang/String;)Landroid/net/Uri;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#putFloat(android.content.ContentResolver,java.lang.String,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool PutFloat(Android.Content.ContentResolver arg0, Java.Lang.String arg1, float arg2)
            {
                return SExecute<bool>(LocalBridgeClazz, "putFloat", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#putInt(android.content.ContentResolver,java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool PutInt(Android.Content.ContentResolver arg0, Java.Lang.String arg1, int arg2)
            {
                return SExecute<bool>(LocalBridgeClazz, "putInt", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#putLong(android.content.ContentResolver,java.lang.String,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool PutLong(Android.Content.ContentResolver arg0, Java.Lang.String arg1, long arg2)
            {
                return SExecute<bool>(LocalBridgeClazz, "putLong", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#putString(android.content.ContentResolver,java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool PutString(Android.Content.ContentResolver arg0, Java.Lang.String arg1, Java.Lang.String arg2)
            {
                return SExecute<bool>(LocalBridgeClazz, "putString", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#getFloat(android.content.ContentResolver,java.lang.String,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <returns><see cref="float"/></returns>
            public static float GetFloat(Android.Content.ContentResolver arg0, Java.Lang.String arg1, float arg2)
            {
                return SExecute<float>(LocalBridgeClazz, "getFloat", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#getFloat(android.content.ContentResolver,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="float"/></returns>
            /// <exception cref="Android.Provider.Settings.SettingNotFoundException"/>
            public static float GetFloat(Android.Content.ContentResolver arg0, Java.Lang.String arg1)
            {
                return SExecute<float>(LocalBridgeClazz, "getFloat", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#getInt(android.content.ContentResolver,java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="int"/></returns>
            public static int GetInt(Android.Content.ContentResolver arg0, Java.Lang.String arg1, int arg2)
            {
                return SExecute<int>(LocalBridgeClazz, "getInt", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#getInt(android.content.ContentResolver,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="int"/></returns>
            /// <exception cref="Android.Provider.Settings.SettingNotFoundException"/>
            public static int GetInt(Android.Content.ContentResolver arg0, Java.Lang.String arg1)
            {
                return SExecute<int>(LocalBridgeClazz, "getInt", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#getString(android.content.ContentResolver,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public static Java.Lang.String GetString(Android.Content.ContentResolver arg0, Java.Lang.String arg1)
            {
                return SExecute<Java.Lang.String>(LocalBridgeClazz, "getString", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#getLong(android.content.ContentResolver,java.lang.String,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            /// <returns><see cref="long"/></returns>
            public static long GetLong(Android.Content.ContentResolver arg0, Java.Lang.String arg1, long arg2)
            {
                return SExecute<long>(LocalBridgeClazz, "getLong", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Global.html#getLong(android.content.ContentResolver,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="long"/></returns>
            /// <exception cref="Android.Provider.Settings.SettingNotFoundException"/>
            public static long GetLong(Android.Content.ContentResolver arg0, Java.Lang.String arg1)
            {
                return SExecute<long>(LocalBridgeClazz, "getLong", arg0, arg1);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region NameValueTable
        public partial class NameValueTable
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.NameValueTable.html#NAME"/>
            /// </summary>
            public static Java.Lang.String NAME { get { if (!_NAMEReady) { _NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME"); _NAMEReady = true; } return _NAMEContent; } }
            private static Java.Lang.String _NAMEContent = default;
            private static bool _NAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.NameValueTable.html#VALUE"/>
            /// </summary>
            public static Java.Lang.String VALUE { get { if (!_VALUEReady) { _VALUEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VALUE"); _VALUEReady = true; } return _VALUEContent; } }
            private static Java.Lang.String _VALUEContent = default;
            private static bool _VALUEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.NameValueTable.html#getUriFor(android.net.Uri,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Net.Uri"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public static Android.Net.Uri GetUriFor(Android.Net.Uri arg0, Java.Lang.String arg1)
            {
                return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getUriFor", arg0, arg1);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Panel
        public partial class Panel
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Panel.html#ACTION_INTERNET_CONNECTIVITY"/>
            /// </summary>
            public static Java.Lang.String ACTION_INTERNET_CONNECTIVITY { get { if (!_ACTION_INTERNET_CONNECTIVITYReady) { _ACTION_INTERNET_CONNECTIVITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_INTERNET_CONNECTIVITY"); _ACTION_INTERNET_CONNECTIVITYReady = true; } return _ACTION_INTERNET_CONNECTIVITYContent; } }
            private static Java.Lang.String _ACTION_INTERNET_CONNECTIVITYContent = default;
            private static bool _ACTION_INTERNET_CONNECTIVITYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Panel.html#ACTION_NFC"/>
            /// </summary>
            public static Java.Lang.String ACTION_NFC { get { if (!_ACTION_NFCReady) { _ACTION_NFCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_NFC"); _ACTION_NFCReady = true; } return _ACTION_NFCContent; } }
            private static Java.Lang.String _ACTION_NFCContent = default;
            private static bool _ACTION_NFCReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Panel.html#ACTION_VOLUME"/>
            /// </summary>
            public static Java.Lang.String ACTION_VOLUME { get { if (!_ACTION_VOLUMEReady) { _ACTION_VOLUMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_VOLUME"); _ACTION_VOLUMEReady = true; } return _ACTION_VOLUMEContent; } }
            private static Java.Lang.String _ACTION_VOLUMEContent = default;
            private static bool _ACTION_VOLUMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Panel.html#ACTION_WIFI"/>
            /// </summary>
            public static Java.Lang.String ACTION_WIFI { get { if (!_ACTION_WIFIReady) { _ACTION_WIFIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_WIFI"); _ACTION_WIFIReady = true; } return _ACTION_WIFIContent; } }
            private static Java.Lang.String _ACTION_WIFIContent = default;
            private static bool _ACTION_WIFIReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Secure
        public partial class Secure
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCATION_MODE_BATTERY_SAVING"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int LOCATION_MODE_BATTERY_SAVING { get { if (!_LOCATION_MODE_BATTERY_SAVINGReady) { _LOCATION_MODE_BATTERY_SAVINGContent = SGetField<int>(LocalBridgeClazz, "LOCATION_MODE_BATTERY_SAVING"); _LOCATION_MODE_BATTERY_SAVINGReady = true; } return _LOCATION_MODE_BATTERY_SAVINGContent; } }
            private static int _LOCATION_MODE_BATTERY_SAVINGContent = default;
            private static bool _LOCATION_MODE_BATTERY_SAVINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCATION_MODE_HIGH_ACCURACY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int LOCATION_MODE_HIGH_ACCURACY { get { if (!_LOCATION_MODE_HIGH_ACCURACYReady) { _LOCATION_MODE_HIGH_ACCURACYContent = SGetField<int>(LocalBridgeClazz, "LOCATION_MODE_HIGH_ACCURACY"); _LOCATION_MODE_HIGH_ACCURACYReady = true; } return _LOCATION_MODE_HIGH_ACCURACYContent; } }
            private static int _LOCATION_MODE_HIGH_ACCURACYContent = default;
            private static bool _LOCATION_MODE_HIGH_ACCURACYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCATION_MODE_OFF"/>
            /// </summary>
            public static int LOCATION_MODE_OFF { get { if (!_LOCATION_MODE_OFFReady) { _LOCATION_MODE_OFFContent = SGetField<int>(LocalBridgeClazz, "LOCATION_MODE_OFF"); _LOCATION_MODE_OFFReady = true; } return _LOCATION_MODE_OFFContent; } }
            private static int _LOCATION_MODE_OFFContent = default;
            private static bool _LOCATION_MODE_OFFReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCATION_MODE_SENSORS_ONLY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int LOCATION_MODE_SENSORS_ONLY { get { if (!_LOCATION_MODE_SENSORS_ONLYReady) { _LOCATION_MODE_SENSORS_ONLYContent = SGetField<int>(LocalBridgeClazz, "LOCATION_MODE_SENSORS_ONLY"); _LOCATION_MODE_SENSORS_ONLYReady = true; } return _LOCATION_MODE_SENSORS_ONLYContent; } }
            private static int _LOCATION_MODE_SENSORS_ONLYContent = default;
            private static bool _LOCATION_MODE_SENSORS_ONLYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#ACCESSIBILITY_DISPLAY_INVERSION_ENABLED"/>
            /// </summary>
            public static Java.Lang.String ACCESSIBILITY_DISPLAY_INVERSION_ENABLED { get { if (!_ACCESSIBILITY_DISPLAY_INVERSION_ENABLEDReady) { _ACCESSIBILITY_DISPLAY_INVERSION_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESSIBILITY_DISPLAY_INVERSION_ENABLED"); _ACCESSIBILITY_DISPLAY_INVERSION_ENABLEDReady = true; } return _ACCESSIBILITY_DISPLAY_INVERSION_ENABLEDContent; } }
            private static Java.Lang.String _ACCESSIBILITY_DISPLAY_INVERSION_ENABLEDContent = default;
            private static bool _ACCESSIBILITY_DISPLAY_INVERSION_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#ACCESSIBILITY_ENABLED"/>
            /// </summary>
            public static Java.Lang.String ACCESSIBILITY_ENABLED { get { if (!_ACCESSIBILITY_ENABLEDReady) { _ACCESSIBILITY_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESSIBILITY_ENABLED"); _ACCESSIBILITY_ENABLEDReady = true; } return _ACCESSIBILITY_ENABLEDContent; } }
            private static Java.Lang.String _ACCESSIBILITY_ENABLEDContent = default;
            private static bool _ACCESSIBILITY_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#ACCESSIBILITY_SPEAK_PASSWORD"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String ACCESSIBILITY_SPEAK_PASSWORD { get { if (!_ACCESSIBILITY_SPEAK_PASSWORDReady) { _ACCESSIBILITY_SPEAK_PASSWORDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCESSIBILITY_SPEAK_PASSWORD"); _ACCESSIBILITY_SPEAK_PASSWORDReady = true; } return _ACCESSIBILITY_SPEAK_PASSWORDContent; } }
            private static Java.Lang.String _ACCESSIBILITY_SPEAK_PASSWORDContent = default;
            private static bool _ACCESSIBILITY_SPEAK_PASSWORDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#ADB_ENABLED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String ADB_ENABLED { get { if (!_ADB_ENABLEDReady) { _ADB_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ADB_ENABLED"); _ADB_ENABLEDReady = true; } return _ADB_ENABLEDContent; } }
            private static Java.Lang.String _ADB_ENABLEDContent = default;
            private static bool _ADB_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#ALLOW_MOCK_LOCATION"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String ALLOW_MOCK_LOCATION { get { if (!_ALLOW_MOCK_LOCATIONReady) { _ALLOW_MOCK_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALLOW_MOCK_LOCATION"); _ALLOW_MOCK_LOCATIONReady = true; } return _ALLOW_MOCK_LOCATIONContent; } }
            private static Java.Lang.String _ALLOW_MOCK_LOCATIONContent = default;
            private static bool _ALLOW_MOCK_LOCATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#ALLOWED_GEOLOCATION_ORIGINS"/>
            /// </summary>
            public static Java.Lang.String ALLOWED_GEOLOCATION_ORIGINS { get { if (!_ALLOWED_GEOLOCATION_ORIGINSReady) { _ALLOWED_GEOLOCATION_ORIGINSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALLOWED_GEOLOCATION_ORIGINS"); _ALLOWED_GEOLOCATION_ORIGINSReady = true; } return _ALLOWED_GEOLOCATION_ORIGINSContent; } }
            private static Java.Lang.String _ALLOWED_GEOLOCATION_ORIGINSContent = default;
            private static bool _ALLOWED_GEOLOCATION_ORIGINSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID"/>
            /// </summary>
            public static Java.Lang.String ANDROID_ID { get { if (!_ANDROID_IDReady) { _ANDROID_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ANDROID_ID"); _ANDROID_IDReady = true; } return _ANDROID_IDContent; } }
            private static Java.Lang.String _ANDROID_IDContent = default;
            private static bool _ANDROID_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#BACKGROUND_DATA"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String BACKGROUND_DATA { get { if (!_BACKGROUND_DATAReady) { _BACKGROUND_DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BACKGROUND_DATA"); _BACKGROUND_DATAReady = true; } return _BACKGROUND_DATAContent; } }
            private static Java.Lang.String _BACKGROUND_DATAContent = default;
            private static bool _BACKGROUND_DATAReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#BLUETOOTH_ON"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String BLUETOOTH_ON { get { if (!_BLUETOOTH_ONReady) { _BLUETOOTH_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BLUETOOTH_ON"); _BLUETOOTH_ONReady = true; } return _BLUETOOTH_ONContent; } }
            private static Java.Lang.String _BLUETOOTH_ONContent = default;
            private static bool _BLUETOOTH_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#DATA_ROAMING"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String DATA_ROAMING { get { if (!_DATA_ROAMINGReady) { _DATA_ROAMINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATA_ROAMING"); _DATA_ROAMINGReady = true; } return _DATA_ROAMINGContent; } }
            private static Java.Lang.String _DATA_ROAMINGContent = default;
            private static bool _DATA_ROAMINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#DEFAULT_INPUT_METHOD"/>
            /// </summary>
            public static Java.Lang.String DEFAULT_INPUT_METHOD { get { if (!_DEFAULT_INPUT_METHODReady) { _DEFAULT_INPUT_METHODContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_INPUT_METHOD"); _DEFAULT_INPUT_METHODReady = true; } return _DEFAULT_INPUT_METHODContent; } }
            private static Java.Lang.String _DEFAULT_INPUT_METHODContent = default;
            private static bool _DEFAULT_INPUT_METHODReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#DEVELOPMENT_SETTINGS_ENABLED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String DEVELOPMENT_SETTINGS_ENABLED { get { if (!_DEVELOPMENT_SETTINGS_ENABLEDReady) { _DEVELOPMENT_SETTINGS_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEVELOPMENT_SETTINGS_ENABLED"); _DEVELOPMENT_SETTINGS_ENABLEDReady = true; } return _DEVELOPMENT_SETTINGS_ENABLEDContent; } }
            private static Java.Lang.String _DEVELOPMENT_SETTINGS_ENABLEDContent = default;
            private static bool _DEVELOPMENT_SETTINGS_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#DEVICE_PROVISIONED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String DEVICE_PROVISIONED { get { if (!_DEVICE_PROVISIONEDReady) { _DEVICE_PROVISIONEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEVICE_PROVISIONED"); _DEVICE_PROVISIONEDReady = true; } return _DEVICE_PROVISIONEDContent; } }
            private static Java.Lang.String _DEVICE_PROVISIONEDContent = default;
            private static bool _DEVICE_PROVISIONEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#ENABLED_ACCESSIBILITY_SERVICES"/>
            /// </summary>
            public static Java.Lang.String ENABLED_ACCESSIBILITY_SERVICES { get { if (!_ENABLED_ACCESSIBILITY_SERVICESReady) { _ENABLED_ACCESSIBILITY_SERVICESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENABLED_ACCESSIBILITY_SERVICES"); _ENABLED_ACCESSIBILITY_SERVICESReady = true; } return _ENABLED_ACCESSIBILITY_SERVICESContent; } }
            private static Java.Lang.String _ENABLED_ACCESSIBILITY_SERVICESContent = default;
            private static bool _ENABLED_ACCESSIBILITY_SERVICESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#ENABLED_INPUT_METHODS"/>
            /// </summary>
            public static Java.Lang.String ENABLED_INPUT_METHODS { get { if (!_ENABLED_INPUT_METHODSReady) { _ENABLED_INPUT_METHODSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENABLED_INPUT_METHODS"); _ENABLED_INPUT_METHODSReady = true; } return _ENABLED_INPUT_METHODSContent; } }
            private static Java.Lang.String _ENABLED_INPUT_METHODSContent = default;
            private static bool _ENABLED_INPUT_METHODSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#HTTP_PROXY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String HTTP_PROXY { get { if (!_HTTP_PROXYReady) { _HTTP_PROXYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HTTP_PROXY"); _HTTP_PROXYReady = true; } return _HTTP_PROXYContent; } }
            private static Java.Lang.String _HTTP_PROXYContent = default;
            private static bool _HTTP_PROXYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#INPUT_METHOD_SELECTOR_VISIBILITY"/>
            /// </summary>
            public static Java.Lang.String INPUT_METHOD_SELECTOR_VISIBILITY { get { if (!_INPUT_METHOD_SELECTOR_VISIBILITYReady) { _INPUT_METHOD_SELECTOR_VISIBILITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INPUT_METHOD_SELECTOR_VISIBILITY"); _INPUT_METHOD_SELECTOR_VISIBILITYReady = true; } return _INPUT_METHOD_SELECTOR_VISIBILITYContent; } }
            private static Java.Lang.String _INPUT_METHOD_SELECTOR_VISIBILITYContent = default;
            private static bool _INPUT_METHOD_SELECTOR_VISIBILITYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#INSTALL_NON_MARKET_APPS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String INSTALL_NON_MARKET_APPS { get { if (!_INSTALL_NON_MARKET_APPSReady) { _INSTALL_NON_MARKET_APPSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INSTALL_NON_MARKET_APPS"); _INSTALL_NON_MARKET_APPSReady = true; } return _INSTALL_NON_MARKET_APPSContent; } }
            private static Java.Lang.String _INSTALL_NON_MARKET_APPSContent = default;
            private static bool _INSTALL_NON_MARKET_APPSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCATION_MODE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String LOCATION_MODE { get { if (!_LOCATION_MODEReady) { _LOCATION_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOCATION_MODE"); _LOCATION_MODEReady = true; } return _LOCATION_MODEContent; } }
            private static Java.Lang.String _LOCATION_MODEContent = default;
            private static bool _LOCATION_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCATION_PROVIDERS_ALLOWED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String LOCATION_PROVIDERS_ALLOWED { get { if (!_LOCATION_PROVIDERS_ALLOWEDReady) { _LOCATION_PROVIDERS_ALLOWEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOCATION_PROVIDERS_ALLOWED"); _LOCATION_PROVIDERS_ALLOWEDReady = true; } return _LOCATION_PROVIDERS_ALLOWEDContent; } }
            private static Java.Lang.String _LOCATION_PROVIDERS_ALLOWEDContent = default;
            private static bool _LOCATION_PROVIDERS_ALLOWEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCK_PATTERN_ENABLED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String LOCK_PATTERN_ENABLED { get { if (!_LOCK_PATTERN_ENABLEDReady) { _LOCK_PATTERN_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOCK_PATTERN_ENABLED"); _LOCK_PATTERN_ENABLEDReady = true; } return _LOCK_PATTERN_ENABLEDContent; } }
            private static Java.Lang.String _LOCK_PATTERN_ENABLEDContent = default;
            private static bool _LOCK_PATTERN_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED { get { if (!_LOCK_PATTERN_TACTILE_FEEDBACK_ENABLEDReady) { _LOCK_PATTERN_TACTILE_FEEDBACK_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED"); _LOCK_PATTERN_TACTILE_FEEDBACK_ENABLEDReady = true; } return _LOCK_PATTERN_TACTILE_FEEDBACK_ENABLEDContent; } }
            private static Java.Lang.String _LOCK_PATTERN_TACTILE_FEEDBACK_ENABLEDContent = default;
            private static bool _LOCK_PATTERN_TACTILE_FEEDBACK_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#LOCK_PATTERN_VISIBLE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String LOCK_PATTERN_VISIBLE { get { if (!_LOCK_PATTERN_VISIBLEReady) { _LOCK_PATTERN_VISIBLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOCK_PATTERN_VISIBLE"); _LOCK_PATTERN_VISIBLEReady = true; } return _LOCK_PATTERN_VISIBLEContent; } }
            private static Java.Lang.String _LOCK_PATTERN_VISIBLEContent = default;
            private static bool _LOCK_PATTERN_VISIBLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#LOGGING_ID"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String LOGGING_ID { get { if (!_LOGGING_IDReady) { _LOGGING_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOGGING_ID"); _LOGGING_IDReady = true; } return _LOGGING_IDContent; } }
            private static Java.Lang.String _LOGGING_IDContent = default;
            private static bool _LOGGING_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#NETWORK_PREFERENCE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String NETWORK_PREFERENCE { get { if (!_NETWORK_PREFERENCEReady) { _NETWORK_PREFERENCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NETWORK_PREFERENCE"); _NETWORK_PREFERENCEReady = true; } return _NETWORK_PREFERENCEContent; } }
            private static Java.Lang.String _NETWORK_PREFERENCEContent = default;
            private static bool _NETWORK_PREFERENCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#PARENTAL_CONTROL_ENABLED"/>
            /// </summary>
            public static Java.Lang.String PARENTAL_CONTROL_ENABLED { get { if (!_PARENTAL_CONTROL_ENABLEDReady) { _PARENTAL_CONTROL_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARENTAL_CONTROL_ENABLED"); _PARENTAL_CONTROL_ENABLEDReady = true; } return _PARENTAL_CONTROL_ENABLEDContent; } }
            private static Java.Lang.String _PARENTAL_CONTROL_ENABLEDContent = default;
            private static bool _PARENTAL_CONTROL_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#PARENTAL_CONTROL_LAST_UPDATE"/>
            /// </summary>
            public static Java.Lang.String PARENTAL_CONTROL_LAST_UPDATE { get { if (!_PARENTAL_CONTROL_LAST_UPDATEReady) { _PARENTAL_CONTROL_LAST_UPDATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARENTAL_CONTROL_LAST_UPDATE"); _PARENTAL_CONTROL_LAST_UPDATEReady = true; } return _PARENTAL_CONTROL_LAST_UPDATEContent; } }
            private static Java.Lang.String _PARENTAL_CONTROL_LAST_UPDATEContent = default;
            private static bool _PARENTAL_CONTROL_LAST_UPDATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#PARENTAL_CONTROL_REDIRECT_URL"/>
            /// </summary>
            public static Java.Lang.String PARENTAL_CONTROL_REDIRECT_URL { get { if (!_PARENTAL_CONTROL_REDIRECT_URLReady) { _PARENTAL_CONTROL_REDIRECT_URLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARENTAL_CONTROL_REDIRECT_URL"); _PARENTAL_CONTROL_REDIRECT_URLReady = true; } return _PARENTAL_CONTROL_REDIRECT_URLContent; } }
            private static Java.Lang.String _PARENTAL_CONTROL_REDIRECT_URLContent = default;
            private static bool _PARENTAL_CONTROL_REDIRECT_URLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#RTT_CALLING_MODE"/>
            /// </summary>
            public static Java.Lang.String RTT_CALLING_MODE { get { if (!_RTT_CALLING_MODEReady) { _RTT_CALLING_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RTT_CALLING_MODE"); _RTT_CALLING_MODEReady = true; } return _RTT_CALLING_MODEContent; } }
            private static Java.Lang.String _RTT_CALLING_MODEContent = default;
            private static bool _RTT_CALLING_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#SECURE_FRP_MODE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String SECURE_FRP_MODE { get { if (!_SECURE_FRP_MODEReady) { _SECURE_FRP_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SECURE_FRP_MODE"); _SECURE_FRP_MODEReady = true; } return _SECURE_FRP_MODEContent; } }
            private static Java.Lang.String _SECURE_FRP_MODEContent = default;
            private static bool _SECURE_FRP_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#SELECTED_INPUT_METHOD_SUBTYPE"/>
            /// </summary>
            public static Java.Lang.String SELECTED_INPUT_METHOD_SUBTYPE { get { if (!_SELECTED_INPUT_METHOD_SUBTYPEReady) { _SELECTED_INPUT_METHOD_SUBTYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SELECTED_INPUT_METHOD_SUBTYPE"); _SELECTED_INPUT_METHOD_SUBTYPEReady = true; } return _SELECTED_INPUT_METHOD_SUBTYPEContent; } }
            private static Java.Lang.String _SELECTED_INPUT_METHOD_SUBTYPEContent = default;
            private static bool _SELECTED_INPUT_METHOD_SUBTYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#SETTINGS_CLASSNAME"/>
            /// </summary>
            public static Java.Lang.String SETTINGS_CLASSNAME { get { if (!_SETTINGS_CLASSNAMEReady) { _SETTINGS_CLASSNAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SETTINGS_CLASSNAME"); _SETTINGS_CLASSNAMEReady = true; } return _SETTINGS_CLASSNAMEContent; } }
            private static Java.Lang.String _SETTINGS_CLASSNAMEContent = default;
            private static bool _SETTINGS_CLASSNAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#SKIP_FIRST_USE_HINTS"/>
            /// </summary>
            public static Java.Lang.String SKIP_FIRST_USE_HINTS { get { if (!_SKIP_FIRST_USE_HINTSReady) { _SKIP_FIRST_USE_HINTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SKIP_FIRST_USE_HINTS"); _SKIP_FIRST_USE_HINTSReady = true; } return _SKIP_FIRST_USE_HINTSContent; } }
            private static Java.Lang.String _SKIP_FIRST_USE_HINTSContent = default;
            private static bool _SKIP_FIRST_USE_HINTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#TOUCH_EXPLORATION_ENABLED"/>
            /// </summary>
            public static Java.Lang.String TOUCH_EXPLORATION_ENABLED { get { if (!_TOUCH_EXPLORATION_ENABLEDReady) { _TOUCH_EXPLORATION_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TOUCH_EXPLORATION_ENABLED"); _TOUCH_EXPLORATION_ENABLEDReady = true; } return _TOUCH_EXPLORATION_ENABLEDContent; } }
            private static Java.Lang.String _TOUCH_EXPLORATION_ENABLEDContent = default;
            private static bool _TOUCH_EXPLORATION_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#TTS_DEFAULT_COUNTRY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String TTS_DEFAULT_COUNTRY { get { if (!_TTS_DEFAULT_COUNTRYReady) { _TTS_DEFAULT_COUNTRYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TTS_DEFAULT_COUNTRY"); _TTS_DEFAULT_COUNTRYReady = true; } return _TTS_DEFAULT_COUNTRYContent; } }
            private static Java.Lang.String _TTS_DEFAULT_COUNTRYContent = default;
            private static bool _TTS_DEFAULT_COUNTRYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#TTS_DEFAULT_LANG"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String TTS_DEFAULT_LANG { get { if (!_TTS_DEFAULT_LANGReady) { _TTS_DEFAULT_LANGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TTS_DEFAULT_LANG"); _TTS_DEFAULT_LANGReady = true; } return _TTS_DEFAULT_LANGContent; } }
            private static Java.Lang.String _TTS_DEFAULT_LANGContent = default;
            private static bool _TTS_DEFAULT_LANGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#TTS_DEFAULT_PITCH"/>
            /// </summary>
            public static Java.Lang.String TTS_DEFAULT_PITCH { get { if (!_TTS_DEFAULT_PITCHReady) { _TTS_DEFAULT_PITCHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TTS_DEFAULT_PITCH"); _TTS_DEFAULT_PITCHReady = true; } return _TTS_DEFAULT_PITCHContent; } }
            private static Java.Lang.String _TTS_DEFAULT_PITCHContent = default;
            private static bool _TTS_DEFAULT_PITCHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#TTS_DEFAULT_RATE"/>
            /// </summary>
            public static Java.Lang.String TTS_DEFAULT_RATE { get { if (!_TTS_DEFAULT_RATEReady) { _TTS_DEFAULT_RATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TTS_DEFAULT_RATE"); _TTS_DEFAULT_RATEReady = true; } return _TTS_DEFAULT_RATEContent; } }
            private static Java.Lang.String _TTS_DEFAULT_RATEContent = default;
            private static bool _TTS_DEFAULT_RATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#TTS_DEFAULT_SYNTH"/>
            /// </summary>
            public static Java.Lang.String TTS_DEFAULT_SYNTH { get { if (!_TTS_DEFAULT_SYNTHReady) { _TTS_DEFAULT_SYNTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TTS_DEFAULT_SYNTH"); _TTS_DEFAULT_SYNTHReady = true; } return _TTS_DEFAULT_SYNTHContent; } }
            private static Java.Lang.String _TTS_DEFAULT_SYNTHContent = default;
            private static bool _TTS_DEFAULT_SYNTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#TTS_DEFAULT_VARIANT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String TTS_DEFAULT_VARIANT { get { if (!_TTS_DEFAULT_VARIANTReady) { _TTS_DEFAULT_VARIANTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TTS_DEFAULT_VARIANT"); _TTS_DEFAULT_VARIANTReady = true; } return _TTS_DEFAULT_VARIANTContent; } }
            private static Java.Lang.String _TTS_DEFAULT_VARIANTContent = default;
            private static bool _TTS_DEFAULT_VARIANTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#TTS_ENABLED_PLUGINS"/>
            /// </summary>
            public static Java.Lang.String TTS_ENABLED_PLUGINS { get { if (!_TTS_ENABLED_PLUGINSReady) { _TTS_ENABLED_PLUGINSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TTS_ENABLED_PLUGINS"); _TTS_ENABLED_PLUGINSReady = true; } return _TTS_ENABLED_PLUGINSContent; } }
            private static Java.Lang.String _TTS_ENABLED_PLUGINSContent = default;
            private static bool _TTS_ENABLED_PLUGINSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#TTS_USE_DEFAULTS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String TTS_USE_DEFAULTS { get { if (!_TTS_USE_DEFAULTSReady) { _TTS_USE_DEFAULTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TTS_USE_DEFAULTS"); _TTS_USE_DEFAULTSReady = true; } return _TTS_USE_DEFAULTSContent; } }
            private static Java.Lang.String _TTS_USE_DEFAULTSContent = default;
            private static bool _TTS_USE_DEFAULTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#USB_MASS_STORAGE_ENABLED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String USB_MASS_STORAGE_ENABLED { get { if (!_USB_MASS_STORAGE_ENABLEDReady) { _USB_MASS_STORAGE_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USB_MASS_STORAGE_ENABLED"); _USB_MASS_STORAGE_ENABLEDReady = true; } return _USB_MASS_STORAGE_ENABLEDContent; } }
            private static Java.Lang.String _USB_MASS_STORAGE_ENABLEDContent = default;
            private static bool _USB_MASS_STORAGE_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#USE_GOOGLE_MAIL"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String USE_GOOGLE_MAIL { get { if (!_USE_GOOGLE_MAILReady) { _USE_GOOGLE_MAILContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USE_GOOGLE_MAIL"); _USE_GOOGLE_MAILReady = true; } return _USE_GOOGLE_MAILContent; } }
            private static Java.Lang.String _USE_GOOGLE_MAILContent = default;
            private static bool _USE_GOOGLE_MAILReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_MAX_DHCP_RETRY_COUNT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_MAX_DHCP_RETRY_COUNT { get { if (!_WIFI_MAX_DHCP_RETRY_COUNTReady) { _WIFI_MAX_DHCP_RETRY_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_MAX_DHCP_RETRY_COUNT"); _WIFI_MAX_DHCP_RETRY_COUNTReady = true; } return _WIFI_MAX_DHCP_RETRY_COUNTContent; } }
            private static Java.Lang.String _WIFI_MAX_DHCP_RETRY_COUNTContent = default;
            private static bool _WIFI_MAX_DHCP_RETRY_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS { get { if (!_WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSReady) { _WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS"); _WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSReady = true; } return _WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSContent; } }
            private static Java.Lang.String _WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSContent = default;
            private static bool _WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON { get { if (!_WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONReady) { _WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON"); _WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONReady = true; } return _WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONContent; } }
            private static Java.Lang.String _WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONContent = default;
            private static bool _WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY { get { if (!_WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYReady) { _WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY"); _WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYReady = true; } return _WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYContent; } }
            private static Java.Lang.String _WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYContent = default;
            private static bool _WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_NUM_OPEN_NETWORKS_KEPT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_NUM_OPEN_NETWORKS_KEPT { get { if (!_WIFI_NUM_OPEN_NETWORKS_KEPTReady) { _WIFI_NUM_OPEN_NETWORKS_KEPTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_NUM_OPEN_NETWORKS_KEPT"); _WIFI_NUM_OPEN_NETWORKS_KEPTReady = true; } return _WIFI_NUM_OPEN_NETWORKS_KEPTContent; } }
            private static Java.Lang.String _WIFI_NUM_OPEN_NETWORKS_KEPTContent = default;
            private static bool _WIFI_NUM_OPEN_NETWORKS_KEPTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_ON"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_ON { get { if (!_WIFI_ONReady) { _WIFI_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_ON"); _WIFI_ONReady = true; } return _WIFI_ONContent; } }
            private static Java.Lang.String _WIFI_ONContent = default;
            private static bool _WIFI_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE { get { if (!_WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGEReady) { _WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE"); _WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGEReady = true; } return _WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGEContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGEContent = default;
            private static bool _WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_AP_COUNT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_AP_COUNT { get { if (!_WIFI_WATCHDOG_AP_COUNTReady) { _WIFI_WATCHDOG_AP_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_AP_COUNT"); _WIFI_WATCHDOG_AP_COUNTReady = true; } return _WIFI_WATCHDOG_AP_COUNTContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_AP_COUNTContent = default;
            private static bool _WIFI_WATCHDOG_AP_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS { get { if (!_WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MSReady) { _WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS"); _WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MSReady = true; } return _WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MSContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MSContent = default;
            private static bool _WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED { get { if (!_WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLEDReady) { _WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED"); _WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLEDReady = true; } return _WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLEDContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLEDContent = default;
            private static bool _WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS { get { if (!_WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MSReady) { _WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS"); _WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MSReady = true; } return _WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MSContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MSContent = default;
            private static bool _WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT { get { if (!_WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNTReady) { _WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT"); _WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNTReady = true; } return _WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNTContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNTContent = default;
            private static bool _WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_MAX_AP_CHECKS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_MAX_AP_CHECKS { get { if (!_WIFI_WATCHDOG_MAX_AP_CHECKSReady) { _WIFI_WATCHDOG_MAX_AP_CHECKSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_MAX_AP_CHECKS"); _WIFI_WATCHDOG_MAX_AP_CHECKSReady = true; } return _WIFI_WATCHDOG_MAX_AP_CHECKSContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_MAX_AP_CHECKSContent = default;
            private static bool _WIFI_WATCHDOG_MAX_AP_CHECKSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_ON"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_ON { get { if (!_WIFI_WATCHDOG_ONReady) { _WIFI_WATCHDOG_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_ON"); _WIFI_WATCHDOG_ONReady = true; } return _WIFI_WATCHDOG_ONContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_ONContent = default;
            private static bool _WIFI_WATCHDOG_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_PING_COUNT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_PING_COUNT { get { if (!_WIFI_WATCHDOG_PING_COUNTReady) { _WIFI_WATCHDOG_PING_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_PING_COUNT"); _WIFI_WATCHDOG_PING_COUNTReady = true; } return _WIFI_WATCHDOG_PING_COUNTContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_PING_COUNTContent = default;
            private static bool _WIFI_WATCHDOG_PING_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_PING_DELAY_MS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_PING_DELAY_MS { get { if (!_WIFI_WATCHDOG_PING_DELAY_MSReady) { _WIFI_WATCHDOG_PING_DELAY_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_PING_DELAY_MS"); _WIFI_WATCHDOG_PING_DELAY_MSReady = true; } return _WIFI_WATCHDOG_PING_DELAY_MSContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_PING_DELAY_MSContent = default;
            private static bool _WIFI_WATCHDOG_PING_DELAY_MSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_PING_TIMEOUT_MS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_PING_TIMEOUT_MS { get { if (!_WIFI_WATCHDOG_PING_TIMEOUT_MSReady) { _WIFI_WATCHDOG_PING_TIMEOUT_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_PING_TIMEOUT_MS"); _WIFI_WATCHDOG_PING_TIMEOUT_MSReady = true; } return _WIFI_WATCHDOG_PING_TIMEOUT_MSContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_PING_TIMEOUT_MSContent = default;
            private static bool _WIFI_WATCHDOG_PING_TIMEOUT_MSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#WIFI_WATCHDOG_WATCH_LIST"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_WATCH_LIST { get { if (!_WIFI_WATCHDOG_WATCH_LISTReady) { _WIFI_WATCHDOG_WATCH_LISTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_WATCH_LIST"); _WIFI_WATCHDOG_WATCH_LISTReady = true; } return _WIFI_WATCHDOG_WATCH_LISTContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_WATCH_LISTContent = default;
            private static bool _WIFI_WATCHDOG_WATCH_LISTReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#getUriFor(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public static Android.Net.Uri GetUriFor(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getUriFor", "(Ljava/lang/String;)Landroid/net/Uri;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#isLocationProviderEnabled(android.content.ContentResolver,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="bool"/></returns>
            [global::System.Obsolete()]
            public static bool IsLocationProviderEnabled(Android.Content.ContentResolver arg0, Java.Lang.String arg1)
            {
                return SExecute<bool>(LocalBridgeClazz, "isLocationProviderEnabled", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#putFloat(android.content.ContentResolver,java.lang.String,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool PutFloat(Android.Content.ContentResolver arg0, Java.Lang.String arg1, float arg2)
            {
                return SExecute<bool>(LocalBridgeClazz, "putFloat", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#putInt(android.content.ContentResolver,java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool PutInt(Android.Content.ContentResolver arg0, Java.Lang.String arg1, int arg2)
            {
                return SExecute<bool>(LocalBridgeClazz, "putInt", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#putLong(android.content.ContentResolver,java.lang.String,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool PutLong(Android.Content.ContentResolver arg0, Java.Lang.String arg1, long arg2)
            {
                return SExecute<bool>(LocalBridgeClazz, "putLong", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#putString(android.content.ContentResolver,java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool PutString(Android.Content.ContentResolver arg0, Java.Lang.String arg1, Java.Lang.String arg2)
            {
                return SExecute<bool>(LocalBridgeClazz, "putString", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#getFloat(android.content.ContentResolver,java.lang.String,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <returns><see cref="float"/></returns>
            public static float GetFloat(Android.Content.ContentResolver arg0, Java.Lang.String arg1, float arg2)
            {
                return SExecute<float>(LocalBridgeClazz, "getFloat", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#getFloat(android.content.ContentResolver,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="float"/></returns>
            /// <exception cref="Android.Provider.Settings.SettingNotFoundException"/>
            public static float GetFloat(Android.Content.ContentResolver arg0, Java.Lang.String arg1)
            {
                return SExecute<float>(LocalBridgeClazz, "getFloat", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#getInt(android.content.ContentResolver,java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="int"/></returns>
            public static int GetInt(Android.Content.ContentResolver arg0, Java.Lang.String arg1, int arg2)
            {
                return SExecute<int>(LocalBridgeClazz, "getInt", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#getInt(android.content.ContentResolver,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="int"/></returns>
            /// <exception cref="Android.Provider.Settings.SettingNotFoundException"/>
            public static int GetInt(Android.Content.ContentResolver arg0, Java.Lang.String arg1)
            {
                return SExecute<int>(LocalBridgeClazz, "getInt", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#getString(android.content.ContentResolver,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public static Java.Lang.String GetString(Android.Content.ContentResolver arg0, Java.Lang.String arg1)
            {
                return SExecute<Java.Lang.String>(LocalBridgeClazz, "getString", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#getLong(android.content.ContentResolver,java.lang.String,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            /// <returns><see cref="long"/></returns>
            public static long GetLong(Android.Content.ContentResolver arg0, Java.Lang.String arg1, long arg2)
            {
                return SExecute<long>(LocalBridgeClazz, "getLong", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#getLong(android.content.ContentResolver,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="long"/></returns>
            /// <exception cref="Android.Provider.Settings.SettingNotFoundException"/>
            public static long GetLong(Android.Content.ContentResolver arg0, Java.Lang.String arg1)
            {
                return SExecute<long>(LocalBridgeClazz, "getLong", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.Secure.html#setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="bool"/></param>
            [global::System.Obsolete()]
            public static void SetLocationProviderEnabled(Android.Content.ContentResolver arg0, Java.Lang.String arg1, bool arg2)
            {
                SExecute(LocalBridgeClazz, "setLocationProviderEnabled", arg0, arg1, arg2);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SettingNotFoundException
        public partial class SettingNotFoundException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region System
        public partial class System
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#DEFAULT_ALARM_ALERT_URI"/>
            /// </summary>
            public static Android.Net.Uri DEFAULT_ALARM_ALERT_URI { get { if (!_DEFAULT_ALARM_ALERT_URIReady) { _DEFAULT_ALARM_ALERT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "DEFAULT_ALARM_ALERT_URI"); _DEFAULT_ALARM_ALERT_URIReady = true; } return _DEFAULT_ALARM_ALERT_URIContent; } }
            private static Android.Net.Uri _DEFAULT_ALARM_ALERT_URIContent = default;
            private static bool _DEFAULT_ALARM_ALERT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#DEFAULT_NOTIFICATION_URI"/>
            /// </summary>
            public static Android.Net.Uri DEFAULT_NOTIFICATION_URI { get { if (!_DEFAULT_NOTIFICATION_URIReady) { _DEFAULT_NOTIFICATION_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "DEFAULT_NOTIFICATION_URI"); _DEFAULT_NOTIFICATION_URIReady = true; } return _DEFAULT_NOTIFICATION_URIContent; } }
            private static Android.Net.Uri _DEFAULT_NOTIFICATION_URIContent = default;
            private static bool _DEFAULT_NOTIFICATION_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#DEFAULT_RINGTONE_URI"/>
            /// </summary>
            public static Android.Net.Uri DEFAULT_RINGTONE_URI { get { if (!_DEFAULT_RINGTONE_URIReady) { _DEFAULT_RINGTONE_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "DEFAULT_RINGTONE_URI"); _DEFAULT_RINGTONE_URIReady = true; } return _DEFAULT_RINGTONE_URIContent; } }
            private static Android.Net.Uri _DEFAULT_RINGTONE_URIContent = default;
            private static bool _DEFAULT_RINGTONE_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#SCREEN_BRIGHTNESS_MODE_AUTOMATIC"/>
            /// </summary>
            public static int SCREEN_BRIGHTNESS_MODE_AUTOMATIC { get { if (!_SCREEN_BRIGHTNESS_MODE_AUTOMATICReady) { _SCREEN_BRIGHTNESS_MODE_AUTOMATICContent = SGetField<int>(LocalBridgeClazz, "SCREEN_BRIGHTNESS_MODE_AUTOMATIC"); _SCREEN_BRIGHTNESS_MODE_AUTOMATICReady = true; } return _SCREEN_BRIGHTNESS_MODE_AUTOMATICContent; } }
            private static int _SCREEN_BRIGHTNESS_MODE_AUTOMATICContent = default;
            private static bool _SCREEN_BRIGHTNESS_MODE_AUTOMATICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#SCREEN_BRIGHTNESS_MODE_MANUAL"/>
            /// </summary>
            public static int SCREEN_BRIGHTNESS_MODE_MANUAL { get { if (!_SCREEN_BRIGHTNESS_MODE_MANUALReady) { _SCREEN_BRIGHTNESS_MODE_MANUALContent = SGetField<int>(LocalBridgeClazz, "SCREEN_BRIGHTNESS_MODE_MANUAL"); _SCREEN_BRIGHTNESS_MODE_MANUALReady = true; } return _SCREEN_BRIGHTNESS_MODE_MANUALContent; } }
            private static int _SCREEN_BRIGHTNESS_MODE_MANUALContent = default;
            private static bool _SCREEN_BRIGHTNESS_MODE_MANUALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_SLEEP_POLICY_DEFAULT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WIFI_SLEEP_POLICY_DEFAULT { get { if (!_WIFI_SLEEP_POLICY_DEFAULTReady) { _WIFI_SLEEP_POLICY_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "WIFI_SLEEP_POLICY_DEFAULT"); _WIFI_SLEEP_POLICY_DEFAULTReady = true; } return _WIFI_SLEEP_POLICY_DEFAULTContent; } }
            private static int _WIFI_SLEEP_POLICY_DEFAULTContent = default;
            private static bool _WIFI_SLEEP_POLICY_DEFAULTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_SLEEP_POLICY_NEVER"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WIFI_SLEEP_POLICY_NEVER { get { if (!_WIFI_SLEEP_POLICY_NEVERReady) { _WIFI_SLEEP_POLICY_NEVERContent = SGetField<int>(LocalBridgeClazz, "WIFI_SLEEP_POLICY_NEVER"); _WIFI_SLEEP_POLICY_NEVERReady = true; } return _WIFI_SLEEP_POLICY_NEVERContent; } }
            private static int _WIFI_SLEEP_POLICY_NEVERContent = default;
            private static bool _WIFI_SLEEP_POLICY_NEVERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED { get { if (!_WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGEDReady) { _WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGEDContent = SGetField<int>(LocalBridgeClazz, "WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGED"); _WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGEDReady = true; } return _WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGEDContent; } }
            private static int _WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGEDContent = default;
            private static bool _WIFI_SLEEP_POLICY_NEVER_WHILE_PLUGGEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#ACCELEROMETER_ROTATION"/>
            /// </summary>
            public static Java.Lang.String ACCELEROMETER_ROTATION { get { if (!_ACCELEROMETER_ROTATIONReady) { _ACCELEROMETER_ROTATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCELEROMETER_ROTATION"); _ACCELEROMETER_ROTATIONReady = true; } return _ACCELEROMETER_ROTATIONContent; } }
            private static Java.Lang.String _ACCELEROMETER_ROTATIONContent = default;
            private static bool _ACCELEROMETER_ROTATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#ADB_ENABLED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String ADB_ENABLED { get { if (!_ADB_ENABLEDReady) { _ADB_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ADB_ENABLED"); _ADB_ENABLEDReady = true; } return _ADB_ENABLEDContent; } }
            private static Java.Lang.String _ADB_ENABLEDContent = default;
            private static bool _ADB_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#AIRPLANE_MODE_ON"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String AIRPLANE_MODE_ON { get { if (!_AIRPLANE_MODE_ONReady) { _AIRPLANE_MODE_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AIRPLANE_MODE_ON"); _AIRPLANE_MODE_ONReady = true; } return _AIRPLANE_MODE_ONContent; } }
            private static Java.Lang.String _AIRPLANE_MODE_ONContent = default;
            private static bool _AIRPLANE_MODE_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#AIRPLANE_MODE_RADIOS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String AIRPLANE_MODE_RADIOS { get { if (!_AIRPLANE_MODE_RADIOSReady) { _AIRPLANE_MODE_RADIOSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AIRPLANE_MODE_RADIOS"); _AIRPLANE_MODE_RADIOSReady = true; } return _AIRPLANE_MODE_RADIOSContent; } }
            private static Java.Lang.String _AIRPLANE_MODE_RADIOSContent = default;
            private static bool _AIRPLANE_MODE_RADIOSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#ALARM_ALERT"/>
            /// </summary>
            public static Java.Lang.String ALARM_ALERT { get { if (!_ALARM_ALERTReady) { _ALARM_ALERTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALARM_ALERT"); _ALARM_ALERTReady = true; } return _ALARM_ALERTContent; } }
            private static Java.Lang.String _ALARM_ALERTContent = default;
            private static bool _ALARM_ALERTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#ALWAYS_FINISH_ACTIVITIES"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String ALWAYS_FINISH_ACTIVITIES { get { if (!_ALWAYS_FINISH_ACTIVITIESReady) { _ALWAYS_FINISH_ACTIVITIESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALWAYS_FINISH_ACTIVITIES"); _ALWAYS_FINISH_ACTIVITIESReady = true; } return _ALWAYS_FINISH_ACTIVITIESContent; } }
            private static Java.Lang.String _ALWAYS_FINISH_ACTIVITIESContent = default;
            private static bool _ALWAYS_FINISH_ACTIVITIESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#ANDROID_ID"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String ANDROID_ID { get { if (!_ANDROID_IDReady) { _ANDROID_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ANDROID_ID"); _ANDROID_IDReady = true; } return _ANDROID_IDContent; } }
            private static Java.Lang.String _ANDROID_IDContent = default;
            private static bool _ANDROID_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#ANIMATOR_DURATION_SCALE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String ANIMATOR_DURATION_SCALE { get { if (!_ANIMATOR_DURATION_SCALEReady) { _ANIMATOR_DURATION_SCALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ANIMATOR_DURATION_SCALE"); _ANIMATOR_DURATION_SCALEReady = true; } return _ANIMATOR_DURATION_SCALEContent; } }
            private static Java.Lang.String _ANIMATOR_DURATION_SCALEContent = default;
            private static bool _ANIMATOR_DURATION_SCALEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#AUTO_TIME"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String AUTO_TIME { get { if (!_AUTO_TIMEReady) { _AUTO_TIMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTO_TIME"); _AUTO_TIMEReady = true; } return _AUTO_TIMEContent; } }
            private static Java.Lang.String _AUTO_TIMEContent = default;
            private static bool _AUTO_TIMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#AUTO_TIME_ZONE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String AUTO_TIME_ZONE { get { if (!_AUTO_TIME_ZONEReady) { _AUTO_TIME_ZONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTO_TIME_ZONE"); _AUTO_TIME_ZONEReady = true; } return _AUTO_TIME_ZONEContent; } }
            private static Java.Lang.String _AUTO_TIME_ZONEContent = default;
            private static bool _AUTO_TIME_ZONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#BLUETOOTH_DISCOVERABILITY"/>
            /// </summary>
            public static Java.Lang.String BLUETOOTH_DISCOVERABILITY { get { if (!_BLUETOOTH_DISCOVERABILITYReady) { _BLUETOOTH_DISCOVERABILITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BLUETOOTH_DISCOVERABILITY"); _BLUETOOTH_DISCOVERABILITYReady = true; } return _BLUETOOTH_DISCOVERABILITYContent; } }
            private static Java.Lang.String _BLUETOOTH_DISCOVERABILITYContent = default;
            private static bool _BLUETOOTH_DISCOVERABILITYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#BLUETOOTH_DISCOVERABILITY_TIMEOUT"/>
            /// </summary>
            public static Java.Lang.String BLUETOOTH_DISCOVERABILITY_TIMEOUT { get { if (!_BLUETOOTH_DISCOVERABILITY_TIMEOUTReady) { _BLUETOOTH_DISCOVERABILITY_TIMEOUTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BLUETOOTH_DISCOVERABILITY_TIMEOUT"); _BLUETOOTH_DISCOVERABILITY_TIMEOUTReady = true; } return _BLUETOOTH_DISCOVERABILITY_TIMEOUTContent; } }
            private static Java.Lang.String _BLUETOOTH_DISCOVERABILITY_TIMEOUTContent = default;
            private static bool _BLUETOOTH_DISCOVERABILITY_TIMEOUTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#BLUETOOTH_ON"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String BLUETOOTH_ON { get { if (!_BLUETOOTH_ONReady) { _BLUETOOTH_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BLUETOOTH_ON"); _BLUETOOTH_ONReady = true; } return _BLUETOOTH_ONContent; } }
            private static Java.Lang.String _BLUETOOTH_ONContent = default;
            private static bool _BLUETOOTH_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#DATA_ROAMING"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String DATA_ROAMING { get { if (!_DATA_ROAMINGReady) { _DATA_ROAMINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATA_ROAMING"); _DATA_ROAMINGReady = true; } return _DATA_ROAMINGContent; } }
            private static Java.Lang.String _DATA_ROAMINGContent = default;
            private static bool _DATA_ROAMINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#DATE_FORMAT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String DATE_FORMAT { get { if (!_DATE_FORMATReady) { _DATE_FORMATContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATE_FORMAT"); _DATE_FORMATReady = true; } return _DATE_FORMATContent; } }
            private static Java.Lang.String _DATE_FORMATContent = default;
            private static bool _DATE_FORMATReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#DEBUG_APP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String DEBUG_APP { get { if (!_DEBUG_APPReady) { _DEBUG_APPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEBUG_APP"); _DEBUG_APPReady = true; } return _DEBUG_APPContent; } }
            private static Java.Lang.String _DEBUG_APPContent = default;
            private static bool _DEBUG_APPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#DEVICE_PROVISIONED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String DEVICE_PROVISIONED { get { if (!_DEVICE_PROVISIONEDReady) { _DEVICE_PROVISIONEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEVICE_PROVISIONED"); _DEVICE_PROVISIONEDReady = true; } return _DEVICE_PROVISIONEDContent; } }
            private static Java.Lang.String _DEVICE_PROVISIONEDContent = default;
            private static bool _DEVICE_PROVISIONEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#DIM_SCREEN"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String DIM_SCREEN { get { if (!_DIM_SCREENReady) { _DIM_SCREENContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DIM_SCREEN"); _DIM_SCREENReady = true; } return _DIM_SCREENContent; } }
            private static Java.Lang.String _DIM_SCREENContent = default;
            private static bool _DIM_SCREENReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#DTMF_TONE_TYPE_WHEN_DIALING"/>
            /// </summary>
            public static Java.Lang.String DTMF_TONE_TYPE_WHEN_DIALING { get { if (!_DTMF_TONE_TYPE_WHEN_DIALINGReady) { _DTMF_TONE_TYPE_WHEN_DIALINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DTMF_TONE_TYPE_WHEN_DIALING"); _DTMF_TONE_TYPE_WHEN_DIALINGReady = true; } return _DTMF_TONE_TYPE_WHEN_DIALINGContent; } }
            private static Java.Lang.String _DTMF_TONE_TYPE_WHEN_DIALINGContent = default;
            private static bool _DTMF_TONE_TYPE_WHEN_DIALINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#DTMF_TONE_WHEN_DIALING"/>
            /// </summary>
            public static Java.Lang.String DTMF_TONE_WHEN_DIALING { get { if (!_DTMF_TONE_WHEN_DIALINGReady) { _DTMF_TONE_WHEN_DIALINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DTMF_TONE_WHEN_DIALING"); _DTMF_TONE_WHEN_DIALINGReady = true; } return _DTMF_TONE_WHEN_DIALINGContent; } }
            private static Java.Lang.String _DTMF_TONE_WHEN_DIALINGContent = default;
            private static bool _DTMF_TONE_WHEN_DIALINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#END_BUTTON_BEHAVIOR"/>
            /// </summary>
            public static Java.Lang.String END_BUTTON_BEHAVIOR { get { if (!_END_BUTTON_BEHAVIORReady) { _END_BUTTON_BEHAVIORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "END_BUTTON_BEHAVIOR"); _END_BUTTON_BEHAVIORReady = true; } return _END_BUTTON_BEHAVIORContent; } }
            private static Java.Lang.String _END_BUTTON_BEHAVIORContent = default;
            private static bool _END_BUTTON_BEHAVIORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#FONT_SCALE"/>
            /// </summary>
            public static Java.Lang.String FONT_SCALE { get { if (!_FONT_SCALEReady) { _FONT_SCALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FONT_SCALE"); _FONT_SCALEReady = true; } return _FONT_SCALEContent; } }
            private static Java.Lang.String _FONT_SCALEContent = default;
            private static bool _FONT_SCALEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#HAPTIC_FEEDBACK_ENABLED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String HAPTIC_FEEDBACK_ENABLED { get { if (!_HAPTIC_FEEDBACK_ENABLEDReady) { _HAPTIC_FEEDBACK_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HAPTIC_FEEDBACK_ENABLED"); _HAPTIC_FEEDBACK_ENABLEDReady = true; } return _HAPTIC_FEEDBACK_ENABLEDContent; } }
            private static Java.Lang.String _HAPTIC_FEEDBACK_ENABLEDContent = default;
            private static bool _HAPTIC_FEEDBACK_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#HTTP_PROXY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String HTTP_PROXY { get { if (!_HTTP_PROXYReady) { _HTTP_PROXYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HTTP_PROXY"); _HTTP_PROXYReady = true; } return _HTTP_PROXYContent; } }
            private static Java.Lang.String _HTTP_PROXYContent = default;
            private static bool _HTTP_PROXYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#INSTALL_NON_MARKET_APPS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String INSTALL_NON_MARKET_APPS { get { if (!_INSTALL_NON_MARKET_APPSReady) { _INSTALL_NON_MARKET_APPSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INSTALL_NON_MARKET_APPS"); _INSTALL_NON_MARKET_APPSReady = true; } return _INSTALL_NON_MARKET_APPSContent; } }
            private static Java.Lang.String _INSTALL_NON_MARKET_APPSContent = default;
            private static bool _INSTALL_NON_MARKET_APPSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#LOCATION_PROVIDERS_ALLOWED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String LOCATION_PROVIDERS_ALLOWED { get { if (!_LOCATION_PROVIDERS_ALLOWEDReady) { _LOCATION_PROVIDERS_ALLOWEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOCATION_PROVIDERS_ALLOWED"); _LOCATION_PROVIDERS_ALLOWEDReady = true; } return _LOCATION_PROVIDERS_ALLOWEDContent; } }
            private static Java.Lang.String _LOCATION_PROVIDERS_ALLOWEDContent = default;
            private static bool _LOCATION_PROVIDERS_ALLOWEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#LOCK_PATTERN_ENABLED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String LOCK_PATTERN_ENABLED { get { if (!_LOCK_PATTERN_ENABLEDReady) { _LOCK_PATTERN_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOCK_PATTERN_ENABLED"); _LOCK_PATTERN_ENABLEDReady = true; } return _LOCK_PATTERN_ENABLEDContent; } }
            private static Java.Lang.String _LOCK_PATTERN_ENABLEDContent = default;
            private static bool _LOCK_PATTERN_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED { get { if (!_LOCK_PATTERN_TACTILE_FEEDBACK_ENABLEDReady) { _LOCK_PATTERN_TACTILE_FEEDBACK_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED"); _LOCK_PATTERN_TACTILE_FEEDBACK_ENABLEDReady = true; } return _LOCK_PATTERN_TACTILE_FEEDBACK_ENABLEDContent; } }
            private static Java.Lang.String _LOCK_PATTERN_TACTILE_FEEDBACK_ENABLEDContent = default;
            private static bool _LOCK_PATTERN_TACTILE_FEEDBACK_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#LOCK_PATTERN_VISIBLE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String LOCK_PATTERN_VISIBLE { get { if (!_LOCK_PATTERN_VISIBLEReady) { _LOCK_PATTERN_VISIBLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOCK_PATTERN_VISIBLE"); _LOCK_PATTERN_VISIBLEReady = true; } return _LOCK_PATTERN_VISIBLEContent; } }
            private static Java.Lang.String _LOCK_PATTERN_VISIBLEContent = default;
            private static bool _LOCK_PATTERN_VISIBLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#LOGGING_ID"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String LOGGING_ID { get { if (!_LOGGING_IDReady) { _LOGGING_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LOGGING_ID"); _LOGGING_IDReady = true; } return _LOGGING_IDContent; } }
            private static Java.Lang.String _LOGGING_IDContent = default;
            private static bool _LOGGING_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#MODE_RINGER"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String MODE_RINGER { get { if (!_MODE_RINGERReady) { _MODE_RINGERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MODE_RINGER"); _MODE_RINGERReady = true; } return _MODE_RINGERContent; } }
            private static Java.Lang.String _MODE_RINGERContent = default;
            private static bool _MODE_RINGERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#MODE_RINGER_STREAMS_AFFECTED"/>
            /// </summary>
            public static Java.Lang.String MODE_RINGER_STREAMS_AFFECTED { get { if (!_MODE_RINGER_STREAMS_AFFECTEDReady) { _MODE_RINGER_STREAMS_AFFECTEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MODE_RINGER_STREAMS_AFFECTED"); _MODE_RINGER_STREAMS_AFFECTEDReady = true; } return _MODE_RINGER_STREAMS_AFFECTEDContent; } }
            private static Java.Lang.String _MODE_RINGER_STREAMS_AFFECTEDContent = default;
            private static bool _MODE_RINGER_STREAMS_AFFECTEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#MUTE_STREAMS_AFFECTED"/>
            /// </summary>
            public static Java.Lang.String MUTE_STREAMS_AFFECTED { get { if (!_MUTE_STREAMS_AFFECTEDReady) { _MUTE_STREAMS_AFFECTEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MUTE_STREAMS_AFFECTED"); _MUTE_STREAMS_AFFECTEDReady = true; } return _MUTE_STREAMS_AFFECTEDContent; } }
            private static Java.Lang.String _MUTE_STREAMS_AFFECTEDContent = default;
            private static bool _MUTE_STREAMS_AFFECTEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#NETWORK_PREFERENCE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String NETWORK_PREFERENCE { get { if (!_NETWORK_PREFERENCEReady) { _NETWORK_PREFERENCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NETWORK_PREFERENCE"); _NETWORK_PREFERENCEReady = true; } return _NETWORK_PREFERENCEContent; } }
            private static Java.Lang.String _NETWORK_PREFERENCEContent = default;
            private static bool _NETWORK_PREFERENCEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#NEXT_ALARM_FORMATTED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String NEXT_ALARM_FORMATTED { get { if (!_NEXT_ALARM_FORMATTEDReady) { _NEXT_ALARM_FORMATTEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NEXT_ALARM_FORMATTED"); _NEXT_ALARM_FORMATTEDReady = true; } return _NEXT_ALARM_FORMATTEDContent; } }
            private static Java.Lang.String _NEXT_ALARM_FORMATTEDContent = default;
            private static bool _NEXT_ALARM_FORMATTEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#NOTIFICATION_SOUND"/>
            /// </summary>
            public static Java.Lang.String NOTIFICATION_SOUND { get { if (!_NOTIFICATION_SOUNDReady) { _NOTIFICATION_SOUNDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NOTIFICATION_SOUND"); _NOTIFICATION_SOUNDReady = true; } return _NOTIFICATION_SOUNDContent; } }
            private static Java.Lang.String _NOTIFICATION_SOUNDContent = default;
            private static bool _NOTIFICATION_SOUNDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#PARENTAL_CONTROL_ENABLED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String PARENTAL_CONTROL_ENABLED { get { if (!_PARENTAL_CONTROL_ENABLEDReady) { _PARENTAL_CONTROL_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARENTAL_CONTROL_ENABLED"); _PARENTAL_CONTROL_ENABLEDReady = true; } return _PARENTAL_CONTROL_ENABLEDContent; } }
            private static Java.Lang.String _PARENTAL_CONTROL_ENABLEDContent = default;
            private static bool _PARENTAL_CONTROL_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#PARENTAL_CONTROL_LAST_UPDATE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String PARENTAL_CONTROL_LAST_UPDATE { get { if (!_PARENTAL_CONTROL_LAST_UPDATEReady) { _PARENTAL_CONTROL_LAST_UPDATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARENTAL_CONTROL_LAST_UPDATE"); _PARENTAL_CONTROL_LAST_UPDATEReady = true; } return _PARENTAL_CONTROL_LAST_UPDATEContent; } }
            private static Java.Lang.String _PARENTAL_CONTROL_LAST_UPDATEContent = default;
            private static bool _PARENTAL_CONTROL_LAST_UPDATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#PARENTAL_CONTROL_REDIRECT_URL"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String PARENTAL_CONTROL_REDIRECT_URL { get { if (!_PARENTAL_CONTROL_REDIRECT_URLReady) { _PARENTAL_CONTROL_REDIRECT_URLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARENTAL_CONTROL_REDIRECT_URL"); _PARENTAL_CONTROL_REDIRECT_URLReady = true; } return _PARENTAL_CONTROL_REDIRECT_URLContent; } }
            private static Java.Lang.String _PARENTAL_CONTROL_REDIRECT_URLContent = default;
            private static bool _PARENTAL_CONTROL_REDIRECT_URLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#RADIO_BLUETOOTH"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String RADIO_BLUETOOTH { get { if (!_RADIO_BLUETOOTHReady) { _RADIO_BLUETOOTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RADIO_BLUETOOTH"); _RADIO_BLUETOOTHReady = true; } return _RADIO_BLUETOOTHContent; } }
            private static Java.Lang.String _RADIO_BLUETOOTHContent = default;
            private static bool _RADIO_BLUETOOTHReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#RADIO_CELL"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String RADIO_CELL { get { if (!_RADIO_CELLReady) { _RADIO_CELLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RADIO_CELL"); _RADIO_CELLReady = true; } return _RADIO_CELLContent; } }
            private static Java.Lang.String _RADIO_CELLContent = default;
            private static bool _RADIO_CELLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#RADIO_NFC"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String RADIO_NFC { get { if (!_RADIO_NFCReady) { _RADIO_NFCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RADIO_NFC"); _RADIO_NFCReady = true; } return _RADIO_NFCContent; } }
            private static Java.Lang.String _RADIO_NFCContent = default;
            private static bool _RADIO_NFCReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#RADIO_WIFI"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String RADIO_WIFI { get { if (!_RADIO_WIFIReady) { _RADIO_WIFIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RADIO_WIFI"); _RADIO_WIFIReady = true; } return _RADIO_WIFIContent; } }
            private static Java.Lang.String _RADIO_WIFIContent = default;
            private static bool _RADIO_WIFIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#RINGTONE"/>
            /// </summary>
            public static Java.Lang.String RINGTONE { get { if (!_RINGTONEReady) { _RINGTONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RINGTONE"); _RINGTONEReady = true; } return _RINGTONEContent; } }
            private static Java.Lang.String _RINGTONEContent = default;
            private static bool _RINGTONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#SCREEN_BRIGHTNESS"/>
            /// </summary>
            public static Java.Lang.String SCREEN_BRIGHTNESS { get { if (!_SCREEN_BRIGHTNESSReady) { _SCREEN_BRIGHTNESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SCREEN_BRIGHTNESS"); _SCREEN_BRIGHTNESSReady = true; } return _SCREEN_BRIGHTNESSContent; } }
            private static Java.Lang.String _SCREEN_BRIGHTNESSContent = default;
            private static bool _SCREEN_BRIGHTNESSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#SCREEN_BRIGHTNESS_MODE"/>
            /// </summary>
            public static Java.Lang.String SCREEN_BRIGHTNESS_MODE { get { if (!_SCREEN_BRIGHTNESS_MODEReady) { _SCREEN_BRIGHTNESS_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SCREEN_BRIGHTNESS_MODE"); _SCREEN_BRIGHTNESS_MODEReady = true; } return _SCREEN_BRIGHTNESS_MODEContent; } }
            private static Java.Lang.String _SCREEN_BRIGHTNESS_MODEContent = default;
            private static bool _SCREEN_BRIGHTNESS_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#SCREEN_OFF_TIMEOUT"/>
            /// </summary>
            public static Java.Lang.String SCREEN_OFF_TIMEOUT { get { if (!_SCREEN_OFF_TIMEOUTReady) { _SCREEN_OFF_TIMEOUTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SCREEN_OFF_TIMEOUT"); _SCREEN_OFF_TIMEOUTReady = true; } return _SCREEN_OFF_TIMEOUTContent; } }
            private static Java.Lang.String _SCREEN_OFF_TIMEOUTContent = default;
            private static bool _SCREEN_OFF_TIMEOUTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#SETTINGS_CLASSNAME"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String SETTINGS_CLASSNAME { get { if (!_SETTINGS_CLASSNAMEReady) { _SETTINGS_CLASSNAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SETTINGS_CLASSNAME"); _SETTINGS_CLASSNAMEReady = true; } return _SETTINGS_CLASSNAMEContent; } }
            private static Java.Lang.String _SETTINGS_CLASSNAMEContent = default;
            private static bool _SETTINGS_CLASSNAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#SETUP_WIZARD_HAS_RUN"/>
            /// </summary>
            public static Java.Lang.String SETUP_WIZARD_HAS_RUN { get { if (!_SETUP_WIZARD_HAS_RUNReady) { _SETUP_WIZARD_HAS_RUNContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SETUP_WIZARD_HAS_RUN"); _SETUP_WIZARD_HAS_RUNReady = true; } return _SETUP_WIZARD_HAS_RUNContent; } }
            private static Java.Lang.String _SETUP_WIZARD_HAS_RUNContent = default;
            private static bool _SETUP_WIZARD_HAS_RUNReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#SHOW_GTALK_SERVICE_STATUS"/>
            /// </summary>
            public static Java.Lang.String SHOW_GTALK_SERVICE_STATUS { get { if (!_SHOW_GTALK_SERVICE_STATUSReady) { _SHOW_GTALK_SERVICE_STATUSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SHOW_GTALK_SERVICE_STATUS"); _SHOW_GTALK_SERVICE_STATUSReady = true; } return _SHOW_GTALK_SERVICE_STATUSContent; } }
            private static Java.Lang.String _SHOW_GTALK_SERVICE_STATUSContent = default;
            private static bool _SHOW_GTALK_SERVICE_STATUSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#SHOW_PROCESSES"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String SHOW_PROCESSES { get { if (!_SHOW_PROCESSESReady) { _SHOW_PROCESSESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SHOW_PROCESSES"); _SHOW_PROCESSESReady = true; } return _SHOW_PROCESSESContent; } }
            private static Java.Lang.String _SHOW_PROCESSESContent = default;
            private static bool _SHOW_PROCESSESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#SHOW_WEB_SUGGESTIONS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String SHOW_WEB_SUGGESTIONS { get { if (!_SHOW_WEB_SUGGESTIONSReady) { _SHOW_WEB_SUGGESTIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SHOW_WEB_SUGGESTIONS"); _SHOW_WEB_SUGGESTIONSReady = true; } return _SHOW_WEB_SUGGESTIONSContent; } }
            private static Java.Lang.String _SHOW_WEB_SUGGESTIONSContent = default;
            private static bool _SHOW_WEB_SUGGESTIONSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#SOUND_EFFECTS_ENABLED"/>
            /// </summary>
            public static Java.Lang.String SOUND_EFFECTS_ENABLED { get { if (!_SOUND_EFFECTS_ENABLEDReady) { _SOUND_EFFECTS_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SOUND_EFFECTS_ENABLED"); _SOUND_EFFECTS_ENABLEDReady = true; } return _SOUND_EFFECTS_ENABLEDContent; } }
            private static Java.Lang.String _SOUND_EFFECTS_ENABLEDContent = default;
            private static bool _SOUND_EFFECTS_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#STAY_ON_WHILE_PLUGGED_IN"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String STAY_ON_WHILE_PLUGGED_IN { get { if (!_STAY_ON_WHILE_PLUGGED_INReady) { _STAY_ON_WHILE_PLUGGED_INContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STAY_ON_WHILE_PLUGGED_IN"); _STAY_ON_WHILE_PLUGGED_INReady = true; } return _STAY_ON_WHILE_PLUGGED_INContent; } }
            private static Java.Lang.String _STAY_ON_WHILE_PLUGGED_INContent = default;
            private static bool _STAY_ON_WHILE_PLUGGED_INReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#TEXT_AUTO_CAPS"/>
            /// </summary>
            public static Java.Lang.String TEXT_AUTO_CAPS { get { if (!_TEXT_AUTO_CAPSReady) { _TEXT_AUTO_CAPSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TEXT_AUTO_CAPS"); _TEXT_AUTO_CAPSReady = true; } return _TEXT_AUTO_CAPSContent; } }
            private static Java.Lang.String _TEXT_AUTO_CAPSContent = default;
            private static bool _TEXT_AUTO_CAPSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#TEXT_AUTO_PUNCTUATE"/>
            /// </summary>
            public static Java.Lang.String TEXT_AUTO_PUNCTUATE { get { if (!_TEXT_AUTO_PUNCTUATEReady) { _TEXT_AUTO_PUNCTUATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TEXT_AUTO_PUNCTUATE"); _TEXT_AUTO_PUNCTUATEReady = true; } return _TEXT_AUTO_PUNCTUATEContent; } }
            private static Java.Lang.String _TEXT_AUTO_PUNCTUATEContent = default;
            private static bool _TEXT_AUTO_PUNCTUATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#TEXT_AUTO_REPLACE"/>
            /// </summary>
            public static Java.Lang.String TEXT_AUTO_REPLACE { get { if (!_TEXT_AUTO_REPLACEReady) { _TEXT_AUTO_REPLACEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TEXT_AUTO_REPLACE"); _TEXT_AUTO_REPLACEReady = true; } return _TEXT_AUTO_REPLACEContent; } }
            private static Java.Lang.String _TEXT_AUTO_REPLACEContent = default;
            private static bool _TEXT_AUTO_REPLACEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#TEXT_SHOW_PASSWORD"/>
            /// </summary>
            public static Java.Lang.String TEXT_SHOW_PASSWORD { get { if (!_TEXT_SHOW_PASSWORDReady) { _TEXT_SHOW_PASSWORDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TEXT_SHOW_PASSWORD"); _TEXT_SHOW_PASSWORDReady = true; } return _TEXT_SHOW_PASSWORDContent; } }
            private static Java.Lang.String _TEXT_SHOW_PASSWORDContent = default;
            private static bool _TEXT_SHOW_PASSWORDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#TIME_12_24"/>
            /// </summary>
            public static Java.Lang.String TIME_12_24 { get { if (!_TIME_12_24Ready) { _TIME_12_24Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "TIME_12_24"); _TIME_12_24Ready = true; } return _TIME_12_24Content; } }
            private static Java.Lang.String _TIME_12_24Content = default;
            private static bool _TIME_12_24Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#TRANSITION_ANIMATION_SCALE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String TRANSITION_ANIMATION_SCALE { get { if (!_TRANSITION_ANIMATION_SCALEReady) { _TRANSITION_ANIMATION_SCALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TRANSITION_ANIMATION_SCALE"); _TRANSITION_ANIMATION_SCALEReady = true; } return _TRANSITION_ANIMATION_SCALEContent; } }
            private static Java.Lang.String _TRANSITION_ANIMATION_SCALEContent = default;
            private static bool _TRANSITION_ANIMATION_SCALEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#USB_MASS_STORAGE_ENABLED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String USB_MASS_STORAGE_ENABLED { get { if (!_USB_MASS_STORAGE_ENABLEDReady) { _USB_MASS_STORAGE_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USB_MASS_STORAGE_ENABLED"); _USB_MASS_STORAGE_ENABLEDReady = true; } return _USB_MASS_STORAGE_ENABLEDContent; } }
            private static Java.Lang.String _USB_MASS_STORAGE_ENABLEDContent = default;
            private static bool _USB_MASS_STORAGE_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#USE_GOOGLE_MAIL"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String USE_GOOGLE_MAIL { get { if (!_USE_GOOGLE_MAILReady) { _USE_GOOGLE_MAILContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USE_GOOGLE_MAIL"); _USE_GOOGLE_MAILReady = true; } return _USE_GOOGLE_MAILContent; } }
            private static Java.Lang.String _USE_GOOGLE_MAILContent = default;
            private static bool _USE_GOOGLE_MAILReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#USER_ROTATION"/>
            /// </summary>
            public static Java.Lang.String USER_ROTATION { get { if (!_USER_ROTATIONReady) { _USER_ROTATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USER_ROTATION"); _USER_ROTATIONReady = true; } return _USER_ROTATIONContent; } }
            private static Java.Lang.String _USER_ROTATIONContent = default;
            private static bool _USER_ROTATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#VIBRATE_ON"/>
            /// </summary>
            public static Java.Lang.String VIBRATE_ON { get { if (!_VIBRATE_ONReady) { _VIBRATE_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VIBRATE_ON"); _VIBRATE_ONReady = true; } return _VIBRATE_ONContent; } }
            private static Java.Lang.String _VIBRATE_ONContent = default;
            private static bool _VIBRATE_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#VIBRATE_WHEN_RINGING"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String VIBRATE_WHEN_RINGING { get { if (!_VIBRATE_WHEN_RINGINGReady) { _VIBRATE_WHEN_RINGINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VIBRATE_WHEN_RINGING"); _VIBRATE_WHEN_RINGINGReady = true; } return _VIBRATE_WHEN_RINGINGContent; } }
            private static Java.Lang.String _VIBRATE_WHEN_RINGINGContent = default;
            private static bool _VIBRATE_WHEN_RINGINGReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WAIT_FOR_DEBUGGER"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WAIT_FOR_DEBUGGER { get { if (!_WAIT_FOR_DEBUGGERReady) { _WAIT_FOR_DEBUGGERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WAIT_FOR_DEBUGGER"); _WAIT_FOR_DEBUGGERReady = true; } return _WAIT_FOR_DEBUGGERContent; } }
            private static Java.Lang.String _WAIT_FOR_DEBUGGERContent = default;
            private static bool _WAIT_FOR_DEBUGGERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WALLPAPER_ACTIVITY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WALLPAPER_ACTIVITY { get { if (!_WALLPAPER_ACTIVITYReady) { _WALLPAPER_ACTIVITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WALLPAPER_ACTIVITY"); _WALLPAPER_ACTIVITYReady = true; } return _WALLPAPER_ACTIVITYContent; } }
            private static Java.Lang.String _WALLPAPER_ACTIVITYContent = default;
            private static bool _WALLPAPER_ACTIVITYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_MAX_DHCP_RETRY_COUNT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_MAX_DHCP_RETRY_COUNT { get { if (!_WIFI_MAX_DHCP_RETRY_COUNTReady) { _WIFI_MAX_DHCP_RETRY_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_MAX_DHCP_RETRY_COUNT"); _WIFI_MAX_DHCP_RETRY_COUNTReady = true; } return _WIFI_MAX_DHCP_RETRY_COUNTContent; } }
            private static Java.Lang.String _WIFI_MAX_DHCP_RETRY_COUNTContent = default;
            private static bool _WIFI_MAX_DHCP_RETRY_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS { get { if (!_WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSReady) { _WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS"); _WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSReady = true; } return _WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSContent; } }
            private static Java.Lang.String _WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSContent = default;
            private static bool _WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON { get { if (!_WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONReady) { _WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON"); _WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONReady = true; } return _WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONContent; } }
            private static Java.Lang.String _WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONContent = default;
            private static bool _WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY { get { if (!_WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYReady) { _WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY"); _WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYReady = true; } return _WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYContent; } }
            private static Java.Lang.String _WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYContent = default;
            private static bool _WIFI_NETWORKS_AVAILABLE_REPEAT_DELAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_NUM_OPEN_NETWORKS_KEPT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_NUM_OPEN_NETWORKS_KEPT { get { if (!_WIFI_NUM_OPEN_NETWORKS_KEPTReady) { _WIFI_NUM_OPEN_NETWORKS_KEPTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_NUM_OPEN_NETWORKS_KEPT"); _WIFI_NUM_OPEN_NETWORKS_KEPTReady = true; } return _WIFI_NUM_OPEN_NETWORKS_KEPTContent; } }
            private static Java.Lang.String _WIFI_NUM_OPEN_NETWORKS_KEPTContent = default;
            private static bool _WIFI_NUM_OPEN_NETWORKS_KEPTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_ON"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_ON { get { if (!_WIFI_ONReady) { _WIFI_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_ON"); _WIFI_ONReady = true; } return _WIFI_ONContent; } }
            private static Java.Lang.String _WIFI_ONContent = default;
            private static bool _WIFI_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_SLEEP_POLICY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_SLEEP_POLICY { get { if (!_WIFI_SLEEP_POLICYReady) { _WIFI_SLEEP_POLICYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_SLEEP_POLICY"); _WIFI_SLEEP_POLICYReady = true; } return _WIFI_SLEEP_POLICYContent; } }
            private static Java.Lang.String _WIFI_SLEEP_POLICYContent = default;
            private static bool _WIFI_SLEEP_POLICYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_STATIC_DNS1"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_STATIC_DNS1 { get { if (!_WIFI_STATIC_DNS1Ready) { _WIFI_STATIC_DNS1Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_STATIC_DNS1"); _WIFI_STATIC_DNS1Ready = true; } return _WIFI_STATIC_DNS1Content; } }
            private static Java.Lang.String _WIFI_STATIC_DNS1Content = default;
            private static bool _WIFI_STATIC_DNS1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_STATIC_DNS2"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_STATIC_DNS2 { get { if (!_WIFI_STATIC_DNS2Ready) { _WIFI_STATIC_DNS2Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_STATIC_DNS2"); _WIFI_STATIC_DNS2Ready = true; } return _WIFI_STATIC_DNS2Content; } }
            private static Java.Lang.String _WIFI_STATIC_DNS2Content = default;
            private static bool _WIFI_STATIC_DNS2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_STATIC_GATEWAY"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_STATIC_GATEWAY { get { if (!_WIFI_STATIC_GATEWAYReady) { _WIFI_STATIC_GATEWAYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_STATIC_GATEWAY"); _WIFI_STATIC_GATEWAYReady = true; } return _WIFI_STATIC_GATEWAYContent; } }
            private static Java.Lang.String _WIFI_STATIC_GATEWAYContent = default;
            private static bool _WIFI_STATIC_GATEWAYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_STATIC_IP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_STATIC_IP { get { if (!_WIFI_STATIC_IPReady) { _WIFI_STATIC_IPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_STATIC_IP"); _WIFI_STATIC_IPReady = true; } return _WIFI_STATIC_IPContent; } }
            private static Java.Lang.String _WIFI_STATIC_IPContent = default;
            private static bool _WIFI_STATIC_IPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_STATIC_NETMASK"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_STATIC_NETMASK { get { if (!_WIFI_STATIC_NETMASKReady) { _WIFI_STATIC_NETMASKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_STATIC_NETMASK"); _WIFI_STATIC_NETMASKReady = true; } return _WIFI_STATIC_NETMASKContent; } }
            private static Java.Lang.String _WIFI_STATIC_NETMASKContent = default;
            private static bool _WIFI_STATIC_NETMASKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_USE_STATIC_IP"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_USE_STATIC_IP { get { if (!_WIFI_USE_STATIC_IPReady) { _WIFI_USE_STATIC_IPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_USE_STATIC_IP"); _WIFI_USE_STATIC_IPReady = true; } return _WIFI_USE_STATIC_IPContent; } }
            private static Java.Lang.String _WIFI_USE_STATIC_IPContent = default;
            private static bool _WIFI_USE_STATIC_IPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE { get { if (!_WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGEReady) { _WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE"); _WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGEReady = true; } return _WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGEContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGEContent = default;
            private static bool _WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_AP_COUNT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_AP_COUNT { get { if (!_WIFI_WATCHDOG_AP_COUNTReady) { _WIFI_WATCHDOG_AP_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_AP_COUNT"); _WIFI_WATCHDOG_AP_COUNTReady = true; } return _WIFI_WATCHDOG_AP_COUNTContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_AP_COUNTContent = default;
            private static bool _WIFI_WATCHDOG_AP_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS { get { if (!_WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MSReady) { _WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS"); _WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MSReady = true; } return _WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MSContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MSContent = default;
            private static bool _WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED { get { if (!_WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLEDReady) { _WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED"); _WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLEDReady = true; } return _WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLEDContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLEDContent = default;
            private static bool _WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS { get { if (!_WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MSReady) { _WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS"); _WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MSReady = true; } return _WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MSContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MSContent = default;
            private static bool _WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT { get { if (!_WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNTReady) { _WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT"); _WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNTReady = true; } return _WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNTContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNTContent = default;
            private static bool _WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_MAX_AP_CHECKS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_MAX_AP_CHECKS { get { if (!_WIFI_WATCHDOG_MAX_AP_CHECKSReady) { _WIFI_WATCHDOG_MAX_AP_CHECKSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_MAX_AP_CHECKS"); _WIFI_WATCHDOG_MAX_AP_CHECKSReady = true; } return _WIFI_WATCHDOG_MAX_AP_CHECKSContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_MAX_AP_CHECKSContent = default;
            private static bool _WIFI_WATCHDOG_MAX_AP_CHECKSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_ON"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_ON { get { if (!_WIFI_WATCHDOG_ONReady) { _WIFI_WATCHDOG_ONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_ON"); _WIFI_WATCHDOG_ONReady = true; } return _WIFI_WATCHDOG_ONContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_ONContent = default;
            private static bool _WIFI_WATCHDOG_ONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_PING_COUNT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_PING_COUNT { get { if (!_WIFI_WATCHDOG_PING_COUNTReady) { _WIFI_WATCHDOG_PING_COUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_PING_COUNT"); _WIFI_WATCHDOG_PING_COUNTReady = true; } return _WIFI_WATCHDOG_PING_COUNTContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_PING_COUNTContent = default;
            private static bool _WIFI_WATCHDOG_PING_COUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_PING_DELAY_MS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_PING_DELAY_MS { get { if (!_WIFI_WATCHDOG_PING_DELAY_MSReady) { _WIFI_WATCHDOG_PING_DELAY_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_PING_DELAY_MS"); _WIFI_WATCHDOG_PING_DELAY_MSReady = true; } return _WIFI_WATCHDOG_PING_DELAY_MSContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_PING_DELAY_MSContent = default;
            private static bool _WIFI_WATCHDOG_PING_DELAY_MSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WIFI_WATCHDOG_PING_TIMEOUT_MS"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WIFI_WATCHDOG_PING_TIMEOUT_MS { get { if (!_WIFI_WATCHDOG_PING_TIMEOUT_MSReady) { _WIFI_WATCHDOG_PING_TIMEOUT_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WIFI_WATCHDOG_PING_TIMEOUT_MS"); _WIFI_WATCHDOG_PING_TIMEOUT_MSReady = true; } return _WIFI_WATCHDOG_PING_TIMEOUT_MSContent; } }
            private static Java.Lang.String _WIFI_WATCHDOG_PING_TIMEOUT_MSContent = default;
            private static bool _WIFI_WATCHDOG_PING_TIMEOUT_MSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#WINDOW_ANIMATION_SCALE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String WINDOW_ANIMATION_SCALE { get { if (!_WINDOW_ANIMATION_SCALEReady) { _WINDOW_ANIMATION_SCALEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WINDOW_ANIMATION_SCALE"); _WINDOW_ANIMATION_SCALEReady = true; } return _WINDOW_ANIMATION_SCALEContent; } }
            private static Java.Lang.String _WINDOW_ANIMATION_SCALEContent = default;
            private static bool _WINDOW_ANIMATION_SCALEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#getUriFor(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public static Android.Net.Uri GetUriFor(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Android.Net.Uri>(LocalBridgeClazz, "getUriFor", "(Ljava/lang/String;)Landroid/net/Uri;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#canWrite(android.content.Context)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool CanWrite(Android.Content.Context arg0)
            {
                return SExecuteWithSignature<bool>(LocalBridgeClazz, "canWrite", "(Landroid/content/Context;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#getShowGTalkServiceStatus(android.content.ContentResolver)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <returns><see cref="bool"/></returns>
            [global::System.Obsolete()]
            public static bool GetShowGTalkServiceStatus(Android.Content.ContentResolver arg0)
            {
                return SExecuteWithSignature<bool>(LocalBridgeClazz, "getShowGTalkServiceStatus", "(Landroid/content/ContentResolver;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#putConfiguration(android.content.ContentResolver,android.content.res.Configuration)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Android.Content.Res.Configuration"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool PutConfiguration(Android.Content.ContentResolver arg0, Android.Content.Res.Configuration arg1)
            {
                return SExecute<bool>(LocalBridgeClazz, "putConfiguration", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#putFloat(android.content.ContentResolver,java.lang.String,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool PutFloat(Android.Content.ContentResolver arg0, Java.Lang.String arg1, float arg2)
            {
                return SExecute<bool>(LocalBridgeClazz, "putFloat", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#putInt(android.content.ContentResolver,java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool PutInt(Android.Content.ContentResolver arg0, Java.Lang.String arg1, int arg2)
            {
                return SExecute<bool>(LocalBridgeClazz, "putInt", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#putLong(android.content.ContentResolver,java.lang.String,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool PutLong(Android.Content.ContentResolver arg0, Java.Lang.String arg1, long arg2)
            {
                return SExecute<bool>(LocalBridgeClazz, "putLong", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#putString(android.content.ContentResolver,java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool PutString(Android.Content.ContentResolver arg0, Java.Lang.String arg1, Java.Lang.String arg2)
            {
                return SExecute<bool>(LocalBridgeClazz, "putString", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#getFloat(android.content.ContentResolver,java.lang.String,float)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="float"/></param>
            /// <returns><see cref="float"/></returns>
            public static float GetFloat(Android.Content.ContentResolver arg0, Java.Lang.String arg1, float arg2)
            {
                return SExecute<float>(LocalBridgeClazz, "getFloat", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#getFloat(android.content.ContentResolver,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="float"/></returns>
            /// <exception cref="Android.Provider.Settings.SettingNotFoundException"/>
            public static float GetFloat(Android.Content.ContentResolver arg0, Java.Lang.String arg1)
            {
                return SExecute<float>(LocalBridgeClazz, "getFloat", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#getInt(android.content.ContentResolver,java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="int"/></returns>
            public static int GetInt(Android.Content.ContentResolver arg0, Java.Lang.String arg1, int arg2)
            {
                return SExecute<int>(LocalBridgeClazz, "getInt", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#getInt(android.content.ContentResolver,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="int"/></returns>
            /// <exception cref="Android.Provider.Settings.SettingNotFoundException"/>
            public static int GetInt(Android.Content.ContentResolver arg0, Java.Lang.String arg1)
            {
                return SExecute<int>(LocalBridgeClazz, "getInt", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#getString(android.content.ContentResolver,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public static Java.Lang.String GetString(Android.Content.ContentResolver arg0, Java.Lang.String arg1)
            {
                return SExecute<Java.Lang.String>(LocalBridgeClazz, "getString", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#getLong(android.content.ContentResolver,java.lang.String,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            /// <returns><see cref="long"/></returns>
            public static long GetLong(Android.Content.ContentResolver arg0, Java.Lang.String arg1, long arg2)
            {
                return SExecute<long>(LocalBridgeClazz, "getLong", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#getLong(android.content.ContentResolver,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="long"/></returns>
            /// <exception cref="Android.Provider.Settings.SettingNotFoundException"/>
            public static long GetLong(Android.Content.ContentResolver arg0, Java.Lang.String arg1)
            {
                return SExecute<long>(LocalBridgeClazz, "getLong", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#getConfiguration(android.content.ContentResolver,android.content.res.Configuration)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Android.Content.Res.Configuration"/></param>
            public static void GetConfiguration(Android.Content.ContentResolver arg0, Android.Content.Res.Configuration arg1)
            {
                SExecute(LocalBridgeClazz, "getConfiguration", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/Settings.System.html#setShowGTalkServiceStatus(android.content.ContentResolver,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            [global::System.Obsolete()]
            public static void SetShowGTalkServiceStatus(Android.Content.ContentResolver arg0, bool arg1)
            {
                SExecute(LocalBridgeClazz, "setShowGTalkServiceStatus", arg0, arg1);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
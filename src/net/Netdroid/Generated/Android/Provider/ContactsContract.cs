/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Provider
{
    #region ContactsContract declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.html"/>
    /// </summary>
    public partial class ContactsContract : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ContactsContract>
    {
        const string _bridgeClassName = "android.provider.ContactsContract";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ContactsContract() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ContactsContract(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region AggregationExceptions declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.AggregationExceptions.html"/>
        /// </summary>
        public partial class AggregationExceptions : Android.Provider.BaseColumns
        {
            const string _bridgeClassName = "android.provider.ContactsContract$AggregationExceptions";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public AggregationExceptions() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public AggregationExceptions(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region CommonDataKinds declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.html"/>
        /// </summary>
        public partial class CommonDataKinds : MASES.JCOBridge.C2JBridge.JVMBridgeBase<CommonDataKinds>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public CommonDataKinds() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public CommonDataKinds(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class
            #region Website declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html"/>
            /// </summary>
            public partial class Website : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Website>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$Website";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Website() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Website(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region StructuredPostal declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html"/>
            /// </summary>
            public partial class StructuredPostal : MASES.JCOBridge.C2JBridge.JVMBridgeBase<StructuredPostal>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$StructuredPostal";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public StructuredPostal() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public StructuredPostal(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region StructuredName declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html"/>
            /// </summary>
            public partial class StructuredName : MASES.JCOBridge.C2JBridge.JVMBridgeBase<StructuredName>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$StructuredName";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public StructuredName() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public StructuredName(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region SipAddress declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.SipAddress.html"/>
            /// </summary>
            [global::System.Obsolete()]
            public partial class SipAddress : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SipAddress>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$SipAddress";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public SipAddress() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public SipAddress(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region Relation declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html"/>
            /// </summary>
            public partial class Relation : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Relation>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$Relation";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Relation() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Relation(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region Photo declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Photo.html"/>
            /// </summary>
            public partial class Photo : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Photo>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$Photo";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Photo() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Photo(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region Phone declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html"/>
            /// </summary>
            public partial class Phone : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Phone>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$Phone";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Phone() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Phone(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region Organization declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html"/>
            /// </summary>
            public partial class Organization : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Organization>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$Organization";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Organization() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Organization(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region Note declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Note.html"/>
            /// </summary>
            public partial class Note : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Note>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$Note";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Note() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Note(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region Nickname declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Nickname.html"/>
            /// </summary>
            public partial class Nickname : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Nickname>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$Nickname";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Nickname() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Nickname(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region Im declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html"/>
            /// </summary>
            [global::System.Obsolete()]
            public partial class Im : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Im>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$Im";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Im() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Im(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region Identity declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Identity.html"/>
            /// </summary>
            public partial class Identity : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Identity>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$Identity";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Identity() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Identity(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region GroupMembership declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.GroupMembership.html"/>
            /// </summary>
            public partial class GroupMembership : MASES.JCOBridge.C2JBridge.JVMBridgeBase<GroupMembership>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$GroupMembership";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public GroupMembership() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public GroupMembership(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region Event declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Event.html"/>
            /// </summary>
            public partial class Event : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Event>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$Event";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Event() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Event(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region Email declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html"/>
            /// </summary>
            public partial class Email : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Email>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$Email";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Email() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Email(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region Contactables declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Contactables.html"/>
            /// </summary>
            public partial class Contactables : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Contactables>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$Contactables";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Contactables() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Contactables(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region Callable declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Callable.html"/>
            /// </summary>
            public partial class Callable : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Callable>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$Callable";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Callable() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Callable(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region BaseTypes declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.BaseTypes.html"/>
            /// </summary>
            public partial class BaseTypes : MASES.JCOBridge.C2JBridge.JVMBridgeBase<BaseTypes>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$CommonDataKinds$BaseTypes";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                [global::System.Obsolete("BaseTypes class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
                public BaseTypes() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                [global::System.Obsolete("BaseTypes class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
                public BaseTypes(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => true;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => true;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

        
        }
        #endregion

        #region Contacts declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html"/>
        /// </summary>
        public partial class Contacts : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Contacts>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$Contacts";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Contacts() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Contacts(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class
            #region Photo declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Photo.html"/>
            /// </summary>
            public partial class Photo : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Photo>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$Contacts$Photo";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Photo() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Photo(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region Entity declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Entity.html"/>
            /// </summary>
            public partial class Entity : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Entity>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$Contacts$Entity";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Entity() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Entity(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region Data declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Data.html"/>
            /// </summary>
            public partial class Data : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Data>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$Contacts$Data";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Data() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Data(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region AggregationSuggestions declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.AggregationSuggestions.html"/>
            /// </summary>
            public partial class AggregationSuggestions : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AggregationSuggestions>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$Contacts$AggregationSuggestions";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public AggregationSuggestions() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public AggregationSuggestions(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class
                #region Builder declaration
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.AggregationSuggestions.Builder.html"/>
                /// </summary>
                public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
                {
                    const string _bridgeClassName = "android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder";
                    /// <summary>
                    /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                    /// </summary>
                    public Builder() { }
                    /// <summary>
                    /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                    /// </summary>
                    public Builder(params object[] args) : base(args) { }

                    private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                    private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                    /// <summary>
                    /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                    /// </summary>
                    public override string BridgeClassName => _bridgeClassName;
                    /// <summary>
                    /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                    /// </summary>
                    public override bool IsBridgeAbstract => false;
                    /// <summary>
                    /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                    /// </summary>
                    public override bool IsBridgeCloseable => false;
                    /// <summary>
                    /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                    /// </summary>
                    public override bool IsBridgeInterface => false;
                    /// <summary>
                    /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                    /// </summary>
                    public override bool IsBridgeStatic => true;

                    // TODO: complete the class

                }
                #endregion

            
            }
            #endregion

        
        }
        #endregion

        #region Data declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Data.html"/>
        /// </summary>
        public partial class Data : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Data>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$Data";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Data() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Data(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region DataUsageFeedback declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DataUsageFeedback.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class DataUsageFeedback : MASES.JCOBridge.C2JBridge.JVMBridgeBase<DataUsageFeedback>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$DataUsageFeedback";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public DataUsageFeedback() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public DataUsageFeedback(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region DeletedContacts declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DeletedContacts.html"/>
        /// </summary>
        public partial class DeletedContacts : MASES.JCOBridge.C2JBridge.JVMBridgeBase<DeletedContacts>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$DeletedContacts";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public DeletedContacts() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public DeletedContacts(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Directory declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html"/>
        /// </summary>
        public partial class Directory : Android.Provider.BaseColumns
        {
            const string _bridgeClassName = "android.provider.ContactsContract$Directory";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Directory() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Directory(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region DisplayNameSources declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayNameSources.html"/>
        /// </summary>
        public partial class DisplayNameSources : MASES.JCOBridge.C2JBridge.JVMBridgeBase<DisplayNameSources>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$DisplayNameSources";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("DisplayNameSources class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public DisplayNameSources() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("DisplayNameSources class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public DisplayNameSources(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region DisplayPhoto declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayPhoto.html"/>
        /// </summary>
        public partial class DisplayPhoto : MASES.JCOBridge.C2JBridge.JVMBridgeBase<DisplayPhoto>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$DisplayPhoto";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public DisplayPhoto() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public DisplayPhoto(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region FullNameStyle declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.FullNameStyle.html"/>
        /// </summary>
        public partial class FullNameStyle : MASES.JCOBridge.C2JBridge.JVMBridgeBase<FullNameStyle>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$FullNameStyle";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("FullNameStyle class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public FullNameStyle() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("FullNameStyle class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public FullNameStyle(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Groups declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Groups.html"/>
        /// </summary>
        public partial class Groups : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Groups>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$Groups";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Groups() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Groups(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Intents declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.html"/>
        /// </summary>
        public partial class Intents : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Intents>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$Intents";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Intents() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Intents(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class
            #region Insert declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html"/>
            /// </summary>
            public partial class Insert : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Insert>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$Intents$Insert";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Insert() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Insert(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

        
        }
        #endregion

        #region PhoneLookup declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.PhoneLookup.html"/>
        /// </summary>
        public partial class PhoneLookup : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PhoneLookup>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$PhoneLookup";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public PhoneLookup() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public PhoneLookup(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region PhoneticNameStyle declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.PhoneticNameStyle.html"/>
        /// </summary>
        public partial class PhoneticNameStyle : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PhoneticNameStyle>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$PhoneticNameStyle";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("PhoneticNameStyle class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public PhoneticNameStyle() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("PhoneticNameStyle class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public PhoneticNameStyle(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region PinnedPositions declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.PinnedPositions.html"/>
        /// </summary>
        public partial class PinnedPositions : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PinnedPositions>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$PinnedPositions";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public PinnedPositions() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public PinnedPositions(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Presence declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Presence.html"/>
        /// </summary>
        [global::System.Obsolete()]
        public partial class Presence : Android.Provider.ContactsContract.StatusUpdates
        {
            const string _bridgeClassName = "android.provider.ContactsContract$Presence";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Presence() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Presence(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Profile declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Profile.html"/>
        /// </summary>
        public partial class Profile : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Profile>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$Profile";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Profile() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Profile(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ProfileSyncState declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.ProfileSyncState.html"/>
        /// </summary>
        public partial class ProfileSyncState : Android.Provider.SyncStateContract.Columns
        {
            const string _bridgeClassName = "android.provider.ContactsContract$ProfileSyncState";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ProfileSyncState() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ProfileSyncState(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ProviderStatus declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.ProviderStatus.html"/>
        /// </summary>
        public partial class ProviderStatus : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ProviderStatus>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$ProviderStatus";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ProviderStatus() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ProviderStatus(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region QuickContact declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.QuickContact.html"/>
        /// </summary>
        public partial class QuickContact : MASES.JCOBridge.C2JBridge.JVMBridgeBase<QuickContact>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$QuickContact";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public QuickContact() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public QuickContact(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region RawContacts declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html"/>
        /// </summary>
        public partial class RawContacts : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RawContacts>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$RawContacts";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RawContacts() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RawContacts(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class
            #region Entity declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.Entity.html"/>
            /// </summary>
            public partial class Entity : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Entity>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$RawContacts$Entity";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Entity() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Entity(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region DisplayPhoto declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.DisplayPhoto.html"/>
            /// </summary>
            public partial class DisplayPhoto : MASES.JCOBridge.C2JBridge.JVMBridgeBase<DisplayPhoto>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$RawContacts$DisplayPhoto";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public DisplayPhoto() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public DisplayPhoto(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

            #region Data declaration
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.Data.html"/>
            /// </summary>
            public partial class Data : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Data>
            {
                const string _bridgeClassName = "android.provider.ContactsContract$RawContacts$Data";
                /// <summary>
                /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
                /// </summary>
                public Data() { }
                /// <summary>
                /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
                /// </summary>
                public Data(params object[] args) : base(args) { }

                private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
                private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
                /// </summary>
                public override string BridgeClassName => _bridgeClassName;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
                /// </summary>
                public override bool IsBridgeAbstract => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
                /// </summary>
                public override bool IsBridgeCloseable => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
                /// </summary>
                public override bool IsBridgeInterface => false;
                /// <summary>
                /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
                /// </summary>
                public override bool IsBridgeStatic => true;

                // TODO: complete the class

            }
            #endregion

        
        }
        #endregion

        #region RawContactsEntity declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContactsEntity.html"/>
        /// </summary>
        public partial class RawContactsEntity : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RawContactsEntity>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$RawContactsEntity";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RawContactsEntity() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RawContactsEntity(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region SearchSnippets declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SearchSnippets.html"/>
        /// </summary>
        public partial class SearchSnippets : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SearchSnippets>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$SearchSnippets";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public SearchSnippets() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public SearchSnippets(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Settings declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Settings.html"/>
        /// </summary>
        public partial class Settings : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Settings>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$Settings";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Settings() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Settings(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region SimAccount declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SimAccount.html"/>
        /// </summary>
        public partial class SimAccount : Android.Os.Parcelable
        {
            const string _bridgeClassName = "android.provider.ContactsContract$SimAccount";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public SimAccount() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public SimAccount(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region SimContacts declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SimContacts.html"/>
        /// </summary>
        public partial class SimContacts : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SimContacts>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$SimContacts";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public SimContacts() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public SimContacts(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region StatusUpdates declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.StatusUpdates.html"/>
        /// </summary>
        public partial class StatusUpdates : MASES.JCOBridge.C2JBridge.JVMBridgeBase<StatusUpdates>
        {
            const string _bridgeClassName = "android.provider.ContactsContract$StatusUpdates";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public StatusUpdates() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public StatusUpdates(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region SyncState declaration
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SyncState.html"/>
        /// </summary>
        public partial class SyncState : Android.Provider.SyncStateContract.Columns
        {
            const string _bridgeClassName = "android.provider.ContactsContract$SyncState";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public SyncState() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public SyncState(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region ContactsContract implementation
    public partial class ContactsContract
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.html#AUTHORITY_URI"/>
        /// </summary>
        public static Android.Net.Uri AUTHORITY_URI { get { if (!_AUTHORITY_URIReady) { _AUTHORITY_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "AUTHORITY_URI"); _AUTHORITY_URIReady = true; } return _AUTHORITY_URIContent; } }
        private static Android.Net.Uri _AUTHORITY_URIContent = default;
        private static bool _AUTHORITY_URIReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.html#AUTHORITY"/>
        /// </summary>
        public static Java.Lang.String AUTHORITY { get { if (!_AUTHORITYReady) { _AUTHORITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTHORITY"); _AUTHORITYReady = true; } return _AUTHORITYContent; } }
        private static Java.Lang.String _AUTHORITYContent = default;
        private static bool _AUTHORITYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.html#CALLER_IS_SYNCADAPTER"/>
        /// </summary>
        public static Java.Lang.String CALLER_IS_SYNCADAPTER { get { if (!_CALLER_IS_SYNCADAPTERReady) { _CALLER_IS_SYNCADAPTERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CALLER_IS_SYNCADAPTER"); _CALLER_IS_SYNCADAPTERReady = true; } return _CALLER_IS_SYNCADAPTERContent; } }
        private static Java.Lang.String _CALLER_IS_SYNCADAPTERContent = default;
        private static bool _CALLER_IS_SYNCADAPTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.html#DEFERRED_SNIPPETING"/>
        /// </summary>
        public static Java.Lang.String DEFERRED_SNIPPETING { get { if (!_DEFERRED_SNIPPETINGReady) { _DEFERRED_SNIPPETINGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFERRED_SNIPPETING"); _DEFERRED_SNIPPETINGReady = true; } return _DEFERRED_SNIPPETINGContent; } }
        private static Java.Lang.String _DEFERRED_SNIPPETINGContent = default;
        private static bool _DEFERRED_SNIPPETINGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.html#DEFERRED_SNIPPETING_QUERY"/>
        /// </summary>
        public static Java.Lang.String DEFERRED_SNIPPETING_QUERY { get { if (!_DEFERRED_SNIPPETING_QUERYReady) { _DEFERRED_SNIPPETING_QUERYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFERRED_SNIPPETING_QUERY"); _DEFERRED_SNIPPETING_QUERYReady = true; } return _DEFERRED_SNIPPETING_QUERYContent; } }
        private static Java.Lang.String _DEFERRED_SNIPPETING_QUERYContent = default;
        private static bool _DEFERRED_SNIPPETING_QUERYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.html#DIRECTORY_PARAM_KEY"/>
        /// </summary>
        public static Java.Lang.String DIRECTORY_PARAM_KEY { get { if (!_DIRECTORY_PARAM_KEYReady) { _DIRECTORY_PARAM_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DIRECTORY_PARAM_KEY"); _DIRECTORY_PARAM_KEYReady = true; } return _DIRECTORY_PARAM_KEYContent; } }
        private static Java.Lang.String _DIRECTORY_PARAM_KEYContent = default;
        private static bool _DIRECTORY_PARAM_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.html#LIMIT_PARAM_KEY"/>
        /// </summary>
        public static Java.Lang.String LIMIT_PARAM_KEY { get { if (!_LIMIT_PARAM_KEYReady) { _LIMIT_PARAM_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LIMIT_PARAM_KEY"); _LIMIT_PARAM_KEYReady = true; } return _LIMIT_PARAM_KEYContent; } }
        private static Java.Lang.String _LIMIT_PARAM_KEYContent = default;
        private static bool _LIMIT_PARAM_KEYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.html#PRIMARY_ACCOUNT_NAME"/>
        /// </summary>
        public static Java.Lang.String PRIMARY_ACCOUNT_NAME { get { if (!_PRIMARY_ACCOUNT_NAMEReady) { _PRIMARY_ACCOUNT_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PRIMARY_ACCOUNT_NAME"); _PRIMARY_ACCOUNT_NAMEReady = true; } return _PRIMARY_ACCOUNT_NAMEContent; } }
        private static Java.Lang.String _PRIMARY_ACCOUNT_NAMEContent = default;
        private static bool _PRIMARY_ACCOUNT_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.html#PRIMARY_ACCOUNT_TYPE"/>
        /// </summary>
        public static Java.Lang.String PRIMARY_ACCOUNT_TYPE { get { if (!_PRIMARY_ACCOUNT_TYPEReady) { _PRIMARY_ACCOUNT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PRIMARY_ACCOUNT_TYPE"); _PRIMARY_ACCOUNT_TYPEReady = true; } return _PRIMARY_ACCOUNT_TYPEContent; } }
        private static Java.Lang.String _PRIMARY_ACCOUNT_TYPEContent = default;
        private static bool _PRIMARY_ACCOUNT_TYPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.html#REMOVE_DUPLICATE_ENTRIES"/>
        /// </summary>
        public static Java.Lang.String REMOVE_DUPLICATE_ENTRIES { get { if (!_REMOVE_DUPLICATE_ENTRIESReady) { _REMOVE_DUPLICATE_ENTRIESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REMOVE_DUPLICATE_ENTRIES"); _REMOVE_DUPLICATE_ENTRIESReady = true; } return _REMOVE_DUPLICATE_ENTRIESContent; } }
        private static Java.Lang.String _REMOVE_DUPLICATE_ENTRIESContent = default;
        private static bool _REMOVE_DUPLICATE_ENTRIESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.html#STREQUENT_PHONE_ONLY"/>
        /// </summary>
        public static Java.Lang.String STREQUENT_PHONE_ONLY { get { if (!_STREQUENT_PHONE_ONLYReady) { _STREQUENT_PHONE_ONLYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STREQUENT_PHONE_ONLY"); _STREQUENT_PHONE_ONLYReady = true; } return _STREQUENT_PHONE_ONLYContent; } }
        private static Java.Lang.String _STREQUENT_PHONE_ONLYContent = default;
        private static bool _STREQUENT_PHONE_ONLYReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.html#isProfileId(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsProfileId(long arg0)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isProfileId", "(J)Z", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region AggregationExceptions implementation
        public partial class AggregationExceptions
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.AggregationExceptions.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.AggregationExceptions.html#TYPE_AUTOMATIC"/>
            /// </summary>
            public static int TYPE_AUTOMATIC { get { if (!_TYPE_AUTOMATICReady) { _TYPE_AUTOMATICContent = SGetField<int>(LocalBridgeClazz, "TYPE_AUTOMATIC"); _TYPE_AUTOMATICReady = true; } return _TYPE_AUTOMATICContent; } }
            private static int _TYPE_AUTOMATICContent = default;
            private static bool _TYPE_AUTOMATICReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.AggregationExceptions.html#TYPE_KEEP_SEPARATE"/>
            /// </summary>
            public static int TYPE_KEEP_SEPARATE { get { if (!_TYPE_KEEP_SEPARATEReady) { _TYPE_KEEP_SEPARATEContent = SGetField<int>(LocalBridgeClazz, "TYPE_KEEP_SEPARATE"); _TYPE_KEEP_SEPARATEReady = true; } return _TYPE_KEEP_SEPARATEContent; } }
            private static int _TYPE_KEEP_SEPARATEContent = default;
            private static bool _TYPE_KEEP_SEPARATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.AggregationExceptions.html#TYPE_KEEP_TOGETHER"/>
            /// </summary>
            public static int TYPE_KEEP_TOGETHER { get { if (!_TYPE_KEEP_TOGETHERReady) { _TYPE_KEEP_TOGETHERContent = SGetField<int>(LocalBridgeClazz, "TYPE_KEEP_TOGETHER"); _TYPE_KEEP_TOGETHERReady = true; } return _TYPE_KEEP_TOGETHERContent; } }
            private static int _TYPE_KEEP_TOGETHERContent = default;
            private static bool _TYPE_KEEP_TOGETHERReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.AggregationExceptions.html#CONTENT_ITEM_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
            private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
            private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.AggregationExceptions.html#CONTENT_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
            private static Java.Lang.String _CONTENT_TYPEContent = default;
            private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.AggregationExceptions.html#RAW_CONTACT_ID1"/>
            /// </summary>
            public static Java.Lang.String RAW_CONTACT_ID1 { get { if (!_RAW_CONTACT_ID1Ready) { _RAW_CONTACT_ID1Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "RAW_CONTACT_ID1"); _RAW_CONTACT_ID1Ready = true; } return _RAW_CONTACT_ID1Content; } }
            private static Java.Lang.String _RAW_CONTACT_ID1Content = default;
            private static bool _RAW_CONTACT_ID1Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.AggregationExceptions.html#RAW_CONTACT_ID2"/>
            /// </summary>
            public static Java.Lang.String RAW_CONTACT_ID2 { get { if (!_RAW_CONTACT_ID2Ready) { _RAW_CONTACT_ID2Content = SGetField<Java.Lang.String>(LocalBridgeClazz, "RAW_CONTACT_ID2"); _RAW_CONTACT_ID2Ready = true; } return _RAW_CONTACT_ID2Content; } }
            private static Java.Lang.String _RAW_CONTACT_ID2Content = default;
            private static bool _RAW_CONTACT_ID2Ready = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.AggregationExceptions.html#TYPE"/>
            /// </summary>
            public static Java.Lang.String TYPE { get { if (!_TYPEReady) { _TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE"); _TYPEReady = true; } return _TYPEContent; } }
            private static Java.Lang.String _TYPEContent = default;
            private static bool _TYPEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region CommonDataKinds implementation
        public partial class CommonDataKinds
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes
            #region Website implementation
            public partial class Website
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html#TYPE_BLOG"/>
                /// </summary>
                public static int TYPE_BLOG { get { if (!_TYPE_BLOGReady) { _TYPE_BLOGContent = SGetField<int>(LocalBridgeClazz, "TYPE_BLOG"); _TYPE_BLOGReady = true; } return _TYPE_BLOGContent; } }
                private static int _TYPE_BLOGContent = default;
                private static bool _TYPE_BLOGReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html#TYPE_FTP"/>
                /// </summary>
                public static int TYPE_FTP { get { if (!_TYPE_FTPReady) { _TYPE_FTPContent = SGetField<int>(LocalBridgeClazz, "TYPE_FTP"); _TYPE_FTPReady = true; } return _TYPE_FTPContent; } }
                private static int _TYPE_FTPContent = default;
                private static bool _TYPE_FTPReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html#TYPE_HOME"/>
                /// </summary>
                public static int TYPE_HOME { get { if (!_TYPE_HOMEReady) { _TYPE_HOMEContent = SGetField<int>(LocalBridgeClazz, "TYPE_HOME"); _TYPE_HOMEReady = true; } return _TYPE_HOMEContent; } }
                private static int _TYPE_HOMEContent = default;
                private static bool _TYPE_HOMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html#TYPE_HOMEPAGE"/>
                /// </summary>
                public static int TYPE_HOMEPAGE { get { if (!_TYPE_HOMEPAGEReady) { _TYPE_HOMEPAGEContent = SGetField<int>(LocalBridgeClazz, "TYPE_HOMEPAGE"); _TYPE_HOMEPAGEReady = true; } return _TYPE_HOMEPAGEContent; } }
                private static int _TYPE_HOMEPAGEContent = default;
                private static bool _TYPE_HOMEPAGEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html#TYPE_OTHER"/>
                /// </summary>
                public static int TYPE_OTHER { get { if (!_TYPE_OTHERReady) { _TYPE_OTHERContent = SGetField<int>(LocalBridgeClazz, "TYPE_OTHER"); _TYPE_OTHERReady = true; } return _TYPE_OTHERContent; } }
                private static int _TYPE_OTHERContent = default;
                private static bool _TYPE_OTHERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html#TYPE_PROFILE"/>
                /// </summary>
                public static int TYPE_PROFILE { get { if (!_TYPE_PROFILEReady) { _TYPE_PROFILEContent = SGetField<int>(LocalBridgeClazz, "TYPE_PROFILE"); _TYPE_PROFILEReady = true; } return _TYPE_PROFILEContent; } }
                private static int _TYPE_PROFILEContent = default;
                private static bool _TYPE_PROFILEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html#TYPE_WORK"/>
                /// </summary>
                public static int TYPE_WORK { get { if (!_TYPE_WORKReady) { _TYPE_WORKContent = SGetField<int>(LocalBridgeClazz, "TYPE_WORK"); _TYPE_WORKReady = true; } return _TYPE_WORKContent; } }
                private static int _TYPE_WORKContent = default;
                private static bool _TYPE_WORKReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html#CONTENT_ITEM_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
                private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
                private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Website.html#URL"/>
                /// </summary>
                public static Java.Lang.String URL { get { if (!_URLReady) { _URLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "URL"); _URLReady = true; } return _URLContent; } }
                private static Java.Lang.String _URLContent = default;
                private static bool _URLReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region StructuredPostal implementation
            public partial class StructuredPostal
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
                private static Android.Net.Uri _CONTENT_URIContent = default;
                private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#TYPE_HOME"/>
                /// </summary>
                public static int TYPE_HOME { get { if (!_TYPE_HOMEReady) { _TYPE_HOMEContent = SGetField<int>(LocalBridgeClazz, "TYPE_HOME"); _TYPE_HOMEReady = true; } return _TYPE_HOMEContent; } }
                private static int _TYPE_HOMEContent = default;
                private static bool _TYPE_HOMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#TYPE_OTHER"/>
                /// </summary>
                public static int TYPE_OTHER { get { if (!_TYPE_OTHERReady) { _TYPE_OTHERContent = SGetField<int>(LocalBridgeClazz, "TYPE_OTHER"); _TYPE_OTHERReady = true; } return _TYPE_OTHERContent; } }
                private static int _TYPE_OTHERContent = default;
                private static bool _TYPE_OTHERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#TYPE_WORK"/>
                /// </summary>
                public static int TYPE_WORK { get { if (!_TYPE_WORKReady) { _TYPE_WORKContent = SGetField<int>(LocalBridgeClazz, "TYPE_WORK"); _TYPE_WORKReady = true; } return _TYPE_WORKContent; } }
                private static int _TYPE_WORKContent = default;
                private static bool _TYPE_WORKReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#CITY"/>
                /// </summary>
                public static Java.Lang.String CITY { get { if (!_CITYReady) { _CITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CITY"); _CITYReady = true; } return _CITYContent; } }
                private static Java.Lang.String _CITYContent = default;
                private static bool _CITYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#CONTENT_ITEM_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
                private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
                private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#CONTENT_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
                private static Java.Lang.String _CONTENT_TYPEContent = default;
                private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#COUNTRY"/>
                /// </summary>
                public static Java.Lang.String COUNTRY { get { if (!_COUNTRYReady) { _COUNTRYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COUNTRY"); _COUNTRYReady = true; } return _COUNTRYContent; } }
                private static Java.Lang.String _COUNTRYContent = default;
                private static bool _COUNTRYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#FORMATTED_ADDRESS"/>
                /// </summary>
                public static Java.Lang.String FORMATTED_ADDRESS { get { if (!_FORMATTED_ADDRESSReady) { _FORMATTED_ADDRESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FORMATTED_ADDRESS"); _FORMATTED_ADDRESSReady = true; } return _FORMATTED_ADDRESSContent; } }
                private static Java.Lang.String _FORMATTED_ADDRESSContent = default;
                private static bool _FORMATTED_ADDRESSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#NEIGHBORHOOD"/>
                /// </summary>
                public static Java.Lang.String NEIGHBORHOOD { get { if (!_NEIGHBORHOODReady) { _NEIGHBORHOODContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NEIGHBORHOOD"); _NEIGHBORHOODReady = true; } return _NEIGHBORHOODContent; } }
                private static Java.Lang.String _NEIGHBORHOODContent = default;
                private static bool _NEIGHBORHOODReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#POBOX"/>
                /// </summary>
                public static Java.Lang.String POBOX { get { if (!_POBOXReady) { _POBOXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "POBOX"); _POBOXReady = true; } return _POBOXContent; } }
                private static Java.Lang.String _POBOXContent = default;
                private static bool _POBOXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#POSTCODE"/>
                /// </summary>
                public static Java.Lang.String POSTCODE { get { if (!_POSTCODEReady) { _POSTCODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "POSTCODE"); _POSTCODEReady = true; } return _POSTCODEContent; } }
                private static Java.Lang.String _POSTCODEContent = default;
                private static bool _POSTCODEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#REGION"/>
                /// </summary>
                public static Java.Lang.String REGION { get { if (!_REGIONReady) { _REGIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REGION"); _REGIONReady = true; } return _REGIONContent; } }
                private static Java.Lang.String _REGIONContent = default;
                private static bool _REGIONReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#STREET"/>
                /// </summary>
                public static Java.Lang.String STREET { get { if (!_STREETReady) { _STREETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STREET"); _STREETReady = true; } return _STREETContent; } }
                private static Java.Lang.String _STREETContent = default;
                private static bool _STREETReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#getTypeLabelResource(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="int"/></returns>
                public static int GetTypeLabelResource(int arg0)
                {
                    return SExecuteWithSignature<int>(LocalBridgeClazz, "getTypeLabelResource", "(I)I", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredPostal.html#getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
                /// <returns><see cref="Java.Lang.CharSequence"/></returns>
                public static Java.Lang.CharSequence GetTypeLabel(Android.Content.Res.Resources arg0, int arg1, Java.Lang.CharSequence arg2)
                {
                    return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "getTypeLabel", arg0, arg1, arg2);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region StructuredName implementation
            public partial class StructuredName
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html#CONTENT_ITEM_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
                private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
                private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html#DISPLAY_NAME"/>
                /// </summary>
                public static Java.Lang.String DISPLAY_NAME { get { if (!_DISPLAY_NAMEReady) { _DISPLAY_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISPLAY_NAME"); _DISPLAY_NAMEReady = true; } return _DISPLAY_NAMEContent; } }
                private static Java.Lang.String _DISPLAY_NAMEContent = default;
                private static bool _DISPLAY_NAMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html#FAMILY_NAME"/>
                /// </summary>
                public static Java.Lang.String FAMILY_NAME { get { if (!_FAMILY_NAMEReady) { _FAMILY_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FAMILY_NAME"); _FAMILY_NAMEReady = true; } return _FAMILY_NAMEContent; } }
                private static Java.Lang.String _FAMILY_NAMEContent = default;
                private static bool _FAMILY_NAMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html#FULL_NAME_STYLE"/>
                /// </summary>
                public static Java.Lang.String FULL_NAME_STYLE { get { if (!_FULL_NAME_STYLEReady) { _FULL_NAME_STYLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FULL_NAME_STYLE"); _FULL_NAME_STYLEReady = true; } return _FULL_NAME_STYLEContent; } }
                private static Java.Lang.String _FULL_NAME_STYLEContent = default;
                private static bool _FULL_NAME_STYLEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html#GIVEN_NAME"/>
                /// </summary>
                public static Java.Lang.String GIVEN_NAME { get { if (!_GIVEN_NAMEReady) { _GIVEN_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GIVEN_NAME"); _GIVEN_NAMEReady = true; } return _GIVEN_NAMEContent; } }
                private static Java.Lang.String _GIVEN_NAMEContent = default;
                private static bool _GIVEN_NAMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html#MIDDLE_NAME"/>
                /// </summary>
                public static Java.Lang.String MIDDLE_NAME { get { if (!_MIDDLE_NAMEReady) { _MIDDLE_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MIDDLE_NAME"); _MIDDLE_NAMEReady = true; } return _MIDDLE_NAMEContent; } }
                private static Java.Lang.String _MIDDLE_NAMEContent = default;
                private static bool _MIDDLE_NAMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html#PHONETIC_FAMILY_NAME"/>
                /// </summary>
                public static Java.Lang.String PHONETIC_FAMILY_NAME { get { if (!_PHONETIC_FAMILY_NAMEReady) { _PHONETIC_FAMILY_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHONETIC_FAMILY_NAME"); _PHONETIC_FAMILY_NAMEReady = true; } return _PHONETIC_FAMILY_NAMEContent; } }
                private static Java.Lang.String _PHONETIC_FAMILY_NAMEContent = default;
                private static bool _PHONETIC_FAMILY_NAMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html#PHONETIC_GIVEN_NAME"/>
                /// </summary>
                public static Java.Lang.String PHONETIC_GIVEN_NAME { get { if (!_PHONETIC_GIVEN_NAMEReady) { _PHONETIC_GIVEN_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHONETIC_GIVEN_NAME"); _PHONETIC_GIVEN_NAMEReady = true; } return _PHONETIC_GIVEN_NAMEContent; } }
                private static Java.Lang.String _PHONETIC_GIVEN_NAMEContent = default;
                private static bool _PHONETIC_GIVEN_NAMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html#PHONETIC_MIDDLE_NAME"/>
                /// </summary>
                public static Java.Lang.String PHONETIC_MIDDLE_NAME { get { if (!_PHONETIC_MIDDLE_NAMEReady) { _PHONETIC_MIDDLE_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHONETIC_MIDDLE_NAME"); _PHONETIC_MIDDLE_NAMEReady = true; } return _PHONETIC_MIDDLE_NAMEContent; } }
                private static Java.Lang.String _PHONETIC_MIDDLE_NAMEContent = default;
                private static bool _PHONETIC_MIDDLE_NAMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html#PHONETIC_NAME_STYLE"/>
                /// </summary>
                public static Java.Lang.String PHONETIC_NAME_STYLE { get { if (!_PHONETIC_NAME_STYLEReady) { _PHONETIC_NAME_STYLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHONETIC_NAME_STYLE"); _PHONETIC_NAME_STYLEReady = true; } return _PHONETIC_NAME_STYLEContent; } }
                private static Java.Lang.String _PHONETIC_NAME_STYLEContent = default;
                private static bool _PHONETIC_NAME_STYLEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html#PREFIX"/>
                /// </summary>
                public static Java.Lang.String PREFIX { get { if (!_PREFIXReady) { _PREFIXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PREFIX"); _PREFIXReady = true; } return _PREFIXContent; } }
                private static Java.Lang.String _PREFIXContent = default;
                private static bool _PREFIXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.StructuredName.html#SUFFIX"/>
                /// </summary>
                public static Java.Lang.String SUFFIX { get { if (!_SUFFIXReady) { _SUFFIXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SUFFIX"); _SUFFIXReady = true; } return _SUFFIXContent; } }
                private static Java.Lang.String _SUFFIXContent = default;
                private static bool _SUFFIXReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region SipAddress implementation
            public partial class SipAddress
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.SipAddress.html#TYPE_HOME"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int TYPE_HOME { get { if (!_TYPE_HOMEReady) { _TYPE_HOMEContent = SGetField<int>(LocalBridgeClazz, "TYPE_HOME"); _TYPE_HOMEReady = true; } return _TYPE_HOMEContent; } }
                private static int _TYPE_HOMEContent = default;
                private static bool _TYPE_HOMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.SipAddress.html#TYPE_OTHER"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int TYPE_OTHER { get { if (!_TYPE_OTHERReady) { _TYPE_OTHERContent = SGetField<int>(LocalBridgeClazz, "TYPE_OTHER"); _TYPE_OTHERReady = true; } return _TYPE_OTHERContent; } }
                private static int _TYPE_OTHERContent = default;
                private static bool _TYPE_OTHERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.SipAddress.html#TYPE_WORK"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int TYPE_WORK { get { if (!_TYPE_WORKReady) { _TYPE_WORKContent = SGetField<int>(LocalBridgeClazz, "TYPE_WORK"); _TYPE_WORKReady = true; } return _TYPE_WORKContent; } }
                private static int _TYPE_WORKContent = default;
                private static bool _TYPE_WORKReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.SipAddress.html#CONTENT_ITEM_TYPE"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
                private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
                private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.SipAddress.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.SipAddress.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.SipAddress.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.SipAddress.html#SIP_ADDRESS"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String SIP_ADDRESS { get { if (!_SIP_ADDRESSReady) { _SIP_ADDRESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SIP_ADDRESS"); _SIP_ADDRESSReady = true; } return _SIP_ADDRESSContent; } }
                private static Java.Lang.String _SIP_ADDRESSContent = default;
                private static bool _SIP_ADDRESSReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.SipAddress.html#getTypeLabelResource(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="int"/></returns>
                [global::System.Obsolete()]
                public static int GetTypeLabelResource(int arg0)
                {
                    return SExecuteWithSignature<int>(LocalBridgeClazz, "getTypeLabelResource", "(I)I", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.SipAddress.html#getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
                /// <returns><see cref="Java.Lang.CharSequence"/></returns>
                [global::System.Obsolete()]
                public static Java.Lang.CharSequence GetTypeLabel(Android.Content.Res.Resources arg0, int arg1, Java.Lang.CharSequence arg2)
                {
                    return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "getTypeLabel", arg0, arg1, arg2);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Relation implementation
            public partial class Relation
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#TYPE_ASSISTANT"/>
                /// </summary>
                public static int TYPE_ASSISTANT { get { if (!_TYPE_ASSISTANTReady) { _TYPE_ASSISTANTContent = SGetField<int>(LocalBridgeClazz, "TYPE_ASSISTANT"); _TYPE_ASSISTANTReady = true; } return _TYPE_ASSISTANTContent; } }
                private static int _TYPE_ASSISTANTContent = default;
                private static bool _TYPE_ASSISTANTReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#TYPE_BROTHER"/>
                /// </summary>
                public static int TYPE_BROTHER { get { if (!_TYPE_BROTHERReady) { _TYPE_BROTHERContent = SGetField<int>(LocalBridgeClazz, "TYPE_BROTHER"); _TYPE_BROTHERReady = true; } return _TYPE_BROTHERContent; } }
                private static int _TYPE_BROTHERContent = default;
                private static bool _TYPE_BROTHERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#TYPE_CHILD"/>
                /// </summary>
                public static int TYPE_CHILD { get { if (!_TYPE_CHILDReady) { _TYPE_CHILDContent = SGetField<int>(LocalBridgeClazz, "TYPE_CHILD"); _TYPE_CHILDReady = true; } return _TYPE_CHILDContent; } }
                private static int _TYPE_CHILDContent = default;
                private static bool _TYPE_CHILDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#TYPE_DOMESTIC_PARTNER"/>
                /// </summary>
                public static int TYPE_DOMESTIC_PARTNER { get { if (!_TYPE_DOMESTIC_PARTNERReady) { _TYPE_DOMESTIC_PARTNERContent = SGetField<int>(LocalBridgeClazz, "TYPE_DOMESTIC_PARTNER"); _TYPE_DOMESTIC_PARTNERReady = true; } return _TYPE_DOMESTIC_PARTNERContent; } }
                private static int _TYPE_DOMESTIC_PARTNERContent = default;
                private static bool _TYPE_DOMESTIC_PARTNERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#TYPE_FATHER"/>
                /// </summary>
                public static int TYPE_FATHER { get { if (!_TYPE_FATHERReady) { _TYPE_FATHERContent = SGetField<int>(LocalBridgeClazz, "TYPE_FATHER"); _TYPE_FATHERReady = true; } return _TYPE_FATHERContent; } }
                private static int _TYPE_FATHERContent = default;
                private static bool _TYPE_FATHERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#TYPE_FRIEND"/>
                /// </summary>
                public static int TYPE_FRIEND { get { if (!_TYPE_FRIENDReady) { _TYPE_FRIENDContent = SGetField<int>(LocalBridgeClazz, "TYPE_FRIEND"); _TYPE_FRIENDReady = true; } return _TYPE_FRIENDContent; } }
                private static int _TYPE_FRIENDContent = default;
                private static bool _TYPE_FRIENDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#TYPE_MANAGER"/>
                /// </summary>
                public static int TYPE_MANAGER { get { if (!_TYPE_MANAGERReady) { _TYPE_MANAGERContent = SGetField<int>(LocalBridgeClazz, "TYPE_MANAGER"); _TYPE_MANAGERReady = true; } return _TYPE_MANAGERContent; } }
                private static int _TYPE_MANAGERContent = default;
                private static bool _TYPE_MANAGERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#TYPE_MOTHER"/>
                /// </summary>
                public static int TYPE_MOTHER { get { if (!_TYPE_MOTHERReady) { _TYPE_MOTHERContent = SGetField<int>(LocalBridgeClazz, "TYPE_MOTHER"); _TYPE_MOTHERReady = true; } return _TYPE_MOTHERContent; } }
                private static int _TYPE_MOTHERContent = default;
                private static bool _TYPE_MOTHERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#TYPE_PARENT"/>
                /// </summary>
                public static int TYPE_PARENT { get { if (!_TYPE_PARENTReady) { _TYPE_PARENTContent = SGetField<int>(LocalBridgeClazz, "TYPE_PARENT"); _TYPE_PARENTReady = true; } return _TYPE_PARENTContent; } }
                private static int _TYPE_PARENTContent = default;
                private static bool _TYPE_PARENTReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#TYPE_PARTNER"/>
                /// </summary>
                public static int TYPE_PARTNER { get { if (!_TYPE_PARTNERReady) { _TYPE_PARTNERContent = SGetField<int>(LocalBridgeClazz, "TYPE_PARTNER"); _TYPE_PARTNERReady = true; } return _TYPE_PARTNERContent; } }
                private static int _TYPE_PARTNERContent = default;
                private static bool _TYPE_PARTNERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#TYPE_REFERRED_BY"/>
                /// </summary>
                public static int TYPE_REFERRED_BY { get { if (!_TYPE_REFERRED_BYReady) { _TYPE_REFERRED_BYContent = SGetField<int>(LocalBridgeClazz, "TYPE_REFERRED_BY"); _TYPE_REFERRED_BYReady = true; } return _TYPE_REFERRED_BYContent; } }
                private static int _TYPE_REFERRED_BYContent = default;
                private static bool _TYPE_REFERRED_BYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#TYPE_RELATIVE"/>
                /// </summary>
                public static int TYPE_RELATIVE { get { if (!_TYPE_RELATIVEReady) { _TYPE_RELATIVEContent = SGetField<int>(LocalBridgeClazz, "TYPE_RELATIVE"); _TYPE_RELATIVEReady = true; } return _TYPE_RELATIVEContent; } }
                private static int _TYPE_RELATIVEContent = default;
                private static bool _TYPE_RELATIVEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#TYPE_SISTER"/>
                /// </summary>
                public static int TYPE_SISTER { get { if (!_TYPE_SISTERReady) { _TYPE_SISTERContent = SGetField<int>(LocalBridgeClazz, "TYPE_SISTER"); _TYPE_SISTERReady = true; } return _TYPE_SISTERContent; } }
                private static int _TYPE_SISTERContent = default;
                private static bool _TYPE_SISTERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#TYPE_SPOUSE"/>
                /// </summary>
                public static int TYPE_SPOUSE { get { if (!_TYPE_SPOUSEReady) { _TYPE_SPOUSEContent = SGetField<int>(LocalBridgeClazz, "TYPE_SPOUSE"); _TYPE_SPOUSEReady = true; } return _TYPE_SPOUSEContent; } }
                private static int _TYPE_SPOUSEContent = default;
                private static bool _TYPE_SPOUSEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#CONTENT_ITEM_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
                private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
                private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#NAME"/>
                /// </summary>
                public static Java.Lang.String NAME { get { if (!_NAMEReady) { _NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME"); _NAMEReady = true; } return _NAMEContent; } }
                private static Java.Lang.String _NAMEContent = default;
                private static bool _NAMEReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#getTypeLabelResource(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="int"/></returns>
                public static int GetTypeLabelResource(int arg0)
                {
                    return SExecuteWithSignature<int>(LocalBridgeClazz, "getTypeLabelResource", "(I)I", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Relation.html#getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
                /// <returns><see cref="Java.Lang.CharSequence"/></returns>
                public static Java.Lang.CharSequence GetTypeLabel(Android.Content.Res.Resources arg0, int arg1, Java.Lang.CharSequence arg2)
                {
                    return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "getTypeLabel", arg0, arg1, arg2);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Photo implementation
            public partial class Photo
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Photo.html#CONTENT_ITEM_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
                private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
                private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Photo.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Photo.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Photo.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Photo.html#PHOTO"/>
                /// </summary>
                public static Java.Lang.String PHOTO { get { if (!_PHOTOReady) { _PHOTOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHOTO"); _PHOTOReady = true; } return _PHOTOContent; } }
                private static Java.Lang.String _PHOTOContent = default;
                private static bool _PHOTOReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Photo.html#PHOTO_FILE_ID"/>
                /// </summary>
                public static Java.Lang.String PHOTO_FILE_ID { get { if (!_PHOTO_FILE_IDReady) { _PHOTO_FILE_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHOTO_FILE_ID"); _PHOTO_FILE_IDReady = true; } return _PHOTO_FILE_IDContent; } }
                private static Java.Lang.String _PHOTO_FILE_IDContent = default;
                private static bool _PHOTO_FILE_IDReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Phone implementation
            public partial class Phone
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#CONTENT_FILTER_URI"/>
                /// </summary>
                public static Android.Net.Uri CONTENT_FILTER_URI { get { if (!_CONTENT_FILTER_URIReady) { _CONTENT_FILTER_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_FILTER_URI"); _CONTENT_FILTER_URIReady = true; } return _CONTENT_FILTER_URIContent; } }
                private static Android.Net.Uri _CONTENT_FILTER_URIContent = default;
                private static bool _CONTENT_FILTER_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
                private static Android.Net.Uri _CONTENT_URIContent = default;
                private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#ENTERPRISE_CONTENT_FILTER_URI"/>
                /// </summary>
                public static Android.Net.Uri ENTERPRISE_CONTENT_FILTER_URI { get { if (!_ENTERPRISE_CONTENT_FILTER_URIReady) { _ENTERPRISE_CONTENT_FILTER_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "ENTERPRISE_CONTENT_FILTER_URI"); _ENTERPRISE_CONTENT_FILTER_URIReady = true; } return _ENTERPRISE_CONTENT_FILTER_URIContent; } }
                private static Android.Net.Uri _ENTERPRISE_CONTENT_FILTER_URIContent = default;
                private static bool _ENTERPRISE_CONTENT_FILTER_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#ENTERPRISE_CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri ENTERPRISE_CONTENT_URI { get { if (!_ENTERPRISE_CONTENT_URIReady) { _ENTERPRISE_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "ENTERPRISE_CONTENT_URI"); _ENTERPRISE_CONTENT_URIReady = true; } return _ENTERPRISE_CONTENT_URIContent; } }
                private static Android.Net.Uri _ENTERPRISE_CONTENT_URIContent = default;
                private static bool _ENTERPRISE_CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_ASSISTANT"/>
                /// </summary>
                public static int TYPE_ASSISTANT { get { if (!_TYPE_ASSISTANTReady) { _TYPE_ASSISTANTContent = SGetField<int>(LocalBridgeClazz, "TYPE_ASSISTANT"); _TYPE_ASSISTANTReady = true; } return _TYPE_ASSISTANTContent; } }
                private static int _TYPE_ASSISTANTContent = default;
                private static bool _TYPE_ASSISTANTReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_CALLBACK"/>
                /// </summary>
                public static int TYPE_CALLBACK { get { if (!_TYPE_CALLBACKReady) { _TYPE_CALLBACKContent = SGetField<int>(LocalBridgeClazz, "TYPE_CALLBACK"); _TYPE_CALLBACKReady = true; } return _TYPE_CALLBACKContent; } }
                private static int _TYPE_CALLBACKContent = default;
                private static bool _TYPE_CALLBACKReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_CAR"/>
                /// </summary>
                public static int TYPE_CAR { get { if (!_TYPE_CARReady) { _TYPE_CARContent = SGetField<int>(LocalBridgeClazz, "TYPE_CAR"); _TYPE_CARReady = true; } return _TYPE_CARContent; } }
                private static int _TYPE_CARContent = default;
                private static bool _TYPE_CARReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_COMPANY_MAIN"/>
                /// </summary>
                public static int TYPE_COMPANY_MAIN { get { if (!_TYPE_COMPANY_MAINReady) { _TYPE_COMPANY_MAINContent = SGetField<int>(LocalBridgeClazz, "TYPE_COMPANY_MAIN"); _TYPE_COMPANY_MAINReady = true; } return _TYPE_COMPANY_MAINContent; } }
                private static int _TYPE_COMPANY_MAINContent = default;
                private static bool _TYPE_COMPANY_MAINReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_FAX_HOME"/>
                /// </summary>
                public static int TYPE_FAX_HOME { get { if (!_TYPE_FAX_HOMEReady) { _TYPE_FAX_HOMEContent = SGetField<int>(LocalBridgeClazz, "TYPE_FAX_HOME"); _TYPE_FAX_HOMEReady = true; } return _TYPE_FAX_HOMEContent; } }
                private static int _TYPE_FAX_HOMEContent = default;
                private static bool _TYPE_FAX_HOMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_FAX_WORK"/>
                /// </summary>
                public static int TYPE_FAX_WORK { get { if (!_TYPE_FAX_WORKReady) { _TYPE_FAX_WORKContent = SGetField<int>(LocalBridgeClazz, "TYPE_FAX_WORK"); _TYPE_FAX_WORKReady = true; } return _TYPE_FAX_WORKContent; } }
                private static int _TYPE_FAX_WORKContent = default;
                private static bool _TYPE_FAX_WORKReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_HOME"/>
                /// </summary>
                public static int TYPE_HOME { get { if (!_TYPE_HOMEReady) { _TYPE_HOMEContent = SGetField<int>(LocalBridgeClazz, "TYPE_HOME"); _TYPE_HOMEReady = true; } return _TYPE_HOMEContent; } }
                private static int _TYPE_HOMEContent = default;
                private static bool _TYPE_HOMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_ISDN"/>
                /// </summary>
                public static int TYPE_ISDN { get { if (!_TYPE_ISDNReady) { _TYPE_ISDNContent = SGetField<int>(LocalBridgeClazz, "TYPE_ISDN"); _TYPE_ISDNReady = true; } return _TYPE_ISDNContent; } }
                private static int _TYPE_ISDNContent = default;
                private static bool _TYPE_ISDNReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_MAIN"/>
                /// </summary>
                public static int TYPE_MAIN { get { if (!_TYPE_MAINReady) { _TYPE_MAINContent = SGetField<int>(LocalBridgeClazz, "TYPE_MAIN"); _TYPE_MAINReady = true; } return _TYPE_MAINContent; } }
                private static int _TYPE_MAINContent = default;
                private static bool _TYPE_MAINReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_MMS"/>
                /// </summary>
                public static int TYPE_MMS { get { if (!_TYPE_MMSReady) { _TYPE_MMSContent = SGetField<int>(LocalBridgeClazz, "TYPE_MMS"); _TYPE_MMSReady = true; } return _TYPE_MMSContent; } }
                private static int _TYPE_MMSContent = default;
                private static bool _TYPE_MMSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_MOBILE"/>
                /// </summary>
                public static int TYPE_MOBILE { get { if (!_TYPE_MOBILEReady) { _TYPE_MOBILEContent = SGetField<int>(LocalBridgeClazz, "TYPE_MOBILE"); _TYPE_MOBILEReady = true; } return _TYPE_MOBILEContent; } }
                private static int _TYPE_MOBILEContent = default;
                private static bool _TYPE_MOBILEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_OTHER"/>
                /// </summary>
                public static int TYPE_OTHER { get { if (!_TYPE_OTHERReady) { _TYPE_OTHERContent = SGetField<int>(LocalBridgeClazz, "TYPE_OTHER"); _TYPE_OTHERReady = true; } return _TYPE_OTHERContent; } }
                private static int _TYPE_OTHERContent = default;
                private static bool _TYPE_OTHERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_OTHER_FAX"/>
                /// </summary>
                public static int TYPE_OTHER_FAX { get { if (!_TYPE_OTHER_FAXReady) { _TYPE_OTHER_FAXContent = SGetField<int>(LocalBridgeClazz, "TYPE_OTHER_FAX"); _TYPE_OTHER_FAXReady = true; } return _TYPE_OTHER_FAXContent; } }
                private static int _TYPE_OTHER_FAXContent = default;
                private static bool _TYPE_OTHER_FAXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_PAGER"/>
                /// </summary>
                public static int TYPE_PAGER { get { if (!_TYPE_PAGERReady) { _TYPE_PAGERContent = SGetField<int>(LocalBridgeClazz, "TYPE_PAGER"); _TYPE_PAGERReady = true; } return _TYPE_PAGERContent; } }
                private static int _TYPE_PAGERContent = default;
                private static bool _TYPE_PAGERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_RADIO"/>
                /// </summary>
                public static int TYPE_RADIO { get { if (!_TYPE_RADIOReady) { _TYPE_RADIOContent = SGetField<int>(LocalBridgeClazz, "TYPE_RADIO"); _TYPE_RADIOReady = true; } return _TYPE_RADIOContent; } }
                private static int _TYPE_RADIOContent = default;
                private static bool _TYPE_RADIOReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_TELEX"/>
                /// </summary>
                public static int TYPE_TELEX { get { if (!_TYPE_TELEXReady) { _TYPE_TELEXContent = SGetField<int>(LocalBridgeClazz, "TYPE_TELEX"); _TYPE_TELEXReady = true; } return _TYPE_TELEXContent; } }
                private static int _TYPE_TELEXContent = default;
                private static bool _TYPE_TELEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_TTY_TDD"/>
                /// </summary>
                public static int TYPE_TTY_TDD { get { if (!_TYPE_TTY_TDDReady) { _TYPE_TTY_TDDContent = SGetField<int>(LocalBridgeClazz, "TYPE_TTY_TDD"); _TYPE_TTY_TDDReady = true; } return _TYPE_TTY_TDDContent; } }
                private static int _TYPE_TTY_TDDContent = default;
                private static bool _TYPE_TTY_TDDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_WORK"/>
                /// </summary>
                public static int TYPE_WORK { get { if (!_TYPE_WORKReady) { _TYPE_WORKContent = SGetField<int>(LocalBridgeClazz, "TYPE_WORK"); _TYPE_WORKReady = true; } return _TYPE_WORKContent; } }
                private static int _TYPE_WORKContent = default;
                private static bool _TYPE_WORKReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_WORK_MOBILE"/>
                /// </summary>
                public static int TYPE_WORK_MOBILE { get { if (!_TYPE_WORK_MOBILEReady) { _TYPE_WORK_MOBILEContent = SGetField<int>(LocalBridgeClazz, "TYPE_WORK_MOBILE"); _TYPE_WORK_MOBILEReady = true; } return _TYPE_WORK_MOBILEContent; } }
                private static int _TYPE_WORK_MOBILEContent = default;
                private static bool _TYPE_WORK_MOBILEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#TYPE_WORK_PAGER"/>
                /// </summary>
                public static int TYPE_WORK_PAGER { get { if (!_TYPE_WORK_PAGERReady) { _TYPE_WORK_PAGERContent = SGetField<int>(LocalBridgeClazz, "TYPE_WORK_PAGER"); _TYPE_WORK_PAGERReady = true; } return _TYPE_WORK_PAGERContent; } }
                private static int _TYPE_WORK_PAGERContent = default;
                private static bool _TYPE_WORK_PAGERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#CONTENT_ITEM_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
                private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
                private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#CONTENT_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
                private static Java.Lang.String _CONTENT_TYPEContent = default;
                private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#NORMALIZED_NUMBER"/>
                /// </summary>
                public static Java.Lang.String NORMALIZED_NUMBER { get { if (!_NORMALIZED_NUMBERReady) { _NORMALIZED_NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NORMALIZED_NUMBER"); _NORMALIZED_NUMBERReady = true; } return _NORMALIZED_NUMBERContent; } }
                private static Java.Lang.String _NORMALIZED_NUMBERContent = default;
                private static bool _NORMALIZED_NUMBERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#NUMBER"/>
                /// </summary>
                public static Java.Lang.String NUMBER { get { if (!_NUMBERReady) { _NUMBERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NUMBER"); _NUMBERReady = true; } return _NUMBERContent; } }
                private static Java.Lang.String _NUMBERContent = default;
                private static bool _NUMBERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#SEARCH_DISPLAY_NAME_KEY"/>
                /// </summary>
                public static Java.Lang.String SEARCH_DISPLAY_NAME_KEY { get { if (!_SEARCH_DISPLAY_NAME_KEYReady) { _SEARCH_DISPLAY_NAME_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SEARCH_DISPLAY_NAME_KEY"); _SEARCH_DISPLAY_NAME_KEYReady = true; } return _SEARCH_DISPLAY_NAME_KEYContent; } }
                private static Java.Lang.String _SEARCH_DISPLAY_NAME_KEYContent = default;
                private static bool _SEARCH_DISPLAY_NAME_KEYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#SEARCH_PHONE_NUMBER_KEY"/>
                /// </summary>
                public static Java.Lang.String SEARCH_PHONE_NUMBER_KEY { get { if (!_SEARCH_PHONE_NUMBER_KEYReady) { _SEARCH_PHONE_NUMBER_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SEARCH_PHONE_NUMBER_KEY"); _SEARCH_PHONE_NUMBER_KEYReady = true; } return _SEARCH_PHONE_NUMBER_KEYContent; } }
                private static Java.Lang.String _SEARCH_PHONE_NUMBER_KEYContent = default;
                private static bool _SEARCH_PHONE_NUMBER_KEYReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#getTypeLabelResource(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="int"/></returns>
                public static int GetTypeLabelResource(int arg0)
                {
                    return SExecuteWithSignature<int>(LocalBridgeClazz, "getTypeLabelResource", "(I)I", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html#getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
                /// <returns><see cref="Java.Lang.CharSequence"/></returns>
                public static Java.Lang.CharSequence GetTypeLabel(Android.Content.Res.Resources arg0, int arg1, Java.Lang.CharSequence arg2)
                {
                    return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "getTypeLabel", arg0, arg1, arg2);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Organization implementation
            public partial class Organization
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html#TYPE_OTHER"/>
                /// </summary>
                public static int TYPE_OTHER { get { if (!_TYPE_OTHERReady) { _TYPE_OTHERContent = SGetField<int>(LocalBridgeClazz, "TYPE_OTHER"); _TYPE_OTHERReady = true; } return _TYPE_OTHERContent; } }
                private static int _TYPE_OTHERContent = default;
                private static bool _TYPE_OTHERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html#TYPE_WORK"/>
                /// </summary>
                public static int TYPE_WORK { get { if (!_TYPE_WORKReady) { _TYPE_WORKContent = SGetField<int>(LocalBridgeClazz, "TYPE_WORK"); _TYPE_WORKReady = true; } return _TYPE_WORKContent; } }
                private static int _TYPE_WORKContent = default;
                private static bool _TYPE_WORKReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html#COMPANY"/>
                /// </summary>
                public static Java.Lang.String COMPANY { get { if (!_COMPANYReady) { _COMPANYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COMPANY"); _COMPANYReady = true; } return _COMPANYContent; } }
                private static Java.Lang.String _COMPANYContent = default;
                private static bool _COMPANYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html#CONTENT_ITEM_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
                private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
                private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html#DEPARTMENT"/>
                /// </summary>
                public static Java.Lang.String DEPARTMENT { get { if (!_DEPARTMENTReady) { _DEPARTMENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEPARTMENT"); _DEPARTMENTReady = true; } return _DEPARTMENTContent; } }
                private static Java.Lang.String _DEPARTMENTContent = default;
                private static bool _DEPARTMENTReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html#JOB_DESCRIPTION"/>
                /// </summary>
                public static Java.Lang.String JOB_DESCRIPTION { get { if (!_JOB_DESCRIPTIONReady) { _JOB_DESCRIPTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "JOB_DESCRIPTION"); _JOB_DESCRIPTIONReady = true; } return _JOB_DESCRIPTIONContent; } }
                private static Java.Lang.String _JOB_DESCRIPTIONContent = default;
                private static bool _JOB_DESCRIPTIONReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html#OFFICE_LOCATION"/>
                /// </summary>
                public static Java.Lang.String OFFICE_LOCATION { get { if (!_OFFICE_LOCATIONReady) { _OFFICE_LOCATIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OFFICE_LOCATION"); _OFFICE_LOCATIONReady = true; } return _OFFICE_LOCATIONContent; } }
                private static Java.Lang.String _OFFICE_LOCATIONContent = default;
                private static bool _OFFICE_LOCATIONReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html#PHONETIC_NAME"/>
                /// </summary>
                public static Java.Lang.String PHONETIC_NAME { get { if (!_PHONETIC_NAMEReady) { _PHONETIC_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHONETIC_NAME"); _PHONETIC_NAMEReady = true; } return _PHONETIC_NAMEContent; } }
                private static Java.Lang.String _PHONETIC_NAMEContent = default;
                private static bool _PHONETIC_NAMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html#PHONETIC_NAME_STYLE"/>
                /// </summary>
                public static Java.Lang.String PHONETIC_NAME_STYLE { get { if (!_PHONETIC_NAME_STYLEReady) { _PHONETIC_NAME_STYLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHONETIC_NAME_STYLE"); _PHONETIC_NAME_STYLEReady = true; } return _PHONETIC_NAME_STYLEContent; } }
                private static Java.Lang.String _PHONETIC_NAME_STYLEContent = default;
                private static bool _PHONETIC_NAME_STYLEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html#SYMBOL"/>
                /// </summary>
                public static Java.Lang.String SYMBOL { get { if (!_SYMBOLReady) { _SYMBOLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SYMBOL"); _SYMBOLReady = true; } return _SYMBOLContent; } }
                private static Java.Lang.String _SYMBOLContent = default;
                private static bool _SYMBOLReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html#TITLE"/>
                /// </summary>
                public static Java.Lang.String TITLE { get { if (!_TITLEReady) { _TITLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TITLE"); _TITLEReady = true; } return _TITLEContent; } }
                private static Java.Lang.String _TITLEContent = default;
                private static bool _TITLEReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html#getTypeLabelResource(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="int"/></returns>
                public static int GetTypeLabelResource(int arg0)
                {
                    return SExecuteWithSignature<int>(LocalBridgeClazz, "getTypeLabelResource", "(I)I", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Organization.html#getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
                /// <returns><see cref="Java.Lang.CharSequence"/></returns>
                public static Java.Lang.CharSequence GetTypeLabel(Android.Content.Res.Resources arg0, int arg1, Java.Lang.CharSequence arg2)
                {
                    return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "getTypeLabel", arg0, arg1, arg2);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Note implementation
            public partial class Note
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Note.html#CONTENT_ITEM_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
                private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
                private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Note.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Note.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Note.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Note.html#NOTE"/>
                /// </summary>
                public static Java.Lang.String NOTE { get { if (!_NOTEReady) { _NOTEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NOTE"); _NOTEReady = true; } return _NOTEContent; } }
                private static Java.Lang.String _NOTEContent = default;
                private static bool _NOTEReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Nickname implementation
            public partial class Nickname
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Nickname.html#TYPE_DEFAULT"/>
                /// </summary>
                public static int TYPE_DEFAULT { get { if (!_TYPE_DEFAULTReady) { _TYPE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "TYPE_DEFAULT"); _TYPE_DEFAULTReady = true; } return _TYPE_DEFAULTContent; } }
                private static int _TYPE_DEFAULTContent = default;
                private static bool _TYPE_DEFAULTReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Nickname.html#TYPE_INITIALS"/>
                /// </summary>
                public static int TYPE_INITIALS { get { if (!_TYPE_INITIALSReady) { _TYPE_INITIALSContent = SGetField<int>(LocalBridgeClazz, "TYPE_INITIALS"); _TYPE_INITIALSReady = true; } return _TYPE_INITIALSContent; } }
                private static int _TYPE_INITIALSContent = default;
                private static bool _TYPE_INITIALSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Nickname.html#TYPE_MAIDEN_NAME"/>
                /// </summary>
                public static int TYPE_MAIDEN_NAME { get { if (!_TYPE_MAIDEN_NAMEReady) { _TYPE_MAIDEN_NAMEContent = SGetField<int>(LocalBridgeClazz, "TYPE_MAIDEN_NAME"); _TYPE_MAIDEN_NAMEReady = true; } return _TYPE_MAIDEN_NAMEContent; } }
                private static int _TYPE_MAIDEN_NAMEContent = default;
                private static bool _TYPE_MAIDEN_NAMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Nickname.html#TYPE_MAINDEN_NAME"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int TYPE_MAINDEN_NAME { get { if (!_TYPE_MAINDEN_NAMEReady) { _TYPE_MAINDEN_NAMEContent = SGetField<int>(LocalBridgeClazz, "TYPE_MAINDEN_NAME"); _TYPE_MAINDEN_NAMEReady = true; } return _TYPE_MAINDEN_NAMEContent; } }
                private static int _TYPE_MAINDEN_NAMEContent = default;
                private static bool _TYPE_MAINDEN_NAMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Nickname.html#TYPE_OTHER_NAME"/>
                /// </summary>
                public static int TYPE_OTHER_NAME { get { if (!_TYPE_OTHER_NAMEReady) { _TYPE_OTHER_NAMEContent = SGetField<int>(LocalBridgeClazz, "TYPE_OTHER_NAME"); _TYPE_OTHER_NAMEReady = true; } return _TYPE_OTHER_NAMEContent; } }
                private static int _TYPE_OTHER_NAMEContent = default;
                private static bool _TYPE_OTHER_NAMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Nickname.html#TYPE_SHORT_NAME"/>
                /// </summary>
                public static int TYPE_SHORT_NAME { get { if (!_TYPE_SHORT_NAMEReady) { _TYPE_SHORT_NAMEContent = SGetField<int>(LocalBridgeClazz, "TYPE_SHORT_NAME"); _TYPE_SHORT_NAMEReady = true; } return _TYPE_SHORT_NAMEContent; } }
                private static int _TYPE_SHORT_NAMEContent = default;
                private static bool _TYPE_SHORT_NAMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Nickname.html#CONTENT_ITEM_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
                private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
                private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Nickname.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Nickname.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Nickname.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Nickname.html#NAME"/>
                /// </summary>
                public static Java.Lang.String NAME { get { if (!_NAMEReady) { _NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME"); _NAMEReady = true; } return _NAMEContent; } }
                private static Java.Lang.String _NAMEContent = default;
                private static bool _NAMEReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Im implementation
            public partial class Im
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#PROTOCOL_AIM"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int PROTOCOL_AIM { get { if (!_PROTOCOL_AIMReady) { _PROTOCOL_AIMContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_AIM"); _PROTOCOL_AIMReady = true; } return _PROTOCOL_AIMContent; } }
                private static int _PROTOCOL_AIMContent = default;
                private static bool _PROTOCOL_AIMReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#PROTOCOL_CUSTOM"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int PROTOCOL_CUSTOM { get { if (!_PROTOCOL_CUSTOMReady) { _PROTOCOL_CUSTOMContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_CUSTOM"); _PROTOCOL_CUSTOMReady = true; } return _PROTOCOL_CUSTOMContent; } }
                private static int _PROTOCOL_CUSTOMContent = default;
                private static bool _PROTOCOL_CUSTOMReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#PROTOCOL_GOOGLE_TALK"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int PROTOCOL_GOOGLE_TALK { get { if (!_PROTOCOL_GOOGLE_TALKReady) { _PROTOCOL_GOOGLE_TALKContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_GOOGLE_TALK"); _PROTOCOL_GOOGLE_TALKReady = true; } return _PROTOCOL_GOOGLE_TALKContent; } }
                private static int _PROTOCOL_GOOGLE_TALKContent = default;
                private static bool _PROTOCOL_GOOGLE_TALKReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#PROTOCOL_ICQ"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int PROTOCOL_ICQ { get { if (!_PROTOCOL_ICQReady) { _PROTOCOL_ICQContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_ICQ"); _PROTOCOL_ICQReady = true; } return _PROTOCOL_ICQContent; } }
                private static int _PROTOCOL_ICQContent = default;
                private static bool _PROTOCOL_ICQReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#PROTOCOL_JABBER"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int PROTOCOL_JABBER { get { if (!_PROTOCOL_JABBERReady) { _PROTOCOL_JABBERContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_JABBER"); _PROTOCOL_JABBERReady = true; } return _PROTOCOL_JABBERContent; } }
                private static int _PROTOCOL_JABBERContent = default;
                private static bool _PROTOCOL_JABBERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#PROTOCOL_MSN"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int PROTOCOL_MSN { get { if (!_PROTOCOL_MSNReady) { _PROTOCOL_MSNContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_MSN"); _PROTOCOL_MSNReady = true; } return _PROTOCOL_MSNContent; } }
                private static int _PROTOCOL_MSNContent = default;
                private static bool _PROTOCOL_MSNReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#PROTOCOL_NETMEETING"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int PROTOCOL_NETMEETING { get { if (!_PROTOCOL_NETMEETINGReady) { _PROTOCOL_NETMEETINGContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_NETMEETING"); _PROTOCOL_NETMEETINGReady = true; } return _PROTOCOL_NETMEETINGContent; } }
                private static int _PROTOCOL_NETMEETINGContent = default;
                private static bool _PROTOCOL_NETMEETINGReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#PROTOCOL_QQ"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int PROTOCOL_QQ { get { if (!_PROTOCOL_QQReady) { _PROTOCOL_QQContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_QQ"); _PROTOCOL_QQReady = true; } return _PROTOCOL_QQContent; } }
                private static int _PROTOCOL_QQContent = default;
                private static bool _PROTOCOL_QQReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#PROTOCOL_SKYPE"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int PROTOCOL_SKYPE { get { if (!_PROTOCOL_SKYPEReady) { _PROTOCOL_SKYPEContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_SKYPE"); _PROTOCOL_SKYPEReady = true; } return _PROTOCOL_SKYPEContent; } }
                private static int _PROTOCOL_SKYPEContent = default;
                private static bool _PROTOCOL_SKYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#PROTOCOL_YAHOO"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int PROTOCOL_YAHOO { get { if (!_PROTOCOL_YAHOOReady) { _PROTOCOL_YAHOOContent = SGetField<int>(LocalBridgeClazz, "PROTOCOL_YAHOO"); _PROTOCOL_YAHOOReady = true; } return _PROTOCOL_YAHOOContent; } }
                private static int _PROTOCOL_YAHOOContent = default;
                private static bool _PROTOCOL_YAHOOReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#TYPE_HOME"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int TYPE_HOME { get { if (!_TYPE_HOMEReady) { _TYPE_HOMEContent = SGetField<int>(LocalBridgeClazz, "TYPE_HOME"); _TYPE_HOMEReady = true; } return _TYPE_HOMEContent; } }
                private static int _TYPE_HOMEContent = default;
                private static bool _TYPE_HOMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#TYPE_OTHER"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int TYPE_OTHER { get { if (!_TYPE_OTHERReady) { _TYPE_OTHERContent = SGetField<int>(LocalBridgeClazz, "TYPE_OTHER"); _TYPE_OTHERReady = true; } return _TYPE_OTHERContent; } }
                private static int _TYPE_OTHERContent = default;
                private static bool _TYPE_OTHERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#TYPE_WORK"/>
                /// </summary>
                [global::System.Obsolete()]
                public static int TYPE_WORK { get { if (!_TYPE_WORKReady) { _TYPE_WORKContent = SGetField<int>(LocalBridgeClazz, "TYPE_WORK"); _TYPE_WORKReady = true; } return _TYPE_WORKContent; } }
                private static int _TYPE_WORKContent = default;
                private static bool _TYPE_WORKReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#CONTENT_ITEM_TYPE"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
                private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
                private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#CUSTOM_PROTOCOL"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String CUSTOM_PROTOCOL { get { if (!_CUSTOM_PROTOCOLReady) { _CUSTOM_PROTOCOLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CUSTOM_PROTOCOL"); _CUSTOM_PROTOCOLReady = true; } return _CUSTOM_PROTOCOLContent; } }
                private static Java.Lang.String _CUSTOM_PROTOCOLContent = default;
                private static bool _CUSTOM_PROTOCOLReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#PROTOCOL"/>
                /// </summary>
                [global::System.Obsolete()]
                public static Java.Lang.String PROTOCOL { get { if (!_PROTOCOLReady) { _PROTOCOLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PROTOCOL"); _PROTOCOLReady = true; } return _PROTOCOLContent; } }
                private static Java.Lang.String _PROTOCOLContent = default;
                private static bool _PROTOCOLReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#getProtocolLabelResource(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="int"/></returns>
                [global::System.Obsolete()]
                public static int GetProtocolLabelResource(int arg0)
                {
                    return SExecuteWithSignature<int>(LocalBridgeClazz, "getProtocolLabelResource", "(I)I", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#getTypeLabelResource(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="int"/></returns>
                [global::System.Obsolete()]
                public static int GetTypeLabelResource(int arg0)
                {
                    return SExecuteWithSignature<int>(LocalBridgeClazz, "getTypeLabelResource", "(I)I", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#getProtocolLabel(android.content.res.Resources,int,java.lang.CharSequence)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
                /// <returns><see cref="Java.Lang.CharSequence"/></returns>
                [global::System.Obsolete()]
                public static Java.Lang.CharSequence GetProtocolLabel(Android.Content.Res.Resources arg0, int arg1, Java.Lang.CharSequence arg2)
                {
                    return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "getProtocolLabel", arg0, arg1, arg2);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Im.html#getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
                /// <returns><see cref="Java.Lang.CharSequence"/></returns>
                [global::System.Obsolete()]
                public static Java.Lang.CharSequence GetTypeLabel(Android.Content.Res.Resources arg0, int arg1, Java.Lang.CharSequence arg2)
                {
                    return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "getTypeLabel", arg0, arg1, arg2);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Identity implementation
            public partial class Identity
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Identity.html#CONTENT_ITEM_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
                private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
                private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Identity.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Identity.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Identity.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Identity.html#IDENTITY"/>
                /// </summary>
                public static Java.Lang.String IDENTITY { get { if (!_IDENTITYReady) { _IDENTITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IDENTITY"); _IDENTITYReady = true; } return _IDENTITYContent; } }
                private static Java.Lang.String _IDENTITYContent = default;
                private static bool _IDENTITYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Identity.html#NAMESPACE"/>
                /// </summary>
                public static Java.Lang.String NAMESPACE { get { if (!_NAMESPACEReady) { _NAMESPACEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAMESPACE"); _NAMESPACEReady = true; } return _NAMESPACEContent; } }
                private static Java.Lang.String _NAMESPACEContent = default;
                private static bool _NAMESPACEReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region GroupMembership implementation
            public partial class GroupMembership
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.GroupMembership.html#CONTENT_ITEM_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
                private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
                private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.GroupMembership.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.GroupMembership.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.GroupMembership.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.GroupMembership.html#GROUP_ROW_ID"/>
                /// </summary>
                public static Java.Lang.String GROUP_ROW_ID { get { if (!_GROUP_ROW_IDReady) { _GROUP_ROW_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GROUP_ROW_ID"); _GROUP_ROW_IDReady = true; } return _GROUP_ROW_IDContent; } }
                private static Java.Lang.String _GROUP_ROW_IDContent = default;
                private static bool _GROUP_ROW_IDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.GroupMembership.html#GROUP_SOURCE_ID"/>
                /// </summary>
                public static Java.Lang.String GROUP_SOURCE_ID { get { if (!_GROUP_SOURCE_IDReady) { _GROUP_SOURCE_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GROUP_SOURCE_ID"); _GROUP_SOURCE_IDReady = true; } return _GROUP_SOURCE_IDContent; } }
                private static Java.Lang.String _GROUP_SOURCE_IDContent = default;
                private static bool _GROUP_SOURCE_IDReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Event implementation
            public partial class Event
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Event.html#TYPE_ANNIVERSARY"/>
                /// </summary>
                public static int TYPE_ANNIVERSARY { get { if (!_TYPE_ANNIVERSARYReady) { _TYPE_ANNIVERSARYContent = SGetField<int>(LocalBridgeClazz, "TYPE_ANNIVERSARY"); _TYPE_ANNIVERSARYReady = true; } return _TYPE_ANNIVERSARYContent; } }
                private static int _TYPE_ANNIVERSARYContent = default;
                private static bool _TYPE_ANNIVERSARYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Event.html#TYPE_BIRTHDAY"/>
                /// </summary>
                public static int TYPE_BIRTHDAY { get { if (!_TYPE_BIRTHDAYReady) { _TYPE_BIRTHDAYContent = SGetField<int>(LocalBridgeClazz, "TYPE_BIRTHDAY"); _TYPE_BIRTHDAYReady = true; } return _TYPE_BIRTHDAYContent; } }
                private static int _TYPE_BIRTHDAYContent = default;
                private static bool _TYPE_BIRTHDAYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Event.html#TYPE_OTHER"/>
                /// </summary>
                public static int TYPE_OTHER { get { if (!_TYPE_OTHERReady) { _TYPE_OTHERContent = SGetField<int>(LocalBridgeClazz, "TYPE_OTHER"); _TYPE_OTHERReady = true; } return _TYPE_OTHERContent; } }
                private static int _TYPE_OTHERContent = default;
                private static bool _TYPE_OTHERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Event.html#CONTENT_ITEM_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
                private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
                private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Event.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Event.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Event.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Event.html#START_DATE"/>
                /// </summary>
                public static Java.Lang.String START_DATE { get { if (!_START_DATEReady) { _START_DATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "START_DATE"); _START_DATEReady = true; } return _START_DATEContent; } }
                private static Java.Lang.String _START_DATEContent = default;
                private static bool _START_DATEReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Event.html#getTypeResource(java.lang.Integer)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Java.Lang.Integer"/></param>
                /// <returns><see cref="int"/></returns>
                public static int GetTypeResource(Java.Lang.Integer arg0)
                {
                    return SExecuteWithSignature<int>(LocalBridgeClazz, "getTypeResource", "(Ljava/lang/Integer;)I", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Event.html#getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
                /// <returns><see cref="Java.Lang.CharSequence"/></returns>
                public static Java.Lang.CharSequence GetTypeLabel(Android.Content.Res.Resources arg0, int arg1, Java.Lang.CharSequence arg2)
                {
                    return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "getTypeLabel", arg0, arg1, arg2);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Email implementation
            public partial class Email
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#CONTENT_FILTER_URI"/>
                /// </summary>
                public static Android.Net.Uri CONTENT_FILTER_URI { get { if (!_CONTENT_FILTER_URIReady) { _CONTENT_FILTER_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_FILTER_URI"); _CONTENT_FILTER_URIReady = true; } return _CONTENT_FILTER_URIContent; } }
                private static Android.Net.Uri _CONTENT_FILTER_URIContent = default;
                private static bool _CONTENT_FILTER_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#CONTENT_LOOKUP_URI"/>
                /// </summary>
                public static Android.Net.Uri CONTENT_LOOKUP_URI { get { if (!_CONTENT_LOOKUP_URIReady) { _CONTENT_LOOKUP_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_LOOKUP_URI"); _CONTENT_LOOKUP_URIReady = true; } return _CONTENT_LOOKUP_URIContent; } }
                private static Android.Net.Uri _CONTENT_LOOKUP_URIContent = default;
                private static bool _CONTENT_LOOKUP_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
                private static Android.Net.Uri _CONTENT_URIContent = default;
                private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#ENTERPRISE_CONTENT_FILTER_URI"/>
                /// </summary>
                public static Android.Net.Uri ENTERPRISE_CONTENT_FILTER_URI { get { if (!_ENTERPRISE_CONTENT_FILTER_URIReady) { _ENTERPRISE_CONTENT_FILTER_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "ENTERPRISE_CONTENT_FILTER_URI"); _ENTERPRISE_CONTENT_FILTER_URIReady = true; } return _ENTERPRISE_CONTENT_FILTER_URIContent; } }
                private static Android.Net.Uri _ENTERPRISE_CONTENT_FILTER_URIContent = default;
                private static bool _ENTERPRISE_CONTENT_FILTER_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#ENTERPRISE_CONTENT_LOOKUP_URI"/>
                /// </summary>
                public static Android.Net.Uri ENTERPRISE_CONTENT_LOOKUP_URI { get { if (!_ENTERPRISE_CONTENT_LOOKUP_URIReady) { _ENTERPRISE_CONTENT_LOOKUP_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "ENTERPRISE_CONTENT_LOOKUP_URI"); _ENTERPRISE_CONTENT_LOOKUP_URIReady = true; } return _ENTERPRISE_CONTENT_LOOKUP_URIContent; } }
                private static Android.Net.Uri _ENTERPRISE_CONTENT_LOOKUP_URIContent = default;
                private static bool _ENTERPRISE_CONTENT_LOOKUP_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#TYPE_HOME"/>
                /// </summary>
                public static int TYPE_HOME { get { if (!_TYPE_HOMEReady) { _TYPE_HOMEContent = SGetField<int>(LocalBridgeClazz, "TYPE_HOME"); _TYPE_HOMEReady = true; } return _TYPE_HOMEContent; } }
                private static int _TYPE_HOMEContent = default;
                private static bool _TYPE_HOMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#TYPE_MOBILE"/>
                /// </summary>
                public static int TYPE_MOBILE { get { if (!_TYPE_MOBILEReady) { _TYPE_MOBILEContent = SGetField<int>(LocalBridgeClazz, "TYPE_MOBILE"); _TYPE_MOBILEReady = true; } return _TYPE_MOBILEContent; } }
                private static int _TYPE_MOBILEContent = default;
                private static bool _TYPE_MOBILEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#TYPE_OTHER"/>
                /// </summary>
                public static int TYPE_OTHER { get { if (!_TYPE_OTHERReady) { _TYPE_OTHERContent = SGetField<int>(LocalBridgeClazz, "TYPE_OTHER"); _TYPE_OTHERReady = true; } return _TYPE_OTHERContent; } }
                private static int _TYPE_OTHERContent = default;
                private static bool _TYPE_OTHERReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#TYPE_WORK"/>
                /// </summary>
                public static int TYPE_WORK { get { if (!_TYPE_WORKReady) { _TYPE_WORKContent = SGetField<int>(LocalBridgeClazz, "TYPE_WORK"); _TYPE_WORKReady = true; } return _TYPE_WORKContent; } }
                private static int _TYPE_WORKContent = default;
                private static bool _TYPE_WORKReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#ADDRESS"/>
                /// </summary>
                public static Java.Lang.String ADDRESS { get { if (!_ADDRESSReady) { _ADDRESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ADDRESS"); _ADDRESSReady = true; } return _ADDRESSContent; } }
                private static Java.Lang.String _ADDRESSContent = default;
                private static bool _ADDRESSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#CONTENT_ITEM_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
                private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
                private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#CONTENT_TYPE"/>
                /// </summary>
                public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
                private static Java.Lang.String _CONTENT_TYPEContent = default;
                private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#DISPLAY_NAME"/>
                /// </summary>
                public static Java.Lang.String DISPLAY_NAME { get { if (!_DISPLAY_NAMEReady) { _DISPLAY_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISPLAY_NAME"); _DISPLAY_NAMEReady = true; } return _DISPLAY_NAMEContent; } }
                private static Java.Lang.String _DISPLAY_NAMEContent = default;
                private static bool _DISPLAY_NAMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#getTypeLabelResource(int)"/>
                /// </summary>
                /// <param name="arg0"><see cref="int"/></param>
                /// <returns><see cref="int"/></returns>
                public static int GetTypeLabelResource(int arg0)
                {
                    return SExecuteWithSignature<int>(LocalBridgeClazz, "getTypeLabelResource", "(I)I", arg0);
                }
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Email.html#getTypeLabel(android.content.res.Resources,int,java.lang.CharSequence)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Android.Content.Res.Resources"/></param>
                /// <param name="arg1"><see cref="int"/></param>
                /// <param name="arg2"><see cref="Java.Lang.CharSequence"/></param>
                /// <returns><see cref="Java.Lang.CharSequence"/></returns>
                public static Java.Lang.CharSequence GetTypeLabel(Android.Content.Res.Resources arg0, int arg1, Java.Lang.CharSequence arg2)
                {
                    return SExecute<Java.Lang.CharSequence>(LocalBridgeClazz, "getTypeLabel", arg0, arg1, arg2);
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Contactables implementation
            public partial class Contactables
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Contactables.html#CONTENT_FILTER_URI"/>
                /// </summary>
                public static Android.Net.Uri CONTENT_FILTER_URI { get { if (!_CONTENT_FILTER_URIReady) { _CONTENT_FILTER_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_FILTER_URI"); _CONTENT_FILTER_URIReady = true; } return _CONTENT_FILTER_URIContent; } }
                private static Android.Net.Uri _CONTENT_FILTER_URIContent = default;
                private static bool _CONTENT_FILTER_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Contactables.html#CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
                private static Android.Net.Uri _CONTENT_URIContent = default;
                private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Contactables.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Contactables.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Contactables.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Contactables.html#VISIBLE_CONTACTS_ONLY"/>
                /// </summary>
                public static Java.Lang.String VISIBLE_CONTACTS_ONLY { get { if (!_VISIBLE_CONTACTS_ONLYReady) { _VISIBLE_CONTACTS_ONLYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VISIBLE_CONTACTS_ONLY"); _VISIBLE_CONTACTS_ONLYReady = true; } return _VISIBLE_CONTACTS_ONLYContent; } }
                private static Java.Lang.String _VISIBLE_CONTACTS_ONLYContent = default;
                private static bool _VISIBLE_CONTACTS_ONLYReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Callable implementation
            public partial class Callable
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Callable.html#CONTENT_FILTER_URI"/>
                /// </summary>
                public static Android.Net.Uri CONTENT_FILTER_URI { get { if (!_CONTENT_FILTER_URIReady) { _CONTENT_FILTER_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_FILTER_URI"); _CONTENT_FILTER_URIReady = true; } return _CONTENT_FILTER_URIContent; } }
                private static Android.Net.Uri _CONTENT_FILTER_URIContent = default;
                private static bool _CONTENT_FILTER_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Callable.html#CONTENT_URI"/>
                /// </summary>
                public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
                private static Android.Net.Uri _CONTENT_URIContent = default;
                private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Callable.html#ENTERPRISE_CONTENT_FILTER_URI"/>
                /// </summary>
                public static Android.Net.Uri ENTERPRISE_CONTENT_FILTER_URI { get { if (!_ENTERPRISE_CONTENT_FILTER_URIReady) { _ENTERPRISE_CONTENT_FILTER_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "ENTERPRISE_CONTENT_FILTER_URI"); _ENTERPRISE_CONTENT_FILTER_URIReady = true; } return _ENTERPRISE_CONTENT_FILTER_URIContent; } }
                private static Android.Net.Uri _ENTERPRISE_CONTENT_FILTER_URIContent = default;
                private static bool _ENTERPRISE_CONTENT_FILTER_URIReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Callable.html#EXTRA_ADDRESS_BOOK_INDEX"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Callable.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Callable.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
                private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
                private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region BaseTypes implementation
            public partial class BaseTypes
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.BaseTypes.html#TYPE_CUSTOM"/>
                /// </summary>
                public static int TYPE_CUSTOM { get { if (!_TYPE_CUSTOMReady) { _TYPE_CUSTOMContent = SGetField<int>(LocalBridgeClazz, "TYPE_CUSTOM"); _TYPE_CUSTOMReady = true; } return _TYPE_CUSTOMContent; } }
                private static int _TYPE_CUSTOMContent = default;
                private static bool _TYPE_CUSTOMReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Contacts implementation
        public partial class Contacts : Android.Provider.IBaseColumns
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Provider.ContactsContract.Contacts"/> to <see cref="Android.Provider.BaseColumns"/>
            /// </summary>
            public static implicit operator Android.Provider.BaseColumns(Android.Provider.ContactsContract.Contacts t) => t.Cast<Android.Provider.BaseColumns>();

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#CONTENT_FILTER_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_FILTER_URI { get { if (!_CONTENT_FILTER_URIReady) { _CONTENT_FILTER_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_FILTER_URI"); _CONTENT_FILTER_URIReady = true; } return _CONTENT_FILTER_URIContent; } }
            private static Android.Net.Uri _CONTENT_FILTER_URIContent = default;
            private static bool _CONTENT_FILTER_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#CONTENT_FREQUENT_URI"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Net.Uri CONTENT_FREQUENT_URI { get { if (!_CONTENT_FREQUENT_URIReady) { _CONTENT_FREQUENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_FREQUENT_URI"); _CONTENT_FREQUENT_URIReady = true; } return _CONTENT_FREQUENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_FREQUENT_URIContent = default;
            private static bool _CONTENT_FREQUENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#CONTENT_GROUP_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_GROUP_URI { get { if (!_CONTENT_GROUP_URIReady) { _CONTENT_GROUP_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_GROUP_URI"); _CONTENT_GROUP_URIReady = true; } return _CONTENT_GROUP_URIContent; } }
            private static Android.Net.Uri _CONTENT_GROUP_URIContent = default;
            private static bool _CONTENT_GROUP_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#CONTENT_LOOKUP_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_LOOKUP_URI { get { if (!_CONTENT_LOOKUP_URIReady) { _CONTENT_LOOKUP_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_LOOKUP_URI"); _CONTENT_LOOKUP_URIReady = true; } return _CONTENT_LOOKUP_URIContent; } }
            private static Android.Net.Uri _CONTENT_LOOKUP_URIContent = default;
            private static bool _CONTENT_LOOKUP_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#CONTENT_MULTI_VCARD_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_MULTI_VCARD_URI { get { if (!_CONTENT_MULTI_VCARD_URIReady) { _CONTENT_MULTI_VCARD_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_MULTI_VCARD_URI"); _CONTENT_MULTI_VCARD_URIReady = true; } return _CONTENT_MULTI_VCARD_URIContent; } }
            private static Android.Net.Uri _CONTENT_MULTI_VCARD_URIContent = default;
            private static bool _CONTENT_MULTI_VCARD_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#CONTENT_STREQUENT_FILTER_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_STREQUENT_FILTER_URI { get { if (!_CONTENT_STREQUENT_FILTER_URIReady) { _CONTENT_STREQUENT_FILTER_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_STREQUENT_FILTER_URI"); _CONTENT_STREQUENT_FILTER_URIReady = true; } return _CONTENT_STREQUENT_FILTER_URIContent; } }
            private static Android.Net.Uri _CONTENT_STREQUENT_FILTER_URIContent = default;
            private static bool _CONTENT_STREQUENT_FILTER_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#CONTENT_STREQUENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_STREQUENT_URI { get { if (!_CONTENT_STREQUENT_URIReady) { _CONTENT_STREQUENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_STREQUENT_URI"); _CONTENT_STREQUENT_URIReady = true; } return _CONTENT_STREQUENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_STREQUENT_URIContent = default;
            private static bool _CONTENT_STREQUENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#CONTENT_VCARD_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_VCARD_URI { get { if (!_CONTENT_VCARD_URIReady) { _CONTENT_VCARD_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_VCARD_URI"); _CONTENT_VCARD_URIReady = true; } return _CONTENT_VCARD_URIContent; } }
            private static Android.Net.Uri _CONTENT_VCARD_URIContent = default;
            private static bool _CONTENT_VCARD_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#ENTERPRISE_CONTENT_FILTER_URI"/>
            /// </summary>
            public static Android.Net.Uri ENTERPRISE_CONTENT_FILTER_URI { get { if (!_ENTERPRISE_CONTENT_FILTER_URIReady) { _ENTERPRISE_CONTENT_FILTER_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "ENTERPRISE_CONTENT_FILTER_URI"); _ENTERPRISE_CONTENT_FILTER_URIReady = true; } return _ENTERPRISE_CONTENT_FILTER_URIContent; } }
            private static Android.Net.Uri _ENTERPRISE_CONTENT_FILTER_URIContent = default;
            private static bool _ENTERPRISE_CONTENT_FILTER_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#ENTERPRISE_CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri ENTERPRISE_CONTENT_URI { get { if (!_ENTERPRISE_CONTENT_URIReady) { _ENTERPRISE_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "ENTERPRISE_CONTENT_URI"); _ENTERPRISE_CONTENT_URIReady = true; } return _ENTERPRISE_CONTENT_URIContent; } }
            private static Android.Net.Uri _ENTERPRISE_CONTENT_URIContent = default;
            private static bool _ENTERPRISE_CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#CONTENT_ITEM_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
            private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
            private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#CONTENT_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
            private static Java.Lang.String _CONTENT_TYPEContent = default;
            private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#CONTENT_VCARD_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_VCARD_TYPE { get { if (!_CONTENT_VCARD_TYPEReady) { _CONTENT_VCARD_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_VCARD_TYPE"); _CONTENT_VCARD_TYPEReady = true; } return _CONTENT_VCARD_TYPEContent; } }
            private static Java.Lang.String _CONTENT_VCARD_TYPEContent = default;
            private static bool _CONTENT_VCARD_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#EXTRA_ADDRESS_BOOK_INDEX"/>
            /// </summary>
            public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
            private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
            private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
            /// </summary>
            public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
            private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
            private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
            /// </summary>
            public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
            private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
            private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#QUERY_PARAMETER_VCARD_NO_PHOTO"/>
            /// </summary>
            public static Java.Lang.String QUERY_PARAMETER_VCARD_NO_PHOTO { get { if (!_QUERY_PARAMETER_VCARD_NO_PHOTOReady) { _QUERY_PARAMETER_VCARD_NO_PHOTOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_PARAMETER_VCARD_NO_PHOTO"); _QUERY_PARAMETER_VCARD_NO_PHOTOReady = true; } return _QUERY_PARAMETER_VCARD_NO_PHOTOContent; } }
            private static Java.Lang.String _QUERY_PARAMETER_VCARD_NO_PHOTOContent = default;
            private static bool _QUERY_PARAMETER_VCARD_NO_PHOTOReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#getLookupUri(android.content.ContentResolver,android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public static Android.Net.Uri GetLookupUri(Android.Content.ContentResolver arg0, Android.Net.Uri arg1)
            {
                return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getLookupUri", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#getLookupUri(long,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <param name="arg1"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public static Android.Net.Uri GetLookupUri(long arg0, Java.Lang.String arg1)
            {
                return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getLookupUri", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#lookupContact(android.content.ContentResolver,android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public static Android.Net.Uri LookupContact(Android.Content.ContentResolver arg0, Android.Net.Uri arg1)
            {
                return SExecute<Android.Net.Uri>(LocalBridgeClazz, "lookupContact", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#isEnterpriseContactId(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool IsEnterpriseContactId(long arg0)
            {
                return SExecuteWithSignature<bool>(LocalBridgeClazz, "isEnterpriseContactId", "(J)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri,boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
            /// <param name="arg2"><see cref="bool"/></param>
            /// <returns><see cref="Java.Io.InputStream"/></returns>
            public static Java.Io.InputStream OpenContactPhotoInputStream(Android.Content.ContentResolver arg0, Android.Net.Uri arg1, bool arg2)
            {
                return SExecute<Java.Io.InputStream>(LocalBridgeClazz, "openContactPhotoInputStream", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#openContactPhotoInputStream(android.content.ContentResolver,android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
            /// <returns><see cref="Java.Io.InputStream"/></returns>
            public static Java.Io.InputStream OpenContactPhotoInputStream(Android.Content.ContentResolver arg0, Android.Net.Uri arg1)
            {
                return SExecute<Java.Io.InputStream>(LocalBridgeClazz, "openContactPhotoInputStream", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.html#markAsContacted(android.content.ContentResolver,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            [global::System.Obsolete()]
            public static void MarkAsContacted(Android.Content.ContentResolver arg0, long arg1)
            {
                SExecute(LocalBridgeClazz, "markAsContacted", arg0, arg1);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes
            #region Photo implementation
            public partial class Photo : Android.Provider.IBaseColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators
                /// <summary>
                /// Converter from <see cref="Android.Provider.ContactsContract.Contacts.Photo"/> to <see cref="Android.Provider.BaseColumns"/>
                /// </summary>
                public static implicit operator Android.Provider.BaseColumns(Android.Provider.ContactsContract.Contacts.Photo t) => t.Cast<Android.Provider.BaseColumns>();

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Photo.html#CONTENT_DIRECTORY"/>
                /// </summary>
                public static Java.Lang.String CONTENT_DIRECTORY { get { if (!_CONTENT_DIRECTORYReady) { _CONTENT_DIRECTORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_DIRECTORY"); _CONTENT_DIRECTORYReady = true; } return _CONTENT_DIRECTORYContent; } }
                private static Java.Lang.String _CONTENT_DIRECTORYContent = default;
                private static bool _CONTENT_DIRECTORYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Photo.html#DISPLAY_PHOTO"/>
                /// </summary>
                public static Java.Lang.String DISPLAY_PHOTO { get { if (!_DISPLAY_PHOTOReady) { _DISPLAY_PHOTOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISPLAY_PHOTO"); _DISPLAY_PHOTOReady = true; } return _DISPLAY_PHOTOContent; } }
                private static Java.Lang.String _DISPLAY_PHOTOContent = default;
                private static bool _DISPLAY_PHOTOReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Photo.html#PHOTO"/>
                /// </summary>
                public static Java.Lang.String PHOTO { get { if (!_PHOTOReady) { _PHOTOContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHOTO"); _PHOTOReady = true; } return _PHOTOContent; } }
                private static Java.Lang.String _PHOTOContent = default;
                private static bool _PHOTOReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Photo.html#PHOTO_FILE_ID"/>
                /// </summary>
                public static Java.Lang.String PHOTO_FILE_ID { get { if (!_PHOTO_FILE_IDReady) { _PHOTO_FILE_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHOTO_FILE_ID"); _PHOTO_FILE_IDReady = true; } return _PHOTO_FILE_IDContent; } }
                private static Java.Lang.String _PHOTO_FILE_IDContent = default;
                private static bool _PHOTO_FILE_IDReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Entity implementation
            public partial class Entity : Android.Provider.IBaseColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators
                /// <summary>
                /// Converter from <see cref="Android.Provider.ContactsContract.Contacts.Entity"/> to <see cref="Android.Provider.BaseColumns"/>
                /// </summary>
                public static implicit operator Android.Provider.BaseColumns(Android.Provider.ContactsContract.Contacts.Entity t) => t.Cast<Android.Provider.BaseColumns>();

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Entity.html#CONTENT_DIRECTORY"/>
                /// </summary>
                public static Java.Lang.String CONTENT_DIRECTORY { get { if (!_CONTENT_DIRECTORYReady) { _CONTENT_DIRECTORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_DIRECTORY"); _CONTENT_DIRECTORYReady = true; } return _CONTENT_DIRECTORYContent; } }
                private static Java.Lang.String _CONTENT_DIRECTORYContent = default;
                private static bool _CONTENT_DIRECTORYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Entity.html#DATA_ID"/>
                /// </summary>
                public static Java.Lang.String DATA_ID { get { if (!_DATA_IDReady) { _DATA_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATA_ID"); _DATA_IDReady = true; } return _DATA_IDContent; } }
                private static Java.Lang.String _DATA_IDContent = default;
                private static bool _DATA_IDReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Entity.html#RAW_CONTACT_ID"/>
                /// </summary>
                public static Java.Lang.String RAW_CONTACT_ID { get { if (!_RAW_CONTACT_IDReady) { _RAW_CONTACT_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RAW_CONTACT_ID"); _RAW_CONTACT_IDReady = true; } return _RAW_CONTACT_IDContent; } }
                private static Java.Lang.String _RAW_CONTACT_IDContent = default;
                private static bool _RAW_CONTACT_IDReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Data implementation
            public partial class Data : Android.Provider.IBaseColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators
                /// <summary>
                /// Converter from <see cref="Android.Provider.ContactsContract.Contacts.Data"/> to <see cref="Android.Provider.BaseColumns"/>
                /// </summary>
                public static implicit operator Android.Provider.BaseColumns(Android.Provider.ContactsContract.Contacts.Data t) => t.Cast<Android.Provider.BaseColumns>();

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.Data.html#CONTENT_DIRECTORY"/>
                /// </summary>
                public static Java.Lang.String CONTENT_DIRECTORY { get { if (!_CONTENT_DIRECTORYReady) { _CONTENT_DIRECTORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_DIRECTORY"); _CONTENT_DIRECTORYReady = true; } return _CONTENT_DIRECTORYContent; } }
                private static Java.Lang.String _CONTENT_DIRECTORYContent = default;
                private static bool _CONTENT_DIRECTORYReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region AggregationSuggestions implementation
            public partial class AggregationSuggestions : Android.Provider.IBaseColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators
                /// <summary>
                /// Converter from <see cref="Android.Provider.ContactsContract.Contacts.AggregationSuggestions"/> to <see cref="Android.Provider.BaseColumns"/>
                /// </summary>
                public static implicit operator Android.Provider.BaseColumns(Android.Provider.ContactsContract.Contacts.AggregationSuggestions t) => t.Cast<Android.Provider.BaseColumns>();

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.AggregationSuggestions.html#CONTENT_DIRECTORY"/>
                /// </summary>
                public static Java.Lang.String CONTENT_DIRECTORY { get { if (!_CONTENT_DIRECTORYReady) { _CONTENT_DIRECTORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_DIRECTORY"); _CONTENT_DIRECTORYReady = true; } return _CONTENT_DIRECTORYContent; } }
                private static Java.Lang.String _CONTENT_DIRECTORYContent = default;
                private static bool _CONTENT_DIRECTORYReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes
                #region Builder implementation
                public partial class Builder
                {
                    #region Constructors

                    #endregion

                    #region Class/Interface conversion operators

                    #endregion

                    #region Fields

                    #endregion

                    #region Static methods

                    #endregion

                    #region Instance methods
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.AggregationSuggestions.Builder.html#build()"/>
                    /// </summary>
                    /// <returns><see cref="Android.Net.Uri"/></returns>
                    public Android.Net.Uri Build()
                    {
                        return IExecuteWithSignature<Android.Net.Uri>("build", "()Landroid/net/Uri;");
                    }
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.AggregationSuggestions.Builder.html#addNameParameter(java.lang.String)"/>
                    /// </summary>
                    /// <param name="arg0"><see cref="Java.Lang.String"/></param>
                    /// <returns><see cref="Android.Provider.ContactsContract.Contacts.AggregationSuggestions.Builder"/></returns>
                    public Android.Provider.ContactsContract.Contacts.AggregationSuggestions.Builder AddNameParameter(Java.Lang.String arg0)
                    {
                        return IExecuteWithSignature<Android.Provider.ContactsContract.Contacts.AggregationSuggestions.Builder>("addNameParameter", "(Ljava/lang/String;)Landroid/provider/ContactsContract$Contacts$AggregationSuggestions$Builder;", arg0);
                    }
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.AggregationSuggestions.Builder.html#setContactId(long)"/>
                    /// </summary>
                    /// <param name="arg0"><see cref="long"/></param>
                    /// <returns><see cref="Android.Provider.ContactsContract.Contacts.AggregationSuggestions.Builder"/></returns>
                    public Android.Provider.ContactsContract.Contacts.AggregationSuggestions.Builder SetContactId(long arg0)
                    {
                        return IExecuteWithSignature<Android.Provider.ContactsContract.Contacts.AggregationSuggestions.Builder>("setContactId", "(J)Landroid/provider/ContactsContract$Contacts$AggregationSuggestions$Builder;", arg0);
                    }
                    /// <summary>
                    /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Contacts.AggregationSuggestions.Builder.html#setLimit(int)"/>
                    /// </summary>
                    /// <param name="arg0"><see cref="int"/></param>
                    /// <returns><see cref="Android.Provider.ContactsContract.Contacts.AggregationSuggestions.Builder"/></returns>
                    public Android.Provider.ContactsContract.Contacts.AggregationSuggestions.Builder SetLimit(int arg0)
                    {
                        return IExecuteWithSignature<Android.Provider.ContactsContract.Contacts.AggregationSuggestions.Builder>("setLimit", "(I)Landroid/provider/ContactsContract$Contacts$AggregationSuggestions$Builder;", arg0);
                    }

                    #endregion

                    #region Nested classes

                    #endregion

                    // TODO: complete the class
                }
                #endregion

            
                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Data implementation
        public partial class Data
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Data.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Data.html#CONTENT_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
            private static Java.Lang.String _CONTENT_TYPEContent = default;
            private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Data.html#EXTRA_ADDRESS_BOOK_INDEX"/>
            /// </summary>
            public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX { get { if (!_EXTRA_ADDRESS_BOOK_INDEXReady) { _EXTRA_ADDRESS_BOOK_INDEXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX"); _EXTRA_ADDRESS_BOOK_INDEXReady = true; } return _EXTRA_ADDRESS_BOOK_INDEXContent; } }
            private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEXContent = default;
            private static bool _EXTRA_ADDRESS_BOOK_INDEXReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Data.html#EXTRA_ADDRESS_BOOK_INDEX_COUNTS"/>
            /// </summary>
            public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_COUNTS { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady) { _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_COUNTS"); _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent; } }
            private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_COUNTSContent = default;
            private static bool _EXTRA_ADDRESS_BOOK_INDEX_COUNTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Data.html#EXTRA_ADDRESS_BOOK_INDEX_TITLES"/>
            /// </summary>
            public static Java.Lang.String EXTRA_ADDRESS_BOOK_INDEX_TITLES { get { if (!_EXTRA_ADDRESS_BOOK_INDEX_TITLESReady) { _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ADDRESS_BOOK_INDEX_TITLES"); _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = true; } return _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent; } }
            private static Java.Lang.String _EXTRA_ADDRESS_BOOK_INDEX_TITLESContent = default;
            private static bool _EXTRA_ADDRESS_BOOK_INDEX_TITLESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Data.html#VISIBLE_CONTACTS_ONLY"/>
            /// </summary>
            public static Java.Lang.String VISIBLE_CONTACTS_ONLY { get { if (!_VISIBLE_CONTACTS_ONLYReady) { _VISIBLE_CONTACTS_ONLYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VISIBLE_CONTACTS_ONLY"); _VISIBLE_CONTACTS_ONLYReady = true; } return _VISIBLE_CONTACTS_ONLYContent; } }
            private static Java.Lang.String _VISIBLE_CONTACTS_ONLYContent = default;
            private static bool _VISIBLE_CONTACTS_ONLYReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Data.html#getContactLookupUri(android.content.ContentResolver,android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public static Android.Net.Uri GetContactLookupUri(Android.Content.ContentResolver arg0, Android.Net.Uri arg1)
            {
                return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getContactLookupUri", arg0, arg1);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DataUsageFeedback implementation
        public partial class DataUsageFeedback
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DataUsageFeedback.html#DELETE_USAGE_URI"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Net.Uri DELETE_USAGE_URI { get { if (!_DELETE_USAGE_URIReady) { _DELETE_USAGE_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "DELETE_USAGE_URI"); _DELETE_USAGE_URIReady = true; } return _DELETE_USAGE_URIContent; } }
            private static Android.Net.Uri _DELETE_USAGE_URIContent = default;
            private static bool _DELETE_USAGE_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DataUsageFeedback.html#FEEDBACK_URI"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Android.Net.Uri FEEDBACK_URI { get { if (!_FEEDBACK_URIReady) { _FEEDBACK_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "FEEDBACK_URI"); _FEEDBACK_URIReady = true; } return _FEEDBACK_URIContent; } }
            private static Android.Net.Uri _FEEDBACK_URIContent = default;
            private static bool _FEEDBACK_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DataUsageFeedback.html#USAGE_TYPE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String USAGE_TYPE { get { if (!_USAGE_TYPEReady) { _USAGE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USAGE_TYPE"); _USAGE_TYPEReady = true; } return _USAGE_TYPEContent; } }
            private static Java.Lang.String _USAGE_TYPEContent = default;
            private static bool _USAGE_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DataUsageFeedback.html#USAGE_TYPE_CALL"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String USAGE_TYPE_CALL { get { if (!_USAGE_TYPE_CALLReady) { _USAGE_TYPE_CALLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USAGE_TYPE_CALL"); _USAGE_TYPE_CALLReady = true; } return _USAGE_TYPE_CALLContent; } }
            private static Java.Lang.String _USAGE_TYPE_CALLContent = default;
            private static bool _USAGE_TYPE_CALLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DataUsageFeedback.html#USAGE_TYPE_LONG_TEXT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String USAGE_TYPE_LONG_TEXT { get { if (!_USAGE_TYPE_LONG_TEXTReady) { _USAGE_TYPE_LONG_TEXTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USAGE_TYPE_LONG_TEXT"); _USAGE_TYPE_LONG_TEXTReady = true; } return _USAGE_TYPE_LONG_TEXTContent; } }
            private static Java.Lang.String _USAGE_TYPE_LONG_TEXTContent = default;
            private static bool _USAGE_TYPE_LONG_TEXTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DataUsageFeedback.html#USAGE_TYPE_SHORT_TEXT"/>
            /// </summary>
            [global::System.Obsolete()]
            public static Java.Lang.String USAGE_TYPE_SHORT_TEXT { get { if (!_USAGE_TYPE_SHORT_TEXTReady) { _USAGE_TYPE_SHORT_TEXTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "USAGE_TYPE_SHORT_TEXT"); _USAGE_TYPE_SHORT_TEXTReady = true; } return _USAGE_TYPE_SHORT_TEXTContent; } }
            private static Java.Lang.String _USAGE_TYPE_SHORT_TEXTContent = default;
            private static bool _USAGE_TYPE_SHORT_TEXTReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DeletedContacts implementation
        public partial class DeletedContacts
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DeletedContacts.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DeletedContacts.html#DAYS_KEPT_MILLISECONDS"/>
            /// </summary>
            public static long DAYS_KEPT_MILLISECONDS { get { if (!_DAYS_KEPT_MILLISECONDSReady) { _DAYS_KEPT_MILLISECONDSContent = SGetField<long>(LocalBridgeClazz, "DAYS_KEPT_MILLISECONDS"); _DAYS_KEPT_MILLISECONDSReady = true; } return _DAYS_KEPT_MILLISECONDSContent; } }
            private static long _DAYS_KEPT_MILLISECONDSContent = default;
            private static bool _DAYS_KEPT_MILLISECONDSReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Directory implementation
        public partial class Directory
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#ENTERPRISE_CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri ENTERPRISE_CONTENT_URI { get { if (!_ENTERPRISE_CONTENT_URIReady) { _ENTERPRISE_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "ENTERPRISE_CONTENT_URI"); _ENTERPRISE_CONTENT_URIReady = true; } return _ENTERPRISE_CONTENT_URIContent; } }
            private static Android.Net.Uri _ENTERPRISE_CONTENT_URIContent = default;
            private static bool _ENTERPRISE_CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#EXPORT_SUPPORT_ANY_ACCOUNT"/>
            /// </summary>
            public static int EXPORT_SUPPORT_ANY_ACCOUNT { get { if (!_EXPORT_SUPPORT_ANY_ACCOUNTReady) { _EXPORT_SUPPORT_ANY_ACCOUNTContent = SGetField<int>(LocalBridgeClazz, "EXPORT_SUPPORT_ANY_ACCOUNT"); _EXPORT_SUPPORT_ANY_ACCOUNTReady = true; } return _EXPORT_SUPPORT_ANY_ACCOUNTContent; } }
            private static int _EXPORT_SUPPORT_ANY_ACCOUNTContent = default;
            private static bool _EXPORT_SUPPORT_ANY_ACCOUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#EXPORT_SUPPORT_NONE"/>
            /// </summary>
            public static int EXPORT_SUPPORT_NONE { get { if (!_EXPORT_SUPPORT_NONEReady) { _EXPORT_SUPPORT_NONEContent = SGetField<int>(LocalBridgeClazz, "EXPORT_SUPPORT_NONE"); _EXPORT_SUPPORT_NONEReady = true; } return _EXPORT_SUPPORT_NONEContent; } }
            private static int _EXPORT_SUPPORT_NONEContent = default;
            private static bool _EXPORT_SUPPORT_NONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#EXPORT_SUPPORT_SAME_ACCOUNT_ONLY"/>
            /// </summary>
            public static int EXPORT_SUPPORT_SAME_ACCOUNT_ONLY { get { if (!_EXPORT_SUPPORT_SAME_ACCOUNT_ONLYReady) { _EXPORT_SUPPORT_SAME_ACCOUNT_ONLYContent = SGetField<int>(LocalBridgeClazz, "EXPORT_SUPPORT_SAME_ACCOUNT_ONLY"); _EXPORT_SUPPORT_SAME_ACCOUNT_ONLYReady = true; } return _EXPORT_SUPPORT_SAME_ACCOUNT_ONLYContent; } }
            private static int _EXPORT_SUPPORT_SAME_ACCOUNT_ONLYContent = default;
            private static bool _EXPORT_SUPPORT_SAME_ACCOUNT_ONLYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#PHOTO_SUPPORT_FULL"/>
            /// </summary>
            public static int PHOTO_SUPPORT_FULL { get { if (!_PHOTO_SUPPORT_FULLReady) { _PHOTO_SUPPORT_FULLContent = SGetField<int>(LocalBridgeClazz, "PHOTO_SUPPORT_FULL"); _PHOTO_SUPPORT_FULLReady = true; } return _PHOTO_SUPPORT_FULLContent; } }
            private static int _PHOTO_SUPPORT_FULLContent = default;
            private static bool _PHOTO_SUPPORT_FULLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#PHOTO_SUPPORT_FULL_SIZE_ONLY"/>
            /// </summary>
            public static int PHOTO_SUPPORT_FULL_SIZE_ONLY { get { if (!_PHOTO_SUPPORT_FULL_SIZE_ONLYReady) { _PHOTO_SUPPORT_FULL_SIZE_ONLYContent = SGetField<int>(LocalBridgeClazz, "PHOTO_SUPPORT_FULL_SIZE_ONLY"); _PHOTO_SUPPORT_FULL_SIZE_ONLYReady = true; } return _PHOTO_SUPPORT_FULL_SIZE_ONLYContent; } }
            private static int _PHOTO_SUPPORT_FULL_SIZE_ONLYContent = default;
            private static bool _PHOTO_SUPPORT_FULL_SIZE_ONLYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#PHOTO_SUPPORT_NONE"/>
            /// </summary>
            public static int PHOTO_SUPPORT_NONE { get { if (!_PHOTO_SUPPORT_NONEReady) { _PHOTO_SUPPORT_NONEContent = SGetField<int>(LocalBridgeClazz, "PHOTO_SUPPORT_NONE"); _PHOTO_SUPPORT_NONEReady = true; } return _PHOTO_SUPPORT_NONEContent; } }
            private static int _PHOTO_SUPPORT_NONEContent = default;
            private static bool _PHOTO_SUPPORT_NONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#PHOTO_SUPPORT_THUMBNAIL_ONLY"/>
            /// </summary>
            public static int PHOTO_SUPPORT_THUMBNAIL_ONLY { get { if (!_PHOTO_SUPPORT_THUMBNAIL_ONLYReady) { _PHOTO_SUPPORT_THUMBNAIL_ONLYContent = SGetField<int>(LocalBridgeClazz, "PHOTO_SUPPORT_THUMBNAIL_ONLY"); _PHOTO_SUPPORT_THUMBNAIL_ONLYReady = true; } return _PHOTO_SUPPORT_THUMBNAIL_ONLYContent; } }
            private static int _PHOTO_SUPPORT_THUMBNAIL_ONLYContent = default;
            private static bool _PHOTO_SUPPORT_THUMBNAIL_ONLYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#SHORTCUT_SUPPORT_DATA_ITEMS_ONLY"/>
            /// </summary>
            public static int SHORTCUT_SUPPORT_DATA_ITEMS_ONLY { get { if (!_SHORTCUT_SUPPORT_DATA_ITEMS_ONLYReady) { _SHORTCUT_SUPPORT_DATA_ITEMS_ONLYContent = SGetField<int>(LocalBridgeClazz, "SHORTCUT_SUPPORT_DATA_ITEMS_ONLY"); _SHORTCUT_SUPPORT_DATA_ITEMS_ONLYReady = true; } return _SHORTCUT_SUPPORT_DATA_ITEMS_ONLYContent; } }
            private static int _SHORTCUT_SUPPORT_DATA_ITEMS_ONLYContent = default;
            private static bool _SHORTCUT_SUPPORT_DATA_ITEMS_ONLYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#SHORTCUT_SUPPORT_FULL"/>
            /// </summary>
            public static int SHORTCUT_SUPPORT_FULL { get { if (!_SHORTCUT_SUPPORT_FULLReady) { _SHORTCUT_SUPPORT_FULLContent = SGetField<int>(LocalBridgeClazz, "SHORTCUT_SUPPORT_FULL"); _SHORTCUT_SUPPORT_FULLReady = true; } return _SHORTCUT_SUPPORT_FULLContent; } }
            private static int _SHORTCUT_SUPPORT_FULLContent = default;
            private static bool _SHORTCUT_SUPPORT_FULLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#SHORTCUT_SUPPORT_NONE"/>
            /// </summary>
            public static int SHORTCUT_SUPPORT_NONE { get { if (!_SHORTCUT_SUPPORT_NONEReady) { _SHORTCUT_SUPPORT_NONEContent = SGetField<int>(LocalBridgeClazz, "SHORTCUT_SUPPORT_NONE"); _SHORTCUT_SUPPORT_NONEReady = true; } return _SHORTCUT_SUPPORT_NONEContent; } }
            private static int _SHORTCUT_SUPPORT_NONEContent = default;
            private static bool _SHORTCUT_SUPPORT_NONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#ACCOUNT_NAME"/>
            /// </summary>
            public static Java.Lang.String ACCOUNT_NAME { get { if (!_ACCOUNT_NAMEReady) { _ACCOUNT_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCOUNT_NAME"); _ACCOUNT_NAMEReady = true; } return _ACCOUNT_NAMEContent; } }
            private static Java.Lang.String _ACCOUNT_NAMEContent = default;
            private static bool _ACCOUNT_NAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#ACCOUNT_TYPE"/>
            /// </summary>
            public static Java.Lang.String ACCOUNT_TYPE { get { if (!_ACCOUNT_TYPEReady) { _ACCOUNT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACCOUNT_TYPE"); _ACCOUNT_TYPEReady = true; } return _ACCOUNT_TYPEContent; } }
            private static Java.Lang.String _ACCOUNT_TYPEContent = default;
            private static bool _ACCOUNT_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#CALLER_PACKAGE_PARAM_KEY"/>
            /// </summary>
            public static Java.Lang.String CALLER_PACKAGE_PARAM_KEY { get { if (!_CALLER_PACKAGE_PARAM_KEYReady) { _CALLER_PACKAGE_PARAM_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CALLER_PACKAGE_PARAM_KEY"); _CALLER_PACKAGE_PARAM_KEYReady = true; } return _CALLER_PACKAGE_PARAM_KEYContent; } }
            private static Java.Lang.String _CALLER_PACKAGE_PARAM_KEYContent = default;
            private static bool _CALLER_PACKAGE_PARAM_KEYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#CONTENT_ITEM_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
            private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
            private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#CONTENT_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
            private static Java.Lang.String _CONTENT_TYPEContent = default;
            private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#DIRECTORY_AUTHORITY"/>
            /// </summary>
            public static Java.Lang.String DIRECTORY_AUTHORITY { get { if (!_DIRECTORY_AUTHORITYReady) { _DIRECTORY_AUTHORITYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DIRECTORY_AUTHORITY"); _DIRECTORY_AUTHORITYReady = true; } return _DIRECTORY_AUTHORITYContent; } }
            private static Java.Lang.String _DIRECTORY_AUTHORITYContent = default;
            private static bool _DIRECTORY_AUTHORITYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#DISPLAY_NAME"/>
            /// </summary>
            public static Java.Lang.String DISPLAY_NAME { get { if (!_DISPLAY_NAMEReady) { _DISPLAY_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISPLAY_NAME"); _DISPLAY_NAMEReady = true; } return _DISPLAY_NAMEContent; } }
            private static Java.Lang.String _DISPLAY_NAMEContent = default;
            private static bool _DISPLAY_NAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#EXPORT_SUPPORT"/>
            /// </summary>
            public static Java.Lang.String EXPORT_SUPPORT { get { if (!_EXPORT_SUPPORTReady) { _EXPORT_SUPPORTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXPORT_SUPPORT"); _EXPORT_SUPPORTReady = true; } return _EXPORT_SUPPORTContent; } }
            private static Java.Lang.String _EXPORT_SUPPORTContent = default;
            private static bool _EXPORT_SUPPORTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#PACKAGE_NAME"/>
            /// </summary>
            public static Java.Lang.String PACKAGE_NAME { get { if (!_PACKAGE_NAMEReady) { _PACKAGE_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PACKAGE_NAME"); _PACKAGE_NAMEReady = true; } return _PACKAGE_NAMEContent; } }
            private static Java.Lang.String _PACKAGE_NAMEContent = default;
            private static bool _PACKAGE_NAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#PHOTO_SUPPORT"/>
            /// </summary>
            public static Java.Lang.String PHOTO_SUPPORT { get { if (!_PHOTO_SUPPORTReady) { _PHOTO_SUPPORTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHOTO_SUPPORT"); _PHOTO_SUPPORTReady = true; } return _PHOTO_SUPPORTContent; } }
            private static Java.Lang.String _PHOTO_SUPPORTContent = default;
            private static bool _PHOTO_SUPPORTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#SHORTCUT_SUPPORT"/>
            /// </summary>
            public static Java.Lang.String SHORTCUT_SUPPORT { get { if (!_SHORTCUT_SUPPORTReady) { _SHORTCUT_SUPPORTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SHORTCUT_SUPPORT"); _SHORTCUT_SUPPORTReady = true; } return _SHORTCUT_SUPPORTContent; } }
            private static Java.Lang.String _SHORTCUT_SUPPORTContent = default;
            private static bool _SHORTCUT_SUPPORTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#TYPE_RESOURCE_ID"/>
            /// </summary>
            public static Java.Lang.String TYPE_RESOURCE_ID { get { if (!_TYPE_RESOURCE_IDReady) { _TYPE_RESOURCE_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TYPE_RESOURCE_ID"); _TYPE_RESOURCE_IDReady = true; } return _TYPE_RESOURCE_IDContent; } }
            private static Java.Lang.String _TYPE_RESOURCE_IDContent = default;
            private static bool _TYPE_RESOURCE_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#DEFAULT"/>
            /// </summary>
            public static long DEFAULT { get { if (!_DEFAULTReady) { _DEFAULTContent = SGetField<long>(LocalBridgeClazz, "DEFAULT"); _DEFAULTReady = true; } return _DEFAULTContent; } }
            private static long _DEFAULTContent = default;
            private static bool _DEFAULTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#ENTERPRISE_DEFAULT"/>
            /// </summary>
            public static long ENTERPRISE_DEFAULT { get { if (!_ENTERPRISE_DEFAULTReady) { _ENTERPRISE_DEFAULTContent = SGetField<long>(LocalBridgeClazz, "ENTERPRISE_DEFAULT"); _ENTERPRISE_DEFAULTReady = true; } return _ENTERPRISE_DEFAULTContent; } }
            private static long _ENTERPRISE_DEFAULTContent = default;
            private static bool _ENTERPRISE_DEFAULTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#ENTERPRISE_LOCAL_INVISIBLE"/>
            /// </summary>
            public static long ENTERPRISE_LOCAL_INVISIBLE { get { if (!_ENTERPRISE_LOCAL_INVISIBLEReady) { _ENTERPRISE_LOCAL_INVISIBLEContent = SGetField<long>(LocalBridgeClazz, "ENTERPRISE_LOCAL_INVISIBLE"); _ENTERPRISE_LOCAL_INVISIBLEReady = true; } return _ENTERPRISE_LOCAL_INVISIBLEContent; } }
            private static long _ENTERPRISE_LOCAL_INVISIBLEContent = default;
            private static bool _ENTERPRISE_LOCAL_INVISIBLEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#LOCAL_INVISIBLE"/>
            /// </summary>
            public static long LOCAL_INVISIBLE { get { if (!_LOCAL_INVISIBLEReady) { _LOCAL_INVISIBLEContent = SGetField<long>(LocalBridgeClazz, "LOCAL_INVISIBLE"); _LOCAL_INVISIBLEReady = true; } return _LOCAL_INVISIBLEContent; } }
            private static long _LOCAL_INVISIBLEContent = default;
            private static bool _LOCAL_INVISIBLEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#isEnterpriseDirectoryId(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool IsEnterpriseDirectoryId(long arg0)
            {
                return SExecuteWithSignature<bool>(LocalBridgeClazz, "isEnterpriseDirectoryId", "(J)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#isRemoteDirectoryId(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool IsRemoteDirectoryId(long arg0)
            {
                return SExecuteWithSignature<bool>(LocalBridgeClazz, "isRemoteDirectoryId", "(J)Z", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Directory.html#notifyDirectoryChange(android.content.ContentResolver)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            public static void NotifyDirectoryChange(Android.Content.ContentResolver arg0)
            {
                SExecuteWithSignature(LocalBridgeClazz, "notifyDirectoryChange", "(Landroid/content/ContentResolver;)V", arg0);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DisplayNameSources implementation
        public partial class DisplayNameSources
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayNameSources.html#EMAIL"/>
            /// </summary>
            public static int EMAIL { get { if (!_EMAILReady) { _EMAILContent = SGetField<int>(LocalBridgeClazz, "EMAIL"); _EMAILReady = true; } return _EMAILContent; } }
            private static int _EMAILContent = default;
            private static bool _EMAILReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayNameSources.html#NICKNAME"/>
            /// </summary>
            public static int NICKNAME { get { if (!_NICKNAMEReady) { _NICKNAMEContent = SGetField<int>(LocalBridgeClazz, "NICKNAME"); _NICKNAMEReady = true; } return _NICKNAMEContent; } }
            private static int _NICKNAMEContent = default;
            private static bool _NICKNAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayNameSources.html#ORGANIZATION"/>
            /// </summary>
            public static int ORGANIZATION { get { if (!_ORGANIZATIONReady) { _ORGANIZATIONContent = SGetField<int>(LocalBridgeClazz, "ORGANIZATION"); _ORGANIZATIONReady = true; } return _ORGANIZATIONContent; } }
            private static int _ORGANIZATIONContent = default;
            private static bool _ORGANIZATIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayNameSources.html#PHONE"/>
            /// </summary>
            public static int PHONE { get { if (!_PHONEReady) { _PHONEContent = SGetField<int>(LocalBridgeClazz, "PHONE"); _PHONEReady = true; } return _PHONEContent; } }
            private static int _PHONEContent = default;
            private static bool _PHONEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayNameSources.html#STRUCTURED_NAME"/>
            /// </summary>
            public static int STRUCTURED_NAME { get { if (!_STRUCTURED_NAMEReady) { _STRUCTURED_NAMEContent = SGetField<int>(LocalBridgeClazz, "STRUCTURED_NAME"); _STRUCTURED_NAMEReady = true; } return _STRUCTURED_NAMEContent; } }
            private static int _STRUCTURED_NAMEContent = default;
            private static bool _STRUCTURED_NAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayNameSources.html#STRUCTURED_PHONETIC_NAME"/>
            /// </summary>
            public static int STRUCTURED_PHONETIC_NAME { get { if (!_STRUCTURED_PHONETIC_NAMEReady) { _STRUCTURED_PHONETIC_NAMEContent = SGetField<int>(LocalBridgeClazz, "STRUCTURED_PHONETIC_NAME"); _STRUCTURED_PHONETIC_NAMEReady = true; } return _STRUCTURED_PHONETIC_NAMEContent; } }
            private static int _STRUCTURED_PHONETIC_NAMEContent = default;
            private static bool _STRUCTURED_PHONETIC_NAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayNameSources.html#UNDEFINED"/>
            /// </summary>
            public static int UNDEFINED { get { if (!_UNDEFINEDReady) { _UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "UNDEFINED"); _UNDEFINEDReady = true; } return _UNDEFINEDContent; } }
            private static int _UNDEFINEDContent = default;
            private static bool _UNDEFINEDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region DisplayPhoto implementation
        public partial class DisplayPhoto
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayPhoto.html#CONTENT_MAX_DIMENSIONS_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_MAX_DIMENSIONS_URI { get { if (!_CONTENT_MAX_DIMENSIONS_URIReady) { _CONTENT_MAX_DIMENSIONS_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_MAX_DIMENSIONS_URI"); _CONTENT_MAX_DIMENSIONS_URIReady = true; } return _CONTENT_MAX_DIMENSIONS_URIContent; } }
            private static Android.Net.Uri _CONTENT_MAX_DIMENSIONS_URIContent = default;
            private static bool _CONTENT_MAX_DIMENSIONS_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayPhoto.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayPhoto.html#DISPLAY_MAX_DIM"/>
            /// </summary>
            public static Java.Lang.String DISPLAY_MAX_DIM { get { if (!_DISPLAY_MAX_DIMReady) { _DISPLAY_MAX_DIMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DISPLAY_MAX_DIM"); _DISPLAY_MAX_DIMReady = true; } return _DISPLAY_MAX_DIMContent; } }
            private static Java.Lang.String _DISPLAY_MAX_DIMContent = default;
            private static bool _DISPLAY_MAX_DIMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.DisplayPhoto.html#THUMBNAIL_MAX_DIM"/>
            /// </summary>
            public static Java.Lang.String THUMBNAIL_MAX_DIM { get { if (!_THUMBNAIL_MAX_DIMReady) { _THUMBNAIL_MAX_DIMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "THUMBNAIL_MAX_DIM"); _THUMBNAIL_MAX_DIMReady = true; } return _THUMBNAIL_MAX_DIMContent; } }
            private static Java.Lang.String _THUMBNAIL_MAX_DIMContent = default;
            private static bool _THUMBNAIL_MAX_DIMReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FullNameStyle implementation
        public partial class FullNameStyle
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.FullNameStyle.html#CHINESE"/>
            /// </summary>
            public static int CHINESE { get { if (!_CHINESEReady) { _CHINESEContent = SGetField<int>(LocalBridgeClazz, "CHINESE"); _CHINESEReady = true; } return _CHINESEContent; } }
            private static int _CHINESEContent = default;
            private static bool _CHINESEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.FullNameStyle.html#CJK"/>
            /// </summary>
            public static int CJK { get { if (!_CJKReady) { _CJKContent = SGetField<int>(LocalBridgeClazz, "CJK"); _CJKReady = true; } return _CJKContent; } }
            private static int _CJKContent = default;
            private static bool _CJKReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.FullNameStyle.html#JAPANESE"/>
            /// </summary>
            public static int JAPANESE { get { if (!_JAPANESEReady) { _JAPANESEContent = SGetField<int>(LocalBridgeClazz, "JAPANESE"); _JAPANESEReady = true; } return _JAPANESEContent; } }
            private static int _JAPANESEContent = default;
            private static bool _JAPANESEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.FullNameStyle.html#KOREAN"/>
            /// </summary>
            public static int KOREAN { get { if (!_KOREANReady) { _KOREANContent = SGetField<int>(LocalBridgeClazz, "KOREAN"); _KOREANReady = true; } return _KOREANContent; } }
            private static int _KOREANContent = default;
            private static bool _KOREANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.FullNameStyle.html#UNDEFINED"/>
            /// </summary>
            public static int UNDEFINED { get { if (!_UNDEFINEDReady) { _UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "UNDEFINED"); _UNDEFINEDReady = true; } return _UNDEFINEDContent; } }
            private static int _UNDEFINEDContent = default;
            private static bool _UNDEFINEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.FullNameStyle.html#WESTERN"/>
            /// </summary>
            public static int WESTERN { get { if (!_WESTERNReady) { _WESTERNContent = SGetField<int>(LocalBridgeClazz, "WESTERN"); _WESTERNReady = true; } return _WESTERNContent; } }
            private static int _WESTERNContent = default;
            private static bool _WESTERNReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Groups implementation
        public partial class Groups : Android.Provider.IBaseColumns
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Provider.ContactsContract.Groups"/> to <see cref="Android.Provider.BaseColumns"/>
            /// </summary>
            public static implicit operator Android.Provider.BaseColumns(Android.Provider.ContactsContract.Groups t) => t.Cast<Android.Provider.BaseColumns>();

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Groups.html#CONTENT_SUMMARY_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_SUMMARY_URI { get { if (!_CONTENT_SUMMARY_URIReady) { _CONTENT_SUMMARY_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_SUMMARY_URI"); _CONTENT_SUMMARY_URIReady = true; } return _CONTENT_SUMMARY_URIContent; } }
            private static Android.Net.Uri _CONTENT_SUMMARY_URIContent = default;
            private static bool _CONTENT_SUMMARY_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Groups.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Groups.html#CONTENT_ITEM_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
            private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
            private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Groups.html#CONTENT_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
            private static Java.Lang.String _CONTENT_TYPEContent = default;
            private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Groups.html#newEntityIterator(android.database.Cursor)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Database.Cursor"/></param>
            /// <returns><see cref="Android.Content.EntityIterator"/></returns>
            public static Android.Content.EntityIterator NewEntityIterator(Android.Database.Cursor arg0)
            {
                return SExecuteWithSignature<Android.Content.EntityIterator>(LocalBridgeClazz, "newEntityIterator", "(Landroid/database/Cursor;)Landroid/content/EntityIterator;", arg0);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Intents implementation
        public partial class Intents
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.html#ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS"/>
            /// </summary>
            public static Java.Lang.String ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS { get { if (!_ACTION_VOICE_SEND_MESSAGE_TO_CONTACTSReady) { _ACTION_VOICE_SEND_MESSAGE_TO_CONTACTSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_VOICE_SEND_MESSAGE_TO_CONTACTS"); _ACTION_VOICE_SEND_MESSAGE_TO_CONTACTSReady = true; } return _ACTION_VOICE_SEND_MESSAGE_TO_CONTACTSContent; } }
            private static Java.Lang.String _ACTION_VOICE_SEND_MESSAGE_TO_CONTACTSContent = default;
            private static bool _ACTION_VOICE_SEND_MESSAGE_TO_CONTACTSReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.html#ATTACH_IMAGE"/>
            /// </summary>
            public static Java.Lang.String ATTACH_IMAGE { get { if (!_ATTACH_IMAGEReady) { _ATTACH_IMAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ATTACH_IMAGE"); _ATTACH_IMAGEReady = true; } return _ATTACH_IMAGEContent; } }
            private static Java.Lang.String _ATTACH_IMAGEContent = default;
            private static bool _ATTACH_IMAGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.html#CONTACTS_DATABASE_CREATED"/>
            /// </summary>
            public static Java.Lang.String CONTACTS_DATABASE_CREATED { get { if (!_CONTACTS_DATABASE_CREATEDReady) { _CONTACTS_DATABASE_CREATEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTACTS_DATABASE_CREATED"); _CONTACTS_DATABASE_CREATEDReady = true; } return _CONTACTS_DATABASE_CREATEDContent; } }
            private static Java.Lang.String _CONTACTS_DATABASE_CREATEDContent = default;
            private static bool _CONTACTS_DATABASE_CREATEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.html#EXTRA_CREATE_DESCRIPTION"/>
            /// </summary>
            public static Java.Lang.String EXTRA_CREATE_DESCRIPTION { get { if (!_EXTRA_CREATE_DESCRIPTIONReady) { _EXTRA_CREATE_DESCRIPTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_CREATE_DESCRIPTION"); _EXTRA_CREATE_DESCRIPTIONReady = true; } return _EXTRA_CREATE_DESCRIPTIONContent; } }
            private static Java.Lang.String _EXTRA_CREATE_DESCRIPTIONContent = default;
            private static bool _EXTRA_CREATE_DESCRIPTIONReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.html#EXTRA_FORCE_CREATE"/>
            /// </summary>
            public static Java.Lang.String EXTRA_FORCE_CREATE { get { if (!_EXTRA_FORCE_CREATEReady) { _EXTRA_FORCE_CREATEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_FORCE_CREATE"); _EXTRA_FORCE_CREATEReady = true; } return _EXTRA_FORCE_CREATEContent; } }
            private static Java.Lang.String _EXTRA_FORCE_CREATEContent = default;
            private static bool _EXTRA_FORCE_CREATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.html#EXTRA_RECIPIENT_CONTACT_CHAT_ID"/>
            /// </summary>
            public static Java.Lang.String EXTRA_RECIPIENT_CONTACT_CHAT_ID { get { if (!_EXTRA_RECIPIENT_CONTACT_CHAT_IDReady) { _EXTRA_RECIPIENT_CONTACT_CHAT_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_RECIPIENT_CONTACT_CHAT_ID"); _EXTRA_RECIPIENT_CONTACT_CHAT_IDReady = true; } return _EXTRA_RECIPIENT_CONTACT_CHAT_IDContent; } }
            private static Java.Lang.String _EXTRA_RECIPIENT_CONTACT_CHAT_IDContent = default;
            private static bool _EXTRA_RECIPIENT_CONTACT_CHAT_IDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.html#EXTRA_RECIPIENT_CONTACT_NAME"/>
            /// </summary>
            public static Java.Lang.String EXTRA_RECIPIENT_CONTACT_NAME { get { if (!_EXTRA_RECIPIENT_CONTACT_NAMEReady) { _EXTRA_RECIPIENT_CONTACT_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_RECIPIENT_CONTACT_NAME"); _EXTRA_RECIPIENT_CONTACT_NAMEReady = true; } return _EXTRA_RECIPIENT_CONTACT_NAMEContent; } }
            private static Java.Lang.String _EXTRA_RECIPIENT_CONTACT_NAMEContent = default;
            private static bool _EXTRA_RECIPIENT_CONTACT_NAMEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.html#EXTRA_RECIPIENT_CONTACT_URI"/>
            /// </summary>
            public static Java.Lang.String EXTRA_RECIPIENT_CONTACT_URI { get { if (!_EXTRA_RECIPIENT_CONTACT_URIReady) { _EXTRA_RECIPIENT_CONTACT_URIContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_RECIPIENT_CONTACT_URI"); _EXTRA_RECIPIENT_CONTACT_URIReady = true; } return _EXTRA_RECIPIENT_CONTACT_URIContent; } }
            private static Java.Lang.String _EXTRA_RECIPIENT_CONTACT_URIContent = default;
            private static bool _EXTRA_RECIPIENT_CONTACT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.html#INVITE_CONTACT"/>
            /// </summary>
            public static Java.Lang.String INVITE_CONTACT { get { if (!_INVITE_CONTACTReady) { _INVITE_CONTACTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INVITE_CONTACT"); _INVITE_CONTACTReady = true; } return _INVITE_CONTACTContent; } }
            private static Java.Lang.String _INVITE_CONTACTContent = default;
            private static bool _INVITE_CONTACTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.html#METADATA_ACCOUNT_TYPE"/>
            /// </summary>
            public static Java.Lang.String METADATA_ACCOUNT_TYPE { get { if (!_METADATA_ACCOUNT_TYPEReady) { _METADATA_ACCOUNT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_ACCOUNT_TYPE"); _METADATA_ACCOUNT_TYPEReady = true; } return _METADATA_ACCOUNT_TYPEContent; } }
            private static Java.Lang.String _METADATA_ACCOUNT_TYPEContent = default;
            private static bool _METADATA_ACCOUNT_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.html#METADATA_MIMETYPE"/>
            /// </summary>
            public static Java.Lang.String METADATA_MIMETYPE { get { if (!_METADATA_MIMETYPEReady) { _METADATA_MIMETYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_MIMETYPE"); _METADATA_MIMETYPEReady = true; } return _METADATA_MIMETYPEContent; } }
            private static Java.Lang.String _METADATA_MIMETYPEContent = default;
            private static bool _METADATA_MIMETYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.html#SEARCH_SUGGESTION_CLICKED"/>
            /// </summary>
            public static Java.Lang.String SEARCH_SUGGESTION_CLICKED { get { if (!_SEARCH_SUGGESTION_CLICKEDReady) { _SEARCH_SUGGESTION_CLICKEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SEARCH_SUGGESTION_CLICKED"); _SEARCH_SUGGESTION_CLICKEDReady = true; } return _SEARCH_SUGGESTION_CLICKEDContent; } }
            private static Java.Lang.String _SEARCH_SUGGESTION_CLICKEDContent = default;
            private static bool _SEARCH_SUGGESTION_CLICKEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.html#SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED"/>
            /// </summary>
            public static Java.Lang.String SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED { get { if (!_SEARCH_SUGGESTION_CREATE_CONTACT_CLICKEDReady) { _SEARCH_SUGGESTION_CREATE_CONTACT_CLICKEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SEARCH_SUGGESTION_CREATE_CONTACT_CLICKED"); _SEARCH_SUGGESTION_CREATE_CONTACT_CLICKEDReady = true; } return _SEARCH_SUGGESTION_CREATE_CONTACT_CLICKEDContent; } }
            private static Java.Lang.String _SEARCH_SUGGESTION_CREATE_CONTACT_CLICKEDContent = default;
            private static bool _SEARCH_SUGGESTION_CREATE_CONTACT_CLICKEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.html#SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED"/>
            /// </summary>
            public static Java.Lang.String SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED { get { if (!_SEARCH_SUGGESTION_DIAL_NUMBER_CLICKEDReady) { _SEARCH_SUGGESTION_DIAL_NUMBER_CLICKEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SEARCH_SUGGESTION_DIAL_NUMBER_CLICKED"); _SEARCH_SUGGESTION_DIAL_NUMBER_CLICKEDReady = true; } return _SEARCH_SUGGESTION_DIAL_NUMBER_CLICKEDContent; } }
            private static Java.Lang.String _SEARCH_SUGGESTION_DIAL_NUMBER_CLICKEDContent = default;
            private static bool _SEARCH_SUGGESTION_DIAL_NUMBER_CLICKEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.html#SHOW_OR_CREATE_CONTACT"/>
            /// </summary>
            public static Java.Lang.String SHOW_OR_CREATE_CONTACT { get { if (!_SHOW_OR_CREATE_CONTACTReady) { _SHOW_OR_CREATE_CONTACTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SHOW_OR_CREATE_CONTACT"); _SHOW_OR_CREATE_CONTACTReady = true; } return _SHOW_OR_CREATE_CONTACTContent; } }
            private static Java.Lang.String _SHOW_OR_CREATE_CONTACTContent = default;
            private static bool _SHOW_OR_CREATE_CONTACTReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes
            #region Insert implementation
            public partial class Insert
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#ACTION"/>
                /// </summary>
                public static Java.Lang.String ACTION { get { if (!_ACTIONReady) { _ACTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION"); _ACTIONReady = true; } return _ACTIONContent; } }
                private static Java.Lang.String _ACTIONContent = default;
                private static bool _ACTIONReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#COMPANY"/>
                /// </summary>
                public static Java.Lang.String COMPANY { get { if (!_COMPANYReady) { _COMPANYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COMPANY"); _COMPANYReady = true; } return _COMPANYContent; } }
                private static Java.Lang.String _COMPANYContent = default;
                private static bool _COMPANYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#DATA"/>
                /// </summary>
                public static Java.Lang.String DATA { get { if (!_DATAReady) { _DATAContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATA"); _DATAReady = true; } return _DATAContent; } }
                private static Java.Lang.String _DATAContent = default;
                private static bool _DATAReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#EMAIL"/>
                /// </summary>
                public static Java.Lang.String EMAIL { get { if (!_EMAILReady) { _EMAILContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EMAIL"); _EMAILReady = true; } return _EMAILContent; } }
                private static Java.Lang.String _EMAILContent = default;
                private static bool _EMAILReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#EMAIL_ISPRIMARY"/>
                /// </summary>
                public static Java.Lang.String EMAIL_ISPRIMARY { get { if (!_EMAIL_ISPRIMARYReady) { _EMAIL_ISPRIMARYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EMAIL_ISPRIMARY"); _EMAIL_ISPRIMARYReady = true; } return _EMAIL_ISPRIMARYContent; } }
                private static Java.Lang.String _EMAIL_ISPRIMARYContent = default;
                private static bool _EMAIL_ISPRIMARYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#EMAIL_TYPE"/>
                /// </summary>
                public static Java.Lang.String EMAIL_TYPE { get { if (!_EMAIL_TYPEReady) { _EMAIL_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EMAIL_TYPE"); _EMAIL_TYPEReady = true; } return _EMAIL_TYPEContent; } }
                private static Java.Lang.String _EMAIL_TYPEContent = default;
                private static bool _EMAIL_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#EXTRA_ACCOUNT"/>
                /// </summary>
                public static Java.Lang.String EXTRA_ACCOUNT { get { if (!_EXTRA_ACCOUNTReady) { _EXTRA_ACCOUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_ACCOUNT"); _EXTRA_ACCOUNTReady = true; } return _EXTRA_ACCOUNTContent; } }
                private static Java.Lang.String _EXTRA_ACCOUNTContent = default;
                private static bool _EXTRA_ACCOUNTReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#EXTRA_DATA_SET"/>
                /// </summary>
                public static Java.Lang.String EXTRA_DATA_SET { get { if (!_EXTRA_DATA_SETReady) { _EXTRA_DATA_SETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_DATA_SET"); _EXTRA_DATA_SETReady = true; } return _EXTRA_DATA_SETContent; } }
                private static Java.Lang.String _EXTRA_DATA_SETContent = default;
                private static bool _EXTRA_DATA_SETReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#FULL_MODE"/>
                /// </summary>
                public static Java.Lang.String FULL_MODE { get { if (!_FULL_MODEReady) { _FULL_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FULL_MODE"); _FULL_MODEReady = true; } return _FULL_MODEContent; } }
                private static Java.Lang.String _FULL_MODEContent = default;
                private static bool _FULL_MODEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#IM_HANDLE"/>
                /// </summary>
                public static Java.Lang.String IM_HANDLE { get { if (!_IM_HANDLEReady) { _IM_HANDLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IM_HANDLE"); _IM_HANDLEReady = true; } return _IM_HANDLEContent; } }
                private static Java.Lang.String _IM_HANDLEContent = default;
                private static bool _IM_HANDLEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#IM_ISPRIMARY"/>
                /// </summary>
                public static Java.Lang.String IM_ISPRIMARY { get { if (!_IM_ISPRIMARYReady) { _IM_ISPRIMARYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IM_ISPRIMARY"); _IM_ISPRIMARYReady = true; } return _IM_ISPRIMARYContent; } }
                private static Java.Lang.String _IM_ISPRIMARYContent = default;
                private static bool _IM_ISPRIMARYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#IM_PROTOCOL"/>
                /// </summary>
                public static Java.Lang.String IM_PROTOCOL { get { if (!_IM_PROTOCOLReady) { _IM_PROTOCOLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "IM_PROTOCOL"); _IM_PROTOCOLReady = true; } return _IM_PROTOCOLContent; } }
                private static Java.Lang.String _IM_PROTOCOLContent = default;
                private static bool _IM_PROTOCOLReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#JOB_TITLE"/>
                /// </summary>
                public static Java.Lang.String JOB_TITLE { get { if (!_JOB_TITLEReady) { _JOB_TITLEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "JOB_TITLE"); _JOB_TITLEReady = true; } return _JOB_TITLEContent; } }
                private static Java.Lang.String _JOB_TITLEContent = default;
                private static bool _JOB_TITLEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#NAME"/>
                /// </summary>
                public static Java.Lang.String NAME { get { if (!_NAMEReady) { _NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME"); _NAMEReady = true; } return _NAMEContent; } }
                private static Java.Lang.String _NAMEContent = default;
                private static bool _NAMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#NOTES"/>
                /// </summary>
                public static Java.Lang.String NOTES { get { if (!_NOTESReady) { _NOTESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NOTES"); _NOTESReady = true; } return _NOTESContent; } }
                private static Java.Lang.String _NOTESContent = default;
                private static bool _NOTESReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#PHONE"/>
                /// </summary>
                public static Java.Lang.String PHONE { get { if (!_PHONEReady) { _PHONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHONE"); _PHONEReady = true; } return _PHONEContent; } }
                private static Java.Lang.String _PHONEContent = default;
                private static bool _PHONEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#PHONE_ISPRIMARY"/>
                /// </summary>
                public static Java.Lang.String PHONE_ISPRIMARY { get { if (!_PHONE_ISPRIMARYReady) { _PHONE_ISPRIMARYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHONE_ISPRIMARY"); _PHONE_ISPRIMARYReady = true; } return _PHONE_ISPRIMARYContent; } }
                private static Java.Lang.String _PHONE_ISPRIMARYContent = default;
                private static bool _PHONE_ISPRIMARYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#PHONE_TYPE"/>
                /// </summary>
                public static Java.Lang.String PHONE_TYPE { get { if (!_PHONE_TYPEReady) { _PHONE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHONE_TYPE"); _PHONE_TYPEReady = true; } return _PHONE_TYPEContent; } }
                private static Java.Lang.String _PHONE_TYPEContent = default;
                private static bool _PHONE_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#PHONETIC_NAME"/>
                /// </summary>
                public static Java.Lang.String PHONETIC_NAME { get { if (!_PHONETIC_NAMEReady) { _PHONETIC_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PHONETIC_NAME"); _PHONETIC_NAMEReady = true; } return _PHONETIC_NAMEContent; } }
                private static Java.Lang.String _PHONETIC_NAMEContent = default;
                private static bool _PHONETIC_NAMEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#POSTAL"/>
                /// </summary>
                public static Java.Lang.String POSTAL { get { if (!_POSTALReady) { _POSTALContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "POSTAL"); _POSTALReady = true; } return _POSTALContent; } }
                private static Java.Lang.String _POSTALContent = default;
                private static bool _POSTALReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#POSTAL_ISPRIMARY"/>
                /// </summary>
                public static Java.Lang.String POSTAL_ISPRIMARY { get { if (!_POSTAL_ISPRIMARYReady) { _POSTAL_ISPRIMARYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "POSTAL_ISPRIMARY"); _POSTAL_ISPRIMARYReady = true; } return _POSTAL_ISPRIMARYContent; } }
                private static Java.Lang.String _POSTAL_ISPRIMARYContent = default;
                private static bool _POSTAL_ISPRIMARYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#POSTAL_TYPE"/>
                /// </summary>
                public static Java.Lang.String POSTAL_TYPE { get { if (!_POSTAL_TYPEReady) { _POSTAL_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "POSTAL_TYPE"); _POSTAL_TYPEReady = true; } return _POSTAL_TYPEContent; } }
                private static Java.Lang.String _POSTAL_TYPEContent = default;
                private static bool _POSTAL_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#SECONDARY_EMAIL"/>
                /// </summary>
                public static Java.Lang.String SECONDARY_EMAIL { get { if (!_SECONDARY_EMAILReady) { _SECONDARY_EMAILContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SECONDARY_EMAIL"); _SECONDARY_EMAILReady = true; } return _SECONDARY_EMAILContent; } }
                private static Java.Lang.String _SECONDARY_EMAILContent = default;
                private static bool _SECONDARY_EMAILReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#SECONDARY_EMAIL_TYPE"/>
                /// </summary>
                public static Java.Lang.String SECONDARY_EMAIL_TYPE { get { if (!_SECONDARY_EMAIL_TYPEReady) { _SECONDARY_EMAIL_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SECONDARY_EMAIL_TYPE"); _SECONDARY_EMAIL_TYPEReady = true; } return _SECONDARY_EMAIL_TYPEContent; } }
                private static Java.Lang.String _SECONDARY_EMAIL_TYPEContent = default;
                private static bool _SECONDARY_EMAIL_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#SECONDARY_PHONE"/>
                /// </summary>
                public static Java.Lang.String SECONDARY_PHONE { get { if (!_SECONDARY_PHONEReady) { _SECONDARY_PHONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SECONDARY_PHONE"); _SECONDARY_PHONEReady = true; } return _SECONDARY_PHONEContent; } }
                private static Java.Lang.String _SECONDARY_PHONEContent = default;
                private static bool _SECONDARY_PHONEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#SECONDARY_PHONE_TYPE"/>
                /// </summary>
                public static Java.Lang.String SECONDARY_PHONE_TYPE { get { if (!_SECONDARY_PHONE_TYPEReady) { _SECONDARY_PHONE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SECONDARY_PHONE_TYPE"); _SECONDARY_PHONE_TYPEReady = true; } return _SECONDARY_PHONE_TYPEContent; } }
                private static Java.Lang.String _SECONDARY_PHONE_TYPEContent = default;
                private static bool _SECONDARY_PHONE_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#TERTIARY_EMAIL"/>
                /// </summary>
                public static Java.Lang.String TERTIARY_EMAIL { get { if (!_TERTIARY_EMAILReady) { _TERTIARY_EMAILContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TERTIARY_EMAIL"); _TERTIARY_EMAILReady = true; } return _TERTIARY_EMAILContent; } }
                private static Java.Lang.String _TERTIARY_EMAILContent = default;
                private static bool _TERTIARY_EMAILReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#TERTIARY_EMAIL_TYPE"/>
                /// </summary>
                public static Java.Lang.String TERTIARY_EMAIL_TYPE { get { if (!_TERTIARY_EMAIL_TYPEReady) { _TERTIARY_EMAIL_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TERTIARY_EMAIL_TYPE"); _TERTIARY_EMAIL_TYPEReady = true; } return _TERTIARY_EMAIL_TYPEContent; } }
                private static Java.Lang.String _TERTIARY_EMAIL_TYPEContent = default;
                private static bool _TERTIARY_EMAIL_TYPEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#TERTIARY_PHONE"/>
                /// </summary>
                public static Java.Lang.String TERTIARY_PHONE { get { if (!_TERTIARY_PHONEReady) { _TERTIARY_PHONEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TERTIARY_PHONE"); _TERTIARY_PHONEReady = true; } return _TERTIARY_PHONEContent; } }
                private static Java.Lang.String _TERTIARY_PHONEContent = default;
                private static bool _TERTIARY_PHONEReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Intents.Insert.html#TERTIARY_PHONE_TYPE"/>
                /// </summary>
                public static Java.Lang.String TERTIARY_PHONE_TYPE { get { if (!_TERTIARY_PHONE_TYPEReady) { _TERTIARY_PHONE_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TERTIARY_PHONE_TYPE"); _TERTIARY_PHONE_TYPEReady = true; } return _TERTIARY_PHONE_TYPEContent; } }
                private static Java.Lang.String _TERTIARY_PHONE_TYPEContent = default;
                private static bool _TERTIARY_PHONE_TYPEReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PhoneLookup implementation
        public partial class PhoneLookup : Android.Provider.IBaseColumns
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Provider.ContactsContract.PhoneLookup"/> to <see cref="Android.Provider.BaseColumns"/>
            /// </summary>
            public static implicit operator Android.Provider.BaseColumns(Android.Provider.ContactsContract.PhoneLookup t) => t.Cast<Android.Provider.BaseColumns>();

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.PhoneLookup.html#CONTENT_FILTER_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_FILTER_URI { get { if (!_CONTENT_FILTER_URIReady) { _CONTENT_FILTER_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_FILTER_URI"); _CONTENT_FILTER_URIReady = true; } return _CONTENT_FILTER_URIContent; } }
            private static Android.Net.Uri _CONTENT_FILTER_URIContent = default;
            private static bool _CONTENT_FILTER_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.PhoneLookup.html#ENTERPRISE_CONTENT_FILTER_URI"/>
            /// </summary>
            public static Android.Net.Uri ENTERPRISE_CONTENT_FILTER_URI { get { if (!_ENTERPRISE_CONTENT_FILTER_URIReady) { _ENTERPRISE_CONTENT_FILTER_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "ENTERPRISE_CONTENT_FILTER_URI"); _ENTERPRISE_CONTENT_FILTER_URIReady = true; } return _ENTERPRISE_CONTENT_FILTER_URIContent; } }
            private static Android.Net.Uri _ENTERPRISE_CONTENT_FILTER_URIContent = default;
            private static bool _ENTERPRISE_CONTENT_FILTER_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.PhoneLookup.html#QUERY_PARAMETER_SIP_ADDRESS"/>
            /// </summary>
            public static Java.Lang.String QUERY_PARAMETER_SIP_ADDRESS { get { if (!_QUERY_PARAMETER_SIP_ADDRESSReady) { _QUERY_PARAMETER_SIP_ADDRESSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "QUERY_PARAMETER_SIP_ADDRESS"); _QUERY_PARAMETER_SIP_ADDRESSReady = true; } return _QUERY_PARAMETER_SIP_ADDRESSContent; } }
            private static Java.Lang.String _QUERY_PARAMETER_SIP_ADDRESSContent = default;
            private static bool _QUERY_PARAMETER_SIP_ADDRESSReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PhoneticNameStyle implementation
        public partial class PhoneticNameStyle
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.PhoneticNameStyle.html#JAPANESE"/>
            /// </summary>
            public static int JAPANESE { get { if (!_JAPANESEReady) { _JAPANESEContent = SGetField<int>(LocalBridgeClazz, "JAPANESE"); _JAPANESEReady = true; } return _JAPANESEContent; } }
            private static int _JAPANESEContent = default;
            private static bool _JAPANESEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.PhoneticNameStyle.html#KOREAN"/>
            /// </summary>
            public static int KOREAN { get { if (!_KOREANReady) { _KOREANContent = SGetField<int>(LocalBridgeClazz, "KOREAN"); _KOREANReady = true; } return _KOREANContent; } }
            private static int _KOREANContent = default;
            private static bool _KOREANReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.PhoneticNameStyle.html#PINYIN"/>
            /// </summary>
            public static int PINYIN { get { if (!_PINYINReady) { _PINYINContent = SGetField<int>(LocalBridgeClazz, "PINYIN"); _PINYINReady = true; } return _PINYINContent; } }
            private static int _PINYINContent = default;
            private static bool _PINYINReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.PhoneticNameStyle.html#UNDEFINED"/>
            /// </summary>
            public static int UNDEFINED { get { if (!_UNDEFINEDReady) { _UNDEFINEDContent = SGetField<int>(LocalBridgeClazz, "UNDEFINED"); _UNDEFINEDReady = true; } return _UNDEFINEDContent; } }
            private static int _UNDEFINEDContent = default;
            private static bool _UNDEFINEDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PinnedPositions implementation
        public partial class PinnedPositions
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.PinnedPositions.html#DEMOTED"/>
            /// </summary>
            public static int DEMOTED { get { if (!_DEMOTEDReady) { _DEMOTEDContent = SGetField<int>(LocalBridgeClazz, "DEMOTED"); _DEMOTEDReady = true; } return _DEMOTEDContent; } }
            private static int _DEMOTEDContent = default;
            private static bool _DEMOTEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.PinnedPositions.html#UNPINNED"/>
            /// </summary>
            public static int UNPINNED { get { if (!_UNPINNEDReady) { _UNPINNEDContent = SGetField<int>(LocalBridgeClazz, "UNPINNED"); _UNPINNEDReady = true; } return _UNPINNEDContent; } }
            private static int _UNPINNEDContent = default;
            private static bool _UNPINNEDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.PinnedPositions.html#pin(android.content.ContentResolver,long,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public static void Pin(Android.Content.ContentResolver arg0, long arg1, int arg2)
            {
                SExecute(LocalBridgeClazz, "pin", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.PinnedPositions.html#undemote(android.content.ContentResolver,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            public static void Undemote(Android.Content.ContentResolver arg0, long arg1)
            {
                SExecute(LocalBridgeClazz, "undemote", arg0, arg1);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Presence implementation
        public partial class Presence
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Profile implementation
        public partial class Profile : Android.Provider.IBaseColumns
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Provider.ContactsContract.Profile"/> to <see cref="Android.Provider.BaseColumns"/>
            /// </summary>
            public static implicit operator Android.Provider.BaseColumns(Android.Provider.ContactsContract.Profile t) => t.Cast<Android.Provider.BaseColumns>();

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Profile.html#CONTENT_RAW_CONTACTS_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_RAW_CONTACTS_URI { get { if (!_CONTENT_RAW_CONTACTS_URIReady) { _CONTENT_RAW_CONTACTS_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_RAW_CONTACTS_URI"); _CONTENT_RAW_CONTACTS_URIReady = true; } return _CONTENT_RAW_CONTACTS_URIContent; } }
            private static Android.Net.Uri _CONTENT_RAW_CONTACTS_URIContent = default;
            private static bool _CONTENT_RAW_CONTACTS_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Profile.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Profile.html#CONTENT_VCARD_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_VCARD_URI { get { if (!_CONTENT_VCARD_URIReady) { _CONTENT_VCARD_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_VCARD_URI"); _CONTENT_VCARD_URIReady = true; } return _CONTENT_VCARD_URIContent; } }
            private static Android.Net.Uri _CONTENT_VCARD_URIContent = default;
            private static bool _CONTENT_VCARD_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Profile.html#MIN_ID"/>
            /// </summary>
            public static long MIN_ID { get { if (!_MIN_IDReady) { _MIN_IDContent = SGetField<long>(LocalBridgeClazz, "MIN_ID"); _MIN_IDReady = true; } return _MIN_IDContent; } }
            private static long _MIN_IDContent = default;
            private static bool _MIN_IDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ProfileSyncState implementation
        public partial class ProfileSyncState
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.ProfileSyncState.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.ProfileSyncState.html#CONTENT_DIRECTORY"/>
            /// </summary>
            public static Java.Lang.String CONTENT_DIRECTORY { get { if (!_CONTENT_DIRECTORYReady) { _CONTENT_DIRECTORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_DIRECTORY"); _CONTENT_DIRECTORYReady = true; } return _CONTENT_DIRECTORYContent; } }
            private static Java.Lang.String _CONTENT_DIRECTORYContent = default;
            private static bool _CONTENT_DIRECTORYReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.ProfileSyncState.html#newSetOperation(android.accounts.Account,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Accounts.Account"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <returns><see cref="Android.Content.ContentProviderOperation"/></returns>
            public static Android.Content.ContentProviderOperation NewSetOperation(Android.Accounts.Account arg0, byte[] arg1)
            {
                return SExecute<Android.Content.ContentProviderOperation>(LocalBridgeClazz, "newSetOperation", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.ProfileSyncState.html#getWithUri(android.content.ContentProviderClient,android.accounts.Account)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentProviderClient"/></param>
            /// <param name="arg1"><see cref="Android.Accounts.Account"/></param>
            /// <returns><see cref="Android.Util.Pair"/></returns>
            /// <exception cref="Android.Os.RemoteException"/>
            public static Android.Util.Pair<Android.Net.Uri, byte[]> GetWithUri(Android.Content.ContentProviderClient arg0, Android.Accounts.Account arg1)
            {
                return SExecute<Android.Util.Pair<Android.Net.Uri, byte[]>>(LocalBridgeClazz, "getWithUri", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.ProfileSyncState.html#get(android.content.ContentProviderClient,android.accounts.Account)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentProviderClient"/></param>
            /// <param name="arg1"><see cref="Android.Accounts.Account"/></param>
            /// <returns><see cref="byte"/></returns>
            /// <exception cref="Android.Os.RemoteException"/>
            public static byte[] Get(Android.Content.ContentProviderClient arg0, Android.Accounts.Account arg1)
            {
                return SExecuteArray<byte>(LocalBridgeClazz, "get", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.ProfileSyncState.html#set(android.content.ContentProviderClient,android.accounts.Account,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentProviderClient"/></param>
            /// <param name="arg1"><see cref="Android.Accounts.Account"/></param>
            /// <param name="arg2"><see cref="byte"/></param>
            /// <exception cref="Android.Os.RemoteException"/>
            public static void Set(Android.Content.ContentProviderClient arg0, Android.Accounts.Account arg1, byte[] arg2)
            {
                SExecute(LocalBridgeClazz, "set", arg0, arg1, arg2);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ProviderStatus implementation
        public partial class ProviderStatus
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.ProviderStatus.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.ProviderStatus.html#STATUS_BUSY"/>
            /// </summary>
            public static int STATUS_BUSY { get { if (!_STATUS_BUSYReady) { _STATUS_BUSYContent = SGetField<int>(LocalBridgeClazz, "STATUS_BUSY"); _STATUS_BUSYReady = true; } return _STATUS_BUSYContent; } }
            private static int _STATUS_BUSYContent = default;
            private static bool _STATUS_BUSYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.ProviderStatus.html#STATUS_EMPTY"/>
            /// </summary>
            public static int STATUS_EMPTY { get { if (!_STATUS_EMPTYReady) { _STATUS_EMPTYContent = SGetField<int>(LocalBridgeClazz, "STATUS_EMPTY"); _STATUS_EMPTYReady = true; } return _STATUS_EMPTYContent; } }
            private static int _STATUS_EMPTYContent = default;
            private static bool _STATUS_EMPTYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.ProviderStatus.html#STATUS_NORMAL"/>
            /// </summary>
            public static int STATUS_NORMAL { get { if (!_STATUS_NORMALReady) { _STATUS_NORMALContent = SGetField<int>(LocalBridgeClazz, "STATUS_NORMAL"); _STATUS_NORMALReady = true; } return _STATUS_NORMALContent; } }
            private static int _STATUS_NORMALContent = default;
            private static bool _STATUS_NORMALReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.ProviderStatus.html#CONTENT_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
            private static Java.Lang.String _CONTENT_TYPEContent = default;
            private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.ProviderStatus.html#DATABASE_CREATION_TIMESTAMP"/>
            /// </summary>
            public static Java.Lang.String DATABASE_CREATION_TIMESTAMP { get { if (!_DATABASE_CREATION_TIMESTAMPReady) { _DATABASE_CREATION_TIMESTAMPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATABASE_CREATION_TIMESTAMP"); _DATABASE_CREATION_TIMESTAMPReady = true; } return _DATABASE_CREATION_TIMESTAMPContent; } }
            private static Java.Lang.String _DATABASE_CREATION_TIMESTAMPContent = default;
            private static bool _DATABASE_CREATION_TIMESTAMPReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.ProviderStatus.html#STATUS"/>
            /// </summary>
            public static Java.Lang.String STATUS { get { if (!_STATUSReady) { _STATUSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STATUS"); _STATUSReady = true; } return _STATUSContent; } }
            private static Java.Lang.String _STATUSContent = default;
            private static bool _STATUSReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region QuickContact implementation
        public partial class QuickContact
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.QuickContact.html#MODE_LARGE"/>
            /// </summary>
            public static int MODE_LARGE { get { if (!_MODE_LARGEReady) { _MODE_LARGEContent = SGetField<int>(LocalBridgeClazz, "MODE_LARGE"); _MODE_LARGEReady = true; } return _MODE_LARGEContent; } }
            private static int _MODE_LARGEContent = default;
            private static bool _MODE_LARGEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.QuickContact.html#MODE_MEDIUM"/>
            /// </summary>
            public static int MODE_MEDIUM { get { if (!_MODE_MEDIUMReady) { _MODE_MEDIUMContent = SGetField<int>(LocalBridgeClazz, "MODE_MEDIUM"); _MODE_MEDIUMReady = true; } return _MODE_MEDIUMContent; } }
            private static int _MODE_MEDIUMContent = default;
            private static bool _MODE_MEDIUMReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.QuickContact.html#MODE_SMALL"/>
            /// </summary>
            public static int MODE_SMALL { get { if (!_MODE_SMALLReady) { _MODE_SMALLContent = SGetField<int>(LocalBridgeClazz, "MODE_SMALL"); _MODE_SMALLReady = true; } return _MODE_SMALLContent; } }
            private static int _MODE_SMALLContent = default;
            private static bool _MODE_SMALLReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.QuickContact.html#ACTION_QUICK_CONTACT"/>
            /// </summary>
            public static Java.Lang.String ACTION_QUICK_CONTACT { get { if (!_ACTION_QUICK_CONTACTReady) { _ACTION_QUICK_CONTACTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_QUICK_CONTACT"); _ACTION_QUICK_CONTACTReady = true; } return _ACTION_QUICK_CONTACTContent; } }
            private static Java.Lang.String _ACTION_QUICK_CONTACTContent = default;
            private static bool _ACTION_QUICK_CONTACTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.QuickContact.html#EXTRA_EXCLUDE_MIMES"/>
            /// </summary>
            public static Java.Lang.String EXTRA_EXCLUDE_MIMES { get { if (!_EXTRA_EXCLUDE_MIMESReady) { _EXTRA_EXCLUDE_MIMESContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_EXCLUDE_MIMES"); _EXTRA_EXCLUDE_MIMESReady = true; } return _EXTRA_EXCLUDE_MIMESContent; } }
            private static Java.Lang.String _EXTRA_EXCLUDE_MIMESContent = default;
            private static bool _EXTRA_EXCLUDE_MIMESReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.QuickContact.html#EXTRA_MODE"/>
            /// </summary>
            public static Java.Lang.String EXTRA_MODE { get { if (!_EXTRA_MODEReady) { _EXTRA_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_MODE"); _EXTRA_MODEReady = true; } return _EXTRA_MODEContent; } }
            private static Java.Lang.String _EXTRA_MODEContent = default;
            private static bool _EXTRA_MODEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.QuickContact.html#EXTRA_PRIORITIZED_MIMETYPE"/>
            /// </summary>
            public static Java.Lang.String EXTRA_PRIORITIZED_MIMETYPE { get { if (!_EXTRA_PRIORITIZED_MIMETYPEReady) { _EXTRA_PRIORITIZED_MIMETYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_PRIORITIZED_MIMETYPE"); _EXTRA_PRIORITIZED_MIMETYPEReady = true; } return _EXTRA_PRIORITIZED_MIMETYPEContent; } }
            private static Java.Lang.String _EXTRA_PRIORITIZED_MIMETYPEContent = default;
            private static bool _EXTRA_PRIORITIZED_MIMETYPEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.QuickContact.html#showQuickContact(android.content.Context,android.graphics.Rect,android.net.Uri,int,java.lang.String[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
            /// <param name="arg2"><see cref="Android.Net.Uri"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="Java.Lang.String"/></param>
            public static void ShowQuickContact(Android.Content.Context arg0, Android.Graphics.Rect arg1, Android.Net.Uri arg2, int arg3, Java.Lang.String[] arg4)
            {
                SExecute(LocalBridgeClazz, "showQuickContact", arg0, arg1, arg2, arg3, arg4);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.QuickContact.html#showQuickContact(android.content.Context,android.graphics.Rect,android.net.Uri,java.lang.String[],java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <param name="arg1"><see cref="Android.Graphics.Rect"/></param>
            /// <param name="arg2"><see cref="Android.Net.Uri"/></param>
            /// <param name="arg3"><see cref="Java.Lang.String"/></param>
            /// <param name="arg4"><see cref="Java.Lang.String"/></param>
            public static void ShowQuickContact(Android.Content.Context arg0, Android.Graphics.Rect arg1, Android.Net.Uri arg2, Java.Lang.String[] arg3, Java.Lang.String arg4)
            {
                SExecute(LocalBridgeClazz, "showQuickContact", arg0, arg1, arg2, arg3, arg4);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.QuickContact.html#showQuickContact(android.content.Context,android.view.View,android.net.Uri,int,java.lang.String[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            /// <param name="arg2"><see cref="Android.Net.Uri"/></param>
            /// <param name="arg3"><see cref="int"/></param>
            /// <param name="arg4"><see cref="Java.Lang.String"/></param>
            public static void ShowQuickContact(Android.Content.Context arg0, Android.View.View arg1, Android.Net.Uri arg2, int arg3, Java.Lang.String[] arg4)
            {
                SExecute(LocalBridgeClazz, "showQuickContact", arg0, arg1, arg2, arg3, arg4);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.QuickContact.html#showQuickContact(android.content.Context,android.view.View,android.net.Uri,java.lang.String[],java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <param name="arg1"><see cref="Android.View.View"/></param>
            /// <param name="arg2"><see cref="Android.Net.Uri"/></param>
            /// <param name="arg3"><see cref="Java.Lang.String"/></param>
            /// <param name="arg4"><see cref="Java.Lang.String"/></param>
            public static void ShowQuickContact(Android.Content.Context arg0, Android.View.View arg1, Android.Net.Uri arg2, Java.Lang.String[] arg3, Java.Lang.String arg4)
            {
                SExecute(LocalBridgeClazz, "showQuickContact", arg0, arg1, arg2, arg3, arg4);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RawContacts implementation
        public partial class RawContacts : Android.Provider.IBaseColumns
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Provider.ContactsContract.RawContacts"/> to <see cref="Android.Provider.BaseColumns"/>
            /// </summary>
            public static implicit operator Android.Provider.BaseColumns(Android.Provider.ContactsContract.RawContacts t) => t.Cast<Android.Provider.BaseColumns>();

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html#AGGREGATION_MODE_DEFAULT"/>
            /// </summary>
            public static int AGGREGATION_MODE_DEFAULT { get { if (!_AGGREGATION_MODE_DEFAULTReady) { _AGGREGATION_MODE_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "AGGREGATION_MODE_DEFAULT"); _AGGREGATION_MODE_DEFAULTReady = true; } return _AGGREGATION_MODE_DEFAULTContent; } }
            private static int _AGGREGATION_MODE_DEFAULTContent = default;
            private static bool _AGGREGATION_MODE_DEFAULTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html#AGGREGATION_MODE_DISABLED"/>
            /// </summary>
            public static int AGGREGATION_MODE_DISABLED { get { if (!_AGGREGATION_MODE_DISABLEDReady) { _AGGREGATION_MODE_DISABLEDContent = SGetField<int>(LocalBridgeClazz, "AGGREGATION_MODE_DISABLED"); _AGGREGATION_MODE_DISABLEDReady = true; } return _AGGREGATION_MODE_DISABLEDContent; } }
            private static int _AGGREGATION_MODE_DISABLEDContent = default;
            private static bool _AGGREGATION_MODE_DISABLEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html#AGGREGATION_MODE_IMMEDIATE"/>
            /// </summary>
            [global::System.Obsolete()]
            public static int AGGREGATION_MODE_IMMEDIATE { get { if (!_AGGREGATION_MODE_IMMEDIATEReady) { _AGGREGATION_MODE_IMMEDIATEContent = SGetField<int>(LocalBridgeClazz, "AGGREGATION_MODE_IMMEDIATE"); _AGGREGATION_MODE_IMMEDIATEReady = true; } return _AGGREGATION_MODE_IMMEDIATEContent; } }
            private static int _AGGREGATION_MODE_IMMEDIATEContent = default;
            private static bool _AGGREGATION_MODE_IMMEDIATEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html#AGGREGATION_MODE_SUSPENDED"/>
            /// </summary>
            public static int AGGREGATION_MODE_SUSPENDED { get { if (!_AGGREGATION_MODE_SUSPENDEDReady) { _AGGREGATION_MODE_SUSPENDEDContent = SGetField<int>(LocalBridgeClazz, "AGGREGATION_MODE_SUSPENDED"); _AGGREGATION_MODE_SUSPENDEDReady = true; } return _AGGREGATION_MODE_SUSPENDEDContent; } }
            private static int _AGGREGATION_MODE_SUSPENDEDContent = default;
            private static bool _AGGREGATION_MODE_SUSPENDEDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html#CONTENT_ITEM_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
            private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
            private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html#CONTENT_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
            private static Java.Lang.String _CONTENT_TYPEContent = default;
            private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html#newEntityIterator(android.database.Cursor)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Database.Cursor"/></param>
            /// <returns><see cref="Android.Content.EntityIterator"/></returns>
            public static Android.Content.EntityIterator NewEntityIterator(Android.Database.Cursor arg0)
            {
                return SExecuteWithSignature<Android.Content.EntityIterator>(LocalBridgeClazz, "newEntityIterator", "(Landroid/database/Cursor;)Landroid/content/EntityIterator;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html#getContactLookupUri(android.content.ContentResolver,android.net.Uri)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <param name="arg1"><see cref="Android.Net.Uri"/></param>
            /// <returns><see cref="Android.Net.Uri"/></returns>
            public static Android.Net.Uri GetContactLookupUri(Android.Content.ContentResolver arg0, Android.Net.Uri arg1)
            {
                return SExecute<Android.Net.Uri>(LocalBridgeClazz, "getContactLookupUri", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html#getLocalAccountName(android.content.Context)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public static Java.Lang.String GetLocalAccountName(Android.Content.Context arg0)
            {
                return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "getLocalAccountName", "(Landroid/content/Context;)Ljava/lang/String;", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.html#getLocalAccountType(android.content.Context)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.Context"/></param>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public static Java.Lang.String GetLocalAccountType(Android.Content.Context arg0)
            {
                return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "getLocalAccountType", "(Landroid/content/Context;)Ljava/lang/String;", arg0);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes
            #region Entity implementation
            public partial class Entity : Android.Provider.IBaseColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators
                /// <summary>
                /// Converter from <see cref="Android.Provider.ContactsContract.RawContacts.Entity"/> to <see cref="Android.Provider.BaseColumns"/>
                /// </summary>
                public static implicit operator Android.Provider.BaseColumns(Android.Provider.ContactsContract.RawContacts.Entity t) => t.Cast<Android.Provider.BaseColumns>();

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.Entity.html#CONTENT_DIRECTORY"/>
                /// </summary>
                public static Java.Lang.String CONTENT_DIRECTORY { get { if (!_CONTENT_DIRECTORYReady) { _CONTENT_DIRECTORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_DIRECTORY"); _CONTENT_DIRECTORYReady = true; } return _CONTENT_DIRECTORYContent; } }
                private static Java.Lang.String _CONTENT_DIRECTORYContent = default;
                private static bool _CONTENT_DIRECTORYReady = false; // this is used because in case of generics 
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.Entity.html#DATA_ID"/>
                /// </summary>
                public static Java.Lang.String DATA_ID { get { if (!_DATA_IDReady) { _DATA_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATA_ID"); _DATA_IDReady = true; } return _DATA_IDContent; } }
                private static Java.Lang.String _DATA_IDContent = default;
                private static bool _DATA_IDReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region DisplayPhoto implementation
            public partial class DisplayPhoto
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.DisplayPhoto.html#CONTENT_DIRECTORY"/>
                /// </summary>
                public static Java.Lang.String CONTENT_DIRECTORY { get { if (!_CONTENT_DIRECTORYReady) { _CONTENT_DIRECTORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_DIRECTORY"); _CONTENT_DIRECTORYReady = true; } return _CONTENT_DIRECTORYContent; } }
                private static Java.Lang.String _CONTENT_DIRECTORYContent = default;
                private static bool _CONTENT_DIRECTORYReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region Data implementation
            public partial class Data : Android.Provider.IBaseColumns
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators
                /// <summary>
                /// Converter from <see cref="Android.Provider.ContactsContract.RawContacts.Data"/> to <see cref="Android.Provider.BaseColumns"/>
                /// </summary>
                public static implicit operator Android.Provider.BaseColumns(Android.Provider.ContactsContract.RawContacts.Data t) => t.Cast<Android.Provider.BaseColumns>();

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContacts.Data.html#CONTENT_DIRECTORY"/>
                /// </summary>
                public static Java.Lang.String CONTENT_DIRECTORY { get { if (!_CONTENT_DIRECTORYReady) { _CONTENT_DIRECTORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_DIRECTORY"); _CONTENT_DIRECTORYReady = true; } return _CONTENT_DIRECTORYContent; } }
                private static Java.Lang.String _CONTENT_DIRECTORYContent = default;
                private static bool _CONTENT_DIRECTORYReady = false; // this is used because in case of generics 

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RawContactsEntity implementation
        public partial class RawContactsEntity : Android.Provider.IBaseColumns
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Android.Provider.ContactsContract.RawContactsEntity"/> to <see cref="Android.Provider.BaseColumns"/>
            /// </summary>
            public static implicit operator Android.Provider.BaseColumns(Android.Provider.ContactsContract.RawContactsEntity t) => t.Cast<Android.Provider.BaseColumns>();

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContactsEntity.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContactsEntity.html#PROFILE_CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri PROFILE_CONTENT_URI { get { if (!_PROFILE_CONTENT_URIReady) { _PROFILE_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "PROFILE_CONTENT_URI"); _PROFILE_CONTENT_URIReady = true; } return _PROFILE_CONTENT_URIContent; } }
            private static Android.Net.Uri _PROFILE_CONTENT_URIContent = default;
            private static bool _PROFILE_CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContactsEntity.html#CONTENT_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
            private static Java.Lang.String _CONTENT_TYPEContent = default;
            private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.RawContactsEntity.html#DATA_ID"/>
            /// </summary>
            public static Java.Lang.String DATA_ID { get { if (!_DATA_IDReady) { _DATA_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DATA_ID"); _DATA_IDReady = true; } return _DATA_IDContent; } }
            private static Java.Lang.String _DATA_IDContent = default;
            private static bool _DATA_IDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SearchSnippets implementation
        public partial class SearchSnippets
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SearchSnippets.html#DEFERRED_SNIPPETING_KEY"/>
            /// </summary>
            public static Java.Lang.String DEFERRED_SNIPPETING_KEY { get { if (!_DEFERRED_SNIPPETING_KEYReady) { _DEFERRED_SNIPPETING_KEYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFERRED_SNIPPETING_KEY"); _DEFERRED_SNIPPETING_KEYReady = true; } return _DEFERRED_SNIPPETING_KEYContent; } }
            private static Java.Lang.String _DEFERRED_SNIPPETING_KEYContent = default;
            private static bool _DEFERRED_SNIPPETING_KEYReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SearchSnippets.html#SNIPPET"/>
            /// </summary>
            public static Java.Lang.String SNIPPET { get { if (!_SNIPPETReady) { _SNIPPETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SNIPPET"); _SNIPPETReady = true; } return _SNIPPETContent; } }
            private static Java.Lang.String _SNIPPETContent = default;
            private static bool _SNIPPETReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Settings implementation
        public partial class Settings
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Settings.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Settings.html#ACTION_SET_DEFAULT_ACCOUNT"/>
            /// </summary>
            public static Java.Lang.String ACTION_SET_DEFAULT_ACCOUNT { get { if (!_ACTION_SET_DEFAULT_ACCOUNTReady) { _ACTION_SET_DEFAULT_ACCOUNTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SET_DEFAULT_ACCOUNT"); _ACTION_SET_DEFAULT_ACCOUNTReady = true; } return _ACTION_SET_DEFAULT_ACCOUNTContent; } }
            private static Java.Lang.String _ACTION_SET_DEFAULT_ACCOUNTContent = default;
            private static bool _ACTION_SET_DEFAULT_ACCOUNTReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Settings.html#CONTENT_ITEM_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
            private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
            private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Settings.html#CONTENT_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
            private static Java.Lang.String _CONTENT_TYPEContent = default;
            private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.Settings.html#getDefaultAccount(android.content.ContentResolver)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <returns><see cref="Android.Accounts.Account"/></returns>
            public static Android.Accounts.Account GetDefaultAccount(Android.Content.ContentResolver arg0)
            {
                return SExecuteWithSignature<Android.Accounts.Account>(LocalBridgeClazz, "getDefaultAccount", "(Landroid/content/ContentResolver;)Landroid/accounts/Account;", arg0);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SimAccount implementation
        public partial class SimAccount
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SimAccount.html#CREATOR"/>
            /// </summary>
            public static Android.Os.Parcelable.Creator CREATOR { get { if (!_CREATORReady) { _CREATORContent = SGetField<Android.Os.Parcelable.Creator>(LocalBridgeClazz, "CREATOR"); _CREATORReady = true; } return _CREATORContent; } }
            private static Android.Os.Parcelable.Creator _CREATORContent = default;
            private static bool _CREATORReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SimAccount.html#ADN_EF_TYPE"/>
            /// </summary>
            public static int ADN_EF_TYPE { get { if (!_ADN_EF_TYPEReady) { _ADN_EF_TYPEContent = SGetField<int>(LocalBridgeClazz, "ADN_EF_TYPE"); _ADN_EF_TYPEReady = true; } return _ADN_EF_TYPEContent; } }
            private static int _ADN_EF_TYPEContent = default;
            private static bool _ADN_EF_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SimAccount.html#FDN_EF_TYPE"/>
            /// </summary>
            public static int FDN_EF_TYPE { get { if (!_FDN_EF_TYPEReady) { _FDN_EF_TYPEContent = SGetField<int>(LocalBridgeClazz, "FDN_EF_TYPE"); _FDN_EF_TYPEReady = true; } return _FDN_EF_TYPEContent; } }
            private static int _FDN_EF_TYPEContent = default;
            private static bool _FDN_EF_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SimAccount.html#SDN_EF_TYPE"/>
            /// </summary>
            public static int SDN_EF_TYPE { get { if (!_SDN_EF_TYPEReady) { _SDN_EF_TYPEContent = SGetField<int>(LocalBridgeClazz, "SDN_EF_TYPE"); _SDN_EF_TYPEReady = true; } return _SDN_EF_TYPEContent; } }
            private static int _SDN_EF_TYPEContent = default;
            private static bool _SDN_EF_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SimAccount.html#UNKNOWN_EF_TYPE"/>
            /// </summary>
            public static int UNKNOWN_EF_TYPE { get { if (!_UNKNOWN_EF_TYPEReady) { _UNKNOWN_EF_TYPEContent = SGetField<int>(LocalBridgeClazz, "UNKNOWN_EF_TYPE"); _UNKNOWN_EF_TYPEReady = true; } return _UNKNOWN_EF_TYPEContent; } }
            private static int _UNKNOWN_EF_TYPEContent = default;
            private static bool _UNKNOWN_EF_TYPEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SimAccount.html#describeContents()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int DescribeContents()
            {
                return IExecuteWithSignature<int>("describeContents", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SimAccount.html#getEfType()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetEfType()
            {
                return IExecuteWithSignature<int>("getEfType", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SimAccount.html#getSimSlotIndex()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int GetSimSlotIndex()
            {
                return IExecuteWithSignature<int>("getSimSlotIndex", "()I");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SimAccount.html#getAccountName()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetAccountName()
            {
                return IExecuteWithSignature<Java.Lang.String>("getAccountName", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SimAccount.html#getAccountType()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String GetAccountType()
            {
                return IExecuteWithSignature<Java.Lang.String>("getAccountType", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SimAccount.html#writeToParcel(android.os.Parcel,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Os.Parcel"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public void WriteToParcel(Android.Os.Parcel arg0, int arg1)
            {
                IExecute("writeToParcel", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SimContacts implementation
        public partial class SimContacts
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SimContacts.html#ACTION_SIM_ACCOUNTS_CHANGED"/>
            /// </summary>
            public static Java.Lang.String ACTION_SIM_ACCOUNTS_CHANGED { get { if (!_ACTION_SIM_ACCOUNTS_CHANGEDReady) { _ACTION_SIM_ACCOUNTS_CHANGEDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_SIM_ACCOUNTS_CHANGED"); _ACTION_SIM_ACCOUNTS_CHANGEDReady = true; } return _ACTION_SIM_ACCOUNTS_CHANGEDContent; } }
            private static Java.Lang.String _ACTION_SIM_ACCOUNTS_CHANGEDContent = default;
            private static bool _ACTION_SIM_ACCOUNTS_CHANGEDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SimContacts.html#getSimAccounts(android.content.ContentResolver)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentResolver"/></param>
            /// <returns><see cref="Java.Util.List"/></returns>
            public static Java.Util.List<Android.Provider.ContactsContract.SimAccount> GetSimAccounts(Android.Content.ContentResolver arg0)
            {
                return SExecuteWithSignature<Java.Util.List<Android.Provider.ContactsContract.SimAccount>>(LocalBridgeClazz, "getSimAccounts", "(Landroid/content/ContentResolver;)Ljava/util/List;", arg0);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region StatusUpdates implementation
        public partial class StatusUpdates
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.StatusUpdates.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.StatusUpdates.html#PROFILE_CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri PROFILE_CONTENT_URI { get { if (!_PROFILE_CONTENT_URIReady) { _PROFILE_CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "PROFILE_CONTENT_URI"); _PROFILE_CONTENT_URIReady = true; } return _PROFILE_CONTENT_URIContent; } }
            private static Android.Net.Uri _PROFILE_CONTENT_URIContent = default;
            private static bool _PROFILE_CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.StatusUpdates.html#CONTENT_ITEM_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_ITEM_TYPE { get { if (!_CONTENT_ITEM_TYPEReady) { _CONTENT_ITEM_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_ITEM_TYPE"); _CONTENT_ITEM_TYPEReady = true; } return _CONTENT_ITEM_TYPEContent; } }
            private static Java.Lang.String _CONTENT_ITEM_TYPEContent = default;
            private static bool _CONTENT_ITEM_TYPEReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.StatusUpdates.html#CONTENT_TYPE"/>
            /// </summary>
            public static Java.Lang.String CONTENT_TYPE { get { if (!_CONTENT_TYPEReady) { _CONTENT_TYPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_TYPE"); _CONTENT_TYPEReady = true; } return _CONTENT_TYPEContent; } }
            private static Java.Lang.String _CONTENT_TYPEContent = default;
            private static bool _CONTENT_TYPEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.StatusUpdates.html#getPresenceIconResourceId(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="int"/></returns>
            public static int GetPresenceIconResourceId(int arg0)
            {
                return SExecuteWithSignature<int>(LocalBridgeClazz, "getPresenceIconResourceId", "(I)I", arg0);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.StatusUpdates.html#getPresencePrecedence(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="int"/></returns>
            public static int GetPresencePrecedence(int arg0)
            {
                return SExecuteWithSignature<int>(LocalBridgeClazz, "getPresencePrecedence", "(I)I", arg0);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SyncState implementation
        public partial class SyncState
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SyncState.html#CONTENT_URI"/>
            /// </summary>
            public static Android.Net.Uri CONTENT_URI { get { if (!_CONTENT_URIReady) { _CONTENT_URIContent = SGetField<Android.Net.Uri>(LocalBridgeClazz, "CONTENT_URI"); _CONTENT_URIReady = true; } return _CONTENT_URIContent; } }
            private static Android.Net.Uri _CONTENT_URIContent = default;
            private static bool _CONTENT_URIReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SyncState.html#CONTENT_DIRECTORY"/>
            /// </summary>
            public static Java.Lang.String CONTENT_DIRECTORY { get { if (!_CONTENT_DIRECTORYReady) { _CONTENT_DIRECTORYContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONTENT_DIRECTORY"); _CONTENT_DIRECTORYReady = true; } return _CONTENT_DIRECTORYContent; } }
            private static Java.Lang.String _CONTENT_DIRECTORYContent = default;
            private static bool _CONTENT_DIRECTORYReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SyncState.html#newSetOperation(android.accounts.Account,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Accounts.Account"/></param>
            /// <param name="arg1"><see cref="byte"/></param>
            /// <returns><see cref="Android.Content.ContentProviderOperation"/></returns>
            public static Android.Content.ContentProviderOperation NewSetOperation(Android.Accounts.Account arg0, byte[] arg1)
            {
                return SExecute<Android.Content.ContentProviderOperation>(LocalBridgeClazz, "newSetOperation", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SyncState.html#getWithUri(android.content.ContentProviderClient,android.accounts.Account)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentProviderClient"/></param>
            /// <param name="arg1"><see cref="Android.Accounts.Account"/></param>
            /// <returns><see cref="Android.Util.Pair"/></returns>
            /// <exception cref="Android.Os.RemoteException"/>
            public static Android.Util.Pair<Android.Net.Uri, byte[]> GetWithUri(Android.Content.ContentProviderClient arg0, Android.Accounts.Account arg1)
            {
                return SExecute<Android.Util.Pair<Android.Net.Uri, byte[]>>(LocalBridgeClazz, "getWithUri", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SyncState.html#get(android.content.ContentProviderClient,android.accounts.Account)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentProviderClient"/></param>
            /// <param name="arg1"><see cref="Android.Accounts.Account"/></param>
            /// <returns><see cref="byte"/></returns>
            /// <exception cref="Android.Os.RemoteException"/>
            public static byte[] Get(Android.Content.ContentProviderClient arg0, Android.Accounts.Account arg1)
            {
                return SExecuteArray<byte>(LocalBridgeClazz, "get", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://developer.android.com/reference/android/provider/ContactsContract.SyncState.html#set(android.content.ContentProviderClient,android.accounts.Account,byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="Android.Content.ContentProviderClient"/></param>
            /// <param name="arg1"><see cref="Android.Accounts.Account"/></param>
            /// <param name="arg2"><see cref="byte"/></param>
            /// <exception cref="Android.Os.RemoteException"/>
            public static void Set(Android.Content.ContentProviderClient arg0, Android.Accounts.Account arg1, byte[] arg2)
            {
                SExecute(LocalBridgeClazz, "set", arg0, arg1, arg2);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}
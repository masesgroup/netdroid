/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*  using android.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Android.Provider
{
    #region LiveFolders declaration
    /// <summary>
    /// <see href="https://developer.android.com/reference/android/provider/LiveFolders.html"/>
    /// </summary>
    [global::System.Obsolete()]
    public partial class LiveFolders : Android.Provider.BaseColumns
    {
        const string _bridgeClassName = "android.provider.LiveFolders";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public LiveFolders() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public LiveFolders(params object[] args) : base(args) { }
    
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
    
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;
    
        // TODO: complete the class
    
    }
    #endregion

    #region LiveFolders implementation
    public partial class LiveFolders
    {
        #region Constructors
    
        #endregion
    
        #region Class/Interface conversion operators
    
        #endregion
    
        #region Fields
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/LiveFolders.html#DISPLAY_MODE_GRID"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int DISPLAY_MODE_GRID { get { if (!_DISPLAY_MODE_GRIDReady) { _DISPLAY_MODE_GRIDContent = SGetField<int>(LocalBridgeClazz, "DISPLAY_MODE_GRID"); _DISPLAY_MODE_GRIDReady = true; } return _DISPLAY_MODE_GRIDContent; } }
        private static int _DISPLAY_MODE_GRIDContent = default;
        private static bool _DISPLAY_MODE_GRIDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/LiveFolders.html#DISPLAY_MODE_LIST"/>
        /// </summary>
        [global::System.Obsolete()]
        public static int DISPLAY_MODE_LIST { get { if (!_DISPLAY_MODE_LISTReady) { _DISPLAY_MODE_LISTContent = SGetField<int>(LocalBridgeClazz, "DISPLAY_MODE_LIST"); _DISPLAY_MODE_LISTReady = true; } return _DISPLAY_MODE_LISTContent; } }
        private static int _DISPLAY_MODE_LISTContent = default;
        private static bool _DISPLAY_MODE_LISTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/LiveFolders.html#ACTION_CREATE_LIVE_FOLDER"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String ACTION_CREATE_LIVE_FOLDER { get { if (!_ACTION_CREATE_LIVE_FOLDERReady) { _ACTION_CREATE_LIVE_FOLDERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACTION_CREATE_LIVE_FOLDER"); _ACTION_CREATE_LIVE_FOLDERReady = true; } return _ACTION_CREATE_LIVE_FOLDERContent; } }
        private static Java.Lang.String _ACTION_CREATE_LIVE_FOLDERContent = default;
        private static bool _ACTION_CREATE_LIVE_FOLDERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/LiveFolders.html#DESCRIPTION"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String DESCRIPTION { get { if (!_DESCRIPTIONReady) { _DESCRIPTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DESCRIPTION"); _DESCRIPTIONReady = true; } return _DESCRIPTIONContent; } }
        private static Java.Lang.String _DESCRIPTIONContent = default;
        private static bool _DESCRIPTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/LiveFolders.html#EXTRA_LIVE_FOLDER_BASE_INTENT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_LIVE_FOLDER_BASE_INTENT { get { if (!_EXTRA_LIVE_FOLDER_BASE_INTENTReady) { _EXTRA_LIVE_FOLDER_BASE_INTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_LIVE_FOLDER_BASE_INTENT"); _EXTRA_LIVE_FOLDER_BASE_INTENTReady = true; } return _EXTRA_LIVE_FOLDER_BASE_INTENTContent; } }
        private static Java.Lang.String _EXTRA_LIVE_FOLDER_BASE_INTENTContent = default;
        private static bool _EXTRA_LIVE_FOLDER_BASE_INTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/LiveFolders.html#EXTRA_LIVE_FOLDER_DISPLAY_MODE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_LIVE_FOLDER_DISPLAY_MODE { get { if (!_EXTRA_LIVE_FOLDER_DISPLAY_MODEReady) { _EXTRA_LIVE_FOLDER_DISPLAY_MODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_LIVE_FOLDER_DISPLAY_MODE"); _EXTRA_LIVE_FOLDER_DISPLAY_MODEReady = true; } return _EXTRA_LIVE_FOLDER_DISPLAY_MODEContent; } }
        private static Java.Lang.String _EXTRA_LIVE_FOLDER_DISPLAY_MODEContent = default;
        private static bool _EXTRA_LIVE_FOLDER_DISPLAY_MODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/LiveFolders.html#EXTRA_LIVE_FOLDER_ICON"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_LIVE_FOLDER_ICON { get { if (!_EXTRA_LIVE_FOLDER_ICONReady) { _EXTRA_LIVE_FOLDER_ICONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_LIVE_FOLDER_ICON"); _EXTRA_LIVE_FOLDER_ICONReady = true; } return _EXTRA_LIVE_FOLDER_ICONContent; } }
        private static Java.Lang.String _EXTRA_LIVE_FOLDER_ICONContent = default;
        private static bool _EXTRA_LIVE_FOLDER_ICONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/LiveFolders.html#EXTRA_LIVE_FOLDER_NAME"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String EXTRA_LIVE_FOLDER_NAME { get { if (!_EXTRA_LIVE_FOLDER_NAMEReady) { _EXTRA_LIVE_FOLDER_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXTRA_LIVE_FOLDER_NAME"); _EXTRA_LIVE_FOLDER_NAMEReady = true; } return _EXTRA_LIVE_FOLDER_NAMEContent; } }
        private static Java.Lang.String _EXTRA_LIVE_FOLDER_NAMEContent = default;
        private static bool _EXTRA_LIVE_FOLDER_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/LiveFolders.html#ICON_BITMAP"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String ICON_BITMAP { get { if (!_ICON_BITMAPReady) { _ICON_BITMAPContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ICON_BITMAP"); _ICON_BITMAPReady = true; } return _ICON_BITMAPContent; } }
        private static Java.Lang.String _ICON_BITMAPContent = default;
        private static bool _ICON_BITMAPReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/LiveFolders.html#ICON_PACKAGE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String ICON_PACKAGE { get { if (!_ICON_PACKAGEReady) { _ICON_PACKAGEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ICON_PACKAGE"); _ICON_PACKAGEReady = true; } return _ICON_PACKAGEContent; } }
        private static Java.Lang.String _ICON_PACKAGEContent = default;
        private static bool _ICON_PACKAGEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/LiveFolders.html#ICON_RESOURCE"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String ICON_RESOURCE { get { if (!_ICON_RESOURCEReady) { _ICON_RESOURCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ICON_RESOURCE"); _ICON_RESOURCEReady = true; } return _ICON_RESOURCEContent; } }
        private static Java.Lang.String _ICON_RESOURCEContent = default;
        private static bool _ICON_RESOURCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/LiveFolders.html#INTENT"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String INTENT { get { if (!_INTENTReady) { _INTENTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTENT"); _INTENTReady = true; } return _INTENTContent; } }
        private static Java.Lang.String _INTENTContent = default;
        private static bool _INTENTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://developer.android.com/reference/android/provider/LiveFolders.html#NAME"/>
        /// </summary>
        [global::System.Obsolete()]
        public static Java.Lang.String NAME { get { if (!_NAMEReady) { _NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NAME"); _NAMEReady = true; } return _NAMEContent; } }
        private static Java.Lang.String _NAMEContent = default;
        private static bool _NAMEReady = false; // this is used because in case of generics 
    
        #endregion
    
        #region Static methods
    
        #endregion
    
        #region Instance methods
    
        #endregion
    
        #region Nested classes
    
        #endregion
    
        // TODO: complete the class
    }
    #endregion
}